diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..12f0d4caaa 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,7 +83,7 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..de1d3d0ba8 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,6 +69,11 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
+    if element_id is None:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
     return format_html(
         '<script id="{}" type="application/json">{}</script>',
         element_id, mark_safe(json_str)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f14d6dba5b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from django.utils.html import json_script
+
+# Test case 1: Using json_script with element_id (should work)
+print("Test 1: With element_id")
+result1 = json_script({"key": "value"}, "test_id")
+print(result1)
+
+# Test case 2: Using json_script without element_id (should fail currently)
+print("\nTest 2: Without element_id")
+try:
+    result2 = json_script({"key": "value"})
+    print(result2)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 3: Using json_script with None as element_id
+print("\nTest 3: With None as element_id")
+try:
+    result3 = json_script({"key": "value"}, None)
+    print(result3)
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/simple_template_test.py b/simple_template_test.py
new file mode 100644
index 0000000000..c7bafdfe87
--- /dev/null
+++ b/simple_template_test.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+from django.template import Engine
+from django.template.base import TemplateSyntaxError
+
+def test_template_filter():
+    # Create a minimal template engine
+    engine = Engine()
+    
+    # Test with element_id
+    template_with_id = engine.from_string('{{ value|json_script:"test_id" }}')
+    result_with_id = template_with_id.render({'value': {'key': 'value'}})
+    expected_with_id = '<script id="test_id" type="application/json">{"key": "value"}</script>'
+    
+    print("✓ Test with element_id:")
+    print(f"  Expected: {expected_with_id}")
+    print(f"  Got:      {result_with_id}")
+    print(f"  Match:    {result_with_id == expected_with_id}")
+    
+    # Test without element_id
+    template_without_id = engine.from_string('{{ value|json_script }}')
+    result_without_id = template_without_id.render({'value': {'key': 'value'}})
+    expected_without_id = '<script type="application/json">{"key": "value"}</script>'
+    
+    print("\n✓ Test without element_id:")
+    print(f"  Expected: {expected_without_id}")
+    print(f"  Got:      {result_without_id}")
+    print(f"  Match:    {result_without_id == expected_without_id}")
+    
+    # Test with None as element_id
+    template_with_none = engine.from_string('{{ value|json_script:None }}')
+    result_with_none = template_with_none.render({'value': {'key': 'value'}})
+    expected_with_none = '<script type="application/json">{"key": "value"}</script>'
+    
+    print("\n✓ Test with None element_id:")
+    print(f"  Expected: {expected_with_none}")
+    print(f"  Got:      {result_with_none}")
+    print(f"  Match:    {result_with_none == expected_with_none}")
+
+if __name__ == '__main__':
+    import os
+    import django
+    from django.conf import settings
+    
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='test-secret-key',
+            USE_TZ=True,
+            TEMPLATES=[{
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            }]
+        )
+        django.setup()
+    
+    test_template_filter()
+    print("\nAll template filter tests completed!")
\ No newline at end of file
diff --git a/test_template_usage.py b/test_template_usage.py
new file mode 100644
index 0000000000..5f717659dd
--- /dev/null
+++ b/test_template_usage.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+from django.template import Template, Context
+from django.test import SimpleTestCase
+
+class TestJsonScriptTemplate(SimpleTestCase):
+    
+    def test_json_script_with_id(self):
+        template = Template('{{ value|json_script:"test_id" }}')
+        context = Context({'value': {'key': 'value'}})
+        result = template.render(context)
+        expected = '<script id="test_id" type="application/json">{"key": "value"}</script>'
+        self.assertEqual(result, expected)
+        print("✓ Test with element_id passed")
+    
+    def test_json_script_without_id(self):
+        template = Template('{{ value|json_script }}')
+        context = Context({'value': {'key': 'value'}})
+        result = template.render(context)
+        expected = '<script type="application/json">{"key": "value"}</script>'
+        self.assertEqual(result, expected)
+        print("✓ Test without element_id passed")
+        
+    def test_json_script_with_none_id(self):
+        template = Template('{{ value|json_script:None }}')
+        context = Context({'value': {'key': 'value'}})
+        result = template.render(context)
+        expected = '<script type="application/json">{"key": "value"}</script>'
+        self.assertEqual(result, expected)
+        print("✓ Test with None element_id passed")
+
+if __name__ == '__main__':
+    import os
+    import django
+    from django.conf import settings
+    
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='test-secret-key',
+            USE_TZ=True,
+        )
+        django.setup()
+    
+    test = TestJsonScriptTemplate()
+    test.test_json_script_with_id()
+    test.test_json_script_without_id()
+    test.test_json_script_with_none_id()
+    print("\nAll template tests passed! ✓")
\ No newline at end of file
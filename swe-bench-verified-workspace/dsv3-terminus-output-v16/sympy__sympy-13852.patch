diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4d70799e6e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, Rational, expand_func, nsimplify, pi, log
+from sympy import symbols
+
+print("Reproducing the issue with polylog evaluation...")
+
+# Test case 1: polylog(2, 1/2) should evaluate to -log(2)**2/2 + pi**2/12
+result1 = polylog(2, Rational(1, 2))
+print(f"polylog(2, Rational(1,2)) = {result1}")
+
+result1_expanded = polylog(2, Rational(1,2)).expand(func=True)
+print(f"polylog(2, Rational(1,2)).expand(func=True) = {result1_expanded}")
+
+# Expected result: -log(2)**2/2 + pi**2/12
+expected1 = -log(2)**2/2 + pi**2/12
+print(f"Expected: {expected1}")
+
+# Test case 2: polylog(1, z) should not have exp_polar in the expansion
+z = symbols('z')
+result2 = expand_func(polylog(1, z))
+print(f"expand_func(polylog(1, z)) = {result2}")
+
+# Expected result: -log(1 - z)
+expected2 = -log(1 - z)
+print(f"Expected: {expected2}")
+
+# Test case 3: Check if the derivative issue exists
+from sympy import diff
+derivative_issue = expand_func(diff(polylog(1, z) - expand_func(polylog(1, z)), z))
+print(f"Derivative issue check: {derivative_issue}")
+print(f"Should simplify to 0: {derivative_issue.simplify()}")
+
+# Test case 4: Check if they have the same derivative
+deriv1 = diff(polylog(1, z), z)
+deriv2 = diff(-log(1 - z), z)
+print(f"Derivative of polylog(1, z): {deriv1}")
+print(f"Derivative of -log(1 - z): {deriv2}")
+print(f"Are they equal? {deriv1 == deriv2}")
\ No newline at end of file
diff --git a/sympy/functions/special/tests/test_zeta_functions.py b/sympy/functions/special/tests/test_zeta_functions.py
index 3911dadd10..494a387772 100644
--- a/sympy/functions/special/tests/test_zeta_functions.py
+++ b/sympy/functions/special/tests/test_zeta_functions.py
@@ -128,7 +128,7 @@ def test_polylog_expansion():
     assert polylog(s, 1) == zeta(s)
     assert polylog(s, -1) == -dirichlet_eta(s)
 
-    assert myexpand(polylog(1, z), -log(1 + exp_polar(-I*pi)*z))
+    assert myexpand(polylog(1, z), -log(1 - z))
     assert myexpand(polylog(0, z), z/(1 - z))
     assert myexpand(polylog(-1, z), z**2/(1 - z)**2 + z/(1 - z))
     assert myexpand(polylog(-5, z), None)
diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py
index b8e2b66195..cb5269a7c9 100644
--- a/sympy/functions/special/zeta_functions.py
+++ b/sympy/functions/special/zeta_functions.py
@@ -271,12 +271,24 @@ class polylog(Function):
 
     @classmethod
     def eval(cls, s, z):
+        from sympy import Rational, pi, log, I
         if z == 1:
             return zeta(s)
         elif z == -1:
             return -dirichlet_eta(s)
         elif z == 0:
             return 0
+        
+        # Special values for s=2
+        if s == 2:
+            if z == Rational(1, 2):
+                return -log(2)**2/2 + pi**2/12
+            elif z == 2:
+                return pi**2/4 - log(2)**2/2 - I*pi*log(2)
+            elif z == -1:
+                return -pi**2/12
+            elif z == Rational(-1, 2):
+                return -pi**2/12 + log(2)**2/2
 
     def fdiff(self, argindex=1):
         s, z = self.args
@@ -291,7 +303,7 @@ def _eval_expand_func(self, **hints):
         from sympy import log, expand_mul, Dummy, exp_polar, I
         s, z = self.args
         if s == 1:
-            return -log(1 + exp_polar(-I*pi)*z)
+            return -log(1 - z)
         if s.is_Integer and s <= 0:
             u = Dummy('u')
             start = u/(1 - u)
diff --git a/test_derivatives.py b/test_derivatives.py
new file mode 100644
index 0000000000..b606d97da6
--- /dev/null
+++ b/test_derivatives.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, diff, symbols, simplify, log
+
+z = symbols('z')
+
+# Test if the derivatives are mathematically equivalent
+deriv1 = diff(polylog(1, z), z)
+deriv2 = diff(-log(1 - z), z)
+
+print(f"Derivative of polylog(1, z): {deriv1}")
+print(f"Derivative of -log(1 - z): {deriv2}")
+print(f"Are they mathematically equal? {simplify(deriv1 - deriv2) == 0}")
+
+# Test with specific values
+test_value = 0.5
+result1 = deriv1.subs(z, test_value).evalf()
+result2 = deriv2.subs(z, test_value).evalf()
+
+print(f"At z={test_value}:")
+print(f"  polylog derivative: {result1}")
+print(f"  -log derivative: {result2}")
+print(f"  Difference: {result1 - result2}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..dbfd521400
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, Rational, expand_func, pi, log, symbols
+
+print("Testing edge cases for polylog...")
+
+# Test case 1: polylog(2, 1/2) - already tested
+result1 = polylog(2, Rational(1, 2))
+print(f"polylog(2, 1/2) = {result1}")
+
+# Test case 2: polylog(2, 2)
+result2 = polylog(2, 2)
+print(f"polylog(2, 2) = {result2}")
+
+# Test case 3: polylog(2, -1)
+result3 = polylog(2, -1)
+print(f"polylog(2, -1) = {result3}")
+
+# Test case 4: polylog(2, -1/2)
+result4 = polylog(2, Rational(-1, 2))
+print(f"polylog(2, -1/2) = {result4}")
+
+# Test case 5: polylog(1, z) expansion
+z = symbols('z')
+result5 = expand_func(polylog(1, z))
+print(f"expand_func(polylog(1, z)) = {result5}")
+
+# Test case 6: Verify polylog(1, z) equals -log(1 - z) for specific values
+test_values = [0.1, 0.5, 0.9]
+for val in test_values:
+    poly_val = polylog(1, val).evalf()
+    log_val = (-log(1 - val)).evalf()
+    print(f"z={val}: polylog(1, z)={poly_val}, -log(1-z)={log_val}, diff={abs(poly_val - log_val)}")
+
+# Test case 7: Verify polylog(2, 1/2) equals expected value
+expected = -log(2)**2/2 + pi**2/12
+print(f"polylog(2, 1/2) == expected: {result1 == expected}")
\ No newline at end of file
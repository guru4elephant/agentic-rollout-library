diff --git a/analyzer_test.py b/analyzer_test.py
new file mode 100644
index 000000000..b78badd7e
--- /dev/null
+++ b/analyzer_test.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+"""Test to understand how ModuleAnalyzer handles type alias docstrings."""
+
+from sphinx.pycode import ModuleAnalyzer
+
+# Create a simple test module
+test_module_content = '''
+from typing import Dict, Any, Union
+
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written.
+"""
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Test ModuleAnalyzer
+analyzer = ModuleAnalyzer.for_module('test_module')
+analyzer.analyze()
+
+print("attr_docs contents:")
+for key, value in analyzer.attr_docs.items():
+    print(f"  {key}: {value}")
+
+print("\nTesting specific keys:")
+for attr_name in ['ScaffoldOpts', 'FileContents']:
+    key = ('', attr_name)
+    if key in analyzer.attr_docs:
+        print(f"  {key}: {analyzer.attr_docs[key]}")
+    else:
+        print(f"  {key}: NOT FOUND")
\ No newline at end of file
diff --git a/reproduce_github_issue.py b/reproduce_github_issue.py
new file mode 100644
index 000000000..78ce1d898
--- /dev/null
+++ b/reproduce_github_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""Reproduction case for the GitHub issue."""
+
+from pathlib import Path
+from typing import Any, Callable, Dict, Union
+
+# Signatures for the documentation purposes
+
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options, see ``pyscaffold.api.create_project``.
+Should be treated as immutable (if required, copy before changing).
+
+Please notice some behaviours given by the options **SHOULD** be observed. For example,
+files should be overwritten when the **force** option is ``True``. Similarly when
+**pretend** is ``True``, no operation should be really performed, but any action should
+be logged as if realized.
+"""
+
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written to
+disk (empty files are represented by an empty string ``""`` as content).
+"""
+
+FileOp = Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+"""Signature of functions considered file operations::
+
+    Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+
+- **path** (:obj:`pathlib.Path`): file path potentially to be written to/changed
+  in the disk.
+- **contents** (:obj:`FileContents`): usually a string that represents a text content
+  of the file. :obj:`None` indicates the file should not be written.
+- **opts** (:obj:`ScaffoldOpts`): a dict with PyScaffold's options.
+
+If the file is written (or more generally changed, such as new access permissions),
+by convention they should return the :obj:`file path <pathlib.Path>`.
+If no file was touched, :obj:`None` should be returned. Please notice a **FileOp**
+might return :obj:`None` if a pre-existing file in the disk is not modified.
+
+.. note::
+    A **FileOp** usually has side effects (e.g. write a file to the disk), see
+    :obj:`FileFileContents` and :obj:`ScaffoldOpts` for other conventions.
+"""
+
+if __name__ == "__main__":
+    print("Type aliases defined:")
+    print(f"ScaffoldOpts: {ScaffoldOpts}")
+    print(f"FileContents: {FileContents}") 
+    print(f"FileOp: {FileOp}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..b08fd65e3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""Script to reproduce the type alias documentation issue."""
+
+from pathlib import Path
+from typing import Any, Callable, Dict, Union
+
+# Signatures for the documentation purposes
+
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options, see ``pyscaffold.api.create_project``.
+Should be treated as immutable (if required, copy before changing).
+
+Please notice some behaviours given by the options **SHOULD** be observed. For example,
+files should be overwritten when the **force** option is ``True``. Similarly when
+**pretend** is ``True``, no operation should be really performed, but any action should
+be logged as if realized.
+"""
+
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written to
+disk (empty files are represented by an empty string ``""`` as content).
+"""
+
+FileOp = Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+"""Signature of functions considered file operations::
+
+    Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+
+- **path** (:obj:`pathlib.Path`): file path potentially to be written to/changed
+  in the disk.
+- **contents** (:obj:`FileContents`): usually a string that represents a text content
+  of the file. :obj:`None` indicates the file should not be written.
+- **opts** (:obj:`ScaffoldOpts`): a dict with PyScaffold's options.
+
+If the file is written (or more generally changed, such as new access permissions),
+by convention they should return the :obj:`file path <pathlib.Path>`.
+If no file was touched, :obj:`None` should be returned. Please notice a **FileOp**
+might return :obj:`None` if a pre-existing file in the disk is not modified.
+
+.. note::
+    A **FileOp** usually has side effects (e.g. write a file to the disk), see
+    :obj:`FileFileContents` and :obj:`ScaffoldOpts` for other conventions.
+"""
+
+if __name__ == "__main__":
+    print("Type aliases defined:")
+    print(f"ScaffoldOpts: {ScaffoldOpts}")
+    print(f"FileContents: {FileContents}")
+    print(f"FileOp: {FileOp}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index b669afc00..0986baec3 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_documenter_test.py b/simple_documenter_test.py
new file mode 100644
index 000000000..72be8a3d2
--- /dev/null
+++ b/simple_documenter_test.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""Simple test to verify DataDocumenter behavior with the fix."""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.ext.autodoc import DataDocumenter
+from sphinx.util import inspect as sphinx_inspect
+
+# Create a test module
+test_module_content = '''
+from typing import Dict, Any, Union
+
+# Type alias with docstring
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+# Type alias without docstring
+SimpleAlias = Dict[str, str]
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Import the test module
+import test_module
+
+# Test DataDocumenter for each type alias
+for attr_name in ['ScaffoldOpts', 'SimpleAlias']:
+    print(f"\nTesting {attr_name}:")
+    
+    # Create a mock directive with minimal required attributes
+    class MockDirective:
+        def __init__(self):
+            self.state = None
+            self.env = None
+            self.config = None
+    
+    directive = MockDirective()
+    
+    documenter = DataDocumenter(directive, attr_name)
+    documenter.objpath = [attr_name]
+    documenter.parent = test_module
+    documenter.object = getattr(test_module, attr_name)
+    documenter.modname = 'test_module'
+    
+    # Set minimal config
+    documenter.config = type('Config', (), {'autodoc_type_aliases': {}})()
+    
+    # Import the object
+    success = documenter.import_object()
+    print(f"Import success: {success}")
+    print(f"doc_as_attr: {documenter.doc_as_attr}")
+    
+    # Get the docstring
+    doc = documenter.get_doc()
+    print(f"Docstring: {doc}")
+    
+    # Check if it's a generic alias
+    is_generic_alias = sphinx_inspect.isgenericalias(documenter.object)
+    print(f"Is generic alias: {is_generic_alias}")
+    
+    # Test content generation - manually call update_content
+    more_content = []
+    documenter.update_content(more_content)
+    print(f"Update content: {more_content}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 000000000..96a2e4775
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+"""Simple test to understand the type alias documentation issue."""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.ext.autodoc import DataDocumenter
+from sphinx.util import inspect as sphinx_inspect
+
+# Create a simple test module
+test_module_content = '''
+from typing import Dict, Any
+
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options."
+Should be treated as immutable.
+"""
+
+FileContents = str
+"""When the file content is ``None``, the file should not be written.
+"""
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Import the test module
+import test_module
+
+# Test DataDocumenter for each type alias
+for attr_name in ['ScaffoldOpts', 'FileContents']:
+    print(f"\nTesting {attr_name}:")
+    documenter = DataDocumenter(directive=None, name=attr_name)
+    documenter.objpath = [attr_name]
+    documenter.parent = test_module
+    documenter.object = getattr(test_module, attr_name)
+    documenter.modname = 'test_module'
+    
+    # Import the object
+    success = documenter.import_object()
+    print(f"Import success: {success}")
+    print(f"doc_as_attr: {documenter.doc_as_attr}")
+    
+    # Get the docstring
+    doc = documenter.get_doc()
+    print(f"Docstring: {doc}")
+    
+    # Check if it's a generic alias
+    is_generic_alias = sphinx_inspect.isgenericalias(documenter.object)
+    print(f"Is generic alias: {is_generic_alias}")
+    
+    # Test get_module_comment
+    comment = documenter.get_module_comment(attr_name)
+    print(f"Module comment: {comment}")
\ No newline at end of file
diff --git a/test_docstring_access.py b/test_docstring_access.py
new file mode 100644
index 000000000..b626f7f88
--- /dev/null
+++ b/test_docstring_access.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+"""Test to check if type aliases with docstrings have accessible docstrings."""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.util.inspect import getdoc
+
+# Create a test module with type aliases using docstring syntax
+test_module_content = '''
+from typing import Dict, Any, Union
+
+# Type alias with docstring on next line
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+# Type alias with docstring on next line  
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written.
+"""
+
+# Type alias without docstring
+SimpleAlias = Dict[str, str]
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Import the test module
+import test_module
+
+# Test if docstrings are accessible via getdoc
+for attr_name in ['ScaffoldOpts', 'FileContents', 'SimpleAlias']:
+    obj = getattr(test_module, attr_name)
+    doc = getdoc(obj)
+    print(f"{attr_name}: {doc}")
\ No newline at end of file
diff --git a/test_docstring_syntax.py b/test_docstring_syntax.py
new file mode 100644
index 000000000..6865d2f32
--- /dev/null
+++ b/test_docstring_syntax.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+"""Test to check different docstring syntaxes for type aliases."""
+
+from sphinx.pycode import ModuleAnalyzer
+
+# Test different docstring syntaxes
+test_module_content = '''
+from typing import Dict, Any, Union
+
+# Type alias with docstring on next line (issue case)
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+# Type alias with comment syntax (works)
+FileContents = Union[str, None]  #: When the file content is ``None``, the file should not be written.
+
+# Type alias without docstring
+SimpleAlias = Dict[str, str]
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Test ModuleAnalyzer
+analyzer = ModuleAnalyzer.for_module('test_module')
+analyzer.analyze()
+
+print("attr_docs contents:")
+for key, value in analyzer.attr_docs.items():
+    print(f"  {key}: {value}")
\ No newline at end of file
diff --git a/test_documenter.py b/test_documenter.py
new file mode 100644
index 000000000..caedf602d
--- /dev/null
+++ b/test_documenter.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+"""Test script to verify DataDocumenter behavior with the fix."""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.ext.autodoc import DataDocumenter
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+from docutils.parsers.rst import Parser
+from docutils.utils import new_document
+from docutils.frontend import OptionParser
+
+# Create a test module
+test_module_content = '''
+from typing import Dict, Any, Union, Callable
+from pathlib import Path
+
+# Type alias with docstring
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+# Type alias with docstring
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written.
+"""
+
+# Type alias without docstring
+SimpleAlias = Dict[str, str]
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Import the test module
+import test_module
+
+# Create a minimal Sphinx environment
+with docutils_namespace():
+    # Create a minimal config
+    app = Sphinx(srcdir='.', confdir='.', outdir='_build', doctreedir='_doctrees',
+                 buildername='dummy', confoverrides={'extensions': ['sphinx.ext.autodoc']}, 
+                 status=None, warning=None)
+    
+    # Create a directive bridge
+    from sphinx.ext.autodoc.directive import DocumenterBridge
+    from docutils.parsers.rst.states import Body
+    
+    # Create a minimal document
+    document = new_document('<test>')
+    document.settings = OptionParser().get_default_values()
+    
+    # Create a state
+    state = Body(document, Parser())
+    
+    # Create directive bridge
+    bridge = DocumenterBridge(state, 2, state.memo.reporter)
+    bridge.env = app.env
+    bridge.config = app.config
+    
+    # Test DataDocumenter for each type alias
+    for attr_name in ['ScaffoldOpts', 'FileContents', 'SimpleAlias']:
+        print(f"\nTesting {attr_name}:")
+        documenter = DataDocumenter(bridge, attr_name)
+        documenter.objpath = [attr_name]
+        documenter.parent = test_module
+        documenter.object = getattr(test_module, attr_name)
+        documenter.modname = 'test_module'
+        
+        # Import the object
+        success = documenter.import_object()
+        print(f"Import success: {success}")
+        print(f"doc_as_attr: {documenter.doc_as_attr}")
+        
+        # Get the docstring
+        doc = documenter.get_doc()
+        print(f"Docstring: {doc}")
+        
+        # Check if it's a generic alias
+        from sphinx.util import inspect as sphinx_inspect
+        is_generic_alias = sphinx_inspect.isgenericalias(documenter.object)
+        print(f"Is generic alias: {is_generic_alias}")
+        
+        # Test content generation
+        more_content = []
+        documenter.add_content(more_content)
+        print(f"Content: {more_content}")
+        
+        # Test update_content specifically
+        more_content2 = []
+        documenter.update_content(more_content2)
+        print(f"Update content: {more_content2}")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..1ebb369ef
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""Test script to verify the type alias documentation fix."""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.pycode import ModuleAnalyzer
+
+# Create a test module with various type aliases
+test_module_content = '''
+from typing import Dict, Any, Union, Callable
+from pathlib import Path
+
+# Type alias with docstring
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+# Type alias with docstring
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written.
+"""
+
+# Type alias with docstring
+FileOp = Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+"""Signature of functions considered file operations.
+"""
+
+# Type alias without docstring (should show "alias of")
+SimpleAlias = Dict[str, str]
+
+# Regular variable with docstring
+regular_var = "test"
+"""This is a regular variable docstring.
+"""
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Test ModuleAnalyzer
+analyzer = ModuleAnalyzer.for_module('test_module')
+analyzer.analyze()
+
+print("attr_docs contents:")
+for key, value in analyzer.attr_docs.items():
+    print(f"  {key}: {value}")
+
+print("\nTesting specific type aliases:")
+for attr_name in ['ScaffoldOpts', 'FileContents', 'FileOp', 'SimpleAlias', 'regular_var']:
+    key = ('', attr_name)
+    if key in analyzer.attr_docs:
+        doc_content = analyzer.attr_docs[key]
+        has_docstring = any(line.strip() for line in doc_content if line.strip())
+        print(f"  {attr_name}: {'HAS DOCSTRING' if has_docstring else 'NO DOCSTRING'} -> {doc_content}")
+    else:
+        print(f"  {attr_name}: NOT FOUND IN attr_docs")
\ No newline at end of file
diff --git a/test_github_case.py b/test_github_case.py
new file mode 100644
index 000000000..4a036eeeb
--- /dev/null
+++ b/test_github_case.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""Test the exact GitHub issue case with ModuleAnalyzer."""
+
+from sphinx.pycode import ModuleAnalyzer
+
+# Create the exact test case from GitHub issue
+test_module_content = '''
+from pathlib import Path
+from typing import Any, Callable, Dict, Union
+
+# Signatures for the documentation purposes
+
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options, see ``pyscaffold.api.create_project``.
+Should be treated as immutable (if required, copy before changing).
+
+Please notice some behaviours given by the options **SHOULD** be observed. For example,
+files should be overwritten when the **force** option is ``True``. Similarly when
+**pretend** is ``True``, no operation should be really performed, but any action should
+be logged as if realized.
+"""
+
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written to
+disk (empty files are represented by an empty string ``""`` as content).
+"""
+
+FileOp = Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+"""Signature of functions considered file operations::
+
+    Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+
+- **path** (:obj:`pathlib.Path`): file path potentially to be written to/changed
+  in the disk.
+- **contents** (:obj:`FileContents`): usually a string that represents a text content
+  of the file. :obj:`None` indicates the file should not be written.
+- **opts** (:obj:`ScaffoldOpts`): a dict with PyScaffold's options.
+
+If the file is written (or more generally changed, such as new access permissions),
+by convention they should return the :obj:`file path <pathlib.Path>`.
+If no file was touched, :obj:`None` should be returned. Please notice a **FileOp**
+might return :obj:`None` if a pre-existing file in the disk is not modified.
+
+.. note::
+    A **FileOp** usually has side effects (e.g. write a file to the disk), see
+    :obj:`FileFileContents` and :obj:`ScaffoldOpts` for other conventions.
+"""
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Test ModuleAnalyzer
+analyzer = ModuleAnalyzer.for_module('test_module')
+analyzer.analyze()
+
+print("attr_docs contents:")
+for key, value in analyzer.attr_docs.items():
+    print(f"  {key}: {value}")
+
+print("\nTesting specific keys:")
+for attr_name in ['ScaffoldOpts', 'FileContents', 'FileOp']:
+    key = ('', attr_name)
+    if key in analyzer.attr_docs:
+        doc_content = analyzer.attr_docs[key]
+        has_docstring = any(line.strip() for line in doc_content if line.strip())
+        print(f"  {attr_name}: {'HAS DOCSTRING' if has_docstring else 'NO DOCSTRING'} -> {doc_content}")
+    else:
+        print(f"  {attr_name}: NOT FOUND IN attr_docs")
\ No newline at end of file
diff --git a/test_module.py b/test_module.py
new file mode 100644
index 000000000..6d3149fb5
--- /dev/null
+++ b/test_module.py
@@ -0,0 +1,14 @@
+
+from typing import Dict, Any, Union
+
+# Type alias with docstring on next line (issue case)
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+# Type alias with comment syntax (works)
+FileContents = Union[str, None]  #: When the file content is ``None``, the file should not be written.
+
+# Type alias without docstring
+SimpleAlias = Dict[str, str]
diff --git a/test_module_comment.py b/test_module_comment.py
new file mode 100644
index 000000000..83acaccbc
--- /dev/null
+++ b/test_module_comment.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+"""Test to check what get_module_comment returns for different docstring syntaxes."""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.ext.autodoc import DataDocumenter
+
+# Create a test module with different docstring syntaxes
+test_module_content = '''
+from typing import Dict, Any, Union
+
+# Type alias with docstring on next line (issue case)
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options.
+Should be treated as immutable.
+"""
+
+# Type alias with comment syntax (works)
+FileContents = Union[str, None]  #: When the file content is ``None``, the file should not be written.
+
+# Type alias without docstring
+SimpleAlias = Dict[str, str]
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Import the test module
+import test_module
+
+# Create a minimal DataDocumenter instance to test get_module_comment
+documenter = DataDocumenter.__new__(DataDocumenter)
+documenter.modname = 'test_module'
+
+# Test get_module_comment for each type alias
+for attr_name in ['ScaffoldOpts', 'FileContents', 'SimpleAlias']:
+    comment = documenter.get_module_comment(attr_name)
+    print(f"{attr_name}: {comment}")
\ No newline at end of file
diff --git a/test_reproduce.py b/test_reproduce.py
new file mode 100644
index 000000000..53e449109
--- /dev/null
+++ b/test_reproduce.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the type alias documentation issue."""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.ext.autodoc import DataDocumenter
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+from sphinx.util import logging
+
+# Create a simple test module
+test_module_content = '''
+from pathlib import Path
+from typing import Any, Callable, Dict, Union
+
+# Signatures for the documentation purposes
+
+ScaffoldOpts = Dict[str, Any]
+"""Dictionary with PyScaffold's options, see ``pyscaffold.api.create_project``.
+Should be treated as immutable (if required, copy before changing).
+
+Please notice some behaviours given by the options **SHOULD** be observed. For example,
+files should be overwritten when the **force** option is ``True``. Similarly when
+**pretend** is ``True``, no operation should be really performed, but any action should
+be logged as if realized.
+"""
+
+FileContents = Union[str, None]
+"""When the file content is ``None``, the file should not be written to
+disk (empty files are represented by an empty string ``""`` as content).
+"""
+
+FileOp = Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+"""Signature of functions considered file operations::
+
+    Callable[[Path, FileContents, ScaffoldOpts], Union[Path, None]]
+
+- **path** (:obj:`pathlib.Path`): file path potentially to be written to/changed
+  in the disk.
+- **contents** (:obj:`FileContents`): usually a string that represents a text content
+  of the file. :obj:`None` indicates the file should not be written.
+- **opts** (:obj:`ScaffoldOpts`): a dict with PyScaffold's options.
+
+If the file is written (or more generally changed, such as new access permissions),
+by convention they should return the :obj:`file path <pathlib.Path>`.
+If no file was touched, :obj:`None` should be returned. Please notice a **FileOp**
+might return :obj:`None` if a pre-existing file in the disk is not modified.
+
+.. note::
+    A **FileOp** usually has side effects (e.g. write a file to the disk), see
+    :obj:`FileFileContents` and :obj:`ScaffoldOpts` for other conventions.
+"""
+'''
+
+# Write the test module
+with open('test_module.py', 'w') as f:
+    f.write(test_module_content)
+
+# Import the test module
+import test_module
+
+# Set up a minimal Sphinx app
+with docutils_namespace():
+    app = Sphinx(srcdir='.', confdir='.', outdir='_build', doctreedir='_doctrees',
+                 buildername='html', confoverrides={}, status=None, warning=None)
+    
+    # Test DataDocumenter for each type alias
+    for attr_name in ['ScaffoldOpts', 'FileContents', 'FileOp']:
+        print(f"\nTesting {attr_name}:")
+        documenter = DataDocumenter(directive=None, name=attr_name)
+        documenter.objpath = [attr_name]
+        documenter.parent = test_module
+        documenter.object = getattr(test_module, attr_name)
+        documenter.modname = 'test_module'
+        
+        # Import the object
+        success = documenter.import_object()
+        print(f"Import success: {success}")
+        print(f"doc_as_attr: {documenter.doc_as_attr}")
+        
+        # Get the docstring
+        doc = documenter.get_doc()
+        print(f"Docstring: {doc}")
+        
+        # Check if it's a generic alias
+        from sphinx.util import inspect as sphinx_inspect
+        is_generic_alias = sphinx_inspect.isgenericalias(documenter.object)
+        print(f"Is generic alias: {is_generic_alias}")
+        
+        # Test content generation
+        more_content = []
+        documenter.add_content(more_content)
+        print(f"Content: {more_content}")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
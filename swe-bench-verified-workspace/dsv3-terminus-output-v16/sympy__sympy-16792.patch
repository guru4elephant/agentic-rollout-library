diff --git a/debug_arguments.py b/debug_arguments.py
new file mode 100644
index 0000000000..a6c7dc83a1
--- /dev/null
+++ b/debug_arguments.py
@@ -0,0 +1,20 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+from sympy.utilities.codegen import CodeGen
+
+# Create a simple test to see what arguments look like
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+
+# Let's see what the argument_sequence contains
+print("Argument sequence type:", type(x))
+print("Argument sequence:", x)
+print("Argument sequence name:", x.name)
+print("Argument sequence shape:", x.shape)
+
+# Let's also check what happens when we create an InputArgument manually
+from sympy.utilities.codegen import InputArgument
+arg = InputArgument(x)
+print("InputArgument created from MatrixSymbol:", arg)
+print("InputArgument name:", arg.name)
+print("InputArgument dimensions:", arg.dimensions)
\ No newline at end of file
diff --git a/debug_dimensions.py b/debug_dimensions.py
new file mode 100644
index 0000000000..e98191a95e
--- /dev/null
+++ b/debug_dimensions.py
@@ -0,0 +1,15 @@
+from sympy import MatrixSymbol
+from sympy.utilities.codegen import InputArgument
+
+# Create a MatrixSymbol
+x = MatrixSymbol('x', 2, 1)
+
+# Check how to extract dimensions from MatrixSymbol
+print("MatrixSymbol shape:", x.shape)
+print("MatrixSymbol dimensions format:", [(0, dim - 1) for dim in x.shape])
+
+# Create InputArgument with proper dimensions
+dims = [(0, dim - 1) for dim in x.shape]
+arg = InputArgument(x, dimensions=dims)
+print("InputArgument with dimensions:", arg)
+print("InputArgument dimensions:", arg.dimensions)
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..6de5aeb866
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,69 @@
+"""
+Final comprehensive test for the autowrap cython backend fix
+"""
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol, symbols
+import numpy as np
+
+def main():
+    print("Running final comprehensive test...")
+    
+    # Test the exact case from the GitHub issue
+    print("1. Testing GitHub issue case...")
+    x = MatrixSymbol('x', 2, 1)
+    expr = 1.0
+    f = autowrap(expr, args=(x,), backend='cython')
+    result = f(np.array([[1.0, 2.0]]))
+    assert result == 1.0
+    print(f"   ✓ Result: {result}")
+    
+    # Test multiple unused array arguments
+    print("2. Testing multiple unused array arguments...")
+    x = MatrixSymbol('x', 2, 1)
+    y = MatrixSymbol('y', 3, 2)
+    z = MatrixSymbol('z', 1, 1)
+    expr = 42.0
+    f = autowrap(expr, args=(x, y, z), backend='cython')
+    result = f(
+        np.array([[1.0, 2.0]]),
+        np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]),
+        np.array([[7.0]])
+    )
+    assert result == 42.0
+    print(f"   ✓ Result: {result}")
+    
+    # Test mixed used and unused arguments
+    print("3. Testing mixed used/unused arguments...")
+    x = MatrixSymbol('x', 2, 1)  # unused
+    y = MatrixSymbol('y', 2, 1)  # used
+    expr = y[0,0]
+    f = autowrap(expr, args=(x, y), backend='cython')
+    result = f(np.array([[1.0, 2.0]]), np.array([[3.0, 4.0]]))
+    assert result == 3.0
+    print(f"   ✓ Result: {result}")
+    
+    # Test that regular scalar arguments still work
+    print("4. Testing regular scalar arguments...")
+    a, b = symbols('a b')
+    expr = a + b
+    f = autowrap(expr, args=(a, b), backend='cython')
+    result = f(5.0, 3.0)
+    assert result == 8.0
+    print(f"   ✓ Result: {result}")
+    
+    # Test mixed scalars and arrays (array unused)
+    print("5. Testing mixed scalars and arrays (array unused)...")
+    x = MatrixSymbol('x', 2, 1)  # unused
+    a = symbols('a')             # used
+    expr = a * 2
+    f = autowrap(expr, args=(x, a), backend='cython')
+    result = f(np.array([[1.0, 2.0]]), 5.0)
+    assert result == 10.0
+    print(f"   ✓ Result: {result}")
+    
+    print("\n✅ All tests passed! The fix is working correctly.")
+    print("The autowrap cython backend now correctly handles array arguments")
+    print("that do not appear in the wrapped expression.")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..17ead10d23
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+# Test case 1: Array argument that doesn't appear in expression (should fail)
+print("Testing case 1: Array argument not in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 2: Array argument that appears in expression (should work)
+print("\nTesting case 2: Array argument in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = x[0,0]
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..4b6915c2c9 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -739,7 +739,12 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    # Check if symbol is a MatrixSymbol and preserve dimensions
+                    if hasattr(symbol, 'shape') and hasattr(symbol, '__class__') and symbol.__class__.__name__ == 'MatrixSymbol':
+                        dims = [(S.Zero, dim - 1) for dim in symbol.shape]
+                        new_args.append(InputArgument(symbol, dimensions=dims))
+                    else:
+                        new_args.append(InputArgument(symbol))
             arg_list = new_args
 
         return Routine(name, arg_list, return_val, local_vars, global_vars)
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..76141a829e
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,43 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol, symbols
+import numpy as np
+
+print("Testing comprehensive scenarios...")
+
+# Test 1: Multiple array arguments, some not used
+print("\nTest 1: Multiple array arguments, some not used")
+x = MatrixSymbol('x', 2, 1)
+y = MatrixSymbol('y', 3, 2)
+expr = x[0,0]  # Only uses x, not y
+f = autowrap(expr, args=(x, y), backend='cython')
+result = f(np.array([[1.0, 2.0]]), np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]))
+print(f"Result: {result}")
+
+# Test 2: Scalar arguments mixed with array arguments
+print("\nTest 2: Scalar + array arguments, array not used")
+x = MatrixSymbol('x', 2, 1)
+a = symbols('a')
+expr = a  # Only uses scalar a, not array x
+f = autowrap(expr, args=(x, a), backend='cython')
+result = f(np.array([[1.0, 2.0]]), 5.0)
+print(f"Result: {result}")
+
+# Test 3: All array arguments not used
+print("\nTest 3: All array arguments not used")
+x = MatrixSymbol('x', 2, 1)
+y = MatrixSymbol('y', 3, 2)
+expr = 42.0  # Uses neither x nor y
+f = autowrap(expr, args=(x, y), backend='cython')
+result = f(np.array([[1.0, 2.0]]), np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]))
+print(f"Result: {result}")
+
+# Test 4: Different array shapes
+print("\nTest 4: Different array shapes not used")
+x = MatrixSymbol('x', 1, 1)  # 1x1 matrix
+y = MatrixSymbol('y', 3, 3)  # 3x3 matrix
+expr = 7.0  # Uses neither
+f = autowrap(expr, args=(x, y), backend='cython')
+result = f(np.array([[1.0]]), np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]))
+print(f"Result: {result}")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..d3f6095425
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,39 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol, symbols, IndexedBase, Idx
+import numpy as np
+
+def test_edge_cases():
+    """Test edge cases for the fix"""
+    print("Testing edge cases...")
+    
+    # Test 1: Regular symbols (should work as before)
+    print("Test 1: Regular symbols")
+    a, b = symbols('a b')
+    expr = a + b
+    f = autowrap(expr, args=(a, b), backend='cython')
+    result = f(1.0, 2.0)
+    assert result == 3.0
+    print(f"✓ Result: {result}")
+    
+    # Test 2: Mixed regular symbols and MatrixSymbols (some not used)
+    print("Test 2: Mixed symbols and MatrixSymbols")
+    x = MatrixSymbol('x', 2, 1)
+    a = symbols('a')
+    expr = a  # Only uses a, not x
+    f = autowrap(expr, args=(x, a), backend='cython')
+    result = f(np.array([[1.0, 2.0]]), 5.0)
+    assert result == 5.0
+    print(f"✓ Result: {result}")
+    
+    # Test 3: IndexedBase symbols (should work as before)
+    print("Test 3: IndexedBase symbols")
+    i = Idx('i')
+    A = IndexedBase('A')
+    expr = A[i]
+    f = autowrap(expr, args=(A, i), backend='cython')
+    # This might fail due to complexity, but shouldn't break our fix
+    
+    print("All edge case tests completed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_f2py.py b/test_f2py.py
new file mode 100644
index 0000000000..b4cb8d49bf
--- /dev/null
+++ b/test_f2py.py
@@ -0,0 +1,21 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+print("Testing f2py backend...")
+
+# Test with f2py backend
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+f = autowrap(expr, args=(x,), backend='f2py')
+result = f(np.array([[1.0, 2.0]]))
+print(f"f2py result: {result}")
+
+# Test with f2py backend where array is used
+x = MatrixSymbol('x', 2, 1)
+expr = x[0,0]
+f = autowrap(expr,  args=(x,), backend='f2py')
+result = f(np.array([[1.0, 2.0]]))
+print(f"f2py result (array used): {result}")
+
+print("f2py tests completed!")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..c4fcf39aaa
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,38 @@
+"""
+Test for the specific GitHub issue: autowrap with cython backend fails when array arguments do not appear in wrapped expr
+"""
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+def test_github_issue():
+    """Test the exact case from the GitHub issue"""
+    print("Testing GitHub issue case...")
+    
+    # This is the exact case from the issue that should fail but now works
+    x = MatrixSymbol('x', 2, 1)
+    expr = 1.0
+    f = autowrap(expr, args=(x,), backend='cython')
+    
+    # This should return 1.0 without error
+    result = f(np.array([[1.0, 2.0]]))
+    assert result == 1.0
+    print(f"✓ Result: {result}")
+    
+    # Test that the C function signature is correct (should use double* not double)
+    # We can't easily inspect the generated C code, but the fact that it works
+    # indicates the signature is correct
+    
+    # Test the working case from the issue for comparison
+    print("Testing working case for comparison...")
+    x = MatrixSymbol('x', 2, 1)
+    expr = x[0,0]
+    f = autowrap(expr, args=(x,), backend='cython')
+    result = f(np.array([[1.0, 2.0]]))
+    assert result == 1.0
+    print(f"✓ Result: {result}")
+    
+    print("All GitHub issue tests passed!")
+
+if __name__ == "__main__":
+    test_github_issue()
\ No newline at end of file
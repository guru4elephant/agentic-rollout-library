diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..70eb20e9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+import xarray as xr
+import numpy as np
+
+# Create test data
+my_data = xr.DataArray(np.arange(1, 10), dims="x")
+
+print("Option 1: take a center-justified rolling average")
+result1 = my_data.rolling(x=3, center=True).mean().values
+print("result1:", result1)
+
+print("\nOption 2: try to manually iterate")
+my_data_rolling = my_data.rolling(x=3, center=True)
+result2 = [window.mean().values.item() for label, window in my_data_rolling]
+print("result2:", result2)
+
+print("\nExpected result should be:")
+print("array([nan,  2.,  3.,  4.,  5.,  6.,  7.,  8., nan])")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 00000000..f5a3f5bc
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,43 @@
+import xarray as xr
+import numpy as np
+
+print("=== Testing center=True with window size 3 ===")
+my_data = xr.DataArray(np.arange(1, 10), dims="x")
+
+# Test center=True
+result1 = my_data.rolling(x=3, center=True).mean().values
+result2 = [window.mean().values.item() for label, window in my_data.rolling(x=3, center=True)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+print("\n=== Testing center=False with window size 3 ===")
+# Test center=False
+result1 = my_data.rolling(x=3, center=False).mean().values
+result2 = [window.mean().values.item() for label, window in my_data.rolling(x=3, center=False)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+print("\n=== Testing center=True with window size 5 ===")
+# Test with different window size
+result1 = my_data.rolling(x=5, center=True).mean().values
+result2 = [window.mean().values.item() for label, window in my_data.rolling(x=5, center=True)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+print("\n=== Testing center=False with window size 5 ===")
+result1 = my_data.rolling(x=5, center=False).mean().values
+result2 = [window.mean().values.item() for label, window in my_data.rolling(x=5, center=False)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+print("\n=== Testing with min_periods ===")
+# Test with min_periods
+result1 = my_data.rolling(x=3, center=True, min_periods=2).mean().values
+result2 = [window.mean().values.item() for label, window in my_data.rolling(x=3, center=True, min_periods=2)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..0b4b813b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,43 @@
+import xarray as xr
+import numpy as np
+
+print("=== Testing with even window size (center=True) ===")
+my_data = xr.DataArray(np.arange(1, 10), dims="x")
+
+# Test with even window size
+result1 = my_data.rolling(x=4, center=True).mean().values
+result2 = [window.mean().values.item() for label, window in my_data.rolling(x=4, center=True)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+print("\n=== Testing with small array ===")
+# Test with small array
+small_data = xr.DataArray([1, 2, 3], dims="x")
+result1 = small_data.rolling(x=3, center=True).mean().values
+result2 = [window.mean().values.item() for label, window in small_data.rolling(x=3, center=True)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+print("\n=== Testing with window size 1 ===")
+# Test with window size 1 (should be identity)
+result1 = my_data.rolling(x=1, center=True).mean().values
+result2 = [window.mean().values.item() for label, window in my_data.rolling(x=1, center=True)]
+print("Direct method:", result1)
+print("Manual iteration:", result2)
+print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+print("\n=== Testing with window larger than array ===")
+# Test with window larger than array - this should fail gracefully
+try:
+    result1 = my_data.rolling(x=20, center=True).mean().values
+    print("Direct method succeeded unexpectedly")
+except ValueError as e:
+    print(f"Direct method failed as expected: {e}")
+
+try:
+    result2 = [window.mean().values.item() for label, window in my_data.rolling(x=20, center=True)]
+    print("Manual iteration succeeded unexpectedly")
+except ValueError as e:
+    print(f"Manual iteration failed as expected: {e}")
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..ba8fdfd5 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -270,9 +270,26 @@ class DataArrayRolling(Rolling["DataArray"]):
     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
-        stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
+        
+        window_size = int(self.window[0])
+        n_labels = len(self.window_labels)
+        
+        if self.center[0]:
+            # For centered windows, we need to adjust the start and stop positions
+            # to center the window around each label
+            half_window = window_size // 2
+            starts = np.arange(n_labels) - half_window
+            stops = starts + window_size
+            
+            # Handle boundaries - clamp starts to 0 and stops to n_labels
+            starts = np.clip(starts, 0, n_labels)
+            stops = np.clip(stops, 0, n_labels)
+        else:
+            # Original behavior for non-centered windows
+            stops = np.arange(1, n_labels + 1)
+            starts = stops - window_size
+            starts[:window_size] = 0
+        
         for (label, start, stop) in zip(self.window_labels, starts, stops):
             window = self.obj.isel({self.dim[0]: slice(start, stop)})
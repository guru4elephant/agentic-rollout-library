diff --git a/debug_matmul.py b/debug_matmul.py
new file mode 100644
index 0000000000..709d5da6d6
--- /dev/null
+++ b/debug_matmul.py
@@ -0,0 +1,24 @@
+from sympy import *
+from sympy.core.mul import Mul
+from sympy.core.numbers import NegativeOne
+
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+expr = A - A*B - B
+
+print("Expression:", expr)
+print("Args:", expr.args)
+
+for i, term in enumerate(expr.args):
+    print(f"Term {i}: {term}")
+    print(f"Type: {type(term)}")
+    if hasattr(term, 'args'):
+        print(f"Args: {term.args}")
+        if len(term.args) > 0:
+            print(f"First arg: {term.args[0]}")
+            print(f"First arg type: {type(term.args[0])}")
+            if term.args[0] == NegativeOne():
+                print(f"First arg is NegativeOne: True")
+            else:
+                print(f"First arg is NegativeOne: False")
+    print()
\ No newline at end of file
diff --git a/debug_terms.py b/debug_terms.py
new file mode 100644
index 0000000000..4273a3cef7
--- /dev/null
+++ b/debug_terms.py
@@ -0,0 +1,21 @@
+from sympy import *
+from sympy.core.mul import Mul
+from sympy.core.numbers import NegativeOne
+
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+expr = A - A*B - B
+
+print("Expression:", expr)
+print("Args:", expr.args)
+
+for i, term in enumerate(expr.args):
+    print(f"Term {i}: {term}")
+    print(f"Type: {type(term)}")
+    if isinstance(term, Mul):
+        print(f"Mul args: {term.args}")
+        if term.args[0] == NegativeOne():
+            print(f"First arg is NegativeOne: True")
+        else:
+            print(f"First arg is NegativeOne: False")
+    print()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9116dd2cac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+from sympy import *
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+print("str output:")
+print(A - A*B - B)
+print("\npretty output:")
+pprint(A - A*B - B)
+print("\nlatex output:")
+print(latex(A - A*B - B))
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..94525f5f48 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1477,9 +1477,21 @@ def _print_Adjoint(self, expr):
             return r"%s^\dagger" % self._print(mat)
 
     def _print_MatAdd(self, expr):
-        terms = list(expr.args)
-        tex = " + ".join(map(self._print, terms))
-        return tex
+        # Simple implementation that handles negative terms
+        terms = []
+        for i, term in enumerate(expr.args):
+            s = self._print(term)
+            if i == 0:
+                terms.append(s)
+            else:
+                if s.startswith('-'):
+                    terms.append(' - ')
+                    terms.append(s[1:])
+                else:
+                    terms.append(' + ')
+                    terms.append(s)
+        
+        return ''.join(terms)
 
     def _print_MatMul(self, expr):
         from sympy import Add, MatAdd, HadamardProduct
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..02168052fc 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,7 +819,25 @@ def _print_BlockMatrix(self, B):
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        # Simple implementation that handles negative terms
+        terms = []
+        for i, term in enumerate(expr.args):
+            if i == 0:
+                terms.append(self._print(term))
+            else:
+                # Check if the term is negative by looking at its structure
+                from sympy.core.mul import Mul
+                from sympy.core.numbers import NegativeOne
+                if isinstance(term, Mul) and term.args[0] == NegativeOne():
+                    terms.append(prettyForm(' - '))
+                    # Remove the -1 coefficient
+                    positive_term = Mul(*term.args[1:])
+                    terms.append(self._print(positive_term))
+                else:
+                    terms.append(prettyForm(' + '))
+                    terms.append(self._print(term))
+        
+        return prettyForm.__add__(*terms)
 
     def _print_MatMul(self, expr):
         args = list(expr.args)
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..892f4a008b 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -312,8 +312,25 @@ def _print_HadamardProduct(self, expr):
             for arg in expr.args])
 
     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        # Simple implementation that handles negative terms
+        from sympy.matrices.expressions.matmul import MatMul
+        from sympy.core.numbers import NegativeOne
+        
+        terms = []
+        for term in expr.args:
+            # Check if the term is negative by its structure
+            if isinstance(term, Mul) and term.args[0] == NegativeOne():
+                # It's a negative term, print with minus sign
+                positive_term = Mul(*term.args[1:])
+                terms.append('-' + self._print(positive_term))
+            else:
+                # Positive term, print with plus sign
+                terms.append('+' + self._print(term))
+        
+        result = ''.join(terms)
+        if result.startswith('+'):
+            result = result[1:]
+        return result
 
     def _print_NaN(self, expr):
         return 'nan'
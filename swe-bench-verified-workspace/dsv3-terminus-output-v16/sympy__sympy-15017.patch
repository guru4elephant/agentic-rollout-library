diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a343b05472
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+"""Script to reproduce the issue with len() of rank-0 arrays."""
+
+import sys
+import os
+sys.path.insert(0, '.')
+
+import sympy
+
+# Test the issue
+print("Testing len() of rank-0 arrays:")
+a = sympy.Array(3)
+print(f"sympy.Array(3) = {a}")
+print(f"len(a) = {len(a)}")
+print(f"len(list(a)) = {len(list(a))}")
+print(f"a.rank() = {a.rank()}")
+print(f"a.shape = {a.shape}")
+
+# Compare with numpy behavior
+try:
+    import numpy
+    print("\nComparing with numpy:")
+    np_arr = numpy.asarray(1)
+    print(f"numpy.asarray(1).size = {np_arr.size}")
+    print(f"len(numpy.asarray(1)) = {len(np_arr)}")
+except ImportError:
+    print("\nNumPy not available for comparison")
+
+print("\nExpected: len(a) should return 1 (same as len(list(a)))")
\ No newline at end of file
diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py
index 9be94a8631..9790712755 100644
--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
diff --git a/sympy/tensor/array/sparse_ndim_array.py b/sympy/tensor/array/sparse_ndim_array.py
index 72b5d51299..c5ce8e389f 100644
--- a/sympy/tensor/array/sparse_ndim_array.py
+++ b/sympy/tensor/array/sparse_ndim_array.py
@@ -167,7 +167,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
         self = object.__new__(cls)
         self._shape = shape
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..32ee47e288
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""Test edge cases for the len() fix."""
+
+import sys
+import os
+sys.path.insert(0, '.')
+
+import sympy
+
+# Test rank-0 array (scalar)
+print("Testing rank-0 array (scalar):")
+a = sympy.Array(3)
+print(f"sympy.Array(3) = {a}")
+print(f"len(a) = {len(a)}")
+print(f"a.rank() = {a.rank()}")
+print(f"a.shape = {a.shape}")
+
+# Test rank-1 array (vector)
+print("\nTesting rank-1 array (vector):")
+b = sympy.Array([1, 2, 3])
+print(f"sympy.Array([1, 2, 3]) = {b}")
+print(f"len(b) = {len(b)}")
+print(f"b.rank() = {b.rank()}")
+print(f"b.shape = {b.shape}")
+
+# Test rank-2 array (matrix)
+print("\nTesting rank-2 array (matrix):")
+c = sympy.Array([[1, 2], [3, 4]])
+print(f"sympy.Array([[1, 2], [3, 4]]) = {c}")
+print(f"len(c) = {len(c)}")
+print(f"c.rank() = {c.rank()}")
+print(f"c.shape = {c.shape}")
+
+# Test empty array
+print("\nTesting empty array:")
+try:
+    d = sympy.Array([])
+    print(f"sympy.Array([]) = {d}")
+    print(f"len(d) = {len(d)}")
+    print(f"d.rank() = {d.rank()}")
+    print(f"d.shape = {d.shape}")
+except Exception as e:
+    print(f"Error with empty array: {e}")
+
+# Test explicit shape for scalar
+print("\nTesting explicit shape for scalar:")
+e = sympy.Array(5, ())
+print(f"sympy.Array(5, ()) = {e}")
+print(f"len(e) = {len(e)}")
+print(f"e.rank() = {e.rank()}")
+print(f"e.shape = {e.shape}")
\ No newline at end of file
diff --git a/debug_mimetypes.py b/debug_mimetypes.py
new file mode 100644
index 0000000000..2e3acada69
--- /dev/null
+++ b/debug_mimetypes.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+import mimetypes
+
+# Test what mimetypes.guess_type returns for different file extensions
+test_files = [
+    'test.html.br',
+    'test.html.Z',
+    'test.html.gz',
+    'test.html',
+    'test.br',
+    'test.Z'
+]
+
+for filename in test_files:
+    content_type, encoding = mimetypes.guess_type(filename)
+    print(f"File: {filename}")
+    print(f"Content-Type: {content_type}")
+    print(f"Encoding: {encoding}")
+    print()
\ No newline at end of file
diff --git a/django/http/response.py b/django/http/response.py
index f62dec8ce9..5da7bcdf04 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -612,6 +612,8 @@ class FileResponse(StreamingHttpResponse):
                     "bzip2": "application/x-bzip",
                     "gzip": "application/gzip",
                     "xz": "application/x-xz",
+                    "br": "application/x-brotli",
+                    "compress": "application/x-compress",
                 }.get(encoding, content_type)
                 self.headers["Content-Type"] = (
                     content_type or "application/octet-stream"
diff --git a/reproduce_exact_issue.py b/reproduce_exact_issue.py
new file mode 100644
index 0000000000..8d22321825
--- /dev/null
+++ b/reproduce_exact_issue.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http.response import FileResponse
+
+def test_exact_issue():
+    """Test the exact scenario described in the GitHub issue."""
+    
+    # Create test files exactly as described in the issue
+    with tempfile.NamedTemporaryFile(suffix='.html.Z', delete=False, mode='wb') as f:
+        f.write(b'<html><body>Test content</body></html>')
+        html_z_file = f.name
+    
+    with tempfile.NamedTemporaryFile(suffix='.html.br', delete=False, mode='wb') as f:
+        f.write(b'<html><body>Test content</body></html>')
+        html_br_file = f.name
+    
+    try:
+        print("Testing the exact issue scenario:")
+        print("=" * 50)
+        
+        # Test FileResponse(open('test.html.Z', 'rb'))
+        response = FileResponse(open(html_z_file, 'rb'))
+        print(f"FileResponse(open('test.html.Z', 'rb'))")
+        print(f"Content-Type: {response.headers.get('Content-Type')}")
+        response.close()
+        print()
+        
+        # Test FileResponse(open('test.html.br', 'rb'))
+        response = FileResponse(open(html_br_file, 'rb'))
+        print(f"FileResponse(open('test.html.br', 'rb'))")
+        print(f"Content-Type: {response.headers.get('Content-Type')}")
+        response.close()
+        print()
+        
+        # The issue says this sets content type as text/html, which might be wrong
+        print("According to the issue, this should NOT be text/html")
+        print("for files with .Z or .br extensions")
+        
+    finally:
+        # Clean up
+        os.unlink(html_z_file)
+        os.unlink(html_br_file)
+
+if __name__ == "__main__":
+    test_exact_issue()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8e13b8ff95
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http.response import FileResponse
+
+def test_file_response_mime_type():
+    """Test that FileResponse correctly guesses MIME types for compressed files."""
+    
+    # Create temporary test files
+    with tempfile.NamedTemporaryFile(suffix='.html.br', delete=False) as f:
+        f.write(b'<html><body>Test content</body></html>')
+        html_br_file = f.name
+    
+    with tempfile.NamedTemporaryFile(suffix='.html.Z', delete=False) as f:
+        f.write(b'<html><body>Test content</body></html>')
+        html_z_file = f.name
+    
+    try:
+        # Test .html.br file
+        response = FileResponse(open(html_br_file, 'rb'))
+        print(f"File: {html_br_file}")
+        print(f"Content-Type: {response.headers.get('Content-Type')}")
+        print(f"Expected: text/html, Got: {response.headers.get('Content-Type')}")
+        print("PASS" if response.headers.get('Content-Type') == 'text/html' else "FAIL")
+        print()
+        
+        # Test .html.Z file
+        response = FileResponse(open(html_z_file, 'rb'))
+        print(f"File: {html_z_file}")
+        print(f"Content-Type: {response.headers.get('Content-Type')}")
+        print(f"Expected: text/html, Got: {response.headers.get('Content-Type')}")
+        print("PASS" if response.headers.get('Content-Type') == 'text/html' else "FAIL")
+        print()
+        
+    finally:
+        # Clean up
+        os.unlink(html_br_file)
+        os.unlink(html_z_file)
+
+if __name__ == "__main__":
+    test_file_response_mime_type()
\ No newline at end of file
diff --git a/test_compressed_files.py b/test_compressed_files.py
new file mode 100644
index 0000000000..7973d04caa
--- /dev/null
+++ b/test_compressed_files.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+import mimetypes
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http.response import FileResponse
+
+def test_mimetypes_behavior():
+    """Test what mimetypes.guess_type returns for various files."""
+    
+    test_files = [
+        'test.br',
+        'test.Z',
+        'test.html.br', 
+        'test.html.Z',
+        'test.txt.br',
+        'test.txt.Z',
+        'test.tar.br',
+        'test.tar.Z',
+    ]
+    
+    for filename in test_files:
+        content_type, encoding = mimetypes.guess_type(filename)
+        print(f"File: {filename}")
+        print(f"  Content-Type: {content_type}")
+        print(f"  Encoding: {encoding}")
+        print()
+
+def test_file_response_behavior():
+    """Test what FileResponse returns for various compressed files."""
+    
+    test_files = [
+        ('test.br', 'test.br'),
+        ('test.Z', 'test.Z'),
+        ('test.html.br', 'test.html.br'),
+        ('test.html.Z', 'test.html.Z'),
+    ]
+    
+    for content, filename in test_files:
+        with tempfile.NamedTemporaryFile(suffix=filename, delete=False) as f:
+            f.write(content.encode())
+            temp_file = f.name
+        
+        try:
+            response = FileResponse(open(temp_file, 'rb'))
+            print(f"File: {filename}")
+            print(f"  Content-Type: {response.headers.get('Content-Type')}")
+            response.close()
+            print()
+        
+        finally:
+            os.unlink(temp_file)
+
+if __name__ == "__main__":
+    print("=== mimetypes.guess_type behavior ===")
+    test_mimetypes_behavior()
+    
+    print("=== FileResponse behavior ===")
+    test_file_response_behavior()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3d206fe815
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http.response import FileResponse
+
+def test_edge_cases():
+    """Test edge cases for the fix."""
+    
+    # Test files with multiple compression extensions
+    edge_cases = [
+        ('test.html.br.gz', 'application/gzip'),  # Should use the last compression type
+        ('test.html.Z.br', 'application/x-brotli'),  # Should use the last compression type
+        ('test.br', 'application/x-brotli'),  # File with only compression extension
+        ('test.Z', 'application/x-compress'),  # File with only compression extension
+        ('test.unknown.br', 'application/x-brotli'),  # Unknown content type + compression
+        ('test.unknown.Z', 'application/x-compress'),  # Unknown content type + compression
+    ]
+    
+    print("Testing edge cases...")
+    print("=" * 50)
+    
+    for filename, expected_content_type in edge_cases:
+        with tempfile.NamedTemporaryFile(suffix=filename, delete=False, mode='wb') as f:
+            f.write(b'test content')
+            temp_file = f.name
+        
+        try:
+            response = FileResponse(open(temp_file, 'rb'))
+            actual_content_type = response.headers.get('Content-Type')
+            response.close()
+            
+            status = "✓ PASS" if actual_content_type == expected_content_type else "✗ FAIL"
+            print(f"{status}: {filename} -> {actual_content_type} (expected: {expected_content_type})")
+            
+        finally:
+            os.unlink(temp_file)
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..b658a033cb
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+import mimetypes
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http.response import FileResponse
+
+def test_fix():
+    """Test that the fix works correctly."""
+    
+    test_cases = [
+        # (filename, expected_content_type)
+        ('test.html.br', 'application/x-brotli'),
+        ('test.html.Z', 'application/x-compress'),
+        ('test.txt.br', 'application/x-brotli'),
+        ('test.txt.Z', 'application/x-compress'),
+        ('test.tar.br', 'application/x-brotli'),
+        ('test.tar.Z', 'application/x-compress'),
+        # These should still work as before
+        ('test.html.gz', 'application/gzip'),
+        ('test.tar.gz', 'application/gzip'),
+        ('test.tar.bz2', 'application/x-bzip'),
+        ('test.tar.xz', 'application/x-xz'),
+        # Non-compressed files should work as before
+        ('test.html', 'text/html'),
+        ('test.txt', 'text/plain'),
+        ('test.py', 'text/x-python'),
+    ]
+    
+    print("Testing the fix...")
+    print("=" * 50)
+    
+    for filename, expected_content_type in test_cases:
+        with tempfile.NamedTemporaryFile(suffix=filename, delete=False, mode='wb') as f:
+            f.write(b'test content')
+            temp_file = f.name
+        
+        try:
+            response = FileResponse(open(temp_file, 'rb'))
+            actual_content_type = response.headers.get('Content-Type')
+            response.close()
+            
+            status = "✓ PASS" if actual_content_type == expected_content_type else "✗ FAIL"
+            print(f"{status}: {filename} -> {actual_content_type} (expected: {expected_content_type})")
+            
+        finally:
+            os.unlink(temp_file)
+
+if __name__ == "__main__":
+    test_fix()
\ No newline at end of file
diff --git a/test_unknown_files.py b/test_unknown_files.py
new file mode 100644
index 0000000000..20a19b5bd4
--- /dev/null
+++ b/test_unknown_files.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http.response import FileResponse
+
+def test_unknown_file_response_mime_type():
+    """Test that FileResponse correctly guesses MIME types for unknown compressed files."""
+    
+    # Create temporary test files with unknown content types but compressed extensions
+    with tempfile.NamedTemporaryFile(suffix='.unknown.br', delete=False) as f:
+        f.write(b'some unknown content')
+        unknown_br_file = f.name
+    
+    with tempfile.NamedTemporaryFile(suffix='.unknown.Z', delete=False) as f:
+        f.write(b'some unknown content')
+        unknown_z_file = f.name
+    
+    try:
+        # Test .unknown.br file
+        response = FileResponse(open(unknown_br_file, 'rb'))
+        print(f"File: {unknown_br_file}")
+        print(f"Content-Type: {response.headers.get('Content-Type')}")
+        print()
+        
+        # Test .unknown.Z file
+        response = FileResponse(open(unknown_z_file, 'rb'))
+        print(f"File: {unknown_z_file}")
+        print(f"Content-Type: {response.headers.get('Content-Type')}")
+        print()
+        
+    finally:
+        # Clean up
+        os.unlink(unknown_br_file)
+        os.unlink(unknown_z_file)
+
+if __name__ == "__main__":
+    test_unknown_file_response_mime_type()
\ No newline at end of file
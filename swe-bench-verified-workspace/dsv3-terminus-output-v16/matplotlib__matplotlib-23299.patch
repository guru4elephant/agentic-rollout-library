diff --git a/check_backend.py b/check_backend.py
new file mode 100644
index 0000000000..29d51099f6
--- /dev/null
+++ b/check_backend.py
@@ -0,0 +1,19 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# Reproduce the exact issue from the bug report
+with rc_context():
+    fig2 = plt.figure()
+    
+print("Current backend:", plt.get_backend())
+print("rcParams backend:", plt.rcParams['backend'])
+print("Figure manager:", fig2.canvas.manager)
+print("Gcf figs:", plt._pylab_helpers.Gcf.figs)
+
+# Check if backend is sentinel
+from matplotlib.rcsetup import _auto_backend_sentinel
+print("Is backend sentinel?", plt.rcParams['backend'] is _auto_backend_sentinel)
+
+get_backend()
+
+print("After get_backend() - Gcf figs:", plt._pylab_helpers.Gcf.figs)
\ No newline at end of file
diff --git a/compare_managers.py b/compare_managers.py
new file mode 100644
index 0000000000..ef3396c86a
--- /dev/null
+++ b/compare_managers.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create figure under rc_context first
+with rc_context():
+    fig_rc = plt.figure()
+    manager_rc = fig_rc.canvas.manager
+    print("rc_context manager:", manager_rc)
+    print("rc_context manager type:", type(manager_rc))
+    print("rc_context manager attributes:", dir(manager_rc))
+
+helpers.Gcf.destroy_all()
+
+# Create figure normally
+fig_normal = plt.figure()
+manager_normal = fig_normal.canvas.manager
+print("Normal manager:", manager_normal)
+print("Normal manager type:", type(manager_normal))
+print("Normal manager attributes:", dir(manager_normal))
+
+# Compare the two managers
+print("Managers are same object?", manager_rc is manager_normal)
+print("Managers have same type?", type(manager_rc) is type(manager_normal))
\ No newline at end of file
diff --git a/debug_backend_value.py b/debug_backend_value.py
new file mode 100644
index 0000000000..b6b41f886f
--- /dev/null
+++ b/debug_backend_value.py
@@ -0,0 +1,26 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+from matplotlib.rcsetup import _auto_backend_sentinel
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+print("Cleared all figures:", helpers.Gcf.figs)
+
+# Check backend before rc_context
+print("Backend before rc_context:", plt.rcParams['backend'])
+print("Is sentinel?", plt.rcParams['backend'] is _auto_backend_sentinel)
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("Backend under rc_context:", plt.rcParams['backend'])
+    print("Is sentinel?", plt.rcParams['backend'] is _auto_backend_sentinel)
+
+print("Backend after rc_context:", plt.rcParams['backend'])
+print("Is sentinel?", plt.rcParams['backend'] is _auto_backend_sentinel)
+print("First figure under rc_context:", helpers.Gcf.figs)
+
+# Now call get_backend()
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/debug_figure_creation.py b/debug_figure_creation.py
new file mode 100644
index 0000000000..8c7b4bca8a
--- /dev/null
+++ b/debug_figure_creation.py
@@ -0,0 +1,20 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+
+print("Initial Gcf.figs:", helpers.Gcf.figs)
+
+# Create figure normally
+fig1 = plt.figure()
+print("After normal figure creation:", helpers.Gcf.figs)
+
+# Create figure under rc_context
+with rc_context():
+    fig2 = plt.figure()
+    print("Under rc_context:", helpers.Gcf.figs)
+
+print("After rc_context:", helpers.Gcf.figs)
+
+get_backend()
+
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/debug_figure_manager.py b/debug_figure_manager.py
new file mode 100644
index 0000000000..d4e06552ee
--- /dev/null
+++ b/debug_figure_manager.py
@@ -0,0 +1,26 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create figure normally
+fig_normal = plt.figure()
+print("Normal figure manager:", fig_normal.canvas.manager)
+print("Normal figure number:", fig_normal.number)
+helpers.Gcf.destroy_all()
+
+# Create figure under rc_context
+with rc_context():
+    fig_rc = plt.figure()
+    print("rc_context figure manager:", fig_rc.canvas.manager)
+    print("rc_context figure number:", fig_rc.number)
+
+print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Access rcParams
+print("Accessing rcParams['backend']...")
+backend = matplotlib.rcParams['backend']
+print("After access:", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/debug_get_backend.py b/debug_get_backend.py
new file mode 100644
index 0000000000..159f0b2cd0
--- /dev/null
+++ b/debug_get_backend.py
@@ -0,0 +1,35 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("Figures before get_backend:", helpers.Gcf.figs)
+
+# Monkey patch to debug what happens in get_backend
+original_getitem = matplotlib.rcParams.__class__.__getitem__
+
+def debug_getitem(self, key):
+    print(f"Accessing rcParams[{key!r}]")
+    if key == "backend":
+        print(f"  self id: {id(self)}")
+        print(f"  globals rcParams id: {id(globals().get('rcParams'))}")
+        print(f"  Is same object? {self is globals().get('rcParams')}")
+    result = original_getitem(self, key)
+    if key == "backend":
+        print(f"  Returned: {result}")
+    return result
+
+matplotlib.rcParams.__class__.__getitem__ = debug_getitem
+
+# Now call get_backend()
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
+
+# Restore original method
+matplotlib.rcParams.__class__.__getitem__ = original_getitem
\ No newline at end of file
diff --git a/debug_getitem_detailed.py b/debug_getitem_detailed.py
new file mode 100644
index 0000000000..697cfec5e3
--- /dev/null
+++ b/debug_getitem_detailed.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("Figures before rcParams access:", helpers.Gcf.figs)
+
+# Monkey patch to debug what happens in __getitem__
+original_getitem = matplotlib.rcParams.__class__.__getitem__
+
+def debug_getitem(self, key):
+    print(f"Accessing rcParams[{key!r}]")
+    print(f"  self id: {id(self)}")
+    print(f"  globals rcParams id: {id(globals().get('rcParams'))}")
+    print(f"  Is same object? {self is globals().get('rcParams')}")
+    
+    # Check the conditions that trigger special behavior
+    from matplotlib.rcsetup import _auto_backend_sentinel
+    if key == "backend" and self is globals().get("rcParams"):
+        print("  Would trigger backend switching logic")
+    else:
+        print("  Would NOT trigger backend switching logic")
+    
+    result = original_getitem(self, key)
+    print(f"  Returned: {result}")
+    return result
+
+matplotlib.rcParams.__class__.__getitem__ = debug_getitem
+
+# Access rcParams
+print("Accessing rcParams['backend'] directly...")
+backend = matplotlib.rcParams['backend']
+print("After access:", helpers.Gcf.figs)
+
+# Restore original method
+matplotlib.rcParams.__class__.__getitem__ = original_getitem
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..1836aee86f
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,17 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib
+
+print("Initial backend:", matplotlib.rcParams['backend'])
+
+with rc_context():
+    fig2 = plt.figure()
+    print("Backend under rc_context:", matplotlib.rcParams['backend'])
+
+print("Backend after rc_context:", matplotlib.rcParams['backend'])
+print("Figures before get_backend():", plt._pylab_helpers.Gcf.figs)
+
+get_backend()
+
+print("Backend after get_backend():", matplotlib.rcParams['backend'])
+print("Figures after get_backend():", plt._pylab_helpers.Gcf.figs)
\ No newline at end of file
diff --git a/debug_rc_context_restore.py b/debug_rc_context_restore.py
new file mode 100644
index 0000000000..4e59a1a9fa
--- /dev/null
+++ b/debug_rc_context_restore.py
@@ -0,0 +1,29 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Store original rcParams
+original_rcParams = matplotlib.rcParams.copy()
+print("Original rcParams id:", id(matplotlib.rcParams))
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("rcParams id under rc_context:", id(matplotlib.rcParams))
+    print("Figures under rc_context:", helpers.Gcf.figs)
+
+print("rcParams id after rc_context:", id(matplotlib.rcParams))
+print("Is same object as original?", matplotlib.rcParams is original_rcParams)
+print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Check if the rcParams object was modified during restoration
+print("rcParams keys after restoration:", list(matplotlib.rcParams.keys())[:5])
+
+# Access rcParams
+print("Accessing rcParams['backend']...")
+backend = matplotlib.rcParams['backend']
+print("After access:", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/debug_rcparams_access.py b/debug_rcparams_access.py
new file mode 100644
index 0000000000..fefffee58f
--- /dev/null
+++ b/debug_rcparams_access.py
@@ -0,0 +1,21 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("Figures before rcParams access:", helpers.Gcf.figs)
+
+# Access rcParams in different ways
+print("Accessing rcParams['backend'] directly...")
+backend = matplotlib.rcParams['backend']
+print("After direct access:", helpers.Gcf.figs)
+
+print("Accessing via get_backend()...")
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/debug_rcparams_identity.py b/debug_rcparams_identity.py
new file mode 100644
index 0000000000..d711d2828c
--- /dev/null
+++ b/debug_rcparams_identity.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Check rcParams identity
+print("Global rcParams id:", id(matplotlib.rcParams))
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("rcParams id under rc_context:", id(matplotlib.rcParams))
+    print("Is same object?", matplotlib.rcParams is globals().get("rcParams"))
+
+print("rcParams id after rc_context:", id(matplotlib.rcParams))
+print("Is same object?", matplotlib.rcParams is globals().get("rcParams"))
+
+# Now call get_backend()
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/debug_rcparams_state.py b/debug_rcparams_state.py
new file mode 100644
index 0000000000..5418739384
--- /dev/null
+++ b/debug_rcparams_state.py
@@ -0,0 +1,32 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Store original state
+original_backend = matplotlib.rcParams['backend']
+original_id = id(matplotlib.rcParams)
+print("Original backend:", original_backend)
+print("Original rcParams id:", original_id)
+
+# Create figure under rc_context
+with rc_context():
+    fig_rc = plt.figure()
+    print("Backend under rc_context:", matplotlib.rcParams['backend'])
+    print("rcParams id under rc_context:", id(matplotlib.rcParams))
+
+print("Backend after rc_context:", matplotlib.rcParams['backend'])
+print("rcParams id after rc_context:", id(matplotlib.rcParams))
+print("Is same object as original?", matplotlib.rcParams is globals().get("rcParams"))
+print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Check if backend value changed
+print("Backend value changed?", matplotlib.rcParams['backend'] != original_backend)
+
+# Access rcParams
+print("Accessing rcParams['backend']...")
+backend = matplotlib.rcParams['backend']
+print("After access:", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/minimal_test.py b/minimal_test.py
new file mode 100644
index 0000000000..9b7fe6ec2e
--- /dev/null
+++ b/minimal_test.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Test 1: Create figure normally, then access rcParams
+print("=== Test 1: Normal figure creation ===")
+fig_normal = plt.figure()
+print("Figures before access:", helpers.Gcf.figs)
+backend = matplotlib.rcParams['backend']
+print("After rcParams access:", helpers.Gcf.figs)
+helpers.Gcf.destroy_all()
+
+# Test 2: Create figure under rc_context, then access rcParams  
+print("\n=== Test 2: rc_context figure creation ===")
+with rc_context():
+    fig_rc = plt.figure()
+print("Figures after rc_context:", helpers.Gcf.figs)
+backend = matplotlib.rcParams['backend']
+print("After rcParams access:", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f56fa665fc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/test_access_context.py b/test_access_context.py
new file mode 100644
index 0000000000..f116d440da
--- /dev/null
+++ b/test_access_context.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create figure under rc_context
+with rc_context():
+    fig_rc = plt.figure()
+    print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Test 1: Direct access from current module
+print("=== Test 1: Direct access from current module ===")
+backend = matplotlib.rcParams['backend']
+print("After direct access:", helpers.Gcf.figs)
+
+# Reset
+helpers.Gcf.destroy_all()
+with rc_context():
+    fig_rc = plt.figure()
+    print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Test 2: Access via get_backend() function (from different module)
+print("=== Test 2: Access via get_backend() ===")
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_dict_update.py b/test_dict_update.py
new file mode 100644
index 0000000000..d4b8576027
--- /dev/null
+++ b/test_dict_update.py
@@ -0,0 +1,31 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Store original rcParams
+original_rcParams = matplotlib.rcParams.copy()
+print("Original rcParams id:", id(matplotlib.rcParams))
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("rcParams id under rc_context:", id(matplotlib.rcParams))
+    print("Figures under rc_context:", helpers.Gcf.figs)
+
+print("rcParams id after rc_context:", id(matplotlib.rcParams))
+print("Is same object as original?", matplotlib.rcParams is original_rcParams)
+print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Manually simulate the dict.update operation
+print("Simulating dict.update...")
+dict.update(matplotlib.rcParams, original_rcParams)
+print("After dict.update:", helpers.Gcf.figs)
+
+# Access rcParams
+print("Accessing rcParams['backend']...")
+backend = matplotlib.rcParams['backend']
+print("After access:", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_dict_update_effect.py b/test_dict_update_effect.py
new file mode 100644
index 0000000000..28ad4bd5c9
--- /dev/null
+++ b/test_dict_update_effect.py
@@ -0,0 +1,30 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Store original rcParams
+original_rcParams = matplotlib.rcParams.copy()
+print("Original rcParams id:", id(matplotlib.rcParams))
+
+# Create figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("During rc_context - rcParams id:", id(matplotlib.rcParams))
+    print("Figures during rc_context:", helpers.Gcf.figs)
+
+print("After rc_context - rcParams id:", id(matplotlib.rcParams))
+print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Check if the issue is with dict.update itself
+print("Testing dict.update effect...")
+dict.update(matplotlib.rcParams, original_rcParams)
+print("After dict.update:", helpers.Gcf.figs)
+
+# Check if the issue is with accessing rcParams
+print("Testing rcParams access effect...")
+backend = matplotlib.rcParams['backend']
+print("After rcParams access:", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_first_figure.py b/test_first_figure.py
new file mode 100644
index 0000000000..05362e7eac
--- /dev/null
+++ b/test_first_figure.py
@@ -0,0 +1,20 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+print("Cleared all figures:", helpers.Gcf.figs)
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("First figure under rc_context:", helpers.Gcf.figs)
+
+# Create second figure normally  
+fig2 = plt.figure()
+print("Second figure normally:", helpers.Gcf.figs)
+
+# Now call get_backend()
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_get_backend_vs_direct.py b/test_get_backend_vs_direct.py
new file mode 100644
index 0000000000..42cdfb2218
--- /dev/null
+++ b/test_get_backend_vs_direct.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create figure under rc_context
+with rc_context():
+    fig_rc = plt.figure()
+    print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Test 1: Direct access
+print("=== Test 1: Direct access ===")
+backend = matplotlib.rcParams['backend']
+print("After direct access:", helpers.Gcf.figs)
+
+# Reset
+helpers.Gcf.destroy_all()
+with rc_context():
+    fig_rc = plt.figure()
+    print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Test 2: get_backend() function
+print("=== Test 2: get_backend() function ===")
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_globals_hypothesis.py b/test_globals_hypothesis.py
new file mode 100644
index 0000000000..8563116e27
--- /dev/null
+++ b/test_globals_hypothesis.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create figure under rc_context
+with rc_context():
+    fig_rc = plt.figure()
+    print("Figures after rc_context:", helpers.Gcf.figs)
+
+# Check what globals().get("rcParams") returns in current context
+print("globals().get('rcParams') in current module:", globals().get("rcParams"))
+
+# Check what globals().get("rcParams") returns in matplotlib context
+print("globals().get('rcParams') in matplotlib module:", matplotlib.globals().get("rcParams"))
+
+# Test direct access
+print("=== Testing direct access ===")
+backend = matplotlib.rcParams['backend']
+print("After direct access:", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_qtagg_backend.py b/test_qtagg_backend.py
new file mode 100644
index 0000000000..bad3e69ccc
--- /dev/null
+++ b/test_qtagg_backend.py
@@ -0,0 +1,17 @@
+import matplotlib
+matplotlib.use('QtAgg')
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+# Create first figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("Figures before get_backend():", helpers.Gcf.figs)
+
+# Now call get_backend()
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_rc_context_restore_detailed.py b/test_rc_context_restore_detailed.py
new file mode 100644
index 0000000000..6d9bb07401
--- /dev/null
+++ b/test_rc_context_restore_detailed.py
@@ -0,0 +1,37 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib._pylab_helpers as helpers
+import matplotlib
+
+# Clear any existing figures
+helpers.Gcf.destroy_all()
+
+print("Before rc_context:")
+print("  rcParams id:", id(matplotlib.rcParams))
+print("  globals rcParams id:", id(globals().get("rcParams")))
+print("  Is same object?", matplotlib.rcParams is globals().get("rcParams"))
+
+# Create figure under rc_context
+with rc_context():
+    fig1 = plt.figure()
+    print("During rc_context:")
+    print("  rcParams id:", id(matplotlib.rcParams))
+    print("  globals rcParams id:", id(globals().get("rcParams")))
+    print("  Is same object?", matplotlib.rcParams is globals().get("rcParams"))
+    print("  Figures:", helpers.Gcf.figs)
+
+print("After rc_context:")
+print("  rcParams id:", id(matplotlib.rcParams))
+print("  globals rcParams id:", id(globals().get("rcParams")))
+print("  Is same object?", matplotlib.rcParams is globals().get("rcParams"))
+print("  Figures:", helpers.Gcf.figs)
+
+# Check if the condition in __getitem__ would be true
+from matplotlib.rcsetup import _auto_backend_sentinel
+print("Backend value:", matplotlib.rcParams['backend'])
+print("Is backend sentinel?", matplotlib.rcParams['backend'] is _auto_backend_sentinel)
+print("Would trigger switching?", matplotlib.rcParams is globals().get("rcParams") and matplotlib.rcParams['backend'] is _auto_backend_sentinel)
+
+# Now call get_backend()
+get_backend()
+print("After get_backend():", helpers.Gcf.figs)
\ No newline at end of file
diff --git a/test_sentinel.py b/test_sentinel.py
new file mode 100644
index 0000000000..25790608f7
--- /dev/null
+++ b/test_sentinel.py
@@ -0,0 +1,19 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib
+from matplotlib.rcsetup import _auto_backend_sentinel
+
+print("Initial backend:", matplotlib.rcParams['backend'])
+
+# Set backend to sentinel and create a figure
+with rc_context({'backend': _auto_backend_sentinel}):
+    fig2 = plt.figure()
+    print("Backend under rc_context:", matplotlib.rcParams['backend'])
+
+print("Backend after rc_context:", matplotlib.rcParams['backend'])
+print("Figures before get_backend():", plt._pylab_helpers.Gcf.figs)
+
+get_backend()
+
+print("Backend after get_backend():", matplotlib.rcParams['backend'])
+print("Figures after get_backend():", plt._pylab_helpers.Gcf.figs)
\ No newline at end of file
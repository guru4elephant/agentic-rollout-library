diff --git a/debug_complement.py b/debug_complement.py
new file mode 100644
index 0000000000..7e6f8cd515
--- /dev/null
+++ b/debug_complement.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols
+
+# Debug which _complement method is being called
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print("Testing _complement method calls:")
+print(f"a._complement(b) = {a._complement(b)}")
+print(f"b._complement(a) = {b._complement(a)}")
+print()
+print("Testing Complement.reduce:")
+print(f"Complement.reduce(a, b) = {Complement.reduce(a, b)}")
\ No newline at end of file
diff --git a/debug_contains.py b/debug_contains.py
new file mode 100644
index 0000000000..41d314df6a
--- /dev/null
+++ b/debug_contains.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, symbols, sympify
+
+# Debug the contains method behavior
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print("Testing contains method:")
+print(f"b.contains(2) = {b.contains(2)}")
+print(f"b.contains(x) = {b.contains(x)}")
+print(f"b.contains(y) = {b.contains(y)}")
+print()
+print("Testing contains with sympify:")
+print(f"sympify(b.contains(2)) = {sympify(b.contains(2))}")
+print(f"sympify(b.contains(x)) = {sympify(b.contains(x))}")
+print(f"sympify(b.contains(y)) = {sympify(b.contains(y))}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6f8a5410ad
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols
+
+# Reproduce the issue described in the GitHub issue
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+
+print("Input:")
+print(f"a = {a}")
+print(f"b = {b}")
+print(f"Complement(a, b) = {result}")
+print()
+print("Expected output: {x, y} \\ [-10,10]")
+print("Actual output:", result)
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..7eb19963f5 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1000,6 +1000,18 @@ def _complement(self, other):
 
         if isinstance(other, FiniteSet):
             nums = [m for m in other.args if m.is_number]
+            syms = [m for m in other.args if m.is_Symbol]
+            
+            # Handle the case where FiniteSet contains both numbers and symbols
+            if nums != [] and syms != []:
+                # Filter out numbers that are within this interval
+                filtered_nums = [num for num in nums if not self.contains(num)]
+                all_elements = filtered_nums + syms
+                if not all_elements:
+                    return S.EmptySet
+                # Return the complement: FiniteSet(*all_elements) - self
+                return Complement(FiniteSet(*all_elements), self, evaluate=False)
+            
             if nums == []:
                 return None
 
@@ -1933,21 +1945,30 @@ def _intersect(self, other):
     def _complement(self, other):
         if isinstance(other, Interval):
             nums = sorted(m for m in self.args if m.is_number)
-            if other == S.Reals and nums != []:
+            if nums != []:
                 syms = [m for m in self.args if m.is_Symbol]
-                # Reals cannot contain elements other than numbers and symbols.
-
-                intervals = []  # Build up a list of intervals between the elements
-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]
-                for a, b in zip(nums[:-1], nums[1:]):
-                    intervals.append(Interval(a, b, True, True))  # both open
-                intervals.append(Interval(nums[-1], S.Infinity, True, True))
-
-                if syms != []:
-                    return Complement(Union(intervals, evaluate=False),
-                            FiniteSet(*syms), evaluate=False)
+                
+                if other == S.Reals:
+                    # Reals cannot contain elements other than numbers and symbols.
+                    intervals = []  # Build up a list of intervals between the elements
+                    intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]
+                    for a, b in zip(nums[:-1], nums[1:]):
+                        intervals.append(Interval(a, b, True, True))  # both open
+                    intervals.append(Interval(nums[-1], S.Infinity, True, True))
+
+                    if syms != []:
+                        return Complement(Union(intervals, evaluate=False),
+                                FiniteSet(*syms), evaluate=False)
+                    else:
+                        return Union(intervals, evaluate=False)
                 else:
-                    return Union(intervals, evaluate=False)
+                    # For general intervals, filter out numbers that are within the interval
+                    filtered_nums = [num for num in nums if not other.contains(num)]
+                    all_elements = filtered_nums + syms
+                    if not all_elements:
+                        return S.EmptySet
+                    # Return a Complement object to represent the set difference
+                    return Complement(FiniteSet(*all_elements), other, evaluate=False)
             elif nums == []:
                 return None
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..87f31ae1a1
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols
+
+# Test edge cases
+x, y = symbols('x y')
+
+# Case 1: All numbers within the interval
+print("Case 1: All numbers within the interval")
+a1 = FiniteSet(2, 5, 8)
+b1 = Interval(-10, 10)
+result1 = Complement(a1, b1)
+print(f"Complement({a1}, {b1}) = {result1}")
+print()
+
+# Case 2: Some numbers within, some outside the interval
+print("Case 2: Some numbers within, some outside the interval")
+a2 = FiniteSet(-15, 2, 15, x)
+b2 = Interval(-10, 10)
+result2 = Complement(a2, b2)
+print(f"Complement({a2}, {b2}) = {result2}")
+print()
+
+# Case 3: Only symbols
+print("Case 3: Only symbols")
+a3 = FiniteSet(x, y)
+b3 = Interval(-10, 10)
+result3 = Complement(a3, b3)
+print(f"Complement({a3}, {b3}) = {result3}")
+print()
+
+# Case 4: Empty result
+print("Case 4: Empty result")
+a4 = FiniteSet(2, 5, 8)  # All numbers within interval
+b4 = Interval(-10, 10)
+result4 = Complement(a4, b4)
+print(f"Complement({a4}, {b4}) = {result4}")
+print()
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..0aa33e6b4f
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols
+
+# Test the exact case from the GitHub issue
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+
+print("Testing GitHub issue case:")
+print(f"a = {a}")
+print(f"b = {b}")
+print(f"Complement(a, b) = {result}")
+print()
+print("Expected: {x, y} \\ [-10,10]")
+print("Actual:", result)
+print()
+
+# Verify the result is correct
+expected_repr = "{x, y} \\ Interval(-10, 10)"
+actual_repr = str(result)
+assert actual_repr == expected_repr, f"Expected '{expected_repr}', got '{actual_repr}'"
+print("✓ Test passed! The result matches the expected output.")
+
+# Test that the number 2 is filtered out (since it's within [-10, 10])
+assert str(2) not in str(result), "Number 2 should be filtered out from the result"
+print("✓ Number 2 is correctly filtered out.")
+
+# Test that symbols x and y are preserved
+assert "x" in str(result) and "y" in str(result), "Symbols x and y should be preserved"
+print("✓ Symbols x and y are correctly preserved.")
+
+print("\nAll tests passed! The GitHub issue has been fixed.")
\ No newline at end of file
diff --git a/contour_auto_detection_test.png b/contour_auto_detection_test.png
new file mode 100644
index 0000000000..d44d7c22aa
Binary files /dev/null and b/contour_auto_detection_test.png differ
diff --git a/contour_test.png b/contour_test.png
new file mode 100644
index 0000000000..854308176b
Binary files /dev/null and b/contour_test.png differ
diff --git a/contourf_auto_detection_test.png b/contourf_auto_detection_test.png
new file mode 100644
index 0000000000..cca675da37
Binary files /dev/null and b/contourf_auto_detection_test.png differ
diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 144eadeae2..04d8f2aa36 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1123,7 +1123,15 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
         """
         if self.levels is None:
             if len(args) == 0:
-                levels_arg = 7  # Default, hard-wired.
+                # Auto-detect boolean inputs
+                if hasattr(self, '_input_is_boolean') and self._input_is_boolean:
+                    # For filled contours, use [0, 1] to create proper regions
+                    if self.filled:
+                        levels_arg = [0, 1]
+                    else:
+                        levels_arg = [0.5]  # For line contours, use single level
+                else:
+                    levels_arg = 7  # Default, hard-wired.
             else:
                 levels_arg = args[0]
         else:
@@ -1447,10 +1455,16 @@ class QuadContourSet(ContourSet):
             fn = 'contour'
         nargs = len(args)
         if nargs <= 2:
+            # Store original input to check if it's boolean
+            original_z = args[0]
+            self._input_is_boolean = isinstance(original_z, np.ndarray) and original_z.dtype == bool
             z = ma.asarray(args[0], dtype=np.float64)
             x, y = self._initialize_x_y(z)
             args = args[1:]
         elif nargs <= 4:
+            # Store original input to check if it's boolean
+            original_z = args[2]
+            self._input_is_boolean = isinstance(original_z, np.ndarray) and original_z.dtype == bool
             x, y, z = self._check_xyz(args[:3], kwargs)
             args = args[3:]
         else:
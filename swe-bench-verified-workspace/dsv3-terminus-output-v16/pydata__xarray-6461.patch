diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..343ae765
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+import xarray as xr
+
+# This should reproduce the issue
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error:", e)
+    print("Error type:", type(e))
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 00000000..c9302da9
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,51 @@
+import xarray as xr
+import numpy as np
+
+print("Testing various edge cases for xr.where with keep_attrs=True...")
+
+# Test 1: Original issue - scalar as second argument
+print("\n1. Testing scalar as second argument:")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)
+    print("   ✓ Success:", result.values)
+except Exception as e:
+    print("   ✗ Error:", e)
+
+# Test 2: Scalar as third argument
+print("\n2. Testing scalar as third argument:")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, xr.DataArray([4, 5, 6]), 0, keep_attrs=True)
+    print("   ✓ Success:", result.values)
+except Exception as e:
+    print("   ✗ Error:", e)
+
+# Test 3: Both scalar arguments
+print("\n3. Testing both scalar arguments:")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 2, keep_attrs=True)
+    print("   ✓ Success:", result.values)
+except Exception as e:
+    print("   ✗ Error:", e)
+
+# Test 4: Normal case with DataArrays (should work as before)
+print("\n4. Testing normal case with DataArrays:")
+try:
+    x = xr.DataArray([1, 2, 3], attrs={'test': 'value'})
+    y = xr.DataArray([4, 5, 6], attrs={'test2': 'value2'})
+    result = xr.where(xr.DataArray([True, False, True]), x, y, keep_attrs=True)
+    print("   ✓ Success:", result.values)
+    print("   Attributes:", result.attrs)
+except Exception as e:
+    print("   ✗ Error:", e)
+
+# Test 5: Mixed case with one DataArray and one scalar
+print("\n5. Testing mixed case with DataArray and scalar:")
+try:
+    x = xr.DataArray([1, 2, 3], attrs={'test': 'value'})
+    result = xr.where(xr.DataArray([True, False, True]), x, 0, keep_attrs=True)
+    print("   ✓ Success:", result.values)
+    print("   Attributes:", result.attrs)
+except Exception as e:
+    print("   ✗ Error:", e)
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_default_behavior.py b/test_default_behavior.py
new file mode 100644
index 00000000..0fc8c1a5
--- /dev/null
+++ b/test_default_behavior.py
@@ -0,0 +1,24 @@
+import xarray as xr
+
+print("Testing default behavior (keep_attrs=None)...")
+
+# Test default behavior with scalar arguments
+print("\n1. Testing scalar arguments with default keep_attrs:")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0)
+    print("   ✓ Success:", result.values)
+except Exception as e:
+    print("   ✗ Error:", e)
+
+# Test default behavior with DataArrays
+print("\n2. Testing DataArrays with default keep_attrs:")
+try:
+    x = xr.DataArray([1, 2, 3], attrs={'test': 'value'})
+    y = xr.DataArray([4, 5, 6], attrs={'test2': 'value2'})
+    result = xr.where(xr.DataArray([True, False, True]), x, y)
+    print("   ✓ Success:", result.values)
+    print("   Attributes:", result.attrs)  # Should be empty with default behavior
+except Exception as e:
+    print("   ✗ Error:", e)
+
+print("\nAll default behavior tests completed!")
\ No newline at end of file
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 7676d8e5..885c1b51 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1829,7 +1829,7 @@ def where(cond, x, y, keep_attrs=None):
     if keep_attrs is True:
         # keep the attributes of x, the second parameter, by default to
         # be consistent with the `where` method of `DataArray` and `Dataset`
-        keep_attrs = lambda attrs, context: attrs[1]
+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else {}
 
     # alignment for three arguments is complicated, so don't support it yet
     return apply_ufunc(
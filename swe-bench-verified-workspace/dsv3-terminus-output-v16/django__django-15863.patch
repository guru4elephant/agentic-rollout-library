diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..7a2f741ab7 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,8 +151,12 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
+        if isinstance(text, Decimal):
+            d = text
+            input_val = str(text)
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
     except InvalidOperation:
         try:
             d = Decimal(str(float(text)))
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..ae8c3ddb1d
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,138 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(USE_I18N=True, USE_L10N=True, TEMPLATES=TEMPLATES)
+setup()
+
+def test_original_issue():
+    """Test the exact issue reported in GitHub"""
+    print("=== Testing Original GitHub Issue ===")
+    value = Decimal('42.12345678901234567890')
+    precision = 20
+    
+    # Test template filter
+    t = Template('{{ value|floatformat:20 }}')
+    c = Context({'value': value})
+    result_template = t.render(c)
+    
+    # Test direct function call
+    result_direct = floatformat(value, precision)
+    
+    expected = '42.12345678901234567890'
+    
+    print(f"Input: {value}")
+    print(f"Precision: {precision}")
+    print(f"Expected: {expected}")
+    print(f"Template result: {result_template}")
+    print(f"Direct result: {result_direct}")
+    print(f"Template matches: {result_template == expected}")
+    print(f"Direct matches: {result_direct == expected}")
+    
+    assert result_template == expected, f"Template failed: {result_template} != {expected}"
+    assert result_direct == expected, f"Direct call failed: {result_direct} != {expected}"
+    print("✓ Original issue is fixed!")
+
+def test_backward_compatibility():
+    """Test that we haven't broken existing functionality"""
+    print("\n=== Testing Backward Compatibility ===")
+    
+    test_cases = [
+        # From existing Django tests
+        (7.7, -1, "7.7"),
+        (7.0, -1, "7"),
+        (0.7, -1, "0.7"),
+        (-0.7, -1, "-0.7"),
+        (0.07, -1, "0.1"),
+        (-0.07, -1, "-0.1"),
+        (0.007, -1, "0.0"),
+        (0.0, -1, "0"),
+        (7.7, 0, "8"),
+        (7.7, 3, "7.700"),
+        (6.000000, 3, "6.000"),
+        (6.200000, 3, "6.200"),
+        (6.200000, -3, "6.200"),
+        (13.1031, -3, "13.103"),
+        (11.1197, -2, "11.12"),
+        (11.0000, -2, "11"),
+        (11.000001, -2, "11.00"),
+        (8.2798, 3, "8.280"),
+        (5555.555, 2, "5555.56"),
+        (001.3000, 2, "1.30"),
+        (0.12345, 2, "0.12"),
+        (Decimal("555.555"), 2, "555.56"),
+        (Decimal("09.000"), -1, "9"),
+        ("foo", -1, ""),
+        (13.1031, "bar", "13.1031"),
+        (18.125, 2, "18.13"),
+        ("foo", "bar", ""),
+        ("¿Cómo esta usted?", -1, ""),
+        (None, -1, ""),
+    ]
+    
+    all_passed = True
+    for i, (value, precision, expected) in enumerate(test_cases):
+        try:
+            result = floatformat(value, precision)
+            if result != expected:
+                print(f"✗ Case {i+1}: {value} ({type(value).__name__}, precision {precision}) -> {result} (expected {expected})")
+                all_passed = False
+            else:
+                print(f"✓ Case {i+1}: {value} ({type(value).__name__}, precision {precision}) -> {result}")
+        except Exception as e:
+            print(f"✗ Case {i+1}: {value} ({type(value).__name__}, precision {precision}) -> ERROR: {e}")
+            all_passed = False
+    
+    if all_passed:
+        print("✓ All backward compatibility tests passed!")
+    else:
+        print("✗ Some backward compatibility tests failed!")
+    
+    return all_passed
+
+def test_edge_cases():
+    """Test edge cases for Decimal precision"""
+    print("\n=== Testing Edge Cases ===")
+    
+    test_cases = [
+        (Decimal('0.12345678901234567890'), 20, '0.12345678901234567890'),
+        (Decimal('123.45678901234567890123'), 15, '123.456789012345679'),
+        (Decimal('999.99999999999999999999'), 10, '1000.0000000000'),
+        (Decimal('0.00000000000000000001'), 20, '0.00000000000000000001'),
+        (Decimal('12345678901234567890.12345678901234567890'), 10, '12345678901234567890.1234567890'),
+    ]
+    
+    all_passed = True
+    for i, (value, precision, expected) in enumerate(test_cases):
+        result = floatformat(value, precision)
+        if result != expected:
+            print(f"✗ Case {i+1}: {value} (precision {precision}) -> {result} (expected {expected})")
+            all_passed = False
+        else:
+            print(f"✓ Case {i+1}: {value} (precision {precision}) -> {result}")
+    
+    if all_passed:
+        print("✓ All edge case tests passed!")
+    else:
+        print("✗ Some edge case tests failed!")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    test_original_issue()
+    backward_ok = test_backward_compatibility()
+    edge_ok = test_edge_cases()
+    
+    print("\n=== Final Result ===")
+    if backward_ok and edge_ok:
+        print("✓ All tests passed! The fix is working correctly.")
+    else:
+        print("✗ Some tests failed! The fix needs more work.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6c2c7f5c67
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django settings
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test the issue
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+
+print(f"Expected: 42.12345678901234567890")
+print(f"Actual:   {result}")
+print(f"Match:    {result == '42.12345678901234567890'}")
+
+# Let's also test what happens with the current implementation
+from django.template.defaultfilters import floatformat
+
+print("\nTesting floatformat function directly:")
+input_val = Decimal('42.12345678901234567890')
+result_direct = floatformat(input_val, 20)
+print(f"Direct call result: {result_direct}")
\ No newline at end of file
diff --git a/test_decimal_precision.py b/test_decimal_precision.py
new file mode 100644
index 0000000000..6ccc640ae6
--- /dev/null
+++ b/test_decimal_precision.py
@@ -0,0 +1,55 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(USE_I18N=True, USE_L10N=True, TEMPLATES=TEMPLATES)
+setup()
+
+def test_decimal_precision():
+    """Test that floatformat preserves precision for Decimal numbers"""
+    
+    # Test the exact case from the GitHub issue
+    value = Decimal('42.12345678901234567890')
+    precision = 20
+    
+    # Test using template filter
+    t = Template('{{ value|floatformat:20 }}')
+    c = Context({'value': value})
+    result_template = t.render(c)
+    
+    # Test using direct function call
+    result_direct = floatformat(value, precision)
+    
+    expected = '42.12345678901234567890'
+    
+    print(f"Input: {value}")
+    print(f"Precision: {precision}")
+    print(f"Expected: {expected}")
+    print(f"Template result: {result_template}")
+    print(f"Direct result: {result_direct}")
+    print(f"Template matches: {result_template == expected}")
+    print(f"Direct matches: {result_direct == expected}")
+    
+    # Additional edge cases
+    test_cases = [
+        (Decimal('0.12345678901234567890'), 20, '0.12345678901234567890'),
+        (Decimal('123.45678901234567890123'), 15, '123.456789012345679'),
+        (Decimal('999.99999999999999999999'), 10, '1000.0000000000'),
+    ]
+    
+    print("\nAdditional test cases:")
+    for i, (val, prec, exp) in enumerate(test_cases):
+        result = floatformat(val, prec)
+        print(f"Case {i+1}: {val} (precision {prec}) -> {result} (expected: {exp})")
+        print(f"  Match: {result == exp}")
+
+if __name__ == "__main__":
+    test_decimal_precision()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f1711d4ca6
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,56 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+settings.configure(USE_I18N=True, USE_L10N=True)
+setup()
+
+# Test various edge cases
+test_cases = [
+    # Regular floats
+    (42.12345678901234567890, 20),
+    (0.0, 5),
+    (1.0, 5),
+    (-123.456, 3),
+    
+    # Decimal numbers
+    (Decimal('42.12345678901234567890'), 20),
+    (Decimal('0.0'), 5),
+    (Decimal('1.0'), 5),
+    (Decimal('-123.456'), 3),
+    
+    # Large numbers
+    (Decimal('12345678901234567890.12345678901234567890'), 10),
+    
+    # Small numbers
+    (Decimal('0.00000000000000000001'), 20),
+    
+    # Integer inputs
+    (42, 5),
+    (-123, 3),
+    
+    # String inputs
+    ('42.123', 5),
+    ('-123.456', 3),
+    
+    # Edge cases that might fail
+    ('not_a_number', 5),
+    (None, 5),
+]
+
+print("Testing edge cases:")
+for i, (value, precision) in enumerate(test_cases):
+    try:
+        result = floatformat(value, precision)
+        print(f"Case {i+1}: {value} (precision {precision}) -> {result}")
+    except Exception as e:
+        print(f"Case {i+1}: {value} (precision {precision}) -> ERROR: {e}")
+
+# Test the original issue case specifically
+print("\nOriginal issue test:")
+result = floatformat(Decimal('42.12345678901234567890'), 20)
+print(f"Expected: 42.12345678901234567890")
+print(f"Actual:   {result}")
+print(f"Match:    {result == '42.12345678901234567890'}")
\ No newline at end of file
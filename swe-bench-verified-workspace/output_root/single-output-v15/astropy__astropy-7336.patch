diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a850..4cccf551ba 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -221,7 +221,10 @@ class QuantityInput:
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
             if wrapped_signature.return_annotation is not inspect.Signature.empty:
-                return return_.to(wrapped_signature.return_annotation)
+                if return_ is not None:
+                    return return_.to(wrapped_signature.return_annotation)
+                else:
+                    return return_
             else:
                 return return_
 
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..83b7bf5702
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,53 @@
+import astropy.units as u
+
+
+class PoC(object):
+    """Exact reproduction from the GitHub issue"""
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+
+class PoCWithReturn(object):
+    """Test case with actual return value and annotation"""
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> u.V:
+        self.voltage = voltage
+        return voltage
+
+
+class PoCNoAnnotation(object):
+    """Test case without return annotation"""
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V):
+        self.voltage = voltage
+
+
+if __name__ == '__main__':
+    print("Testing the exact scenario from GitHub issue...")
+    
+    # This should work now (was failing before)
+    try:
+        poc = PoC(1.*u.V)
+        print("✓ PoC constructor with -> None annotation works")
+    except Exception as e:
+        print(f"✗ PoC constructor failed: {e}")
+    
+    # Test with return value and annotation
+    try:
+        poc_with_return = PoCWithReturn(2.*u.V)
+        print(f"✓ PoCWithReturn constructor works: {poc_with_return}")
+    except Exception as e:
+        print(f"✗ PoCWithReturn constructor failed: {e}")
+    
+    # Test without return annotation
+    try:
+        poc_no_annotation = PoCNoAnnotation(3.*u.V)
+        print(f"✓ PoCNoAnnotation constructor works: {poc_no_annotation.voltage}")
+    except Exception as e:
+        print(f"✗ PoCNoAnnotation constructor failed: {e}")
+    
+    print("All tests completed successfully!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cc943f0261
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+import astropy.units as u
+
+
+class PoC(object):
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+
+if __name__ == '__main__':
+    poc = PoC(1.*u.V)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..577cca4de4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,68 @@
+import astropy.units as u
+
+
+# Test case 1: Constructor with -> None annotation (original issue)
+class TestClass1(object):
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        self.voltage = voltage
+
+# Test case 2: Regular function with -> None annotation
+@u.quantity_input
+def test_function_none(voltage: u.V) -> None:
+    print(f"Voltage: {voltage}")
+
+# Test case 3: Function with actual return value and annotation
+@u.quantity_input
+def test_function_return(voltage: u.V) -> u.mV:
+    return voltage * 1000
+
+# Test case 4: Function without return annotation
+@u.quantity_input
+def test_function_no_annotation(voltage: u.V):
+    return voltage
+
+# Test case 5: Function that returns None but has no return annotation
+@u.quantity_input
+def test_function_return_none_no_annotation(voltage: u.V):
+    return None
+
+if __name__ == '__main__':
+    print("Testing edge cases...")
+    
+    # Test 1: Constructor with -> None
+    try:
+        obj1 = TestClass1(1.0 * u.V)
+        print("✓ TestClass1 constructor works")
+    except Exception as e:
+        print(f"✗ TestClass1 failed: {e}")
+    
+    # Test 2: Function with -> None
+    try:
+        test_function_none(2.0 * u.V)
+        print("✓ Function with -> None works")
+    except Exception as e:
+        print(f"✗ Function with -> None failed: {e}")
+    
+    # Test 3: Function with return value and annotation
+    try:
+        result = test_function_return(3.0 * u.V)
+        print(f"✓ Function with return annotation works: {result}")
+    except Exception as e:
+        print(f"✗ Function with return annotation failed: {e}")
+    
+    # Test 4: Function without return annotation
+    try:
+        result = test_function_no_annotation(4.0 * u.V)
+        print(f"✓ Function without return annotation works: {result}")
+    except Exception as e:
+        print(f"✗ Function without return annotation failed: {e}")
+    
+    # Test 5: Function returns None without annotation
+    try:
+        result = test_function_return_none_no_annotation(5.0 * u.V)
+        print(f"✓ Function returns None without annotation works: {result}")
+    except Exception as e:
+        print(f"✗ Function returns None without annotation failed: {e}")
+    
+    print("All tests completed!")
\ No newline at end of file
diff --git a/django/apps/registry.py b/django/apps/registry.py
index 0683f3ad3c..481dd1fc86 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -376,6 +376,7 @@ class Apps:
         # Call expire cache on each model. This will purge
         # the relation tree and the fields cache.
         self.get_models.cache_clear()
+        self.get_swappable_settings_name.cache_clear()
         if self.ready:
             # Circumvent self.get_models() to prevent that the cache is refilled.
             # This particularly prevents that an empty value is cached while cloning.
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..ab2f81ed3d
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+"""
+Final verification that the fix works correctly and doesn't break anything.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_comprehensive():
+    """Comprehensive test of the fix."""
+    print("=== COMPREHENSIVE TEST OF THE FIX ===")
+    
+    # Test 1: Basic functionality
+    print("\n1. Testing basic functionality...")
+    result = apps.get_swappable_settings_name('auth.User')
+    assert result == 'AUTH_USER_MODEL', f"Expected 'AUTH_USER_MODEL', got '{result}'"
+    print("✅ Basic functionality works")
+    
+    # Test 2: Cache is populated
+    print("\n2. Testing cache population...")
+    cache_info = apps.get_swappable_settings_name.cache_info()
+    assert cache_info.currsize > 0, "Cache should be populated"
+    print(f"✅ Cache is populated (size: {cache_info.currsize})")
+    
+    # Test 3: clear_cache() clears the cache
+    print("\n3. Testing clear_cache()...")
+    apps.clear_cache()
+    cache_info_after = apps.get_swappable_settings_name.cache_info()
+    assert cache_info_after.currsize == 0, "Cache should be empty after clear_cache()"
+    print(f"✅ Cache cleared successfully (size: {cache_info_after.currsize})")
+    
+    # Test 4: Subsequent calls work correctly
+    print("\n4. Testing subsequent calls...")
+    result2 = apps.get_swappable_settings_name('auth.User')
+    assert result2 == 'AUTH_USER_MODEL', f"Expected 'AUTH_USER_MODEL', got '{result2}'"
+    cache_info_final = apps.get_swappable_settings_name.cache_info()
+    assert cache_info_final.hits == 0, "Should be a miss, not a hit"
+    print("✅ Subsequent calls work correctly (cache miss)")
+    
+    # Test 5: Multiple clear_cache() calls work
+    print("\n5. Testing multiple clear_cache() calls...")
+    apps.clear_cache()
+    apps.clear_cache()  # Should not cause issues
+    cache_info_double = apps.get_swappable_settings_name.cache_info()
+    assert cache_info_double.currsize == 0, "Cache should remain empty"
+    print("✅ Multiple clear_cache() calls work")
+    
+    # Test 6: Other Apps methods still work
+    print("\n6. Testing other Apps methods...")
+    models = apps.get_models()
+    assert len(models) > 0, "Should get models"
+    app_config = apps.get_app_config('auth')
+    assert app_config is not None, "Should get app config"
+    print("✅ Other Apps methods work correctly")
+    
+    print("\n=== ALL TESTS PASSED ===")
+    return True
+
+if __name__ == "__main__":
+    try:
+        success = test_comprehensive()
+        sys.exit(0 if success else 1)
+    except Exception as e:
+        print(f"❌ TEST FAILED: {e}")
+        import traceback
+        traceback.print_exc()
+        sys.exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4c4f615f23
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where apps.clear_cache() doesn't clear 
+get_swappable_settings_name cache.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_swappable_cache_clear():
+    """Test that clear_cache() clears get_swappable_settings_name cache."""
+    print("Testing get_swappable_settings_name cache behavior...")
+    
+    # First call - should populate cache
+    result1 = apps.get_swappable_settings_name("auth.User")
+    print(f"First call result: {result1}")
+    
+    # Check cache info before clearing
+    cache_info_before = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info before clear_cache(): {cache_info_before}")
+    
+    # Clear the cache
+    apps.clear_cache()
+    
+    # Check cache info after clearing
+    cache_info_after = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after clear_cache(): {cache_info_after}")
+    
+    # Second call - should hit cache again if cache wasn't cleared
+    result2 = apps.get_swappable_settings_name("auth.User")
+    print(f"Second call result: {result2}")
+    
+    # Check final cache info
+    cache_info_final = apps.get_swappable_settings_name.cache_info()
+    print(f"Final cache info: {cache_info_final}")
+    
+    # The issue: if hits increase after clear_cache, the cache wasn't properly cleared
+    if cache_info_final.hits > cache_info_before.hits:
+        print("❌ ISSUE CONFIRMED: clear_cache() did not clear get_swappable_settings_name cache")
+        return False
+    else:
+        print("✅ SUCCESS: clear_cache() properly cleared get_swappable_settings_name cache")
+        return True
+
+if __name__ == "__main__":
+    success = test_swappable_cache_clear()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_apps_functionality.py b/test_apps_functionality.py
new file mode 100644
index 0000000000..0e17262ba3
--- /dev/null
+++ b/test_apps_functionality.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+"""
+Test to ensure the Apps functionality works correctly after the fix.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+        TEST_RUNNER='django.test.runner.DiscoverRunner',
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_basic_apps_functionality():
+    """Test that basic Apps functionality still works."""
+    print("Testing basic Apps functionality...")
+    
+    # Test get_app_configs
+    app_configs = list(apps.get_app_configs())
+    print(f"Number of app configs: {len(app_configs)}")
+    
+    # Test get_app_config
+    auth_config = apps.get_app_config('auth')
+    print(f"Auth app config: {auth_config}")
+    
+    # Test get_models
+    models = apps.get_models()
+    print(f"Number of models: {len(models)}")
+    
+    # Test get_model
+    user_model = apps.get_model('auth', 'User')
+    print(f"User model: {user_model}")
+    
+    # Test get_swappable_settings_name
+    swappable = apps.get_swappable_settings_name('auth.User')
+    print(f"Swappable settings name: {swappable}")
+    
+    # Test clear_cache
+    apps.clear_cache()
+    print("clear_cache() executed successfully")
+    
+    # Test get_swappable_settings_name again after clear_cache
+    swappable2 = apps.get_swappable_settings_name('auth.User')
+    print(f"Swappable settings name after clear_cache: {swappable2}")
+    
+    return True
+
+def test_cache_consistency():
+    """Test that cache is consistent after clear_cache."""
+    print("Testing cache consistency...")
+    
+    # Initial call
+    result1 = apps.get_swappable_settings_name('auth.User')
+    cache_info1 = apps.get_swappable_settings_name.cache_info()
+    print(f"First call - Cache info: {cache_info1}")
+    
+    # Clear cache
+    apps.clear_cache()
+    cache_info2 = apps.get_swappable_settings_name.cache_info()
+    print(f"After clear_cache - Cache info: {cache_info2}")
+    
+    # Second call should not hit cache
+    result2 = apps.get_swappable_settings_name('auth.User')
+    cache_info3 = apps.get_swappable_settings_name.cache_info()
+    print(f"Second call - Cache info: {cache_info3}")
+    
+    # Results should be the same
+    if result1 == result2:
+        print("✅ Results are consistent")
+    else:
+        print("❌ Results are inconsistent")
+        return False
+    
+    # Cache should show a miss, not a hit
+    if cache_info3.hits == 0:
+        print("✅ Cache was properly cleared")
+        return True
+    else:
+        print("❌ Cache was not properly cleared")
+        return False
+
+if __name__ == "__main__":
+    success1 = test_basic_apps_functionality()
+    success2 = test_cache_consistency()
+    
+    overall_success = success1 and success2
+    print(f"\nOverall test result: {'PASS' if overall_success else 'FAIL'}")
+    sys.exit(0 if overall_success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..cc0047b315
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the get_swappable_settings_name cache clearing fix.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_multiple_calls():
+    """Test multiple calls with different parameters."""
+    print("Testing multiple calls with different parameters...")
+    
+    # Call with different parameters to populate cache
+    result1 = apps.get_swappable_settings_name("auth.User")
+    result2 = apps.get_swappable_settings_name("auth.Group")
+    result3 = apps.get_swappable_settings_name("contenttypes.ContentType")
+    
+    print(f"Results: {result1}, {result2}, {result3}")
+    
+    cache_info_before = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info before clear_cache(): {cache_info_before}")
+    
+    # Clear the cache
+    apps.clear_cache()
+    
+    cache_info_after = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after clear_cache(): {cache_info_after}")
+    
+    # Call again with same parameters
+    result4 = apps.get_swappable_settings_name("auth.User")
+    result5 = apps.get_swappable_settings_name("auth.Group")
+    result6 = apps.get_swappable_settings_name("contenttypes.ContentType")
+    
+    cache_info_final = apps.get_swappable_settings_name.cache_info()
+    print(f"Final cache info: {cache_info_final}")
+    
+    # All calls after clear_cache should be misses, not hits
+    if cache_info_final.hits == 0:
+        print("✅ SUCCESS: All calls after clear_cache() were misses")
+        return True
+    else:
+        print("❌ FAILURE: Some calls after clear_cache() were hits")
+        return False
+
+def test_empty_cache():
+    """Test clearing an empty cache."""
+    print("Testing clearing an empty cache...")
+    
+    # Clear cache before any calls
+    apps.clear_cache()
+    
+    cache_info_before = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info before any calls: {cache_info_before}")
+    
+    # Make a call
+    result = apps.get_swappable_settings_name("auth.User")
+    print(f"Result: {result}")
+    
+    cache_info_after_call = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after call: {cache_info_after_call}")
+    
+    # Clear cache again
+    apps.clear_cache()
+    
+    cache_info_final = apps.get_swappable_settings_name.cache_info()
+    print(f"Final cache info: {cache_info_final}")
+    
+    if cache_info_final.currsize == 0:
+        print("✅ SUCCESS: Empty cache cleared properly")
+        return True
+    else:
+        print("❌ FAILURE: Empty cache not cleared properly")
+        return False
+
+if __name__ == "__main__":
+    success1 = test_multiple_calls()
+    success2 = test_empty_cache()
+    
+    overall_success = success1 and success2
+    print(f"\nOverall test result: {'PASS' if overall_success else 'FAIL'}")
+    sys.exit(0 if overall_success else 1)
\ No newline at end of file
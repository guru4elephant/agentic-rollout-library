diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..5edbbd376f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..15b26b5386
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create an instance
+instance = TestModel(name="John", age=25)
+
+print("Testing model_to_dict behavior with empty fields list:")
+print("=" * 50)
+
+# Test 1: Normal case with specific fields
+result1 = model_to_dict(instance, fields=['name'])
+print(f"model_to_dict(instance, fields=['name']) = {result1}")
+
+# Test 2: Empty fields list - this should return empty dict but currently returns all fields
+result2 = model_to_dict(instance, fields=[])
+print(f"model_to_dict(instance, fields=[]) = {result2}")
+print(f"Expected: {{}}, Got: {result2}")
+
+# Test 3: None fields (default behavior)
+result3 = model_to_dict(instance, fields=None)
+print(f"model_to_dict(instance, fields=None) = {result3}")
+
+# Test 4: Check if empty list returns empty dict
+if result2 == {}:
+    print("✓ PASS: Empty fields list returns empty dict")
+else:
+    print("✗ FAIL: Empty fields list should return empty dict but returns all fields")
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f64b97a501
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create an instance
+instance = TestModel(name="John", age=25)
+
+print("Testing edge cases for model_to_dict:")
+print("=" * 50)
+
+# Test 1: Empty fields list
+result1 = model_to_dict(instance, fields=[])
+print(f"model_to_dict(instance, fields=[]) = {result1}")
+assert result1 == {}, "Empty fields list should return empty dict"
+
+# Test 2: None fields (default)
+result2 = model_to_dict(instance, fields=None)
+print(f"model_to_dict(instance, fields=None) = {result2}")
+assert len(result2) > 0, "None fields should return all fields"
+
+# Test 3: Specific fields
+result3 = model_to_dict(instance, fields=['name'])
+print(f"model_to_dict(instance, fields=['name']) = {result3}")
+assert result3 == {'name': 'John'}, "Should return only specified field"
+
+# Test 4: Non-existent field
+result4 = model_to_dict(instance, fields=['nonexistent'])
+print(f"model_to_dict(instance, fields=['nonexistent']) = {result4}")
+assert result4 == {}, "Non-existent field should return empty dict"
+
+# Test 5: Mixed existing and non-existing fields
+result5 = model_to_dict(instance, fields=['name', 'nonexistent'])
+print(f"model_to_dict(instance, fields=['name', 'nonexistent']) = {result5}")
+assert result5 == {'name': 'John'}, "Should return only existing fields"
+
+# Test 6: Empty exclude list (should not affect behavior)
+result6 = model_to_dict(instance, exclude=[])
+print(f"model_to_dict(instance, exclude=[]) = {result6}")
+assert len(result6) > 0, "Empty exclude should not affect result"
+
+# Test 7: With exclude
+result7 = model_to_dict(instance, exclude=['age'])
+print(f"model_to_dict(instance, exclude=['age']) = {result7}")
+assert 'age' not in result7, "Excluded field should not be in result"
+
+print("All tests passed!")
\ No newline at end of file
=== Starting task for instance: django__django-15127 ===
Task ID: 179
Pod name: r2e-django-django-15127-8191
Max execution time: 1800.0s (30.0 minutes)
LLM timeout: 600.0s
Tool timeout: 600.0s
Pod name: r2e-django-django-15127-8191
Using image: iregistry.baidu-int.com/acg-airec/r2e_gym/slimshetty/swebench-verified:sweb.eval.x86_64.django__django-15127
K8S executor initialized

=== Iteration 1/100 ===
Calling LLM with timeout=600.0s...
LLM Response: I'll help you implement the necessary changes to fix the issue where `LEVEL_TAGS` are not updated when using `@override_settings`. Let me start by exploring the repository structure to understand the ...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed"
}
Tool execution status: success
Tool stdout:
Here's the files and directories up to 2 levels deep in /testbed, excluding hidden:
/testbed
/testbed/AUTHORS
/testbed/tests
/testbed/tests/get_or_create
/testbed/tests/m2m_multiple
/testbed/tests/urlpatterns_reverse
/testbed/tests/m2m_recursive
/testbed/tests/template_backends
/testbed/tests/builtin_server
/testbed/tests/m2m_through_regress
/testbed/tests/admin_filters
/testbed/tests/backends
/testbed/tests/project_template
/testbed/tests/datetimes
/testbed/tests/admin_views
/testbed/tests/template_tests
/testbed/tests/reserved_names
/testbed/tests/unmanaged_models
/testbed/tests/contenttypes_tests
/testbed/tests/custom_pk
/testbed/tests/signing
/testbed/tests/base
/testbed/tests/validators
/testbed/tests/test_runner
/testbed/tests/delete_regress
/testbed/tests/model_regress
/testbed/tests/requirements
/testbed/tests/model_meta
/testbed/tests/expressions_window
/testbed/tests/defer_regress
/testbed/tests/foreign_object
/testbed/tests/m2m_intermediary
/testbed/tests/test_client
/testbed/tests/test_runner_apps
/testbed/tests/many_to_one
/testbed/tests/null_queries
/testbed/tests/transaction_hooks
/testbed/tests/requests
/testbed/tests/dates
/testbed/tests/validation
/testbed/tests/introspection
/testbed/tests/proxy_models
/testbed/tests/admin_changelist
/testbed/tests/many_to_many
/testbed/tests/datatypes
/testbed/tests/migrations2
/testbed/tests/cache
/testbed/tests/generic_relations
/testbed/tests/pagination
/testbed/tests/reverse_lookup
/testbed/tests/decorators
/testbed/tests/string_lookup
/testbed/tests/aggregation_regress
/testbed/tests/max_lengths
/testbed/tests/get_object_or_404
/testbed/tests/db_utils
/testbed/tests/indexes
/testbed/tests/migration_test_data_persistence
/testbed/tests/basic
/testbed/tests/apps
/testbed/tests/m2m_signals
/testbed/tests/many_to_one_null
/testbed/tests/templates
/testbed/tests/model_package
/testbed/tests/admin_docs
/testbed/tests/m2m_through
/testbed/tests/utils_tests
/testbed/tests/filtered_relation
/testbed/tests/admin_custom_urls
/testbed/tests/bulk_create
/testbed/tests/admin_inlines
/testbed/tests/str
/testbed/tests/field_deconstruction
/testbed/tests/flatpages_tests
/testbed/tests/fixtures_regress
/testbed/tests/model_inheritance_regress
/testbed/tests/migrations
/testbed/tests/httpwrappers
/testbed/tests/model_formsets
/testbed/tests/annotations
/testbed/tests/delete
/testbed/tests/model_utils
/testbed/tests/managers_regress
/testbed/tests/test_client_regress
/testbed/tests/messages_tests
/testbed/tests/db_functions
/testbed/tests/asgi
/testbed/tests/sites_framework
/testbed/tests/generic_inline_admin
/testbed/tests/shortcuts
/testbed/tests/version
/testbed/tests/admin_checks
/testbed/tests/template_loader
/testbed/tests/inspectdb
/testbed/tests/syndication_tests
/testbed/tests/custom_managers
/testbed/tests/lookup
/testbed/tests/async
/testbed/tests/custom_methods
/testbed/tests/auth_tests
/testbed/tests/test_utils
/testbed/tests/test_exceptions
/testbed/tests/m2o_recursive
/testbed/tests/m2m_and_m2o
/testbed/tests/m2m_regress
/testbed/tests/model_forms
/testbed/tests/staticfiles_tests
/testbed/tests/resolve_url
/testbed/tests/constraints
/testbed/tests/select_related_regress
/testbed/tests/serializers
/testbed/tests/urls.py
/testbed/tests/update
/testbed/tests/postgres_tests
/testbed/tests/known_related_objects
/testbed/tests/gis_tests
/testbed/tests/model_options
/testbed/tests/file_uploads
/testbed/tests/README.rst
/testbed/tests/signed_cookies_tests
/testbed/tests/model_fields
/testbed/tests/from_db_value
/testbed/tests/null_fk_ordering
/testbed/tests/update_only_fields
/testbed/tests/dispatch
/testbed/tests/test_sqlite.py
/testbed/tests/forms_tests
/testbed/tests/inline_formsets
/testbed/tests/defer
/testbed/tests/queryset_pickle
/testbed/tests/dbshell
/testbed/tests/files
/testbed/tests/multiple_database
/testbed/tests/csrf_tests
/testbed/tests/generic_relations_regress
/testbed/tests/mail
/testbed/tests/custom_migration_operations
/testbed/tests/sessions_tests
/testbed/tests/model_enums
/testbed/tests/responses
/testbed/tests/empty
/testbed/tests/raw_query
/testbed/tests/middleware_exceptions
/testbed/tests/force_insert_update
/testbed/tests/swappable_models
/testbed/tests/absolute_url_overrides
/testbed/tests/shell
/testbed/tests/select_related_onetoone
/testbed/tests/runtests.py
/testbed/tests/null_fk
/testbed/tests/conditional_processing
/testbed/tests/aggregation
/testbed/tests/logging_tests
/testbed/tests/transactions
/testbed/tests/fixtures_model_package
/testbed/tests/admin_autodiscover
/testbed/tests/middleware
/testbed/tests/ordering
/testbed/tests/field_defaults
/testbed/tests/signals
/testbed/tests/nested_foreign_keys
/testbed/tests/schema
/testbed/tests/migrate_signals
/testbed/tests/handlers
/testbed/tests/admin_scripts
/testbed/tests/admin_utils
/testbed/tests/app_loading
/testbed/tests/context_processors
/testbed/tests/file_storage
/testbed/tests/sites_tests
/testbed/tests/admin_registration
/testbed/tests/fixtures
/testbed/tests/bash_completion
/testbed/tests/db_typecasts
/testbed/tests/wsgi
/testbed/tests/model_inheritance
/testbed/tests/custom_lookups
/testbed/tests/or_lookups
/testbed/tests/extra_regress
/testbed/tests/sitemaps_tests
/testbed/tests/model_formsets_regress
/testbed/tests/save_delete_hooks
/testbed/tests/invalid_models_tests
/testbed/tests/timezones
/testbed/tests/servers
/testbed/tests/import_error_package
/testbed/tests/deprecation
/testbed/tests/select_for_update
/testbed/tests/mutually_referential
/testbed/tests/queries
/testbed/tests/view_tests
/testbed/tests/user_commands
/testbed/tests/generic_views
/testbed/tests/modeladmin
/testbed/tests/expressions
/testbed/tests/i18n
/testbed/tests/admin_ordering
/testbed/tests/distinct_on_fields
/testbed/tests/get_earliest_or_latest
/testbed/tests/order_with_respect_to
/testbed/tests/custom_columns
/testbed/tests/urlpatterns
/testbed/tests/properties
/testbed/tests/one_to_one
/testbed/tests/model_indexes
/testbed/tests/prefetch_related
/testbed/tests/humanize_tests
/testbed/tests/check_framework
/testbed/tests/expressions_case
/testbed/tests/admin_default_site
/testbed/tests/proxy_model_inheritance
/testbed/tests/empty_models
/testbed/tests/field_subclassing
/testbed/tests/admin_widgets
/testbed/tests/redirects_tests
/testbed/tests/settings_tests
/testbed/tests/no_models
/testbed/tests/select_related
/testbed/scripts
/testbed/scripts/manage_translations.py
/testbed/scripts/rpm-install.sh
/testbed/Django.egg-info
/testbed/Django.egg-info/not-zip-safe
/testbed/Django.egg-info/PKG-INFO
/testbed/Django.egg-info/entry_points.txt
/testbed/Django.egg-info/SOURCES.txt
/testbed/Django.egg-info/top_level.txt
/testbed/Django.egg-info/dependency_links.txt
/testbed/Django.egg-info/requires.txt
/testbed/LICENSE
/testbed/docs
/testbed/docs/releases
/testbed/docs/spelling_wordlist
/testbed/docs/index.txt
/testbed/docs/misc
/testbed/docs/Makefile
/testbed/docs/topics
/testbed/docs/requirements.txt
/testbed/docs/faq
/testbed/docs/internals
/testbed/docs/ref
/testbed/docs/README.rst
/testbed/docs/conf.py
/testbed/docs/glossary.txt
/testbed/docs/contents.txt
/testbed/docs/intro
/testbed/docs/man
/testbed/docs/make.bat
/testbed/docs/_theme
/testbed/docs/howto
/testbed/docs/_ext
/testbed/django
/testbed/django/contrib
/testbed/django/http
/testbed/django/conf
/testbed/django/__main__.py
/testbed/django/apps
/testbed/django/test
/testbed/django/utils
/testbed/django/core
/testbed/django/urls
/testbed/django/dispatch
/testbed/django/templatetags
/testbed/django/forms
/testbed/django/__init__.py
/testbed/django/template
/testbed/django/middleware
/testbed/django/views
/testbed/django/__pycache__
/testbed/django/db
/testbed/django/shortcuts.py
/testbed/pyproject.toml
/testbed/CONTRIBUTING.rst
/testbed/INSTALL
/testbed/README.rst
/testbed/setup.cfg
/testbed/Gruntfile.js
/testbed/js_tests
/testbed/js_tests/gis
/testbed/js_tests/admin
/testbed/js_tests/tests.html
/testbed/LICENSE.python
/testbed/package.json
/testbed/tox.ini
/testbed/setup.py
/testbed/MANIFEST.in
/testbed/extras
/testbed/extras/README.TXT
/testbed/extras/Makefile
/testbed/extras/django_bash_completion



=== Iteration 2/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Now let me explore the Django messages framework since the issue is related to `LEVEL_TAGS` not being updated with `@override_settings`. Let me look at the messages tests directory first to understand...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/tests/messages_tests"
}
Tool execution status: success
Tool stdout:
Here's the files and directories up to 2 levels deep in /testbed/tests/messages_tests, excluding hidden:
/testbed/tests/messages_tests
/testbed/tests/messages_tests/test_mixins.py
/testbed/tests/messages_tests/test_api.py
/testbed/tests/messages_tests/models.py
/testbed/tests/messages_tests/test_cookie.py
/testbed/tests/messages_tests/test_middleware.py
/testbed/tests/messages_tests/tests.py
/testbed/tests/messages_tests/urls.py
/testbed/tests/messages_tests/__init__.py
/testbed/tests/messages_tests/test_fallback.py
/testbed/tests/messages_tests/base.py
/testbed/tests/messages_tests/test_session.py



=== Iteration 3/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Let me look at the Django messages framework source code to understand how LEVEL_TAGS are handled:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>/testbed/django/contrib</...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/django/contrib"
}
Tool execution status: success
Tool stdout:
Here's the files and directories up to 2 levels deep in /testbed/django/contrib, excluding hidden:
/testbed/django/contrib
/testbed/django/contrib/gis
/testbed/django/contrib/gis/sitemaps
/testbed/django/contrib/gis/gdal
/testbed/django/contrib/gis/templates
/testbed/django/contrib/gis/geoip2
/testbed/django/contrib/gis/views.py
/testbed/django/contrib/gis/management
/testbed/django/contrib/gis/feeds.py
/testbed/django/contrib/gis/serializers
/testbed/django/contrib/gis/utils
/testbed/django/contrib/gis/forms
/testbed/django/contrib/gis/static
/testbed/django/contrib/gis/geometry.py
/testbed/django/contrib/gis/__init__.py
/testbed/django/contrib/gis/geos
/testbed/django/contrib/gis/locale
/testbed/django/contrib/gis/ptr.py
/testbed/django/contrib/gis/db
/testbed/django/contrib/gis/shortcuts.py
/testbed/django/contrib/gis/apps.py
/testbed/django/contrib/gis/measure.py
/testbed/django/contrib/gis/admin
/testbed/django/contrib/sites
/testbed/django/contrib/sites/requests.py
/testbed/django/contrib/sites/models.py
/testbed/django/contrib/sites/checks.py
/testbed/django/contrib/sites/migrations
/testbed/django/contrib/sites/managers.py
/testbed/django/contrib/sites/middleware.py
/testbed/django/contrib/sites/__init__.py
/testbed/django/contrib/sites/locale
/testbed/django/contrib/sites/management.py
/testbed/django/contrib/sites/shortcuts.py
/testbed/django/contrib/sites/apps.py
/testbed/django/contrib/sites/admin.py
/testbed/django/contrib/sitemaps
/testbed/django/contrib/sitemaps/templates
/testbed/django/contrib/sitemaps/views.py
/testbed/django/contrib/sitemaps/management
/testbed/django/contrib/sitemaps/__init__.py
/testbed/django/contrib/sitemaps/apps.py
/testbed/django/contrib/admindocs
/testbed/django/contrib/admindocs/templates
/testbed/django/contrib/admindocs/views.py
/testbed/django/contrib/admindocs/middleware.py
/testbed/django/contrib/admindocs/urls.py
/testbed/django/contrib/admindocs/__init__.py
/testbed/django/contrib/admindocs/locale
/testbed/django/contrib/admindocs/utils.py
/testbed/django/contrib/admindocs/apps.py
/testbed/django/contrib/postgres
/testbed/django/contrib/postgres/signals.py
/testbed/django/contrib/postgres/templates
/testbed/django/contrib/postgres/search.py
/testbed/django/contrib/postgres/constraints.py
/testbed/django/contrib/postgres/operations.py
/testbed/django/contrib/postgres/lookups.py
/testbed/django/contrib/postgres/forms
/testbed/django/contrib/postgres/__init__.py
/testbed/django/contrib/postgres/serializers.py
/testbed/django/contrib/postgres/locale
/testbed/django/contrib/postgres/validators.py
/testbed/django/contrib/postgres/fields
/testbed/django/contrib/postgres/indexes.py
/testbed/django/contrib/postgres/utils.py
/testbed/django/contrib/postgres/expressions.py
/testbed/django/contrib/postgres/functions.py
/testbed/django/contrib/postgres/aggregates
/testbed/django/contrib/postgres/apps.py
/testbed/django/contrib/postgres/jinja2
/testbed/django/contrib/flatpages
/testbed/django/contrib/flatpages/models.py
/testbed/django/contrib/flatpages/migrations
/testbed/django/contrib/flatpages/views.py
/testbed/django/contrib/flatpages/middleware.py
/testbed/django/contrib/flatpages/urls.py
/testbed/django/contrib/flatpages/templatetags
/testbed/django/contrib/flatpages/__init__.py
/testbed/django/contrib/flatpages/sitemaps.py
/testbed/django/contrib/flatpages/locale
/testbed/django/contrib/flatpages/apps.py
/testbed/django/contrib/flatpages/admin.py
/testbed/django/contrib/flatpages/forms.py
/testbed/django/contrib/humanize
/testbed/django/contrib/humanize/templatetags
/testbed/django/contrib/humanize/__init__.py
/testbed/django/contrib/humanize/locale
/testbed/django/contrib/humanize/apps.py
/testbed/django/contrib/redirects
/testbed/django/contrib/redirects/models.py
/testbed/django/contrib/redirects/migrations
/testbed/django/contrib/redirects/middleware.py
/testbed/django/contrib/redirects/__init__.py
/testbed/django/contrib/redirects/locale
/testbed/django/contrib/redirects/apps.py
/testbed/django/contrib/redirects/admin.py
/testbed/django/contrib/__init__.py
/testbed/django/contrib/sessions
/testbed/django/contrib/sessions/backends
/testbed/django/contrib/sessions/models.py
/testbed/django/contrib/sessions/base_session.py
/testbed/django/contrib/sessions/migrations
/testbed/django/contrib/sessions/middleware.py
/testbed/django/contrib/sessions/management
/testbed/django/contrib/sessions/exceptions.py
/testbed/django/contrib/sessions/__init__.py
/testbed/django/contrib/sessions/serializers.py
/testbed/django/contrib/sessions/locale
/testbed/django/contrib/sessions/apps.py
/testbed/django/contrib/auth
/testbed/django/contrib/auth/models.py
/testbed/django/contrib/auth/signals.py
/testbed/django/contrib/auth/templates
/testbed/django/contrib/auth/hashers.py
/testbed/django/contrib/auth/password_validation.py
/testbed/django/contrib/auth/backends.py
/testbed/django/contrib/auth/checks.py
/testbed/django/contrib/auth/migrations
/testbed/django/contrib/auth/mixins.py
/testbed/django/contrib/auth/views.py
/testbed/django/contrib/auth/middleware.py
/testbed/django/contrib/auth/tokens.py
/testbed/django/contrib/auth/management
/testbed/django/contrib/auth/common-passwords.txt.gz
/testbed/django/contrib/auth/urls.py
/testbed/django/contrib/auth/base_user.py
/testbed/django/contrib/auth/__init__.py
/testbed/django/contrib/auth/locale
/testbed/django/contrib/auth/handlers
/testbed/django/contrib/auth/validators.py
/testbed/django/contrib/auth/decorators.py
/testbed/django/contrib/auth/context_processors.py
/testbed/django/contrib/auth/apps.py
/testbed/django/contrib/auth/admin.py
/testbed/django/contrib/auth/forms.py
/testbed/django/contrib/messages
/testbed/django/contrib/messages/storage
/testbed/django/contrib/messages/constants.py
/testbed/django/contrib/messages/views.py
/testbed/django/contrib/messages/middleware.py
/testbed/django/contrib/messages/__init__.py
/testbed/django/contrib/messages/utils.py
/testbed/django/contrib/messages/context_processors.py
/testbed/django/contrib/messages/apps.py
/testbed/django/contrib/messages/api.py
/testbed/django/contrib/contenttypes
/testbed/django/contrib/contenttypes/models.py
/testbed/django/contrib/contenttypes/checks.py
/testbed/django/contrib/contenttypes/migrations
/testbed/django/contrib/contenttypes/fields.py
/testbed/django/contrib/contenttypes/views.py
/testbed/django/contrib/contenttypes/management
/testbed/django/contrib/contenttypes/__init__.py
/testbed/django/contrib/contenttypes/locale
/testbed/django/contrib/contenttypes/apps.py
/testbed/django/contrib/contenttypes/admin.py
/testbed/django/contrib/contenttypes/forms.py
/testbed/django/contrib/staticfiles
/testbed/django/contrib/staticfiles/checks.py
/testbed/django/contrib/staticfiles/views.py
/testbed/django/contrib/staticfiles/management
/testbed/django/contrib/staticfiles/urls.py
/testbed/django/contrib/staticfiles/testing.py
/testbed/django/contrib/staticfiles/handlers.py
/testbed/django/contrib/staticfiles/__init__.py
/testbed/django/contrib/staticfiles/finders.py
/testbed/django/contrib/staticfiles/utils.py
/testbed/django/contrib/staticfiles/storage.py
/testbed/django/contrib/staticfiles/apps.py
/testbed/django/contrib/admin
/testbed/django/contrib/admin/models.py
/testbed/django/contrib/admin/sites.py
/testbed/django/contrib/admin/templates
/testbed/django/contrib/admin/actions.py
/testbed/django/contrib/admin/checks.py
/testbed/django/contrib/admin/migrations
/testbed/django/contrib/admin/tests.py
/testbed/django/contrib/admin/options.py
/testbed/django/contrib/admin/templatetags
/testbed/django/contrib/admin/static
/testbed/django/contrib/admin/exceptions.py
/testbed/django/contrib/admin/__init__.py
/testbed/django/contrib/admin/widgets.py
/testbed/django/contrib/admin/locale
/testbed/django/contrib/admin/helpers.py
/testbed/django/contrib/admin/filters.py
/testbed/django/contrib/admin/decorators.py
/testbed/django/contrib/admin/views
/testbed/django/contrib/admin/utils.py
/testbed/django/contrib/admin/apps.py
/testbed/django/contrib/admin/forms.py
/testbed/django/contrib/syndication
/testbed/django/contrib/syndication/views.py
/testbed/django/contrib/syndication/__init__.py
/testbed/django/contrib/syndication/apps.py



=== Iteration 4/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Let me explore the messages framework specifically to understand the LEVEL_TAGS implementation:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>/testbed/django/contrib/mess...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/django/contrib/messages"
}
Tool execution status: success
Tool stdout:
Here's the files and directories up to 2 levels deep in /testbed/django/contrib/messages, excluding hidden:
/testbed/django/contrib/messages
/testbed/django/contrib/messages/storage
/testbed/django/contrib/messages/storage/cookie.py
/testbed/django/contrib/messages/storage/fallback.py
/testbed/django/contrib/messages/storage/__init__.py
/testbed/django/contrib/messages/storage/base.py
/testbed/django/contrib/messages/storage/session.py
/testbed/django/contrib/messages/constants.py
/testbed/django/contrib/messages/views.py
/testbed/django/contrib/messages/middleware.py
/testbed/django/contrib/messages/__init__.py
/testbed/django/contrib/messages/utils.py
/testbed/django/contrib/messages/context_processors.py
/testbed/django/contrib/messages/apps.py
/testbed/django/contrib/messages/api.py



=== Iteration 5/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Let me first examine the constants.py file to understand how LEVEL_TAGS are defined:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>/testbed/django/contrib/messages/consta...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/django/contrib/messages/constants.py"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on /testbed/django/contrib/messages/constants.py:
     1	DEBUG = 10
     2	INFO = 20
     3	SUCCESS = 25
     4	WARNING = 30
     5	ERROR = 40
     6	
     7	DEFAULT_TAGS = {
     8	    DEBUG: 'debug',
     9	    INFO: 'info',
    10	    SUCCESS: 'success',
    11	    WARNING: 'warning',
    12	    ERROR: 'error',
    13	}
    14	
    15	DEFAULT_LEVELS = {
    16	    'DEBUG': DEBUG,
    17	    'INFO': INFO,
    18	    'SUCCESS': SUCCESS,
    19	    'WARNING': WARNING,
    20	    'ERROR': ERROR,
    21	}


=== Iteration 6/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Now let me check the base storage class to see how LEVEL_TAGS are used:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>/testbed/django/contrib/messages/storage/base.py</pa...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/django/contrib/messages/storage/base.py"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on /testbed/django/contrib/messages/storage/base.py:
     1	from django.conf import settings
     2	from django.contrib.messages import constants, utils
     3	
     4	LEVEL_TAGS = utils.get_level_tags()
     5	
     6	
     7	class Message:
     8	    """
     9	    Represent an actual message that can be stored in any of the supported
    10	    storage classes (typically session- or cookie-based) and rendered in a view
    11	    or template.
    12	    """
    13	
    14	    def __init__(self, level, message, extra_tags=None):
    15	        self.level = int(level)
    16	        self.message = message
    17	        self.extra_tags = extra_tags
    18	
    19	    def _prepare(self):
    20	        """
    21	        Prepare the message for serialization by forcing the ``message``
    22	        and ``extra_tags`` to str in case they are lazy translations.
    23	        """
    24	        self.message = str(self.message)
    25	        self.extra_tags = str(self.extra_tags) if self.extra_tags is not None else None
    26	
    27	    def __eq__(self, other):
    28	        if not isinstance(other, Message):
    29	            return NotImplemented
    30	        return self.level == other.level and self.message == other.message
    31	
    32	    def __str__(self):
    33	        return str(self.message)
    34	
    35	    @property
    36	    def tags(self):
    37	        return ' '.join(tag for tag in [self.extra_tags, self.level_tag] if tag)
    38	
    39	    @property
    40	    def level_tag(self):
    41	        return LEVEL_TAGS.get(self.level, '')
    42	
    43	
    44	class BaseStorage:
    45	    """
    46	    This is the base backend for temporary message storage.
    47	
    48	    This is not a complete class; to be a usable storage backend, it must be
    49	    subclassed and the two methods ``_get`` and ``_store`` overridden.
    50	    """
    51	
    52	    def __init__(self, request, *args, **kwargs):
    53	        self.request = request
    54	        self._queued_messages = []
    55	        self.used = False
    56	        self.added_new = False
    57	        super().__init__(*args, **kwargs)
    58	
    59	    def __len__(self):
    60	        return len(self._loaded_messages) + len(self._queued_messages)
    61	
    62	    def __iter__(self):
    63	        self.used = True
    64	        if self._queued_messages:
    65	            self._loaded_messages.extend(self._queued_messages)
    66	            self._queued_messages = []
    67	        return iter(self._loaded_messages)
    68	
    69	    def __contains__(self, item):
    70	        return item in self._loaded_messages or item in self._queued_messages
    71	
    72	    def __repr__(self):
    73	        return f'<{self.__class__.__qualname__}: request={self.request!r}>'
    74	
    75	    @property
    76	    def _loaded_messages(self):
    77	        """
    78	        Return a list of loaded messages, retrieving them first if they have
    79	        not been loaded yet.
    80	        """
    81	        if not hasattr(self, '_loaded_data'):
    82	            messages, all_retrieved = self._get()
    83	            self._loaded_data = messages or []
    84	        return self._loaded_data
    85	
    86	    def _get(self, *args, **kwargs):
    87	        """
    88	        Retrieve a list of stored messages. Return a tuple of the messages
    89	        and a flag indicating whether or not all the messages originally
    90	        intended to be stored in this storage were, in fact, stored and
    91	        retrieved; e.g., ``(messages, all_retrieved)``.
    92	
    93	        **This method must be implemented by a subclass.**
    94	
    95	        If it is possible to tell if the backend was not used (as opposed to
    96	        just containing no messages) then ``None`` should be returned in
    97	        place of ``messages``.
    98	        """
    99	        raise NotImplementedError('subclasses of BaseStorage must provide a _get() method')
   100	
   101	    def _store(self, messages, response, *args, **kwargs):
   102	        """
   103	        Store a list of messages and return a list of any messages which could
   104	        not be stored.
   105	
   106	        One type of object must be able to be stored, ``Message``.
   107	
   108	        **This method must be implemented by a subclass.**
   109	        """
   110	        raise NotImplementedError('subclasses of BaseStorage must provide a _store() method')
   111	
   112	    def _prepare_messages(self, messages):
   113	        """
   114	        Prepare a list of messages for storage.
   115	        """
   116	        for message in messages:
   117	            message._prepare()
   118	
   119	    def update(self, response):
   120	        """
   121	        Store all unread messages.
   122	
   123	        If the backend has yet to be iterated, store previously stored messages
   124	        again. Otherwise, only store messages added after the last iteration.
   125	        """
   126	        self._prepare_messages(self._queued_messages)
   127	        if self.used:
   128	            return self._store(self._queued_messages, response)
   129	        elif self.added_new:
   130	            messages = self._loaded_messages + self._queued_messages
   131	            return self._store(messages, response)
   132	
   133	    def add(self, level, message, extra_tags=''):
   134	        """
   135	        Queue a message to be stored.
   136	
   137	        The message is only queued if it contained something and its level is
   138	        not less than the recording level (``self.level``).
   139	        """
   140	        if not message:
   141	            return
   142	        # Check that the message level is not less than the recording level.
   143	        level = int(level)
   144	        if level < self.level:
   145	            return
   146	        # Add the message.
   147	        self.added_new = True
   148	        message = Message(level, message, extra_tags=extra_tags)
   149	        self._queued_messages.append(message)
   150	
   151	    def _get_level(self):
   152	        """
   153	        Return the minimum recorded level.
   154	
   155	        The default level is the ``MESSAGE_LEVEL`` setting. If this is
   156	        not found, the ``INFO`` level is used.
   157	        """
   158	        if not hasattr(self, '_level'):
   159	            self._level = getattr(settings, 'MESSAGE_LEVEL', constants.INFO)
   160	        return self._level
   161	
   162	    def _set_level(self, value=None):
   163	        """
   164	        Set a custom minimum recorded level.
   165	
   166	        If set to ``None``, the default level will be used (see the
   167	        ``_get_level`` method).
   168	        """
   169	        if value is None and hasattr(self, '_level'):
   170	            del self._level
   171	        else:
   172	            self._level = int(value)
   173	
   174	    level = property(_get_level, _set_level, _set_level)


=== Iteration 7/100 ===
Calling LLM with timeout=600.0s...
LLM Response:       Now let me examine the utils.py file to understand how `get_level_tags()` works:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>/testbed/django/contrib/messages/util...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/django/contrib/messages/utils.py"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on /testbed/django/contrib/messages/utils.py:
     1	from django.conf import settings
     2	from django.contrib.messages import constants
     3	
     4	
     5	def get_level_tags():
     6	    """
     7	    Return the message level tags.
     8	    """
     9	    return {
    10	        **constants.DEFAULT_TAGS,
    11	        **getattr(settings, 'MESSAGE_TAGS', {}),
    12	    }


=== Iteration 8/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Now I can see the issue! The `get_level_tags()` function in `utils.py` is called once at import time (line 4 in `base.py`) and the result is stored in the `LEVEL_TAGS` module-level variable. This mean...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "create",
  "path": "reproduce_issue.py",
  "file_text": "#!/usr/bin/env python3\nimport os\nimport sys\nimport django\nfrom django.conf import settings\nfrom django.test.utils import override_settings\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        SECRET_KEY='test-secret-key',\n        INSTALLED_APPS=[\n            'django.contrib.messages',\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        MIDDLEWARE=[\n            'django.contrib.sessions.middleware.SessionMiddleware',\n            'django.contrib.auth.middleware.AuthenticationMiddleware',\n            'django.contrib.messages.middleware.MessageMiddleware',\n        ],\n        ROOT_URLCONF='tests.urls',\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        USE_TZ=True,\n    )\n\ndjango.setup()\n\nfrom django.contrib.messages.storage.base import LEVEL_TAGS, Message\nfrom django.contrib.messages import constants\n\ndef test_original_level_tags():\n    print(\"Original LEVEL_TAGS:\")\n    print(LEVEL_TAGS)\n    print()\n\ndef test_with_override_settings():\n    print(\"Testing with @override_settings...\")\n    \n    # Test with custom MESSAGE_TAGS\n    @override_settings(MESSAGE_TAGS={\n        constants.DEBUG: 'custom-debug',\n        constants.INFO: 'custom-info', \n        constants.SUCCESS: 'custom-success',\n        constants.WARNING: 'custom-warning',\n        constants.ERROR: 'custom-error',\n        50: 'custom-critical',  # New level\n    })\n    def test_custom_tags():\n        from django.conf import settings\n        print(\"MESSAGE_TAGS from settings:\", getattr(settings, 'MESSAGE_TAGS', {}))\n        \n        # Import again to see if LEVEL_TAGS is updated\n        from django.contrib.messages.storage.base import LEVEL_TAGS as updated_level_tags\n        print(\"LEVEL_TAGS after override:\", updated_level_tags)\n        \n        # Create a message and check level_tag\n        message = Message(constants.SUCCESS, \"Test message\")\n        print(\"Message level_tag:\", repr(message.level_tag))\n        print(\"Expected level_tag: 'custom-success'\")\n        \n        # Test new level\n        message2 = Message(50, \"Critical message\")\n        print(\"Critical message level_tag:\", repr(message2.level_tag))\n        print(\"Expected level_tag: 'custom-critical'\")\n        \n        return message.level_tag == 'custom-success' and message2.level_tag == 'custom-critical'\n    \n    result = test_custom_tags()\n    print(\"Test passed:\", result)\n    return result\n\nif __name__ == '__main__':\n    test_original_level_tags()\n    success = test_with_override_settings()\n    print(\"\\n\" + \"=\"*50)\n    if success:\n        print(\"ISSUE NOT REPRODUCED: LEVEL_TAGS was updated correctly\")\n    else:\n        print(\"ISSUE REPRODUCED: LEVEL_TAGS was not updated with @override_settings\")\n    print(\"=\"*50)"
}
Tool execution status: success
Tool stdout:
File created successfully at reproduce_issue.py.
Here's the result of running `cat -n` on reproduce_issue.py:
     1	#!/usr/bin/env python3
     2	import os
     3	import sys
     4	import django
     5	from django.conf import settings
     6	from django.test.utils import override_settings
     7	
     8	# Configure Django settings
     9	if not settings.configured:
    10	    settings.configure(
    11	        DEBUG=True,
    12	        SECRET_KEY='test-secret-key',
    13	        INSTALLED_APPS=[
    14	            'django.contrib.messages',
    15	            'django.contrib.contenttypes',
    16	            'django.contrib.auth',
    17	        ],
    18	        MIDDLEWARE=[
    19	            'django.contrib.sessions.middleware.SessionMiddleware',
    20	            'django.contrib.auth.middleware.AuthenticationMiddleware',
... (file continues)


=== Iteration 9/100 ===
Calling LLM with timeout=600.0s...
LLM Response: <function=execute_bash>
<parameter=command>python reproduce_issue.py</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python reproduce_issue.py"
}
Tool execution status: success
Tool stdout:
[STDOUT]
Original LEVEL_TAGS:
{10: 'debug', 20: 'info', 25: 'success', 30: 'warning', 40: 'error'}

Testing with @override_settings...
MESSAGE_TAGS from settings: {10: 'custom-debug', 20: 'custom-info', 25: 'custom-success', 30: 'custom-warning', 40: 'custom-error', 50: 'custom-critical'}
LEVEL_TAGS after override: {10: 'debug', 20: 'info', 25: 'success', 30: 'warning', 40: 'error'}
Message level_tag: 'success'
Expected level_tag: 'custom-success'
Critical message level_tag: ''
Expected level_tag: 'custom-critical'
Test passed: False

==================================================
ISSUE REPRODUCED: LEVEL_TAGS was not updated with @override_settings
==================================================


=== Iteration 10/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Perfect! I've successfully reproduced the issue. The problem is that `LEVEL_TAGS` is computed once at import time and doesn't get updated when `@override_settings` changes the `MESSAGE_TAGS` setting.
...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/django/contrib/messages/storage/base.py",
  "view_range": "[35, 45]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on /testbed/django/contrib/messages/storage/base.py:
    35	    @property
    36	    def tags(self):
    37	        return ' '.join(tag for tag in [self.extra_tags, self.level_tag] if tag)
    38	
    39	    @property
    40	    def level_tag(self):
    41	        return LEVEL_TAGS.get(self.level, '')
    42	
    43	
    44	class BaseStorage:
    45	    """


=== Iteration 11/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Now I need to fix the issue. The problem is that the `level_tag` property uses the module-level `LEVEL_TAGS` constant which is computed once at import time. Instead, it should dynamically call `utils....
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "str_replace",
  "path": "/testbed/django/contrib/messages/storage/base.py",
  "old_str": "from django.conf import settings\nfrom django.contrib.messages import constants, utils\n\nLEVEL_TAGS = utils.get_level_tags()",
  "new_str": "from django.conf import settings\nfrom django.contrib.messages import constants, utils"
}
Tool execution status: success
Tool stdout:
The file /testbed/django/contrib/messages/storage/base.py has been edited successfully.
Here's a snippet of the edited section:
     1	from django.conf import settings
     2	from django.contrib.messages import constants, utils
     3	
     4	
     5	class Message:
     6	    """
Review the changes and make sure they are as expected.


=== Iteration 12/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Now I need to update the `level_tag` property to dynamically call `utils.get_level_tags()` instead of using the module-level constant:

<function=file_editor>
<parameter=command>str_replace</parameter...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "str_replace",
  "path": "/testbed/django/contrib/messages/storage/base.py",
  "old_str": "@property\n    def level_tag(self):\n        return LEVEL_TAGS.get(self.level, '')",
  "new_str": "@property\n    def level_tag(self):\n        return utils.get_level_tags().get(self.level, '')"
}
Tool execution status: success
Tool stdout:
The file /testbed/django/contrib/messages/storage/base.py has been edited successfully.
Here's a snippet of the edited section:
    33	    @property
    34	    def tags(self):
    35	        return ' '.join(tag for tag in [self.extra_tags, self.level_tag] if tag)
    36	
    37	    @property
    38	    def level_tag(self):
    39	        return utils.get_level_tags().get(self.level, '')
    40	
    41	
    42	class BaseStorage:
    43	    """
Review the changes and make sure they are as expected.


=== Iteration 13/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Now let me test the fix by running the reproduction script again:

<function=execute_bash>
<parameter=command>python reproduce_issue.py</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python reproduce_issue.py"
}
Tool execution status: error
Tool stdout:
Error executing command:
Exit code: 1
[STDERR]
Traceback (most recent call last):
  File "/testbed/reproduce_issue.py", line 35, in <module>
    from django.contrib.messages.storage.base import LEVEL_TAGS, Message
ImportError: cannot import name 'LEVEL_TAGS' from 'django.contrib.messages.storage.base' (/testbed/django/contrib/messages/storage/base.py)
command terminated with exit code 1


=== Iteration 14/100 ===
Calling LLM with timeout=600.0s...
LLM Response: I need to update the reproduction script since I removed the `LEVEL_TAGS` import. Let me fix the script:

<function=file_editor>
<parameter=command>str_replace</parameter>
<parameter=path>reproduce_is...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "str_replace",
  "path": "reproduce_issue.py",
  "old_str": "from django.contrib.messages.storage.base import LEVEL_TAGS, Message\nfrom django.contrib.messages import constants",
  "new_str": "from django.contrib.messages.storage.base import Message\nfrom django.contrib.messages import constants, utils"
}
Tool execution status: success
Tool stdout:
The file reproduce_issue.py has been edited successfully.
Here's a snippet of the edited section:
    31	    )
    32	
    33	django.setup()
    34	
    35	from django.contrib.messages.storage.base import Message
    36	from django.contrib.messages import constants, utils
    37	
    38	def test_original_level_tags():
    39	    print("Original LEVEL_TAGS:")
    40	    print(LEVEL_TAGS)
Review the changes and make sure they are as expected.


=== Iteration 15/100 ===
Calling LLM with timeout=600.0s...
LLM Response: I need to fix the `test_original_level_tags` function as well since it references `LEVEL_TAGS` which no longer exists:

<function=file_editor>
<parameter=command>str_replace</parameter>
<parameter=pat...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "str_replace",
  "path": "reproduce_issue.py",
  "old_str": "def test_original_level_tags():\n    print(\"Original LEVEL_TAGS:\")\n    print(LEVEL_TAGS)\n    print()",
  "new_str": "def test_original_level_tags():\n    print(\"Original get_level_tags():\")\n    print(utils.get_level_tags())\n    print()"
}
Tool execution status: success
Tool stdout:
The file reproduce_issue.py has been edited successfully.
Here's a snippet of the edited section:
    34	
    35	from django.contrib.messages.storage.base import Message
    36	from django.contrib.messages import constants, utils
    37	
    38	def test_original_level_tags():
    39	    print("Original get_level_tags():")
    40	    print(utils.get_level_tags())
    41	    print()
    42	
    43	def test_with_override_settings():
    44	    print("Testing with @override_settings...")
    45	    
Review the changes and make sure they are as expected.


=== Iteration 16/100 ===
Calling LLM with timeout=600.0s...
LLM Response:       I also need to fix the part where it tries to import `LEVEL_TAGS` again after the override:

<function=file_editor>
<parameter=command>str_replace</parameter>
<parameter=path>reproduce_issue.py<...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "str_replace",
  "path": "reproduce_issue.py",
  "old_str": "# Import again to see if LEVEL_TAGS is updated\n        from django.contrib.messages.storage.base import LEVEL_TAGS as updated_level_tags\n        print(\"LEVEL_TAGS after override:\", updated_level_tags)",
  "new_str": "# Check current level tags\n        from django.contrib.messages import utils\n        print(\"get_level_tags() after override:\", utils.get_level_tags())"
}
Tool execution status: success
Tool stdout:
The file reproduce_issue.py has been edited successfully.
Here's a snippet of the edited section:
    55	    def test_custom_tags():
    56	        from django.conf import settings
    57	        print("MESSAGE_TAGS from settings:", getattr(settings, 'MESSAGE_TAGS', {}))
    58	        
    59	        # Check current level tags
    60	        from django.contrib.messages import utils
    61	        print("get_level_tags() after override:", utils.get_level_tags())
    62	        
    63	        # Create a message and check level_tag
    64	        message = Message(constants.SUCCESS, "Test message")
    65	        print("Message level_tag:", repr(message.level_tag))
Review the changes and make sure they are as expected.


=== Iteration 17/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Now let me run the updated reproduction script to test the fix:

<function=execute_bash>
<parameter=command>python reproduce_issue.py</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python reproduce_issue.py"
}
Tool execution status: success
Tool stdout:
[STDOUT]
Original get_level_tags():
{10: 'debug', 20: 'info', 25: 'success', 30: 'warning', 40: 'error'}

Testing with @override_settings...
MESSAGE_TAGS from settings: {10: 'custom-debug', 20: 'custom-info', 25: 'custom-success', 30: 'custom-warning', 40: 'custom-error', 50: 'custom-critical'}
get_level_tags() after override: {10: 'custom-debug', 20: 'custom-info', 25: 'custom-success', 30: 'custom-warning', 40: 'custom-error', 50: 'custom-critical'}
Message level_tag: 'custom-success'
Expected level_tag: 'custom-success'
Critical message level_tag: 'custom-critical'
Expected level_tag: 'custom-critical'
Test passed: True

==================================================
ISSUE NOT REPRODUCED: LEVEL_TAGS was updated correctly
==================================================


=== Iteration 18/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Excellent! The fix is working. Now let me run the existing Django tests to make sure I haven't broken anything:

<function=execute_bash>
<parameter=command>python -m pytest tests/messages_tests/ -v</p...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python -m pytest tests/messages_tests/ -v"
}
Tool execution status: error
Tool stdout:
Error executing command:
Exit code: 1
[STDERR]
/root/.venv/bin/python: No module named pytest
command terminated with exit code 1


=== Iteration 19/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Let me run the Django tests using the Django test runner instead:

<function=execute_bash>
<parameter=command>python -m django test tests.messages_tests --verbosity=2</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python -m django test tests.messages_tests --verbosity=2"
}
Tool execution status: error
Tool stdout:
Error executing command:
Exit code: 1
[STDERR]
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/root/.venv/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 419, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/commands/test.py", line 24, in run_from_argv
    super().run_from_argv(argv)
  File "/testbed/django/core/management/base.py", line 355, in run_from_argv
    parser = self.create_parser(argv[0], argv[1])
  File "/testbed/django/core/management/base.py", line 318, in create_parser
    self.add_arguments(parser)
  File "/testbed/django/core/management/commands/test.py", line 45, in add_arguments
    test_runner_class = get_runner(settings, self.test_runner)
  File "/testbed/django/test/utils.py", line 367, in get_runner
    test_runner_class = test_runner_class or settings.TEST_RUNNER
  File "/testbed/django/conf/__init__.py", line 84, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 65, in _setup
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Requested setting TEST_RUNNER, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.
command terminated with exit code 1


=== Iteration 20/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Let me run the tests using the runtests.py script instead:

<function=execute_bash>
<parameter=command>python tests/runtests.py tests.messages_tests --verbosity=2</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python tests/runtests.py tests.messages_tests --verbosity=2"
}
Tool execution status: error
Tool stdout:
[STDOUT]
Testing against Django installed in '/testbed/django' with up to 64 processes
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
Error executing command:
Exit code: 1
[STDERR]
tests (unittest.loader._FailedTest) ... ERROR

======================================================================
ERROR: tests (unittest.loader._FailedTest)
----------------------------------------------------------------------
ImportError: Failed to import test module: tests
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/loader.py", line 154, in loadTestsFromName
    module = __import__(module_name)
ModuleNotFoundError: No module named 'tests'


----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (errors=1)
command terminated with exit code 1


=== Iteration 21/100 ===
Calling LLM with timeout=600.0s...
LLM Response: Let me try running the specific messages tests directly:

<function=execute_bash>
<parameter=command>python tests/runtests.py messages_tests --verbosity=2</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python tests/runtests.py messages_tests --verbosity=2"
}
Tool execution status: error
Tool stdout:
[STDOUT]
Testing against Django installed in '/testbed/django' with up to 64 processes
Importing application messages_tests
Found 96 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, messages_tests, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table messages_tests_someobject
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
Error executing command:
Exit code: 1
[STDERR]
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Cloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_middleware_missing (messages_tests.test_api.CustomRequestApiTests) ... ok
test_middleware_missing_silently (messages_tests.test_api.CustomRequestApiTests) ... ok
test_ok (messages_tests.test_api.CustomRequestApiTests) ... ok
test_request_is_none (messages_tests.test_api.CustomRequestApiTests) ... ok
test_middleware_missing (messages_tests.test_api.ApiTests) ... ok
test_middleware_missing_silently (messages_tests.test_api.ApiTests) ... ok
test_ok (messages_tests.test_api.ApiTests) ... ok
test_request_is_none (messages_tests.test_api.ApiTests) ... ok
test_eq (messages_tests.tests.MessageTests) ... ok
test_response_without_messages (messages_tests.test_middleware.MiddlewareTests)
MessageMiddleware is tolerant of messages not existing on request. ... ok
test_add (messages_tests.test_cookie.CookieTests) ... ERROR
test_add_lazy_translation (messages_tests.test_cookie.CookieTests) ... ERROR
test_add_update (messages_tests.test_cookie.CookieTests) ... ERROR
test_context_processor_message_levels (messages_tests.test_cookie.CookieTests) ... ERROR
test_cookie_setings (messages_tests.test_cookie.CookieTests)
CookieStorage honors SESSION_COOKIE_DOMAIN, SESSION_COOKIE_SECURE, and ... ERROR
test_custom_tags (messages_tests.test_cookie.CookieTests) ... ERROR
test_default_level (messages_tests.test_cookie.CookieTests) ... ERROR
test_existing_add (messages_tests.test_cookie.CookieTests) ... ERROR
test_existing_add_read_update (messages_tests.test_cookie.CookieTests) ... ERROR
test_existing_read (messages_tests.test_cookie.CookieTests)
Reading the existing storage doesn't cause the data to be lost. ... ERROR
test_existing_read_add_update (messages_tests.test_cookie.CookieTests) ... ERROR
test_full_request_response_cycle (messages_tests.test_cookie.CookieTests)
With the message middleware enabled, messages are properly stored and ... ERROR
test_get (messages_tests.test_cookie.CookieTests) ... ERROR
test_get_bad_cookie (messages_tests.test_cookie.CookieTests) ... ERROR
test_high_level (messages_tests.test_cookie.CookieTests) ... ERROR
test_json_encoder_decoder (messages_tests.test_cookie.CookieTests)
A complex nested data structure containing Message ... ERROR
test_level_tag (messages_tests.test_cookie.CookieTests) ... ERROR
test_low_level (messages_tests.test_cookie.CookieTests) ... ERROR
test_max_cookie_length (messages_tests.test_cookie.CookieTests)
If the data exceeds what is allowed in a cookie, older messages are ... ERROR
test_message_rfc6265 (messages_tests.test_cookie.CookieTests) ... ERROR
test_middleware_disabled (messages_tests.test_cookie.CookieTests)
When the middleware is disabled, an exception is raised when one ... ERROR
test_middleware_disabled_fail_silently (messages_tests.test_cookie.CookieTests)
When the middleware is disabled, an exception is not raised ... ERROR
test_multiple_posts (messages_tests.test_cookie.CookieTests)
Messages persist properly when multiple POSTs are made before a GET. ... ERROR
test_no_update (messages_tests.test_cookie.CookieTests) ... ERROR
test_repr (messages_tests.test_cookie.CookieTests) ... ERROR
test_safedata (messages_tests.test_cookie.CookieTests)
A message containing SafeData is keeping its safe status when ... ERROR
test_settings_level (messages_tests.test_cookie.CookieTests) ... ERROR
test_tags (messages_tests.test_cookie.CookieTests) ... ERROR
test_with_template_response (messages_tests.test_cookie.CookieTests) ... ERROR
test_add (messages_tests.test_fallback.FallbackTests) ... ERROR
test_add_lazy_translation (messages_tests.test_fallback.FallbackTests) ... ERROR
test_add_update (messages_tests.test_fallback.FallbackTests) ... ERROR
test_context_processor_message_levels (messages_tests.test_fallback.FallbackTests) ... ERROR
test_custom_tags (messages_tests.test_fallback.FallbackTests) ... ERROR
test_default_level (messages_tests.test_fallback.FallbackTests) ... ERROR
test_existing_add (messages_tests.test_fallback.FallbackTests) ... ERROR
test_existing_add_read_update (messages_tests.test_fallback.FallbackTests) ... ERROR
test_existing_read (messages_tests.test_fallback.FallbackTests)
Reading the existing storage doesn't cause the data to be lost. ... ERROR
test_existing_read_add_update (messages_tests.test_fallback.FallbackTests) ... ERROR
test_flush_used_backends (messages_tests.test_fallback.FallbackTests) ... ERROR
test_full_request_response_cycle (messages_tests.test_fallback.FallbackTests)
With the message middleware enabled, messages are properly stored and ... ERROR
test_get (messages_tests.test_fallback.FallbackTests) ... ERROR
test_get_empty (messages_tests.test_fallback.FallbackTests) ... ERROR
test_get_fallback (messages_tests.test_fallback.FallbackTests) ... ERROR
test_get_fallback_only (messages_tests.test_fallback.FallbackTests) ... ERROR
test_high_level (messages_tests.test_fallback.FallbackTests) ... ERROR
test_level_tag (messages_tests.test_fallback.FallbackTests) ... ERROR
test_low_level (messages_tests.test_fallback.FallbackTests) ... ERROR
test_middleware_disabled (messages_tests.test_fallback.FallbackTests)
When the middleware is disabled, an exception is raised when one ... ERROR
test_middleware_disabled_fail_silently (messages_tests.test_fallback.FallbackTests)
When the middleware is disabled, an exception is not raised ... ERROR
test_multiple_posts (messages_tests.test_fallback.FallbackTests)
Messages persist properly when multiple POSTs are made before a GET. ... ERROR
test_no_fallback (messages_tests.test_fallback.FallbackTests)
(1) A short number of messages whose data size doesn't exceed what is ... ERROR
test_no_update (messages_tests.test_fallback.FallbackTests) ... ERROR
test_repr (messages_tests.test_fallback.FallbackTests) ... ERROR
test_session_fallback (messages_tests.test_fallback.FallbackTests)
If the data exceeds what is allowed in a cookie, messages which did ... ERROR
test_session_fallback_only (messages_tests.test_fallback.FallbackTests)
Large messages, none of which fit in a cookie, are stored in the ... ERROR
test_settings_level (messages_tests.test_fallback.FallbackTests) ... ERROR
test_tags (messages_tests.test_fallback.FallbackTests) ... ERROR
test_with_template_response (messages_tests.test_fallback.FallbackTests) ... ERROR
test_add (messages_tests.test_session.SessionTests) ... ERROR
test_add_lazy_translation (messages_tests.test_session.SessionTests) ... ERROR
test_add_update (messages_tests.test_session.SessionTests) ... ERROR
test_context_processor_message_levels (messages_tests.test_session.SessionTests) ... ERROR
test_custom_tags (messages_tests.test_session.SessionTests) ... ERROR
test_default_level (messages_tests.test_session.SessionTests) ... ERROR
test_existing_add (messages_tests.test_session.SessionTests) ... ERROR
test_existing_add_read_update (messages_tests.test_session.SessionTests) ... ERROR
test_existing_read (messages_tests.test_session.SessionTests)
Reading the existing storage doesn't cause the data to be lost. ... ERROR
test_existing_read_add_update (messages_tests.test_session.SessionTests) ... ERROR
test_full_request_response_cycle (messages_tests.test_session.SessionTests)
With the message middleware enabled, messages are properly stored and ... ERROR
test_get (messages_tests.test_session.SessionTests) ... ERROR
test_high_level (messages_tests.test_session.SessionTests) ... ERROR
test_level_tag (messages_tests.test_session.SessionTests) ... ERROR
test_low_level (messages_tests.test_session.SessionTests) ... ERROR
test_middleware_disabled (messages_tests.test_session.SessionTests)
When the middleware is disabled, an exception is raised when one ... ERROR
test_middleware_disabled_fail_silently (messages_tests.test_session.SessionTests)
When the middleware is disabled, an exception is not raised ... ERROR
test_multiple_posts (messages_tests.test_session.SessionTests)
Messages persist properly when multiple POSTs are made before a GET. ... ERROR
test_no_session (messages_tests.test_session.SessionTests) ... ERROR
test_no_update (messages_tests.test_session.SessionTests) ... ERROR
test_repr (messages_tests.test_session.SessionTests) ... ERROR
test_safedata (messages_tests.test_session.SessionTests)
A message containing SafeData keeps its safe status when retrieved from ... ERROR
test_settings_level (messages_tests.test_session.SessionTests) ... ERROR
test_tags (messages_tests.test_session.SessionTests) ... ERROR
test_with_template_response (messages_tests.test_session.SessionTests) ... ERROR
test_set_messages_success (messages_tests.test_mixins.SuccessMessageMixinTests) ... ok
test_set_messages_success_on_delete (messages_tests.test_mixins.SuccessMessageMixinTests) ... ok

======================================================================
ERROR: test_add (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add_lazy_translation (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add_update (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_context_processor_message_levels (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_cookie_setings (messages_tests.test_cookie.CookieTests)
CookieStorage honors SESSION_COOKIE_DOMAIN, SESSION_COOKIE_SECURE, and
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_custom_tags (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_default_level (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_add (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_add_read_update (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_read (messages_tests.test_cookie.CookieTests)
Reading the existing storage doesn't cause the data to be lost.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_read_add_update (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_full_request_response_cycle (messages_tests.test_cookie.CookieTests)
With the message middleware enabled, messages are properly stored and
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_get (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_get_bad_cookie (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_high_level (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_json_encoder_decoder (messages_tests.test_cookie.CookieTests)
A complex nested data structure containing Message
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_level_tag (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_low_level (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_max_cookie_length (messages_tests.test_cookie.CookieTests)
If the data exceeds what is allowed in a cookie, older messages are
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_message_rfc6265 (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_middleware_disabled (messages_tests.test_cookie.CookieTests)
When the middleware is disabled, an exception is raised when one
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_middleware_disabled_fail_silently (messages_tests.test_cookie.CookieTests)
When the middleware is disabled, an exception is not raised
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_multiple_posts (messages_tests.test_cookie.CookieTests)
Messages persist properly when multiple POSTs are made before a GET.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_no_update (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_repr (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_safedata (messages_tests.test_cookie.CookieTests)
A message containing SafeData is keeping its safe status when
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_settings_level (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_tags (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_with_template_response (messages_tests.test_cookie.CookieTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add_lazy_translation (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add_update (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_context_processor_message_levels (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_custom_tags (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_default_level (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_add (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_add_read_update (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_read (messages_tests.test_fallback.FallbackTests)
Reading the existing storage doesn't cause the data to be lost.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_read_add_update (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_flush_used_backends (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_full_request_response_cycle (messages_tests.test_fallback.FallbackTests)
With the message middleware enabled, messages are properly stored and
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_get (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_get_empty (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_get_fallback (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_get_fallback_only (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_high_level (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_level_tag (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_low_level (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_middleware_disabled (messages_tests.test_fallback.FallbackTests)
When the middleware is disabled, an exception is raised when one
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_middleware_disabled_fail_silently (messages_tests.test_fallback.FallbackTests)
When the middleware is disabled, an exception is not raised
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_multiple_posts (messages_tests.test_fallback.FallbackTests)
Messages persist properly when multiple POSTs are made before a GET.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_no_fallback (messages_tests.test_fallback.FallbackTests)
(1) A short number of messages whose data size doesn't exceed what is
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_no_update (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_repr (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_session_fallback (messages_tests.test_fallback.FallbackTests)
If the data exceeds what is allowed in a cookie, messages which did
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_session_fallback_only (messages_tests.test_fallback.FallbackTests)
Large messages, none of which fit in a cookie, are stored in the
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_settings_level (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_tags (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_with_template_response (messages_tests.test_fallback.FallbackTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add_lazy_translation (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_add_update (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_context_processor_message_levels (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_custom_tags (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_default_level (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_add (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_add_read_update (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_read (messages_tests.test_session.SessionTests)
Reading the existing storage doesn't cause the data to be lost.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_existing_read_add_update (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_full_request_response_cycle (messages_tests.test_session.SessionTests)
With the message middleware enabled, messages are properly stored and
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_get (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_high_level (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_level_tag (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_low_level (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_middleware_disabled (messages_tests.test_session.SessionTests)
When the middleware is disabled, an exception is raised when one
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_middleware_disabled_fail_silently (messages_tests.test_session.SessionTests)
When the middleware is disabled, an exception is not raised
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_multiple_posts (messages_tests.test_session.SessionTests)
Messages persist properly when multiple POSTs are made before a GET.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_no_session (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_no_update (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_repr (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_safedata (messages_tests.test_session.SessionTests)
A message containing SafeData keeps its safe status when retrieved from
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_settings_level (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_tags (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

======================================================================
ERROR: test_with_template_response (messages_tests.test_session.SessionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/.venv/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/root/.venv/lib/python3.9/unittest/case.py", line 588, in run
    self._callSetUp()
  File "/root/.venv/lib/python3.9/unittest/case.py", line 547, in _callSetUp
    self.setUp()
  File "/testbed/tests/messages_tests/base.py", line 67, in setUp
    self.settings_override.enable()
  File "/testbed/tests/messages_tests/base.py", line 31, in enable
    self.old_level_tags = base.LEVEL_TAGS
AttributeError: module 'django.contrib.messages.storage.base' has no attribute 'LEVEL_TAGS'

----------------------------------------------------------------------
Ran 96 tests in 0.045s

FAILED (errors=84)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
command terminated with exit code 1


=== Iteration 22/100 ===
Calling LLM with timeout=600.0s...
LLM Response: I see the issue! The tests are failing because they reference `LEVEL_TAGS` directly from the `base` module, but I removed it. Let me examine the test base to understand how it's being used:

<function...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/tests/messages_tests/base.py"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on /testbed/tests/messages_tests/base.py:
     1	from django.contrib.messages import constants, get_level, set_level, utils
     2	from django.contrib.messages.api import MessageFailure
     3	from django.contrib.messages.constants import DEFAULT_LEVELS
     4	from django.contrib.messages.storage import base, default_storage
     5	from django.contrib.messages.storage.base import Message
     6	from django.http import HttpRequest, HttpResponse
     7	from django.test import modify_settings, override_settings
     8	from django.urls import reverse
     9	from django.utils.translation import gettext_lazy
    10	
    11	
    12	def add_level_messages(storage):
    13	    """
    14	    Add 6 messages from different levels (including a custom one) to a storage
    15	    instance.
    16	    """
    17	    storage.add(constants.INFO, 'A generic info message')
    18	    storage.add(29, 'Some custom level')
    19	    storage.add(constants.DEBUG, 'A debugging message', extra_tags='extra-tag')
    20	    storage.add(constants.WARNING, 'A warning')
    21	    storage.add(constants.ERROR, 'An error')
    22	    storage.add(constants.SUCCESS, 'This was a triumph.')
    23	
    24	
    25	class override_settings_tags(override_settings):
    26	    def enable(self):
    27	        super().enable()
    28	        # LEVEL_TAGS is a constant defined in the
    29	        # django.contrib.messages.storage.base module, so after changing
    30	        # settings.MESSAGE_TAGS, update that constant also.
    31	        self.old_level_tags = base.LEVEL_TAGS
    32	        base.LEVEL_TAGS = utils.get_level_tags()
    33	
    34	    def disable(self):
    35	        super().disable()
    36	        base.LEVEL_TAGS = self.old_level_tags
    37	
    38	
    39	class BaseTests:
    40	    storage_class = default_storage
    41	    levels = {
    42	        'debug': constants.DEBUG,
    43	        'info': constants.INFO,
    44	        'success': constants.SUCCESS,
    45	        'warning': constants.WARNING,
    46	        'error': constants.ERROR,
    47	    }
    48	
    49	    def setUp(self):
    50	        self.settings_override = override_settings_tags(
    51	            TEMPLATES=[{
    52	                'BACKEND': 'django.template.backends.django.DjangoTemplates',
    53	                'DIRS': [],
    54	                'APP_DIRS': True,
    55	                'OPTIONS': {
    56	                    'context_processors': (
    57	                        'django.contrib.auth.context_processors.auth',
    58	                        'django.contrib.messages.context_processors.messages',
    59	                    ),
    60	                },
    61	            }],
    62	            ROOT_URLCONF='messages_tests.urls',
    63	            MESSAGE_TAGS={},
    64	            MESSAGE_STORAGE='%s.%s' % (self.storage_class.__module__, self.storage_class.__name__),
    65	            SESSION_SERIALIZER='django.contrib.sessions.serializers.JSONSerializer',
    66	        )
    67	        self.settings_override.enable()
    68	
    69	    def tearDown(self):
    70	        self.settings_override.disable()
    71	
    72	    def get_request(self):
    73	        return HttpRequest()
    74	
    75	    def get_response(self):
    76	        return HttpResponse()
    77	
    78	    def get_storage(self, data=None):
    79	        """
    80	        Return the storage backend, setting its loaded data to the ``data``
    81	        argument.
    82	
    83	        This method avoids the storage ``_get`` method from getting called so
    84	        that other parts of the storage backend can be tested independent of
    85	        the message retrieval logic.
    86	        """
    87	        storage = self.storage_class(self.get_request())
    88	        storage._loaded_data = data or []
    89	        return storage
    90	
    91	    def test_repr(self):
    92	        request = self.get_request()
    93	        storage = self.storage_class(request)
    94	        self.assertEqual(
    95	            repr(storage),
    96	            f'<{self.storage_class.__qualname__}: request=<HttpRequest>>',
    97	        )
    98	
    99	    def test_add(self):
   100	        storage = self.get_storage()
   101	        self.assertFalse(storage.added_new)
   102	        storage.add(constants.INFO, 'Test message 1')
   103	        self.assertTrue(storage.added_new)
   104	        storage.add(constants.INFO, 'Test message 2', extra_tags='tag')
   105	        self.assertEqual(len(storage), 2)
   106	
   107	    def test_add_lazy_translation(self):
   108	        storage = self.get_storage()
   109	        response = self.get_response()
   110	
   111	        storage.add(constants.INFO, gettext_lazy('lazy message'))
   112	        storage.update(response)
   113	
   114	        storing = self.stored_messages_count(storage, response)
   115	        self.assertEqual(storing, 1)
   116	
   117	    def test_no_update(self):
   118	        storage = self.get_storage()
   119	        response = self.get_response()
   120	        storage.update(response)
   121	        storing = self.stored_messages_count(storage, response)
   122	        self.assertEqual(storing, 0)
   123	
   124	    def test_add_update(self):
   125	        storage = self.get_storage()
   126	        response = self.get_response()
   127	
   128	        storage.add(constants.INFO, 'Test message 1')
   129	        storage.add(constants.INFO, 'Test message 1', extra_tags='tag')
   130	        storage.update(response)
   131	
   132	        storing = self.stored_messages_count(storage, response)
   133	        self.assertEqual(storing, 2)
   134	
   135	    def test_existing_add_read_update(self):
   136	        storage = self.get_existing_storage()
   137	        response = self.get_response()
   138	
   139	        storage.add(constants.INFO, 'Test message 3')
   140	        list(storage)   # Simulates a read
   141	        storage.update(response)
   142	
   143	        storing = self.stored_messages_count(storage, response)
   144	        self.assertEqual(storing, 0)
   145	
   146	    def test_existing_read_add_update(self):
   147	        storage = self.get_existing_storage()
   148	        response = self.get_response()
   149	
   150	        list(storage)   # Simulates a read
   151	        storage.add(constants.INFO, 'Test message 3')
   152	        storage.update(response)
   153	
   154	        storing = self.stored_messages_count(storage, response)
   155	        self.assertEqual(storing, 1)
   156	
   157	    @override_settings(MESSAGE_LEVEL=constants.DEBUG)
   158	    def test_full_request_response_cycle(self):
   159	        """
   160	        With the message middleware enabled, messages are properly stored and
   161	        retrieved across the full request/redirect/response cycle.
   162	        """
   163	        data = {
   164	            'messages': ['Test message %d' % x for x in range(5)],
   165	        }
   166	        show_url = reverse('show_message')
   167	        for level in ('debug', 'info', 'success', 'warning', 'error'):
   168	            add_url = reverse('add_message', args=(level,))
   169	            response = self.client.post(add_url, data, follow=True)
   170	            self.assertRedirects(response, show_url)
   171	            self.assertIn('messages', response.context)
   172	            messages = [Message(self.levels[level], msg) for msg in data['messages']]
   173	            self.assertEqual(list(response.context['messages']), messages)
   174	            for msg in data['messages']:
   175	                self.assertContains(response, msg)
   176	
   177	    @override_settings(MESSAGE_LEVEL=constants.DEBUG)
   178	    def test_with_template_response(self):
   179	        data = {
   180	            'messages': ['Test message %d' % x for x in range(5)],
   181	        }
   182	        show_url = reverse('show_template_response')
   183	        for level in self.levels:
   184	            add_url = reverse('add_template_response', args=(level,))
   185	            response = self.client.post(add_url, data, follow=True)
   186	            self.assertRedirects(response, show_url)
   187	            self.assertIn('messages', response.context)
   188	            for msg in data['messages']:
   189	                self.assertContains(response, msg)
   190	
   191	            # there shouldn't be any messages on second GET request
   192	            response = self.client.get(show_url)
   193	            for msg in data['messages']:
   194	                self.assertNotContains(response, msg)
   195	
   196	    def test_context_processor_message_levels(self):
   197	        show_url = reverse('show_template_response')
   198	        response = self.client.get(show_url)
   199	
   200	        self.assertIn('DEFAULT_MESSAGE_LEVELS', response.context)
   201	        self.assertEqual(response.context['DEFAULT_MESSAGE_LEVELS'], DEFAULT_LEVELS)
   202	
   203	    @override_settings(MESSAGE_LEVEL=constants.DEBUG)
   204	    def test_multiple_posts(self):
   205	        """
   206	        Messages persist properly when multiple POSTs are made before a GET.
   207	        """
   208	        data = {
   209	            'messages': ['Test message %d' % x for x in range(5)],
   210	        }
   211	        show_url = reverse('show_message')
   212	        messages = []
   213	        for level in ('debug', 'info', 'success', 'warning', 'error'):
   214	            messages.extend(Message(self.levels[level], msg) for msg in data['messages'])
   215	            add_url = reverse('add_message', args=(level,))
   216	            self.client.post(add_url, data)
   217	        response = self.client.get(show_url)
   218	        self.assertIn('messages', response.context)
   219	        self.assertEqual(list(response.context['messages']), messages)
   220	        for msg in data['messages']:
   221	            self.assertContains
<response clipped>


=== Iteration 23/100 ===
Calling LLM with timeout=600.0s...
LLM Response: I can see the issue! The tests are using a custom `override_settings_tags` class that manually updates `base.LEVEL_TAGS` when settings are overridden. Since I removed the `LEVEL_TAGS` module-level con...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "/testbed/tests/messages_tests/base.py",
  "view_range": "[25, 37]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on /testbed/tests/messages_tests/base.py:
    25	class override_settings_tags(override_settings):
    26	    def enable(self):
    27	        super().enable()
    28	        # LEVEL_TAGS is a constant defined in the
    29	        # django.contrib.messages.storage.base module, so after changing
    30	        # settings.MESSAGE_TAGS, update that constant also.
    31	        self.old_level_tags = base.LEVEL_TAGS
    32	        base.LEVEL_TAGS = utils.get_level_tags()
    33	
    34	    def disable(self):
    35	        super().disable()
    36	        base.LEVEL_TAGS = self.old_level_tags
    37	


=== Iteration 24/100 ===
Calling LLM with timeout=600.0s...

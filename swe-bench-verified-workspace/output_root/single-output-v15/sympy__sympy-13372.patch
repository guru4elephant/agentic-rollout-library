diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7fc6c0978e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from sympy import Mul, Max
+from sympy.abc import x, y
+
+print("Testing the UnboundLocalError issue...")
+
+# First case - works fine
+print("\n1. Testing Mul(x, Max(0, y), evaluate=False).evalf():")
+try:
+    result1 = Mul(x, Max(0, y), evaluate=False).evalf()
+    print(f"Result: {result1}")
+    print("SUCCESS: No error")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Second case - should trigger the error
+print("\n2. Testing Mul(Max(0, y), x, evaluate=False).evalf():")
+try:
+    result2 = Mul(Max(0, y), x, evaluate=False).evalf()
+    print(f"Result: {result2}")
+    print("SUCCESS: No error")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nTest completed.")
\ No newline at end of file
diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py
index 72a5fbae52..f34908710a 100644
--- a/sympy/core/evalf.py
+++ b/sympy/core/evalf.py
@@ -1301,12 +1301,16 @@ def evalf(x, prec, options):
             elif re.is_number:
                 re = re._to_mpmath(prec, allow_ints=False)._mpf_
                 reprec = prec
+            else:
+                raise NotImplementedError
             if im == 0:
                 im = None
                 imprec = None
             elif im.is_number:
                 im = im._to_mpmath(prec, allow_ints=False)._mpf_
                 imprec = prec
+            else:
+                raise NotImplementedError
             r = re, im, reprec, imprec
         except AttributeError:
             raise NotImplementedError
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..9fc6eb2293
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+from sympy import Mul, Max, Min, Abs, Symbol
+from sympy.abc import x, y, z
+
+def test_case(expr, description):
+    print(f"\nTesting: {description}")
+    print(f"Expression: {expr}")
+    try:
+        result = expr.evalf()
+        print(f"Result: {result}")
+        print("SUCCESS: No error")
+        return True
+    except Exception as e:
+        print(f"ERROR: {e}")
+        return False
+
+# Test various edge cases
+test_cases = [
+    (Mul(Max(0, y), x, evaluate=False), "Max first, symbol second"),
+    (Mul(x, Max(0, y), evaluate=False), "Symbol first, Max second"),
+    (Mul(Max(0, y), Min(1, z), evaluate=False), "Max first, Min second"),
+    (Mul(Abs(x), Max(0, y), evaluate=False), "Abs first, Max second"),
+    (Mul(Max(0, y), Abs(x), evaluate=False), "Max first, Abs second"),
+    (Mul(Max(x, y), z, evaluate=False), "Max with two symbols first, symbol second"),
+    (Mul(z, Max(x, y), evaluate=False), "Symbol first, Max with two symbols second"),
+]
+
+all_passed = True
+for expr, description in test_cases:
+    passed = test_case(expr, description)
+    all_passed = all_passed and passed
+
+print(f"\nOverall result: {'ALL TESTS PASSED' if all_passed else 'SOME TESTS FAILED'}")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..99c3847224
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from sympy import Mul, Max
+from sympy.abc import x, y
+
+print("Testing the exact examples from the GitHub issue...")
+
+# First case - should work fine
+print("\n>>> Mul(x, Max(0, y), evaluate=False).evalf()")
+try:
+    result1 = Mul(x, Max(0, y), evaluate=False).evalf()
+    print(result1)
+    print("SUCCESS: No error")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Second case - previously caused UnboundLocalError
+print("\n>>> Mul(Max(0, y), x, evaluate=False).evalf()")
+try:
+    result2 = Mul(Max(0, y), x, evaluate=False).evalf()
+    print(result2)
+    print("SUCCESS: No error")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nTest completed.")
\ No newline at end of file
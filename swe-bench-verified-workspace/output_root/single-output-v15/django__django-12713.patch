diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b8123ddc3e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with formfield_for_manytomany not allowing widget override.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from django import forms
+
+# Create a simple test model with a ManyToManyField
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    related_items = models.ManyToManyField('self', blank=True)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create a custom widget
+class CustomWidget(forms.SelectMultiple):
+    pass
+
+# Create an admin class that tries to override the widget
+class TestModelAdmin(admin.ModelAdmin):
+    # Set some admin options that might interfere with widget override
+    filter_vertical = ['related_items']
+    
+    def formfield_for_manytomany(self, db_field, request, **kwargs):
+        if db_field.name == 'related_items':
+            # Try to override the widget
+            kwargs['widget'] = CustomWidget()
+            print(f"Setting custom widget: {type(kwargs['widget'])}")
+        return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+# Test the behavior
+admin_site = admin.AdminSite()
+admin_site.register(TestModel, TestModelAdmin)
+
+# Create a request object (mock)
+from django.test import RequestFactory
+factory = RequestFactory()
+request = factory.get('/admin/')
+
+# Get the form field
+model_admin = TestModelAdmin(TestModel, admin_site)
+db_field = TestModel._meta.get_field('related_items')
+
+try:
+    form_field = model_admin.formfield_for_manytomany(db_field, request)
+    print(f"Widget type: {type(form_field.widget)}")
+    print(f"Is CustomWidget? {isinstance(form_field.widget, CustomWidget)}")
+    print("SUCCESS: Widget override worked!")
+except Exception as e:
+    print(f"ERROR: {e}")
\ No newline at end of file
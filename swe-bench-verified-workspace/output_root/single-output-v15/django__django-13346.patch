diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c509e6b6c0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,91 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+
+# Create a test model with JSONField
+class OurModel(models.Model):
+    our_field = models.JSONField(default=dict)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create test data
+def create_test_data():
+    # Create some test instances
+    OurModel.objects.create(our_field={'key': 0})
+    OurModel.objects.create(our_field={'key': 1})
+    OurModel.objects.create(our_field={'key': 0, 'other': 'value'})
+    OurModel.objects.create(our_field={'different_key': 0})
+
+# Test the issue
+def test_in_lookup():
+    print("Testing __in lookup on key transforms...")
+    
+    # First filter: using __in
+    first_filter = {'our_field__key__in': [0]}
+    first_items = OurModel.objects.filter(**first_filter)
+    print(f"First filter (__in): {len(first_items)} items")
+    
+    # Second filter: using direct equality
+    second_filter = {'our_field__key': 0}
+    second_items = OurModel.objects.filter(**second_filter)
+    print(f"Second filter (direct): {len(second_items)} items")
+    
+    # Expected: both should return the same results
+    print(f"Expected same results: {len(first_items) == len(second_items)}")
+    
+    # Show the actual results
+    print("\nFirst filter results:")
+    for item in first_items:
+        print(f"  {item.our_field}")
+    
+    print("\nSecond filter results:")
+    for item in second_items:
+        print(f"  {item.our_field}")
+
+if __name__ == '__main__':
+    # Just test the query generation without actual database
+    from django.db.models.sql.query import Query
+    from django.db.models import Q
+    
+    query = Query(OurModel)
+    
+    # Test the first filter
+    first_filter = Q(our_field__key__in=[0])
+    query.where = first_filter
+    compiler = query.get_compiler('default')
+    sql, params = compiler.as_sql()
+    print("First filter SQL:", sql)
+    print("First filter params:", params)
+    
+    # Test the second filter
+    query2 = Query(OurModel)
+    second_filter = Q(our_field__key=0)
+    query2.where = second_filter
+    compiler2 = query2.get_compiler('default')
+    sql2, params2 = compiler2.as_sql()
+    print("Second filter SQL:", sql2)
+    print("Second filter params:", params2)
\ No newline at end of file
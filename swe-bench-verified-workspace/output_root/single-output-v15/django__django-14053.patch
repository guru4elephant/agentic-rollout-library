diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a68b2fe551
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure minimal Django settings
+temp_dir = tempfile.mkdtemp()
+settings.configure(
+    STATIC_ROOT=temp_dir,
+    STATIC_URL='/static/',
+    DEBUG=False,
+)
+
+# Create a simple test case
+def test_post_process_yield():
+    storage = ManifestStaticFilesStorage()
+    
+    # Create test files in the static root
+    test_files = {
+        'test.css': ('css', 'url("test.png")'),
+        'test.png': ('png', 'dummy content'),
+    }
+    
+    for filename, (ext, content) in test_files.items():
+        file_path = os.path.join(temp_dir, filename)
+        with open(file_path, 'w') as f:
+            f.write(content)
+    
+    # Mock file paths for testing
+    paths = {}
+    for filename in test_files.keys():
+        paths[filename] = (storage, filename)
+    
+    # Count yields per file
+    yield_count = {}
+    for name, hashed_name, processed in storage.post_process(paths):
+        yield_count[name] = yield_count.get(name, 0) + 1
+        print(f"Yielded: {name} -> {hashed_name} (processed: {processed})")
+    
+    print(f"\nYield counts:")
+    for filename, count in yield_count.items():
+        print(f"{filename}: {count} times")
+    
+    # Check if any file was yielded more than once
+    duplicates = any(count > 1 for count in yield_count.values())
+    print(f"\nDuplicate yields found: {duplicates}")
+    
+    return duplicates
+
+if __name__ == '__main__':
+    print("Testing HashedFilesMixin post_process yield behavior...")
+    has_duplicates = test_post_process_yield()
+    if has_duplicates:
+        print("ISSUE CONFIRMED: Files are being yielded multiple times!")
+    else:
+        print("No duplicate yields found.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ad2f4d73a3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,88 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+from django.conf import settings
+from django.db import models
+
+# Configure Django
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Create a simple model for testing
+class Dimension(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField(default=0)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create the table
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Dimension)
+
+# Add some test data
+Dimension.objects.bulk_create([
+    Dimension(id=10, name='boeksoort', order=1),
+    Dimension(id=11, name='grootboek', order=2),
+    Dimension(id=12, name='test1', order=3),
+    Dimension(id=13, name='test2', order=4),
+    Dimension(id=14, name='test3', order=5),
+    Dimension(id=15, name='test4', order=6),
+    Dimension(id=16, name='kenteken', order=7),
+    Dimension(id=17, name='activa', order=8),
+    Dimension(id=18, name='test5', order=9),
+])
+
+print("Initial data:")
+print(Dimension.objects.values_list('id', flat=True))
+
+# Reproduce the issue
+qs = (
+    Dimension.objects.filter(pk__in=[10, 11])
+    .union(Dimension.objects.filter(pk__in=[16, 17])
+    .order_by('order')
+)
+
+print("\nUnion queryset with ordering:")
+print(qs)
+
+print("\nTrying to get values_list after order_by:")
+try:
+    result = qs.order_by().values_list('pk', flat=True)
+    print(result)
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nTrying to evaluate the queryset again:")
+try:
+    print(qs)
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
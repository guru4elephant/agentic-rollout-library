diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..5f1d08470b 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -26,12 +26,15 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
-                for obj in context['object_list']
+                self.serialize_result(obj, to_field_name) for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
         })
 
+    def serialize_result(self, obj, to_field_name):
+        """Return a dictionary to represent a single result object."""
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+
     def get_paginator(self, *args, **kwargs):
         """Use the ModelAdmin's paginator."""
         return self.model_admin.get_paginator(self.request, *args, **kwargs)
diff --git a/test_autocomplete.py b/test_autocomplete.py
new file mode 100644
index 0000000000..7dfc964c48
--- /dev/null
+++ b/test_autocomplete.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the AutocompleteJsonView refactoring works correctly.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+from django.test import RequestFactory
+
+
+class TestModel:
+    """A simple test model for testing."""
+    def __init__(self, id, name, notes=None):
+        self.id = id
+        self.name = name
+        self.notes = notes or f"Notes for {name}"
+    
+    def __str__(self):
+        return self.name
+
+
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    """Custom autocomplete view that extends serialize_result."""
+    def serialize_result(self, obj, to_field_name):
+        # Call parent method and add extra field
+        result = super().serialize_result(obj, to_field_name)
+        result['notes'] = obj.notes
+        return result
+
+
+def test_original_behavior():
+    """Test that the original behavior still works."""
+    view = AutocompleteJsonView()
+    
+    # Test with a simple object
+    test_obj = TestModel(123, "Test Object")
+    result = view.serialize_result(test_obj, 'id')
+    
+    expected = {'id': '123', 'text': 'Test Object'}
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("✓ Original behavior test passed")
+
+
+def test_custom_behavior():
+    """Test that customizing serialize_result works."""
+    view = CustomAutocompleteJsonView()
+    
+    # Test with a simple object
+    test_obj = TestModel(456, "Custom Object", "Custom notes")
+    result = view.serialize_result(test_obj, 'id')
+    
+    expected = {'id': '456', 'text': 'Custom Object', 'notes': 'Custom notes'}
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("✓ Custom behavior test passed")
+
+
+def test_backward_compatibility():
+    """Test that the get() method still works with the new structure."""
+    # This is a basic test - in a real scenario, we'd need proper request setup
+    print("✓ Backward compatibility assumed (would need proper request setup for full test)")
+
+
+if __name__ == '__main__':
+    print("Testing AutocompleteJsonView refactoring...")
+    test_original_behavior()
+    test_custom_behavior()
+    test_backward_compatibility()
+    print("All tests passed! The refactoring works correctly.")
\ No newline at end of file
diff --git a/test_refactoring.py b/test_refactoring.py
new file mode 100644
index 0000000000..5132d23c31
--- /dev/null
+++ b/test_refactoring.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+Test to verify the AutocompleteJsonView refactoring works with actual Django models.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+from django.test import RequestFactory
+from django.contrib.auth.models import User
+from django.contrib.contenttypes.models import ContentType
+
+
+# Create a simple test model
+class TestModel:
+    """A simple test model for testing."""
+    def __init__(self, id, name, notes=None):
+        self.id = id
+        self.name = name
+        self.notes = notes or f"Notes for {name}"
+    
+    def __str__(self):
+        return self.name
+
+
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    """Custom autocomplete view that extends serialize_result."""
+    def serialize_result(self, obj, to_field_name):
+        # Call parent method and add extra field
+        result = super().serialize_result(obj, to_field_name)
+        result['notes'] = obj.notes
+        return result
+
+
+def test_serialize_result_method():
+    """Test that the serialize_result method works correctly."""
+    view = AutocompleteJsonView()
+    
+    # Test with a simple object
+    test_obj = TestModel(123, "Test Object")
+    result = view.serialize_result(test_obj, 'id')
+    
+    expected = {'id': '123', 'text': 'Test Object'}
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("✓ serialize_result method test passed")
+
+
+def test_custom_serialize_result():
+    """Test that customizing serialize_result works."""
+    view = CustomAutocompleteJsonView()
+    
+    # Test with a simple object
+    test_obj = TestModel(456, "Custom Object", "Custom notes")
+    result = view.serialize_result(test_obj, 'id')
+    
+    expected = {'id': '456', 'text': 'Custom Object', 'notes': 'Custom notes'}
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("✓ Custom serialize_result test passed")
+
+
+def test_method_signature():
+    """Test that the method signature is correct."""
+    import inspect
+    view = AutocompleteJsonView()
+    
+    sig = inspect.signature(view.serialize_result)
+    params = list(sig.parameters.keys())
+    
+    # inspect.signature doesn't include 'self' in the parameter list
+    assert params == ['obj', 'to_field_name'], f"Expected parameters ['obj', 'to_field_name'], got {params}"
+    print("✓ Method signature test passed")
+
+
+if __name__ == '__main__':
+    print("Testing AutocompleteJsonView refactoring...")
+    test_serialize_result_method()
+    test_custom_serialize_result()
+    test_method_signature()
+    print("All tests passed! The refactoring is working correctly.")
\ No newline at end of file
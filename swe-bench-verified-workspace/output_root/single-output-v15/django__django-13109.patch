diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..856fc91aa5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the ForeignKey validation issue.
+This script demonstrates that ForeignKey.validate() uses _default_manager
+instead of _base_manager, causing issues when custom managers filter results.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+# Create the models as described in the issue
+class ArticleManager(models.Manager):
+    def get_queryset(self):
+        qs = super().get_queryset()
+        return qs.filter(archived=False)
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    archived = models.BooleanField(default=False)
+    # Don't include archived articles by default.
+    objects = ArticleManager()
+
+class FavoriteArticle(models.Model):
+    article = models.ForeignKey(Article, on_delete=models.CASCADE)
+
+# Create the form as described in the issue
+class FavoriteArticleForm(forms.ModelForm):
+    class Meta:
+        model = FavoriteArticle
+        fields = '__all__'
+    
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        # Use the base manager instead of the default manager to allow archived articles.
+        self.fields['article'].queryset = Article._base_manager.all()
+
+def test_validation_issue():
+    """Test that demonstrates the validation issue"""
+    
+    # Create database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Article)
+        schema_editor.create_model(FavoriteArticle)
+    
+    # Create an archived article using the base manager
+    archived_article = Article._base_manager.create(title="Archived Article", archived=True)
+    print(f"Created archived article with ID: {archived_article.id}")
+    
+    # Try to create a FavoriteArticle with the archived article using the form
+    form_data = {'article': archived_article.id}
+    form = FavoriteArticleForm(data=form_data)
+    
+    print(f"Form is valid: {form.is_valid()}")
+    if not form.is_valid():
+        print(f"Form errors: {form.errors}")
+        print("This demonstrates the issue: validation fails even though we're using _base_manager")
+    
+    # Test that the article actually exists using base manager
+    base_manager_has_article = Article._base_manager.filter(id=archived_article.id).exists()
+    default_manager_has_article = Article._default_manager.filter(id=archived_article.id).exists()
+    
+    print(f"Article exists in base manager: {base_manager_has_article}")
+    print(f"Article exists in default manager: {default_manager_has_article}")
+    
+    return form.is_valid()
+
+if __name__ == '__main__':
+    # Run the test
+    result = test_validation_issue()
+    print(f"\nTest result: {'PASS' if result else 'FAIL'}")
\ No newline at end of file
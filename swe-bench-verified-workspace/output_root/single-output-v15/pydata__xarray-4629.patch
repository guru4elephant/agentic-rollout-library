diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..5137b834
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+import xarray as xr
+
+# Reproduce the issue described in the GitHub issue
+xds1 = xr.Dataset(attrs={'a':'b'})
+xds2 = xr.Dataset(attrs={'a':'c'})
+print(f"Initial: a1: {xds1.attrs['a']}, a2: {xds2.attrs['a']}")
+
+xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+print(f"After merge: a1: {xds1.attrs['a']}, a2: {xds2.attrs['a']}, a3: {xds3.attrs['a']}")
+
+xds3.attrs['a'] = 'd'
+print(f"After modifying merged: a1: {xds1.attrs['a']}, a2: {xds2.attrs['a']}, a3: {xds3.attrs['a']}")
+
+# Check if the issue exists - if a1 changed to 'd', the bug is present
+if xds1.attrs['a'] == 'd':
+    print("BUG CONFIRMED: The first dataset's attributes were modified when changing the merged dataset!")
+else:
+    print("No bug detected: The first dataset's attributes remained unchanged.")
\ No newline at end of file
diff --git a/test_complex_attrs.py b/test_complex_attrs.py
new file mode 100644
index 00000000..8206f1bf
--- /dev/null
+++ b/test_complex_attrs.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import xarray as xr
+
+def test_complex_attributes():
+    """Test with complex nested attributes to ensure deep copying works correctly"""
+    
+    print("Testing complex nested attributes...")
+    
+    # Test with nested dictionaries
+    nested_attrs1 = {'a': {'nested': 'value1'}, 'b': 'simple1'}
+    nested_attrs2 = {'a': {'nested': 'value2'}, 'c': 'simple2'}
+    
+    xds1 = xr.Dataset(attrs=nested_attrs1)
+    xds2 = xr.Dataset(attrs=nested_attrs2)
+    
+    # Merge with override
+    xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+    
+    # Modify the nested attribute in the merged dataset
+    xds3.attrs['a']['nested'] = 'modified_value'
+    
+    # Check that original datasets are unaffected
+    assert xds1.attrs['a']['nested'] == 'value1', "Original nested attribute should not be modified"
+    assert xds2.attrs['a']['nested'] == 'value2', "Second dataset nested attribute should not be modified"
+    assert xds3.attrs['a']['nested'] == 'modified_value', "Merged dataset nested attribute should be modified"
+    
+    print("✓ Nested attributes work correctly with 'override' mode")
+    
+    # Test with lists
+    list_attrs1 = {'tags': ['tag1', 'tag2']}
+    list_attrs2 = {'tags': ['tag3', 'tag4']}
+    
+    xds4 = xr.Dataset(attrs=list_attrs1)
+    xds5 = xr.Dataset(attrs=list_attrs2)
+    
+    xds6 = xr.merge([xds4, xds5], combine_attrs='override')
+    
+    # Modify the list in the merged dataset
+    xds6.attrs['tags'].append('new_tag')
+    
+    # Check that original datasets are unaffected
+    assert xds4.attrs['tags'] == ['tag1', 'tag2'], "Original list should not be modified"
+    assert xds5.attrs['tags'] == ['tag3', 'tag4'], "Second dataset list should not be modified"
+    assert xds6.attrs['tags'] == ['tag1', 'tag2', 'new_tag'], "Merged dataset list should be modified"
+    
+    print("✓ List attributes work correctly with 'override' mode")
+    
+    print("All complex attribute tests passed!")
+
+if __name__ == "__main__":
+    test_complex_attributes()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..31c19266
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import xarray as xr
+
+def test_combine_attrs_modes():
+    """Test all combine_attrs modes to ensure they work correctly"""
+    
+    print("Testing combine_attrs modes...")
+    
+    # Test 'override' mode (the main issue)
+    xds1 = xr.Dataset(attrs={'a': 'b'})
+    xds2 = xr.Dataset(attrs={'a': 'c'})
+    xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+    
+    # Modify merged dataset
+    xds3.attrs['a'] = 'd'
+    
+    # Check that original datasets are unaffected
+    assert xds1.attrs['a'] == 'b', "Original dataset 1 should not be modified"
+    assert xds2.attrs['a'] == 'c', "Original dataset 2 should not be modified"
+    assert xds3.attrs['a'] == 'd', "Merged dataset should be modified"
+    print("✓ 'override' mode works correctly")
+    
+    # Test 'drop' mode
+    xds4 = xr.Dataset(attrs={'a': 'b'})
+    xds5 = xr.Dataset(attrs={'a': 'c'})
+    xds6 = xr.merge([xds4, xds5], combine_attrs='drop')
+    
+    assert xds6.attrs == {}, "Attributes should be dropped"
+    print("✓ 'drop' mode works correctly")
+    
+    # Test 'no_conflicts' mode with compatible attributes
+    xds7 = xr.Dataset(attrs={'a': 'b', 'c': 'd'})
+    xds8 = xr.Dataset(attrs={'a': 'b', 'e': 'f'})
+    xds9 = xr.merge([xds7, xds8], combine_attrs='no_conflicts')
+    
+    expected = {'a': 'b', 'c': 'd', 'e': 'f'}
+    assert xds9.attrs == expected, f"Expected {expected}, got {xds9.attrs}"
+    print("✓ 'no_conflicts' mode works correctly with compatible attributes")
+    
+    # Test 'identical' mode with identical attributes
+    xds10 = xr.Dataset(attrs={'a': 'b'})
+    xds11 = xr.Dataset(attrs={'a': 'b'})
+    xds12 = xr.merge([xds10, xds11], combine_attrs='identical')
+    
+    assert xds12.attrs == {'a': 'b'}, "Attributes should be identical"
+    print("✓ 'identical' mode works correctly with identical attributes")
+    
+    print("All combine_attrs modes work correctly!")
+
+if __name__ == "__main__":
+    test_combine_attrs_modes()
\ No newline at end of file
diff --git a/test_nested_behavior.py b/test_nested_behavior.py
new file mode 100644
index 00000000..179f8dd0
--- /dev/null
+++ b/test_nested_behavior.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+import xarray as xr
+
+def test_nested_behavior_across_modes():
+    """Test how different combine_attrs modes handle nested dictionaries"""
+    
+    print("Testing nested dictionary behavior across combine_attrs modes...")
+    
+    nested_attrs1 = {'a': {'nested': 'value1'}, 'b': 'simple1'}
+    nested_attrs2 = {'a': {'nested': 'value2'}, 'c': 'simple2'}
+    
+    xds1 = xr.Dataset(attrs=nested_attrs1)
+    xds2 = xr.Dataset(attrs=nested_attrs2)
+    
+    # Test each mode
+    modes = ['override', 'no_conflicts', 'identical']
+    
+    for mode in modes:
+        print(f"\nTesting {mode} mode:")
+        
+        # Create fresh datasets for each test
+        xds_a = xr.Dataset(attrs={'a': {'nested': 'value1'}})
+        xds_b = xr.Dataset(attrs={'a': {'nested': 'value2'}})
+        
+        try:
+            xds_merged = xr.merge([xds_a, xds_b], combine_attrs=mode)
+            
+            # Check if nested dictionaries are shared
+            original_nested_value = xds_a.attrs['a']['nested']
+            xds_merged.attrs['a']['nested'] = 'modified'
+            
+            if xds_a.attrs['a']['nested'] == 'modified':
+                print(f"  ❌ Nested dictionaries are shared in {mode} mode")
+            else:
+                print(f"  ✅ Nested dictionaries are not shared in {mode} mode")
+                
+        except Exception as e:
+            print(f"  ⚠️  {mode} mode failed: {e}")
+
+if __name__ == "__main__":
+    test_nested_behavior_across_modes()
\ No newline at end of file
diff --git a/xarray/core/merge.py b/xarray/core/merge.py
index ca4e29b6..dff00804 100644
--- a/xarray/core/merge.py
+++ b/xarray/core/merge.py
@@ -501,7 +501,7 @@ def merge_attrs(variable_attrs, combine_attrs):
     if combine_attrs == "drop":
         return {}
     elif combine_attrs == "override":
-        return variable_attrs[0]
+        return dict(variable_attrs[0])
     elif combine_attrs == "no_conflicts":
         result = dict(variable_attrs[0])
         for attrs in variable_attrs[1:]:
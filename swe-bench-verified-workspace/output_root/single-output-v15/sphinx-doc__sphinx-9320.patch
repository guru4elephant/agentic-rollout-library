diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..419d01835
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the sphinx-quickstart issue with existing conf.py
+"""
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_quickstart_exit_with_enter():
+    # Create a temporary directory with conf.py
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Create conf.py to trigger the issue
+        conf_path = os.path.join(tmpdir, 'conf.py')
+        with open(conf_path, 'w') as f:
+            f.write('# Dummy conf.py\n')
+        
+        # Change to the temporary directory
+        os.chdir(tmpdir)
+        
+        # Run sphinx-quickstart and simulate pressing Enter
+        # We'll use a subprocess with stdin to simulate user input
+        cmd = [sys.executable, '-m', 'sphinx.cmd.quickstart']
+        
+        # Run the command with empty input (simulating Enter press)
+        process = subprocess.Popen(
+            cmd,
+            stdin=subprocess.PIPE,
+            stdout=subprocess.PIPE,
+            stderr=subprocess.PIPE,
+            text=True
+        )
+        
+        # Send empty input (Enter) to the first prompt
+        stdout, stderr = process.communicate(input='\n')
+        
+        print("Return code:", process.returncode)
+        print("STDOUT:")
+        print(stdout)
+        print("STDERR:")
+        print(stderr)
+        
+        # The expected behavior is that it should exit with code 0 or 1 when Enter is pressed
+        # The current buggy behavior is that it shows "Please enter a valid path name" error
+        if "Please enter a valid path name" in stderr:
+            print("BUG REPRODUCED: Got 'Please enter a valid path name' error when pressing Enter")
+            return False
+        elif process.returncode in (0, 1):
+            print("SUCCESS: Exited cleanly when pressing Enter")
+            return True
+        else:
+            print("UNEXPECTED: Unknown behavior")
+            return False
+
+if __name__ == "__main__":
+    success = test_quickstart_exit_with_enter()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 206ff4ad4..4bb5faeb1 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py
index a40a21073..a508eed85 100644
--- a/sphinx/cmd/quickstart.py
+++ b/sphinx/cmd/quickstart.py
@@ -129,6 +129,13 @@ def ok(x: str) -> str:
     return x
 
 
+def allow_empty_or_path(x: str) -> str:
+    """Validator that allows empty input or validates as a path."""
+    if not x:
+        return x  # Allow empty input to exit
+    return is_path(x)  # Validate non-empty input as a path
+
+
 def do_prompt(text: str, default: str = None, validator: Callable[[str], Any] = nonempty) -> Union[str, bool]:  # NOQA
     while True:
         if default is not None:
@@ -223,7 +230,7 @@ def ask_user(d: Dict) -> None:
         print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))
         print()
         d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),
-                              '', is_path)
+                              '', allow_empty_or_path)
         if not d['path']:
             sys.exit(1)
 
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..af041a7de
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the fix works for both empty and non-empty input
+"""
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_quickstart_with_different_inputs():
+    test_cases = [
+        ("empty_input", "\n", "Should exit when Enter is pressed"),
+        ("valid_path", "/tmp\n", "Should accept valid path input"),
+        ("invalid_path", "nonexistent_path\n", "Should reject invalid path input")
+    ]
+    
+    results = {}
+    
+    for test_name, input_text, description in test_cases:
+        print(f"\n=== Testing {test_name}: {description} ===")
+        
+        with tempfile.TemporaryDirectory() as tmpdir:
+            # Create conf.py to trigger the issue
+            conf_path = os.path.join(tmpdir, 'conf.py')
+            with open(conf_path, 'w') as f:
+                f.write('# Dummy conf.py\n')
+            
+            # Change to the temporary directory
+            os.chdir(tmpdir)
+            
+            # Run sphinx-quickstart with specific input
+            cmd = [sys.executable, '-m', 'sphinx.cmd.quickstart']
+            
+            process = subprocess.Popen(
+                cmd,
+                stdin=subprocess.PIPE,
+                stdout=subprocess.PIPE,
+                stderr=subprocess.PIPE,
+                text=True
+            )
+            
+            stdout, stderr = process.communicate(input=input_text)
+            
+            print(f"Return code: {process.returncode}")
+            print("STDOUT snippet:", stdout[:200] + "..." if len(stdout) > 200 else stdout)
+            print("STDERR snippet:", stderr[:200] + "..." if len(stderr) > 200 else stderr)
+            
+            if test_name == "empty_input":
+                # Should exit cleanly (return code 1 is expected for exit)
+                success = process.returncode == 1 and "Please enter a valid path name" not in stderr
+                results[test_name] = success
+                print(f"Empty input test: {'PASS' if success else 'FAIL'}")
+                
+            elif test_name == "valid_path":
+                # Should continue with valid path (but we need to interrupt)
+                success = process.returncode != 0 and "Please enter a valid path name" not in stderr
+                results[test_name] = success
+                print(f"Valid path test: {'PASS' if success else 'FAIL'}")
+                
+            elif test_name == "invalid_path":
+                # Should show error for invalid path
+                success = "Please enter a valid path name" in stderr
+                results[test_name] = success
+                print(f"Invalid path test: {'PASS' if success else 'FAIL'}")
+    
+    print(f"\n=== SUMMARY ===")
+    all_passed = all(results.values())
+    for test_name, passed in results.items():
+        print(f"{test_name}: {'PASS' if passed else 'FAIL'}")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    success = test_quickstart_with_different_inputs()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_final_verification.py b/test_final_verification.py
new file mode 100644
index 000000000..bd33400d1
--- /dev/null
+++ b/test_final_verification.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""
+Final verification test for the sphinx-quickstart fix
+"""
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_quickstart_exit_with_enter_fixed():
+    """Test that pressing Enter exits cleanly when conf.py exists"""
+    print("Testing the fix for sphinx-quickstart exit issue...")
+    
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Create conf.py to trigger the issue
+        conf_path = os.path.join(tmpdir, 'conf.py')
+        with open(conf_path, 'w') as f:
+            f.write('# Dummy conf.py\n')
+        
+        # Change to the temporary directory
+        os.chdir(tmpdir)
+        
+        # Run sphinx-quickstart and simulate pressing Enter
+        cmd = [sys.executable, '-m', 'sphinx.cmd.quickstart']
+        
+        process = subprocess.Popen(
+            cmd,
+            stdin=subprocess.PIPE,
+            stdout=subprocess.PIPE,
+            stderr=subprocess.PIPE,
+            text=True
+        )
+        
+        # Send empty input (Enter) to the first prompt
+        stdout, stderr = process.communicate(input='\n')
+        
+        print(f"Return code: {process.returncode}")
+        
+        # Check that the bug is fixed
+        if "Please enter a valid path name" in stderr:
+            print("❌ FAIL: Still getting 'Please enter a valid path name' error")
+            return False
+        elif process.returncode == 1:  # Expected exit code when user chooses to exit
+            print("✅ PASS: Clean exit when pressing Enter")
+            return True
+        else:
+            print(f"❌ UNEXPECTED: Return code {process.returncode}, stderr: {stderr}")
+            return False
+
+if __name__ == "__main__":
+    success = test_quickstart_exit_with_enter_fixed()
+    print(f"\nFinal result: {'PASS' if success else 'FAIL'}")
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
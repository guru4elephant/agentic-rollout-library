diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index a308e27297..45bea36085 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -242,7 +242,7 @@ def _cstack(left, right):
         cright = _coord_matrix(right, 'right', noutp)
     else:
         cright = np.zeros((noutp, right.shape[1]))
-        cright[-right.shape[0]:, -right.shape[1]:] = 1
+        cright[-right.shape[0]:, -right.shape[1]:] = right
 
     return np.hstack([cleft, cright])
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..aa5e9786c5
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,65 @@
+"""
+Final test to verify the GitHub issue is fixed.
+This reproduces the exact examples from the issue.
+"""
+
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+import numpy as np
+
+def test_github_issue():
+    print("=== Testing GitHub Issue Examples ===")
+    
+    # Example 1: Simple compound model
+    print("\n1. Simple compound model:")
+    cm = m.Linear1D(10) & m.Linear1D(5)
+    result1 = separability_matrix(cm)
+    expected1 = np.array([[True, False], [False, True]])
+    print("Result:")
+    print(result1)
+    print("Expected:")
+    print(expected1)
+    print("Match:", np.array_equal(result1, expected1))
+    
+    # Example 2: More complex model
+    print("\n2. More complex model:")
+    complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)
+    result2 = separability_matrix(complex_model)
+    expected2 = np.array([
+        [True, True, False, False],
+        [True, True, False, False],
+        [False, False, True, False],
+        [False, False, False, True]
+    ])
+    print("Result:")
+    print(result2)
+    print("Expected:")
+    print(expected2)
+    print("Match:", np.array_equal(result2, expected2))
+    
+    # Example 3: Nested compound model (THE ISSUE)
+    print("\n3. Nested compound model (THE ISSUE - should now be fixed):")
+    nested_model = m.Pix2Sky_TAN() & cm
+    result3 = separability_matrix(nested_model)
+    # This should now match the expected behavior from example 2
+    expected3 = expected2  # Same as the complex model case
+    print("Result:")
+    print(result3)
+    print("Expected (should match complex model):")
+    print(expected3)
+    print("Match:", np.array_equal(result3, expected3))
+    
+    # Verify the issue is fixed
+    print("\n=== CONCLUSION ===")
+    if np.array_equal(result3, expected3):
+        print("✅ ISSUE FIXED: Nested compound models now produce correct separability matrices!")
+    else:
+        print("❌ ISSUE NOT FIXED: Results still don't match expected behavior")
+        print("Difference:")
+        print(result3 != expected3)
+    
+    return np.array_equal(result3, expected3)
+
+if __name__ == "__main__":
+    success = test_github_issue()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 3364d30740..02dddbe713 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..707fe00dff
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+# Test case 1: Simple compound model
+print("Test case 1: Simple compound model")
+cm = m.Linear1D(10) & m.Linear1D(5)
+print("Model:", cm)
+print("Separability matrix:")
+print(separability_matrix(cm))
+print()
+
+# Test case 2: More complex model
+print("Test case 2: More complex model")
+complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)
+print("Model:", complex_model)
+print("Separability matrix:")
+print(separability_matrix(complex_model))
+print()
+
+# Test case 3: Nested compound model (the issue)
+print("Test case 3: Nested compound model (the issue)")
+nested_model = m.Pix2Sky_TAN() & cm
+print("Model:", nested_model)
+print("Separability matrix:")
+print(separability_matrix(nested_model))
+print()
+
+# Expected behavior for nested case should be similar to test case 2
+print("Expected behavior (similar to test case 2):")
+expected_matrix = separability_matrix(complex_model)
+print(expected_matrix)
\ No newline at end of file
diff --git a/test_nested_separable.py b/test_nested_separable.py
new file mode 100644
index 0000000000..cb716698b2
--- /dev/null
+++ b/test_nested_separable.py
@@ -0,0 +1,73 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+import numpy as np
+
+def test_nested_compound_models():
+    """Test various nested compound model scenarios"""
+    
+    print("=== Testing Nested Compound Models ===")
+    
+    # Test 1: Simple nested case (from the issue)
+    print("\n1. Simple nested case:")
+    cm = m.Linear1D(10) & m.Linear1D(5)
+    nested = m.Pix2Sky_TAN() & cm
+    result = separability_matrix(nested)
+    expected = np.array([
+        [True, True, False, False],
+        [True, True, False, False], 
+        [False, False, True, False],
+        [False, False, False, True]
+    ])
+    print("Result:", result)
+    print("Expected:", expected)
+    print("Match:", np.array_equal(result, expected))
+    
+    # Test 2: Double nesting
+    print("\n2. Double nesting:")
+    inner = m.Linear1D(2) & m.Linear1D(3)
+    middle = m.Scale(1.5) & inner
+    outer = m.Pix2Sky_TAN() & middle
+    result = separability_matrix(outer)
+    print("Result shape:", result.shape)
+    print("Result:", result)
+    
+    # Test 3: Triple nesting with different models
+    print("\n3. Triple nesting:")
+    inner1 = m.Linear1D(1) & m.Linear1D(2)
+    inner2 = m.Scale(1.0) & m.Scale(2.0)
+    nested = inner1 & inner2
+    result = separability_matrix(nested)
+    expected = np.array([
+        [True, False, False, False],
+        [False, True, False, False],
+        [False, False, True, False],
+        [False, False, False, True]
+    ])
+    print("Result:", result)
+    print("Expected:", expected)
+    print("Match:", np.array_equal(result, expected))
+    
+    # Test 4: Mixed separable and non-separable models
+    print("\n4. Mixed models:")
+    # Create a non-separable model (rotation)
+    rot = m.Rotation2D(45)
+    linear_combo = m.Linear1D(1) & m.Linear1D(2)
+    mixed = rot & linear_combo
+    result = separability_matrix(mixed)
+    print("Result shape:", result.shape)
+    print("Result:", result)
+    
+    # Test 5: Deep nesting
+    print("\n5. Deep nesting:")
+    level1 = m.Linear1D(1) & m.Linear1D(2)
+    level2 = m.Scale(1.0) & level1
+    level3 = m.Shift(0.5) & level2
+    level4 = m.Pix2Sky_TAN() & level3
+    result = separability_matrix(level4)
+    print("Result shape:", result.shape)
+    print("Diagonal check:", np.all(result.diagonal() == True))
+    
+    print("\n=== All tests completed ===")
+
+if __name__ == "__main__":
+    test_nested_compound_models()
\ No newline at end of file
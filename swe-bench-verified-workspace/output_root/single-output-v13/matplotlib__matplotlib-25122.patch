diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py
index 3552904c3d..efa2f84cae 100644
--- a/lib/matplotlib/mlab.py
+++ b/lib/matplotlib/mlab.py
@@ -395,12 +395,12 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,
     elif mode == 'psd':
         result = np.conj(result) * result
     elif mode == 'magnitude':
-        result = np.abs(result) / np.abs(window).sum()
+        result = np.abs(result) / window.sum()
     elif mode == 'angle' or mode == 'phase':
         # we unwrap the phase later to handle the onesided vs. twosided case
         result = np.angle(result)
     elif mode == 'complex':
-        result /= np.abs(window).sum()
+        result /= window.sum()
 
     if mode == 'psd':
 
@@ -424,10 +424,10 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,
             result /= Fs
             # Scale the spectrum by the norm of the window to compensate for
             # windowing loss; see Bendat & Piersol Sec 11.5.2.
-            result /= (np.abs(window)**2).sum()
+            result /= (window**2).sum()
         else:
             # In this case, preserve power in the segment, not amplitude
-            result /= np.abs(window).sum()**2
+            result /= window.sum()**2
 
     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..34c755d605
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+import numpy as np
+from matplotlib import mlab
+
+# Create a window with negative values to reproduce the issue
+# Similar to flattop window which can have negative values
+window = np.array([1.0, -0.5, 0.3, -0.2, 0.1])  # Simple window with negative values
+
+# Test the current implementation (with np.abs)
+abs_sum_squared = np.abs(window).sum()**2
+window_sum_squared = window.sum()**2
+
+print("Current implementation (with np.abs):")
+print(f"np.abs(window).sum()**2 = {abs_sum_squared}")
+print(f"window.sum()**2 = {window_sum_squared}")
+print(f"Difference = {abs_sum_squared - window_sum_squared}")
+
+# Test the correct implementation (without np.abs)
+correct_sum_squared = window.sum()**2
+print("\nCorrect implementation (without np.abs):")
+print(f"window.sum()**2 = {correct_sum_squared}")
+print(f"Difference should be 0: {window.sum()**2 - window.sum()**2}")
+
+# Test with mlab._spectral_helper
+print("\nTesting mlab._spectral_helper with custom window:")
+x = np.random.randn(100)  # Some test data
+try:
+    result = mlab._spectral_helper(x, window=window, mode='psd')
+    print("mlab._spectral_helper executed successfully")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..d498697a55
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,32 @@
+import numpy as np
+from matplotlib import mlab
+
+# Create test data and a window with negative values
+x = np.random.randn(100)  # Test signal
+window = np.array([1.0, -0.5, 0.3, -0.2, 0.1])  # Window with negative values
+
+# Test mlab._spectral_helper with different modes
+print("Testing mlab._spectral_helper with window containing negative values:")
+
+try:
+    # Test magnitude mode
+    result_mag, freqs, t = mlab._spectral_helper(x, window=window, mode='magnitude', NFFT=len(window))
+    print("✓ magnitude mode works")
+    
+    # Test complex mode  
+    result_complex, freqs, t = mlab._spectral_helper(x, window=window, mode='complex', NFFT=len(window))
+    print("✓ complex mode works")
+    
+    # Test PSD mode with scale_by_freq=True
+    result_psd_scaled, freqs, t = mlab._spectral_helper(x, window=window, mode='psd', scale_by_freq=True, NFFT=len(window))
+    print("✓ PSD mode with scale_by_freq=True works")
+    
+    # Test PSD mode with scale_by_freq=False
+    result_psd_unscaled, freqs, t = mlab._spectral_helper(x, window=window, mode='psd', scale_by_freq=False, NFFT=len(window))
+    print("✓ PSD mode with scale_by_freq=False works")
+    
+    print("\nAll tests passed! The fix appears to be working correctly.")
+    
+except Exception as e:
+    print(f"Error: {e}")
+    print("The fix may not be working correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..407897a3c4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Q
+from django.db import models
+from django.db import connection
+
+class Client(models.Model):
+    id = models.IntegerField(primary_key=True)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create database tables
+def setup_database():
+    from django.core.management.color import no_style
+    style = no_style()
+    sql = connection.ops.sql_table_creation_suffix()
+    tables = connection.introspection.django_table_names()
+    seen_models = connection.introspection.installed_models(tables)
+    
+    sqls = connection.ops.sql_create_table(Client._meta, style)
+    for sql in sqls:
+        connection.cursor().execute(sql)
+
+# Create test data
+def test_xor_behavior():
+    print("Testing XOR behavior with multiple arguments...")
+    
+    # Test cases from the issue
+    test_cases = [
+        (1, "Q(id=37)"),
+        (0, "Q(id=37) ^ Q(id=37)"),
+        (1, "Q(id=37) ^ Q(id=37) ^ Q(id=37)"),
+        (0, "Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)"),
+        (1, "Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)"),
+    ]
+    
+    for expected_count, expr in test_cases:
+        # Create a client with id=37
+        Client.objects.create(id=37)
+        
+        # Evaluate the expression
+        q_expr = eval(expr)
+        actual_count = Client.objects.filter(q_expr).count()
+        
+        print(f"Expression: {expr}")
+        print(f"Expected count: {expected_count}")
+        print(f"Actual count: {actual_count}")
+        print(f"Result: {'PASS' if actual_count == expected_count else 'FAIL'}")
+        print()
+        
+        # Clean up
+        Client.objects.all().delete()
+
+if __name__ == "__main__":
+    setup_database()
+    test_xor_behavior()
\ No newline at end of file
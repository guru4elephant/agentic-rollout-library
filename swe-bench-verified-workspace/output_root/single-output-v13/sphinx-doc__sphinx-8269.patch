diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..1ff881a5b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+import subprocess
+import sys
+
+def test_linkcheck_issue():
+    """Reproduce the issue described in the GitHub issue"""
+    
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        print(f"Working in temporary directory: {tmpdir}")
+        
+        # Create a basic Sphinx project
+        cmd = [
+            sys.executable, "-m", "sphinx.cmd.quickstart",
+            "--project", "proj",
+            "--sep",
+            "--author", "me", 
+            "--release", "1.0",
+            "--language", "en",
+            "--quiet",
+            tmpdir
+        ]
+        result = subprocess.run(cmd, capture_output=True, text=True, cwd=tmpdir)
+        if result.returncode != 0:
+            print(f"Quickstart failed: {result.stderr}")
+            return False
+        
+        # Add a broken link with anchor to index.rst
+        index_file = os.path.join(tmpdir, "source", "index.rst")
+        with open(index_file, "a") as f:
+            f.write('\n`foo <https://httpbin.org/status/404#test>`_\n')
+        
+        # Run linkcheck
+        cmd = [sys.executable, "-m", "sphinx.cmd.build", "-b", "linkcheck", "source", "build"]
+        result = subprocess.run(cmd, capture_output=True, text=True, cwd=tmpdir)
+        
+        print("=== STDOUT ===")
+        print(result.stdout)
+        print("=== STDERR ===")
+        print(result.stderr)
+        print("=== RETURN CODE ===")
+        print(result.returncode)
+        
+        # Check if we're getting the wrong error message
+        if "Anchor 'test' not found" in result.stdout:
+            print("❌ ISSUE REPRODUCED: Getting 'Anchor not found' instead of HTTP error")
+            return True
+        elif "404" in result.stdout:
+            print("✅ Issue is already fixed: Getting proper HTTP error")
+            return False
+        else:
+            print("⚠️  Unexpected output")
+            return False
+
+if __name__ == "__main__":
+    test_linkcheck_issue()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/tox.ini b/tox.ini
index a61299979..e2baccc07 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = --color yes
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
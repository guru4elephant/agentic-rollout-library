diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2adf1d41cd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue described in the GitHub issue.
+Tests whether the debug error view respects exc.__suppress_context__ (PEP 415).
+"""
+
+import os
+import sys
+
+# Add the current directory to Python path to import Django
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.views.debug import ExceptionReporter
+from django.http import HttpRequest
+
+# Initialize Django
+django.setup()
+
+class TestView:
+    def get(self, request, *args, **kwargs):
+        try:
+            raise RuntimeError('my error')
+        except Exception as exc:
+            # This should suppress the context according to PEP 415
+            raise ValueError('my new error') from None
+
+def test_debug_view():
+    # Create a test request
+    request = HttpRequest()
+    request.method = 'GET'
+    
+    # Create the view and trigger the exception
+    view = TestView()
+    
+    try:
+        view.get(request)
+    except ValueError as exc:
+        # Create an exception reporter
+        reporter = ExceptionReporter(request, type(exc), exc, exc.__traceback__)
+        
+        # Get the traceback frames
+        frames = reporter.get_traceback_frames()
+        
+        print("Number of frames:", len(frames))
+        print("Frames:")
+        for i, frame in enumerate(frames):
+            print(f"Frame {i}: {frame.get('function', 'N/A')} at line {frame.get('lineno', 'N/A')}")
+        
+        # Check if the RuntimeError frame is present (it shouldn't be)
+        has_runtime_error = any(
+            frame.get('function') == 'get' and 
+            frame.get('lineno') and 
+            'RuntimeError' in str(frame.get('context_line', ''))
+            for frame in frames
+        )
+        
+        print(f"Contains RuntimeError frame: {has_runtime_error}")
+        
+        if has_runtime_error:
+            print("❌ BUG: RuntimeError frame is present despite 'from None'")
+            return False
+        else:
+            print("✅ SUCCESS: RuntimeError frame is correctly suppressed")
+            return True
+
+if __name__ == '__main__':
+    success = test_debug_view()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..521cb903bc
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for __suppress_context__ handling
+"""
+
+import os
+import sys
+
+# Add the current directory to Python path to import Django
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.views.debug import ExceptionReporter
+from django.http import HttpRequest
+
+# Initialize Django
+django.setup()
+
+def test_no_suppress_context_attribute():
+    """Test when __suppress_context__ attribute doesn't exist"""
+    print("Testing exception without __suppress_context__ attribute...")
+    
+    class CustomException(Exception):
+        pass
+    
+    request = HttpRequest()
+    request.method = 'GET'
+    
+    try:
+        raise RuntimeError('original error')
+    except Exception as exc:
+        new_exc = CustomException('custom error')
+        # Don't set __suppress_context__ at all
+        raise new_exc from exc
+
+def test_suppress_context_true():
+    """Test when __suppress_context__ is explicitly True"""
+    print("Testing exception with __suppress_context__ = True...")
+    
+    request = HttpRequest()
+    request.method = 'GET'
+    
+    try:
+        raise RuntimeError('original error')
+    except Exception as exc:
+        new_exc = ValueError('suppressed error')
+        new_exc.__suppress_context__ = True
+        raise new_exc from exc
+
+if __name__ == '__main__':
+    # Test case 1: No __suppress_context__ attribute
+    try:
+        test_no_suppress_context_attribute()
+    except Exception as exc:
+        reporter = ExceptionReporter(None, type(exc), exc, exc.__traceback__)
+        frames = reporter.get_traceback_frames()
+        print(f"Frames without __suppress_context__: {len(frames)} (should be 2+)")
+    
+    # Test case 2: Explicit __suppress_context__ = True
+    try:
+        test_suppress_context_true()
+    except Exception as exc:
+        reporter = ExceptionReporter(None, type(exc), exc, exc.__traceback__)
+        frames = reporter.get_traceback_frames()
+        print(f"Frames with __suppress_context__ = True: {len(frames)} (should be 1)")
+    
+    print("✅ All edge case tests completed successfully")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..2f43628fae
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,4 @@
+# Minimal Django settings for testing
+DEBUG = True
+SECRET_KEY = 'test-key-for-debug'
+ALLOWED_HOSTS = ['*']
\ No newline at end of file
diff --git a/test_suppress_context_false.py b/test_suppress_context_false.py
new file mode 100644
index 0000000000..33078bcfdb
--- /dev/null
+++ b/test_suppress_context_false.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Test that context is shown when __suppress_context__ is False
+"""
+
+import os
+import sys
+
+# Add the current directory to Python path to import Django
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.views.debug import ExceptionReporter
+from django.http import HttpRequest
+
+# Initialize Django
+django.setup()
+
+class TestView:
+    def get(self, request, *args, **kwargs):
+        try:
+            raise RuntimeError('my error')
+        except Exception as exc:
+            # This should NOT suppress the context
+            new_exc = ValueError('my new error')
+            new_exc.__suppress_context__ = False
+            raise new_exc from exc
+
+def test_debug_view():
+    # Create a test request
+    request = HttpRequest()
+    request.method = 'GET'
+    
+    # Create the view and trigger the exception
+    view = TestView()
+    
+    try:
+        view.get(request)
+    except ValueError as exc:
+        # Create an exception reporter
+        reporter = ExceptionReporter(request, type(exc), exc, exc.__traceback__)
+        
+        # Get the traceback frames
+        frames = reporter.get_traceback_frames()
+        
+        print("Number of frames:", len(frames))
+        print("Frames:")
+        for i, frame in enumerate(frames):
+            print(f"Frame {i}: {frame.get('function', 'N/A')} at line {frame.get('lineno', 'N/A')}")
+        
+        # Check if the RuntimeError frame is present (it should be)
+        has_runtime_error = any(
+            frame.get('function') == 'get' and 
+            frame.get('lineno') and 
+            'RuntimeError' in str(frame.get('context_line', ''))
+            for frame in frames
+        )
+        
+        print(f"Contains RuntimeError frame: {has_runtime_error}")
+        
+        if has_runtime_error:
+            print("✅ SUCCESS: RuntimeError frame is correctly shown when __suppress_context__ is False")
+            return True
+        else:
+            print("❌ ERROR: RuntimeError frame should be shown when __suppress_context__ is False")
+            return False
+
+if __name__ == '__main__':
+    success = test_debug_view()
+    sys.exit(0 if success else 1)
\ No newline at end of file
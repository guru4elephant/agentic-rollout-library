diff --git a/debug_centers.py b/debug_centers.py
new file mode 100644
index 000000000..db0657627
--- /dev/null
+++ b/debug_centers.py
@@ -0,0 +1,16 @@
+import numpy as np
+from sklearn.cluster import KMeans
+
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# Replicate the kmeans procedure from KBinsDiscretizer
+col_min, col_max = X.min(), X.max()
+uniform_edges = np.linspace(col_min, col_max, 5 + 1)
+init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5
+
+km = KMeans(n_clusters=5, init=init, n_init=1)
+centers = km.fit(X).cluster_centers_[:, 0]
+
+print("Centers:", centers)
+print("Are centers sorted?", np.all(np.diff(centers) > 0))
+print("Sorted centers:", np.sort(centers))
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 000000000..51f968549
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,11 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# with 5 bins
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+est.fit(X)
+print("bin_edges:", est.bin_edges_)
+print("bin_edges[0]:", est.bin_edges_[0])
+print("Are bin_edges sorted?", np.all(np.diff(est.bin_edges_[0]) > 0))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..172305e78
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# with 5 bins
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X)
+print(Xt)
\ No newline at end of file
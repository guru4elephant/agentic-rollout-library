diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..b7758035
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+import xarray as xr
+import numpy as np
+
+# Reproduce the issue from the GitHub issue
+my_data = xr.DataArray(np.arange(1,10), dims="x")
+
+# Option 1: take a center-justified rolling average
+result1 = my_data.rolling(x=3, center=True).mean().values
+print("Result 1 (direct rolling mean):")
+print(result1)
+
+# Option 2: try to manually iterate, but the result is not centered
+my_data_rolling = my_data.rolling(x=3, center=True)
+result2 = [window.mean().values.item() for label, window in my_data_rolling]
+print("\nResult 2 (manual iteration):")
+print(result2)
+
+# Expected result should be the same as result1
+expected = [np.nan, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, np.nan]
+print("\nExpected result:")
+print(expected)
+
+print("\nAre results equal?")
+print(f"Result 1 == Expected: {np.array_equal(result1, expected, equal_nan=True)}")
+print(f"Result 2 == Expected: {np.array_equal(result2, expected, equal_nan=True)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..ee116eec
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+import xarray as xr
+import numpy as np
+
+def test_rolling_iteration():
+    print("Testing rolling iteration with center=True...")
+    
+    # Test case 1: Original issue
+    print("\n1. Original issue test:")
+    my_data = xr.DataArray(np.arange(1,10), dims="x")
+    
+    result1 = my_data.rolling(x=3, center=True).mean().values
+    my_data_rolling = my_data.rolling(x=3, center=True)
+    result2 = [window.mean().values.item() for label, window in my_data_rolling]
+    
+    print("Direct rolling mean:", result1)
+    print("Manual iteration:   ", result2)
+    print("Equal:", np.array_equal(result1, result2, equal_nan=True))
+    
+    # Test case 2: center=False (should behave as before)
+    print("\n2. Testing center=False:")
+    result3 = my_data.rolling(x=3, center=False).mean().values
+    my_data_rolling_false = my_data.rolling(x=3, center=False)
+    result4 = [window.mean().values.item() for label, window in my_data_rolling_false]
+    
+    print("Direct rolling mean (center=False):", result3)
+    print("Manual iteration (center=False):   ", result4)
+    print("Equal:", np.array_equal(result3, result4, equal_nan=True))
+    
+    # Test case 3: Different window size
+    print("\n3. Testing window size 5:")
+    result5 = my_data.rolling(x=5, center=True).mean().values
+    my_data_rolling_5 = my_data.rolling(x=5, center=True)
+    result6 = [window.mean().values.item() for label, window in my_data_rolling_5]
+    
+    print("Direct rolling mean (window=5):", result5)
+    print("Manual iteration (window=5):   ", result6)
+    print("Equal:", np.array_equal(result5, result6, equal_nan=True))
+    
+    # Test case 4: Even window size
+    print("\n4. Testing even window size 4:")
+    result7 = my_data.rolling(x=4, center=True).mean().values
+    my_data_rolling_4 = my_data.rolling(x=4, center=True)
+    result8 = [window.mean().values.item() for label, window in my_data_rolling_4]
+    
+    print("Direct rolling mean (window=4):", result7)
+    print("Manual iteration (window=4):   ", result8)
+    print("Equal:", np.array_equal(result7, result8, equal_nan=True))
+
+if __name__ == "__main__":
+    test_rolling_iteration()
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..3aed6308 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -270,9 +270,25 @@ class DataArrayRolling(Rolling["DataArray"]):
     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
-        stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
+        
+        window_size = int(self.window[0])
+        n = len(self.window_labels)
+        
+        if self.center[0]:
+            # For centered windows, we need to apply an offset
+            offset = (window_size - 1) // 2
+            starts = np.arange(n) - offset
+            stops = starts + window_size
+            
+            # Handle boundary conditions
+            starts = np.maximum(starts, 0)
+            stops = np.minimum(stops, n)
+        else:
+            # Original non-centered behavior
+            stops = np.arange(1, n + 1)
+            starts = stops - window_size
+            starts[:window_size] = 0
+        
         for (label, start, stop) in zip(self.window_labels, starts, stops):
             window = self.obj.isel({self.dim[0]: slice(start, stop)})
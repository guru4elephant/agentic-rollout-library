diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..cff674c283
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+from sympy.crypto.crypto import morse_char, encode_morse, decode_morse
+
+print("=== Final Comprehensive Test ===")
+
+# Test 1: Verify the specific fix for "1"
+print("\n1. Testing the specific fix:")
+print(f"morse_char['.----'] = '{morse_char['.----']}'")  # Should be '1'
+encoded_1 = encode_morse("1")
+decoded_1 = decode_morse(".----")
+print(f"encode_morse('1') = '{encoded_1}' (should be '.----')")
+print(f"decode_morse('.----') = '{decoded_1}' (should be '1')")
+print(f"Fix successful: {encoded_1 == '.----' and decoded_1 == '1'}")
+
+# Test 2: Test all numbers 0-9
+print("\n2. Testing all numbers 0-9:")
+numbers = "0123456789"
+all_correct = True
+for num in numbers:
+    encoded = encode_morse(num)
+    decoded = decode_morse(encoded)
+    correct = num == decoded
+    all_correct = all_correct and correct
+    status = "✓" if correct else "✗"
+    print(f"  {num}: {encoded} -> {decoded} {status}")
+
+print(f"All numbers work correctly: {all_correct}")
+
+# Test 3: Test existing functionality from the test suite
+print("\n3. Testing existing functionality:")
+# Test cases from the actual test suite
+assert encode_morse('ABC') == '.-|-...|-.-.'
+assert encode_morse('SMS ') == '...|--|...||'
+assert encode_morse('') == ''
+assert encode_morse(' ') == '||'
+assert decode_morse('-.-|.|-.--') == 'KEY'
+assert decode_morse('.-.|..-|-.||') == 'RUN'
+print("All existing test cases pass!")
+
+# Test 4: Test mixed content
+print("\n4. Testing mixed content:")
+mixed = "HELLO123WORLD"
+encoded_mixed = encode_morse(mixed)
+decoded_mixed = decode_morse(encoded_mixed)
+print(f"Original: '{mixed}'")
+print(f"Encoded: '{encoded_mixed}'")
+print(f"Decoded: '{decoded_mixed}'")
+print(f"Round-trip successful: {mixed == decoded_mixed}")
+
+print("\n=== All tests completed successfully! ===")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c300f04da4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from sympy.crypto.crypto import morse_char, decode_morse
+
+# Test the current Morse mapping for "1"
+print("Current morse_char['1' mapping]:", morse_char.get("----", "NOT FOUND"))
+print("Current morse_char mapping that gives '1':")
+for code, char in morse_char.items():
+    if char == "1":
+        print(f"  {code}: {char}")
+
+# Test encoding and decoding "1"
+from sympy.crypto.crypto import encode_morse, decode_morse
+
+# Test encoding "1" to Morse
+encoded = encode_morse("1")
+print("Encoding '1':", encoded)
+
+# Test decoding what should be the correct Morse for "1"
+decoded = decode_morse(".----")
+print("Decoding '.----':", decoded)
+
+# Test decoding the incorrect mapping
+decoded_incorrect = decode_morse("----")
+print("Decoding '----':", decoded_incorrect)
+
+# Test what should be the correct encoding/decoding cycle
+test_char = "1"
+encoded_correct = encode_morse(test_char)
+decoded_correct = decode_morse(encoded_correct)
+print(f"Encoding/decoding cycle for '{test_char}':")
+print(f"  Encoded: {encoded_correct}")
+print(f"  Decoded: {decoded_correct}")
\ No newline at end of file
diff --git a/sympy/crypto/crypto.py b/sympy/crypto/crypto.py
index ca552191c0..0c556b6efb 100644
--- a/sympy/crypto/crypto.py
+++ b/sympy/crypto/crypto.py
@@ -1520,7 +1520,7 @@ def decipher_kid_rsa(msg, key):
     "..-": "U", "...-": "V",
     ".--": "W", "-..-": "X",
     "-.--": "Y", "--..": "Z",
-    "-----": "0", "----": "1",
+    "-----": "0", ".----": "1",
     "..---": "2", "...--": "3",
     "....-": "4", ".....": "5",
     "-....": "6", "--...": "7",
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..1b50e4b96f
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+from sympy.crypto.crypto import morse_char, encode_morse, decode_morse
+
+print("=== Testing Morse Code Fix for '1' ===")
+
+# Test 1: Verify the mapping is now correct
+print("\n1. Mapping verification:")
+print(f"morse_char['.----'] = '{morse_char['.----']}'")
+for code, char in morse_char.items():
+    if char == "1":
+        print(f"  Correct mapping: {code} -> {char}")
+
+# Test 2: Test encoding "1" to Morse
+print("\n2. Encoding test:")
+encoded = encode_morse("1")
+print(f"encode_morse('1') = '{encoded}'")
+print(f"Expected: '.----'")
+print(f"Match: {encoded == '.----'}")
+
+# Test 3: Test decoding correct Morse for "1"
+print("\n3. Decoding test:")
+decoded = decode_morse(".----")
+print(f"decode_morse('.----') = '{decoded}'")
+print(f"Expected: '1'")
+print(f"Match: {decoded == '1'}")
+
+# Test 4: Test full round-trip
+print("\n4. Round-trip test:")
+original = "1"
+encoded = encode_morse(original)
+decoded = decode_morse(encoded)
+print(f"Original: '{original}'")
+print(f"Encoded: '{encoded}'")
+print(f"Decoded: '{decoded}'")
+print(f"Round-trip successful: {original == decoded}")
+
+# Test 5: Test with numbers 0-9
+print("\n5. Testing numbers 0-9:")
+numbers = "0123456789"
+for num in numbers:
+    encoded = encode_morse(num)
+    decoded = decode_morse(encoded)
+    success = num == decoded
+    status = "✓" if success else "✗"
+    print(f"  {num}: {encoded} -> {decoded} {status}")
+
+# Test 6: Test mixed text with numbers
+print("\n6. Mixed text test:")
+mixed_text = "HELLO123WORLD"
+encoded = encode_morse(mixed_text)
+decoded = decode_morse(encoded)
+print(f"Original: '{mixed_text}'")
+print(f"Encoded: '{encoded}'")
+print(f"Decoded: '{decoded}'")
+print(f"Success: {mixed_text == decoded}")
+
+print("\n=== All tests completed ===")
\ No newline at end of file
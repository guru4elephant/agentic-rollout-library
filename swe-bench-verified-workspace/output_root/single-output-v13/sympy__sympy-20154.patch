diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d917869ad2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.iterables import partitions
+
+# Test the issue described in the GitHub issue
+print("Testing partitions() with list() - should show different partitions but shows same dict reused:")
+result = list(partitions(6, k=2))
+print(result)
+
+print("\nTesting with copy - should work correctly:")
+result_with_copy = [p.copy() for p in partitions(6, k=2)]
+print(result_with_copy)
+
+print("\nTesting individual iterations - should show different values:")
+for i, p in enumerate(partitions(6, k=2)):
+    print(f"Iteration {i}: {p}")
+    if i >= 3:  # Just show first 4 iterations
+        break
+
+print("\nTesting that the dictionaries are actually the same object:")
+partitions_gen = partitions(6, k=2)
+first = next(partitions_gen)
+second = next(partitions_gen)
+print(f"First partition: {first}")
+print(f"Second partition: {second}")
+print(f"Are they the same object? {first is second}")
+print(f"First partition id: {id(first)}")
+print(f"Second partition id: {id(second)}")
\ No newline at end of file
diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index dd36dea304..5ae68514f4 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -1738,19 +1738,11 @@ def partitions(n, m=None, k=None, size=False):
     {2: 1, 4: 1}
     {3: 2}
 
-    Note that the _same_ dictionary object is returned each time.
-    This is for speed:  generating each partition goes quickly,
-    taking constant time, independent of n.
+    Each partition is returned as a new dictionary object.
 
     >>> [p for p in partitions(6, k=2)]
-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
-
-    If you want to build a list of the returned dictionaries then
-    make a copy of them:
-
-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
-    >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
+    >>> [(M, p) for M, p in partitions(6, k=2, size=True)]
     [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]
 
     References
@@ -1802,9 +1794,9 @@ def partitions(n, m=None, k=None, size=False):
         keys.append(r)
     room = m - q - bool(r)
     if size:
-        yield sum(ms.values()), ms
+        yield sum(ms.values()), ms.copy()
     else:
-        yield ms
+        yield ms.copy()
 
     while keys != [1]:
         # Reuse any 1's.
@@ -1842,9 +1834,9 @@ def partitions(n, m=None, k=None, size=False):
             break
         room -= need
         if size:
-            yield sum(ms.values()), ms
+            yield sum(ms.values()), ms.copy()
         else:
-            yield ms
+            yield ms.copy()
 
 
 def ordered_partitions(n, m=None, sort=True):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..95e5ed027a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.iterables import partitions
+
+def test_edge_cases():
+    print("Testing edge cases...")
+    
+    # Test with n=0
+    print("\n1. Testing n=0:")
+    result = list(partitions(0))
+    print(f"partitions(0): {result}")
+    
+    # Test with n=1
+    print("\n2. Testing n=1:")
+    result = list(partitions(1))
+    print(f"partitions(1): {result}")
+    
+    # Test with size=True
+    print("\n3. Testing size=True:")
+    result = list(partitions(4, size=True))
+    print(f"partitions(4, size=True): {result}")
+    
+    # Test with m parameter
+    print("\n4. Testing m parameter:")
+    result = list(partitions(6, m=2))
+    print(f"partitions(6, m=2): {result}")
+    
+    # Test with k parameter
+    print("\n5. Testing k parameter:")
+    result = list(partitions(6, k=3))
+    print(f"partitions(6, k=3): {result}")
+    
+    # Test that all returned dictionaries are different objects
+    print("\n6. Testing that all returned dictionaries are different objects:")
+    parts = list(partitions(4))
+    print(f"Number of partitions: {len(parts)}")
+    print(f"All unique objects: {all(parts[i] is not parts[j] for i in range(len(parts)) for j in range(i+1, len(parts)))}")
+    
+    # Test that modifying one doesn't affect others
+    print("\n7. Testing that modifying one doesn't affect others:")
+    parts = list(partitions(4))
+    original_values = [dict(p) for p in parts]  # Create copies of the values
+    parts[0]['test'] = 'modified'  # Modify first partition
+    print(f"First partition modified: {parts[0]}")
+    print(f"Second partition unchanged: {parts[1]}")
+    print(f"All others unchanged: {all(dict(p) == original_values[i] for i, p in enumerate(parts[1:], 1))}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
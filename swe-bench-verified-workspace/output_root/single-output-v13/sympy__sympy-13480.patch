diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9fae35bb81
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+"""Script to reproduce the coth(log(tan(x))) subs error"""
+
+from sympy import *
+x = Symbol('x')
+e = coth(log(tan(x)))
+
+# Test with the problematic values mentioned in the issue
+test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]
+
+print("Testing coth(log(tan(x))) substitution...")
+for val in test_values:
+    try:
+        result = e.subs(x, val)
+        print(f"e.subs(x, {val}) = {result}")
+    except Exception as ex:
+        print(f"ERROR with x = {val}: {type(ex).__name__}: {ex}")
\ No newline at end of file
diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py
index 2a4555d919..5fbb73c786 100644
--- a/sympy/functions/elementary/hyperbolic.py
+++ b/sympy/functions/elementary/hyperbolic.py
@@ -587,7 +587,7 @@ def eval(cls, arg):
                 x, m = _peeloff_ipi(arg)
                 if m:
                     cothm = coth(m)
-                    if cotm is S.ComplexInfinity:
+                    if cothm is S.ComplexInfinity:
                         return coth(x)
                     else: # cothm == 0
                         return tanh(x)
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..04351c73be
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+"""Test edge cases for coth function"""
+
+from sympy import *
+x = Symbol('x')
+e = coth(log(tan(x)))
+
+print("Testing edge cases for coth(log(tan(x))) substitution...")
+
+# Test with zero
+try:
+    result = e.subs(x, 0)
+    print(f"e.subs(x, 0) = {result}")
+except Exception as ex:
+    print(f"ERROR with x = 0: {type(ex).__name__}: {ex}")
+
+# Test with pi/4 (should be well-defined)
+try:
+    result = e.subs(x, pi/4)
+    print(f"e.subs(x, pi/4) = {result}")
+except Exception as ex:
+    print(f"ERROR with x = pi/4: {type(ex).__name__}: {ex}")
+
+# Test with pi/2 (should be undefined)
+try:
+    result = e.subs(x, pi/2)
+    print(f"e.subs(x, pi/2) = {result}")
+except Exception as ex:
+    print(f"ERROR with x = pi/2: {type(ex).__name__}: {ex}")
+
+# Test with negative values
+try:
+    result = e.subs(x, -1)
+    print(f"e.subs(x, -1) = {result}")
+except Exception as ex:
+    print(f"ERROR with x = -1: {type(ex).__name__}: {ex}")
+
+# Test with some symbolic expressions
+try:
+    result = e.subs(x, pi)
+    print(f"e.subs(x, pi) = {result}")
+except Exception as ex:
+    print(f"ERROR with x = pi: {type(ex).__name__}: {ex}")
+
+# Test with some fractional values
+try:
+    result = e.subs(x, 1/2)
+    print(f"e.subs(x, 1/2) = {result}")
+except Exception as ex:
+    print(f"ERROR with x = 1/2: {type(ex).__name__}: {ex}")
\ No newline at end of file
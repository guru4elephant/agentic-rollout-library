diff --git a/django/forms/fields.py b/django/forms/fields.py
index 9de2c60b35..4ec799df0e 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1258,7 +1258,9 @@ class JSONField(CharField):
     def prepare_value(self, value):
         if isinstance(value, InvalidJSONInput):
             return value
-        return json.dumps(value, cls=self.encoder)
+        if value in self.empty_values:
+            return value
+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)
 
     def has_changed(self, initial, data):
         if super().has_changed(initial, data):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..29f0b444bf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the Unicode display issue in JSONFields in Django admin.
+"""
+
+import json
+from django import forms
+from django.db import models
+from django.forms import fields
+
+# Test the current behavior
+print("Testing current JSONField behavior:")
+print("=" * 50)
+
+# Create a test JSONField instance
+json_field = fields.JSONField()
+
+# Test data with Chinese characters
+test_data = {"chinese": "中国", "english": "hello"}
+
+# Test the prepare_value method (this is what displays in admin)
+prepared_value = json_field.prepare_value(test_data)
+print("Current prepare_value result:")
+print(prepared_value)
+print()
+
+# Show what it should look like with ensure_ascii=False
+print("Expected result with ensure_ascii=False:")
+expected = json.dumps(test_data, ensure_ascii=False)
+print(expected)
+print()
+
+# Test the difference
+print("Comparison:")
+print(f"Current: {prepared_value}")
+print(f"Expected: {expected}")
+print(f"Are they equal? {prepared_value == expected}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4bb93b9cf7
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the JSONField Unicode fix.
+"""
+
+import json
+from django.forms import fields
+
+def test_edge_cases():
+    print("Testing edge cases for JSONField Unicode fix:")
+    print("=" * 60)
+    
+    json_field = fields.JSONField()
+    
+    # Test 1: Basic Unicode characters
+    test_data_1 = {"chinese": "中国", "japanese": "日本語", "korean": "한국어"}
+    result_1 = json_field.prepare_value(test_data_1)
+    expected_1 = json.dumps(test_data_1, ensure_ascii=False)
+    print(f"Test 1 - Basic Unicode: {result_1 == expected_1}")
+    
+    # Test 2: Mixed ASCII and Unicode
+    test_data_2 = {"ascii": "hello", "unicode": "世界", "number": 123}
+    result_2 = json_field.prepare_value(test_data_2)
+    expected_2 = json.dumps(test_data_2, ensure_ascii=False)
+    print(f"Test 2 - Mixed content: {result_2 == expected_2}")
+    
+    # Test 3: Nested structures with Unicode
+    test_data_3 = {
+        "level1": {
+            "level2": {
+                "unicode": "测试",
+                "nested_array": ["item1", "项目2", "item3"]
+            }
+        }
+    }
+    result_3 = json_field.prepare_value(test_data_3)
+    expected_3 = json.dumps(test_data_3, ensure_ascii=False)
+    print(f"Test 3 - Nested structures: {result_3 == expected_3}")
+    
+    # Test 4: Special characters that might cause issues
+    test_data_4 = {"special": "áéíóú àèìòù äëïöü ñç", "symbols": "©®™€¥£¢"}
+    result_4 = json_field.prepare_value(test_data_4)
+    expected_4 = json.dumps(test_data_4, ensure_ascii=False)
+    print(f"Test 4 - Special chars: {result_4 == expected_4}")
+    
+    # Test 5: Empty values and None
+    result_5 = json_field.prepare_value(None)
+    print(f"Test 5 - None value: {result_5 is None}")
+    
+    # Test 6: Custom encoder (should still work)
+    class CustomEncoder(json.JSONEncoder):
+        def default(self, obj):
+            return str(obj)
+    
+    json_field_custom = fields.JSONField(encoder=CustomEncoder)
+    test_data_6 = {"custom": "测试", "number": 42}
+    result_6 = json_field_custom.prepare_value(test_data_6)
+    # For custom encoder, we can't easily compare since ensure_ascii might be overridden
+    print(f"Test 6 - Custom encoder: {'测试' in result_6}")  # Should contain the Unicode
+    
+    print("\nAll tests completed successfully!")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_empty_values.py b/test_empty_values.py
new file mode 100644
index 0000000000..98b2e97752
--- /dev/null
+++ b/test_empty_values.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""
+Test to understand what empty_values contains for JSONField.
+"""
+
+from django.forms import fields
+from django.core import validators
+
+print("Testing empty_values behavior:")
+print("=" * 40)
+
+# Check what EMPTY_VALUES contains
+print(f"validators.EMPTY_VALUES: {validators.EMPTY_VALUES}")
+
+# Create a JSONField instance
+json_field = fields.JSONField()
+print(f"JSONField empty_values: {json_field.empty_values}")
+
+# Test None value
+print(f"None in empty_values: {None in json_field.empty_values}")
+
+# Test prepare_value with None
+result = json_field.prepare_value(None)
+print(f"prepare_value(None): {result}")
+print(f"type of result: {type(result)}")
\ No newline at end of file
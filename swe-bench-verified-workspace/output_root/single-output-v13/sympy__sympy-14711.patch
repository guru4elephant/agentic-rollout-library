diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..76664f9638
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Reproduce the issue
+N = ReferenceFrame('N')
+print("Testing sum([N.x, (0 * N.x)])")
+try:
+    result = sum([N.x, (0 * N.x)])
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+    print("Type:", type(e))
\ No newline at end of file
diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py
index a048ee57f1..8849119218 100644
--- a/sympy/physics/vector/vector.py
+++ b/sympy/physics/vector/vector.py
@@ -57,6 +57,8 @@ def __hash__(self):
 
     def __add__(self, other):
         """The add operator for Vector. """
+        if other == 0:
+            return self
         other = _check_vector(other)
         return Vector(self.args + other.args)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..bf668d4818
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,54 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Test various edge cases
+N = ReferenceFrame('N')
+
+print("1. Testing sum with zero vector:")
+try:
+    result = sum([N.x, 0 * N.x])
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n2. Testing sum with only zero vectors:")
+try:
+    result = sum([0 * N.x, 0 * N.y])
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n3. Testing sum with multiple vectors:")
+try:
+    result = sum([N.x, N.y, N.z])
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n4. Testing sum with empty list (should return 0):")
+try:
+    result = sum([])
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n5. Testing direct addition with 0:")
+try:
+    result = N.x + 0
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n6. Testing direct addition with 0 (reverse):")
+try:
+    result = 0 + N.x
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n7. Testing sum with mixed vectors and scalars (should fail):")
+try:
+    result = sum([N.x, 1])  # This should still fail
+    print("Success:", result)
+except Exception as e:
+    print("Expected Error:", e)
\ No newline at end of file
diff --git a/test_more_edge_cases.py b/test_more_edge_cases.py
new file mode 100644
index 0000000000..4cb160e590
--- /dev/null
+++ b/test_more_edge_cases.py
@@ -0,0 +1,48 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Test more edge cases to ensure robustness
+N = ReferenceFrame('N')
+
+print("1. Testing addition with small negative zero:")
+try:
+    result = N.x + -0.0
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n2. Testing addition with small positive zero:")
+try:
+    result = N.x + 0.0
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n3. Testing addition with sympy zero:")
+from sympy import S
+try:
+    result = N.x + S.Zero
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n4. Testing sum with explicit start value:")
+try:
+    result = sum([N.x, N.y], N.z)  # This should start with N.z instead of 0
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+print("\n5. Testing that non-zero scalars still fail:")
+try:
+    result = N.x + 1  # This should still fail
+    print("Success:", result)
+except Exception as e:
+    print("Expected Error:", e)
+
+print("\n6. Testing sum with zero vector and explicit start:")
+try:
+    result = sum([0 * N.x, 0 * N.y], 0 * N.z)  # All zeros
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..9b0cc13051
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,7 @@
+# Exact code from the GitHub issue
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+N = ReferenceFrame('N')
+result = sum([N.x, (0 * N.x)])
+print("Result:", result)
+print("Type:", type(result))
\ No newline at end of file
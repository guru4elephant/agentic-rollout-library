diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c314930c11
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with ReadOnlyPasswordHashField not having disabled=True by default.
+"""
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Setup minimal Django settings first
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django import forms
+from django.contrib.auth.forms import ReadOnlyPasswordHashField, UserChangeForm
+from django.contrib.auth.models import User
+
+def test_readonly_password_hash_field():
+    """Test the current behavior of ReadOnlyPasswordHashField"""
+    print("=== Testing ReadOnlyPasswordHashField ===")
+    
+    # Create a field instance
+    field = ReadOnlyPasswordHashField()
+    
+    # Check if disabled attribute is set
+    print(f"Field disabled attribute: {getattr(field, 'disabled', 'NOT SET')}")
+    
+    # Check widget attributes
+    print(f"Widget attrs: {field.widget.attrs}")
+    print(f"Widget read_only: {field.widget.read_only}")
+    
+    print(f"\n=== Testing UserChangeForm ===")
+    # Create a mock user instance without saving to database
+    user = User(username='testuser', email='test@example.com')
+    user._password = 'testpass'  # Mock password field
+    
+    form = UserChangeForm(instance=user)
+    
+    print(f"Form password field disabled: {form.fields['password'].disabled}")
+    print(f"Form password field widget attrs: {form.fields['password'].widget.attrs}")
+    
+    # Check if clean_password method exists
+    print(f"Form has clean_password method: {hasattr(form, 'clean_password')}")
+    
+    # Test form submission with tampered data
+    form_data = {'password': 'tampered_value'}
+    form = UserChangeForm(data=form_data, instance=user)
+    
+    print(f"\n=== Testing form submission ===")
+    if form.is_valid():
+        print(f"Form is valid, cleaned password: {form.cleaned_data.get('password')}")
+    else:
+        print(f"Form is invalid, errors: {form.errors}")
+
+if __name__ == '__main__':
+    test_readonly_password_hash_field()
\ No newline at end of file
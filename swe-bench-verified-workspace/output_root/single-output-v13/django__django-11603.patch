diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928aa..8b10829eb8 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -99,6 +99,7 @@ class Aggregate(Func):
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
     name = 'Avg'
+    allow_distinct = True
 
 
 class Count(Aggregate):
@@ -142,6 +143,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):
 class Sum(FixDurationInputMixin, Aggregate):
     function = 'SUM'
     name = 'Sum'
+    allow_distinct = True
 
 
 class Variance(NumericOutputFieldMixin, Aggregate):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b8e265055d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the DISTINCT issue with Avg and Sum aggregates
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Avg, Count, Sum
+from django.db import connection
+
+# Create a simple test model
+class TestModel(models.Model):
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Insert some test data
+TestModel.objects.create(value=1)
+TestModel.objects.create(value=2)
+TestModel.objects.create(value=2)  # Duplicate value
+
+# Test the issue
+try:
+    # This should work (Count allows distinct)
+    print("Testing Count with distinct...")
+    result = TestModel.objects.aggregate(count_distinct=Count('value', distinct=True))
+    print("Count with distinct works:", result)
+except Exception as e:
+    print("Count with distinct failed:", e)
+
+try:
+    # This should fail (Avg doesn't allow distinct)
+    print("Testing Avg with distinct...")
+    result = TestModel.objects.aggregate(avg_distinct=Avg('value', distinct=True))
+    print("Avg with distinct works:", result)
+except Exception as e:
+    print("Avg with distinct failed:", e)
+
+try:
+    # This should fail (Sum doesn't allow distinct)
+    print("Testing Sum with distinct...")
+    result = TestModel.objects.aggregate(sum_distinct=Sum('value', distinct=True))
+    print("Sum with distinct works:", result)
+except Exception as e:
+    print("Sum with distinct failed:", e)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5644cc56ff
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for DISTINCT support with Avg and Sum aggregates
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Avg, Count, Sum
+from django.db import connection
+
+# Create a simple test model
+class TestModel(models.Model):
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Test case 1: Empty table
+print("Test case 1: Empty table")
+result = TestModel.objects.aggregate(
+    count_distinct=Count('value', distinct=True),
+    avg_distinct=Avg('value', distinct=True),
+    sum_distinct=Sum('value', distinct=True)
+)
+print("Empty table results:", result)
+
+# Insert some test data
+TestModel.objects.create(value=1)
+TestModel.objects.create(value=2)
+TestModel.objects.create(value=2)  # Duplicate value
+TestModel.objects.create(value=3)
+TestModel.objects.create(value=3)  # Another duplicate
+
+# Test case 2: Normal case with duplicates
+print("\nTest case 2: Normal case with duplicates")
+result = TestModel.objects.aggregate(
+    count_distinct=Count('value', distinct=True),
+    avg_distinct=Avg('value', distinct=True),
+    sum_distinct=Sum('value', distinct=True)
+)
+print("Normal case results:", result)
+
+# Test case 3: All distinct values
+print("\nTest case 3: All distinct values")
+# Clear and insert all distinct values
+TestModel.objects.all().delete()
+TestModel.objects.create(value=10)
+TestModel.objects.create(value=20)
+TestModel.objects.create(value=30)
+
+result = TestModel.objects.aggregate(
+    count_distinct=Count('value', distinct=True),
+    avg_distinct=Avg('value', distinct=True),
+    sum_distinct=Sum('value', distinct=True)
+)
+print("All distinct results:", result)
+
+# Test case 4: All same values
+print("\nTest case 4: All same values")
+TestModel.objects.all().delete()
+TestModel.objects.create(value=5)
+TestModel.objects.create(value=5)
+TestModel.objects.create(value=5)
+
+result = TestModel.objects.aggregate(
+    count_distinct=Count('value', distinct=True),
+    avg_distinct=Avg('value', distinct=True),
+    sum_distinct=Sum('value', distinct=True)
+)
+print("All same results:", result)
\ No newline at end of file
diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..4eacbbeec7 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -517,10 +517,10 @@ class NDArithmeticMixin:
             self.mask is None and operand is not None and operand.mask is None
         ) or handle_mask is None:
             return None
-        elif self.mask is None and operand is not None:
+        elif self.mask is None and operand is not None and operand.mask is not None:
             # Make a copy so there is no reference in the result.
             return deepcopy(operand.mask)
-        elif operand is None:
+        elif operand is None and self.mask is not None:
             return deepcopy(self.mask)
         else:
             # Now lets calculate the resulting mask (operation enforces copy)
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..3a2c493f36
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+"""Debug script to understand the mask propagation issue."""
+
+import numpy as np
+from astropy.nddata import NDDataRef
+
+# Monkey patch to add debug prints
+from astropy.nddata.mixins.ndarithmetic import NDArithmeticMixin
+
+original_arithmetic_mask = NDArithmeticMixin._arithmetic_mask
+
+def debug_arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
+    print(f"DEBUG: _arithmetic_mask called")
+    print(f"  self.mask: {self.mask} (type: {type(self.mask)})")
+    print(f"  operand: {operand} (type: {type(operand)})")
+    if hasattr(operand, 'mask'):
+        print(f"  operand.mask: {operand.mask} (type: {type(operand.mask)})")
+    print(f"  handle_mask: {handle_mask}")
+    
+    result = original_arithmetic_mask(self, operation, operand, handle_mask, axis, **kwds)
+    print(f"  result: {result} (type: {type(result)})")
+    return result
+
+NDArithmeticMixin._arithmetic_mask = debug_arithmetic_mask
+
+# Test the issue
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("Testing mask * constant case...")
+try:
+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or)
+    print(f"Success! Result mask: {result.mask}")
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 15bb49f22b..dc9c3c5f37 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "cython==0.29.34",
             "oldest-supported-numpy",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2a3258bbcf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+"""Script to reproduce the NDDataRef mask propagation issue."""
+
+import numpy as np
+from astropy.nddata import NDDataRef
+
+def test_mask_propagation():
+    print("Testing NDDataRef mask propagation issue...")
+    
+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+    nref_nomask = NDDataRef(array)
+    nref_mask = NDDataRef(array, mask=mask)
+
+    print("\n1. multiply no mask by constant (no mask * no mask)")
+    try:
+        result = nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask
+        print(f"Result: {result} - OK")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n2. multiply no mask by itself (no mask * no mask)")
+    try:
+        result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+        print(f"Result: {result} - OK")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n3. multiply mask by constant (mask * no mask)")
+    try:
+        result = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask
+        print(f"Result: {result} - OK")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n4. multiply mask by itself (mask * mask)")
+    try:
+        result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask
+        print(f"Result: {result} - OK")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    print("\n5. multiply mask by no mask (mask * no mask)")
+    try:
+        result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+        print(f"Result: {result} - OK")
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == "__main__":
+    test_mask_propagation()
\ No newline at end of file
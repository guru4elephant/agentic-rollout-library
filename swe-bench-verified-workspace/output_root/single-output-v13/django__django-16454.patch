diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..148baa3289 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -71,6 +71,29 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def add_subparsers(self, **kwargs):
+        # Ensure subparsers inherit our special arguments
+        kwargs.setdefault('parser_class', type(self))
+        subparsers_action = super().add_subparsers(**kwargs)
+        
+        # Store a reference to self so we can access our special attributes
+        # when creating subparsers
+        original_self = self
+        
+        # Override the add_parser method to pass through our special arguments
+        original_add_parser = subparsers_action.add_parser
+        
+        def add_parser_with_inheritance(name, **kwargs):
+            # Pass through the special arguments to the subparser
+            if hasattr(original_self, 'missing_args_message'):
+                kwargs.setdefault('missing_args_message', original_self.missing_args_message)
+            if hasattr(original_self, 'called_from_command_line'):
+                kwargs.setdefault('called_from_command_line', original_self.called_from_command_line)
+            return original_add_parser(name, **kwargs)
+        
+        subparsers_action.add_parser = add_parser_with_inheritance
+        return subparsers_action
+
 
 def handle_default_options(options):
     """
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b2863a3561
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the subparser error formatting issue
+"""
+import os
+import sys
+
+# Add the current directory to Python path to import Django
+sys.path.insert(0, '.')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+from django.core.management.base import BaseCommand, CommandParser
+
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        subparsers = parser.add_subparsers(required=True)
+        create = subparsers.add_parser("create")
+        create.add_argument("name")
+    
+    def handle(self, *args, **options):
+        pass
+
+def test_missing_subparser():
+    """Test missing subparser argument"""
+    print("Testing missing subparser argument...")
+    parser = CommandParser(
+        missing_args_message="the following arguments are required: {create}",
+        called_from_command_line=True
+    )
+    subparsers = parser.add_subparsers(required=True)
+    create = subparsers.add_parser("create")
+    create.add_argument("name")
+    
+    # This should show a nice usage message
+    try:
+        parser.parse_args([])
+    except SystemExit:
+        print("Got expected SystemExit for missing subparser")
+    except Exception as e:
+        print(f"Unexpected error: {e}")
+
+def test_missing_subparser_argument():
+    """Test missing argument to subparser"""
+    print("Testing missing argument to subparser...")
+    parser = CommandParser(
+        missing_args_message="the following arguments are required: {create}",
+        called_from_command_line=True
+    )
+    subparsers = parser.add_subparsers(required=True)
+    create = subparsers.add_parser("create")
+    create.add_argument("name")
+    
+    # This should show a stacktrace according to the issue
+    try:
+        parser.parse_args(["create"])
+    except SystemExit:
+        print("Got SystemExit (good)")
+    except Exception as e:
+        print(f"Got unexpected error: {e}")
+
+if __name__ == "__main__":
+    test_missing_subparser()
+    test_missing_subparser_argument()
\ No newline at end of file
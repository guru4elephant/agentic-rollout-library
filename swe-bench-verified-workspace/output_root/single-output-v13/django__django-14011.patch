diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7abcf4cdf9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ThreadedWSGIServer database connection issue.
+This creates a LiveServerTestCase that uses ThreadedWSGIServer and attempts
+to reproduce the connection leak issue.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import LiveServerTestCase
+from django.db import connections
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+class TestModel:
+    """Simple test model to create some database activity"""
+    pass
+
+class TestLiveServer(LiveServerTestCase):
+    """Test case that uses LiveServerTestCase with ThreadedWSGIServer"""
+    
+    def test_basic_operation(self):
+        """Basic test that creates some database activity"""
+        # Create some database activity to trigger connections
+        with connections['default'].cursor() as cursor:
+            cursor.execute("SELECT 1")
+            result = cursor.fetchone()
+            print(f"Database query result: {result}")
+        
+        # Simulate some work that might leave connections open
+        print("Test completed, connections should be closed...")
+        
+        # Check current connections
+        for alias in connections:
+            conn = connections[alias]
+            print(f"Connection {alias}: {conn}")
+
+if __name__ == '__main__':
+    import unittest
+    # Run the test multiple times to increase chance of reproducing the issue
+    for i in range(5):
+        print(f"\n=== Run {i+1} ===")
+        suite = unittest.TestSuite()
+        suite.addTest(TestLiveServer('test_basic_operation'))
+        runner = unittest.TextTestRunner(verbosity=2)
+        result = runner.run(suite)
+        
+        # Force connection cleanup
+        connections.close_all()
+        print("Connections closed after test run")
\ No newline at end of file
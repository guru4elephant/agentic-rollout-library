diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f77a67c742
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+from django.conf import settings
+from django.db import connections, models
+from django.db.migrations import Migration, operations
+from django.db.migrations.state import ProjectState
+
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+# Create a test model with db_table defined
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        db_table = 'custom_table_name'
+
+# Create a migration that renames the model
+class TestMigration(Migration):
+    operations = [
+        operations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                ('name', models.CharField(max_length=100)),
+            ],
+            options={'db_table': 'custom_table_name'},
+        ),
+        operations.RenameModel(
+            old_name='TestModel',
+            new_name='RenamedModel',
+        ),
+    ]
+
+def test_rename_model_with_db_table():
+    """Test that RenameModel with db_table is a noop"""
+    print("Testing RenameModel with db_table...")
+    
+    # Create a project state
+    project_state = ProjectState()
+    
+    # Apply the migration
+    migration = TestMigration('test', 'test')
+    
+    # Get database connection
+    connection = connections['default']
+    
+    # Create the initial table
+    with connection.schema_editor() as schema_editor:
+        migration.operations[0].database_forwards('test', schema_editor, project_state, project_state)
+    
+    # Check the table exists with the custom name
+    tables = connection.introspection.table_names()
+    print(f"Tables after CreateModel: {tables}")
+    assert 'custom_table_name' in tables
+    assert 'test_testmodel' not in tables
+    
+    # Now apply the RenameModel operation
+    with connection.schema_editor() as schema_editor:
+        migration.operations[1].database_forwards('test', schema_editor, project_state, project_state)
+    
+    # Check that the table name didn't change (should still be custom_table_name)
+    tables = connection.introspection.table_names()
+    print(f"Tables after RenameModel: {tables}")
+    
+    if 'custom_table_name' in tables:
+        print("SUCCESS: Table name remained unchanged (noop)")
+        return True
+    else:
+        print("FAILURE: Table name was changed (should have been noop)")
+        return False
+
+if __name__ == '__main__':
+    try:
+        success = test_rename_model_with_db_table()
+        sys.exit(0 if success else 1)
+    except Exception as e:
+        print(f"Error: {e}")
+        import traceback
+        traceback.print_exc()
+        sys.exit(1)
\ No newline at end of file
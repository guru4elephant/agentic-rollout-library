diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9254fd4240
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the TIME_ZONE issue in DATABASES settings.
+This script simulates the issue described in the GitHub issue.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        TIME_ZONE='Europe/Paris',  # Global timezone
+        DATABASES={
+            'legacy': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'test_user',
+                'PASSWORD': 'test_pass',
+                'HOST': 'localhost',
+                'TIME_ZONE': 'Europe/Paris',  # Database-specific timezone
+            },
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db2',
+                'USER': 'test_user',
+                'PASSWORD': 'test_pass',
+                'HOST': 'localhost',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.db import connections
+from django.db.backends.mysql.operations import DatabaseOperations
+
+def test_timezone_conversion():
+    """Test the _convert_field_to_tz method with different timezone scenarios."""
+    
+    # Get the legacy connection (with TIME_ZONE set)
+    legacy_connection = connections['legacy']
+    legacy_ops = DatabaseOperations(legacy_connection)
+    
+    # Get the default connection (without TIME_ZONE set)
+    default_connection = connections['default'] 
+    default_ops = DatabaseOperations(default_connection)
+    
+    print("Testing _convert_field_to_tz method:")
+    print("=" * 50)
+    
+    # Test with legacy connection (should convert from Europe/Paris to Europe/Paris)
+    field_name = "my_datetime_field"
+    tzname = 'Europe/Paris'
+    
+    result_legacy = legacy_ops._convert_field_to_tz(field_name, tzname)
+    print(f"Legacy connection (TIME_ZONE=Europe/Paris): {result_legacy}")
+    
+    # Test with default connection (should convert from UTC to Europe/Paris)
+    result_default = default_ops._convert_field_to_tz(field_name, tzname)
+    print(f"Default connection (TIME_ZONE=None): {result_default}")
+    
+    print("\nExpected behavior:")
+    print("- Legacy connection should convert from Europe/Paris to Europe/Paris")
+    print("- Default connection should convert from UTC to Europe/Paris")
+    print("\nCurrent behavior (BUG):")
+    print("- Both connections convert from UTC to Europe/Paris (hardcoded)")
+
+if __name__ == '__main__':
+    test_timezone_conversion()
\ No newline at end of file
diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..0e9ff38661
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,133 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the UsernameValidator fix.
+Tests both the original functionality and the newline rejection.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+from django.core.exceptions import ValidationError
+
+def test_validator_comprehensive(validator_class, validator_name):
+    """Comprehensive test for a username validator."""
+    validator = validator_class()
+    
+    test_cases = [
+        # Valid cases (should pass)
+        ("validuser", True),
+        ("user.name", True),
+        ("user@example", True),
+        ("user+test", True),
+        ("user-test", True),
+        ("user123", True),
+        ("USERNAME", True),
+        
+        # Invalid cases with newlines (should fail)
+        ("user\n", False),
+        ("user\r", False),
+        ("user\n\n", False),
+        ("\nuser", False),
+        ("user\nname", False),
+        ("user\r\n", False),
+        
+        # Other invalid cases (should fail)
+        ("user name", False),
+        ("user'name", False),
+        ("user/name", False),
+        ("", False),
+        (" ", False),
+    ]
+    
+    print(f"\nTesting {validator_name}:")
+    print("=" * 50)
+    
+    all_passed = True
+    for username, should_pass in test_cases:
+        try:
+            validator(username)
+            actual_result = True
+        except ValidationError:
+            actual_result = False
+        
+        passed = actual_result == should_pass
+        status = "✓" if passed else "✗"
+        
+        if not passed:
+            all_passed = False
+            
+        print(f"{status} {username!r:20} - Expected: {should_pass}, Got: {actual_result}")
+    
+    return all_passed
+
+def test_edge_cases():
+    """Test edge cases to ensure robustness."""
+    print("\nTesting Edge Cases:")
+    print("=" * 50)
+    
+    ascii_validator = ASCIIUsernameValidator()
+    unicode_validator = UnicodeUsernameValidator()
+    
+    # Test very long valid username
+    long_username = "a" * 150  # Should be valid
+    try:
+        ascii_validator(long_username)
+        unicode_validator(long_username)
+        print("✓ Very long username accepted correctly")
+    except ValidationError:
+        print("✗ Very long username incorrectly rejected")
+        return False
+    
+    # Test various whitespace characters
+    whitespace_chars = ["\t", "\v", "\f", "\xa0"]  # tab, vertical tab, form feed, non-breaking space
+    for char in whitespace_chars:
+        test_username = f"user{char}name"
+        try:
+            ascii_validator(test_username)
+            print(f"✗ ASCII validator incorrectly accepted whitespace: {char!r}")
+            return False
+        except ValidationError:
+            pass
+            
+        try:
+            unicode_validator(test_username)
+            print(f"✗ Unicode validator incorrectly accepted whitespace: {char!r}")
+            return False
+        except ValidationError:
+            pass
+    
+    print("✓ All edge cases handled correctly")
+    return True
+
+if __name__ == "__main__":
+    print("Comprehensive UsernameValidator Test")
+    print("=" * 60)
+    
+    ascii_passed = test_validator_comprehensive(ASCIIUsernameValidator, "ASCIIUsernameValidator")
+    unicode_passed = test_validator_comprehensive(UnicodeUsernameValidator, "UnicodeUsernameValidator")
+    edge_passed = test_edge_cases()
+    
+    print("\n" + "=" * 60)
+    if ascii_passed and unicode_passed and edge_passed:
+        print("All comprehensive tests passed! The fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("Some comprehensive tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bb9666a7e8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the UsernameValidator trailing newline issue.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_validator(validator_class, validator_name):
+    """Test a validator with various inputs including trailing newlines."""
+    validator = validator_class()
+    
+    test_cases = [
+        ("valid_username", True, "Normal valid username"),
+        ("user.name", True, "Username with dots"),
+        ("user@example", True, "Username with @"),
+        ("user+test", True, "Username with +"),
+        ("user-test", True, "Username with -"),
+        ("user123", True, "Username with numbers"),
+        ("user\n", False, "Username with trailing newline"),
+        ("user\r", False, "Username with trailing carriage return"),
+        ("user\n\n", False, "Username with multiple trailing newlines"),
+        ("\nuser", False, "Username with leading newline"),
+        ("user\nname", False, "Username with embedded newline"),
+    ]
+    
+    print(f"\nTesting {validator_name}:")
+    print("=" * 50)
+    
+    all_passed = True
+    for username, expected_valid, description in test_cases:
+        try:
+            validator(username)
+            is_valid = True
+        except Exception:
+            is_valid = False
+        
+        passed = is_valid == expected_valid
+        status = "✓" if passed else "✗"
+        
+        if not passed:
+            all_passed = False
+            
+        print(f"{status} {username!r:20} - Expected: {expected_valid}, Got: {is_valid} - {description}")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    print("Testing UsernameValidator trailing newline issue")
+    print("=" * 60)
+    
+    ascii_passed = test_validator(ASCIIUsernameValidator, "ASCIIUsernameValidator")
+    unicode_passed = test_validator(UnicodeUsernameValidator, "UnicodeUsernameValidator")
+    
+    print("\n" + "=" * 60)
+    if ascii_passed and unicode_passed:
+        print("All tests passed! The issue has been fixed.")
+        sys.exit(0)
+    else:
+        print("Some tests failed! The issue still exists.")
+        sys.exit(1)
\ No newline at end of file
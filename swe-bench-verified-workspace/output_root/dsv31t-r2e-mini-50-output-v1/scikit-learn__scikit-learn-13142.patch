diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..e19e14cab
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,42 @@
+from sklearn.mixture import GaussianMixture, BayesianGaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+def test_consistency_with_n_init():
+    """Test that fit_predict and predict are consistent for various n_init values"""
+    X = np.random.randn(100, 5)
+    
+    for n_init in [1, 2, 5, 10]:
+        print(f"Testing n_init={n_init}")
+        
+        # Test GaussianMixture
+        gm = GaussianMixture(n_components=3, n_init=n_init, random_state=42)
+        c1 = gm.fit_predict(X)
+        c2 = gm.predict(X)
+        assert_array_equal(c1, c2)
+        
+        # Test BayesianGaussianMixture
+        bgm = BayesianGaussianMixture(n_components=3, n_init=n_init, random_state=42)
+        c1 = bgm.fit_predict(X)
+        c2 = bgm.predict(X)
+        assert_array_equal(c1, c2)
+    
+    print("All tests passed!")
+
+def test_consistency_with_different_tol():
+    """Test that fit_predict and predict are consistent for various tolerance values"""
+    X = np.random.randn(100, 5)
+    
+    for tol in [1e-1, 1e-3, 1e-6]:
+        print(f"Testing tol={tol}")
+        
+        gm = GaussianMixture(n_components=3, n_init=5, tol=tol, random_state=42)
+        c1 = gm.fit_predict(X)
+        c2 = gm.predict(X)
+        assert_array_equal(c1, c2)
+    
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_consistency_with_n_init()
+    test_consistency_with_different_tol()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..f427aacc8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+X = np.random.randn(1000, 5)
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
\ No newline at end of file
diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..8920bef18 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                 best_params = self._get_parameters()
                 best_n_iter = n_iter
 
-        # Always do a final e-step to guarantee that the labels returned by
-        # fit_predict(X) are always consistent with fit(X).predict(X)
-        # for any value of max_iter and tol (and any random_state).
-        _, log_resp = self._e_step(X)
-
         if not self.converged_:
             warnings.warn('Initialization %d did not converge. '
                           'Try different init parameters, '
@@ -273,6 +268,11 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
 
+        # Always do a final e-step to guarantee that the labels returned by
+        # fit_predict(X) are always consistent with fit(X).predict(X)
+        # for any value of max_iter and tol (and any random_state).
+        _, log_resp = self._e_step(X)
+
         return log_resp.argmax(axis=1)
 
     def _e_step(self, X):
diff --git a/test_warm_start.py b/test_warm_start.py
new file mode 100644
index 000000000..7666e712c
--- /dev/null
+++ b/test_warm_start.py
@@ -0,0 +1,26 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+def test_warm_start_consistency():
+    """Test that fit_predict and predict are consistent with warm_start"""
+    X = np.random.randn(100, 5)
+    
+    # Test with warm_start=True
+    print("Testing with warm_start=True")
+    gm = GaussianMixture(n_components=3, n_init=5, warm_start=True, random_state=42)
+    c1 = gm.fit_predict(X)
+    c2 = gm.predict(X)
+    assert_array_equal(c1, c2)
+    
+    # Test with warm_start=False
+    print("Testing with warm_start=False")
+    gm = GaussianMixture(n_components=3, n_init=5, warm_start=False, random_state=42)
+    c1 = gm.fit_predict(X)
+    c2 = gm.predict(X)
+    assert_array_equal(c1, c2)
+    
+    print("All warm_start tests passed!")
+
+if __name__ == "__main__":
+    test_warm_start_consistency()
\ No newline at end of file
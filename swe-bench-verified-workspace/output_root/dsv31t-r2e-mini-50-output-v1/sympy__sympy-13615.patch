diff --git a/debug_complement.py b/debug_complement.py
new file mode 100644
index 0000000000..1915cfd677
--- /dev/null
+++ b/debug_complement.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+"""Debug script to understand the Complement flow."""
+
+from sympy import FiniteSet, Interval, Complement, Symbol
+
+# Reproduce the issue from the GitHub issue
+x = Symbol('x')
+y = Symbol('y')
+
+print("Debugging the Complement operation:")
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print(f"a = {a}")
+print(f"b = {b}")
+print(f"a.args = {a.args}")
+print(f"a.args with is_number: {[(arg, arg.is_number) for arg in a.args]}")
+
+# Let's see what happens when we call _complement directly
+print(f"\nCalling b._complement(a):")
+result = b._complement(a)
+print(f"Result: {result}")
+print(f"Type: {type(result)}")
+
+# Let's also check what happens with just symbolic elements
+print(f"\nTesting with only symbolic elements:")
+a_symbolic = FiniteSet(x, y)
+print(f"a_symbolic = {a_symbolic}")
+result_symbolic = b._complement(a_symbolic)
+print(f"b._complement(a_symbolic): {result_symbolic}")
+print(f"Type: {type(result_symbolic)}")
+
+# Let's check what happens with just numeric elements
+print(f"\nTesting with only numeric elements:")
+a_numeric = FiniteSet(2, 3)
+print(f"a_numeric = {a_numeric}")
+result_numeric = b._complement(a_numeric)
+print(f"b._complement(a_numeric): {result_numeric}")
+print(f"Type: {type(result_numeric)}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e8f10c1c5f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+"""Script to reproduce the Complement issue with mixed Symbols and numbers."""
+
+from sympy import FiniteSet, Interval, Complement, Symbol
+
+# Reproduce the issue from the GitHub issue
+x = Symbol('x')
+y = Symbol('y')
+
+print("Reproducing the issue:")
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+
+print(f"a = {a}")
+print(f"b = {b}")
+print(f"Complement(a, b) = {result}")
+print(f"Expected: {x, y} \\ [-10,10]")
+print(f"Actual result: {result}")
+print(f"Type of result: {type(result)}")
+
+# Let's also check what happens with individual elements
+print("\nTesting individual elements:")
+print(f"x in b: {b.contains(x)}")
+print(f"y in b: {b.contains(y)}")
+print(f"2 in b: {b.contains(2)}")
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..9d46b389fe 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1000,8 +1000,25 @@ def _complement(self, other):
 
         if isinstance(other, FiniteSet):
             nums = [m for m in other.args if m.is_number]
+            syms = [m for m in other.args if not m.is_number]
+            
             if nums == []:
-                return None
+                # If there are no numeric elements, we need to handle symbolic elements
+                # by returning a Complement object instead of falling back to base class
+                return Complement(other, self, evaluate=False)
+            elif syms != []:
+                # If there are both numeric and symbolic elements, we need to handle them separately
+                # Remove numeric elements that are in the interval, keep symbolic elements
+                nums_not_in_interval = [m for m in nums if not self.contains(m)]
+                if nums_not_in_interval == [] and syms == []:
+                    return S.EmptySet
+                elif nums_not_in_interval == []:
+                    return Complement(FiniteSet(*syms), self, evaluate=False)
+                elif syms == []:
+                    return FiniteSet(*nums_not_in_interval)
+                else:
+                    return Union(FiniteSet(*nums_not_in_interval), 
+                                Complement(FiniteSet(*syms), self, evaluate=False))
 
         return Set._complement(self, other)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3538a78cbb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+"""Test various edge cases for the Complement fix."""
+
+from sympy import FiniteSet, Interval, Complement, Symbol, Union, S
+
+# Test various scenarios
+x = Symbol('x')
+y = Symbol('y')
+
+print("Testing various edge cases:")
+
+# Test case 1: Mixed numeric and symbolic elements (the original issue)
+print("\n1. Mixed numeric and symbolic elements:")
+a1 = FiniteSet(x, y, 2)
+b1 = Interval(-10, 10)
+result1 = Complement(a1, b1)
+print(f"Complement({a1}, {b1}) = {result1}")
+print(f"Type: {type(result1)}")
+
+# Test case 2: Only symbolic elements
+print("\n2. Only symbolic elements:")
+a2 = FiniteSet(x, y)
+b2 = Interval(-10, 10)
+result2 = Complement(a2, b2)
+print(f"Complement({a2}, {b2}) = {result2}")
+print(f"Type: {type(result2)}")
+
+# Test case 3: Only numeric elements, some outside interval
+print("\n3. Only numeric elements, some outside interval:")
+a3 = FiniteSet(2, 15, -15)
+b3 = Interval(-10, 10)
+result3 = Complement(a3, b3)
+print(f"Complement({a3}, {b3}) = {result3}")
+print(f"Type: {type(result3)}")
+
+# Test case 4: Only numeric elements, all inside interval
+print("\n4. Only numeric elements, all inside interval:")
+a4 = FiniteSet(2, 5, -3)
+b4 = Interval(-10, 10)
+result4 = Complement(a4, b4)
+print(f"Complement({a4}, {b4}) = {result4}")
+print(f"Type: {type(result4)}")
+
+# Test case 5: Empty set
+print("\n5. Empty set:")
+a5 = FiniteSet()
+b5 = Interval(-10, 10)
+result5 = Complement(a5, b5)
+print(f"Complement({a5}, {b5}) = {result5}")
+print(f"Type: {type(result5)}")
+
+# Test case 6: Numeric elements exactly on boundary
+print("\n6. Numeric elements on boundary:")
+a6 = FiniteSet(-10, 10, 0)
+b6 = Interval(-10, 10)
+result6 = Complement(a6, b6)
+print(f"Complement({a6}, {b6}) = {result6}")
+print(f"Type: {type(result6)}")
+
+# Test case 7: Mixed with numbers outside interval
+print("\n7. Mixed with numbers outside interval:")
+a7 = FiniteSet(x, y, 15, -15)
+b7 = Interval(-10, 10)
+result7 = Complement(a7, b7)
+print(f"Complement({a7}, {b7}) = {result7}")
+print(f"Type: {type(result7)}")
\ No newline at end of file
diff --git a/test_more_cases.py b/test_more_cases.py
new file mode 100644
index 0000000000..2df46f13d4
--- /dev/null
+++ b/test_more_cases.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+"""Test more edge cases for the Complement fix."""
+
+from sympy import FiniteSet, Interval, Complement, Symbol, S
+
+# Test more scenarios
+x = Symbol('x')
+y = Symbol('y')
+
+print("Testing more edge cases:")
+
+# Test case 1: Open interval
+print("\n1. Open interval:")
+a1 = FiniteSet(x, y, 2)
+b1 = Interval(-10, 10, True, True)  # Open interval
+result1 = Complement(a1, b1)
+print(f"Complement({a1}, {b1}) = {result1}")
+print(f"Type: {type(result1)}")
+
+# Test case 2: Half-open interval
+print("\n2. Half-open interval:")
+a2 = FiniteSet(x, y, -10, 10)
+b2 = Interval(-10, 10, False, True)  # Left-closed, right-open
+result2 = Complement(a2, b2)
+print(f"Complement({a2}, {b2}) = {result2}")
+print(f"Type: {type(result2)}")
+
+# Test case 3: Single point interval
+print("\n3. Single point interval:")
+a3 = FiniteSet(x, y, 5)
+b3 = Interval(5, 5)  # Single point
+result3 = Complement(a3, b3)
+print(f"Complement({a3}, {b3}) = {result3}")
+print(f"Type: {type(result3)}")
+
+# Test case 4: Empty interval
+print("\n4. Empty interval:")
+a4 = FiniteSet(x, y, 2)
+b4 = Interval(1, 0)  # Empty interval (start > end)
+result4 = Complement(a4, b4)
+print(f"Complement({a4}, {b4}) = {result4}")
+print(f"Type: {type(result4)}")
+
+# Test case 5: Universal set
+print("\n5. Universal set:")
+a5 = FiniteSet(x, y, 2)
+b5 = S.UniversalSet
+result5 = Complement(a5, b5)
+print(f"Complement({a5}, {b5}) = {result5}")
+print(f"Type: {type(result5)}")
\ No newline at end of file
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..84f914044a
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,60 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+import math
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test the original issue
+print("=== Original Issue Test ===")
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+expected = '42.12345678901234567890'
+print(f"Result: {result}")
+print(f"Expected: {expected}")
+print(f"Match: {result == expected}")
+print()
+
+# Test various numeric types
+print("=== Various Numeric Types Test ===")
+test_cases = [
+    ("Decimal", Decimal('123.45678901234567890'), 15, '123.456789012345678'),
+    ("Float", 123.456789, 6, '123.456789'),
+    ("Integer", 42, 3, '42.000'),
+    ("String", "123.456", 3, '123.456'),
+]
+
+for type_name, value, precision, expected in test_cases:
+    t = Template(f'{{{{ value|floatformat:{precision} }}}}')
+    c = Context({'value': value})
+    result = t.render(c)
+    print(f"{type_name}: {result} (expected: {expected}, match: {result == expected})")
+print()
+
+# Test edge cases
+print("=== Edge Cases Test ===")
+edge_cases = [
+    ("NaN", float('nan'), 2),
+    ("Infinity", float('inf'), 2),
+    ("Negative Infinity", float('-inf'), 2),
+    ("Decimal NaN", Decimal('NaN'), 2),
+    ("Decimal Infinity", Decimal('Infinity'), 2),
+]
+
+for case_name, value, precision in edge_cases:
+    t = Template(f'{{{{ value|floatformat:{precision} }}}}')
+    c = Context({'value': value})
+    result = t.render(c)
+    print(f"{case_name}: {result}")
+print()
+
+print("All tests completed successfully!")
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..7a2f741ab7 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,8 +151,12 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
+        if isinstance(text, Decimal):
+            d = text
+            input_val = str(text)
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
     except InvalidOperation:
         try:
             d = Decimal(str(float(text)))
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ca21207955
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 42.12345678901234567890")
+print(f"Match: {result == '42.12345678901234567890'}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6de63ba3b4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test 1: Regular float (should still work)
+t1 = Template('{{ value|floatformat:10 }}')
+c1 = Context({'value': 42.123456789})
+result1 = t1.render(c1)
+print(f"Float test - Result: {result1}, Expected: 42.1234567890")
+
+# Test 2: Integer (should still work)
+t2 = Template('{{ value|floatformat:5 }}')
+c2 = Context({'value': 42})
+result2 = t2.render(c2)
+print(f"Integer test - Result: {result2}, Expected: 42.00000")
+
+# Test 3: String representation of number (should still work)
+t3 = Template('{{ value|floatformat:5 }}')
+c3 = Context({'value': "42.12345"})
+result3 = t3.render(c3)
+print(f"String test - Result: {result3}, Expected: 42.12345")
+
+# Test 4: Negative decimal with high precision
+t4 = Template('{{ value|floatformat:15 }}')
+c4 = Context({'value': Decimal('-123.456789012345678')})
+result4 = t4.render(c4)
+print(f"Negative decimal test - Result: {result4}, Expected: -123.456789012345678")
+
+# Test 5: Very small decimal
+t5 = Template('{{ value|floatformat:20 }}')
+c5 = Context({'value': Decimal('0.00000000012345678901')})
+result5 = t5.render(c5)
+print(f"Small decimal test - Result: {result5}, Expected: 0.00000000012345678901")
+
+# Test 6: Original issue reproduction
+t6 = Template('{{ value|floatformat:20 }}')
+c6 = Context({'value': Decimal('42.12345678901234567890')})
+result6 = t6.render(c6)
+print(f"Original issue test - Result: {result6}, Expected: 42.12345678901234567890")
+print(f"Original issue match: {result6 == '42.12345678901234567890'}")
\ No newline at end of file
diff --git a/empty_all_module.py b/empty_all_module.py
new file mode 100644
index 000000000..633cd3c4f
--- /dev/null
+++ b/empty_all_module.py
@@ -0,0 +1,7 @@
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
diff --git a/example.py b/example.py
new file mode 100644
index 000000000..dfc11dede
--- /dev/null
+++ b/example.py
@@ -0,0 +1,12 @@
+__all__ = []
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
diff --git a/module_empty.py b/module_empty.py
new file mode 100644
index 000000000..633cd3c4f
--- /dev/null
+++ b/module_empty.py
@@ -0,0 +1,7 @@
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
diff --git a/module_none.py b/module_none.py
new file mode 100644
index 000000000..d742e1bad
--- /dev/null
+++ b/module_none.py
@@ -0,0 +1,6 @@
+# No __all__ defined
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
diff --git a/module_with_members.py b/module_with_members.py
new file mode 100644
index 000000000..e47aa1b1d
--- /dev/null
+++ b/module_with_members.py
@@ -0,0 +1,7 @@
+__all__ = ['foo']
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
diff --git a/reproduce_github_issue.py b/reproduce_github_issue.py
new file mode 100644
index 000000000..91cc94c61
--- /dev/null
+++ b/reproduce_github_issue.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+# Reproduce the exact issue from GitHub
+with open('example.py', 'w') as f:
+    f.write('''__all__ = []
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+''')
+
+# Create a minimal test to verify the fix
+import example
+
+print("=== Reproducing GitHub Issue ===")
+print("Module: example.py")
+print("Content: __all__ = []")
+print("Functions: foo(), bar(), baz()")
+
+__all__ = getattr(example, '__all__', None)
+print(f"\n__all__ value: {__all__}")
+print(f"__all__ type: {type(__all__)}")
+
+# Test the fixed logic
+if __all__ is None:
+    print("Expected behavior: Show ALL members (no __all__ defined)")
+    expected_result = "show all members"
+elif not __all__:
+    print("Expected behavior: Show NO members (empty __all__)")
+    expected_result = "show no members"
+else:
+    print(f"Expected behavior: Show only {__all__} members")
+    expected_result = f"show only {__all__} members"
+
+print(f"\nAccording to the GitHub issue, with empty __all__ = [],")
+print("the expected behavior is: NO entries should be shown")
+
+if not __all__ and __all__ is not None:
+    print("✓ Our fix correctly handles empty __all__")
+    print("✓ Empty __all__ will result in no members being shown")
+else:
+    print("✗ Something is wrong with the test setup")
+
+print(f"\nTest result: {expected_result}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..ebbbf3236
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+
+# Create the example module
+with open('example.py', 'w') as f:
+    f.write('''__all__ = []
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+''')
+
+# Create a simple test to check what get_object_members returns
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.ext.autodoc.directive import process_documenter_options
+from sphinx.application import Sphinx
+from sphinx.config import Config
+from sphinx.environment import BuildEnvironment
+from sphinx.util.docutils import docutils_namespace
+
+# Mock minimal environment for testing
+class MockApp:
+    def __init__(self):
+        self.config = Config({}, {}, {})
+        self.registry = type('Registry', (), {'source_parsers': {}})()
+        self.events = type('Events', (), {'connect': lambda *args: None})()
+
+class MockEnv:
+    def __init__(self):
+        self.app = MockApp()
+        self.temp_data = {}
+        self.domaindata = {}
+
+# Import the example module
+import example
+
+# Create a documenter instance
+documenter = ModuleDocumenter(None, 'example')
+documenter.object = example
+documenter.modname = 'example'
+documenter.objpath = []
+documenter.options = type('Options', (), {'members': None})()
+
+# Get __all__ value
+documenter.__all__ = getattr(example, '__all__', None)
+print(f"__all__ value: {documenter.__all__}")
+print(f"__all__ type: {type(documenter.__all__)}")
+print(f"__all__ is empty: {not documenter.__all__}")
+
+# Test get_object_members
+want_all = True  # This is what happens with :members: option
+try:
+    show_all, members = documenter.get_object_members(want_all)
+    print(f"show_all: {show_all}")
+    print(f"Number of members returned: {len(members)}")
+    for member in members:
+        print(f"  - {member.__name__} (skipped: {getattr(member, 'skipped', False)})")
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 000000000..f9b4a37cb
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+# Create the example module
+with open('example.py', 'w') as f:
+    f.write('''__all__ = []
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+''')
+
+# Import the example module
+import example
+
+# Test the logic from get_object_members method
+__all__ = getattr(example, '__all__', None)
+print(f"__all__ value: {__all__}")
+print(f"__all__ type: {type(__all__)}")
+print(f"not __all__: {not __all__}")
+
+# This is the problematic logic from line 1077
+if not __all__:
+    print("Empty __all__ detected - should return all members (current bug)")
+else:
+    print("Non-empty __all__ detected - should filter members")
+
+# Test with different __all__ values
+test_values = [
+    [],
+    ['foo'],
+    None
+]
+
+for test_value in test_values:
+    print(f"\nTesting with __all__ = {test_value}")
+    print(f"not test_value: {not test_value}")
+    if not test_value:
+        print("  -> Would return all members (bug if empty list)")
+    else:
+        print("  -> Would filter members")
\ No newline at end of file
diff --git a/simple_test_fix.py b/simple_test_fix.py
new file mode 100644
index 000000000..0251359f0
--- /dev/null
+++ b/simple_test_fix.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+# Test the fixed logic directly
+def test_get_object_members_logic(__all__, members):
+    """
+    Test the logic from get_object_members method
+    """
+    print(f"Testing with __all__ = {__all__}")
+    print(f"Available members: {[m for m in members]}")
+    
+    # The fixed logic
+    if __all__ is None:
+        print("Result: show_all=True, return all members (no __all__ defined)")
+        return True, members
+    elif not __all__:
+        print("Result: show_all=False, return no members (empty __all__)")
+        return False, []
+    else:
+        print(f"Result: show_all=False, filter members to {__all__}")
+        filtered_members = [m for m in members if m in __all__]
+        return False, filtered_members
+
+# Test cases
+test_cases = [
+    (None, ['foo', 'bar']),      # No __all__ defined
+    ([], ['foo', 'bar']),        # Empty __all__
+    (['foo'], ['foo', 'bar']),   # __all__ with one member
+]
+
+print("Testing the fixed logic:")
+print("=" * 50)
+
+for i, (__all__, members) in enumerate(test_cases):
+    print(f"\nTest case {i+1}:")
+    show_all, result_members = test_get_object_members_logic(__all__, members)
+    print(f"show_all: {show_all}")
+    print(f"result_members: {result_members}")
+    
+    # Verify expected results
+    if __all__ is None:
+        expected_show_all = True
+        expected_members = members
+    elif not __all__:
+        expected_show_all = False
+        expected_members = []
+    else:
+        expected_show_all = False
+        expected_members = [m for m in members if m in __all__]
+    
+    if show_all == expected_show_all and result_members == expected_members:
+        print("✓ PASS")
+    else:
+        print("✗ FAIL")
+        print(f"Expected: show_all={expected_show_all}, members={expected_members}")
+
+print("\n" + "=" * 50)
+print("Testing complete!")
\ No newline at end of file
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index d85d79617..ad60a6db9 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1074,10 +1074,13 @@ class ModuleDocumenter(Documenter):
     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         members = self.get_module_members()
         if want_all:
-            if not self.__all__:
+            if self.__all__ is None:
                 # for implicit module members, check __module__ to avoid
                 # documenting imported objects
                 return True, list(members.values())
+            elif not self.__all__:
+                # empty __all__ means no members should be documented
+                return False, []
             else:
                 for member in members.values():
                     if member.__name__ not in self.__all__:
diff --git a/test_autodoc_empty_all.py b/test_autodoc_empty_all.py
new file mode 100644
index 000000000..cee943f58
--- /dev/null
+++ b/test_autodoc_empty_all.py
@@ -0,0 +1,132 @@
+#!/usr/bin/env python3
+
+# Test the actual autodoc behavior with empty __all__
+import sys
+import os
+sys.path.insert(0, '.')
+
+# Create test modules
+with open('test_module_empty.py', 'w') as f:
+    f.write('''__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+''')
+
+with open('test_module_none.py', 'w') as f:
+    f.write('''# No __all__ defined
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+''')
+
+with open('test_module_with_members.py', 'w') as f:
+    f.write('''__all__ = ['foo']
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+''')
+
+# Import the modules
+import test_module_empty
+import test_module_none
+import test_module_with_members
+
+# Test the get_object_members logic directly
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.ext.autodoc.directive import process_documenter_options
+from sphinx.application import Sphinx
+from sphinx.config import Config
+from sphinx.environment import BuildEnvironment
+from sphinx.util.docutils import docutils_namespace
+
+# Mock minimal environment
+class MockApp:
+    def __init__(self):
+        self.config = Config({}, {}, {})
+        self.registry = type('Registry', (), {'source_parsers': {}})()
+        self.events = type('Events', (), {'connect': lambda *args: None})()
+
+class MockEnv:
+    def __init__(self):
+        self.app = MockApp()
+        self.temp_data = {}
+        self.domaindata = {}
+
+# Test function
+def test_module_members(module, name):
+    print(f"\n=== Testing {name} ===")
+    
+    # Create a documenter instance
+    documenter = ModuleDocumenter.__new__(ModuleDocumenter)
+    documenter.object = module
+    documenter.modname = module.__name__
+    documenter.objpath = []
+    documenter.options = type('Options', (), {'members': None})()
+    
+    # Get __all__ value
+    documenter.__all__ = getattr(module, '__all__', None)
+    print(f"__all__: {documenter.__all__}")
+    
+    # Get module members
+    members = documenter.get_module_members()
+    print(f"Available members: {[m.__name__ for m in members.values()]}")
+    
+    # Test get_object_members with want_all=True (like :members: option)
+    want_all = True
+    try:
+        show_all, result_members = documenter.get_object_members(want_all)
+        print(f"show_all: {show_all}")
+        print(f"Number of returned members: {len(result_members)}")
+        print(f"Members: {[m.__name__ for m in result_members]}")
+        
+        if not documenter.__all__:
+            if documenter.__all__ is None:
+                print("Expected: show_all=True, all members (no __all__)")
+                expected_show_all = True
+                expected_member_count = len(members)
+            else:  # empty list
+                print("Expected: show_all=False, no members (empty __all__)")
+                expected_show_all = False
+                expected_member_count = 0
+        else:
+            print(f"Expected: show_all=False, filtered members ({documenter.__all__})")
+            expected_show_all = False
+            expected_member_count = len([m for m in members.values() if m.__name__ in documenter.__all__])
+        
+        # Check results
+        if show_all == expected_show_all and len(result_members) == expected_member_count:
+            print("✓ PASS")
+            return True
+        else:
+            print("✗ FAIL")
+            return False
+            
+    except Exception as e:
+        print(f"Error: {e}")
+        import traceback
+        traceback.print_exc()
+        return False
+
+# Run tests
+results = []
+results.append(test_module_members(test_module_empty, "Empty __all__"))
+results.append(test_module_members(test_module_none, "No __all__"))
+results.append(test_module_members(test_module_with_members, "__all__ = ['foo']"))
+
+print(f"\n=== Summary ===")
+print(f"Passed: {sum(results)}/{len(results)}")
+
+if all(results):
+    print("All tests passed! The fix is working correctly.")
+else:
+    print("Some tests failed!")
\ No newline at end of file
diff --git a/test_empty_all.py b/test_empty_all.py
new file mode 100644
index 000000000..81a86ac45
--- /dev/null
+++ b/test_empty_all.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+# Create test modules with empty __all__
+with open('empty_all_module.py', 'w') as f:
+    f.write('''__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+''')
+
+# Import the module
+import empty_all_module
+
+# Test the fixed logic
+def test_empty_all():
+    __all__ = getattr(empty_all_module, '__all__', None)
+    print(f"__all__ value: {__all__}")
+    print(f"__all__ type: {type(__all__)}")
+    print(f"__all__ is None: {__all__ is None}")
+    print(f"__all__ is empty: {not __all__}")
+    
+    # Test the fixed logic
+    if __all__ is None:
+        print("Result: Should show ALL members (no __all__ defined)")
+        return True, ["all members"]
+    elif not __all__:
+        print("Result: Should show NO members (empty __all__)")
+        return False, []
+    else:
+        print(f"Result: Should show only {__all__} members")
+        return False, ["filtered members"]
+
+# Test the function
+show_all, members = test_empty_all()
+print(f"show_all: {show_all}")
+print(f"members: {members}")
+print(f"Number of members: {len(members)}")
+
+# This should return False, [] for empty __all__
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..cdf8ea527
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+# Create test modules with different __all__ scenarios
+with open('module_none.py', 'w') as f:
+    f.write('''# No __all__ defined
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+''')
+
+with open('module_empty.py', 'w') as f:
+    f.write('''__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+''')
+
+with open('module_with_members.py', 'w') as f:
+    f.write('''__all__ = ['foo']
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+''')
+
+# Import the modules
+import module_none
+import module_empty
+import module_with_members
+
+# Test the logic from get_object_members method
+def test_module(module, name):
+    print(f"\n=== Testing {name} ===")
+    __all__ = getattr(module, '__all__', None)
+    print(f"__all__ value: {__all__}")
+    print(f"__all__ type: {type(__all__)}")
+    print(f"__all__ is None: {__all__ is None}")
+    print(f"__all__ is empty: {not __all__}")
+    
+    # Test the fixed logic
+    if __all__ is None:
+        print("Result: Should show ALL members (no __all__ defined)")
+    elif not __all__:
+        print("Result: Should show NO members (empty __all__)")
+    else:
+        print(f"Result: Should show only {__all__} members")
+
+# Test all scenarios
+test_module(module_none, "module_none (no __all__)")
+test_module(module_empty, "module_empty (empty __all__)")
+test_module(module_with_members, "module_with_members (__all__ = ['foo'])")
\ No newline at end of file
diff --git a/test_module_empty.py b/test_module_empty.py
new file mode 100644
index 000000000..633cd3c4f
--- /dev/null
+++ b/test_module_empty.py
@@ -0,0 +1,7 @@
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
diff --git a/test_module_none.py b/test_module_none.py
new file mode 100644
index 000000000..63478ef04
--- /dev/null
+++ b/test_module_none.py
@@ -0,0 +1,7 @@
+# No __all__ defined
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
diff --git a/test_module_with_members.py b/test_module_with_members.py
new file mode 100644
index 000000000..e47aa1b1d
--- /dev/null
+++ b/test_module_with_members.py
@@ -0,0 +1,7 @@
+__all__ = ['foo']
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
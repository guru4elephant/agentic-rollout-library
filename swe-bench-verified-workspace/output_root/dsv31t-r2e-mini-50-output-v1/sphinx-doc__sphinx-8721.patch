diff --git a/debug_viewcode.py b/debug_viewcode.py
new file mode 100644
index 000000000..cfe92940c
--- /dev/null
+++ b/debug_viewcode.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def debug_viewcode():
+    """Debug viewcode behavior for epub builds"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create a conf.py with viewcode_enable_epub=True
+        conf_content = '''
+import os
+import sys
+
+source_dir = os.path.abspath('.')
+if source_dir not in sys.path:
+    sys.path.insert(0, source_dir)
+extensions = ['sphinx.ext.viewcode']
+exclude_patterns = ['_build']
+viewcode_enable_epub = True
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create an index.rst with Python objects that should trigger viewcode
+        index_content = '''
+Test Document
+=============
+
+.. py:function:: spam.mod1.func1()
+
+   A test function.
+
+.. py:class:: spam.mod1.Class1()
+
+   A test class.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create the spam module structure like in the test
+        os.makedirs(os.path.join(srcdir, 'spam'))
+        
+        # Create __init__.py
+        init_content = '''
+"""A test package."""
+'''
+        
+        with open(os.path.join(srcdir, 'spam', '__init__.py'), 'w') as f:
+            f.write(init_content)
+        
+        # Create mod1.py
+        mod1_content = '''
+def func1():
+    """A test function."""
+    pass
+
+class Class1:
+    """A test class."""
+    pass
+'''
+        
+        with open(os.path.join(srcdir, 'spam', 'mod1.py'), 'w') as f:
+            f.write(mod1_content)
+        
+        # Build with epub builder and check if _viewcode_modules is populated
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'epub')
+            app.build()
+            
+            # Check if _viewcode_modules was populated
+            env = app.builder.env
+            if hasattr(env, '_viewcode_modules'):
+                print("_viewcode_modules exists:", env._viewcode_modules)
+            else:
+                print("_viewcode_modules does not exist")
+                
+            # Check if viewcode pages were created when viewcode_enable_epub=True
+            modules_dir = os.path.join(outdir, '_modules')
+            if os.path.exists(modules_dir):
+                print("SUCCESS: Viewcode created pages for epub when viewcode_enable_epub=True")
+                print("Contents of _modules directory:", os.listdir(modules_dir))
+            else:
+                print("ERROR: No viewcode pages created even when viewcode_enable_epub=True")
+
+if __name__ == '__main__':
+    debug_viewcode()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..81a51cffd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_issue():
+    """Reproduce the issue where viewcode creates pages for epub even when viewcode_enable_epub=False"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple conf.py
+        conf_content = '''
+extensions = ['sphinx.ext.viewcode']
+viewcode_enable_epub = False
+master_doc = 'index'
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create a simple index.rst
+        index_content = '''
+Test Document
+=============
+
+.. py:function:: test_module.test_function()
+
+   A test function.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create a simple Python module
+        os.makedirs(os.path.join(srcdir, 'test_module'))
+        
+        module_content = '''
+def test_function():
+    """A test function."""
+    pass
+'''
+        
+        with open(os.path.join(srcdir, 'test_module', '__init__.py'), 'w') as f:
+            f.write(module_content)
+        
+        # Add the source directory to Python path so the module can be imported
+        import sys
+        sys.path.insert(0, srcdir)
+        
+        # Build with epub builder
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if viewcode pages were created despite viewcode_enable_epub=False
+        modules_dir = os.path.join(outdir, '_modules')
+        if os.path.exists(modules_dir):
+            print("ISSUE REPRODUCED: Viewcode created pages for epub even when viewcode_enable_epub=False")
+            print("Contents of _modules directory:", os.listdir(modules_dir))
+        else:
+            print("No viewcode pages created - this is the expected behavior")
+
+if __name__ == '__main__':
+    test_viewcode_epub_issue()
\ No newline at end of file
diff --git a/reproduce_issue2.py b/reproduce_issue2.py
new file mode 100644
index 000000000..6c306eb53
--- /dev/null
+++ b/reproduce_issue2.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_issue():
+    """Reproduce the issue where viewcode creates pages for epub even when viewcode_enable_epub=False"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create a conf.py similar to the test
+        conf_content = '''
+import os
+import sys
+
+source_dir = os.path.abspath('.')
+if source_dir not in sys.path:
+    sys.path.insert(0, source_dir)
+extensions = ['sphinx.ext.viewcode']
+exclude_patterns = ['_build']
+viewcode_enable_epub = False
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create an index.rst with Python objects that should trigger viewcode
+        index_content = '''
+Test Document
+=============
+
+.. py:function:: spam.mod1.func1()
+
+   A test function.
+
+.. py:class:: spam.mod1.Class1()
+
+   A test class.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create the spam module structure like in the test
+        os.makedirs(os.path.join(srcdir, 'spam'))
+        
+        # Create __init__.py
+        init_content = '''
+"""A test package."""
+'''
+        
+        with open(os.path.join(srcdir, 'spam', '__init__.py'), 'w') as f:
+            f.write(init_content)
+        
+        # Create mod1.py
+        mod1_content = '''
+def func1():
+    """A test function."""
+    pass
+
+class Class1:
+    """A test class."""
+    pass
+'''
+        
+        with open(os.path.join(srcdir, 'spam', 'mod1.py'), 'w') as f:
+            f.write(mod1_content)
+        
+        # Build with epub builder
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if viewcode pages were created despite viewcode_enable_epub=False
+        modules_dir = os.path.join(outdir, '_modules')
+        if os.path.exists(modules_dir):
+            print("ISSUE REPRODUCED: Viewcode created pages for epub even when viewcode_enable_epub=False")
+            print("Contents of _modules directory:", os.listdir(modules_dir))
+        else:
+            print("No viewcode pages created - this is the expected behavior")
+
+if __name__ == '__main__':
+    test_viewcode_epub_issue()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py
index a7d52a91c..060604e25 100644
--- a/sphinx/ext/viewcode.py
+++ b/sphinx/ext/viewcode.py
@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
     env = app.builder.env
     if not hasattr(env, '_viewcode_modules'):
         return
+    if app.builder.name.startswith("epub") and not env.config.viewcode_enable_epub:
+        return
     highlighter = app.builder.highlighter  # type: ignore
     urito = app.builder.get_relative_uri
 
diff --git a/test_epub_enabled.py b/test_epub_enabled.py
new file mode 100644
index 000000000..12b7cbe8c
--- /dev/null
+++ b/test_epub_enabled.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_enabled():
+    """Test that viewcode creates pages for epub when viewcode_enable_epub=True"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create a conf.py with viewcode_enable_epub=True
+        conf_content = '''
+import os
+import sys
+
+source_dir = os.path.abspath('.')
+if source_dir not in sys.path:
+    sys.path.insert(0, source_dir)
+extensions = ['sphinx.ext.viewcode']
+exclude_patterns = ['_build']
+viewcode_enable_epub = True
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create an index.rst with Python objects that should trigger viewcode
+        index_content = '''
+Test Document
+=============
+
+.. py:function:: spam.mod1.func1()
+
+   A test function.
+
+.. py:class:: spam.mod1.Class1()
+
+   A test class.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create the spam module structure like in the test
+        os.makedirs(os.path.join(srcdir, 'spam'))
+        
+        # Create __init__.py
+        init_content = '''
+"""A test package."""
+'''
+        
+        with open(os.path.join(srcdir, 'spam', '__init__.py'), 'w') as f:
+            f.write(init_content)
+        
+        # Create mod1.py
+        mod1_content = '''
+def func1():
+    """A test function."""
+    pass
+
+class Class1:
+    """A test class."""
+    pass
+'''
+        
+        with open(os.path.join(srcdir, 'spam', 'mod1.py'), 'w') as f:
+            f.write(mod1_content)
+        
+        # Build with epub builder
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if viewcode pages were created when viewcode_enable_epub=True
+        modules_dir = os.path.join(outdir, '_modules')
+        if os.path.exists(modules_dir):
+            print("SUCCESS: Viewcode created pages for epub when viewcode_enable_epub=True")
+            print("Contents of _modules directory:", os.listdir(modules_dir))
+        else:
+            print("ERROR: No viewcode pages created even when viewcode_enable_epub=True")
+
+if __name__ == '__main__':
+    test_viewcode_epub_enabled()
\ No newline at end of file
diff --git a/test_epub_viewcode.py b/test_epub_viewcode.py
new file mode 100644
index 000000000..199dcad3d
--- /dev/null
+++ b/test_epub_viewcode.py
@@ -0,0 +1,189 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_epub_viewcode_disabled():
+    """Test that viewcode does NOT create pages for epub when viewcode_enable_epub=False"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create a conf.py with viewcode_enable_epub=False
+        conf_content = '''
+import os
+import sys
+
+source_dir = os.path.abspath('.')
+if source_dir not in sys.path:
+    sys.path.insert(0, source_dir)
+extensions = ['sphinx.ext.viewcode']
+exclude_patterns = ['_build']
+viewcode_enable_epub = False
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create an index.rst with Python objects that should trigger viewcode
+        index_content = '''
+Test Document
+=============
+
+.. py:function:: spam.mod1.func1()
+
+   A test function.
+
+.. py:class:: spam.mod1.Class1()
+
+   A test class.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create the spam module structure like in the test
+        os.makedirs(os.path.join(srcdir, 'spam'))
+        
+        # Create __init__.py
+        init_content = '''
+"""A test package."""
+'''
+        
+        with open(os.path.join(srcdir, 'spam', '__init__.py'), 'w') as f:
+            f.write(init_content)
+        
+        # Create mod1.py
+        mod1_content = '''
+def func1():
+    """A test function."""
+    pass
+
+class Class1:
+    """A test class."""
+    pass
+'''
+        
+        with open(os.path.join(srcdir, 'spam', 'mod1.py'), 'w') as f:
+            f.write(mod1_content)
+        
+        # Build with epub builder
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check that viewcode pages were NOT created despite having Python objects
+        modules_dir = os.path.join(outdir, '_modules')
+        if not os.path.exists(modules_dir):
+            print("SUCCESS: Viewcode did NOT create pages for epub when viewcode_enable_epub=False")
+            return True
+        else:
+            print("FAILURE: Viewcode created pages for epub even when viewcode_enable_epub=False")
+            print("Contents of _modules directory:", os.listdir(modules_dir))
+            return False
+
+def test_epub_viewcode_enabled():
+    """Test that viewcode DOES create pages for epub when viewcode_enable_epub=True"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create a conf.py with viewcode_enable_epub=True
+        conf_content = '''
+import os
+import sys
+
+source_dir = os.path.abspath('.')
+if source_dir not in sys.path:
+    sys.path.insert(0, source_dir)
+extensions = ['sphinx.ext.viewcode']
+exclude_patterns = ['_build']
+viewcode_enable_epub = True
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create an index.rst with Python objects that should trigger viewcode
+        index_content = '''
+Test Document
+=============
+
+.. py:function:: spam.mod1.func1()
+
+   A test function.
+
+.. py:class:: spam.mod1.Class1()
+
+   A test class.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create the spam module structure like in the test
+        os.makedirs(os.path.join(srcdir, 'spam'))
+        
+        # Create __init__.py
+        init_content = '''
+"""A test package."""
+'''
+        
+        with open(os.path.join(srcdir, 'spam', '__init__.py'), 'w') as f:
+            f.write(init_content)
+        
+        # Create mod1.py
+        mod1_content = '''
+def func1():
+    """A test function."""
+    pass
+
+class Class1:
+    """A test class."""
+    pass
+'''
+        
+        with open(os.path.join(srcdir, 'spam', 'mod1.py'), 'w') as f:
+            f.write(mod1_content)
+        
+        # Build with epub builder
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check that viewcode pages WERE created when viewcode_enable_epub=True
+        modules_dir = os.path.join(outdir, '_modules')
+        if os.path.exists(modules_dir):
+            print("SUCCESS: Viewcode created pages for epub when viewcode_enable_epub=True")
+            print("Contents of _modules directory:", os.listdir(modules_dir))
+            return True
+        else:
+            print("FAILURE: Viewcode did NOT create pages for epub even when viewcode_enable_epub=True")
+            return False
+
+if __name__ == '__main__':
+    print("Testing epub viewcode disabled...")
+    result1 = test_epub_viewcode_disabled()
+    
+    print("\nTesting epub viewcode enabled...")
+    result2 = test_epub_viewcode_enabled()
+    
+    if result1 and result2:
+        print("\nALL TESTS PASSED: Fix is working correctly!")
+    else:
+        print("\nSOME TESTS FAILED: Fix needs more work!")
\ No newline at end of file
diff --git a/test_html_build.py b/test_html_build.py
new file mode 100644
index 000000000..33d3e6fc3
--- /dev/null
+++ b/test_html_build.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_html_build():
+    """Test viewcode with HTML builder"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create a conf.py
+        conf_content = '''
+import os
+import sys
+
+source_dir = os.path.abspath('.')
+if source_dir not in sys.path:
+    sys.path.insert(0, source_dir)
+extensions = ['sphinx.ext.viewcode']
+exclude_patterns = ['_build']
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create an index.rst with Python objects that should trigger viewcode
+        index_content = '''
+Test Document
+=============
+
+.. py:function:: spam.mod1.func1()
+
+   A test function.
+
+.. py:class:: spam.mod1.Class1()
+
+   A test class.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create the spam module structure like in the test
+        os.makedirs(os.path.join(srcdir, 'spam'))
+        
+        # Create __init__.py
+        init_content = '''
+"""A test package."""
+'''
+        
+        with open(os.path.join(srcdir, 'spam', '__init__.py'), 'w') as f:
+            f.write(init_content)
+        
+        # Create mod1.py
+        mod1_content = '''
+def func1():
+    """A test function."""
+    pass
+
+class Class1:
+    """A test class."""
+    pass
+'''
+        
+        with open(os.path.join(srcdir, 'spam', 'mod1.py'), 'w') as f:
+            f.write(mod1_content)
+        
+        # Build with HTML builder and check if _viewcode_modules is populated
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'html')
+            app.build()
+            
+            # Check if _viewcode_modules was populated
+            env = app.builder.env
+            if hasattr(env, '_viewcode_modules'):
+                print("_viewcode_modules exists:", env._viewcode_modules)
+            else:
+                print("_viewcode_modules does not exist")
+                
+            # Check if viewcode pages were created
+            modules_dir = os.path.join(outdir, '_modules')
+            if os.path.exists(modules_dir):
+                print("SUCCESS: Viewcode created pages for HTML")
+                print("Contents of _modules directory:", os.listdir(modules_dir))
+            else:
+                print("ERROR: No viewcode pages created for HTML")
+
+if __name__ == '__main__':
+    test_html_build()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 21a0faec3..be1a9127e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
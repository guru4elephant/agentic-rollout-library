diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8c9df04040
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+print("Testing the issue with cython backend...")
+
+# Test case 1: Array argument that doesn't appear in expression (should fail)
+print("\nTest case 1: Array argument not in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+try:
+    f = autowrap(expr, args=(x,), backend='cython')
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+    print("SUCCESS: No error occurred")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test case 2: Array argument that appears in expression (should work)
+print("\nTest case 2: Array argument in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = x[0,0]
+try:
+    f = autowrap(expr, args=(x,), backend='cython')
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+    print("SUCCESS: Worked as expected")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test case 3: Multiple array arguments, some not in expression
+print("\nTest case 3: Multiple array arguments, some not used")
+x = MatrixSymbol('x', 2, 1)
+y = MatrixSymbol('y', 2, 1)
+expr = x[0,0]  # Only uses x, not y
+try:
+    f = autowrap(expr, args=(x, y), backend='cython')
+    result = f(np.array([[1.0, 2.0]]), np.array([[3.0, 4.0]]))
+    print(f"Result: {result}")
+    print("SUCCESS: No error occurred")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..87679f2410 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -739,7 +739,16 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    # If the symbol is a MatrixSymbol and doesn't appear in the expression,
+                    # we still need to create it with the proper dimensions
+                    if isinstance(symbol, MatrixSymbol):
+                        dims = []
+                        for dim in symbol.shape:
+                            dims.append((S.Zero, dim - 1))
+                        metadata = {'dimensions': dims}
+                        new_args.append(InputArgument(symbol, **metadata))
+                    else:
+                        new_args.append(InputArgument(symbol))
             arg_list = new_args
 
         return Routine(name, arg_list, return_val, local_vars, global_vars)
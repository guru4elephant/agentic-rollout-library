diff --git a/check_negative_one.py b/check_negative_one.py
new file mode 100644
index 0000000000..a315226284
--- /dev/null
+++ b/check_negative_one.py
@@ -0,0 +1,12 @@
+from sympy import *
+A = MatrixSymbol('A', 2, 2)
+
+# Check what S.NegativeOne is
+print("S.NegativeOne:", S.NegativeOne)
+print("Type of S.NegativeOne:", type(S.NegativeOne))
+print("S.NegativeOne == -1:", S.NegativeOne == -1)
+
+# Test if we can detect -1 in MatMul
+neg_A = -A
+print("neg_A.args[0] == S.NegativeOne:", neg_A.args[0] == S.NegativeOne)
+print("neg_A.args[0] == -1:", neg_A.args[0] == -1)
\ No newline at end of file
diff --git a/debug_negation.py b/debug_negation.py
new file mode 100644
index 0000000000..074e5fdc00
--- /dev/null
+++ b/debug_negation.py
@@ -0,0 +1,22 @@
+from sympy import *
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+
+# Test negation
+neg_A = -A
+print("Type of -A:", type(neg_A))
+print("Args of -A:", neg_A.args)
+print("Print of -A:", str(neg_A))
+
+# Test multiplication with -1
+mul_neg_A = S.NegativeOne * A
+print("Type of -1*A:", type(mul_neg_A))
+print("Args of -1*A:", mul_neg_A.args)
+print("Print of -1*A:", str(mul_neg_A))
+
+# Test the actual expression
+expr = A - A*B - B
+print("Expression:", expr)
+print("Expression args:", expr.args)
+for i, arg in enumerate(expr.args):
+    print(f"Arg {i}: {arg} (type: {type(arg)})")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7a42f5f6e4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+from sympy import *
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+
+print("Str printer:")
+print(A - A*B - B)
+
+print("\nPretty printer:")
+pprint(A - A*B - B)
+
+print("\nLatex printer:")
+print(latex(A - A*B - B))
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..6565067215 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1484,11 +1484,22 @@ def _print_MatAdd(self, expr):
     def _print_MatMul(self, expr):
         from sympy import Add, MatAdd, HadamardProduct
 
-        def parens(x):
-            if isinstance(x, (Add, MatAdd, HadamardProduct)):
-                return r"\left(%s\right)" % self._print(x)
-            return self._print(x)
-        return ' '.join(map(parens, expr.args))
+        # Handle the special case where the first argument is -1
+        # This should print as negative rather than (-1)*...
+        if len(expr.args) >= 2 and expr.args[0] == S.NegativeOne:
+            # For -1 * A * B, we want to print as -A*B
+            remaining_args = expr.args[1:]
+            def parens(x):
+                if isinstance(x, (Add, MatAdd, HadamardProduct)):
+                    return r"\left(%s\right)" % self._print(x)
+                return self._print(x)
+            return '-' + ' '.join(map(parens, remaining_args))
+        else:
+            def parens(x):
+                if isinstance(x, (Add, MatAdd, HadamardProduct)):
+                    return r"\left(%s\right)" % self._print(x)
+                return self._print(x)
+            return ' '.join(map(parens, expr.args))
 
     def _print_Mod(self, expr, exp=None):
         if exp is not None:
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..184dbf0c17 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,7 +819,10 @@ def _print_BlockMatrix(self, B):
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        # Handle negative terms properly by using the string representation
+        # and converting back to pretty form
+        from sympy.printing.str import sstr
+        return self._print(sstr(expr))
 
     def _print_MatMul(self, expr):
         args = list(expr.args)
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..2fa52e7d8d 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -304,8 +304,20 @@ def _print_Mul(self, expr):
             return sign + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
 
     def _print_MatMul(self, expr):
-        return '*'.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        # Handle the special case where the first argument is -1
+        # This should print as negative rather than (-1)*...
+        if len(expr.args) >= 2 and expr.args[0] == S.NegativeOne:
+            # For -1 * A * B, we want to print as -A*B
+            remaining_args = expr.args[1:]
+            if len(remaining_args) == 1:
+                return '-' + self.parenthesize(remaining_args[0], precedence(expr))
+            else:
+                # Use the original method but skip the first argument (-1)
+                return '-' + '*'.join([self.parenthesize(arg, precedence(expr))
+                    for arg in remaining_args])
+        else:
+            return '*'.join([self.parenthesize(arg, precedence(expr))
+                for arg in expr.args])
 
     def _print_HadamardProduct(self, expr):
         return '.*'.join([self.parenthesize(arg, precedence(expr))
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4ec0efb1e6
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,30 @@
+from sympy import *
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+C = MatrixSymbol('C', 2, 2)
+
+# Test simple negation
+print("Simple negation:")
+print("-A =", str(-A))
+pprint(-A)
+print("latex(-A) =", latex(-A))
+
+# Test double negation
+print("\nDouble negation:")
+print("--A =", str(-(-A)))
+pprint(-(-A))
+print("latex(--A) =", latex(-(-A)))
+
+# Test more complex expressions
+print("\nComplex expression:")
+expr = A - B + C - A*B
+print("A - B + C - A*B =", str(expr))
+pprint(expr)
+print("latex(A - B + C - A*B) =", latex(expr))
+
+# Test with parentheses
+print("\nWith parentheses:")
+expr = (A - B) * C
+print("(A - B) * C =", str(expr))
+pprint(expr)
+print("latex((A - B) * C) =", latex(expr))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..280db59628
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, Rational, expand_func, pi, log, nsimplify
+from sympy import symbols
+
+# Test case from the GitHub issue
+print("Testing polylog(2, 1/2) expansion:")
+result1 = polylog(2, Rational(1, 2))
+print("polylog(2, 1/2) =", result1)
+
+result2 = polylog(2, Rational(1, 2)).expand(func=True)
+print("polylog(2, 1/2).expand(func=True) =", result2)
+
+# The expected result should be -log(2)**2/2 + pi**2/12
+expected = -log(2)**2/2 + pi**2/12
+print("Expected result:", expected)
+
+# Test the current expansion of polylog(1, z)
+print("\nTesting polylog(1, z) expansion:")
+z = symbols('z')
+result3 = expand_func(polylog(1, z))
+print("expand_func(polylog(1, z)) =", result3)
+
+# The issue mentions this should be -log(1 - z) instead of -log(z*exp_polar(-I*pi) + 1)
+expected_simple = -log(1 - z)
+print("Expected simple form:", expected_simple)
+
+# Test derivative consistency
+print("\nTesting derivative consistency:")
+from sympy import diff
+expr1 = polylog(1, z) + log(1 - z)
+expr2 = polylog(1, z) - expand_func(polylog(1, z))
+
+print("diff(polylog(1, z) + log(1 - z), z) =", diff(expr1, z))
+print("diff(polylog(1, z) - expand_func(polylog(1, z)), z) =", diff(expr2, z))
\ No newline at end of file
diff --git a/sympy/functions/special/tests/test_zeta_functions.py b/sympy/functions/special/tests/test_zeta_functions.py
index 3911dadd10..494a387772 100644
--- a/sympy/functions/special/tests/test_zeta_functions.py
+++ b/sympy/functions/special/tests/test_zeta_functions.py
@@ -128,7 +128,7 @@ def test_polylog_expansion():
     assert polylog(s, 1) == zeta(s)
     assert polylog(s, -1) == -dirichlet_eta(s)
 
-    assert myexpand(polylog(1, z), -log(1 + exp_polar(-I*pi)*z))
+    assert myexpand(polylog(1, z), -log(1 - z))
     assert myexpand(polylog(0, z), z/(1 - z))
     assert myexpand(polylog(-1, z), z**2/(1 - z)**2 + z/(1 - z))
     assert myexpand(polylog(-5, z), None)
diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py
index b8e2b66195..fe5a5253ef 100644
--- a/sympy/functions/special/zeta_functions.py
+++ b/sympy/functions/special/zeta_functions.py
@@ -291,7 +291,7 @@ def _eval_expand_func(self, **hints):
         from sympy import log, expand_mul, Dummy, exp_polar, I
         s, z = self.args
         if s == 1:
-            return -log(1 + exp_polar(-I*pi)*z)
+            return -log(1 - z)
         if s.is_Integer and s <= 0:
             u = Dummy('u')
             start = u/(1 - u)
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0eea28c127
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, expand_func, symbols, log, I, pi, exp_polar
+
+# Test edge cases for polylog(1, z) expansion
+z = symbols('z')
+
+print("Testing edge cases for polylog(1, z) expansion:")
+
+# Test basic cases
+print("expand_func(polylog(1, 0)) =", expand_func(polylog(1, 0)))
+print("expand_func(polylog(1, 1)) =", expand_func(polylog(1, 1)))
+print("expand_func(polylog(1, -1)) =", expand_func(polylog(1, -1)))
+print("expand_func(polylog(1, 2)) =", expand_func(polylog(1, 2)))
+
+# Test complex cases
+print("expand_func(polylog(1, I)) =", expand_func(polylog(1, I)))
+print("expand_func(polylog(1, -I)) =", expand_func(polylog(1, -I)))
+
+# Test that the result doesn't contain exp_polar
+result = expand_func(polylog(1, z))
+print("Does the result contain exp_polar?", result.has(exp_polar))
+
+# Test numerical evaluation consistency
+from sympy import N
+test_values = [0.5, 1.5, -0.5, 2.0, 0.0]
+for val in test_values:
+    original = polylog(1, val)
+    expanded = expand_func(polylog(1, val))
+    print(f"Value {val}: original={N(original)}, expanded={N(expanded)}, equal={N(original) == N(expanded)}")
\ No newline at end of file
diff --git a/test_polylog_cases.py b/test_polylog_cases.py
new file mode 100644
index 0000000000..78e05a74c2
--- /dev/null
+++ b/test_polylog_cases.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, Rational, expand_func, pi, log, nsimplify
+from sympy import symbols, S
+
+# Test various polylog cases to understand current behavior
+print("Testing polylog expansion for various cases:")
+
+z = symbols('z')
+
+# Test s=1 cases
+print("\n=== s=1 cases ===")
+print("expand_func(polylog(1, z)) =", expand_func(polylog(1, z)))
+print("expand_func(polylog(1, 0)) =", expand_func(polylog(1, 0)))
+print("expand_func(polylog(1, 1)) =", expand_func(polylog(1, 1)))
+print("expand_func(polylog(1, -1)) =", expand_func(polylog(1, -1)))
+print("expand_func(polylog(1, Rational(1,2))) =", expand_func(polylog(1, Rational(1,2))))
+
+# Test s=2 cases
+print("\n=== s=2 cases ===")
+print("expand_func(polylog(2, z)) =", expand_func(polylog(2, z)))
+print("expand_func(polylog(2, 0)) =", expand_func(polylog(2, 0)))
+print("expand_func(polylog(2, 1)) =", expand_func(polylog(2, 1)))
+print("expand_func(polylog(2, -1)) =", expand_func(polylog(2, -1)))
+print("expand_func(polylog(2, Rational(1,2))) =", expand_func(polylog(2, Rational(1,2))))
+
+# Test s=0 and negative cases
+print("\n=== s=0 and negative cases ===")
+print("expand_func(polylog(0, z)) =", expand_func(polylog(0, z)))
+print("expand_func(polylog(-1, z)) =", expand_func(polylog(-1, z)))
+print("expand_func(polylog(-2, z)) =", expand_func(polylog(-2, z)))
+
+# Test the specific case from the GitHub issue
+print("\n=== GitHub issue specific case ===")
+result = polylog(2, Rational(1,2))
+print("polylog(2, 1/2) =", result)
+expanded = expand_func(result)
+print("expand_func(polylog(2, 1/2)) =", expanded)
+
+# Check if we can simplify it further
+try:
+    simplified = nsimplify(expanded, [pi**2, log(2)**2])
+    print("nsimplify(expand_func(polylog(2, 1/2))) =", simplified)
+except:
+    print("nsimplify failed on this expression")
+
+# Expected result from GitHub issue
+expected = -log(2)**2/2 + pi**2/12
+print("Expected: -log(2)**2/2 + pi**2/12 =", expected)
\ No newline at end of file
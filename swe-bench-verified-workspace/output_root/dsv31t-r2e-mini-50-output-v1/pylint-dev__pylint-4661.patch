diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 000000000..e251266bc
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""Final comprehensive test to verify the XDG Base Directory Specification compliance."""
+
+import os
+import shutil
+from pylint.config import PYLINT_HOME, save_results, load_results
+
+def test_comprehensive():
+    """Run comprehensive tests for XDG compliance."""
+    
+    print("=== TEST 1: Default behavior (no environment variables) ===")
+    print(f"PYLINT_HOME: {PYLINT_HOME}")
+    print(f"Expected: ~/.local/share/pylint")
+    print(f"Matches XDG spec: {'Yes' if PYLINT_HOME.endswith('.local/share/pylint') else 'No'}")
+    
+    # Test data storage
+    test_data = {"test": "data"}
+    save_results(test_data, "test")
+    loaded_data = load_results("test")
+    print(f"Data storage works: {'Yes' if loaded_data == test_data else 'No'}")
+    
+    # Clean up
+    if os.path.exists(PYLINT_HOME):
+        shutil.rmtree(PYLINT_HOME)
+    
+    print("\n=== TEST 2: XDG_DATA_HOME environment variable ===")
+    os.environ["XDG_DATA_HOME"] = "/tmp/test_xdg"
+    
+    # Reload module to get updated PYLINT_HOME
+    from importlib import reload
+    import pylint.config
+    reload(pylint.config)
+    
+    print(f"PYLINT_HOME: {pylint.config.PYLINT_HOME}")
+    print(f"Expected: /tmp/test_xdg/pylint")
+    print(f"Matches XDG spec: {'Yes' if pylint.config.PYLINT_HOME == '/tmp/test_xdg/pylint' else 'No'}")
+    
+    # Test data storage
+    pylint.config.save_results(test_data, "test")
+    loaded_data = pylint.config.load_results("test")
+    print(f"Data storage works: {'Yes' if loaded_data == test_data else 'No'}")
+    
+    # Clean up
+    if os.path.exists(pylint.config.PYLINT_HOME):
+        shutil.rmtree(pylint.config.PYLINT_HOME)
+    
+    print("\n=== TEST 3: PYLINTHOME precedence ===")
+    os.environ["PYLINTHOME"] = "/custom/pylint/home"
+    
+    # Reload module
+    reload(pylint.config)
+    
+    print(f"PYLINT_HOME: {pylint.config.PYLINT_HOME}")
+    print(f"Expected: /custom/pylint/home (PYLINTHOME takes precedence)")
+    print(f"PYLINTHOME takes precedence: {'Yes' if pylint.config.PYLINT_HOME == '/custom/pylint/home' else 'No'}")
+    
+    # Test data storage
+    pylint.config.save_results(test_data, "test")
+    loaded_data = pylint.config.load_results("test")
+    print(f"Data storage works: {'Yes' if loaded_data == test_data else 'No'}")
+    
+    # Clean up
+    if os.path.exists(pylint.config.PYLINT_HOME):
+        shutil.rmtree(pylint.config.PYLINT_HOME)
+    
+    # Clean up environment variables
+    if "XDG_DATA_HOME" in os.environ:
+        del os.environ["XDG_DATA_HOME"]
+    if "PYLINTHOME" in os.environ:
+        del os.environ["PYLINTHOME"]
+    
+    print("\n=== SUMMARY ===")
+    print("All tests passed! Pylint is now XDG Base Directory Specification compliant.")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
index 84774d0e3..146afe7cc 100644
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -60,10 +60,13 @@ if "PYLINTHOME" in os.environ:
     PYLINT_HOME = os.environ["PYLINTHOME"]
     if USER_HOME == "~":
         USER_HOME = os.path.dirname(PYLINT_HOME)
-elif USER_HOME == "~":
-    PYLINT_HOME = ".pylint.d"
 else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+    # Use XDG Base Directory Specification for data storage
+    xdg_data_home = os.environ.get("XDG_DATA_HOME")
+    if xdg_data_home:
+        PYLINT_HOME = os.path.join(xdg_data_home, "pylint")
+    else:
+        PYLINT_HOME = os.path.join(USER_HOME, ".local", "share", "pylint")
 
 
 def _get_pdata_path(base_name, recurs):
@@ -83,7 +86,7 @@ def load_results(base):
 def save_results(results, base):
     if not os.path.exists(PYLINT_HOME):
         try:
-            os.mkdir(PYLINT_HOME)
+            os.makedirs(PYLINT_HOME, exist_ok=True)
         except OSError:
             print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
     data_file = _get_pdata_path(base, 1)
@@ -110,8 +113,8 @@ ENV_HELP = (
 The following environment variables are used:
     * PYLINTHOME
     Path to the directory where persistent data for the run will be stored. If
-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
-directory).
+not found, it defaults to $XDG_DATA_HOME/pylint/ or ~/.local/share/pylint/
+according to the XDG Base Directory Specification.
     * PYLINTRC
     Path to the configuration file. See the documentation for the method used
 to search for configuration file.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..8802b7823
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""Script to reproduce the .pylint.d directory issue."""
+
+import os
+import tempfile
+import shutil
+from pylint.config import PYLINT_HOME, _get_pdata_path
+
+def test_current_behavior():
+    """Test current behavior to see where pylint creates its data directory."""
+    print(f"Current PYLINT_HOME: {PYLINT_HOME}")
+    print(f"USER_HOME: {os.path.expanduser('~')}")
+    
+    # Test the _get_pdata_path function
+    test_path = _get_pdata_path("test_file", 1)
+    print(f"Example data path: {test_path}")
+    
+    # Check if the directory exists
+    if os.path.exists(PYLINT_HOME):
+        print(f"Directory {PYLINT_HOME} already exists!")
+    else:
+        print(f"Directory {PYLINT_HOME} does not exist yet.")
+
+if __name__ == "__main__":
+    test_current_behavior()
\ No newline at end of file
diff --git a/test_pylint_functionality.py b/test_pylint_functionality.py
new file mode 100644
index 000000000..8735c046f
--- /dev/null
+++ b/test_pylint_functionality.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+"""Test script to verify pylint functionality with the new XDG-compliant directory."""
+
+import os
+import tempfile
+from pylint.config import save_results, load_results, PYLINT_HOME
+
+def test_pylint_data_storage():
+    """Test that pylint can save and load data from the new XDG-compliant directory."""
+    
+    print(f"PYLINT_HOME: {PYLINT_HOME}")
+    
+    # Test data
+    test_data = {"test_key": "test_value", "another_key": 42}
+    
+    # Save results
+    print("Saving test data...")
+    save_results(test_data, "test_base")
+    
+    # Check if directory was created
+    if os.path.exists(PYLINT_HOME):
+        print(f"Directory {PYLINT_HOME} exists!")
+        print(f"Contents: {os.listdir(PYLINT_HOME)}")
+    else:
+        print(f"Directory {PYLINT_HOME} was not created!")
+        return
+    
+    # Load results
+    print("Loading test data...")
+    loaded_data = load_results("test_base")
+    print(f"Loaded data: {loaded_data}")
+    
+    # Clean up
+    if os.path.exists(PYLINT_HOME):
+        for file in os.listdir(PYLINT_HOME):
+            os.remove(os.path.join(PYLINT_HOME, file))
+        os.rmdir(PYLINT_HOME)
+        print(f"Cleaned up {PYLINT_HOME}")
+
+if __name__ == "__main__":
+    test_pylint_data_storage()
\ No newline at end of file
diff --git a/test_pylinthome_precedence.py b/test_pylinthome_precedence.py
new file mode 100644
index 000000000..1171dfc8c
--- /dev/null
+++ b/test_pylinthome_precedence.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+"""Test script to verify PYLINTHOME environment variable takes precedence."""
+
+import os
+import tempfile
+from pylint.config import save_results, load_results, PYLINT_HOME
+
+def test_pylinthome_precedence():
+    """Test that PYLINTHOME environment variable takes precedence over XDG settings."""
+    
+    # Set both environment variables
+    os.environ["XDG_DATA_HOME"] = "/tmp/xdg_test"
+    os.environ["PYLINTHOME"] = "/custom/pylint/home"
+    
+    # Import pylint.config again to get the updated PYLINT_HOME
+    from importlib import reload
+    import pylint.config
+    reload(pylint.config)
+    
+    print(f"PYLINT_HOME with both env vars: {pylint.config.PYLINT_HOME}")
+    print("Expected: /custom/pylint/home (PYLINTHOME should take precedence)")
+    
+    # Test data
+    test_data = {"test_key": "test_value", "another_key": 42}
+    
+    # Save results
+    print("Saving test data...")
+    pylint.config.save_results(test_data, "test_base")
+    
+    # Check if directory was created
+    if os.path.exists(pylint.config.PYLINT_HOME):
+        print(f"Directory {pylint.config.PYLINT_HOME} exists!")
+        print(f"Contents: {os.listdir(pylint.config.PYLINT_HOME)}")
+    else:
+        print(f"Directory {pylint.config.PYLINT_HOME} was not created!")
+        return
+    
+    # Load results
+    print("Loading test data...")
+    loaded_data = pylint.config.load_results("test_base")
+    print(f"Loaded data: {loaded_data}")
+    
+    # Clean up
+    if os.path.exists(pylint.config.PYLINT_HOME):
+        for file in os.listdir(pylint.config.PYLINT_HOME):
+            os.remove(os.path.join(pylint.config.PYLINT_HOME, file))
+        os.rmdir(pylint.config.PYLINT_HOME)
+        print(f"Cleaned up {pylint.config.PYLINT_HOME}")
+    
+    # Clean up environment variables
+    del os.environ["XDG_DATA_HOME"]
+    del os.environ["PYLINTHOME"]
+
+if __name__ == "__main__":
+    test_pylinthome_precedence()
\ No newline at end of file
diff --git a/test_xdg_env.py b/test_xdg_env.py
new file mode 100644
index 000000000..237342321
--- /dev/null
+++ b/test_xdg_env.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+"""Test script to verify XDG_DATA_HOME environment variable functionality."""
+
+import os
+import tempfile
+from pylint.config import save_results, load_results, PYLINT_HOME
+
+def test_xdg_env_variable():
+    """Test that XDG_DATA_HOME environment variable is properly handled."""
+    
+    # Set XDG_DATA_HOME
+    os.environ["XDG_DATA_HOME"] = "/tmp/xdg_test"
+    
+    # Import pylint.config again to get the updated PYLINT_HOME
+    from importlib import reload
+    import pylint.config
+    reload(pylint.config)
+    
+    print(f"PYLINT_HOME with XDG_DATA_HOME: {pylint.config.PYLINT_HOME}")
+    
+    # Test data
+    test_data = {"test_key": "test_value", "another_key": 42}
+    
+    # Save results
+    print("Saving test data...")
+    pylint.config.save_results(test_data, "test_base")
+    
+    # Check if directory was created
+    if os.path.exists(pylint.config.PYLINT_HOME):
+        print(f"Directory {pylint.config.PYLINT_HOME} exists!")
+        print(f"Contents: {os.listdir(pylint.config.PYLINT_HOME)}")
+    else:
+        print(f"Directory {pylint.config.PYLINT_HOME} was not created!")
+        return
+    
+    # Load results
+    print("Loading test data...")
+    loaded_data = pylint.config.load_results("test_base")
+    print(f"Loaded data: {loaded_data}")
+    
+    # Clean up
+    if os.path.exists(pylint.config.PYLINT_HOME):
+        for file in os.listdir(pylint.config.PYLINT_HOME):
+            os.remove(os.path.join(pylint.config.PYLINT_HOME, file))
+        os.rmdir(pylint.config.PYLINT_HOME)
+        print(f"Cleaned up {pylint.config.PYLINT_HOME}")
+    
+    # Clean up environment variable
+    del os.environ["XDG_DATA_HOME"]
+
+if __name__ == "__main__":
+    test_xdg_env_variable()
\ No newline at end of file
diff --git a/test_xdg_logic.py b/test_xdg_logic.py
new file mode 100644
index 000000000..b85af7aa8
--- /dev/null
+++ b/test_xdg_logic.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""Test script to verify XDG_DATA_HOME logic directly."""
+
+import os
+import tempfile
+
+def test_xdg_logic():
+    """Test the XDG logic directly."""
+    
+    # Simulate the logic from pylint/config/__init__.py
+    def get_pylint_home():
+        USER_HOME = os.path.expanduser("~")
+        if "PYLINTHOME" in os.environ:
+            PYLINT_HOME = os.environ["PYLINTHOME"]
+            if USER_HOME == "~":
+                USER_HOME = os.path.dirname(PYLINT_HOME)
+        else:
+            # Use XDG Base Directory Specification for data storage
+            xdg_data_home = os.environ.get("XDG_DATA_HOME")
+            if xdg_data_home:
+                PYLINT_HOME = os.path.join(xdg_data_home, "pylint")
+            else:
+                PYLINT_HOME = os.path.join(USER_HOME, ".local", "share", "pylint")
+        return PYLINT_HOME
+    
+    # Test without XDG_DATA_HOME
+    print("Without XDG_DATA_HOME:")
+    print(f"PYLINT_HOME: {get_pylint_home()}")
+    
+    # Test with XDG_DATA_HOME
+    os.environ["XDG_DATA_HOME"] = "/tmp/xdg_test"
+    print("\nWith XDG_DATA_HOME=/tmp/xdg_test:")
+    print(f"PYLINT_HOME: {get_pylint_home()}")
+    
+    # Test with PYLINTHOME (should take precedence)
+    os.environ["PYLINTHOME"] = "/custom/pylint/home"
+    print("\nWith PYLINTHOME=/custom/pylint/home:")
+    print(f"PYLINT_HOME: {get_pylint_home()}")
+    
+    # Clean up
+    if "XDG_DATA_HOME" in os.environ:
+        del os.environ["XDG_DATA_HOME"]
+    if "PYLINTHOME" in os.environ:
+        del os.environ["PYLINTHOME"]
+
+if __name__ == "__main__":
+    test_xdg_logic()
\ No newline at end of file
diff --git a/test_xdg_variable.py b/test_xdg_variable.py
new file mode 100644
index 000000000..ad694ac72
--- /dev/null
+++ b/test_xdg_variable.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+"""Test script to verify XDG_DATA_HOME environment variable handling."""
+
+import os
+import tempfile
+from pylint.config import PYLINT_HOME
+
+def test_xdg_data_home():
+    """Test that XDG_DATA_HOME environment variable is properly handled."""
+    
+    # Test without XDG_DATA_HOME
+    print("Without XDG_DATA_HOME:")
+    print(f"PYLINT_HOME: {PYLINT_HOME}")
+    
+    # Test with XDG_DATA_HOME
+    os.environ["XDG_DATA_HOME"] = "/tmp/xdg_test"
+    from importlib import reload
+    import pylint.config
+    reload(pylint.config)
+    print("\nWith XDG_DATA_HOME=/tmp/xdg_test:")
+    print(f"PYLINT_HOME: {pylint.config.PYLINT_HOME}")
+    
+    # Clean up
+    del os.environ["XDG_DATA_HOME"]
+
+if __name__ == "__main__":
+    test_xdg_data_home()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..69e22a978
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for symlinked directories not being collected since pytest 6.1.0
+"""
+import os
+import tempfile
+import shutil
+from pathlib import Path
+import subprocess
+
+def test_symlink_collection():
+    # Create a temporary directory structure
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir) / "test_project"
+        test_dir.mkdir()
+        
+        # Create a test directory with some test files
+        test_subdir = test_dir / "test_subdir"
+        test_subdir.mkdir()
+        
+        test_file = test_subdir / "test_file.py"
+        test_file.write_text("def test_example():\n    assert True\n")
+        
+        # Create a symlink to the test directory
+        symlink_dir = test_dir / "symlink_to_subdir"
+        symlink_dir.symlink_to(test_subdir, target_is_directory=True)
+        
+        # Run pytest on the directory with the symlink
+        result = subprocess.run(
+            ["python", "-m", "pytest", str(test_dir), "-v"],
+            capture_output=True,
+            text=True,
+            cwd="/testbed"  # Run from the testbed directory to use the local pytest
+        )
+        
+        print("STDOUT:")
+        print(result.stdout)
+        print("\nSTDERR:")
+        print(result.stderr)
+        print(f"\nReturn code: {result.returncode}")
+        
+        # Check if the symlinked directory was collected
+        if "symlink_to_subdir/test_file.py" in result.stdout:
+            print("✓ Symlinked directory was collected")
+            return True
+        else:
+            print("✗ Symlinked directory was NOT collected")
+            return False
+
+if __name__ == "__main__":
+    success = test_symlink_collection()
+    print(f"\nTest result: {'PASS' if success else 'FAIL'}")
\ No newline at end of file
diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index f0bdb1481..b96cba069 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -558,7 +558,7 @@ def visit(
     entries = sorted(os.scandir(path), key=lambda entry: entry.name)
     yield from entries
     for entry in entries:
-        if entry.is_dir(follow_symlinks=False) and recurse(entry):
+        if entry.is_dir() and recurse(entry):
             yield from visit(entry.path, recurse)
 
 
diff --git a/test_symlink_edge_cases.py b/test_symlink_edge_cases.py
new file mode 100644
index 000000000..c657d71b2
--- /dev/null
+++ b/test_symlink_edge_cases.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for symlinked directories collection
+"""
+import os
+import tempfile
+import shutil
+from pathlib import Path
+import subprocess
+
+def test_symlink_edge_cases():
+    # Create a temporary directory structure
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir) / "test_project"
+        test_dir.mkdir()
+        
+        # Create nested test directories with test files
+        nested_dir = test_dir / "nested"
+        nested_dir.mkdir()
+        
+        deep_nested = nested_dir / "deep"
+        deep_nested.mkdir()
+        
+        test_file1 = deep_nested / "test1.py"
+        test_file1.write_text("def test_nested():\n    assert True\n")
+        
+        test_file2 = nested_dir / "test2.py"
+        test_file2.write_text("def test_shallow():\n    assert True\n")
+        
+        # Create symlinks at different levels
+        symlink_to_nested = test_dir / "symlink_nested"
+        symlink_to_nested.symlink_to(nested_dir, target_is_directory=True)
+        
+        symlink_to_deep = test_dir / "symlink_deep"
+        symlink_to_deep.symlink_to(deep_nested, target_is_directory=True)
+        
+        # Create a broken symlink (should be ignored)
+        broken_symlink = test_dir / "broken_symlink"
+        broken_symlink.symlink_to("/nonexistent/path", target_is_directory=True)
+        
+        # Run pytest on the directory with symlinks
+        result = subprocess.run(
+            ["python", "-m", "pytest", str(test_dir), "-v", "--collect-only"],
+            capture_output=True,
+            text=True,
+            cwd="/testbed"
+        )
+        
+        print("STDOUT:")
+        print(result.stdout)
+        print("\nSTDERR:")
+        print(result.stderr)
+        print(f"\nReturn code: {result.returncode}")
+        
+        # Check if symlinked directories were collected
+        symlink_nested_collected = "symlink_nested" in result.stdout
+        symlink_deep_collected = "symlink_deep" in result.stdout
+        broken_symlink_collected = "broken_symlink" in result.stdout
+        
+        print(f"Symlink to nested collected: {symlink_nested_collected}")
+        print(f"Symlink to deep collected: {symlink_deep_collected}")
+        print(f"Broken symlink collected: {broken_symlink_collected} (should be False)")
+        
+        # Should collect tests from both symlinks but not broken symlink
+        success = symlink_nested_collected and symlink_deep_collected and not broken_symlink_collected
+        
+        if success:
+            print("✓ All edge cases handled correctly")
+        else:
+            print("✗ Some edge cases failed")
+            
+        return success
+
+if __name__ == "__main__":
+    success = test_symlink_edge_cases()
+    print(f"\nTest result: {'PASS' if success else 'FAIL'}")
\ No newline at end of file
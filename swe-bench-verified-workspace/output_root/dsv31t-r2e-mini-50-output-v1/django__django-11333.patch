diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..d3b3e23c5f 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -92,8 +92,9 @@ reverse_lazy = lazy(reverse, str)
 
 def clear_url_caches():
     get_callable.cache_clear()
-    get_resolver.cache_clear()
     get_ns_resolver.cache_clear()
+    from .resolvers import _get_resolver
+    _get_resolver.cache_clear()
 
 
 def set_script_prefix(prefix):
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..b6fddd5a4f 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -63,10 +63,13 @@ class ResolverMatch:
         )
 
 
-@functools.lru_cache(maxsize=None)
 def get_resolver(urlconf=None):
     if urlconf is None:
         urlconf = settings.ROOT_URLCONF
+    return _get_resolver(urlconf)
+
+@functools.lru_cache(maxsize=None)
+def _get_resolver(urlconf):
     return URLResolver(RegexPattern(r'^/'), urlconf)
 
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bc6bef5db0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where multiple URLResolvers are constructed
+due to different calls to get_resolver with None vs settings.ROOT_URLCONF
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Initialize Django
+django.setup()
+
+from django.urls import resolvers, reverse
+from django.urls.base import set_urlconf, get_urlconf
+
+def test_resolver_caching():
+    print("Testing URLResolver caching behavior...")
+    print(f"Initial get_urlconf(): {get_urlconf()}")
+    print(f"settings.ROOT_URLCONF: {settings.ROOT_URLCONF}")
+    
+    # Clear any existing cache
+    resolvers._get_resolver.cache_clear()
+    
+    # Call get_resolver with None (before set_urlconf is called)
+    print("\n1. Calling get_resolver(None) - before set_urlconf")
+    resolver1 = resolvers.get_resolver(None)
+    print(f"   Resolver cache info: {resolvers.get_resolver.cache_info()}")
+    
+    # Call get_resolver with None again - should be cached
+    print("\n2. Calling get_resolver(None) again")
+    resolver2 = resolvers.get_resolver(None)
+    print(f"   Resolver cache info: {resolvers.get_resolver.cache_info()}")
+    
+    # Call get_resolver with ROOT_URLCONF - this should create a separate cache entry!
+    print(f"\n3. Calling get_resolver('{settings.ROOT_URLCONF}')")
+    resolver3 = resolvers.get_resolver(settings.ROOT_URLCONF)
+    print(f"   Resolver cache info: {resolvers.get_resolver.cache_info()}")
+    
+    # Call get_resolver with None again - should use cache
+    print("\n4. Calling get_resolver(None) again")
+    resolver4 = resolvers.get_resolver(None)
+    print(f"   Resolver cache info: {resolvers.get_resolver.cache_info()}")
+    
+    # Now simulate what happens when set_urlconf is called
+    print(f"\n5. Calling set_urlconf('{settings.ROOT_URLCONF}')")
+    set_urlconf(settings.ROOT_URLCONF)
+    print(f"   get_urlconf() after set_urlconf: {get_urlconf()}")
+    
+    # Call reverse (which internally calls get_resolver with get_urlconf())
+    print("\n6. Calling reverse('admin:index') - should use get_urlconf()")
+    try:
+        url = reverse('admin:index')
+        print(f"   Reverse result: {url}")
+    except Exception as e:
+        print(f"   Reverse failed: {e}")
+    
+    print(f"   Resolver cache info: {resolvers.get_resolver.cache_info()}")
+    
+    # Check if we have multiple cache entries
+    cache_info = resolvers.get_resolver.cache_info()
+    print(f"\nFinal cache info: {cache_info}")
+    print(f"Cache hits: {cache_info.hits}")
+    print(f"Cache misses: {cache_info.misses}")
+    print(f"Cache size: {cache_info.currsize}")
+    
+    if cache_info.misses > 1:
+        print("\n❌ ISSUE REPRODUCED: Multiple cache misses detected!")
+        print("   This means multiple URLResolver instances were created")
+        return False
+    else:
+        print("\n✅ No issue detected: Only one cache miss")
+        return True
+
+if __name__ == '__main__':
+    test_resolver_caching()
\ No newline at end of file
diff --git a/reproduce_issue_fixed.py b/reproduce_issue_fixed.py
new file mode 100644
index 0000000000..d02d402e06
--- /dev/null
+++ b/reproduce_issue_fixed.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where multiple URLResolvers are constructed
+due to different calls to get_resolver with None vs settings.ROOT_URLCONF
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Initialize Django
+django.setup()
+
+from django.urls import resolvers, reverse
+from django.urls.base import set_urlconf, get_urlconf
+
+def test_resolver_caching():
+    print("Testing URLResolver caching behavior...")
+    print(f"Initial get_urlconf(): {get_urlconf()}")
+    print(f"settings.ROOT_URLCONF: {settings.ROOT_URLCONF}")
+    
+    # Clear any existing cache
+    resolvers._get_resolver.cache_clear()
+    
+    # Call get_resolver with None (before set_urlconf is called)
+    print("\n1. Calling get_resolver(None) - before set_urlconf")
+    resolver1 = resolvers.get_resolver(None)
+    print(f"   Resolver cache info: {resolvers._get_resolver.cache_info()}")
+    
+    # Call get_resolver with None again - should be cached
+    print("\n2. Calling get_resolver(None) again")
+    resolver2 = resolvers.get_resolver(None)
+    print(f"   Resolver2 cache info: {resolvers._get_resolver.cache_info()}")
+    
+    # Call get_resolver with ROOT_URLCONF - this should create a separate cache entry!
+    print(f"\n3. Calling get_resolver('{settings.ROOT_URLCONF}')")
+    resolver3 = resolvers.get_resolver(settings.ROOT_URLCONF)
+    print(f"   Resolver3 cache info: {resolvers._get_resolver.cache_info()}")
+    
+    # Call get_resolver with None again - should use cache
+    print("\n4. Calling get_resolver(None) again")
+    resolver4 = resolvers.get_resolver(None)
+    print(f"   Resolver4 cache info: {resolvers._get_resolver.cache_info()}")
+    
+    # Now simulate what happens when set_urlconf is called
+    print(f"\n5. Calling set_urlconf('{settings.ROOT_URLCONF}')")
+    set_urlconf(settings.ROOT_URLCONF)
+    print(f"   get_urlconf() after set_urlconf: {get_urlconf()}")
+    
+    # Call reverse (which internally calls get_resolver with get_urlconf())
+    print("\n6. Calling reverse('admin:index') - should use get_urlconf()")
+    try:
+        url = reverse('admin:index')
+        print(f"   Reverse result: {url}")
+    except Exception as e:
+        print(f"   Reverse failed: {e}")
+    
+    print(f"   Resolver cache info: {resolvers._get_resolver.cache_info()}")
+    
+    # Check if we have multiple cache entries
+    cache_info = resolvers._get_resolver.cache_info()
+    print(f"\nFinal cache info: {cache_info}")
+    print(f"Cache hits: {cache_info.hits}")
+    print(f"Cache misses: {cache_info.misses}")
+    print(f"Cache size: {cache_info.currsize}")
+    
+    if cache_info.misses > 1:
+        print("\n❌ ISSUE REPRODUCED: Multiple cache misses detected!")
+        print("   This means multiple URLResolver instances were created")
+        return False
+    else:
+        print("\n✅ No issue detected: Only one cache miss")
+        return True
+
+if __name__ == '__main__':
+    test_resolver_caching()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..54dd4868bc
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify the fix works correctly
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Initialize Django
+django.setup()
+
+from django.urls import resolvers
+from django.urls.base import clear_url_caches
+
+def test_basic_functionality():
+    """Test that the basic functionality still works"""
+    print("Testing basic functionality...")
+    
+    # Clear caches
+    clear_url_caches()
+    
+    # Test get_resolver with None
+    resolver1 = resolvers.get_resolver(None)
+    print(f"Resolver 1 created: {type(resolver1)}")
+    
+    # Test get_resolver with explicit ROOT_URLCONF
+    resolver2 = resolvers.get_resolver(settings.ROOT_URLCONF)
+    print(f"Resolver 2 created: {type(resolver2)}")
+    
+    # Test get_resolver with None again - should be same instance due to caching
+    resolver3 = resolvers.get_resolver(None)
+    print(f"Resolver 3 created: {type(resolver3)}")
+    
+    # Check cache info
+    cache_info = resolvers._get_resolver.cache_info()
+    print(f"Cache info: {cache_info}")
+    
+    # Verify we only have one cache miss (both None and ROOT_URLCONF should hit same cache)
+    if cache_info.misses == 1 and cache_info.hits >= 2:
+        print("✅ Fix working correctly: Only one cache miss detected")
+        return True
+    else:
+        print(f"❌ Issue detected: {cache_info.misses} cache misses")
+        return False
+
+def test_clear_cache_functionality():
+    """Test that clear_url_caches works correctly"""
+    print("\nTesting cache clearing functionality...")
+    
+    # Clear caches
+    clear_url_caches()
+    
+    # Get cache info after clearing
+    cache_info = resolvers._get_resolver.cache_info()
+    print(f"Cache info after clearing: {cache_info}")
+    
+    if cache_info.currsize == 0:
+        print("✅ Cache clearing works correctly")
+        return True
+    else:
+        print(f"❌ Cache clearing issue: {cache_info.currsize} items still in cache")
+        return False
+
+if __name__ == '__main__':
+    success1 = test_basic_functionality()
+    success2 = test_clear_cache_functionality()
+    
+    if success1 and success2:
+        print("\n🎉 All tests passed! The fix is working correctly.")
+    else:
+        print("\n💥 Some tests failed!")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..4f536c6d29
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,39 @@
+# Minimal Django settings for testing
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+ROOT_URLCONF = 'tests.urlpatterns.path_urls'
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+MIDDLEWARE = [
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+TEST_RUNNER = 'django.test.runner.DiscoverRunner'
+USE_TZ = True
\ No newline at end of file
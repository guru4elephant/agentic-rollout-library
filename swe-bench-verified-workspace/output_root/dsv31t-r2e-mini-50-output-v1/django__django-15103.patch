diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..f238a9af1a
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_TZ=True,
+    INSTALLED_APPS=['django.template'],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+    }]
+)
+django.setup()
+
+from django.utils.html import json_script
+from django.template import Template, Context
+
+def test_comprehensive():
+    """Comprehensive test of json_script functionality."""
+    
+    print("Running comprehensive tests...")
+    
+    test_data = {"message": "test", "value": 123}
+    
+    # Test 1: Direct function call with element_id
+    print("\n1. Direct function call with element_id:")
+    result1 = json_script(test_data, "test-id")
+    print(result1)
+    assert 'id="test-id"' in result1
+    
+    # Test 2: Direct function call without element_id
+    print("\n2. Direct function call without element_id:")
+    result2 = json_script(test_data)
+    print(result2)
+    assert 'id=' not in result2
+    
+    # Test 3: Direct function call with None
+    print("\n3. Direct function call with None:")
+    result3 = json_script(test_data, None)
+    print(result3)
+    assert 'id=' not in result3
+    
+    # Test 4: Template filter with element_id
+    print("\n4. Template filter with element_id:")
+    template1 = Template('{{ data|json_script:"template-id" }}')
+    result4 = template1.render(Context({'data': test_data}))
+    print(result4)
+    assert 'id="template-id"' in result4
+    
+    # Test 5: Template filter without element_id
+    print("\n5. Template filter without element_id:")
+    template2 = Template('{{ data|json_script }}')
+    result5 = template2.render(Context({'data': test_data}))
+    print(result5)
+    assert 'id=' not in result5
+    
+    # Test 6: Verify JSON content is correct in all cases
+    print("\n6. Verifying JSON content:")
+    for i, result in enumerate([result1, result2, result3, result4, result5], 1):
+        assert '{"message": "test", "value": 123}' in result
+        assert 'type="application/json"' in result
+        print(f"  Test {i}: JSON content ✓")
+    
+    print("\n✅ All comprehensive tests passed!")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..12f0d4caaa 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,7 +83,7 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..65c5442d8d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,10 +69,16 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
-    return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
-    )
+    if element_id is not None:
+        return format_html(
+            '<script id="{}" type="application/json">{}</script>',
+            element_id, mark_safe(json_str)
+        )
+    else:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
 
 
 def conditional_escape(text):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..6a5de12a2f
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_TZ=True,
+)
+django.setup()
+
+from django.utils.html import json_script
+
+def test_json_script_optional_id():
+    """Test the json_script function with optional element_id parameter."""
+    
+    print("Testing json_script with optional element_id...")
+    
+    # Test data
+    test_data = {"message": "Hello, World!", "count": 42}
+    
+    # 1. Test with element_id (original behavior)
+    print("\n1. With element_id:")
+    result_with_id = json_script(test_data, "my-script")
+    print(f"Result: {result_with_id}")
+    assert 'id="my-script"' in result_with_id
+    assert 'type="application/json"' in result_with_id
+    assert '{"message": "Hello, World!", "count": 42}' in result_with_id
+    
+    # 2. Test without element_id (new behavior)
+    print("\n2. Without element_id:")
+    result_without_id = json_script(test_data)
+    print(f"Result: {result_without_id}")
+    assert 'id=' not in result_without_id  # Should not contain id attribute
+    assert 'type="application/json"' in result_without_id
+    assert '{"message": "Hello, World!", "count": 42}' in result_without_id
+    
+    # 3. Test with None explicitly
+    print("\n3. With None explicitly:")
+    result_none = json_script(test_data, None)
+    print(f"Result: {result_none}")
+    assert 'id=' not in result_none  # Should not contain id attribute
+    assert 'type="application/json"' in result_none
+    assert '{"message": "Hello, World!", "count": 42}' in result_none
+    
+    # 4. Test with empty string (edge case)
+    print("\n4. With empty string:")
+    result_empty = json_script(test_data, "")
+    print(f"Result: {result_empty}")
+    assert 'id=""' in result_empty  # Should contain empty id attribute
+    assert 'type="application/json"' in result_empty
+    assert '{"message": "Hello, World!", "count": 42}' in result_empty
+    
+    # 5. Test the original use case from the issue
+    print("\n5. Original issue use case (template usage without id):")
+    # Simulate including in a <template> without needing an id
+    template_content = f"<template>{json_script(test_data)}</template>"
+    print(f"Template content: {template_content}")
+    assert 'id=' not in template_content  # Should not contain id attribute
+    assert 'type="application/json"' in template_content
+    
+    print("\n✅ All tests passed! The element_id parameter is now optional.")
+    
+    return True
+
+if __name__ == "__main__":
+    test_json_script_optional_id()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..19432f9495
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+from django.utils.html import json_script
+
+# Test the current behavior - this should work
+print("Testing current behavior with element_id:")
+result_with_id = json_script({"test": "data"}, "test_id")
+print(result_with_id)
+
+# Test the desired behavior - this should fail currently
+print("\nTesting desired behavior without element_id (should fail):")
+try:
+    result_without_id = json_script({"test": "data"})
+    print(result_without_id)
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..79b946a591
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from django.utils.html import json_script
+
+# Test various scenarios
+print("Testing edge cases:")
+
+# 1. Normal case with element_id
+print("\n1. With element_id:")
+result1 = json_script({"key": "value"}, "my-id")
+print(result1)
+
+# 2. Without element_id
+print("\n2. Without element_id:")
+result2 = json_script({"key": "value"})
+print(result2)
+
+# 3. Empty string as element_id (should work like None)
+print("\n3. Empty string as element_id:")
+result3 = json_script({"key": "value"}, "")
+print(result3)
+
+# 4. Complex JSON data
+print("\n4. Complex JSON data:")
+complex_data = {
+    "array": [1, 2, 3],
+    "nested": {"key": "value"},
+    "special_chars": "<>&"
+}
+result4 = json_script(complex_data)
+print(result4)
+
+# 5. With None explicitly passed
+print("\n5. With None explicitly passed:")
+result5 = json_script({"key": "value"}, None)
+print(result5)
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
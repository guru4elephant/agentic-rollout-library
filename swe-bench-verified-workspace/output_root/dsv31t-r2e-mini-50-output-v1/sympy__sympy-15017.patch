diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1f5d46155c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python3
+
+import sympy
+
+# Reproduce the issue
+a = sympy.Array(3)
+print(f"sympy.Array(3) = {a}")
+print(f"len(a) = {len(a)}")
+print(f"len(list(a)) = {len(list(a))}")
+
+# Compare with numpy behavior
+import numpy
+np_arr = numpy.asarray(1)
+print(f"numpy.asarray(1) = {np_arr}")
+print(f"numpy.asarray(1).size = {np_arr.size}")
\ No newline at end of file
diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py
index 9be94a8631..9790712755 100644
--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
diff --git a/sympy/tensor/array/sparse_ndim_array.py b/sympy/tensor/array/sparse_ndim_array.py
index 72b5d51299..0cf329a012 100644
--- a/sympy/tensor/array/sparse_ndim_array.py
+++ b/sympy/tensor/array/sparse_ndim_array.py
@@ -130,7 +130,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
 
         shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
         shape = Tuple(*map(_sympify, shape))
-        loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
@@ -167,7 +167,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
         self = object.__new__(cls)
         self._shape = shape
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..ef00a7718a
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+import sympy
+
+# Test the fix
+a = sympy.Array(3)
+print(f"sympy.Array(3) = {a}")
+print(f"len(a) = {len(a)}")
+print(f"len(list(a)) = {len(list(a))}")
+
+# Test with different scalar values
+b = sympy.Array(42)
+print(f"sympy.Array(42) = {b}")
+print(f"len(b) = {len(b)}")
+
+# Test that normal arrays still work
+c = sympy.Array([1, 2, 3])
+print(f"sympy.Array([1, 2, 3]) = {c}")
+print(f"len(c) = {len(c)}")
+
+# Test 2D array
+d = sympy.Array([[1, 2], [3, 4]])
+print(f"sympy.Array([[1, 2], [3, 4]]) = {d}")
+print(f"len(d) = {len(d)}")
\ No newline at end of file
diff --git a/test_shape.py b/test_shape.py
new file mode 100644
index 0000000000..3da13242a2
--- /dev/null
+++ b/test_shape.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+import functools
+
+# Test what happens with empty shape
+shape = ()
+# The current implementation returns 0 for empty shape
+loop_size = 0 if shape == () else functools.reduce(lambda x,y: x*y, shape)
+print(f"Empty shape: {shape}")
+print(f"Loop size: {loop_size}")
+
+# Test what happens with shape (1)
+shape = (1,)
+loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+print(f"Shape (1,): {shape}")
+print(f"Loop size: {loop_size}")
+
+# Test what should happen for rank-0 arrays
+shape = ()
+# For rank-0 arrays, loop_size should be 1
+print(f"Rank-0 array should have loop_size: 1")
\ No newline at end of file
diff --git a/test_sparse.py b/test_sparse.py
new file mode 100644
index 0000000000..d3bcb46257
--- /dev/null
+++ b/test_sparse.py
@@ -0,0 +1,19 @@
+#!/usr/bin/env python3
+
+import sympy
+
+# Test sparse arrays with scalar values
+a = sympy.Array(3, sparse=True)
+print(f"sympy.Array(3, sparse=True) = {a}")
+print(f"len(a) = {len(a)}")
+print(f"len(list(a)) = {len(list(a))}")
+
+# Test with different scalar values
+b = sympy.Array(42, sparse=True)
+print(f"sympy.Array(42, sparse=True) = {b}")
+print(f"len(b) = {len(b)}")
+
+# Test that normal sparse arrays still work
+c = sympy.Array([1, 2, 3], sparse=True)
+print(f"sympy.Array([1, 2, 3], sparse=True) = {c}")
+print(f"len(c) = {len(c)}")
\ No newline at end of file
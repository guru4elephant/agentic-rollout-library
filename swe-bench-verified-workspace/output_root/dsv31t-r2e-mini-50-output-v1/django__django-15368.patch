diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..f2f9797d88 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,7 +670,7 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    if not hasattr(attr, 'resolve_expression'):
                         attr = Value(attr, output_field=field)
                     when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6391a81207
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Use the test settings from basic tests
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.basic.tests')
+
+# Import Django after setting the path
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import F
+
+# Configure minimal settings if needed
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100, default='test_name')
+    c8 = models.CharField(max_length=100, default='')
+    
+    class Meta:
+        app_label = 'test_app'
+
+def test_bulk_update_f_expression():
+    # Create a test database and table
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+    
+    try:
+        # Create a test instance
+        obj = TestModel.objects.create(name='original_name', c8='original_c8')
+        
+        # Try to use F expression in bulk_update
+        obj.c8 = F('name')
+        TestModel.objects.bulk_update([obj], ['c8'])
+        
+        # Refresh and check the result
+        obj.refresh_from_db()
+        print(f"Result: c8 = '{obj.c8}'")
+        
+        # Check the SQL queries - we need to look at the update query, not the select
+        if connection.queries and len(connection.queries) >= 2:
+            update_query = connection.queries[-2]  # The update should be second to last
+            print(f"Update query: {update_query['sql']}")
+            select_query = connection.queries[-1]  # The select is the last one
+            print(f"Select query: {select_query['sql']}")
+            
+        # The issue: c8 should be equal to name value, not 'F(name)'
+        if obj.c8 == 'original_name':
+            print("SUCCESS: F expression worked correctly!")
+            return True
+        else:
+            print("FAILURE: F expression did not work correctly!")
+            return False
+            
+    finally:
+        # Clean up
+        with connection.schema_editor() as schema_editor:
+            schema_editor.delete_model(TestModel)
+
+if __name__ == '__main__':
+    success = test_bulk_update_f_expression()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2e94408ca6
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Use the test settings from basic tests
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.basic.tests')
+
+# Import Django after setting the path
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import F, Value, Expression
+from django.db.models.expressions import CombinedExpression
+
+# Configure minimal settings if needed
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100, default='test_name')
+    c8 = models.CharField(max_length=100, default='')
+    number = models.IntegerField(default=0)
+    
+    class Meta:
+        app_label = 'test_app'
+
+def test_edge_cases():
+    # Create a test database and table
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+    
+    try:
+        # Test 1: Regular F expression (should work)
+        obj1 = TestModel.objects.create(name='test1', c8='original', number=5)
+        obj1.c8 = F('name')
+        TestModel.objects.bulk_update([obj1], ['c8'])
+        obj1.refresh_from_db()
+        print(f"Test 1 - F('name'): c8 = '{obj1.c8}' (expected: 'test1')")
+        
+        # Test 2: F expression with arithmetic (should work)
+        obj2 = TestModel.objects.create(name='test2', c8='original', number=10)
+        obj2.number = F('number') + 5
+        TestModel.objects.bulk_update([obj2], ['number'])
+        obj2.refresh_from_db()
+        print(f"Test 2 - F('number') + 5: number = {obj2.number} (expected: 15)")
+        
+        # Test 3: Regular value (should still work)
+        obj3 = TestModel.objects.create(name='test3', c8='original', number=20)
+        obj3.c8 = 'manual_value'
+        TestModel.objects.bulk_update([obj3], ['c8'])
+        obj3.refresh_from_db()
+        print(f"Test 3 - Regular value: c8 = '{obj3.c8}' (expected: 'manual_value')")
+        
+        # Test 4: Empty string value (should still work)
+        obj4 = TestModel.objects.create(name='test4', c8='original', number=30)
+        obj4.c8 = ''
+        TestModel.objects.bulk_update([obj4], ['c8'])
+        obj4.refresh_from_db()
+        print(f"Test 4 - Empty string: c8 = '{obj4.c8}' (expected: '')")
+        
+        # Test 5: Complex expression (should work if it has resolve_expression)
+        obj5 = TestModel.objects.create(name='test5', c8='original', number=40)
+        # Create a simple combined expression
+        obj5.number = F('number') * 2
+        TestModel.objects.bulk_update([obj5], ['number'])
+        obj5.refresh_from_db()
+        print(f"Test 5 - F('number') * 2: number = {obj5.number} (expected: 80)")
+        
+        return True
+        
+    except Exception as e:
+        print(f"Error: {e}")
+        return False
+        
+    finally:
+        # Clean up
+        with connection.schema_editor() as schema_editor:
+            schema_editor.delete_model(TestModel)
+
+if __name__ == '__main__':
+    success = test_edge_cases()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..acfa2ce1f3
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Use the test settings from basic tests
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.basic.tests')
+
+# Import Django after setting the path
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import F
+
+# Configure minimal settings if needed
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Create a model similar to the one described in the issue
+class SelfRef(models.Model):
+    name = models.CharField(max_length=100, default='test_name')
+    c8 = models.CharField(max_length=100, default='')
+    
+    class Meta:
+        app_label = 'test_app'
+
+def test_github_issue_scenario():
+    """Test the exact scenario described in the GitHub issue"""
+    # Create a test database and table
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(SelfRef)
+    
+    try:
+        # Create an object as described in the issue
+        o = SelfRef.objects.create(name='test_name', c8='initial_value')
+        
+        # Reproduce the exact steps from the issue
+        o.c8 = F('name')  # assign plain F(...) to some model instance field
+        SelfRef.objects.bulk_update([o], ['c8'])  # save with bulk_update
+        
+        # Refresh and check the result
+        o.refresh_from_db()
+        print(f"o.c8 = '{o.c8}'")
+        
+        # Check the SQL query - should not contain the string 'F(name)'
+        if connection.queries and len(connection.queries) >= 2:
+            update_query = connection.queries[-2]  # The update should be second to last
+            print(f"Update query: {update_query['sql']}")
+            
+            # The issue was that the SQL contained the string repr of F()
+            if "'F(name)'" in update_query['sql']:
+                print("FAILURE: SQL still contains string representation of F()")
+                return False
+            elif '"test_app_selfref"."name"' in update_query['sql']:
+                print("SUCCESS: SQL correctly references the column name")
+            else:
+                print("WARNING: SQL format changed, but doesn't contain the problematic string")
+        
+        # The issue: c8 should be equal to name value, not 'F(name)'
+        if o.c8 == 'test_name':
+            print("SUCCESS: F expression worked correctly!")
+            return True
+        else:
+            print(f"FAILURE: Expected 'test_name', got '{o.c8}'")
+            return False
+            
+    except Exception as e:
+        print(f"Error: {e}")
+        return False
+        
+    finally:
+        # Clean up
+        with connection.schema_editor() as schema_editor:
+            schema_editor.delete_model(SelfRef)
+
+if __name__ == '__main__':
+    success = test_github_issue_scenario()
+    if success:
+        print("\n✅ GitHub issue has been fixed!")
+    else:
+        print("\n❌ GitHub issue is NOT fixed!")
+    sys.exit(0 if success else 1)
\ No newline at end of file
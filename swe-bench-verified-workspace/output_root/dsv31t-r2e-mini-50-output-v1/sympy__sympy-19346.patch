diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dcbc5d921b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y
+
+print("Testing srepr with different container types:")
+print()
+
+# Test list (should work correctly)
+print("List:")
+result = srepr([x, y])
+print(f"srepr([x, y]) = {result}")
+expected_list = "[Symbol('x'), Symbol('y')]"
+print(f"Expected: {expected_list}")
+print(f"Match: {result == expected_list}")
+print()
+
+# Test tuple (should work correctly)
+print("Tuple:")
+result = srepr((x, y))
+print(f"srepr((x, y)) = {result}")
+expected_tuple = "(Symbol('x'), Symbol('y'))"
+print(f"Expected: {expected_tuple}")
+print(f"Match: {result == expected_tuple}")
+print()
+
+# Test set (currently broken)
+print("Set:")
+result = srepr({x, y})
+print(f"srepr({{x, y}}) = {result}")
+expected_set = "{Symbol('x'), Symbol('y')}"
+print(f"Expected: {expected_set}")
+print(f"Match: {result == expected_set}")
+print()
+
+# Test dict (currently broken)
+print("Dict:")
+result = srepr({x: y})
+print(f"srepr({{x: y}}) = {result}")
+expected_dict = "{Symbol('x'): Symbol('y')}"
+print(f"Expected: {expected_dict}")
+print(f"Match: {result == expected_dict}")
+print()
\ No newline at end of file
diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py
index c936a692c0..34ebe979f4 100644
--- a/sympy/printing/repr.py
+++ b/sympy/printing/repr.py
@@ -144,6 +144,17 @@ def _print_EmptySequence(self, expr):
     def _print_list(self, expr):
         return "[%s]" % self.reprify(expr, ", ")
 
+    def _print_dict(self, expr):
+        items = []
+        for key, value in expr.items():
+            items.append("%s: %s" % (self._print(key), self._print(value)))
+        return "{%s}" % ", ".join(items)
+
+    def _print_set(self, expr):
+        # Sort elements for deterministic output
+        sorted_elements = sorted(expr, key=str)
+        return "{%s}" % self.reprify(sorted_elements, ", ")
+
     def _print_MatrixBase(self, expr):
         # special case for some empty matrices
         if (expr.rows == 0) ^ (expr.cols == 0):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f6512d3226
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y, z
+
+print("Testing edge cases for srepr:")
+print()
+
+# Test empty containers
+print("Empty containers:")
+print(f"srepr([]) = {srepr([])}")
+print(f"srepr(()) = {srepr(())}")
+print(f"srepr(set()) = {srepr(set())}")
+print(f"srepr(dict()) = {srepr(dict())}")
+print()
+
+# Test nested containers
+print("Nested containers:")
+print(f"srepr([[x], [y]]) = {srepr([[x], [y]])}")
+print(f"srepr(({x}, {y})) = {srepr(({x}, {y}))}")
+print(f"srepr({{x: {y}}}) = {srepr({x: {y}})}")
+print(f"srepr([{{x: y}}]) = {srepr([{x: y}])}")
+print()
+
+# Test containers with mixed types
+print("Mixed types:")
+print(f"srepr([x, 1, 'test']) = {srepr([x, 1, 'test'])}")
+print(f"srepr({{x: 1, y: 'test'}}) = {srepr({x: 1, y: 'test'})}")
+print(f"srepr({{x, 1, 'test'}}) = {srepr({x, 1, 'test'})}")
+print()
+
+# Test containers with same elements (should work for set)
+print("Set with same elements:")
+print(f"srepr({{x, x}}) = {srepr({x, x})}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..a4aa393864
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y
+
+print("Testing the exact examples from the GitHub issue:")
+print()
+
+# Test the examples that should work correctly (from the issue)
+print("Examples that should work correctly:")
+print(f"srepr([x, y]) = {srepr([x, y])}")
+print(f"srepr((x, y)) = {srepr((x, y))}")
+print()
+
+# Test the examples that were broken (from the issue)
+print("Examples that were broken but should now work:")
+print(f"srepr({{x, y}}) = {srepr({x, y})}")
+print(f"srepr({{x: y}}) = {srepr({x: y})}")
+print()
+
+# Verify they match the expected output from the issue
+expected_list = "[Symbol('x'), Symbol('y')]"
+expected_tuple = "(Symbol('x'), Symbol('y'))" 
+expected_set = "{Symbol('x'), Symbol('y')}"
+expected_dict = "{Symbol('x'): Symbol('y')}"
+
+print("Verification:")
+print(f"List match: {srepr([x, y]) == expected_list}")
+print(f"Tuple match: {srepr((x, y)) == expected_tuple}")
+print(f"Set match: {srepr({x, y}) == expected_set}")
+print(f"Dict match: {srepr({x: y}) == expected_dict}")
+print()
+
+print("All examples from the GitHub issue are now working correctly!")
\ No newline at end of file
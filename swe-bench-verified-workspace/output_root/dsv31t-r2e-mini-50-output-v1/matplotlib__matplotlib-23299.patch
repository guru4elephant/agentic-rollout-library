diff --git a/debug_backend.py b/debug_backend.py
new file mode 100644
index 0000000000..d4273b1805
--- /dev/null
+++ b/debug_backend.py
@@ -0,0 +1,19 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print(f"rcParams['backend']: {plt.rcParams['backend']}")
+print(f"rcsetup._auto_backend_sentinel: {rcsetup._auto_backend_sentinel}")
+print(f"Are they the same? {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/debug_rcparams.py b/debug_rcparams.py
new file mode 100644
index 0000000000..2a973876c8
--- /dev/null
+++ b/debug_rcparams.py
@@ -0,0 +1,24 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Debugging rcParams access ===")
+print(f"rcParams['backend'] type: {type(plt.rcParams['backend'])}")
+print(f"rcParams['backend'] value: {plt.rcParams['backend']}")
+
+# Check if accessing rcParams['backend'] triggers anything
+print("About to access rcParams['backend']...")
+result = plt.rcParams['backend']
+print(f"Result: {result}")
+
+# Now test the issue
+print("\n=== Testing the issue ===")
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/debug_rcparams_getitem.py b/debug_rcparams_getitem.py
new file mode 100644
index 0000000000..5470fcc5ee
--- /dev/null
+++ b/debug_rcparams_getitem.py
@@ -0,0 +1,29 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+# Monkey patch RcParams.__getitem__ to add debugging
+original_getitem = plt.rcParams.__class__.__getitem__
+
+def debug_getitem(self, key):
+    print(f"RcParams.__getitem__ called with key: {key}")
+    if key == "backend":
+        val = dict.__getitem__(self, key)
+        print(f"Backend value: {val}")
+        print(f"Auto backend sentinel: {rcsetup._auto_backend_sentinel}")
+        print(f"Are they the same? {val is rcsetup._auto_backend_sentinel}")
+        print(f"Self is global rcParams: {self is globals().get('rcParams')}")
+    return original_getitem(self, key)
+
+plt.rcParams.__class__.__getitem__ = debug_getitem
+
+print("=== Testing with debug RcParams.__getitem__ ===")
+
+with rc_context():
+    fig2 = plt.figure()
+
+print(f"Figures before get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+get_backend()
+
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
\ No newline at end of file
diff --git a/detailed_debug.py b/detailed_debug.py
new file mode 100644
index 0000000000..a74dcb43ff
--- /dev/null
+++ b/detailed_debug.py
@@ -0,0 +1,36 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Detailed Debug ===")
+print(f"Initial rcParams['backend']: {plt.rcParams['backend']}")
+print(f"rcsetup._auto_backend_sentinel: {rcsetup._auto_backend_sentinel}")
+print(f"Are they the same? {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+# Test what happens when we directly access rcParams['backend']
+print("\n=== Direct rcParams access ===")
+print("About to access plt.rcParams['backend'] directly...")
+figures_before = list(plt._pylab_helpers.Gcf.figs.keys())
+print(f"Figures before: {figures_before}")
+backend_value = plt.rcParams['backend']
+print(f"Backend value: {backend_value}")
+figures_after = list(plt._pylab_helpers.Gcf.figs.keys())
+print(f"Figures after: {figures_after}")
+print(f"Figures changed: {figures_before != figures_after}")
+
+# Clear figures
+plt.close('all')
+
+# Now test the original issue
+print("\n=== Original issue test ===")
+with rc_context():
+    fig2 = plt.figure()
+    
+figures_before = list(plt._pylab_helpers.Gcf.figs.keys())
+print(f"Figures after rc_context: {figures_before}")
+
+print("About to call get_backend()...")
+get_backend()
+figures_after = list(plt._pylab_helpers.Gcf.figs.keys())
+print(f"Figures after get_backend(): {figures_after}")
+print(f"Figures changed: {figures_before != figures_after}")
\ No newline at end of file
diff --git a/exact_reproduction.py b/exact_reproduction.py
new file mode 100644
index 0000000000..138c4730a8
--- /dev/null
+++ b/exact_reproduction.py
@@ -0,0 +1,25 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+print("=== Exact reproduction with debugging ===")
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+    print(f"Figure created inside rc_context: {fig2.number}")
+    print(f"Gcf.figs after creation: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+
+# Let's see what get_backend() actually does step by step
+print("About to call get_backend()...")
+result = get_backend()
+print(f"get_backend() returned: {result}")
+
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
+print("SUCCESS: Figures were not cleared!")
\ No newline at end of file
diff --git a/final_debug.py b/final_debug.py
new file mode 100644
index 0000000000..da3da61057
--- /dev/null
+++ b/final_debug.py
@@ -0,0 +1,31 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Final Debug ===")
+
+# Check initial state
+print(f"Initial backend: {plt.rcParams['backend']}")
+print(f"Initial is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+    print(f"Inside rc_context backend: {plt.rcParams['backend']}")
+    print(f"Inside rc_context is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+print(f"After rc_context backend: {plt.rcParams['backend']}")
+print(f"After rc_context is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+
+# Let's see what get_backend() actually returns
+result = get_backend()
+print(f"get_backend() returned: {result}")
+
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..1e23e09272 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1175,7 +1175,35 @@ def get_backend():
     --------
     matplotlib.use
     """
-    return rcParams['backend']
+    # Get the backend value directly without triggering automatic switching
+    backend = dict.__getitem__(rcParams, 'backend')
+    if backend is rcsetup._auto_backend_sentinel:
+        # If backend is auto, we need to determine the actual backend without
+        # triggering the automatic switching that would destroy figures
+        current_framework = cbook._get_running_interactive_framework()
+        mapping = {'qt': 'qtagg',
+                   'gtk3': 'gtk3agg',
+                   'gtk4': 'gtk4agg',
+                   'wx': 'wxagg',
+                   'tk': 'tkagg',
+                   'macosx': 'macosx',
+                   'headless': 'agg'}
+        
+        best_guess = mapping.get(current_framework, None)
+        if best_guess is not None:
+            return best_guess
+        else:
+            # Fallback to the first available candidate
+            candidates = ["macosx", "qtagg", "gtk4agg", "gtk3agg", "tkagg", "wxagg", "agg"]
+            for candidate in candidates:
+                try:
+                    # Try to import the backend module to check if it's available
+                    importlib.import_module(f"matplotlib.backends.backend_{candidate}")
+                    return candidate
+                except ImportError:
+                    continue
+            return "agg"  # Final fallback
+    return backend
 
 
 def interactive(b):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f56fa665fc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/test_auto_backend.py b/test_auto_backend.py
new file mode 100644
index 0000000000..15f96ce63c
--- /dev/null
+++ b/test_auto_backend.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Testing with auto backend ===")
+
+# Force the backend to be the auto sentinel
+plt.rcParams['backend'] = rcsetup._auto_backend_sentinel
+print(f"Forced backend to auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+# Now test with rc_context
+with rc_context():
+    fig2 = plt.figure()
+    print(f"Inside rc_context backend: {plt.rcParams['backend']}")
+    print(f"Inside rc_context is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+print(f"After rc_context backend: {plt.rcParams['backend']}")
+print(f"Figures after rc_context: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Now call get_backend()
+print("Calling get_backend()...")
+get_backend()
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..800ad169d6
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+print("=== Testing edge cases ===")
+
+# Test 1: Normal case without rc_context
+plt.close('all')
+fig1 = plt.figure()
+print(f"Normal figure: {fig1.number}")
+result = get_backend()
+print(f"get_backend() returned: {result}")
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Test 2: rc_context with no parameters
+plt.close('all')
+with rc_context():
+    fig2 = plt.figure()
+    print(f"rc_context figure: {fig2.number}")
+result = get_backend()
+print(f"get_backend() returned: {result}")
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Test 3: rc_context with custom parameters
+plt.close('all')
+with rc_context({'lines.linewidth': 3}):
+    fig3 = plt.figure()
+    print(f"rc_context with params figure: {fig3.number}")
+result = get_backend()
+print(f"get_backend() returned: {result}")
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Test 4: Multiple figures
+plt.close('all')
+with rc_context():
+    fig4 = plt.figure()
+    fig5 = plt.figure()
+    print(f"Multiple figures: {fig4.number}, {fig5.number}")
+result = get_backend()
+print(f"get_backend() returned: {result}")
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+print("All tests passed!")
\ No newline at end of file
diff --git a/test_first_figure.py b/test_first_figure.py
new file mode 100644
index 0000000000..23cecae764
--- /dev/null
+++ b/test_first_figure.py
@@ -0,0 +1,27 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Testing first figure behavior ===")
+
+# Close any existing figures
+plt.close('all')
+
+# Check initial state
+print(f"Initial backend: {plt.rcParams['backend']}")
+print(f"Initial is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+# Create the first figure under rc_context (as described in the issue)
+with rc_context():
+    fig2 = plt.figure()
+    print(f"First figure created under rc_context: {fig2.number}")
+    print(f"Backend inside rc_context: {plt.rcParams['backend']}")
+    print(f"Is auto sentinel inside rc_context: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+print(f"Backend after rc_context: {plt.rcParams['backend']}")
+print(f"Figures after rc_context: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Now call get_backend()
+print("Calling get_backend()...")
+get_backend()
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
\ No newline at end of file
diff --git a/test_rc_context.py b/test_rc_context.py
new file mode 100644
index 0000000000..d373b5d24e
--- /dev/null
+++ b/test_rc_context.py
@@ -0,0 +1,34 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Testing rc_context behavior ===")
+
+# Test 1: Create figure outside rc_context
+print("Creating figure outside rc_context...")
+fig1 = plt.figure()
+print(f"Figures after outside creation: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Test 2: Create figure inside rc_context
+print("Creating figure inside rc_context...")
+with rc_context():
+    fig2 = plt.figure()
+print(f"Figures after inside creation: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Test 3: Call get_backend()
+print("Calling get_backend()...")
+get_backend()
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+print("=== Testing with only rc_context figure ===")
+# Clear all figures
+plt.close('all')
+
+# Now test the original issue
+with rc_context():
+    fig3 = plt.figure()
+print(f"Figures after rc_context creation: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+print("Calling get_backend() again...")
+get_backend()
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
\ No newline at end of file
diff --git a/test_rc_context_backend.py b/test_rc_context_backend.py
new file mode 100644
index 0000000000..9b60a2dc11
--- /dev/null
+++ b/test_rc_context_backend.py
@@ -0,0 +1,22 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Testing rc_context backend behavior ===")
+
+# Check backend before rc_context
+print(f"Backend before rc_context: {plt.rcParams['backend']}")
+
+# Check if backend changes during rc_context
+with rc_context():
+    print(f"Backend inside rc_context: {plt.rcParams['backend']}")
+    fig2 = plt.figure()
+    print(f"Figures inside rc_context: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+print(f"Backend after rc_context: {plt.rcParams['backend']}")
+print(f"Figures after rc_context: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Now call get_backend()
+print("Calling get_backend()...")
+get_backend()
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
\ No newline at end of file
diff --git a/test_rc_context_backend_debug.py b/test_rc_context_backend_debug.py
new file mode 100644
index 0000000000..ae9184fcd6
--- /dev/null
+++ b/test_rc_context_backend_debug.py
@@ -0,0 +1,26 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Testing rc_context backend behavior in detail ===")
+
+# Check the global rcParams backend
+print(f"Global rcParams backend: {plt.rcParams['backend']}")
+print(f"Global rcParams is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+# Now test with rc_context
+with rc_context():
+    # Check the temporary rcParams backend
+    print(f"Temporary rcParams backend: {plt.rcParams['backend']}")
+    print(f"Temporary rcParams is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+    
+    fig2 = plt.figure()
+    print(f"Figures inside rc_context: {list(plt._pylab_helpers.Gcf.figs.keys())}")
+
+# Check global rcParams again
+print(f"Global rcParams backend after: {plt.rcParams['backend']}")
+
+# Now call get_backend() - this should access the global rcParams
+print("Calling get_backend()...")
+get_backend()
+print(f"Figures after get_backend(): {list(plt._pylab_helpers.Gcf.figs.keys())}")
\ No newline at end of file
diff --git a/test_rc_context_copy.py b/test_rc_context_copy.py
new file mode 100644
index 0000000000..58fe6b319a
--- /dev/null
+++ b/test_rc_context_copy.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+from matplotlib import rcsetup
+
+print("=== Testing rc_context copy behavior ===")
+
+# Check the global rcParams backend
+print(f"Global rcParams backend: {plt.rcParams['backend']}")
+print(f"Global rcParams is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+# Create a copy of rcParams like rc_context does
+rc_copy = plt.rcParams.copy()
+print(f"Copy rcParams backend: {rc_copy['backend']}")
+print(f"Copy rcParams is auto sentinel: {rc_copy['backend'] is rcsetup._auto_backend_sentinel}")
+
+# Check if accessing the backend from the copy triggers anything
+print("Accessing backend from copy...")
+backend_value = rc_copy['backend']
+print(f"Backend value from copy: {backend_value}")
+
+# Now test with actual rc_context
+print("\n=== Testing with actual rc_context ===")
+with rc_context():
+    fig2 = plt.figure()
+    print(f"Inside rc_context backend: {plt.rcParams['backend']}")
+    print(f"Inside rc_context is auto sentinel: {plt.rcParams['backend'] is rcsetup._auto_backend_sentinel}")
+
+print(f"After rc_context backend: {plt.rcParams['backend']}")
\ No newline at end of file
diff --git a/test_workarounds.py b/test_workarounds.py
new file mode 100644
index 0000000000..d7c78e0ceb
--- /dev/null
+++ b/test_workarounds.py
@@ -0,0 +1,30 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+print("=== Testing original workarounds ===")
+
+# Workaround 1: Create a figure outside rc_context first
+plt.close('all')
+fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+assert before == after, '\n' + before + '\n' + after
+print("Workaround 1 (figure outside rc_context) passed!")
+
+# Workaround 2: Call plt.ion() first
+plt.close('all')
+plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+assert before == after, '\n' + before + '\n' + after
+print("Workaround 2 (plt.ion()) passed!")
+
+print("All workarounds still work!")
\ No newline at end of file
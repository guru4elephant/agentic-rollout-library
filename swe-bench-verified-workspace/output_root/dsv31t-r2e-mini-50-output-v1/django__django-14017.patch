diff --git a/debug_combine.py b/debug_combine.py
new file mode 100644
index 0000000000..ba1f71032b
--- /dev/null
+++ b/debug_combine.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Debugging _combine method")
+
+exists_obj = Exists(Product.objects.all())
+q_obj = Q()
+
+# Let's manually trace what happens in _combine
+print("1. Testing _combine with OR connector:")
+try:
+    result = q_obj._combine(exists_obj, Q.OR)
+    print(f"Result: {result}")
+    print(f"Result connector: {result.connector}")
+    print(f"Result children: {result.children}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\n2. Testing _combine with AND connector:")
+try:
+    result = q_obj._combine(exists_obj, Q.AND)
+    print(f"Result: {result}")
+    print(f"Result connector: {result.connector}")
+    print(f"Result children: {result.children}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/debug_connector.py b/debug_connector.py
new file mode 100644
index 0000000000..0d9488a828
--- /dev/null
+++ b/debug_connector.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Debugging connector types")
+
+exists_obj = Exists(Product.objects.all())
+q_obj = Q()
+
+print(f"Q.AND: {Q.AND}")
+print(f"Q.OR: {Q.OR}")
+
+# Let's trace what happens in __ror__
+print("\nTracing __ror__ method:")
+try:
+    result = exists_obj.__ror__(q_obj)
+    print(f"Result: {result}")
+    print(f"Result connector: {result.connector}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nTracing direct OR operation:")
+try:
+    result = q_obj | exists_obj
+    print(f"Result: {result}")
+    print(f"Result connector: {result.connector}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/debug_detailed.py b/debug_detailed.py
new file mode 100644
index 0000000000..6a46d51f24
--- /dev/null
+++ b/debug_detailed.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Detailed debugging of Q() & Exists(...)")
+
+exists_obj = Exists(Product.objects.all())
+q_obj = Q()
+
+print("Testing the __rand__ method directly with traceback:")
+import traceback
+try:
+    result = exists_obj.__rand__(q_obj)
+    print(f"✓ Success: {result}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+    print("Full traceback:")
+    traceback.print_exc()
+
+print("\nTesting Q construction separately:")
+try:
+    q_with_exists = Q(exists_obj)
+    print(f"Q(exists_obj) works: {q_with_exists}")
+    
+    # Now try to combine them
+    result = q_obj & q_with_exists
+    print(f"Q() & Q(exists_obj) works: {result}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+    traceback.print_exc()
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..8a7af5e614
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Debugging Q() & Exists(...) issue")
+
+# Let's check what methods Exists has
+exists_obj = Exists(Product.objects.all())
+print(f"Exists object: {exists_obj}")
+print(f"Has __rand__: {hasattr(exists_obj, '__rand__')}")
+print(f"Has __and__: {hasattr(exists_obj, '__and__')}")
+
+# Let's see what happens step by step
+print("\nStep by step debugging:")
+print("1. Creating Q() object")
+q_obj = Q()
+print(f"Q object: {q_obj}")
+
+print("2. Trying Q() & Exists(...)")
+try:
+    result = q_obj.__and__(exists_obj)
+    print(f"✓ Success via __and__: {result}")
+except Exception as e:
+    print(f"✗ Failed via __and__: {e}")
+
+print("3. Trying Exists(...).__rand__(Q())")
+try:
+    result = exists_obj.__rand__(q_obj)
+    print(f"✓ Success via __rand__: {result}")
+except Exception as e:
+    print(f"✗ Failed via __rand__: {e}")
\ No newline at end of file
diff --git a/debug_or_operator.py b/debug_or_operator.py
new file mode 100644
index 0000000000..98ca4cd692
--- /dev/null
+++ b/debug_or_operator.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Debugging OR operator")
+
+exists_obj = Exists(Product.objects.all())
+q_obj = Q()
+
+print("1. Testing exists_obj.__ror__(q_obj)")
+try:
+    result1 = exists_obj.__ror__(q_obj)
+    print(f"✓ Success: {result1}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\n2. Testing q_obj.__or__(exists_obj)")
+try:
+    result2 = q_obj.__or__(exists_obj)
+    print(f"✓ Success: {result2}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\n3. Testing direct OR operation")
+try:
+    result3 = q_obj | exists_obj
+    print(f"✓ Success: {result3}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
\ No newline at end of file
diff --git a/debug_q_construction.py b/debug_q_construction.py
new file mode 100644
index 0000000000..2eff77fada
--- /dev/null
+++ b/debug_q_construction.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Debugging Q construction with Exists")
+
+exists_obj = Exists(Product.objects.all())
+print(f"Exists object: {exists_obj}")
+
+# Let's try different ways to create Q objects
+print("\n1. Trying Q(exists_obj)")
+try:
+    q1 = Q(exists_obj)
+    print(f"✓ Success: {q1}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\n2. Trying Q() with exists_obj as argument")
+try:
+    q2 = Q(exists_obj)
+    print(f"✓ Success: {q2}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\n3. Trying to understand what Q() expects")
+try:
+    # Let's see what happens with a simple value
+    q3 = Q(some_field=True)
+    print(f"✓ Q(some_field=True) works: {q3}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\n4. Let's check the Q class constructor")
+print(f"Q.__doc__: {Q.__doc__}")
\ No newline at end of file
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..8cc0c3ffd4 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1160,6 +1160,20 @@ class Exists(Subquery):
         clone.negated = not self.negated
         return clone
 
+    def __rand__(self, other):
+        # Handle Q() & Exists(...) case
+        from django.db.models import Q
+        if isinstance(other, Q):
+            return other & Q(self)
+        return super().__rand__(other)
+
+    def __ror__(self, other):
+        # Handle Q() | Exists(...) case  
+        from django.db.models import Q
+        if isinstance(other, Q):
+            return other | Q(self)
+        return super().__ror__(other)
+
     def as_sql(self, compiler, connection, template=None, **extra_context):
         query = self.query.exists(using=connection.alias)
         sql, params = super().as_sql(
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..e46fa718d4 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,7 +41,12 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
-            raise TypeError(other)
+            # Handle non-Q objects (like Exists) by wrapping them in Q
+            from django.db.models.expressions import BaseExpression
+            if isinstance(other, BaseExpression):
+                other = Q(other)
+            else:
+                raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
@@ -50,7 +55,9 @@ class Q(tree.Node):
         # Or if this Q is empty, ignore it and just use `other`.
         elif not self:
             _, args, kwargs = other.deconstruct()
-            return type(other)(*args, **kwargs)
+            result = type(other)(*args, **kwargs)
+            result.connector = conn
+            return result
 
         obj = type(self)()
         obj.connector = conn
@@ -87,7 +94,12 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            # Handle expression objects (like Exists) that are not tuples
+            from django.db.models.expressions import BaseExpression
+            if isinstance(child, BaseExpression):
+                args = (child,)
+            else:
+                kwargs = {child[0]: child[1]}
         else:
             args = tuple(self.children)
             if self.connector != self.default:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3dae2ac428
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Testing Q() & Exists(...) vs Exists(...) & Q()")
+
+# Test case 1: Exists(...) & Q() - should work
+print("\n1. Testing Exists(...) & Q():")
+try:
+    result1 = Exists(Product.objects.all()) & Q()
+    print(f"✓ Success: {result1}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test case 2: Q() & Exists(...) - should raise TypeError
+print("\n2. Testing Q() & Exists(...):")
+try:
+    result2 = Q() & Exists(Product.objects.all())
+    print(f"✓ Success: {result2}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\nThe issue is that Q() & Exists(...) raises a TypeError while Exists(...) & Q() works fine.")
\ No newline at end of file
diff --git a/test_or_operator.py b/test_or_operator.py
new file mode 100644
index 0000000000..7cccc797be
--- /dev/null
+++ b/test_or_operator.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+
+    class Meta:
+        app_label = 'test'
+
+print("Testing Q() | Exists(...) vs Exists(...) | Q()")
+
+# Test case 1: Exists(...) | Q() - should work
+print("\n1. Testing Exists(...) | Q():")
+try:
+    result1 = Exists(Product.objects.all()) | Q()
+    print(f"✓ Success: {result1}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test case 2: Q() | Exists(...) - should work now
+print("\n2. Testing Q() | Exists(...):")
+try:
+    result2 = Q() | Exists(Product.objects.all())
+    print(f"✓ Success: {result2}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\nTesting both operators work correctly!")
\ No newline at end of file
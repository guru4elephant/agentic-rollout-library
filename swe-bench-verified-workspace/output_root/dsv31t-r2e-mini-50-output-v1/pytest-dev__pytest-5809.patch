diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..960121a94
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""Script to reproduce the pastebin lexer issue."""
+
+import sys
+from urllib.request import urlopen
+from urllib.parse import urlencode
+
+# Create test data that causes HTTP 400 error with python3 lexer
+# This simulates the problematic content mentioned in the issue
+test_content = b"""test session starts
+platform linux -- Python 3.8.0, pytest-5.2.1, py-1.8.0, pluggy-0.13.0
+rootdir: /tmp
+collected 1 item
+
+test_file.py::test_func FAILED
+
+=================================== FAILURES ===================================
+___________________________________ test_func ___________________________________
+
+    def test_func():
+>       assert False
+E       assert False
+
+test_file.py:2: AssertionError
+=========================== short test summary info ============================
+FAILED test_file.py::test_func - assert False
+============================== 1 failed in 0.12s ===============================
+"""
+
+def test_with_python3_lexer():
+    """Test with python3 lexer (should fail with HTTP 400)"""
+    params = {
+        "code": test_content,
+        "lexer": "python3",
+        "expiry": "1week",
+    }
+    url = "https://bpaste.net"
+    try:
+        response = urlopen(url, data=urlencode(params).encode("ascii"))
+        print("SUCCESS: python3 lexer worked")
+        return True
+    except Exception as e:
+        print(f"FAILED: python3 lexer caused error: {e}")
+        return False
+
+def test_with_text_lexer():
+    """Test with text lexer (should work)"""
+    params = {
+        "code": test_content,
+        "lexer": "text",
+        "expiry": "1week",
+    }
+    url = "https://bpaste.net"
+    try:
+        response = urlopen(url, data=urlencode(params).encode("ascii"))
+        print("SUCCESS: text lexer worked")
+        return True
+    except Exception as e:
+        print(f"FAILED: text lexer caused error: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("Testing pastebin with different lexers...")
+    print("=" * 50)
+    
+    print("Testing with python3 lexer:")
+    result1 = test_with_python3_lexer()
+    
+    print("\nTesting with text lexer:")
+    result2 = test_with_text_lexer()
+    
+    print("\n" + "=" * 50)
+    if not result1 and result2:
+        print("Issue reproduced: python3 lexer fails, text lexer works")
+    else:
+        print("Issue not reproduced as expected")
\ No newline at end of file
diff --git a/src/_pytest/pastebin.py b/src/_pytest/pastebin.py
index 41576a615..79b0d9d40 100644
--- a/src/_pytest/pastebin.py
+++ b/src/_pytest/pastebin.py
@@ -79,7 +79,7 @@ def create_new_paste(contents):
 
     params = {
         "code": contents,
-        "lexer": "python3" if sys.version_info[0] >= 3 else "python",
+        "lexer": "text",
         "expiry": "1week",
     }
     url = "https://bpaste.net"
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..41e7fa529
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""Test to verify the fix works correctly."""
+
+import sys
+sys.path.insert(0, 'src')
+
+from _pytest.pastebin import create_new_paste
+
+def test_lexer_change():
+    """Test that create_new_paste now uses 'text' lexer instead of 'python3'."""
+    # Mock the urlopen function to capture the parameters
+    original_urlopen = None
+    captured_params = {}
+    
+    if sys.version_info < (3, 0):
+        import urllib
+        original_urlopen = urllib.urlopen
+        def mock_urlopen(url, data):
+            captured_params['url'] = url
+            captured_params['data'] = data
+            class MockResponse:
+                def read(self):
+                    return b'View <a href="/raw/3c0c6750bd">raw</a>.'
+            return MockResponse()
+        urllib.urlopen = mock_urlopen
+    else:
+        import urllib.request
+        original_urlopen = urllib.request.urlopen
+        def mock_urlopen(url, data):
+            captured_params['url'] = url
+            captured_params['data'] = data
+            class MockResponse:
+                def read(self):
+                    return b'View <a href="/raw/3c0c6750bd">raw</a>.'
+            return MockResponse()
+        urllib.request.urlopen = mock_urlopen
+    
+    try:
+        # Call the function
+        result = create_new_paste(b"test content")
+        
+        # Check that the result is correct
+        assert result == "https://bpaste.net/show/3c0c6750bd"
+        
+        # Check that the lexer parameter is now "text" instead of "python3"
+        data_str = captured_params['data'].decode('ascii')
+        assert "lexer=text" in data_str
+        assert "code=test+content" in data_str  # URL encoding converts spaces to +
+        assert "expiry=1week" in data_str
+        
+        print("SUCCESS: Lexer changed from 'python3' to 'text'")
+        return True
+        
+    except Exception as e:
+        import traceback
+        print(f"FAILED: {e}")
+        traceback.print_exc()
+        return False
+    finally:
+        # Restore original urlopen
+        if sys.version_info < (3, 0):
+            import urllib
+            urllib.urlopen = original_urlopen
+        else:
+            import urllib.request
+            urllib.request.urlopen = original_urlopen
+
+if __name__ == "__main__":
+    print("Testing the lexer fix...")
+    success = test_lexer_change()
+    if success:
+        print("Fix verified successfully!")
+    else:
+        print("Fix verification failed!")
\ No newline at end of file
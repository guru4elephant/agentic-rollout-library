diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..d530a02c08
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,131 @@
+import matplotlib.pyplot as plt
+import pickle
+
+def test_basic_alignment_and_pickle():
+    """Test basic alignment and pickling functionality"""
+    fig = plt.figure()
+    ax1 = fig.add_subplot(211)
+    ax2 = fig.add_subplot(212)
+    time = [0, 1, 2, 3, 4]
+    speed = [40000, 4300, 4500, 4700, 4800]
+    acc = [10, 11, 12, 13, 14]
+    ax1.plot(time, speed)
+    ax1.set_ylabel('speed')
+    ax2.plot(time, acc)
+    ax2.set_ylabel('acc')
+
+    # Test alignment works
+    fig.align_labels()
+
+    # Test pickling works
+    try:
+        pickle_data = pickle.dumps(fig)
+        print("✓ Basic pickling successful")
+        
+        # Test unpickling works
+        fig2 = pickle.loads(pickle_data)
+        print("✓ Basic unpickling successful")
+        
+        # Test that alignment groups are reinitialized properly
+        assert isinstance(fig2._align_label_groups['x'], plt.cbook.Grouper)
+        assert isinstance(fig2._align_label_groups['y'], plt.cbook.Grouper)
+        print("✓ Alignment groups properly reinitialized")
+        
+    except Exception as e:
+        print(f"✗ Basic test failed: {e}")
+        return False
+    return True
+
+def test_multiple_alignments():
+    """Test multiple alignment calls and pickling"""
+    fig = plt.figure()
+    for i in range(1, 5):
+        ax = fig.add_subplot(2, 2, i)
+        ax.plot([0, 1, 2], [0, 1, 2])
+        ax.set_xlabel(f'xlabel {i}')
+        ax.set_ylabel(f'ylabel {i}')
+
+    # Call align multiple times
+    fig.align_labels()
+    fig.align_xlabels()
+    fig.align_ylabels()
+
+    try:
+        pickle_data = pickle.dumps(fig)
+        print("✓ Multiple alignment pickling successful")
+        
+        fig2 = pickle.loads(pickle_data)
+        print("✓ Multiple alignment unpickling successful")
+        
+    except Exception as e:
+        print(f"✗ Multiple alignment test failed: {e}")
+        return False
+    return True
+
+def test_empty_grouper():
+    """Test pickling of empty Grouper objects"""
+    from matplotlib.cbook import Grouper
+    
+    grouper = Grouper()
+    try:
+        pickle_data = pickle.dumps(grouper)
+        grouper2 = pickle.loads(pickle_data)
+        print("✓ Empty Grouper pickling successful")
+        
+        # Test that the unpickled grouper works correctly
+        class TestObj:
+            def __init__(self, name):
+                self.name = name
+        
+        obj1, obj2 = TestObj('a'), TestObj('b')
+        grouper2.join(obj1, obj2)
+        assert grouper2.joined(obj1, obj2)
+        print("✓ Unpickled Grouper functionality works")
+        
+    except Exception as e:
+        print(f"✗ Empty Grouper test failed: {e}")
+        return False
+    return True
+
+def test_populated_grouper():
+    """Test pickling of populated Grouper objects"""
+    from matplotlib.cbook import Grouper
+    
+    class TestObj:
+        def __init__(self, name):
+            self.name = name
+    
+    obj1, obj2, obj3 = TestObj('a'), TestObj('b'), TestObj('c')
+    
+    grouper = Grouper()
+    grouper.join(obj1, obj2)
+    
+    try:
+        pickle_data = pickle.dumps(grouper)
+        grouper2 = pickle.loads(pickle_data)
+        print("✓ Populated Grouper pickling successful")
+        
+        # After unpickling, the groups should be empty (reinitialized)
+        assert not grouper2.joined(obj1, obj2)
+        print("✓ Populated Grouper correctly reinitialized")
+        
+    except Exception as e:
+        print(f"✗ Populated Grouper test failed: {e}")
+        return False
+    return True
+
+if __name__ == "__main__":
+    print("Running comprehensive tests...")
+    results = []
+    
+    results.append(test_basic_alignment_and_pickle())
+    results.append(test_multiple_alignments())
+    results.append(test_empty_grouper())
+    results.append(test_populated_grouper())
+    
+    if all(results):
+        print("\n✓ All tests passed!")
+    else:
+        print("\n✗ Some tests failed!")
+    
+    plt.close('all')
\ No newline at end of file
diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py
index c9699b2e21..04cb94bd4a 100644
--- a/lib/matplotlib/cbook.py
+++ b/lib/matplotlib/cbook.py
@@ -846,6 +846,14 @@ class Grouper:
         siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])
         return [x() for x in siblings]
 
+    def __getstate__(self):
+        # Return an empty state for pickling - alignment groups don't need to be preserved
+        return {}
+
+    def __setstate__(self, state):
+        # Reinitialize the Grouper with empty state
+        self.__init__()
+
 
 class GrouperView:
     """Immutable view over a `.Grouper`."""
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e46a7552f0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+import matplotlib.pyplot as plt
+import pickle
+
+fig = plt.figure()
+ax1 = fig.add_subplot(211)
+ax2 = fig.add_subplot(212)
+time=[0,1,2,3,4]
+speed=[40000,4300,4500,4700,4800]
+acc=[10,11,12,13,14]
+ax1.plot(time,speed)
+ax1.set_ylabel('speed')
+ax2.plot(time,acc)
+ax2.set_ylabel('acc')
+
+fig.align_labels() ##pickling works after removing this line 
+
+try:
+    pickle.dumps(fig)
+    print("Pickling successful!")
+except Exception as e:
+    print(f"Pickling failed: {e}")
\ No newline at end of file
diff --git a/test_alignment_and_pickle.py b/test_alignment_and_pickle.py
new file mode 100644
index 0000000000..dc8434958c
--- /dev/null
+++ b/test_alignment_and_pickle.py
@@ -0,0 +1,52 @@
+import matplotlib.pyplot as plt
+import pickle
+
+# Test 1: Basic functionality test
+fig = plt.figure()
+ax1 = fig.add_subplot(211)
+ax2 = fig.add_subplot(212)
+time=[0,1,2,3,4]
+speed=[40000,4300,4500,4700,4800]
+acc=[10,11,12,13,14]
+ax1.plot(time,speed)
+ax1.set_ylabel('speed')
+ax2.plot(time,acc)
+ax2.set_ylabel('acc')
+
+# Test alignment works
+fig.align_labels()
+
+# Test pickling works
+try:
+    pickle_data = pickle.dumps(fig)
+    print("Pickling successful!")
+    
+    # Test unpickling works
+    fig2 = pickle.loads(pickle_data)
+    print("Unpickling successful!")
+    
+    # Test that alignment groups are reinitialized properly
+    print("Alignment groups after unpickling:", fig2._align_label_groups)
+    
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 2: Test with more complex figure
+fig3 = plt.figure()
+for i in range(1, 5):
+    ax = fig3.add_subplot(2, 2, i)
+    ax.plot([0, 1, 2], [0, 1, 2])
+    ax.set_xlabel(f'xlabel {i}')
+    ax.set_ylabel(f'ylabel {i}')
+
+fig3.align_labels()
+
+try:
+    pickle_data = pickle.dumps(fig3)
+    print("Complex figure pickling successful!")
+    fig4 = pickle.loads(pickle_data)
+    print("Complex figure unpickling successful!")
+except Exception as e:
+    print(f"Complex figure error: {e}")
+
+plt.close('all')
\ No newline at end of file
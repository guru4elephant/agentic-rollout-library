=== Starting task for instance: astropy__astropy-14995 ===
Task ID: 15
Pod name: r2e-astropy-astropy-14995-2534
Pod name: r2e-astropy-astropy-14995-2534
Using image: iregistry.baidu-int.com/acg-airec/r2e_gym/slimshetty/swebench-verified:sweb.eval.x86_64.astropy__astropy-14995
K8S executor initialized

=== Iteration 1/100 ===
Calling LLM...
LLM Response: I'll help you implement the necessary changes to fix the NDDataRef mask propagation issue. Let's start by exploring the repository structure to understand how it's organized.

<function=execute_bash>
...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "find . -type f -name \"*.py\" | grep -E \"(nddata|NDData)\" | head -20"
}
Tool execution status: success
Tool stdout:
[STDOUT]
./docs/nddata/examples/cutout2d_tofits.py
./astropy/nddata/ccddata.py
./astropy/nddata/blocks.py
./astropy/nddata/nddata.py
./astropy/nddata/_testing.py
./astropy/nddata/__init__.py
./astropy/nddata/nddata_withmixins.py
./astropy/nddata/mixins/__init__.py
./astropy/nddata/mixins/ndarithmetic.py
./astropy/nddata/mixins/ndslicing.py
./astropy/nddata/mixins/ndio.py
./astropy/nddata/mixins/tests/__init__.py
./astropy/nddata/mixins/tests/test_ndio.py
./astropy/nddata/mixins/tests/test_ndarithmetic.py
./astropy/nddata/mixins/tests/test_ndslicing.py
./astropy/nddata/decorators.py
./astropy/nddata/nddata_base.py
./astropy/nddata/bitmask.py
./astropy/nddata/compat.py
./astropy/nddata/flag_collection.py


=== Iteration 2/100 ===
Calling LLM...
LLM Response: Now let's look at the main NDDataRef class and the arithmetic mixin since the issue is with mask propagation during arithmetic operations:

<function=file_editor>
<parameter=command>view</parameter>
<...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "./astropy/nddata"
}
Tool execution status: success
Tool stdout:
Here's the files and directories up to 2 levels deep in astropy/nddata, excluding hidden:
astropy/nddata
astropy/nddata/ccddata.py
astropy/nddata/blocks.py
astropy/nddata/nddata.py
astropy/nddata/_testing.py
astropy/nddata/__init__.py
astropy/nddata/nddata_withmixins.py
astropy/nddata/mixins
astropy/nddata/mixins/__init__.py
astropy/nddata/mixins/ndarithmetic.py
astropy/nddata/mixins/ndslicing.py
astropy/nddata/mixins/ndio.py
astropy/nddata/mixins/tests
astropy/nddata/decorators.py
astropy/nddata/nddata_base.py
astropy/nddata/bitmask.py
astropy/nddata/compat.py
astropy/nddata/flag_collection.py
astropy/nddata/nduncertainty.py
astropy/nddata/utils.py
astropy/nddata/tests
astropy/nddata/tests/test_flag_collection.py
astropy/nddata/tests/test_decorators.py
astropy/nddata/tests/test_nddata_base.py
astropy/nddata/tests/test_blocks.py
astropy/nddata/tests/__init__.py
astropy/nddata/tests/data
astropy/nddata/tests/test_ccddata.py
astropy/nddata/tests/test_bitmask.py
astropy/nddata/tests/test_compat.py
astropy/nddata/tests/test_nddata.py
astropy/nddata/tests/test_utils.py
astropy/nddata/tests/test_nduncertainty.py



=== Iteration 3/100 ===
Calling LLM...
LLM Response: Let me first create a script to reproduce the issue as described in the GitHub issue:

<function=file_editor>
<parameter=command>create</parameter>
<parameter=path>reproduce_issue.py</parameter>
<para...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "create",
  "path": "reproduce_issue.py",
  "file_text": "#!/usr/bin/env python3\n\"\"\"Script to reproduce the NDDataRef mask propagation issue.\"\"\"\n\nimport numpy as np\nfrom astropy.nddata import NDDataRef\n\nprint(\"Reproducing NDDataRef mask propagation issue...\")\n\n# Create test data\narray = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\nmask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n\nnref_nomask = NDDataRef(array)\nnref_mask = NDDataRef(array, mask=mask)\n\nprint(\"1. multiply no mask by constant (no mask * no mask)\")\ntry:\n    result = nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask\n    print(f\"Result: {result}\")\n    print(\"OK\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n\nprint(\"\\n2. multiply no mask by itself (no mask * no mask)\")\ntry:\n    result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n    print(f\"Result: {result}\")\n    print(\"OK\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n\nprint(\"\\n3. multiply mask by constant (mask * no mask) - THIS SHOULD FAIL\")\ntry:\n    result = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\n    print(f\"Result: {result}\")\n    print(\"OK\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n\nprint(\"\\n4. multiply mask by itself (mask * mask)\")\ntry:\n    result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\n    print(f\"Result: {result}\")\n    print(\"OK\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n\nprint(\"\\n5. multiply mask by no mask (mask * no mask) - THIS SHOULD FAIL\")\ntry:\n    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n    print(f\"Result: {result}\")\n    print(\"OK\")\nexcept Exception as e:\n    print(f\"Error: {e}\")"
}
Tool execution status: success
Tool stdout:
File created successfully at reproduce_issue.py.
Here's the result of running `cat -n` on reproduce_issue.py:
     1	#!/usr/bin/env python3
     2	"""Script to reproduce the NDDataRef mask propagation issue."""
     3	
     4	import numpy as np
     5	from astropy.nddata import NDDataRef
     6	
     7	print("Reproducing NDDataRef mask propagation issue...")
     8	
     9	# Create test data
    10	array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
    11	mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
    12	
    13	nref_nomask = NDDataRef(array)
    14	nref_mask = NDDataRef(array, mask=mask)
    15	
    16	print("1. multiply no mask by constant (no mask * no mask)")
    17	try:
    18	    result = nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask
    19	    print(f"Result: {result}")
    20	    print("OK")
... (file continues)


=== Iteration 4/100 ===
Calling LLM...
LLM Response: <function=execute_bash>
<parameter=command>python reproduce_issue.py</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python reproduce_issue.py"
}
Tool execution status: success
Tool stdout:
[STDOUT]
Reproducing NDDataRef mask propagation issue...
1. multiply no mask by constant (no mask * no mask)
Result: None
OK

2. multiply no mask by itself (no mask * no mask)
Result: None
OK

3. multiply mask by constant (mask * no mask) - THIS SHOULD FAIL
Error: unsupported operand type(s) for |: 'int' and 'NoneType'

4. multiply mask by itself (mask * mask)
Result: [[ 0  1 64]
 [ 8  0  1]
 [ 2  1  0]]
OK

5. multiply mask by no mask (mask * no mask) - THIS SHOULD FAIL
Error: unsupported operand type(s) for |: 'int' and 'NoneType'


=== Iteration 5/100 ===
Calling LLM...
LLM Response: Great! I've successfully reproduced the issue. The error occurs when trying to perform bitwise OR operations between integers and None values. Now let's examine the NDDataRef class and the arithmetic ...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "./astropy/nddata/nddata.py",
  "view_range": "[1, 50]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/nddata/nddata.py:
     1	# Licensed under a 3-clause BSD style license - see LICENSE.rst
     2	# This module implements the base NDData class.
     3	
     4	
     5	from copy import deepcopy
     6	
     7	import numpy as np
     8	
     9	from astropy import log
    10	from astropy.units import Quantity, Unit
    11	from astropy.utils.masked import Masked, MaskedNDArray
    12	from astropy.utils.metadata import MetaData
    13	from astropy.wcs.wcsapi import SlicedLowLevelWCS  # noqa: F401
    14	from astropy.wcs.wcsapi import BaseHighLevelWCS, BaseLowLevelWCS, HighLevelWCSWrapper
    15	
    16	from .nddata_base import NDDataBase
    17	from .nduncertainty import NDUncertainty, UnknownUncertainty
    18	
    19	__all__ = ["NDData"]
    20	
    21	_meta_doc = """`dict`-like : Additional meta information about the dataset."""
    22	
    23	
    24	class NDData(NDDataBase):
    25	    """
    26	    A container for `numpy.ndarray`-based datasets, using the
    27	    `~astropy.nddata.NDDataBase` interface.
    28	
    29	    The key distinction from raw `numpy.ndarray` is the presence of
    30	    additional metadata such as uncertainty, mask, unit, a coordinate system
    31	    and/or a dictionary containing further meta information. This class *only*
    32	    provides a container for *storing* such datasets. For further functionality
    33	    take a look at the ``See also`` section.
    34	
    35	    See also: https://docs.astropy.org/en/stable/nddata/
    36	
    37	    Parameters
    38	    ----------
    39	    data : `numpy.ndarray`-like or `NDData`-like
    40	        The dataset.
    41	
    42	    uncertainty : any type, optional
    43	        Uncertainty in the dataset.
    44	        Should have an attribute ``uncertainty_type`` that defines what kind of
    45	        uncertainty is stored, for example ``"std"`` for standard deviation or
    46	        ``"var"`` for variance. A metaclass defining such an interface is
    47	        `NDUncertainty` - but isn't mandatory. If the uncertainty has no such
    48	        attribute the uncertainty is stored as `UnknownUncertainty`.
    49	        Defaults to ``None``.
    50	


=== Iteration 6/100 ===
Calling LLM...
LLM Response: Let me continue viewing the NDData file to find the NDDataRef class:

<function=search>
<parameter=search_term>NDDataRef</parameter>
<parameter=path>./astropy/nddata</parameter>
</function>...
Executing tool: r2e_search
Tool parameters: {
  "search_term": "NDDataRef",
  "path": "./astropy/nddata"
}
Tool execution status: success
Tool stdout:
Found 12 matches for "NDDataRef" in /testbed/astropy/nddata:
./astropy/nddata/nddata.py (1 matches)
./astropy/nddata/nddata_withmixins.py (5 matches)
./astropy/nddata/mixins/ndslicing.py (1 matches)
./astropy/nddata/mixins/tests/test_ndio.py (2 matches)
./astropy/nddata/mixins/tests/test_ndarithmetic.py (2 matches)
./astropy/nddata/mixins/tests/test_ndslicing.py (1 matches)
End of matches for "NDDataRef" in /testbed/astropy/nddata


=== Iteration 7/100 ===
Calling LLM...
LLM Response:       <function=file_editor>
<parameter=command>view</parameter>
<parameter=path>./astropy/nddata/nddata_withmixins.py</parameter>
<parameter=view_range>[1, 50]</parameter>
</function>...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "./astropy/nddata/nddata_withmixins.py",
  "view_range": "[1, 50]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/nddata/nddata_withmixins.py:
     1	# Licensed under a 3-clause BSD style license - see LICENSE.rst
     2	
     3	"""
     4	This module implements a class based on NDData with all Mixins.
     5	"""
     6	
     7	
     8	from .mixins.ndarithmetic import NDArithmeticMixin
     9	from .mixins.ndio import NDIOMixin
    10	from .mixins.ndslicing import NDSlicingMixin
    11	from .nddata import NDData
    12	
    13	__all__ = ["NDDataRef"]
    14	
    15	
    16	class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):
    17	    """Implements `NDData` with all Mixins.
    18	
    19	    This class implements a `NDData`-like container that supports reading and
    20	    writing as implemented in the ``astropy.io.registry`` and also slicing
    21	    (indexing) and simple arithmetic (add, subtract, divide and multiply).
    22	
    23	    Notes
    24	    -----
    25	    A key distinction from `NDDataArray` is that this class does not attempt
    26	    to provide anything that was not defined in any of the parent classes.
    27	
    28	    See Also
    29	    --------
    30	    NDData
    31	    NDArithmeticMixin
    32	    NDSlicingMixin
    33	    NDIOMixin
    34	
    35	    Examples
    36	    --------
    37	    The mixins allow operation that are not possible with `NDData` or
    38	    `NDDataBase`, i.e. simple arithmetic::
    39	
    40	        >>> from astropy.nddata import NDDataRef, StdDevUncertainty
    41	        >>> import numpy as np
    42	
    43	        >>> data = np.ones((3,3), dtype=float)
    44	        >>> ndd1 = NDDataRef(data, uncertainty=StdDevUncertainty(data))
    45	        >>> ndd2 = NDDataRef(data, uncertainty=StdDevUncertainty(data))
    46	
    47	        >>> ndd3 = ndd1.add(ndd2)
    48	        >>> ndd3.data  # doctest: +FLOAT_CMP
    49	        array([[2., 2., 2.],
    50	               [2., 2., 2.],


=== Iteration 8/100 ===
Calling LLM...
LLM Response: Now let's look at the NDArithmeticMixin since the issue is with arithmetic operations and mask handling:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>./astropy/nddata/mi...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "./astropy/nddata/mixins/ndarithmetic.py",
  "view_range": "[1, 100]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/nddata/mixins/ndarithmetic.py:
     1	# Licensed under a 3-clause BSD style license - see LICENSE.rst
     2	# This module implements the Arithmetic mixin to the NDData class.
     3	
     4	import warnings
     5	from copy import deepcopy
     6	
     7	import numpy as np
     8	
     9	from astropy.nddata.nduncertainty import NDUncertainty
    10	from astropy.units import dimensionless_unscaled
    11	from astropy.utils import format_doc, sharedmethod
    12	from astropy.utils.exceptions import AstropyUserWarning
    13	from astropy.utils.masked import Masked
    14	
    15	__all__ = ["NDArithmeticMixin"]
    16	
    17	# Global so it doesn't pollute the class dict unnecessarily:
    18	
    19	# Docstring templates for add, subtract, multiply, divide methods.
    20	_arit_doc = """
    21	    Performs {name} by evaluating ``self`` {op} ``operand``.
    22	
    23	    Parameters
    24	    ----------
    25	    operand, operand2 : `NDData`-like instance
    26	        If ``operand2`` is ``None`` or not given it will perform the operation
    27	        ``self`` {op} ``operand``.
    28	        If ``operand2`` is given it will perform ``operand`` {op} ``operand2``.
    29	        If the method was called on a class rather than on the instance
    30	        ``operand2`` must be given.
    31	
    32	    propagate_uncertainties : `bool` or ``None``, optional
    33	        If ``None`` the result will have no uncertainty. If ``False`` the
    34	        result will have a copied version of the first operand that has an
    35	        uncertainty. If ``True`` the result will have a correctly propagated
    36	        uncertainty from the uncertainties of the operands but this assumes
    37	        that the uncertainties are `NDUncertainty`-like. Default is ``True``.
    38	
    39	        .. versionchanged:: 1.2
    40	            This parameter must be given as keyword-parameter. Using it as
    41	            positional parameter is deprecated.
    42	            ``None`` was added as valid parameter value.
    43	
    44	    handle_mask : callable, ``'first_found'`` or ``None``, optional
    45	        If ``None`` the result will have no mask. If ``'first_found'`` the
    46	        result will have a copied version of the first operand that has a
    47	        mask). If it is a callable then the specified callable must
    48	        create the results ``mask`` and if necessary provide a copy.
    49	        Default is `numpy.logical_or`.
    50	
    51	        .. versionadded:: 1.2
    52	
    53	    handle_meta : callable, ``'first_found'`` or ``None``, optional
    54	        If ``None`` the result will have no meta. If ``'first_found'`` the
    55	        result will have a copied version of the first operand that has a
    56	        (not empty) meta. If it is a callable then the specified callable must
    57	        create the results ``meta`` and if necessary provide a copy.
    58	        Default is ``None``.
    59	
    60	        .. versionadded:: 1.2
    61	
    62	    compare_wcs : callable, ``'first_found'`` or ``None``, optional
    63	        If ``None`` the result will have no wcs and no comparison between
    64	        the wcs of the operands is made. If ``'first_found'`` the
    65	        result will have a copied version of the first operand that has a
    66	        wcs. If it is a callable then the specified callable must
    67	        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``
    68	        was given otherwise it raises a ``ValueError`` if the comparison was
    69	        not successful. Default is ``'first_found'``.
    70	
    71	        .. versionadded:: 1.2
    72	
    73	    uncertainty_correlation : number or `~numpy.ndarray`, optional
    74	        The correlation between the two operands is used for correct error
    75	        propagation for correlated data as given in:
    76	        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas
    77	        Default is 0.
    78	
    79	        .. versionadded:: 1.2
    80	
    81	
    82	    kwargs :
    83	        Any other parameter that should be passed to the callables used.
    84	
    85	    Returns
    86	    -------
    87	    result : `~astropy.nddata.NDData`-like
    88	        The resulting dataset
    89	
    90	    Notes
    91	    -----
    92	    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the
    93	    callable must accept the corresponding attributes as first two
    94	    parameters. If the callable also needs additional parameters these can be
    95	    defined as ``kwargs`` and must start with ``"wcs_"`` (for wcs callable) or
    96	    ``"meta_"`` (for meta callable). This startstring is removed before the
    97	    callable is called.
    98	
    99	    ``"first_found"`` can also be abbreviated with ``"ff"``.
   100	    """


=== Iteration 9/100 ===
Calling LLM...
LLM Response: Let me search for the mask handling code in the arithmetic mixin:

<function=search>
<parameter=search_term>handle_mask</parameter>
<parameter=path>./astropy/nddata/mixins/ndarithmetic.py</parameter>
...
Executing tool: r2e_search
Tool parameters: {
  "search_term": "handle_mask",
  "path": "./astropy/nddata/mixins/ndarithmetic.py"
}
Tool execution status: success
Tool stdout:
Matches for "handle_mask" in /testbed/astropy/nddata/mixins/ndarithmetic.py:
44:    handle_mask : callable, ``'first_found'`` or ``None``, optional
171:        handle_mask=np.logical_or,
199:        handle_mask : callable, ``'first_found'`` or ``None``, optional
323:        if handle_mask is None:
329:        elif handle_mask in ["ff", "first_found"]:
336:                operation, operand, handle_mask, axis=axis, **kwds2["mask"]
485:    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
502:        handle_mask : callable
506:            Additional parameters given to ``handle_mask``.
513:            ``handle_mask`` must create (and copy) the returned mask.
518:        ) or handle_mask is None:
527:            return handle_mask(self.mask, operand.mask, **kwds)
742:            # for collapse operations, use astropy.utils.masked rather than handle_mask


=== Iteration 10/100 ===
Calling LLM...
LLM Response:       Now let me look at the `_arithmetic_mask` method which seems to be the core function handling mask propagation:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>./astr...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "./astropy/nddata/mixins/ndarithmetic.py",
  "view_range": "[485, 550]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/nddata/mixins/ndarithmetic.py:
   485	    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
   486	        """
   487	        Calculate the resulting mask.
   488	
   489	        This is implemented as the piecewise ``or`` operation if both have a
   490	        mask.
   491	
   492	        Parameters
   493	        ----------
   494	        operation : callable
   495	            see :meth:`NDArithmeticMixin._arithmetic` parameter description.
   496	            By default, the ``operation`` will be ignored.
   497	
   498	        operand : `NDData`-like instance
   499	            The second operand wrapped in an instance of the same class as
   500	            self.
   501	
   502	        handle_mask : callable
   503	            see :meth:`NDArithmeticMixin.add`
   504	
   505	        kwds :
   506	            Additional parameters given to ``handle_mask``.
   507	
   508	        Returns
   509	        -------
   510	        result_mask : any type
   511	            If only one mask was present this mask is returned.
   512	            If neither had a mask ``None`` is returned. Otherwise
   513	            ``handle_mask`` must create (and copy) the returned mask.
   514	        """
   515	        # If only one mask is present we need not bother about any type checks
   516	        if (
   517	            self.mask is None and operand is not None and operand.mask is None
   518	        ) or handle_mask is None:
   519	            return None
   520	        elif self.mask is None and operand is not None:
   521	            # Make a copy so there is no reference in the result.
   522	            return deepcopy(operand.mask)
   523	        elif operand is None:
   524	            return deepcopy(self.mask)
   525	        else:
   526	            # Now lets calculate the resulting mask (operation enforces copy)
   527	            return handle_mask(self.mask, operand.mask, **kwds)
   528	
   529	    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
   530	        """
   531	        Calculate the resulting wcs.
   532	
   533	        There is actually no calculation involved but it is a good place to
   534	        compare wcs information of both operands. This is currently not working
   535	        properly with `~astropy.wcs.WCS` (which is the suggested class for
   536	        storing as wcs property) but it will not break it neither.
   537	
   538	        Parameters
   539	        ----------
   540	        operation : callable
   541	            see :meth:`NDArithmeticMixin._arithmetic` parameter description.
   542	            By default, the ``operation`` will be ignored.
   543	
   544	        operand : `NDData` instance or subclass
   545	            The second operand wrapped in an instance of the same class as
   546	            self.
   547	
   548	        compare_wcs : callable
   549	            see :meth:`NDArithmeticMixin.add` parameter description.
   550	


=== Iteration 11/100 ===
Calling LLM...
LLM Response: I found the issue! In the `_arithmetic_mask` method, there's a problem with the condition on line 520. The condition `elif self.mask is None and operand is not None:` should check if `operand.mask` is...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "./astropy/nddata/mixins/ndarithmetic.py",
  "view_range": "[515, 527]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/nddata/mixins/ndarithmetic.py:
   515	        # If only one mask is present we need not bother about any type checks
   516	        if (
   517	            self.mask is None and operand is not None and operand.mask is None
   518	        ) or handle_mask is None:
   519	            return None
   520	        elif self.mask is None and operand is not None:
   521	            # Make a copy so there is no reference in the result.
   522	            return deepcopy(operand.mask)
   523	        elif operand is None:
   524	            return deepcopy(self.mask)
   525	        else:
   526	            # Now lets calculate the resulting mask (operation enforces copy)
   527	            return handle_mask(self.mask, operand.mask, **kwds)


=== Iteration 12/100 ===
Calling LLM...
Task finished, pod r2e-astropy-astropy-14995-2534 will be deleted by context manager
Context saved to single-output-v7/astropy__astropy-14995.context
=== Task completed with status: failed ===
=== Pod r2e-astropy-astropy-14995-2534 cleanup delegated to context manager ===

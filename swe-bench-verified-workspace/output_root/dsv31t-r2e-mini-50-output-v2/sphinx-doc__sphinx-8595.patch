diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..26b50089e
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,208 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test using Sphinx autodoc to verify the empty __all__ fix.
+"""
+
+import tempfile
+import os
+import shutil
+from pathlib import Path
+
+def test_autodoc_empty_all():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir)
+        
+        # Create the example module with empty __all__
+        example_py = test_dir / "example.py"
+        example_py.write_text('''
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+''')
+
+        # Create a simple Sphinx configuration
+        conf_py = test_dir / "conf.py"
+        conf_py.write_text('''
+extensions = ['sphinx.ext.autodoc']
+''')
+
+        # Create index.rst
+        index_rst = test_dir / "index.rst"
+        index_rst.write_text('''
+Test Documentation
+==================
+
+.. automodule:: example
+   :members:
+''')
+
+        # Build the documentation
+        os.chdir(test_dir)
+        
+        try:
+            # Run sphinx-build to generate documentation
+            import subprocess
+            result = subprocess.run([
+                'python', '-m', 'sphinx', 
+                '-b', 'html', 
+                '-E',  # Don't use saved environment
+                '.', '_build'
+            ], capture_output=True, text=True, timeout=30)
+            
+            print("Sphinx build output:")
+            print(result.stdout)
+            if result.stderr:
+                print("Sphinx build errors:")
+                print(result.stderr)
+            
+            # Check if the build was successful
+            if result.returncode == 0:
+                print("SUCCESS: Sphinx build completed")
+                
+                # Check if the output contains any of the functions (it shouldn't)
+                output_file = test_dir / "_build" / "index.html"
+                if output_file.exists():
+                    content = output_file.read_text()
+                    # Look for specific patterns that indicate function documentation
+                    # Functions should not appear in <dt> tags (definitions) or <code> tags
+                    function_patterns = [
+                        '<dt id="example.foo"',
+                        '<dt id="example.bar"', 
+                        '<dt id="example.baz"',
+                        '<code class="sig-name descname">foo',
+                        '<code class="sig-name descname">bar',
+                        '<code class="sig-name descname">baz'
+                    ]
+                    
+                    has_functions = any(pattern in content for pattern in function_patterns)
+                    
+                    if not has_functions:
+                        print("SUCCESS: No functions documented when __all__ is empty")
+                        return True
+                    else:
+                        print("FAILURE: Functions were documented despite empty __all__")
+                        # Debug: show what was found
+                        for pattern in function_patterns:
+                            if pattern in content:
+                                print(f"Found pattern: {pattern}")
+                        return False
+                else:
+                    print("FAILURE: Output file not found")
+                    return False
+            else:
+                print("FAILURE: Sphinx build failed")
+                return False
+                
+        except subprocess.TimeoutExpired:
+            print("FAILURE: Sphinx build timed out")
+            return False
+        except Exception as e:
+            print(f"FAILURE: Exception during Sphinx build: {e}")
+            return False
+        finally:
+            os.chdir('/testbed')
+
+def test_autodoc_non_empty_all():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir)
+        
+        # Create the example module with non-empty __all__
+        example_py = test_dir / "example.py"
+        example_py.write_text('''
+__all__ = ["foo", "bar"]
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+''')
+
+        # Create a simple Sphinx configuration
+        conf_py = test_dir / "conf.py"
+        conf_py.write_text('''
+extensions = ['sphinx.ext.autodoc']
+''')
+
+        # Create index.rst
+        index_rst = test_dir / "index.rst"
+        index_rst.write_text('''
+Test Documentation
+==================
+
+.. automodule:: example
+   :members:
+''')
+
+        # Build the documentation
+        os.chdir(test_dir)
+        
+        try:
+            # Run sphinx-build to generate documentation
+            import subprocess
+            result = subprocess.run([
+                'python', '-m', 'sphinx', 
+                '-b', 'html', 
+                '-E',  # Don't use saved environment
+                '.', '_build'
+            ], capture_output=True, text=True, timeout=30)
+            
+            print("Sphinx build output:")
+            print(result.stdout)
+            if result.stderr:
+                print("Sphinx build errors:")
+                print(result.stderr)
+            
+            # Check if the build was successful
+            if result.returncode == 0:
+                print("SUCCESS: Sphinx build completed")
+                
+                # Check if the output contains the right functions
+                output_file = test_dir / "_build" / "index.html"
+                if output_file.exists():
+                    content = output_file.read_text()
+                    if "foo" in content and "bar" in content and "baz" not in content:
+                        print("SUCCESS: Only foo and bar documented when __all__ = ['foo', 'bar']")
+                        return True
+                    else:
+                        print("FAILURE: Wrong functions documented")
+                        return False
+                else:
+                    print("FAILURE: Output file not found")
+                    return False
+            else:
+                print("FAILURE: Sphinx build failed")
+                return False
+                
+        except subprocess.TimeoutExpired:
+            print("FAILURE: Sphinx build timed out")
+            return False
+        except Exception as e:
+            print(f"FAILURE: Exception during Sphinx build: {e}")
+            return False
+        finally:
+            os.chdir('/testbed')
+
+if __name__ == "__main__":
+    print("Testing empty __all__ with Sphinx autodoc:")
+    success1 = test_autodoc_empty_all()
+    
+    print("\nTesting non-empty __all__ with Sphinx autodoc:")
+    success2 = test_autodoc_non_empty_all()
+    
+    if success1 and success2:
+        print("\nALL TESTS PASSED: The fix works correctly with Sphinx autodoc")
+    else:
+        print("\nSOME TESTS FAILED")
\ No newline at end of file
diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 000000000..33ee58d04
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+"""
+Debug test to understand what happens with :members: option.
+"""
+
+import tempfile
+import os
+from pathlib import Path
+
+def test_members_option():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir)
+        
+        # Create the example module with empty __all__
+        example_py = test_dir / "example.py"
+        example_py.write_text('''
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+''')
+
+        # Change to test directory
+        original_cwd = os.getcwd()
+        os.chdir(test_dir)
+
+        try:
+            # Import the autodoc module to test directly
+            import sys
+            sys.path.insert(0, '/testbed')
+            
+            # Add the current directory to sys.path to import example
+            sys.path.insert(0, str(test_dir))
+            import example
+            
+            # Import the ALL constant
+            from sphinx.ext.autodoc import ALL
+            
+            # Simulate what happens with :members: option
+            # When :members: is specified without arguments, options.members is set to ALL
+            options_members = ALL
+            print(f"options.members is ALL: {options_members is ALL}")
+            
+            # This is the logic from line 823-824
+            want_all = False or False or (options_members is ALL)
+            print(f"want_all: {want_all}")
+            
+            # Test our fix
+            __all__ = []  # Empty __all__
+            
+            if want_all:
+                if not __all__:
+                    # Our fix
+                    members_check_module = False
+                    members = []
+                    print("Empty __all__ case: returning False, []")
+                else:
+                    # Non-empty __all__ case
+                    members_check_module = False
+                    members = ["foo", "bar", "baz"]  # Would be filtered by __all__
+                    print("Non-empty __all__ case")
+            
+            print(f"Result: members_check_module={members_check_module}, members_count={len(members)}")
+            
+            if len(members) == 0:
+                print("SUCCESS: Empty __all__ correctly returns no members")
+                return True
+            else:
+                print("FAILURE: Empty __all__ should return no members")
+                return False
+                
+        finally:
+            os.chdir('/testbed')
+
+if __name__ == "__main__":
+    test_members_option()
\ No newline at end of file
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 000000000..9ea56df0c
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the empty __all__ fix.
+"""
+
+def test_edge_cases():
+    """Test various edge cases for empty __all__ handling."""
+    
+    test_cases = [
+        # Empty list
+        {"__all__": [], "expected_members": 0, "description": "Empty list"},
+        # Empty tuple
+        {"__all__": (), "expected_members": 0, "description": "Empty tuple"},
+        # Empty set
+        {"__all__": set(), "expected_members": 0, "description": "Empty set"},
+        # None (should be treated as non-empty)
+        {"__all__": None, "expected_members": "non-zero", "description": "None value"},
+        # Non-empty list
+        {"__all__": ["foo"], "expected_members": "non-zero", "description": "Non-empty list"},
+        # Non-empty tuple
+        {"__all__": ("foo",), "expected_members": "non-zero", "description": "Non-empty tuple"},
+    ]
+    
+    for i, test_case in enumerate(test_cases):
+        print(f"\nTest case {i+1}: {test_case['description']}")
+        print(f"__all__ = {test_case['__all__']}")
+        
+        # Simulate the logic from get_object_members
+        want_all = True
+        
+        if want_all:
+            if test_case["__all__"] is not None and not test_case["__all__"]:
+                # Our fix for empty __all__
+                members_check_module = False
+                members = []
+                print("Empty __all__ case: returning False, []")
+            else:
+                # Non-empty __all__ case or no __all__
+                members_check_module = False
+                members = ["foo", "bar", "baz"]  # Would be filtered by __all__ if present
+                print("Non-empty __all__ or no __all__ case")
+        
+        print(f"Result: {len(members)} members")
+        
+        # Verify the result
+        if test_case["expected_members"] == 0:
+            if len(members) == 0:
+                print("SUCCESS: Correctly returned no members")
+            else:
+                print("FAILURE: Should return no members")
+                return False
+        elif test_case["expected_members"] == "non-zero":
+            if len(members) > 0:
+                print("SUCCESS: Correctly returned some members")
+            else:
+                print("FAILURE: Should return some members")
+                return False
+        else:
+            if len(members) == test_case["expected_members"]:
+                print("SUCCESS: Correct number of members")
+            else:
+                print(f"FAILURE: Expected {test_case['expected_members']} members, got {len(members)}")
+                return False
+    
+    print("\nAll edge case tests passed!")
+    return True
+
+if __name__ == "__main__":
+    success = test_edge_cases()
+    if success:
+        print("\nEDGE CASE TESTS PASSED: The fix handles edge cases correctly")
+    else:
+        print("\nEDGE CASE TESTS FAILED")
\ No newline at end of file
diff --git a/original_issue_test.py b/original_issue_test.py
new file mode 100644
index 000000000..a2191ff9a
--- /dev/null
+++ b/original_issue_test.py
@@ -0,0 +1,114 @@
+#!/usr/bin/env python3
+"""
+Test that reproduces the exact issue from GitHub.
+"""
+
+import tempfile
+import os
+from pathlib import Path
+
+def test_original_issue():
+    # Create the exact example from the GitHub issue
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir)
+        
+        # Create example.py exactly as in the issue
+        example_py = test_dir / "example.py"
+        example_py.write_text('''# example.py
+__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+''')
+
+        # Create index.rst exactly as in the issue
+        index_rst = test_dir / "index.rst"
+        index_rst.write_text('''# index.rst
+.. automodule:: example
+   :members:
+''')
+
+        # Create conf.py
+        conf_py = test_dir / "conf.py"
+        conf_py.write_text('''
+extensions = ['sphinx.ext.autodoc']
+''')
+
+        # Build the documentation
+        os.chdir(test_dir)
+        
+        try:
+            # Run sphinx-build to generate documentation
+            import subprocess
+            result = subprocess.run([
+                'python', '-m', 'sphinx', 
+                '-b', 'html', 
+                '-E',  # Don't use saved environment
+                '.', '_build'
+            ], capture_output=True, text=True, timeout=30)
+            
+            print("Sphinx build output:")
+            print(result.stdout)
+            if result.stderr:
+                print("Sphinx build errors:")
+                print(result.stderr)
+            
+            # Check if the build was successful
+            if result.returncode == 0:
+                print("SUCCESS: Sphinx build completed")
+                
+                # Check if the output contains any of the functions (it shouldn't)
+                output_file = test_dir / "_build" / "index.html"
+                if output_file.exists():
+                    content = output_file.read_text()
+                    # Look for specific patterns that indicate function documentation
+                    function_patterns = [
+                        '<dt id="example.foo"',
+                        '<dt id="example.bar"', 
+                        '<dt id="example.baz"',
+                        '<code class="sig-name descname">foo',
+                        '<code class="sig-name descname">bar',
+                        '<code class="sig-name descname">baz'
+                    ]
+                    
+                    has_functions = any(pattern in content for pattern in function_patterns)
+                    
+                    if not has_functions:
+                        print("SUCCESS: No functions documented when __all__ is empty")
+                        print("The original GitHub issue has been fixed!")
+                        return True
+                    else:
+                        print("FAILURE: Functions were documented despite empty __all__")
+                        print("The original GitHub issue is NOT fixed")
+                        return False
+                else:
+                    print("FAILURE: Output file not found")
+                    return False
+            else:
+                print("FAILURE: Sphinx build failed")
+                return False
+                
+        except subprocess.TimeoutExpired:
+            print("FAILURE: Sphinx build timed out")
+            return False
+        except Exception as e:
+            print(f"FAILURE: Exception during Sphinx build: {e}")
+            return False
+        finally:
+            os.chdir('/testbed')
+
+if __name__ == "__main__":
+    success = test_original_issue()
+    if success:
+        print("\nORIGINAL ISSUE TEST PASSED: The GitHub issue has been fixed!")
+    else:
+        print("\nORIGINAL ISSUE TEST FAILED")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..12e1d6f09
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,91 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where empty __all__ is ignored by autodoc.
+"""
+
+import tempfile
+import os
+import shutil
+from pathlib import Path
+
+def test_empty_all_issue():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir)
+        
+        # Create the example module
+        example_py = test_dir / "example.py"
+        example_py.write_text('''
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+''')
+
+        # Create a simple Sphinx configuration
+        conf_py = test_dir / "conf.py"
+        conf_py.write_text('''
+extensions = ['sphinx.ext.autodoc']
+''')
+
+        # Create index.rst
+        index_rst = test_dir / "index.rst"
+        index_rst.write_text('''
+Test Documentation
+==================
+
+.. automodule:: example
+   :members:
+''')
+
+        # Change to test directory
+        original_cwd = os.getcwd()
+        os.chdir(test_dir)
+
+        try:
+            # Import the autodoc module to test directly
+            import sys
+            sys.path.insert(0, '/testbed')
+            
+            # Add the current directory to sys.path to import example
+            sys.path.insert(0, str(test_dir))
+            import example
+            
+            # Test the core issue: inspect.getall() behavior with empty list
+            from sphinx.util import inspect
+            __all__ = inspect.getall(example)
+            print(f"__all__ value: {__all__}")
+            print(f"__all__ is empty: {not __all__}")
+            
+            # Test the specific logic from get_object_members
+            # This mimics the logic in line 1077-1080
+            if not __all__:
+                print("Empty __all__ detected - should return no members")
+                # Currently it returns all members, but should return none
+            else:
+                print("Non-empty __all__ detected")
+                
+            # Let's also check what get_module_members would return
+            # We'll manually inspect the module to see what members exist
+            import types
+            members = {}
+            for name in dir(example):
+                if not name.startswith('_'):
+                    obj = getattr(example, name)
+                    if isinstance(obj, types.FunctionType):
+                        members[name] = obj
+            print(f"All module members found: {len(members)}")
+            for name in members:
+                print(f"  - {name}")
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    test_empty_all_issue()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 000000000..384efcbbd
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify the empty __all__ fix.
+"""
+
+def test_empty_all_logic():
+    # Test the specific logic from get_object_members
+    __all__ = []  # Empty __all__
+    want_all = True
+    
+    # This mimics the logic we fixed
+    if want_all:
+        if not __all__:
+            # This is our fix - should return False, []
+            members_check_module = False
+            members = []
+            print("Empty __all__ case: returning False, []")
+        else:
+            # Non-empty __all__ case
+            members_check_module = False
+            members = ["dummy_member"]  # This would be the actual logic
+            print("Non-empty __all__ case")
+    
+    print(f"Result: members_check_module={members_check_module}, members_count={len(members)}")
+    
+    # Verify the fix
+    if len(members) == 0:
+        print("SUCCESS: Empty __all__ correctly returns no members")
+        return True
+    else:
+        print("FAILURE: Empty __all__ should return no members")
+        return False
+
+def test_non_empty_all_logic():
+    # Test with non-empty __all__
+    __all__ = ["foo", "bar"]  # Non-empty __all__
+    want_all = True
+    
+    # This mimics the original logic
+    if want_all:
+        if not __all__:
+            members_check_module = False
+            members = []
+            print("Empty __all__ case")
+        else:
+            # Non-empty __all__ should still work as before
+            members_check_module = False
+            members = ["foo", "bar", "baz"]  # This would be filtered by __all__
+            # Filter members based on __all__
+            filtered_members = [m for m in members if m in __all__]
+            print("Non-empty __all__ case: returning filtered members")
+    
+    print(f"Result: members_check_module={members_check_module}, members_count={len(filtered_members)}")
+    
+    # Verify non-empty __all__ still works
+    if len(filtered_members) == 2 and "foo" in filtered_members and "bar" in filtered_members:
+        print("SUCCESS: Non-empty __all__ correctly filters members")
+        return True
+    else:
+        print("FAILURE: Non-empty __all__ should filter members correctly")
+        return False
+
+if __name__ == "__main__":
+    print("Testing empty __all__ logic:")
+    success1 = test_empty_all_logic()
+    
+    print("\nTesting non-empty __all__ logic:")
+    success2 = test_non_empty_all_logic()
+    
+    if success1 and success2:
+        print("\nALL TESTS PASSED: The fix works correctly")
+    else:
+        print("\nSOME TESTS FAILED")
\ No newline at end of file
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index d85d79617..1be3c1e15 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1074,14 +1074,17 @@ class ModuleDocumenter(Documenter):
     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         members = self.get_module_members()
         if want_all:
-            if not self.__all__:
-                # for implicit module members, check __module__ to avoid
-                # documenting imported objects
-                return True, list(members.values())
+            if self.__all__ is not None and not self.__all__:
+                # empty __all__ means no members should be documented
+                return False, []
             else:
-                for member in members.values():
-                    if member.__name__ not in self.__all__:
-                        member.skipped = True
+                if self.__all__ is not None:
+                    for member in members.values():
+                        if member.__name__ not in self.__all__:
+                            member.skipped = True
+                else:
+                    # __all__ is None (invalid or not present), document all members
+                    pass
 
                 return False, list(members.values())
         else:
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..efd69ca54
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for empty __all__ issue.
+"""
+
+import tempfile
+import os
+from pathlib import Path
+
+def test_empty_all_fix():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir)
+        
+        # Create the example module
+        example_py = test_dir / "example.py"
+        example_py.write_text('''
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+''')
+
+        # Change to test directory
+        original_cwd = os.getcwd()
+        os.chdir(test_dir)
+
+        try:
+            # Import the autodoc module to test directly
+            import sys
+            sys.path.insert(0, '/testbed')
+            
+            # Add the current directory to sys.path to import example
+            sys.path.insert(0, str(test_dir))
+            import example
+            
+            # Create a minimal mock environment to test the ModuleDocumenter
+            from sphinx.ext.autodoc import ModuleDocumenter
+            from sphinx.application import Sphinx
+            from sphinx.environment import BuildEnvironment
+            from sphinx.config import Config
+            
+            # Create minimal mock objects
+            class MockEnv:
+                def __init__(self):
+                    self.temp_data = {}
+            
+            class MockConfig:
+                def __init__(self):
+                    self.autodoc_inherit_docstrings = False
+            
+            # Create documenter with minimal setup
+            env = MockEnv()
+            config = MockConfig()
+            
+            documenter = ModuleDocumenter.__new__(ModuleDocumenter)
+            documenter.env = env
+            documenter.config = config
+            documenter.object = example
+            documenter.options = type('Options', (), {'members': None, 'inherited_members': False})()
+            documenter.objpath = []
+            
+            # Set __all__ attribute manually (mimicking what happens in __init__)
+            from sphinx.util import inspect
+            documenter.__all__ = inspect.getall(example)
+            
+            print(f"__all__ value: {documenter.__all__}")
+            print(f"__all__ is empty: {not documenter.__all__}")
+            
+            # Test get_object_members with want_all=True
+            members_check_module, members = documenter.get_object_members(want_all=True)
+            print(f"members_check_module: {members_check_module}")
+            print(f"Number of members returned: {len(members)}")
+            
+            if len(members) == 0:
+                print("SUCCESS: Empty __all__ correctly returns no members")
+            else:
+                print("FAILURE: Empty __all__ should return no members, but got:")
+                for member in members:
+                    print(f"  - {member.__name__}")
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    test_empty_all_fix()
\ No newline at end of file
diff --git a/test_invalid_all.py b/test_invalid_all.py
new file mode 100644
index 000000000..b3482bfcc
--- /dev/null
+++ b/test_invalid_all.py
@@ -0,0 +1,113 @@
+#!/usr/bin/env python3
+"""
+Test to verify that invalid __all__ values are handled correctly.
+"""
+
+import tempfile
+import os
+from pathlib import Path
+
+def test_invalid_all():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_dir = Path(tmpdir)
+        
+        # Create the example module with invalid __all__
+        example_py = test_dir / "example.py"
+        example_py.write_text('''
+__all__ = "invalid"  # Not a list/tuple
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+''')
+
+        # Create a simple Sphinx configuration
+        conf_py = test_dir / "conf.py"
+        conf_py.write_text('''
+extensions = ['sphinx.ext.autodoc']
+''')
+
+        # Create index.rst
+        index_rst = test_dir / "index.rst"
+        index_rst.write_text('''
+Test Documentation
+==================
+
+.. automodule:: example
+   :members:
+''')
+
+        # Build the documentation
+        os.chdir(test_dir)
+        
+        try:
+            # Run sphinx-build to generate documentation
+            import subprocess
+            result = subprocess.run([
+                'python', '-m', 'sphinx', 
+                '-b', 'html', 
+                '-E',  # Don't use saved environment
+                '.', '_build'
+            ], capture_output=True, text=True, timeout=30)
+            
+            print("Sphinx build output:")
+            print(result.stdout)
+            if result.stderr:
+                print("Sphinx build errors:")
+                print(result.stderr)
+            
+            # Check if the build was successful
+            if result.returncode == 0:
+                print("SUCCESS: Sphinx build completed")
+                
+                # Check if the output contains any of the functions
+                # Invalid __all__ should be ignored and all functions documented
+                output_file = test_dir / "_build" / "index.html"
+                if output_file.exists():
+                    content = output_file.read_text()
+                    # Look for specific patterns that indicate function documentation
+                    function_patterns = [
+                        '<dt id="example.foo"',
+                        '<dt id="example.bar"', 
+                        '<dt id="example.baz"',
+                        '<code class="sig-name descname">foo',
+                        '<code class="sig-name descname">bar',
+                        '<code class="sig-name descname">baz'
+                    ]
+                    
+                    has_functions = all(pattern in content for pattern in function_patterns[:3])
+                    
+                    if has_functions:
+                        print("SUCCESS: All functions documented when __all__ is invalid")
+                        return True
+                    else:
+                        print("FAILURE: Functions should be documented when __all__ is invalid")
+                        return False
+                else:
+                    print("FAILURE: Output file not found")
+                    return False
+            else:
+                print("FAILURE: Sphinx build failed")
+                return False
+                
+        except subprocess.TimeoutExpired:
+            print("FAILURE: Sphinx build timed out")
+            return False
+        except Exception as e:
+            print(f"FAILURE: Exception during Sphinx build: {e}")
+            return False
+        finally:
+            os.chdir('/testbed')
+
+if __name__ == "__main__":
+    success = test_invalid_all()
+    if success:
+        print("\nINVALID __all__ TEST PASSED: The fix handles invalid __all__ correctly")
+    else:
+        print("\nINVALID __all__ TEST FAILED")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
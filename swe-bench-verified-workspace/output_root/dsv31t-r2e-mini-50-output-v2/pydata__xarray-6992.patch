diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 00000000..8e18daa5
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,31 @@
+import xarray as xr
+
+# Reproduce the issue with detailed debugging
+print("Creating dataset with coordinates...")
+ds = xr.Dataset(coords={"a": ("x", [1, 2, 3]), "b": ("x", ['a', 'b', 'c'])})
+print(f"Initial state: _variables keys: {list(ds._variables.keys())}")
+print(f"Initial state: _coord_names: {ds._coord_names}")
+
+print("Setting index...")
+ds_indexed = ds.set_index(z=['a', 'b'])
+print(f"After set_index: _variables keys: {list(ds_indexed._variables.keys())}")
+print(f"After set_index: _coord_names: {ds_indexed._coord_names}")
+
+print("Resetting index with drop=True...")
+try:
+    result = ds_indexed.reset_index("z", drop=True)
+    print("Reset index successful")
+    print(f"After reset_index: _variables keys: {list(result._variables.keys())}")
+    print(f"After reset_index: _coord_names: {result._coord_names}")
+    print(f"DataVariables.__len__() would be: {len(result._variables)} - {len(result._coord_names)} = {len(result._variables) - len(result._coord_names)}")
+except Exception as e:
+    print(f"Error occurred: {e}")
+    print(f"Error type: {type(e)}")
+    # Let's try to access the problematic state
+    try:
+        # The error might occur during repr, let's check the state manually
+        print(f"Failed dataset _variables keys: {list(ds_indexed._variables.keys())}")
+        print(f"Failed dataset _coord_names: {ds_indexed._coord_names}")
+        print(f"DataVariables.__len__() would be: {len(ds_indexed._variables)} - {len(ds_indexed._coord_names)} = {len(ds_indexed._variables) - len(ds_indexed._coord_names)}")
+    except:
+        pass
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 00000000..989094dc
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,26 @@
+import xarray as xr
+
+print("Testing the exact scenario from GitHub issue...")
+
+# Exact reproduction from the GitHub issue
+ds = xr.Dataset(coords={"a": ("x", [1, 2, 3]), "b": ("x", ['a', 'b', 'c'])})
+result = ds.set_index(z=['a', 'b']).reset_index("z", drop=True)
+
+print("Success! No ValueError occurred.")
+print(f"Result dataset shape: {result.dims}")
+print(f"Data variables: {list(result.data_vars.keys())}")
+print(f"Coordinates: {list(result.coords.keys())}")
+
+# Test that the repr works correctly (this was failing before)
+print("\nTesting dataset representation:")
+print(result)
+
+# Test that DataVariables.__len__() works correctly
+print(f"\nDataVariables length: {len(result.data_vars)}")
+
+# Test that we can iterate over data variables
+print("Data variables iteration:")
+for var_name in result.data_vars:
+    print(f"  {var_name}")
+
+print("\nAll tests passed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..ceaf2d09
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,19 @@
+import xarray as xr
+
+# Reproduce the issue from the GitHub issue
+print("Creating dataset with coordinates...")
+ds = xr.Dataset(coords={"a": ("x", [1, 2, 3]), "b": ("x", ['a', 'b', 'c'])})
+print("Dataset created successfully")
+
+print("Setting index...")
+ds_indexed = ds.set_index(z=['a', 'b'])
+print("Index set successfully")
+
+print("Resetting index with drop=True...")
+try:
+    result = ds_indexed.reset_index("z", drop=True)
+    print("Reset index successful")
+    print(result)
+except Exception as e:
+    print(f"Error occurred: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..64716d54
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,36 @@
+import xarray as xr
+
+print("Testing edge cases...")
+
+# Test case 1: reset_index without drop (should work as before)
+print("\n1. Testing reset_index without drop...")
+ds1 = xr.Dataset(coords={"a": ("x", [1, 2, 3]), "b": ("x", ['a', 'b', 'c'])})
+ds1_indexed = ds1.set_index(z=['a', 'b'])
+result1 = ds1_indexed.reset_index("z", drop=False)  # Default is False
+print(f"Success: {len(result1.data_vars)} data variables")
+
+# Test case 2: reset_index with drop on non-multiindex
+print("\n2. Testing reset_index with drop on single index...")
+ds2 = xr.Dataset(coords={"a": ("x", [1, 2, 3])})
+ds2_indexed = ds2.set_index(x='a')
+result2 = ds2_indexed.reset_index("x", drop=True)
+print(f"Success: {len(result2.data_vars)} data variables")
+
+# Test case 3: Multiple reset_index operations
+print("\n3. Testing multiple reset_index operations...")
+ds3 = xr.Dataset(coords={"a": ("x", [1, 2, 3]), "b": ("x", ['a', 'b', 'c'])})
+ds3_indexed = ds3.set_index(z=['a', 'b'])
+result3a = ds3_indexed.reset_index("z", drop=True)
+result3b = result3a.set_index(z=['a', 'b']).reset_index("z", drop=True)
+print(f"Success: {len(result3b.data_vars)} data variables")
+
+# Test case 4: Empty dataset
+print("\n4. Testing empty dataset...")
+ds4 = xr.Dataset()
+try:
+    result4 = ds4.reset_index("nonexistent", drop=True)
+    print("Unexpected success")
+except ValueError as e:
+    print(f"Expected error: {e}")
+
+print("\nAll edge cases completed!")
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index 620f32f8..441c1698 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -4177,7 +4177,7 @@ class Dataset(
         }
         variables.update(new_variables)
 
-        coord_names = set(new_variables) | self._coord_names
+        coord_names = (set(new_variables) | self._coord_names) - set(drop_variables)
 
         return self._replace(variables, coord_names=coord_names, indexes=indexes)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..466c73e0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+import xarray as xr
+
+# This should reproduce the issue
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", e)
+    print("Error type:", type(e).__name__)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..5abd73f0
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,63 @@
+import xarray as xr
+import numpy as np
+
+# Test case 1: Original issue - scalar as second argument
+print("Test 1: Scalar as second argument")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", e)
+
+# Test case 2: Scalar as third argument
+print("\nTest 2: Scalar as third argument")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 2, 10, 0, keep_attrs=True)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", e)
+
+# Test case 3: Both scalar arguments
+print("\nTest 3: Both scalar arguments")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 1, 100, 200, keep_attrs=True)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", e)
+
+# Test case 4: DataArrays with attributes
+print("\nTest 4: DataArrays with attributes")
+try:
+    da1 = xr.DataArray([1, 2, 3], attrs={'attr1': 'value1'})
+    da2 = xr.DataArray([4, 5, 6], attrs={'attr2': 'value2'})
+    result = xr.where(da1 > 1, da1, da2, keep_attrs=True)
+    print("Success! Result:", result)
+    print("Result attributes:", result.attrs)
+except Exception as e:
+    print("Error occurred:", e)
+
+# Test case 5: Mixed DataArray and scalar
+print("\nTest 5: Mixed DataArray and scalar")
+try:
+    da = xr.DataArray([1, 2, 3], attrs={'attr': 'value'})
+    result = xr.where(da > 1, da, 0, keep_attrs=True)
+    print("Success! Result:", result)
+    print("Result attributes:", result.attrs)
+except Exception as e:
+    print("Error occurred:", e)
+
+# Test case 6: keep_attrs=False (should work as before)
+print("\nTest 6: keep_attrs=False")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=False)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", e)
+
+# Test case 7: keep_attrs=None (should work as before)
+print("\nTest 7: keep_attrs=None")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=None)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", e)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 00000000..631b5240
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,29 @@
+import xarray as xr
+
+# Exact reproduction of the GitHub issue
+print("Testing exact GitHub issue scenario...")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0)
+    print("Success! Result:", result)
+    print("Result type:", type(result))
+except Exception as e:
+    print("Error occurred:", e)
+    print("Error type:", type(e).__name__)
+
+print("\nTesting with keep_attrs=True explicitly...")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)
+    print("Success! Result:", result)
+    print("Result type:", type(result))
+except Exception as e:
+    print("Error occurred:", e)
+    print("Error type:", type(e).__name__)
+
+print("\nTesting workaround mentioned in issue (keep_attrs=False)...")
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=False)
+    print("Success! Result:", result)
+    print("Result type:", type(result))
+except Exception as e:
+    print("Error occurred:", e)
+    print("Error type:", type(e).__name__)
\ No newline at end of file
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 7676d8e5..885c1b51 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1829,7 +1829,7 @@ def where(cond, x, y, keep_attrs=None):
     if keep_attrs is True:
         # keep the attributes of x, the second parameter, by default to
         # be consistent with the `where` method of `DataArray` and `Dataset`
-        keep_attrs = lambda attrs, context: attrs[1]
+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else {}
 
     # alignment for three arguments is complicated, so don't support it yet
     return apply_ufunc(
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 000000000..edcac02b7
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,33 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+from sklearn.cluster import KMeans
+
+# Debug the issue
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# Test kmeans directly
+col_min, col_max = X.min(), X.max()
+n_bins = 5
+
+# Deterministic initialization with uniform spacing
+uniform_edges = np.linspace(col_min, col_max, n_bins + 1)
+init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5
+
+# 1D k-means procedure
+km = KMeans(n_clusters=n_bins, init=init, n_init=1)
+centers = km.fit(X).cluster_centers_[:, 0]
+
+print("Centers:", centers)
+print("Are centers sorted?", np.all(np.diff(centers) > 0))
+
+bin_edges = (centers[1:] + centers[:-1]) * 0.5
+bin_edges = np.r_[col_min, bin_edges, col_max]
+
+print("Bin edges:", bin_edges)
+print("Are bin edges sorted?", np.all(np.diff(bin_edges) > 0))
+
+# Test the KBinsDiscretizer
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+est.fit(X)
+print("KBinsDiscretizer bin edges:", est.bin_edges_[0])
+print("Are KBinsDiscretizer bin edges sorted?", np.all(np.diff(est.bin_edges_[0]) > 0))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..7ef7f62da
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,10 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+# Reproduce the issue from the GitHub issue
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# with 5 bins
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X)
+print("Success! Xt =", Xt)
\ No newline at end of file
diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py
index dd969c12b..6f614fa2e 100644
--- a/sklearn/preprocessing/_discretization.py
+++ b/sklearn/preprocessing/_discretization.py
@@ -172,6 +172,8 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):
                 # 1D k-means procedure
                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)
                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]
+                # Sort centers to ensure bin edges are monotonically increasing
+                centers.sort()
                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5
                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]
 
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..dc0a55f53
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,70 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+def test_kmeans_bin_edges_sorted():
+    """Test that kmeans strategy always produces sorted bin edges"""
+    # Test case from the original issue
+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+    est.fit(X)
+    assert np.all(np.diff(est.bin_edges_[0]) > 0), "Bin edges should be sorted"
+    print("Test 1 passed: Original issue case works")
+
+def test_kmeans_various_n_bins():
+    """Test kmeans with various numbers of bins"""
+    X = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).reshape(-1, 1)
+    
+    for n_bins in range(2, 7):
+        est = KBinsDiscretizer(n_bins=n_bins, strategy='kmeans', encode='ordinal')
+        est.fit(X)
+        assert np.all(np.diff(est.bin_edges_[0]) > 0), f"Bin edges should be sorted for n_bins={n_bins}"
+        print(f"Test 2.{n_bins-1} passed: n_bins={n_bins} works")
+
+def test_kmeans_multiple_features():
+    """Test kmeans with multiple features"""
+    X = np.array([
+        [0, 10],
+        [0.5, 9],
+        [2, 8],
+        [3, 7],
+        [9, 6],
+        [10, 5]
+    ])
+    est = KBinsDiscretizer(n_bins=3, strategy='kmeans', encode='ordinal')
+    est.fit(X)
+    
+    for i in range(X.shape[1]):
+        assert np.all(np.diff(est.bin_edges_[i]) > 0), f"Bin edges for feature {i} should be sorted"
+    
+    print("Test 3 passed: Multiple features work")
+
+def test_kmeans_transform_works():
+    """Test that transform works after the fix"""
+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+    est.fit(X)
+    
+    # Test transform on the same data
+    Xt = est.transform(X)
+    assert Xt.shape == X.shape, "Transform should return same shape"
+    print("Test 4 passed: Transform works")
+
+def test_kmeans_inverse_transform():
+    """Test that inverse transform works after the fix"""
+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+    est.fit(X)
+    
+    # Test inverse transform
+    Xt = est.transform(X)
+    X_inv = est.inverse_transform(Xt)
+    assert X_inv.shape == X.shape, "Inverse transform should return same shape"
+    print("Test 5 passed: Inverse transform works")
+
+if __name__ == "__main__":
+    test_kmeans_bin_edges_sorted()
+    test_kmeans_various_n_bins()
+    test_kmeans_multiple_features()
+    test_kmeans_transform_works()
+    test_kmeans_inverse_transform()
+    print("All tests passed!")
\ No newline at end of file
diff --git a/test_issue_specific.py b/test_issue_specific.py
new file mode 100644
index 000000000..8a366aecd
--- /dev/null
+++ b/test_issue_specific.py
@@ -0,0 +1,26 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+# Test the specific case mentioned in the GitHub issue
+# Using the test_nonuniform_strategies data with n_bins=5 instead of 3
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# Test with 5 bins (the problematic case from the issue)
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X)
+
+print("X:", X.ravel())
+print("Xt:", Xt.ravel())
+print("Bin edges:", est.bin_edges_[0])
+print("Are bin edges sorted?", np.all(np.diff(est.bin_edges_[0]) > 0))
+
+# Test that transform works as well
+Xt2 = est.transform(X)
+print("Transform result matches fit_transform:", np.array_equal(Xt, Xt2))
+
+# Test inverse transform
+X_inv = est.inverse_transform(Xt)
+print("Inverse transform shape:", X_inv.shape)
+print("Inverse transform works without error")
+
+print("All tests passed for n_bins=5 case!")
\ No newline at end of file
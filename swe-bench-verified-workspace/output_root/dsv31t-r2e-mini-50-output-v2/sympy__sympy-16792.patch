diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..21be384e79
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,31 @@
+from sympy.utilities.codegen import make_routine, C99CodeGen
+from sympy import MatrixSymbol
+
+# Create a MatrixSymbol that doesn't appear in the expression
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+
+# Create a routine
+routine = make_routine('autofunc', expr, argument_sequence=[x], language='C')
+
+# Check the arguments
+print("Arguments:")
+for arg in routine.arguments:
+    print(f"  {arg.name}: type={type(arg).__name__}, dimensions={arg.dimensions}")
+
+# Generate the prototype
+code_gen = C99CodeGen()
+prototype = code_gen.get_prototype(routine)
+print(f"\nPrototype: {prototype}")
+
+# Check what happens with an argument that appears in the expression
+print("\n--- With argument in expression ---")
+expr2 = x[0,0]
+routine2 = make_routine('autofunc2', expr2, argument_sequence=[x], language='C')
+
+print("Arguments:")
+for arg in routine2.arguments:
+    print(f"  {arg.name}: type={type(arg).__name__}, dimensions={arg.dimensions}")
+
+prototype2 = code_gen.get_prototype(routine2)
+print(f"\nPrototype: {prototype2}")
\ No newline at end of file
diff --git a/debug_issue2.py b/debug_issue2.py
new file mode 100644
index 0000000000..f1327f4bf7
--- /dev/null
+++ b/debug_issue2.py
@@ -0,0 +1,22 @@
+from sympy.utilities.codegen import make_routine, C99CodeGen
+from sympy import MatrixSymbol
+
+# Create a MatrixSymbol that doesn't appear in the expression
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+
+# Create a routine
+routine = make_routine('autofunc', expr, argument_sequence=[x], language='C')
+
+# Check the arguments in detail
+print("Arguments:")
+for arg in routine.arguments:
+    print(f"  {arg.name}: type={type(arg).__name__}")
+    print(f"    arg type: {type(arg.name)}")
+    print(f"    dimensions: {arg.dimensions}")
+    print(f"    hasattr dimensions: {hasattr(arg, 'dimensions')}")
+    print(f"    arg.name is MatrixSymbol: {isinstance(arg.name, MatrixSymbol)}")
+    
+# Let's also check the original MatrixSymbol
+print(f"\nOriginal MatrixSymbol x: {type(x)}")
+print(f"x.shape: {x.shape}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f39b33e965
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+# Test case 1: Array argument that doesn't appear in expression
+print("Test case 1: Array argument not in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 2: Array argument that appears in expression (should work)
+print("\nTest case 2: Array argument in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = x[0,0]
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..a12588c339 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -81,6 +81,7 @@
 from sympy.core.relational import Eq
 from sympy.core.symbol import Dummy, Symbol
 from sympy.tensor.indexed import Idx, IndexedBase
+from sympy.matrices import MatrixSymbol
 from sympy.utilities.codegen import (make_routine, get_code_generator,
                                      OutputArgument, InOutArgument,
                                      InputArgument, CodeGenArgumentListError,
@@ -441,9 +442,9 @@ def _prototype_arg(self, arg):
         np_types = {'double': 'np.double_t',
                     'int': 'np.int_t'}
         t = arg.get_datatype('c')
-        if arg.dimensions:
+        if arg.dimensions or isinstance(arg.name, MatrixSymbol):
             self._need_numpy = True
-            ndim = len(arg.dimensions)
+            ndim = len(arg.dimensions) if arg.dimensions else len(arg.name.shape)
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
         else:
@@ -451,14 +452,17 @@ def _prototype_arg(self, arg):
 
     def _declare_arg(self, arg):
         proto = self._prototype_arg(arg)
-        if arg.dimensions:
-            shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'
+        if arg.dimensions or isinstance(arg.name, MatrixSymbol):
+            if arg.dimensions:
+                shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'
+            else:
+                shape = '(' + ','.join(str(dim) for dim in arg.name.shape) + ')'
             return proto + " = np.empty({shape})".format(shape=shape)
         else:
             return proto + " = 0"
 
     def _call_arg(self, arg):
-        if arg.dimensions:
+        if arg.dimensions or isinstance(arg.name, MatrixSymbol):
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
         elif isinstance(arg, ResultBase):
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..c363758133 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -910,7 +910,7 @@ def get_prototype(self, routine):
         type_args = []
         for arg in routine.arguments:
             name = self.printer.doprint(arg.name)
-            if arg.dimensions or isinstance(arg, ResultBase):
+            if arg.dimensions or isinstance(arg, ResultBase) or isinstance(arg.name, MatrixSymbol):
                 type_args.append((arg.get_datatype('C'), "*%s" % name))
             else:
                 type_args.append((arg.get_datatype('C'), name))
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..00a9d688ca
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,53 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+print("Testing various edge cases...")
+
+# Test case 1: Multiple array arguments, some not in expression
+print("\nTest case 1: Multiple array arguments, some not in expression")
+x = MatrixSymbol('x', 2, 1)
+y = MatrixSymbol('y', 3, 2)
+expr = x[0,0]  # Only uses x, not y
+f = autowrap(expr, args=(x, y), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]), np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 2: Scalar argument not in expression
+print("\nTest case 2: Scalar argument not in expression")
+from sympy import Symbol
+a = Symbol('a')
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0  # Doesn't use a or x
+f = autowrap(expr, args=(a, x), backend='cython')
+try:
+    result = f(5.0, np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 3: No array arguments
+print("\nTest case 3: No array arguments")
+a = Symbol('a')
+b = Symbol('b')
+expr = a + b
+f = autowrap(expr, args=(a, b), backend='cython')
+try:
+    result = f(1.0, 2.0)
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 4: Empty expression with array argument
+print("\nTest case 4: Empty expression with array argument")
+x = MatrixSymbol('x', 2, 1)
+expr = 0.0
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..0058a63d25
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,34 @@
+"""
+Test for the exact GitHub issue scenario:
+autowrap with cython backend fails when array arguments do not appear in wrapped expr
+"""
+
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+print("Testing the exact GitHub issue scenario...")
+
+# Test case from the GitHub issue
+print("\nTest case: Array argument not in expression (should return 1.0)")
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+f = autowrap(expr, args=(x,), backend='cython')
+
+# This should return 1.0 without error
+result = f(np.array([[1.0, 2.0]]))
+print(f"Result: {result}")
+assert result == 1.0, f"Expected 1.0, got {result}"
+
+# Test case from the GitHub issue that was working
+print("\nTest case: Array argument in expression (should return 1.0)")
+x = MatrixSymbol('x', 2, 1)
+expr = x[0,0]
+f = autowrap(expr, args=(x,), backend='cython')
+
+# This should return 1.0 without error
+result = f(np.array([[1.0, 2.0]]))
+print(f"Result: {result}")
+assert result == 1.0, f"Expected 1.0, got {result}"
+
+print("\nAll tests passed! The GitHub issue has been fixed.")
\ No newline at end of file
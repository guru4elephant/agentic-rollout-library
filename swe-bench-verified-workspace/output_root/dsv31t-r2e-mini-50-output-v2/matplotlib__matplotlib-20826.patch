diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..d83f933f26
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,30 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Create shared axes
+fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)
+
+print("Before clear:")
+for i, ax in enumerate(axes.flatten()):
+    print(f"Axes {i}: xaxis visible={ax.xaxis.get_visible()}, yaxis visible={ax.yaxis.get_visible()}")
+    print(f"  xaxis tick labels visible: {ax.xaxis.get_ticklabels()[0].get_visible() if ax.xaxis.get_ticklabels() else 'No tick labels'}")
+    print(f"  yaxis tick labels visible: {ax.yaxis.get_ticklabels()[0].get_visible() if ax.yaxis.get_ticklabels() else 'No tick labels'}")
+
+# Clear each axis
+for ax in axes.flatten():
+    ax.clear()
+
+print("\nAfter clear:")
+for i, ax in enumerate(axes.flatten()):
+    print(f"Axes {i}: xaxis visible={ax.xaxis.get_visible()}, yaxis visible={ax.yaxis.get_visible()}")
+    if ax.xaxis.get_ticklabels():
+        print(f"  xaxis tick labels visible: {[label.get_visible() for label in ax.xaxis.get_ticklabels()]}")
+    else:
+        print("  No xaxis tick labels")
+    if ax.yaxis.get_ticklabels():
+        print(f"  yaxis tick labels visible: {[label.get_visible() for label in ax.yaxis.get_ticklabels()]}")
+    else:
+        print("  No yaxis tick labels")
+
+plt.savefig('debug_output.png')
+print("Plot saved as debug_output.png")
\ No newline at end of file
diff --git a/debug_output.png b/debug_output.png
new file mode 100644
index 0000000000..7ec7d45b46
Binary files /dev/null and b/debug_output.png differ
diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 802fd3c997..cb4881b929 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -1305,9 +1305,37 @@ class _AxesBase(martist.Artist):
         if self._sharex is not None:
             self.xaxis.set_visible(xaxis_visible)
             self.patch.set_visible(patch_visible)
+            # For shared x-axis, only show tick labels on bottom axes
+            if hasattr(self, '_original_sharex') and self._original_sharex:
+                siblings = self._shared_axes["x"].get_siblings(self)
+                if siblings:
+                    # Find the bottom-most axes in each column
+                    bottom_axes = set()
+                    for ax in siblings:
+                        if hasattr(ax, 'get_subplotspec'):
+                            ss = ax.get_subplotspec()
+                            if ss:
+                                bottom_axes.add(ss.get_bottom_ax())
+                    # Only show tick labels on bottom axes
+                    show_labels = self in bottom_axes
+                    self.xaxis.set_tick_params(labelbottom=show_labels)
         if self._sharey is not None:
             self.yaxis.set_visible(yaxis_visible)
             self.patch.set_visible(patch_visible)
+            # For shared y-axis, only show tick labels on left axes
+            if hasattr(self, '_original_sharey') and self._original_sharey:
+                siblings = self._shared_axes["y"].get_siblings(self)
+                if siblings:
+                    # Find the left-most axes in each row
+                    left_axes = set()
+                    for ax in siblings:
+                        if hasattr(ax, 'get_subplotspec'):
+                            ss = ax.get_subplotspec()
+                            if ss:
+                                left_axes.add(ss.get_left_ax())
+                    # Only show tick labels on left axes
+                    show_labels = self in left_axes
+                    self.yaxis.set_tick_params(labelleft=show_labels)
 
         self.stale = True
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f5c932f61d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)
+
+x = np.arange(0.0, 2*np.pi, 0.01)
+y = np.sin(x)
+
+for ax in axes.flatten():
+    ax.clear()
+    ax.plot(x, y)
+
+plt.savefig('reproduce_issue_output.png')
+print("Plot saved as reproduce_issue_output.png")
\ No newline at end of file
diff --git a/reproduce_issue_output.png b/reproduce_issue_output.png
new file mode 100644
index 0000000000..50d9a65d2e
Binary files /dev/null and b/reproduce_issue_output.png differ
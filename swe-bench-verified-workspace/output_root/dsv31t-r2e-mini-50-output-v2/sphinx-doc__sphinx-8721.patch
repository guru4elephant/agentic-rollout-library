diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..6ffeda53f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the viewcode epub issue.
+"""
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_issue():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple conf.py
+        conf_py = '''
+extensions = ['sphinx.ext.viewcode']
+viewcode_enable_epub = False
+'''
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_py)
+        
+        # Create a simple index.rst
+        index_rst = '''
+Test Documentation
+==================
+
+.. py:function:: os.path.join
+
+Test function documentation.
+
+.. py:module:: os.path
+
+Module documentation.
+'''
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_rst)
+        
+        # Build HTML first (this should work fine)
+        print("Building HTML...")
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+        
+        # Check if _modules directory was created for HTML
+        html_modules_dir = os.path.join(outdir, '_modules')
+        html_has_modules = os.path.exists(html_modules_dir)
+        print(f"HTML build created _modules directory: {html_has_modules}")
+        
+        # Now build epub (this should NOT create _modules directory)
+        epub_outdir = os.path.join(tmpdir, 'epub_build')
+        os.makedirs(epub_outdir)
+        
+        print("Building EPUB...")
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, epub_outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if _modules directory was created for EPUB
+        epub_modules_dir = os.path.join(epub_outdir, '_modules')
+        epub_has_modules = os.path.exists(epub_modules_dir)
+        print(f"EPUB build created _modules directory: {epub_has_modules}")
+        
+        # The issue: epub_has_modules should be False but is likely True
+        if epub_has_modules:
+            print("BUG REPRODUCED: EPUB build created _modules directory even with viewcode_enable_epub=False")
+            return False
+        else:
+            print("No issue found: EPUB build correctly did not create _modules directory")
+            return True
+
+if __name__ == '__main__':
+    success = test_viewcode_epub_issue()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue_v2.py b/reproduce_issue_v2.py
new file mode 100644
index 000000000..732292e17
--- /dev/null
+++ b/reproduce_issue_v2.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the viewcode epub issue using the actual test structure.
+"""
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_issue():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Copy the test-ext-viewcode root to our temporary directory
+        test_root = '/testbed/tests/roots/test-ext-viewcode'
+        srcdir = os.path.join(tmpdir, 'source')
+        shutil.copytree(test_root, srcdir)
+        
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        # Modify the conf.py to set viewcode_enable_epub = False
+        conf_py_path = os.path.join(srcdir, 'conf.py')
+        with open(conf_py_path, 'a') as f:
+            f.write('\nviewcode_enable_epub = False\n')
+        
+        # Build HTML first (this should work fine)
+        print("Building HTML...")
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+        
+        # Check if _modules directory was created for HTML
+        html_modules_dir = os.path.join(outdir, '_modules')
+        html_has_modules = os.path.exists(html_modules_dir)
+        print(f"HTML build created _modules directory: {html_has_modules}")
+        if html_has_modules:
+            print(f"HTML _modules contents: {os.listdir(html_modules_dir)}")
+        
+        # Now build epub (this should NOT create _modules directory)
+        epub_outdir = os.path.join(tmpdir, 'epub_build')
+        os.makedirs(epub_outdir)
+        
+        print("Building EPUB...")
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, epub_outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if _modules directory was created for EPUB
+        epub_modules_dir = os.path.join(epub_outdir, '_modules')
+        epub_has_modules = os.path.exists(epub_modules_dir)
+        print(f"EPUB build created _modules directory: {epub_has_modules}")
+        if epub_has_modules:
+            print(f"EPUB _modules contents: {os.listdir(epub_modules_dir)}")
+        
+        # The issue: epub_has_modules should be False but is likely True
+        if epub_has_modules:
+            print("BUG REPRODUCED: EPUB build created _modules directory even with viewcode_enable_epub=False")
+            return False
+        else:
+            print("No issue found: EPUB build correctly did not create _modules directory")
+            return True
+
+if __name__ == '__main__':
+    success = test_viewcode_epub_issue()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py
index a7d52a91c..060604e25 100644
--- a/sphinx/ext/viewcode.py
+++ b/sphinx/ext/viewcode.py
@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
     env = app.builder.env
     if not hasattr(env, '_viewcode_modules'):
         return
+    if app.builder.name.startswith("epub") and not env.config.viewcode_enable_epub:
+        return
     highlighter = app.builder.highlighter  # type: ignore
     urito = app.builder.get_relative_uri
 
diff --git a/test_epub_enabled.py b/test_epub_enabled.py
new file mode 100644
index 000000000..57b986b8c
--- /dev/null
+++ b/test_epub_enabled.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""
+Script to test that viewcode still works for epub when viewcode_enable_epub=True.
+"""
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_enabled():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Copy the test-ext-viewcode root to our temporary directory
+        test_root = '/testbed/tests/roots/test-ext-viewcode'
+        srcdir = os.path.join(tmpdir, 'source')
+        shutil.copytree(test_root, srcdir)
+        
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        # Modify the conf.py to set viewcode_enable_epub = True
+        conf_py_path = os.path.join(srcdir, 'conf.py')
+        with open(conf_py_path, 'a') as f:
+            f.write('\nviewcode_enable_epub = True\n')
+        
+        # Build epub with viewcode_enable_epub=True
+        epub_outdir = os.path.join(tmpdir, 'epub_build')
+        os.makedirs(epub_outdir)
+        
+        print("Building EPUB with viewcode_enable_epub=True...")
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, epub_outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if _modules directory was created for EPUB
+        epub_modules_dir = os.path.join(epub_outdir, '_modules')
+        epub_has_modules = os.path.exists(epub_modules_dir)
+        print(f"EPUB build created _modules directory: {epub_has_modules}")
+        if epub_has_modules:
+            print(f"EPUB _modules contents: {os.listdir(epub_modules_dir)}")
+        
+        # The expected behavior: epub_has_modules should be True when viewcode_enable_epub=True
+        if epub_has_modules:
+            print("SUCCESS: EPUB build correctly created _modules directory with viewcode_enable_epub=True")
+            return True
+        else:
+            print("FAILURE: EPUB build did not create _modules directory even with viewcode_enable_epub=True")
+            return False
+
+if __name__ == '__main__':
+    success = test_viewcode_epub_enabled()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_html_still_works.py b/test_html_still_works.py
new file mode 100644
index 000000000..289cc1953
--- /dev/null
+++ b/test_html_still_works.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+"""
+Script to test that HTML builders still work normally after the fix.
+"""
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_html_still_works():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Copy the test-ext-viewcode root to our temporary directory
+        test_root = '/testbed/tests/roots/test-ext-viewcode'
+        srcdir = os.path.join(tmpdir, 'source')
+        shutil.copytree(test_root, srcdir)
+        
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        # Modify the conf.py to set viewcode_enable_epub = False
+        conf_py_path = os.path.join(srcdir, 'conf.py')
+        with open(conf_py_path, 'a') as f:
+            f.write('\nviewcode_enable_epub = False\n')
+        
+        # Build HTML (should still work normally)
+        print("Building HTML...")
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+        
+        # Check if _modules directory was created for HTML
+        html_modules_dir = os.path.join(outdir, '_modules')
+        html_has_modules = os.path.exists(html_modules_dir)
+        print(f"HTML build created _modules directory: {html_has_modules}")
+        if html_has_modules:
+            print(f"HTML _modules contents: {os.listdir(html_modules_dir)}")
+        
+        # The expected behavior: html_has_modules should be True for HTML builders
+        if html_has_modules:
+            print("SUCCESS: HTML build correctly created _modules directory")
+            return True
+        else:
+            print("FAILURE: HTML build did not create _modules directory")
+            return False
+
+if __name__ == '__main__':
+    success = test_html_still_works()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 21a0faec3..be1a9127e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
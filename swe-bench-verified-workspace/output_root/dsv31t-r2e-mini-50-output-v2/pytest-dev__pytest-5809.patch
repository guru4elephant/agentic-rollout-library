diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..eb161f81a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the pastebin lexer issue.
+This script demonstrates that using lexer="python3" causes HTTP 400 errors
+for certain content, while lexer="text" works fine.
+"""
+
+import sys
+from urllib.request import urlopen
+from urllib.parse import urlencode
+
+def test_pastebin_with_content(content, lexer):
+    """Test sending content to bpaste.net with a specific lexer"""
+    params = {
+        "code": content,
+        "lexer": lexer,
+        "expiry": "1week",
+    }
+    url = "https://bpaste.net"
+    
+    try:
+        response = urlopen(url, data=urlencode(params).encode("ascii")).read()
+        print(f"Success with lexer='{lexer}': HTTP 200")
+        return True
+    except Exception as e:
+        print(f"Error with lexer='{lexer}': {e}")
+        return False
+
+def main():
+    # Test with problematic content that causes HTTP 400 with python3 lexer
+    # This content mimics pytest output that might contain special characters
+    problematic_content = b"""\
+============================= test session starts ==============================
+platform linux -- Python 3.8.0, pytest-5.2.1, py-1.8.0, pluggy-0.13.0
+rootdir: /tmp
+collected 1 item
+
+test_example.py F                                                         [100%]
+
+=================================== FAILURES ===================================
+________________________________ test_example _________________________________
+
+    def test_example():
+>       assert False
+E       assert False
+
+test_example.py:4: AssertionError
+=========================== 1 failed in 0.12 seconds ===========================
+"""
+    
+    print("Testing with problematic content...")
+    print("Content length:", len(problematic_content))
+    print("Content preview:", problematic_content[:100])
+    print()
+    
+    # Test with python3 lexer (should fail)
+    success_python3 = test_pastebin_with_content(problematic_content, "python3")
+    
+    print()
+    
+    # Test with text lexer (should succeed)
+    success_text = test_pastebin_with_content(problematic_content, "text")
+    
+    print()
+    print("Results:")
+    print(f"python3 lexer: {'SUCCESS' if success_python3 else 'FAILED'}")
+    print(f"text lexer: {'SUCCESS' if success_text else 'FAILED'}")
+    
+    if not success_python3 and success_text:
+        print("\n✅ Issue confirmed: python3 lexer fails while text lexer works!")
+        return True
+    else:
+        print("\n❌ Issue not reproduced or unexpected behavior")
+        return False
+
+if __name__ == "__main__":
+    sys.exit(0 if main() else 1)
\ No newline at end of file
diff --git a/src/_pytest/pastebin.py b/src/_pytest/pastebin.py
index 41576a615..79b0d9d40 100644
--- a/src/_pytest/pastebin.py
+++ b/src/_pytest/pastebin.py
@@ -79,7 +79,7 @@ def create_new_paste(contents):
 
     params = {
         "code": contents,
-        "lexer": "python3" if sys.version_info[0] >= 3 else "python",
+        "lexer": "text",
         "expiry": "1week",
     }
     url = "https://bpaste.net"
diff --git a/test_pastebin_integration.py b/test_pastebin_integration.py
new file mode 100644
index 000000000..c59a7ce5f
--- /dev/null
+++ b/test_pastebin_integration.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+"""
+Integration test to verify the pastebin functionality works correctly
+with the new 'text' lexer instead of 'python3'.
+"""
+
+import subprocess
+import sys
+import tempfile
+import os
+
+def test_pastebin_functionality():
+    """Test that pytest --pastebin works with the text lexer"""
+    
+    # Create a simple test file that will fail
+    test_content = '''
+def test_fail():
+    assert False, "This test should fail"
+'''
+    
+    # Create temporary test directory and file
+    with tempfile.TemporaryDirectory() as tmpdir:
+        test_file = os.path.join(tmpdir, "test_example.py")
+        with open(test_file, 'w') as f:
+            f.write(test_content)
+        
+        # Run pytest with --pastebin=failed
+        # We'll capture the output to see if it completes successfully
+        result = subprocess.run([
+            sys.executable, '-m', 'pytest', 
+            '--pastebin=failed',
+            test_file
+        ], capture_output=True, text=True, cwd=tmpdir)
+        
+        print("Return code:", result.returncode)
+        print("STDOUT:", result.stdout)
+        print("STDERR:", result.stderr)
+        
+        # The test should complete successfully (return code 1 because tests failed)
+        # and should mention "Sending information to Paste Service"
+        if result.returncode == 1 and "Sending information to Paste Service" in result.stdout:
+            print("✅ Pastebin functionality works correctly!")
+            return True
+        else:
+            print("❌ Pastebin functionality may have issues")
+            return False
+
+if __name__ == "__main__":
+    success = test_pastebin_functionality()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py
index bac8f9802..aac0b651e 100644
--- a/testing/test_pastebin.py
+++ b/testing/test_pastebin.py
@@ -126,8 +126,7 @@ class TestPaste(object):
         assert len(mocked_urlopen) == 1
         url, data = mocked_urlopen[0]
         assert type(data) is bytes
-        lexer = "python3" if sys.version_info[0] >= 3 else "python"
         assert url == "https://bpaste.net"
-        assert "lexer=%s" % lexer in data.decode()
+        assert "lexer=text" in data.decode()
         assert "code=full-paste-contents" in data.decode()
         assert "expiry=1week" in data.decode()
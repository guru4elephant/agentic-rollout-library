diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 000000000..482943f36
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,119 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from importlib import reload
+
+def test_final_verification():
+    """Final verification that the XDG compliance implementation works correctly"""
+    
+    print("=== Final XDG Compliance Verification ===")
+    
+    # Clear any existing environment variables
+    env_vars_to_clear = ['PYLINTHOME', 'XDG_DATA_HOME']
+    for var in env_vars_to_clear:
+        if var in os.environ:
+            del os.environ[var]
+    
+    # Import pylint.config to get fresh state
+    import pylint.config as config
+    reload(config)
+    
+    # Test 1: Default XDG behavior
+    print("\n1. Default XDG behavior:")
+    user_home = os.path.expanduser("~")
+    expected_xdg_path = os.path.join(user_home, '.local', 'share', 'pylint')
+    
+    print(f"   USER_HOME: {user_home}")
+    print(f"   Expected XDG path: {expected_xdg_path}")
+    print(f"   Actual PYLINT_HOME: {config.PYLINT_HOME}")
+    
+    if config.PYLINT_HOME == expected_xdg_path:
+        print("   ✓ PASS: Default XDG path is correct")
+    else:
+        print("   ✗ FAIL: Default XDG path is incorrect")
+        return False
+    
+    # Test 2: XDG_DATA_HOME environment variable
+    print("\n2. XDG_DATA_HOME environment variable:")
+    test_xdg_home = '/tmp/verification_xdg'
+    os.environ['XDG_DATA_HOME'] = test_xdg_home
+    
+    reload(config)
+    expected_path = os.path.join(test_xdg_home, 'pylint')
+    print(f"   XDG_DATA_HOME: {test_xdg_home}")
+    print(f"   Expected path: {expected_path}")
+    print(f"   Actual PYLINT_HOME: {config.PYLINT_HOME}")
+    
+    if config.PYLINT_HOME == expected_path:
+        print("   ✓ PASS: XDG_DATA_HOME is respected")
+    else:
+        print("   ✗ FAIL: XDG_DATA_HOME not respected")
+        return False
+    
+    # Clean up
+    del os.environ['XDG_DATA_HOME']
+    reload(config)
+    
+    # Test 3: PYLINTHOME precedence (should override XDG)
+    print("\n3. PYLINTHOME precedence:")
+    test_pylint_home = '/tmp/verification_pylint'
+    os.environ['PYLINTHOME'] = test_pylint_home
+    
+    reload(config)
+    print(f"   PYLINTHOME: {test_pylint_home}")
+    print(f"   Actual PYLINT_HOME: {config.PYLINT_HOME}")
+    
+    if config.PYLINT_HOME == test_pylint_home:
+        print("   ✓ PASS: PYLINTHOME takes precedence over XDG")
+    else:
+        print("   ✗ FAIL: PYLINTHOME not taking precedence")
+        return False
+    
+    # Clean up
+    del os.environ['PYLINTHOME']
+    reload(config)
+    
+    # Test 4: Directory creation and functionality
+    print("\n4. Directory creation and functionality:")
+    test_data = {'test': 'verification_data'}
+    test_base = 'verification_test'
+    
+    # This should create the XDG directory
+    config.save_results(test_data, test_base)
+    
+    # Check if directory was created
+    if os.path.exists(config.PYLINT_HOME):
+        print(f"   ✓ PASS: XDG directory created: {config.PYLINT_HOME}")
+        
+        # Check if file was created with correct content
+        expected_file = os.path.join(config.PYLINT_HOME, f"{test_base.replace(os.sep, '_')}1.stats")
+        if os.path.exists(expected_file):
+            print(f"   ✓ PASS: Stats file created: {expected_file}")
+            
+            # Try to load the data back
+            loaded_data = config.load_results(test_base)
+            if loaded_data == test_data:
+                print("   ✓ PASS: Data successfully saved and loaded")
+            else:
+                print(f"   ✗ FAIL: Data mismatch. Expected: {test_data}, Got: {loaded_data}")
+        else:
+            print(f"   ✗ FAIL: Stats file not found: {expected_file}")
+        
+        # Clean up
+        if os.path.exists(config.PYLINT_HOME):
+            shutil.rmtree(config.PYLINT_HOME)
+            print(f"   Cleaned up: {config.PYLINT_HOME}")
+    else:
+        print(f"   ✗ FAIL: Directory not created: {config.PYLINT_HOME}")
+        return False
+    
+    print("\n=== Final verification completed successfully! ===")
+    print("The implementation is XDG Base Directory Specification compliant!")
+    return True
+
+if __name__ == "__main__":
+    success = test_final_verification()
+    if not success:
+        exit(1)
\ No newline at end of file
diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
index 84774d0e3..2af79b78f 100644
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -63,7 +63,9 @@ if "PYLINTHOME" in os.environ:
 elif USER_HOME == "~":
     PYLINT_HOME = ".pylint.d"
 else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+    # XDG Base Directory Specification compliance
+    xdg_data_home = os.environ.get('XDG_DATA_HOME') or os.path.join(USER_HOME, '.local', 'share')
+    PYLINT_HOME = os.path.join(xdg_data_home, 'pylint')
 
 
 def _get_pdata_path(base_name, recurs):
@@ -110,11 +112,14 @@ ENV_HELP = (
 The following environment variables are used:
     * PYLINTHOME
     Path to the directory where persistent data for the run will be stored. If
-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
-directory).
+not found, it defaults to $XDG_DATA_HOME/pylint/ (typically ~/.local/share/pylint/)
+or .pylint.d (in the current working directory if USER_HOME is '~').
     * PYLINTRC
     Path to the configuration file. See the documentation for the method used
 to search for configuration file.
+    * XDG_DATA_HOME
+    Base directory for user-specific data files. If not set, defaults to
+~/.local/share.
 """
     % globals()  # type: ignore
 )
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..cd25a76ad
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from pylint.config import PYLINT_HOME, USER_HOME
+
+def test_current_behavior():
+    print("=== Testing current PYLINT_HOME behavior ===")
+    print(f"USER_HOME: {USER_HOME}")
+    print(f"PYLINT_HOME: {PYLINT_HOME}")
+    
+    # Test if the directory exists
+    if os.path.exists(PYLINT_HOME):
+        print(f"Directory {PYLINT_HOME} already exists!")
+    else:
+        print(f"Directory {PYLINT_HOME} does not exist yet.")
+    
+    # Check what would be created based on current logic
+    if "PYLINTHOME" in os.environ:
+        expected_path = os.environ["PYLINTHOME"]
+        print(f"PYLINTHOME env var is set: {expected_path}")
+    elif USER_HOME == "~":
+        expected_path = ".pylint.d"
+        print(f"USER_HOME is '~', would create: {expected_path}")
+    else:
+        # XDG-compliant behavior
+        xdg_data_home = os.environ.get('XDG_DATA_HOME') or os.path.join(USER_HOME, '.local', 'share')
+        expected_path = os.path.join(xdg_data_home, 'pylint')
+        print(f"Would create XDG-compliant path: {expected_path}")
+    
+    return expected_path
+
+def test_xdg_behavior():
+    print("\n=== Testing XDG-compliant behavior ===")
+    
+    # XDG Base Directory Specification
+    xdg_data_home = os.environ.get('XDG_DATA_HOME') or os.path.join(USER_HOME, '.local', 'share')
+    xdg_pylint_dir = os.path.join(xdg_data_home, 'pylint')
+    
+    print(f"XDG_DATA_HOME would be: {xdg_data_home}")
+    print(f"Pylint XDG directory would be: {xdg_pylint_dir}")
+    
+    return xdg_pylint_dir
+
+if __name__ == "__main__":
+    current_path = test_current_behavior()
+    xdg_path = test_xdg_behavior()
+    
+    print(f"\nCurrent path: {current_path}")
+    print(f"XDG-compliant path: {xdg_path}")
+    
+    # Test if we can create the XDG directory
+    try:
+        os.makedirs(xdg_path, exist_ok=True)
+        print(f"Successfully created XDG directory: {xdg_path}")
+        
+        # Clean up
+        if os.path.exists(xdg_path):
+            shutil.rmtree(xdg_path)
+            print(f"Cleaned up XDG directory: {xdg_path}")
+            
+    except Exception as e:
+        print(f"Error creating XDG directory: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..91ea34eec
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+
+# Temporarily add the current directory to Python path to import pylint
+import sys
+sys.path.insert(0, '.')
+
+def test_edge_cases():
+    print("=== Testing edge cases for XDG compliance ===")
+    
+    # Test 1: PYLINTHOME environment variable takes precedence
+    print("\n1. Testing PYLINTHOME precedence:")
+    os.environ['PYLINTHOME'] = '/custom/pylint/home'
+    from pylint.config import PYLINT_HOME
+    print(f"   PYLINTHOME set to: {os.environ['PYLINTHOME']}")
+    print(f"   PYLINT_HOME is: {PYLINT_HOME}")
+    assert PYLINT_HOME == '/custom/pylint/home', "PYLINTHOME should take precedence"
+    del os.environ['PYLINTHOME']
+    
+    # Test 2: XDG_DATA_HOME environment variable
+    print("\n2. Testing XDG_DATA_HOME:")
+    os.environ['XDG_DATA_HOME'] = '/custom/xdg/data'
+    from importlib import reload
+    import pylint.config
+    reload(pylint.config)
+    from pylint.config import PYLINT_HOME
+    print(f"   XDG_DATA_HOME set to: {os.environ['XDG_DATA_HOME']}")
+    print(f"   PYLINT_HOME is: {PYLINT_HOME}")
+    assert PYLINT_HOME == '/custom/xdg/data/pylint', "Should use XDG_DATA_HOME"
+    del os.environ['XDG_DATA_HOME']
+    reload(pylint.config)
+    
+    # Test 3: USER_HOME is '~' (edge case)
+    print("\n3. Testing USER_HOME='~' case:")
+    # We can't easily simulate this case without mocking, but let's verify current behavior
+    from pylint.config import PYLINT_HOME, USER_HOME
+    print(f"   USER_HOME: {USER_HOME}")
+    print(f"   PYLINT_HOME: {PYLINT_HOME}")
+    
+    # Test 4: Directory creation functionality
+    print("\n4. Testing directory creation:")
+    from pylint.config import save_results, PYLINT_HOME
+    test_data = {'test': 'data'}
+    
+    # This should create the XDG directory
+    save_results(test_data, 'test_file')
+    
+    # Check if directory was created
+    if os.path.exists(PYLINT_HOME):
+        print(f"   Directory created successfully: {PYLINT_HOME}")
+        # Clean up
+        if os.path.exists(PYLINT_HOME):
+            shutil.rmtree(PYLINT_HOME)
+            print(f"   Cleaned up: {PYLINT_HOME}")
+    else:
+        print(f"   Directory not created: {PYLINT_HOME}")
+    
+    print("\n=== All edge case tests completed ===")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_xdg_compliance.py b/test_xdg_compliance.py
new file mode 100644
index 000000000..59ff602f5
--- /dev/null
+++ b/test_xdg_compliance.py
@@ -0,0 +1,115 @@
+#!/usr/bin/env python3
+
+import os
+import shutil
+import tempfile
+
+def test_xdg_compliance():
+    """Test that the XDG compliance changes work correctly"""
+    
+    print("=== Testing XDG Base Directory Specification Compliance ===")
+    
+    # Test 1: Default behavior (no env vars set)
+    print("\n1. Testing default behavior:")
+    if 'PYLINTHOME' in os.environ:
+        del os.environ['PYLINTHOME']
+    if 'XDG_DATA_HOME' in os.environ:
+        del os.environ['XDG_DATA_HOME']
+    
+    # Import after clearing env vars
+    from pylint.config import PYLINT_HOME, USER_HOME
+    
+    expected_path = os.path.join(USER_HOME, '.local', 'share', 'pylint')
+    print(f"   USER_HOME: {USER_HOME}")
+    print(f"   Expected XDG path: {expected_path}")
+    print(f"   Actual PYLINT_HOME: {PYLINT_HOME}")
+    
+    if PYLINT_HOME == expected_path:
+        print("   ✓ PASS: Default XDG path is correct")
+    else:
+        print("   ✗ FAIL: Default XDG path is incorrect")
+        return False
+    
+    # Test 2: XDG_DATA_HOME environment variable
+    print("\n2. Testing XDG_DATA_HOME environment variable:")
+    test_xdg_home = '/tmp/test_xdg_data'
+    os.environ['XDG_DATA_HOME'] = test_xdg_home
+    
+    # Need to reload the module to pick up the new env var
+    from importlib import reload
+    import pylint.config
+    reload(pylint.config)
+    from pylint.config import PYLINT_HOME
+    
+    expected_path = os.path.join(test_xdg_home, 'pylint')
+    print(f"   XDG_DATA_HOME: {test_xdg_home}")
+    print(f"   Expected path: {expected_path}")
+    print(f"   Actual PYLINT_HOME: {PYLINT_HOME}")
+    
+    if PYLINT_HOME == expected_path:
+        print("   ✓ PASS: XDG_DATA_HOME is respected")
+    else:
+        print("   ✗ FAIL: XDG_DATA_HOME not respected")
+        return False
+    
+    # Clean up XDG_DATA_HOME
+    del os.environ['XDG_DATA_HOME']
+    reload(pylint.config)
+    
+    # Test 3: PYLINTHOME takes precedence
+    print("\n3. Testing PYLINTHOME precedence:")
+    test_pylint_home = '/tmp/custom_pylint_home'
+    os.environ['PYLINTHOME'] = test_pylint_home
+    
+    reload(pylint.config)
+    from pylint.config import PYLINT_HOME
+    
+    print(f"   PYLINTHOME: {test_pylint_home}")
+    print(f"   Actual PYLINT_HOME: {PYLINT_HOME}")
+    
+    if PYLINT_HOME == test_pylint_home:
+        print("   ✓ PASS: PYLINTHOME takes precedence")
+    else:
+        print("   ✗ FAIL: PYLINTHOME not taking precedence")
+        return False
+    
+    # Clean up PYLINTHOME
+    del os.environ['PYLINTHOME']
+    reload(pylint.config)
+    
+    # Test 4: Directory creation functionality
+    print("\n4. Testing directory creation:")
+    from pylint.config import save_results, PYLINT_HOME
+    
+    test_data = {'test': 'data'}
+    test_base = 'test_file'
+    
+    # This should create the XDG directory
+    save_results(test_data, test_base)
+    
+    # Check if directory was created
+    if os.path.exists(PYLINT_HOME):
+        print(f"   ✓ PASS: Directory created: {PYLINT_HOME}")
+        
+        # Check if file was created
+        expected_file = os.path.join(PYLINT_HOME, f"{test_base.replace(os.sep, '_')}1.stats")
+        if os.path.exists(expected_file):
+            print(f"   ✓ PASS: Stats file created: {expected_file}")
+        else:
+            print(f"   ✗ FAIL: Stats file not found: {expected_file}")
+        
+        # Clean up
+        if os.path.exists(PYLINT_HOME):
+            shutil.rmtree(PYLINT_HOME)
+            print(f"   Cleaned up: {PYLINT_HOME}")
+    else:
+        print(f"   ✗ FAIL: Directory not created: {PYLINT_HOME}")
+        return False
+    
+    print("\n=== All XDG compliance tests passed! ===")
+    return True
+
+if __name__ == "__main__":
+    success = test_xdg_compliance()
+    if not success:
+        exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..1d6b0c2a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,22 @@
+import xarray as xr
+import numpy as np
+
+# Create test data
+my_data = xr.DataArray(np.arange(1, 10), dims="x")
+
+# Option 1: take a center-justified rolling average
+result1 = my_data.rolling(x=3, center=True).mean().values
+print("Result 1 (direct method):", result1)
+
+# Option 2: manually iterate over rolling windows
+my_data_rolling = my_data.rolling(x=3, center=True)
+result2 = [window.mean().values.item() for label, window in my_data_rolling]
+print("Result 2 (manual iteration):", result2)
+
+# Expected result should be the same as result1
+expected = [np.nan, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, np.nan]
+print("Expected:", expected)
+
+# Check if results match
+print("Direct and manual results match:", np.allclose(result1, result2, equal_nan=True))
+print("Manual and expected results match:", np.allclose(result2, expected, equal_nan=True))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..157a521e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,68 @@
+import xarray as xr
+import numpy as np
+
+def test_rolling_iteration():
+    print("Testing rolling iteration with center=True...")
+    
+    # Test case 1: Original issue
+    print("\n1. Original issue test:")
+    my_data = xr.DataArray(np.arange(1, 10), dims="x")
+    
+    # Direct method
+    result1 = my_data.rolling(x=3, center=True).mean().values
+    
+    # Manual iteration
+    my_data_rolling = my_data.rolling(x=3, center=True)
+    result2 = [window.mean().values.item() for label, window in my_data_rolling]
+    
+    print("Direct method:", result1)
+    print("Manual iteration:", result2)
+    print("Match:", np.allclose(result1, result2, equal_nan=True))
+    
+    # Test case 2: Even window size
+    print("\n2. Even window size test:")
+    my_data = xr.DataArray(np.arange(1, 11), dims="x")
+    
+    # Direct method
+    result1 = my_data.rolling(x=4, center=True).mean().values
+    
+    # Manual iteration
+    my_data_rolling = my_data.rolling(x=4, center=True)
+    result2 = [window.mean().values.item() for label, window in my_data_rolling]
+    
+    print("Direct method:", result1)
+    print("Manual iteration:", result2)
+    print("Match:", np.allclose(result1, result2, equal_nan=True))
+    
+    # Test case 3: center=False (should remain unchanged)
+    print("\n3. center=False test (should remain unchanged):")
+    my_data = xr.DataArray(np.arange(1, 10), dims="x")
+    
+    # Direct method
+    result1 = my_data.rolling(x=3, center=False).mean().values
+    
+    # Manual iteration
+    my_data_rolling = my_data.rolling(x=3, center=False)
+    result2 = [window.mean().values.item() for label, window in my_data_rolling]
+    
+    print("Direct method:", result1)
+    print("Manual iteration:", result2)
+    print("Match:", np.allclose(result1, result2, equal_nan=True))
+    
+    # Test case 4: Small array
+    print("\n4. Small array test:")
+    my_data = xr.DataArray(np.arange(1, 5), dims="x")
+    
+    # Direct method
+    result1 = my_data.rolling(x=3, center=True).mean().values
+    
+    # Manual iteration
+    my_data_rolling = my_data.rolling(x=3, center=True)
+    result2 = [window.mean().values.item() for label, window in my_data_rolling]
+    
+    print("Direct method:", result1)
+    print("Manual iteration:", result2)
+    print("Match:", np.allclose(result1, result2, equal_nan=True))
+
+if __name__ == "__main__":
+    test_rolling_iteration()
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..511bf7a8 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -270,9 +270,25 @@ class DataArrayRolling(Rolling["DataArray"]):
     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
-        stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
+        
+        # Calculate window positions
+        if self.center[0]:
+            # For centered windows, calculate offset to center each window
+            # The window for position i should be [i - offset : i + offset] for odd windows,
+            # or [i - offset : i + offset] for even windows (where offset = window_size // 2)
+            offset = self.window[0] // 2
+            starts = np.arange(len(self.window_labels)) - offset
+            stops = starts + self.window[0]
+            
+            # Handle boundary conditions - ensure windows are within valid range
+            starts = np.clip(starts, 0, len(self.window_labels))
+            stops = np.clip(stops, 0, len(self.window_labels))
+        else:
+            # For non-centered windows (original behavior)
+            stops = np.arange(1, len(self.window_labels) + 1)
+            starts = stops - int(self.window[0])
+            starts[: int(self.window[0])] = 0
+        
         for (label, start, stop) in zip(self.window_labels, starts, stops):
             window = self.obj.isel({self.dim[0]: slice(start, stop)})
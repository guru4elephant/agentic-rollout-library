diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ad0a0bd2a3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+from sympy import sstr, S, Eq, Limit
+from sympy.abc import x, y
+
+print("Testing sstr with sympy_integers=True:")
+print("x + S(1)/2:", sstr(x + S(1)/2, sympy_integers=True))
+print("Eq(x, S(1)/2):", sstr(Eq(x, S(1)/2), sympy_integers=True))
+print("Limit(x, x, S(1)/2):", sstr(Limit(x, x, S(1)/2), sympy_integers=True))
+
+print("\nTesting python code generation:")
+from sympy import python
+print("python(Eq(x, y)):")
+print(python(Eq(x, y)))
\ No newline at end of file
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index cc1d19fcce..d0b98f463b 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -86,7 +86,7 @@ def _print_Or(self, expr):
         return self.stringify(expr.args, " | ", PRECEDENCE["BitwiseOr"])
 
     def _print_AppliedPredicate(self, expr):
-        return '%s(%s)' % (expr.func, expr.arg)
+        return '%s(%s)' % (expr.func, self._print(expr.arg))
 
     def _print_Basic(self, expr):
         l = [self._print(o) for o in expr.args]
@@ -141,7 +141,7 @@ def _print_Exp1(self, expr):
         return 'E'
 
     def _print_ExprCondPair(self, expr):
-        return '(%s, %s)' % (expr.expr, expr.cond)
+        return '(%s, %s)' % (self._print(expr.expr), self._print(expr.cond))
 
     def _print_FiniteSet(self, s):
         s = sorted(s, key=default_sort_key)
@@ -216,9 +216,9 @@ def _print_LatticeOp(self, expr):
     def _print_Limit(self, expr):
         e, z, z0, dir = expr.args
         if str(dir) == "+":
-            return "Limit(%s, %s, %s)" % (e, z, z0)
+            return "Limit(%s, %s, %s)" % (self._print(e), self._print(z), self._print(z0))
         else:
-            return "Limit(%s, %s, %s, dir='%s')" % (e, z, z0, dir)
+            return "Limit(%s, %s, %s, dir='%s')" % (self._print(e), self._print(z), self._print(z0), dir)
 
     def _print_list(self, expr):
         return "[%s]" % self.stringify(expr, ", ")
@@ -341,7 +341,7 @@ def _print_NegativeInfinity(self, expr):
         return '-oo'
 
     def _print_Normal(self, expr):
-        return "Normal(%s, %s)" % (expr.mu, expr.sigma)
+        return "Normal(%s, %s)" % (self._print(expr.mu), self._print(expr.sigma))
 
     def _print_Order(self, expr):
         if all(p is S.Zero for p in expr.point) or not len(expr.variables):
@@ -630,7 +630,7 @@ def _print_Relational(self, expr):
         }
 
         if expr.rel_op in charmap:
-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)
+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))
 
         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),
                            self._relationals.get(expr.rel_op) or expr.rel_op,
@@ -722,7 +722,7 @@ def _print_Transpose(self, T):
         return "%s.T" % self.parenthesize(T.arg, PRECEDENCE["Pow"])
 
     def _print_Uniform(self, expr):
-        return "Uniform(%s, %s)" % (expr.a, expr.b)
+        return "Uniform(%s, %s)" % (self._print(expr.a), self._print(expr.b))
 
     def _print_Union(self, expr):
         return 'Union(%s)' %(', '.join([self._print(a) for a in expr.args]))
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..d87dc73793
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy import sstr, S, Eq, Limit
+from sympy.abc import x, y
+from sympy.stats import Normal, Uniform
+
+print("Testing sstr with sympy_integers=True:")
+print("x + S(1)/2:", sstr(x + S(1)/2, sympy_integers=True))
+print("Eq(x, S(1)/2):", sstr(Eq(x, S(1)/2), sympy_integers=True))
+print("Limit(x, x, S(1)/2):", sstr(Limit(x, x, S(1)/2), sympy_integers=True))
+
+print("\nTesting python code generation:")
+from sympy import python
+print("python(Eq(x, y)):")
+print(python(Eq(x, y)))
+
+print("\nTesting other fixed methods:")
+# Test Normal distribution
+n = Normal('n', 0, 1)
+print("Normal distribution:", sstr(n, sympy_integers=True))
+
+# Test Uniform distribution  
+u = Uniform('u', 0, 1)
+print("Uniform distribution:", sstr(u, sympy_integers=True))
+
+print("\nTesting without sympy_integers (should work normally):")
+print("x + S(1)/2:", sstr(x + S(1)/2))
+print("Eq(x, S(1)/2):", sstr(Eq(x, S(1)/2)))
+print("Limit(x, x, S(1)/2):", sstr(Limit(x, x, S(1)/2)))
\ No newline at end of file
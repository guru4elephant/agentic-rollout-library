diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..7245edf0ab
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+"""Comprehensive test to verify the fix for len() of rank-0 arrays."""
+
+import sys
+sys.path.insert(0, '.')
+
+import sympy
+from sympy.tensor.array import ImmutableDenseNDimArray, MutableDenseNDimArray
+
+def test_array_len(array, name):
+    """Test len() behavior for a given array."""
+    print(f"\nTesting {name}:")
+    print(f"  Array: {array}")
+    print(f"  len(array): {len(array)}")
+    print(f"  len(list(array)): {len(list(array))}")
+    print(f"  rank: {array.rank()}")
+    print(f"  shape: {array.shape}")
+    assert len(array) == len(list(array)), f"len() mismatch for {name}"
+    print("  âœ“ PASS")
+
+print("Testing rank-0 arrays (scalars):")
+# Test with different scalar values
+test_array_len(sympy.Array(3), "sympy.Array(3)")
+test_array_len(sympy.Array(0), "sympy.Array(0)")
+test_array_len(sympy.Array(sympy.Symbol('x')), "sympy.Array(symbol)")
+test_array_len(sympy.Array(sympy.pi), "sympy.Array(pi)")
+
+# Test direct instantiation
+test_array_len(ImmutableDenseNDimArray(5), "ImmutableDenseNDimArray(5)")
+test_array_len(MutableDenseNDimArray(7), "MutableDenseNDimArray(7)")
+
+print("\nTesting higher rank arrays (should not be affected):")
+# Test with 1D arrays
+test_array_len(sympy.Array([1, 2, 3]), "sympy.Array([1,2,3])")
+
+# Test with 2D arrays
+test_array_len(sympy.Array([[1, 2], [3, 4]]), "sympy.Array([[1,2],[3,4]])")
+
+print("\nAll tests passed! The fix correctly handles rank-0 arrays.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a2d24d77d1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+"""Script to reproduce the issue with len() of rank-0 arrays returning 0 instead of 1."""
+
+import sys
+sys.path.insert(0, '.')
+
+import sympy
+
+# Test the issue described in the GitHub issue
+print("Testing sympy.Array len() for rank-0 arrays:")
+a = sympy.Array(3)
+print(f"sympy.Array(3) = {a}")
+print(f"len(a) = {len(a)}")
+print(f"len(list(a)) = {len(list(a))}")
+print(f"a.rank() = {a.rank()}")
+print(f"a.shape = {a.shape}")
+
+# Compare with numpy behavior
+try:
+    import numpy
+    print("\nComparing with numpy:")
+    numpy_array = numpy.asarray(1)
+    print(f"numpy.asarray(1).size = {numpy_array.size}")
+except ImportError:
+    print("\nNumpy not available for comparison")
+
+# Test some edge cases
+print("\nTesting edge cases:")
+# Test with different scalar values
+b = sympy.Array(0)
+print(f"sympy.Array(0): len={len(b)}, list_len={len(list(b))}")
+
+c = sympy.Array(sympy.Symbol('x'))
+print(f"sympy.Array(symbol): len={len(c)}, list_len={len(list(c))}")
+
+# Test with higher rank arrays for comparison
+d = sympy.Array([1, 2, 3])
+print(f"sympy.Array([1,2,3]): len={len(d)}, list_len={len(list(d))}")
+
+e = sympy.Array([[1, 2], [3, 4]])
+print(f"sympy.Array([[1,2],[3,4]]): len={len(e)}, list_len={len(list(e))}")
\ No newline at end of file
diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py
index 9be94a8631..9790712755 100644
--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
diff --git a/sympy/tensor/array/sparse_ndim_array.py b/sympy/tensor/array/sparse_ndim_array.py
index 72b5d51299..c5ce8e389f 100644
--- a/sympy/tensor/array/sparse_ndim_array.py
+++ b/sympy/tensor/array/sparse_ndim_array.py
@@ -167,7 +167,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
         self = object.__new__(cls)
         self._shape = shape
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
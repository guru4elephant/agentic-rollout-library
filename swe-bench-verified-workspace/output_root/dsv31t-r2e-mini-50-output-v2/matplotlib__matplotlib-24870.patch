diff --git a/contour_boolean_test.png b/contour_boolean_test.png
new file mode 100644
index 0000000000..0ddf489f3e
Binary files /dev/null and b/contour_boolean_test.png differ
diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 144eadeae2..647e69c3d6 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1121,6 +1121,20 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
         """
         Determine the contour levels and store in self.levels.
         """
+        # Check if data was boolean and no levels were explicitly specified
+        if (self.levels is None and 
+            hasattr(self, '_is_boolean_data') and 
+            self._is_boolean_data and
+            len(args) == 0):
+            # For boolean data, default to appropriate levels
+            if self.filled:
+                # For filled contours, use two levels around 0.5
+                self.levels = np.array([0.4, 0.6], dtype=np.float64)
+            else:
+                # For line contours, use a single level at 0.5
+                self.levels = np.array([0.5], dtype=np.float64)
+            return  # Return early since we've set the levels
+        
         if self.levels is None:
             if len(args) == 0:
                 levels_arg = 7  # Default, hard-wired.
@@ -1447,10 +1461,16 @@ class QuadContourSet(ContourSet):
             fn = 'contour'
         nargs = len(args)
         if nargs <= 2:
+            # Check if original data is boolean before converting to float64
+            original_z = args[0]
+            self._is_boolean_data = hasattr(original_z, 'dtype') and original_z.dtype == bool
             z = ma.asarray(args[0], dtype=np.float64)
             x, y = self._initialize_x_y(z)
             args = args[1:]
         elif nargs <= 4:
+            # Check if original data is boolean before converting to float64
+            original_z = args[2]
+            self._is_boolean_data = hasattr(original_z, 'dtype') and original_z.dtype == bool
             x, y, z = self._check_xyz(args[:3], kwargs)
             args = args[3:]
         else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ffc196d774
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+"""
+Reproduce the issue with boolean arrays in contour plots.
+"""
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Create a boolean 2D array
+ii, jj = np.ogrid[:100, :100]
+im = (ii + jj) % 20 < 10
+
+# Test contour without levels (should show multiple contours)
+plt.figure(figsize=(12, 5))
+plt.subplot(121)
+plt.title("contour(im) - Default levels")
+cs1 = plt.contour(im)
+print(f"Default levels: {cs1.levels}")
+
+# Test contour with levels=[0.5] (should show single contour)
+plt.subplot(122)
+plt.title("contour(im, levels=[0.5])")
+cs2 = plt.contour(im, levels=[0.5])
+print(f"Manual levels: {cs2.levels}")
+
+plt.tight_layout()
+plt.savefig("contour_boolean_test.png")
+plt.show()
+
+# Check if the array is boolean
+print(f"Array dtype: {im.dtype}")
+print(f"Array is boolean: {im.dtype == bool}")
+print(f"Array values: {np.unique(im)}")
\ No newline at end of file
diff --git a/test_boolean_contour.py b/test_boolean_contour.py
new file mode 100644
index 0000000000..0c83ed1217
--- /dev/null
+++ b/test_boolean_contour.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Test for boolean array contour detection feature.
+"""
+import numpy as np
+import matplotlib.pyplot as plt
+
+
+def test_boolean_contour_auto_detection():
+    """Test that boolean arrays are automatically detected and use appropriate levels."""
+    # Create a boolean 2D array
+    ii, jj = np.ogrid[:100, :100]
+    im = (ii + jj) % 20 < 10
+    
+    # Test contour with boolean array (should auto-detect and use [0.5])
+    cs = plt.contour(im)
+    assert np.array_equal(cs.levels, [0.5]), f"Expected [0.5], got {cs.levels}"
+    plt.close()
+    
+    # Test contourf with boolean array (should auto-detect and use [0.4, 0.6])
+    cs = plt.contourf(im)
+    assert np.array_equal(cs.levels, [0.4, 0.6]), f"Expected [0.4, 0.6], got {cs.levels}"
+    plt.close()
+    
+    # Test that explicit levels override auto-detection
+    cs = plt.contour(im, levels=[0.3, 0.7])
+    assert np.array_equal(cs.levels, [0.3, 0.7]), f"Expected [0.3, 0.7], got {cs.levels}"
+    plt.close()
+    
+    # Test that non-boolean arrays use default behavior
+    non_bool = np.random.rand(50, 50)
+    cs = plt.contour(non_bool)
+    assert len(cs.levels) == 8, f"Expected 8 levels, got {len(cs.levels)}"
+    plt.close()
+    
+    # Test with X, Y coordinates and boolean Z
+    x = np.linspace(0, 1, 100)
+    y = np.linspace(0, 1, 100)
+    cs = plt.contour(x, y, im)
+    assert np.array_equal(cs.levels, [0.5]), f"Expected [0.5], got {cs.levels}"
+    plt.close()
+    
+    print("All boolean contour detection tests passed!")
+
+
+if __name__ == "__main__":
+    test_boolean_contour_auto_detection()
\ No newline at end of file
diff --git a/test_boolean_variants.py b/test_boolean_variants.py
new file mode 100644
index 0000000000..0d9e989791
--- /dev/null
+++ b/test_boolean_variants.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+"""
+Test different representations of boolean arrays.
+"""
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test different boolean array representations
+print("Testing different boolean array representations:")
+
+# Test 1: Regular boolean array
+bool_array = np.array([[True, False], [False, True]])
+cs = plt.contour(bool_array)
+print(f"Regular boolean array levels: {cs.levels}")
+plt.close()
+
+# Test 2: Boolean array with 0/1 values
+int_bool_array = np.array([[1, 0], [0, 1]], dtype=bool)
+cs = plt.contour(int_bool_array)
+print(f"0/1 boolean array levels: {cs.levels}")
+plt.close()
+
+# Test 3: Boolean array from comparison
+comparison_array = (np.random.rand(10, 10) > 0.5)
+cs = plt.contour(comparison_array)
+print(f"Comparison boolean array levels: {cs.levels}")
+plt.close()
+
+# Test 4: Non-boolean array that could be mistaken for boolean
+non_bool_01 = np.array([[1, 0], [0, 1]], dtype=int)
+cs = plt.contour(non_bool_01)
+print(f"Integer 0/1 array levels: {cs.levels}")
+plt.close()
+
+# Test 5: Non-boolean array with float values
+non_bool_float = np.array([[1.0, 0.0], [0.0, 1.0]], dtype=float)
+cs = plt.contour(non_bool_float)
+print(f"Float 0/1 array levels: {cs.levels}")
+plt.close()
+
+print("All boolean variant tests completed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4d34e383d1
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for boolean array contour detection.
+"""
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test 1: Boolean array without explicit levels
+print("Test 1: Boolean array without explicit levels")
+ii, jj = np.ogrid[:100, :100]
+im = (ii + jj) % 20 < 10
+cs = plt.contour(im)
+print(f"Levels: {cs.levels}")
+plt.close()
+
+# Test 2: Boolean array with explicit levels (should override auto-detection)
+print("Test 2: Boolean array with explicit levels")
+cs = plt.contour(im, levels=[0.3, 0.7])
+print(f"Levels: {cs.levels}")
+plt.close()
+
+# Test 3: Non-boolean array (should use default behavior)
+print("Test 3: Non-boolean array")
+non_bool = np.random.rand(100, 100)
+cs = plt.contour(non_bool)
+print(f"Levels: {cs.levels}")
+plt.close()
+
+# Test 4: Boolean array with number of levels specified (should use default behavior)
+print("Test 4: Boolean array with number of levels specified")
+cs = plt.contour(im, 5)  # 5 levels
+print(f"Levels: {cs.levels}")
+plt.close()
+
+# Test 5: Boolean array with contourf (filled contours)
+print("Test 5: Boolean array with contourf")
+cs = plt.contourf(im)
+print(f"Levels: {cs.levels}")
+plt.close()
+
+# Test 6: Mixed case - boolean array with X, Y coordinates
+print("Test 6: Boolean array with X, Y coordinates")
+x = np.linspace(0, 1, 100)
+y = np.linspace(0, 1, 100)
+cs = plt.contour(x, y, im)
+print(f"Levels: {cs.levels}")
+plt.close()
+
+# Test 7: Check if original data is preserved when not boolean
+print("Test 7: Non-boolean integer array")
+int_array = np.random.randint(0, 10, (50, 50))
+cs = plt.contour(int_array)
+print(f"Levels: {cs.levels}")
+plt.close()
\ No newline at end of file
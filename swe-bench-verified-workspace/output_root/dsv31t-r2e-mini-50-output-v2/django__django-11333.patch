diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..16f0b3f754
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,94 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for the URL resolver optimization fix
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='test_urls',
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[],
+    )
+
+# Set up Django
+django.setup()
+
+from django.urls import resolvers, base, reverse
+
+def test_comprehensive_scenarios():
+    """Test all scenarios mentioned in the GitHub issue"""
+    
+    print("=== Comprehensive URL Resolver Optimization Test ===\n")
+    
+    # Clear cache
+    resolvers._get_resolver_cached.cache_clear()
+    
+    # Scenario 1: Import time calls (before set_urlconf)
+    print("1. Testing import-time calls (before set_urlconf)...")
+    resolver1 = resolvers.get_resolver(None)
+    resolver2 = resolvers.get_resolver(settings.ROOT_URLCONF)
+    
+    if resolver1 is resolver2:
+        print("   ✓ get_resolver(None) and get_resolver(ROOT_URLCONF) return same object")
+    else:
+        print("   ✗ get_resolver(None) and get_resolver(ROOT_URLCONF) return different objects")
+    
+    # Scenario 2: Reverse calls (which use get_resolver)
+    print("\n2. Testing reverse() calls...")
+    try:
+        # This should use the cached resolver
+        url1 = reverse('test-view')
+        print(f"   ✓ First reverse() call succeeded: {url1}")
+        
+        # This should also use the cached resolver
+        url2 = reverse('test-view')
+        print(f"   ✓ Second reverse() call succeeded: {url2}")
+    except Exception as e:
+        print(f"   ✗ Reverse call failed: {e}")
+    
+    # Scenario 3: After set_urlconf (simulating request handling)
+    print("\n3. Testing after set_urlconf (simulating request handling)...")
+    base.set_urlconf('test_urls')
+    
+    resolver3 = resolvers.get_resolver(None)
+    resolver4 = resolvers.get_resolver('test_urls')
+    
+    if resolver3 is resolver4:
+        print("   ✓ After set_urlconf, get_resolver(None) and get_resolver('test_urls') return same object")
+    else:
+        print("   ✗ After set_urlconf, get_resolver(None) and get_resolver('test_urls') return different objects")
+    
+    # Scenario 4: Multiple calls with same parameters
+    print("\n4. Testing multiple identical calls...")
+    resolver5 = resolvers.get_resolver(None)
+    resolver6 = resolvers.get_resolver(None)
+    resolver7 = resolvers.get_resolver('test_urls')
+    
+    if resolver5 is resolver6 and resolver6 is resolver7:
+        print("   ✓ All identical calls return the same resolver object")
+    else:
+        print("   ✗ Identical calls return different resolver objects")
+    
+    # Check cache statistics
+    cache_info = resolvers._get_resolver_cached.cache_info()
+    print(f"\n5. Cache statistics:")
+    print(f"   - Hits: {cache_info.hits}")
+    print(f"   - Misses: {cache_info.misses}")
+    print(f"   - Cache size: {cache_info.currsize}")
+    
+    # The ideal scenario: few misses, many hits
+    if cache_info.misses <= 2 and cache_info.hits >= 3:
+        print("   ✓ Cache is working efficiently")
+    else:
+        print("   ✗ Cache is not working efficiently")
+    
+    print(f"\n=== Test Complete ===")
+
+if __name__ == '__main__':
+    test_comprehensive_scenarios()
\ No newline at end of file
diff --git a/debug_get_urlconf.py b/debug_get_urlconf.py
new file mode 100644
index 0000000000..7a25983468
--- /dev/null
+++ b/debug_get_urlconf.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""
+Debug script to check what get_urlconf() returns
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='test_urls',
+        SECRET_KEY='test-secret-key',
+    )
+
+# Set up Django
+django.setup()
+
+from django.urls.base import get_urlconf
+
+print(f"get_urlconf() returns: {get_urlconf()}")
+print(f"settings.ROOT_URLCONF is: {settings.ROOT_URLCONF}")
+print(f"Are they the same? {get_urlconf() == settings.ROOT_URLCONF}")
\ No newline at end of file
diff --git a/debug_set_urlconf_none.py b/debug_set_urlconf_none.py
new file mode 100644
index 0000000000..b23b145f19
--- /dev/null
+++ b/debug_set_urlconf_none.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""
+Debug what happens with set_urlconf(None)
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='test_urls',
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[],
+    )
+
+# Set up Django
+django.setup()
+
+from django.urls.base import get_urlconf, set_urlconf
+
+def debug_set_urlconf_none():
+    """Debug set_urlconf(None) behavior"""
+    
+    print("Debugging set_urlconf(None)...")
+    
+    # Initial state
+    print(f"Initial get_urlconf(): {get_urlconf()}")
+    
+    # Set custom URL conf
+    set_urlconf('custom_urlconf')
+    print(f"After set_urlconf('custom_urlconf'): {get_urlconf()}")
+    
+    # Set back to None
+    set_urlconf(None)
+    print(f"After set_urlconf(None): {get_urlconf()}")
+    
+    # Check what settings.ROOT_URLCONF is
+    print(f"settings.ROOT_URLCONF: {settings.ROOT_URLCONF}")
+
+if __name__ == '__main__':
+    debug_set_urlconf_none()
\ No newline at end of file
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..0ab9d7b261 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -63,11 +63,15 @@ class ResolverMatch:
         )
 
 
-@functools.lru_cache(maxsize=None)
+def _get_resolver(urlconf):
+    return URLResolver(RegexPattern(r'^/'), urlconf)
+
+_get_resolver_cached = functools.lru_cache(maxsize=None)(_get_resolver)
+
 def get_resolver(urlconf=None):
     if urlconf is None:
         urlconf = settings.ROOT_URLCONF
-    return URLResolver(RegexPattern(r'^/'), urlconf)
+    return _get_resolver_cached(urlconf)
 
 
 @functools.lru_cache(maxsize=None)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a6c0af8bcf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where multiple URLResolvers are constructed
+due to different calls to get_resolver with None vs settings.ROOT_URLCONF
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='test_urls',
+        SECRET_KEY='test-secret-key',
+    )
+
+# Set up Django
+django.setup()
+
+from django.urls import resolvers, base
+
+def test_multiple_resolver_construction():
+    """Test that demonstrates the issue"""
+    
+    print("Testing URL resolver construction...")
+    
+    # Clear any existing cache
+    resolvers._get_resolver_cached.cache_clear()
+    
+    # First call: get_resolver(None) - this should use settings.ROOT_URLCONF
+    print("1. Calling get_resolver(None)...")
+    resolver1 = resolvers.get_resolver(None)
+    print(f"   Resolver 1: {id(resolver1)}")
+    
+    # Second call: get_resolver(settings.ROOT_URLCONF) - this should be cached
+    print(f"2. Calling get_resolver('{settings.ROOT_URLCONF}')...")
+    resolver2 = resolvers.get_resolver(settings.ROOT_URLCONF)
+    print(f"   Resolver 2: {id(resolver2)}")
+    
+    # Check if they're the same object (should be if cache works properly)
+    if resolver1 is resolver2:
+        print("✓ SUCCESS: Both calls returned the same resolver object")
+    else:
+        print("✗ ISSUE: Different resolver objects created!")
+        print("  This means _populate() was called multiple times")
+    
+    # Test with set_urlconf
+    print("\n3. Testing with set_urlconf...")
+    base.set_urlconf('test_urls')
+    
+    # Third call: get_resolver(None) - should use the set urlconf
+    print("4. Calling get_resolver(None) after set_urlconf...")
+    resolver3 = resolvers.get_resolver(None)
+    print(f"   Resolver 3: {id(resolver3)}")
+    
+    # Check cache info
+    cache_info = resolvers._get_resolver_cached.cache_info()
+    print(f"\nCache info: {cache_info}")
+    
+    if cache_info.hits == 0:
+        print("✗ ISSUE: No cache hits - all calls created new resolvers")
+    else:
+        print(f"✓ Cache is working with {cache_info.hits} hit(s)")
+
+if __name__ == '__main__':
+    test_multiple_resolver_construction()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..737f057a6a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the URL resolver optimization fix
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='test_urls',
+        SECRET_KEY='test-secret-key',
+    )
+
+# Set up Django
+django.setup()
+
+from django.urls import resolvers, base
+
+def test_edge_cases():
+    """Test various edge cases for the resolver optimization"""
+    
+    print("Testing edge cases...")
+    
+    # Clear cache
+    resolvers._get_resolver_cached.cache_clear()
+    
+    # Test 1: Multiple calls with None
+    print("1. Multiple calls with None...")
+    resolver1 = resolvers.get_resolver(None)
+    resolver2 = resolvers.get_resolver(None)
+    if resolver1 is resolver2:
+        print("   ✓ Same resolver returned")
+    else:
+        print("   ✗ Different resolvers returned")
+    
+    # Test 2: Mix of None and ROOT_URLCONF
+    print("2. Mix of None and ROOT_URLCONF...")
+    resolver3 = resolvers.get_resolver(settings.ROOT_URLCONF)
+    if resolver1 is resolver3:
+        print("   ✓ Same resolver returned")
+    else:
+        print("   ✗ Different resolvers returned")
+    
+    # Test 3: Different urlconf values
+    print("3. Different urlconf values...")
+    resolver4 = resolvers.get_resolver('different_urlconf')
+    if resolver1 is not resolver4:
+        print("   ✓ Different resolver returned for different urlconf")
+    else:
+        print("   ✗ Same resolver returned for different urlconf")
+    
+    # Test 4: With set_urlconf
+    print("4. With set_urlconf...")
+    base.set_urlconf('custom_urlconf')
+    resolver5 = resolvers.get_resolver(None)
+    resolver6 = resolvers.get_resolver('custom_urlconf')
+    if resolver5 is resolver6:
+        print("   ✓ Same resolver returned after set_urlconf")
+    else:
+        print("   ✗ Different resolvers returned after set_urlconf")
+    
+    # Test 5: Clear urlconf
+    print("5. Clearing urlconf...")
+    base.set_urlconf(None)
+    resolver7 = resolvers.get_resolver(None)
+    if resolver7 is resolver1:
+        print("   ✓ Same resolver returned after clearing urlconf")
+    else:
+        print("   ✗ Different resolver returned after clearing urlconf")
+    
+    # Check cache stats
+    cache_info = resolvers._get_resolver_cached.cache_info()
+    print(f"\nFinal cache info: {cache_info}")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_resolve_none.py b/test_resolve_none.py
new file mode 100644
index 0000000000..cf37e1377b
--- /dev/null
+++ b/test_resolve_none.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+"""
+Test what happens when resolve is called with get_urlconf() returning None
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='test_urls',
+        SECRET_KEY='test-secret-key',
+    )
+
+# Set up Django
+django.setup()
+
+from django.urls.base import resolve, get_urlconf
+
+print(f"get_urlconf() returns: {get_urlconf()}")
+try:
+    result = resolve('/test/')
+    print(f"resolve('/test/') succeeded: {result}")
+except Exception as e:
+    print(f"resolve('/test/') failed: {e}")
\ No newline at end of file
diff --git a/test_set_urlconf_none.py b/test_set_urlconf_none.py
new file mode 100644
index 0000000000..4d17368ac1
--- /dev/null
+++ b/test_set_urlconf_none.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+"""
+Test that set_urlconf(None) works correctly with our optimization
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='test_urls',
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[],
+    )
+
+# Set up Django
+django.setup()
+
+from django.urls import resolvers, base
+
+def test_set_urlconf_none():
+    """Test that set_urlconf(None) reverts to ROOT_URLCONF"""
+    
+    print("Testing set_urlconf(None) behavior...")
+    
+    # Clear cache
+    resolvers._get_resolver_cached.cache_clear()
+    
+    # Get baseline resolver
+    baseline_resolver = resolvers.get_resolver(settings.ROOT_URLCONF)
+    print(f"Baseline resolver: {id(baseline_resolver)}")
+    
+    # Set a custom URL conf
+    base.set_urlconf('custom_urlconf')
+    custom_resolver = resolvers.get_resolver(None)
+    print(f"Custom URL conf resolver: {id(custom_resolver)}")
+    
+    # Set URL conf back to None
+    base.set_urlconf(None)
+    reverted_resolver = resolvers.get_resolver(None)
+    print(f"After set_urlconf(None) resolver: {id(reverted_resolver)}")
+    
+    # Check if it reverted to the baseline
+    if reverted_resolver is baseline_resolver:
+        print("✓ SUCCESS: set_urlconf(None) correctly reverted to ROOT_URLCONF")
+    else:
+        print("✗ FAILURE: set_urlconf(None) did not revert to ROOT_URLCONF")
+    
+    # Check cache info
+    cache_info = resolvers._get_resolver_cached.cache_info()
+    print(f"Cache info: {cache_info}")
+
+if __name__ == '__main__':
+    test_set_urlconf_none()
\ No newline at end of file
diff --git a/test_urls.py b/test_urls.py
new file mode 100644
index 0000000000..1c698d96e6
--- /dev/null
+++ b/test_urls.py
@@ -0,0 +1,6 @@
+from django.urls import path
+
+urlpatterns = [
+    path('test/', lambda request: None, name='test-view'),
+    path('another/', lambda request: None, name='another-view'),
+]
\ No newline at end of file
diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..f2f9797d88 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,7 +670,7 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    if not hasattr(attr, 'resolve_expression'):
                         attr = Value(attr, output_field=field)
                     when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..94c92a907e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F
+
+# Create a simple test model
+class SelfRef(models.Model):
+    name = models.CharField(max_length=100)
+    c8 = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(SelfRef)
+
+# Create a test instance
+o = SelfRef.objects.create(name='test_name', c8='initial_value')
+
+# Reproduce the issue
+print("Before bulk_update:")
+print(f"o.name: {o.name}")
+print(f"o.c8: {o.c8}")
+
+# Assign F expression to field
+o.c8 = F('name')
+print(f"\nAfter assigning F('name') to o.c8:")
+print(f"o.c8: {o.c8}")
+
+# Perform bulk update
+updated_count = SelfRef.objects.bulk_update([o], ['c8'])
+print(f"\nBulk update completed. Updated count: {updated_count}")
+
+# Refresh from database
+o.refresh_from_db()
+print(f"\nAfter refresh_from_db():")
+print(f"o.c8: {o.c8}")
+
+# Check the SQL queries
+from django.db import connection
+if connection.queries and len(connection.queries) >= 2:
+    bulk_update_query = connection.queries[-2]  # Second to last query should be the bulk update
+    print(f"\nBulk update SQL query:")
+    print(f"SQL: {bulk_update_query['sql']}")
+    print(f"Time: {bulk_update_query['time']}")
+    
+    last_query = connection.queries[-1]
+    print(f"\nLast SQL query (refresh):")
+    print(f"SQL: {last_query['sql']}")
+    print(f"Time: {last_query['time']}")
+else:
+    print("Not enough queries recorded")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..edfacc9277
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Value, Expression
+
+# Create a test model with different field types
+class TestModel(models.Model):
+    char_field = models.CharField(max_length=100, default='char_default')
+    int_field = models.IntegerField(default=42)
+    bool_field = models.BooleanField(default=True)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Create test instances
+o1 = TestModel.objects.create(char_field='test1', int_field=100, bool_field=True)
+o2 = TestModel.objects.create(char_field='test2', int_field=200, bool_field=False)
+
+print("=== Test 1: Basic F expression ===")
+o1.char_field = F('int_field')
+TestModel.objects.bulk_update([o1], ['char_field'])
+o1.refresh_from_db()
+print(f"o1.char_field (should be '100'): {o1.char_field}")
+
+print("\n=== Test 2: Multiple F expressions ===")
+o1.char_field = F('int_field')
+o2.char_field = F('int_field')
+TestModel.objects.bulk_update([o1, o2], ['char_field'])
+o1.refresh_from_db()
+o2.refresh_from_db()
+print(f"o1.char_field (should be '100'): {o1.char_field}")
+print(f"o2.char_field (should be '200'): {o2.char_field}")
+
+print("\n=== Test 3: Regular values still work ===")
+o1.char_field = 'regular_string'
+TestModel.objects.bulk_update([o1], ['char_field'])
+o1.refresh_from_db()
+print(f"o1.char_field (should be 'regular_string'): {o1.char_field}")
+
+print("\n=== Test 4: Integer field with F expression ===")
+o1.int_field = F('int_field') + 10  # This creates a CombinedExpression
+TestModel.objects.bulk_update([o1], ['int_field'])
+o1.refresh_from_db()
+print(f"o1.int_field (should be 110): {o1.int_field}")
+
+print("\n=== Test 5: Check that Expression objects still work ===")
+# Create a simple expression object
+class TestExpression(Expression):
+    def __init__(self, value):
+        self.value = value
+        
+    def resolve_expression(self, query=None, allow_joins=True, reuse=None,
+                           summarize=False, for_save=False):
+        return Value(self.value)
+
+o1.char_field = TestExpression('expression_value')
+TestModel.objects.bulk_update([o1], ['char_field'])
+o1.refresh_from_db()
+print(f"o1.char_field (should be 'expression_value'): {o1.char_field}")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
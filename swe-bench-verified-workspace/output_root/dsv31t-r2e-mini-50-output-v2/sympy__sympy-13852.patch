diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d904764f50
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, Rational, expand_func, nsimplify, pi, log
+from sympy import symbols
+
+# Reproduce the issue from the GitHub issue
+print("Testing polylog(2, Rational(1,2))")
+result1 = polylog(2, Rational(1,2))
+print("polylog(2, 1/2) =", result1)
+
+print("\nTesting expand_func on polylog(2, Rational(1,2))")
+result2 = expand_func(polylog(2, Rational(1,2)))
+print("expand_func(polylog(2, 1/2)) =", result2)
+
+print("\nExpected result: -log(2)**2/2 + pi**2/12")
+expected = -log(2)**2/2 + pi**2/12
+print("Expected:", expected)
+
+print("\nTesting polylog(1, z) expansion issue")
+z = symbols('z')
+result3 = expand_func(polylog(1, z))
+print("expand_func(polylog(1, z)) =", result3)
+
+print("\nTesting derivative consistency")
+# The derivative should be consistent between polylog(1,z) and -log(1-z)
+from sympy import diff
+expr1 = polylog(1, z) + log(1 - z)
+expr2 = polylog(1, z) - expand_func(polylog(1, z))
+
+print("diff(polylog(1, z) + log(1 - z), z) =", diff(expr1, z))
+print("diff(polylog(1, z) - expand_func(polylog(1, z)), z) =", diff(expr2, z))
\ No newline at end of file
diff --git a/sympy/functions/special/tests/test_zeta_functions.py b/sympy/functions/special/tests/test_zeta_functions.py
index 3911dadd10..494a387772 100644
--- a/sympy/functions/special/tests/test_zeta_functions.py
+++ b/sympy/functions/special/tests/test_zeta_functions.py
@@ -128,7 +128,7 @@ def test_polylog_expansion():
     assert polylog(s, 1) == zeta(s)
     assert polylog(s, -1) == -dirichlet_eta(s)
 
-    assert myexpand(polylog(1, z), -log(1 + exp_polar(-I*pi)*z))
+    assert myexpand(polylog(1, z), -log(1 - z))
     assert myexpand(polylog(0, z), z/(1 - z))
     assert myexpand(polylog(-1, z), z**2/(1 - z)**2 + z/(1 - z))
     assert myexpand(polylog(-5, z), None)
diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py
index b8e2b66195..b6a8511cd0 100644
--- a/sympy/functions/special/zeta_functions.py
+++ b/sympy/functions/special/zeta_functions.py
@@ -288,10 +288,18 @@ def _eval_rewrite_as_lerchphi(self, s, z):
         return z*lerchphi(z, s, 1)
 
     def _eval_expand_func(self, **hints):
-        from sympy import log, expand_mul, Dummy, exp_polar, I
+        from sympy import log, expand_mul, Dummy, exp_polar, I, pi, Rational
         s, z = self.args
         if s == 1:
-            return -log(1 + exp_polar(-I*pi)*z)
+            return -log(1 - z)
+        if s == 2:
+            # Special cases for polylog(2, z) with known closed forms
+            if z == Rational(1, 2):
+                return pi**2/12 - log(2)**2/2
+            elif z == -1:
+                return -pi**2/12
+            elif z == 1:
+                return pi**2/6
         if s.is_Integer and s <= 0:
             u = Dummy('u')
             start = u/(1 - u)
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..75eaddc732
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, expand_func, Rational, pi, log, symbols, diff, simplify
+from sympy.abc import z
+
+def test_polylog_1_expansion():
+    """Test that polylog(1, z) expands correctly"""
+    result = expand_func(polylog(1, z))
+    expected = -log(1 - z)
+    print(f"polylog(1, z) expands to: {result}")
+    print(f"Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("âœ“ polylog(1, z) expansion test passed")
+
+def test_polylog_2_special_cases():
+    """Test special cases for polylog(2, z)"""
+    # Test polylog(2, 1/2)
+    result = expand_func(polylog(2, Rational(1,2)))
+    expected = pi**2/12 - log(2)**2/2
+    print(f"polylog(2, 1/2) expands to: {result}")
+    print(f"Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("âœ“ polylog(2, 1/2) expansion test passed")
+    
+    # Test polylog(2, -1)
+    result = expand_func(polylog(2, -1))
+    expected = -pi**2/12
+    print(f"polylog(2, -1) expands to: {result}")
+    print(f"Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("âœ“ polylog(2, -1) expansion test passed")
+    
+    # Test polylog(2, 1)
+    result = expand_func(polylog(2, 1))
+    expected = pi**2/6
+    print(f"polylog(2, 1) expands to: {result}")
+    print(f"Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("âœ“ polylog(2, 1) expansion test passed")
+
+def test_derivative_consistency():
+    """Test that derivatives are consistent"""
+    # Test that polylog(1,z) and -log(1-z) have the same derivative
+    expr1 = polylog(1, z) + log(1 - z)
+    expr2 = polylog(1, z) - expand_func(polylog(1, z))
+    
+    deriv1 = diff(expr1, z)
+    deriv2 = diff(expr2, z)
+    
+    print(f"diff(polylog(1,z) + log(1-z), z) = {deriv1}")
+    print(f"diff(polylog(1,z) - expand_func(polylog(1,z)), z) = {deriv2}")
+    
+    # The derivatives should be the same (consistency)
+    assert deriv1 == deriv2, f"Derivatives should be equal: {deriv1} vs {deriv2}"
+    print("âœ“ Derivative consistency test passed")
+
+def test_other_polylog_cases():
+    """Test that other polylog cases still work"""
+    # Test that polylog(0, z) still works
+    result = expand_func(polylog(0, z))
+    expected = z/(1 - z)
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("âœ“ polylog(0, z) expansion test passed")
+    
+    # Test that polylog(-1, z) still works
+    result = expand_func(polylog(-1, z))
+    expected = z**2/(1 - z)**2 + z/(1 - z)
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("âœ“ polylog(-1, z) expansion test passed")
+
+if __name__ == "__main__":
+    test_polylog_1_expansion()
+    test_polylog_2_special_cases()
+    test_derivative_consistency()
+    test_other_polylog_cases()
+    print("\nðŸŽ‰ All tests passed!")
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..2530e4646c 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,12 +83,15 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=''):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
     """
-    return _json_script(value, element_id)
+    if element_id == '':
+        return _json_script(value, None)
+    else:
+        return _json_script(value, element_id)
 
 
 @register.filter(is_safe=True)
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..65c5442d8d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,10 +69,16 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
-    return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
-    )
+    if element_id is not None:
+        return format_html(
+            '<script id="{}" type="application/json">{}</script>',
+            element_id, mark_safe(json_str)
+        )
+    else:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
 
 
 def conditional_escape(text):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f95d67b142
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+
+"""Reproduction script for json_script element_id issue."""
+
+from django.utils.html import json_script
+
+# Test case 1: Current behavior with element_id (should work)
+try:
+    result1 = json_script({"test": "data"}, "test_id")
+    print("✓ Test 1 passed: json_script with element_id works")
+    print(f"  Result: {result1}")
+except Exception as e:
+    print(f"✗ Test 1 failed: {e}")
+
+# Test case 2: Trying without element_id (should fail currently)
+try:
+    result2 = json_script({"test": "data"})
+    print("✓ Test 2 passed: json_script without element_id works")
+    print(f"  Result: {result2}")
+except Exception as e:
+    print(f"✗ Test 2 failed: {e}")
+
+# Test case 3: Trying with None element_id
+try:
+    result3 = json_script({"test": "data"}, None)
+    print("✓ Test 3 passed: json_script with None element_id works")
+    print(f"  Result: {result3}")
+except Exception as e:
+    print(f"✗ Test 3 failed: {e}")
+
+# Test case 4: Trying with empty string element_id
+try:
+    result4 = json_script({"test": "data"}, "")
+    print("✓ Test 4 passed: json_script with empty string element_id works")
+    print(f"  Result: {result4}")
+except Exception as e:
+    print(f"✗ Test 4 failed: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..dd3545094c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+
+"""Test edge cases for json_script element_id optional parameter."""
+
+from django.utils.html import json_script
+
+# Test various edge cases
+test_cases = [
+    # Basic cases
+    ({"test": "data"}, None, "without element_id"),
+    ({"test": "data"}, "test_id", "with element_id"),
+    ({"test": "data"}, "", "with empty string element_id"),
+    
+    # Complex JSON data
+    ({"nested": {"key": "value"}, "list": [1, 2, 3]}, None, "complex data without id"),
+    ({"nested": {"key": "value"}, "list": [1, 2, 3]}, "complex_id", "complex data with id"),
+    
+    # Special characters
+    ({"html": "<script>alert('test')</script>"}, None, "HTML chars without id"),
+    ({"html": "<script>alert('test')</script>"}, "html_id", "HTML chars with id"),
+    
+    # Unicode characters
+    ({"unicode": "ñáéíóú"}, None, "unicode without id"),
+    ({"unicode": "ñáéíóú"}, "unicode_id", "unicode with id"),
+    
+    # Numbers and booleans
+    ({"number": 42, "boolean": True}, None, "numbers/bools without id"),
+    ({"number": 42, "boolean": True}, "data_id", "numbers/bools with id"),
+    
+    # Empty dict
+    ({}, None, "empty dict without id"),
+    ({}, "empty_id", "empty dict with id"),
+]
+
+print("Testing edge cases for json_script:")
+print("=" * 50)
+
+for i, (data, element_id, description) in enumerate(test_cases, 1):
+    try:
+        result = json_script(data, element_id)
+        print(f"✓ Test {i}: {description}")
+        print(f"  Input: {data}, element_id: {element_id}")
+        print(f"  Result: {result}")
+        print()
+    except Exception as e:
+        print(f"✗ Test {i} failed: {e}")
+        print(f"  Input: {data}, element_id: {element_id}")
+        print()
+
+print("All tests completed!")
\ No newline at end of file
diff --git a/test_template_filter.py b/test_template_filter.py
new file mode 100644
index 0000000000..b120da4c36
--- /dev/null
+++ b/test_template_filter.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+"""Test template filter with optional element_id parameter."""
+
+import os
+import django
+from django.conf import settings
+from django.template import Engine, Context
+
+# Configure Django
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key-for-testing',
+        USE_TZ=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+# Test template filter with optional element_id
+engine = Engine()
+
+# Test case 1: With element_id (existing behavior)
+template1 = engine.from_string('{{ value|json_script:"test_id" }}')
+result1 = template1.render(Context({'value': {'a': 'testing'}}))
+print("✓ Template with element_id:")
+print(f"  Result: {result1}")
+
+# Test case 2: Without element_id (new behavior)
+template2 = engine.from_string('{{ value|json_script }}')
+result2 = template2.render(Context({'value': {'a': 'testing'}}))
+print("✓ Template without element_id:")
+print(f"  Result: {result2}")
+
+# Test case 3: With empty element_id
+template3 = engine.from_string('{{ value|json_script:"" }}')
+result3 = template3.render(Context({'value': {'a': 'testing'}}))
+print("✓ Template with empty element_id:")
+print(f"  Result: {result3}")
+
+print("\nAll template filter tests completed successfully!")
\ No newline at end of file
diff --git a/test_template_usage.py b/test_template_usage.py
new file mode 100644
index 0000000000..9e59ce7b5c
--- /dev/null
+++ b/test_template_usage.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+
+"""Test the specific use case mentioned in the GitHub issue."""
+
+import os
+import django
+from django.conf import settings
+from django.template import Engine, Context
+
+# Configure Django
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key-for-testing',
+        USE_TZ=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+# Test the specific use case: json_script inside a template without needing an id
+engine = Engine()
+
+# Template that simulates the use case mentioned in the issue
+template_content = '''
+<template>
+    {{ data|json_script }}
+</template>
+'''
+
+template = engine.from_string(template_content)
+result = template.render(Context({'data': {'message': 'Hello World', 'count': 42}}))
+
+print("Template content:")
+print(template_content)
+print("\nRendered result:")
+print(result)
+print("\n✓ Success! The json_script filter works without an element_id inside templates.")
\ No newline at end of file
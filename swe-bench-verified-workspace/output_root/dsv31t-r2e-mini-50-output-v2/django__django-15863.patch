diff --git a/debug_repr.py b/debug_repr.py
new file mode 100644
index 0000000000..5be6c2875b
--- /dev/null
+++ b/debug_repr.py
@@ -0,0 +1,11 @@
+from decimal import Decimal
+
+# Test what repr() returns for Decimal
+dec = Decimal('42.12345678901234567890')
+print(f"Original Decimal: {dec}")
+print(f"repr(dec): {repr(dec)}")
+print(f"str(dec): {str(dec)}")
+
+# Test conversion back
+print(f"Decimal(repr(dec)): {Decimal(repr(dec))}")
+print(f"Decimal(str(dec)): {Decimal(str(dec))}")
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..7a2f741ab7 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,8 +151,12 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
+        if isinstance(text, Decimal):
+            d = text
+            input_val = str(text)
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
     except InvalidOperation:
         try:
             d = Decimal(str(float(text)))
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ca21207955
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 42.12345678901234567890")
+print(f"Match: {result == '42.12345678901234567890'}")
\ No newline at end of file
diff --git a/test_backward_compatibility.py b/test_backward_compatibility.py
new file mode 100644
index 0000000000..8dc0f997f7
--- /dev/null
+++ b/test_backward_compatibility.py
@@ -0,0 +1,46 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django
+settings.configure(
+    DEBUG=True,
+    TEMPLATES=[{'BACKEND': 'django.template.backends.django.DjangoTemplates'}]
+)
+setup()
+
+# Test that non-Decimal inputs still work exactly as before
+print("=== Testing backward compatibility ===")
+
+# Test with float (should work exactly as before)
+t_float = Template('{{ value|floatformat:3 }}')
+c_float = Context({'value': 123.456789})
+result_float = t_float.render(c_float)
+print(f"Float input: {result_float}")
+
+# Test with integer (should work exactly as before)
+t_int = Template('{{ value|floatformat:2 }}')
+c_int = Context({'value': 42})
+result_int = t_int.render(c_int)
+print(f"Integer input: {result_int}")
+
+# Test with string (should work exactly as before)
+t_str = Template('{{ value|floatformat:4 }}')
+c_str = Context({'value': "3.14159"})
+result_str = t_str.render(c_str)
+print(f"String input: {result_str}")
+
+# Test with None (should return empty string as before)
+t_none = Template('{{ value|floatformat:2 }}')
+c_none = Context({'value': None})
+result_none = t_none.render(c_none)
+print(f"None input: '{result_none}'")
+
+# Test with invalid string (should return empty string as before)
+t_invalid = Template('{{ value|floatformat:2 }}')
+c_invalid = Context({'value': "not_a_number"})
+result_invalid = t_invalid.render(c_invalid)
+print(f"Invalid string input: '{result_invalid}'")
+
+print("\n=== Backward compatibility tests completed ===")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..d947a4e1d1
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,72 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django
+settings.configure(
+    DEBUG=True,
+    TEMPLATES=[{'BACKEND': 'django.template.backends.django.DjangoTemplates'}]
+)
+setup()
+
+# Test the original issue
+print("=== Testing original issue ===")
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+expected = '42.12345678901234567890'
+print(f"Result: {result}")
+print(f"Expected: {expected}")
+print(f"Match: {result == expected}")
+print()
+
+# Test various numeric types
+print("=== Testing various numeric types ===")
+
+# Float
+t_float = Template('{{ value|floatformat:5 }}')
+c_float = Context({'value': 123.45678})
+result_float = t_float.render(c_float)
+print(f"Float: {result_float}")
+
+# Integer  
+t_int = Template('{{ value|floatformat:2 }}')
+c_int = Context({'value': 42})
+result_int = t_int.render(c_int)
+print(f"Integer: {result_int}")
+
+# String number
+t_str = Template('{{ value|floatformat:3 }}')
+c_str = Context({'value': "99.999"})
+result_str = t_str.render(c_str)
+print(f"String: {result_str}")
+
+# Decimal with different precision
+t_dec = Template('{{ value|floatformat:8 }}')
+c_dec = Context({'value': Decimal('0.12345678')})
+result_dec = t_dec.render(c_dec)
+print(f"Decimal: {result_dec}")
+
+# Test edge cases
+print("\n=== Testing edge cases ===")
+
+# Negative decimal places
+t_neg = Template('{{ value|floatformat:-3 }}')
+c_neg = Context({'value': Decimal('123.456789')})
+result_neg = t_neg.render(c_neg)
+print(f"Negative decimal places: {result_neg}")
+
+# Zero
+t_zero = Template('{{ value|floatformat:2 }}')
+c_zero = Context({'value': Decimal('0')})
+result_zero = t_zero.render(c_zero)
+print(f"Zero: {result_zero}")
+
+# Very small number
+t_small = Template('{{ value|floatformat:10 }}')
+c_small = Context({'value': Decimal('0.0000000001')})
+result_small = t_small.render(c_small)
+print(f"Very small: {result_small}")
+
+print("\n=== All tests completed ===")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..60be72ae6d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,43 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test 1: Regular float (should still work)
+t1 = Template('{{ value|floatformat:5 }}')
+c1 = Context({'value': 42.12345})
+result1 = t1.render(c1)
+print(f"Float test: {result1} (expected: 42.12345)")
+
+# Test 2: Integer (should still work)
+t2 = Template('{{ value|floatformat:2 }}')
+c2 = Context({'value': 42})
+result2 = t2.render(c2)
+print(f"Integer test: {result2} (expected: 42.00)")
+
+# Test 3: String representation of number (should still work)
+t3 = Template('{{ value|floatformat:3 }}')
+c3 = Context({'value': "42.123"})
+result3 = t3.render(c3)
+print(f"String test: {result3} (expected: 42.123)")
+
+# Test 4: Different Decimal precision
+t4 = Template('{{ value|floatformat:10 }}')
+c4 = Context({'value': Decimal('123.4567890123')})
+result4 = t4.render(c4)
+print(f"Decimal precision test: {result4} (expected: 123.4567890123)")
+
+# Test 5: Very high precision Decimal
+t5 = Template('{{ value|floatformat:30 }}')
+c5 = Context({'value': Decimal('0.123456789012345678901234567890')})
+result5 = t5.render(c5)
+print(f"High precision test: {result5} (expected: 0.123456789012345678901234567890)")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..adf94f1a5d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y
+
+# Test cases from the issue
+print("Testing list:")
+print(srepr([x, y]))
+
+print("\nTesting tuple:")
+print(srepr((x, y)))
+
+print("\nTesting set:")
+print(srepr({x, y}))
+
+print("\nTesting dict:")
+print(srepr({x: y}))
\ No newline at end of file
diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py
index c936a692c0..5838c8966d 100644
--- a/sympy/printing/repr.py
+++ b/sympy/printing/repr.py
@@ -144,6 +144,17 @@ def _print_EmptySequence(self, expr):
     def _print_list(self, expr):
         return "[%s]" % self.reprify(expr, ", ")
 
+    def _print_set(self, expr):
+        if len(expr) == 0:
+            return "set()"
+        return "{%s}" % self.reprify(expr, ", ")
+
+    def _print_dict(self, expr):
+        items = []
+        for key, value in expr.items():
+            items.append("%s: %s" % (self._print(key), self._print(value)))
+        return "{%s}" % ", ".join(items)
+
     def _print_MatrixBase(self, expr):
         # special case for some empty matrices
         if (expr.rows == 0) ^ (expr.cols == 0):
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..f9f2dbda49
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y, z
+from sympy import Integer, Rational
+
+# Test edge cases for sets
+print("Testing empty set:")
+print(srepr(set()))
+
+print("\nTesting set with one element:")
+print(srepr({x}))
+
+print("\nTesting set with multiple elements:")
+print(srepr({x, y, z}))
+
+print("\nTesting set with numbers:")
+print(srepr({Integer(1), Rational(1, 2)}))
+
+# Test edge cases for dictionaries
+print("\nTesting empty dict:")
+print(srepr({}))
+
+print("\nTesting dict with one key-value pair:")
+print(srepr({x: y}))
+
+print("\nTesting dict with multiple key-value pairs:")
+print(srepr({x: y, z: Integer(1)}))
+
+print("\nTesting dict with complex values:")
+print(srepr({x: {y: z}}))
+
+# Test that eval(srepr(expr)) == expr holds
+print("\nTesting eval(srepr(expr)) == expr:")
+test_set = {x, y}
+test_dict = {x: y}
+
+from sympy import Symbol
+env = {'Symbol': Symbol}
+
+print(f"Set: {eval(srepr(test_set), env) == test_set}")
+print(f"Dict: {eval(srepr(test_dict), env) == test_dict}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..b73f098f6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy
+
+X = numpy.random.randn(1000, 5)
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
\ No newline at end of file
diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..a68ed3b39 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -273,6 +273,8 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
 
+        # Recompute log_resp with the best parameters to ensure consistency
+        _, log_resp = self._e_step(X)
         return log_resp.argmax(axis=1)
 
     def _e_step(self, X):
diff --git a/test_comprehensive_fix.py b/test_comprehensive_fix.py
new file mode 100644
index 000000000..965a11367
--- /dev/null
+++ b/test_comprehensive_fix.py
@@ -0,0 +1,61 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+def test_fit_predict_consistency():
+    """Test that fit_predict and predict are consistent for various n_init values."""
+    print("Testing fit_predict and predict consistency...")
+    
+    # Generate test data
+    np.random.seed(42)  # For reproducibility
+    X = np.random.randn(100, 3)
+    
+    # Test different n_init values
+    for n_init in [1, 2, 5, 10]:
+        print(f"Testing n_init={n_init}")
+        
+        # Create and fit the model
+        gm = GaussianMixture(n_components=3, n_init=n_init, random_state=42)
+        
+        # Get predictions from fit_predict
+        c1 = gm.fit_predict(X)
+        
+        # Get predictions from predict
+        c2 = gm.predict(X)
+        
+        # They should be identical
+        assert_array_equal(c1, c2, 
+                          f"fit_predict and predict disagree for n_init={n_init}")
+        
+        print(f"  âœ“ n_init={n_init}: fit_predict and predict are consistent")
+    
+    print("All tests passed!")
+
+def test_different_covariance_types():
+    """Test consistency for different covariance types."""
+    print("\nTesting different covariance types...")
+    
+    np.random.seed(42)
+    X = np.random.randn(50, 2)
+    
+    covariance_types = ['full', 'tied', 'diag', 'spherical']
+    
+    for cov_type in covariance_types:
+        print(f"Testing covariance_type='{cov_type}'")
+        
+        gm = GaussianMixture(n_components=2, n_init=3, covariance_type=cov_type, random_state=42)
+        
+        c1 = gm.fit_predict(X)
+        c2 = gm.predict(X)
+        
+        assert_array_equal(c1, c2, 
+                          f"fit_predict and predict disagree for covariance_type='{cov_type}'")
+        
+        print(f"  âœ“ covariance_type='{cov_type}': fit_predict and predict are consistent")
+    
+    print("All covariance type tests passed!")
+
+if __name__ == "__main__":
+    test_fit_predict_consistency()
+    test_different_covariance_types()
+    print("\nðŸŽ‰ All comprehensive tests passed!")
\ No newline at end of file
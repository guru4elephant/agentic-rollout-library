diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index a308e27297..45bea36085 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -242,7 +242,7 @@ def _cstack(left, right):
         cright = _coord_matrix(right, 'right', noutp)
     else:
         cright = np.zeros((noutp, right.shape[1]))
-        cright[-right.shape[0]:, -right.shape[1]:] = 1
+        cright[-right.shape[0]:, -right.shape[1]:] = right
 
     return np.hstack([cleft, cright])
 
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..aeb7bc77d6
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,60 @@
+import numpy as np
+from astropy.modeling import models as m
+from astropy.modeling.separable import _separable, _cstack, _compute_n_outputs
+
+# Let's trace through what happens with the nested compound model
+cm = m.Linear1D(10) & m.Linear1D(5)
+print("cm = m.Linear1D(10) & m.Linear1D(5)")
+print("cm:", cm)
+print("cm.left:", cm.left)
+print("cm.right:", cm.right)
+print()
+
+# First, let's see what _separable returns for cm
+sep_cm = _separable(cm)
+print("_separable(cm):")
+print(sep_cm)
+print()
+
+# Now let's see what happens when we do m.Pix2Sky_TAN() & cm
+pix2sky = m.Pix2Sky_TAN()
+print("pix2sky:", pix2sky)
+print("pix2sky.n_inputs:", pix2sky.n_inputs)
+print("pix2sky.n_outputs:", pix2sky.n_outputs)
+print()
+
+# Let's manually trace through _cstack(pix2sky, cm)
+noutp = _compute_n_outputs(pix2sky, cm)
+print("noutp = _compute_n_outputs(pix2sky, cm):", noutp)
+print()
+
+# For left (pix2sky), it's a Model, so we call _coord_matrix
+from astropy.modeling.separable import _coord_matrix
+cleft = _coord_matrix(pix2sky, 'left', noutp)
+print("cleft = _coord_matrix(pix2sky, 'left', noutp):")
+print(cleft)
+print()
+
+# For right (cm), it's a CompoundModel, so we call _separable recursively
+sepright = _separable(cm)
+print("sepright = _separable(cm):")
+print(sepright)
+print("sepright.shape:", sepright.shape)
+print()
+
+# Now the issue: in _cstack, when right is not a Model, it does:
+cright = np.zeros((noutp, sepright.shape[1]))
+print("cright = np.zeros((noutp, sepright.shape[1])):")
+print(cright)
+print()
+
+# The corrected line:
+cright[-sepright.shape[0]:, -sepright.shape[1]:] = sepright
+print("cright[-sepright.shape[0]:, -sepright.shape[1]:] = sepright:")
+print(cright)
+print()
+
+# Final result
+result = np.hstack([cleft, cright])
+print("result = np.hstack([cleft, cright]):")
+print(result)
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..e1086ff8ed
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,53 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+print("=== Testing the GitHub Issue Examples ===")
+
+# Example 1: Simple compound model
+cm = m.Linear1D(10) & m.Linear1D(5)
+print("Example 1: cm = m.Linear1D(10) & m.Linear1D(5)")
+result1 = separability_matrix(cm)
+print(result1)
+print()
+
+# Example 2: More complex model
+print("Example 2: separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))")
+result2 = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))
+print(result2)
+print()
+
+# Example 3: Nested compound models (the main issue)
+print("Example 3: separability_matrix(m.Pix2Sky_TAN() & cm)")
+result3 = separability_matrix(m.Pix2Sky_TAN() & cm)
+print(result3)
+print()
+
+# Verify that examples 2 and 3 are now equal
+print("Example 2 and Example 3 results are equal:", (result2 == result3).all())
+print()
+
+# Additional test cases to ensure robustness
+print("=== Additional Test Cases ===")
+
+# Test deep nesting
+cm1 = m.Linear1D(1) & m.Linear1D(2)
+cm2 = m.Linear1D(3) & m.Linear1D(4)
+deep_nested = cm1 & cm2
+direct = m.Linear1D(1) & m.Linear1D(2) & m.Linear1D(3) & m.Linear1D(4)
+
+print("Deep nesting test:")
+print("Nested result:", separability_matrix(deep_nested))
+print("Direct result:", separability_matrix(direct))
+print("Results equal:", (separability_matrix(deep_nested) == separability_matrix(direct)).all())
+print()
+
+# Test more complex nesting
+complex_nested = (m.Linear1D(1) & m.Linear1D(2)) & (m.Linear1D(3) & m.Linear1D(4))
+complex_direct = m.Linear1D(1) & m.Linear1D(2) & m.Linear1D(3) & m.Linear1D(4)
+print("Complex nesting test:")
+print("Nested result:", separability_matrix(complex_nested))
+print("Direct result:", separability_matrix(complex_direct))
+print("Results equal:", (separability_matrix(complex_nested) == separability_matrix(complex_direct)).all())
+print()
+
+print("All tests completed successfully!")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 3364d30740..02dddbe713 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6cff4c50d4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+# Test case 1: Simple compound model
+cm = m.Linear1D(10) & m.Linear1D(5)
+print("Test case 1: Simple compound model")
+print("cm = m.Linear1D(10) & m.Linear1D(5)")
+print("separability_matrix(cm):")
+print(separability_matrix(cm))
+print()
+
+# Test case 2: More complex model
+print("Test case 2: More complex model")
+print("separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)):")
+print(separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)))
+print()
+
+# Test case 3: Nested compound models (the issue)
+print("Test case 3: Nested compound models (the issue)")
+print("separability_matrix(m.Pix2Sky_TAN() & cm):")
+print(separability_matrix(m.Pix2Sky_TAN() & cm))
+print()
+
+# Expected result for test case 3 should be similar to test case 2
+print("Expected result for test case 3 should be similar to test case 2:")
+expected = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))
+print(expected)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..233ac726ab
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,40 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+# Test 1: Simple models
+print("Test 1: Simple Linear1D model")
+linear = m.Linear1D(5)
+print(separability_matrix(linear))
+print()
+
+# Test 2: Simple compound model
+print("Test 2: Simple compound model")
+simple_compound = m.Linear1D(10) & m.Linear1D(5)
+print(separability_matrix(simple_compound))
+print()
+
+# Test 3: Triple compound model
+print("Test 3: Triple compound model")
+triple = m.Linear1D(1) & m.Linear1D(2) & m.Linear1D(3)
+print(separability_matrix(triple))
+print()
+
+# Test 4: Nested compound models (our fixed case)
+print("Test 4: Nested compound models (our fixed case)")
+cm = m.Linear1D(10) & m.Linear1D(5)
+nested = m.Pix2Sky_TAN() & cm
+print(separability_matrix(nested))
+print()
+
+# Test 5: Deep nesting
+print("Test 5: Deep nesting")
+cm1 = m.Linear1D(1) & m.Linear1D(2)
+cm2 = m.Linear1D(3) & m.Linear1D(4)
+deep_nested = cm1 & cm2
+print(separability_matrix(deep_nested))
+print()
+
+# Test 6: Mixed with non-separable models
+print("Test 6: Mixed with non-separable models")
+mixed = m.Pix2Sky_TAN() & (m.Linear1D(1) & m.Linear1D(2))
+print(separability_matrix(mixed))
\ No newline at end of file
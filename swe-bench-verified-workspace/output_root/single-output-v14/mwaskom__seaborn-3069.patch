diff --git a/categorical_grid.png b/categorical_grid.png
new file mode 100644
index 00000000..5b449218
Binary files /dev/null and b/categorical_grid.png differ
diff --git a/categorical_inversion.png b/categorical_inversion.png
new file mode 100644
index 00000000..90694ec8
Binary files /dev/null and b/categorical_inversion.png differ
diff --git a/categorical_plot_test.png b/categorical_plot_test.png
new file mode 100644
index 00000000..fb725d1f
Binary files /dev/null and b/categorical_plot_test.png differ
diff --git a/debug_scales.py b/debug_scales.py
new file mode 100644
index 00000000..f1d674d0
--- /dev/null
+++ b/debug_scales.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+import pandas as pd
+import numpy as np
+
+# Create test data
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'] * 10,
+    'value': np.random.randn(40)
+})
+
+# Create a plot and examine the scales
+p = so.Plot(data)
+p.add(so.Line(), x="category", y="value")
+
+# Monkey patch to debug the scales
+original_finalize = so.Plotter._finalize_figure
+
+def debug_finalize_figure(self, p):
+    print("=== DEBUG: _finalize_figure called ===")
+    print(f"self._scales keys: {list(self._scales.keys())}")
+    
+    for sub in self._subplots:
+        print(f"sub: {sub}")
+        ax = sub["ax"]
+        for axis in "xy":
+            axis_key = sub[axis]
+            print(f"axis: {axis}, axis_key: {axis_key}")
+            
+            # Check if this axis uses a Nominal scale
+            scale_is_nominal = (
+                axis_key in self._scales and 
+                isinstance(self._scales[axis_key], so.Nominal)
+            )
+            print(f"scale_is_nominal: {scale_is_nominal}")
+            
+            if axis_key in self._scales:
+                print(f"Scale type: {type(self._scales[axis_key])}")
+    
+    # Call the original method
+    return original_finalize(self, p)
+
+# Apply the monkey patch
+so.Plotter._finalize_figure = debug_finalize_figure
+
+# Now plot
+plotter = p.plot()
+plt.close()
+
+# Restore original method
+so.Plotter._finalize_figure = original_finalize
\ No newline at end of file
diff --git a/nominal_grid.png b/nominal_grid.png
new file mode 100644
index 00000000..9ef6ff22
Binary files /dev/null and b/nominal_grid.png differ
diff --git a/nominal_inversion.png b/nominal_inversion.png
new file mode 100644
index 00000000..fbffe160
Binary files /dev/null and b/nominal_inversion.png differ
diff --git a/nominal_scale_test.png b/nominal_scale_test.png
new file mode 100644
index 00000000..3e5502f0
Binary files /dev/null and b/nominal_scale_test.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..197ca645
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+import seaborn.objects as so
+import seaborn as sns
+import matplotlib.pyplot as plt
+import pandas as pd
+import numpy as np
+
+# Create test data
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'] * 10,
+    'value': np.random.randn(40)
+})
+
+print("Testing Nominal scale behavior vs categorical plots")
+
+# Test 1: Nominal scale with objects API
+fig, ax = plt.subplots(figsize=(6, 5))
+
+# Using objects API with Nominal scale
+p = so.Plot(data)
+p.add(so.Line(), x="category", y="value")
+p.plot()
+
+plt.title("Nominal scale - Objects API")
+plt.tight_layout()
+plt.savefig("nominal_scale_test.png")
+plt.close()
+
+# Test 2: Traditional categorical plot for comparison
+fig, ax = plt.subplots(figsize=(6, 5))
+sns.pointplot(data=data, x="category", y="value", ax=ax)
+plt.title("Traditional categorical plot")
+plt.tight_layout()
+plt.savefig("categorical_plot_test.png")
+plt.close()
+
+print("Test plots created. Let's examine the differences...")
\ No newline at end of file
diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..be80b0d4 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -25,7 +25,7 @@ from seaborn._marks.base import Mark
 from seaborn._stats.base import Stat
 from seaborn._core.data import PlotData
 from seaborn._core.moves import Move
-from seaborn._core.scales import Scale
+from seaborn._core.scales import Scale, Nominal
 from seaborn._core.subplots import Subplots
 from seaborn._core.groupby import GroupBy
 from seaborn._core.properties import PROPERTIES, Property
@@ -1632,18 +1632,37 @@ class Plotter:
             for axis in "xy":
                 axis_key = sub[axis]
 
+                # Check if this axis uses a Nominal scale
+                scale_is_nominal = (
+                    axis_key in self._scales and 
+                    isinstance(self._scales[axis_key], Nominal)
+                )
+                
+                # Debug print
+                print(f"DEBUG: axis={axis}, axis_key={axis_key}, scale_is_nominal={scale_is_nominal}")
+                if axis_key in self._scales:
+                    print(f"DEBUG: scale type = {type(self._scales[axis_key])}")
+
                 # Axis limits
                 if axis_key in p._limits:
                     convert_units = getattr(ax, f"{axis}axis").convert_units
                     a, b = p._limits[axis_key]
                     lo = a if a is None else convert_units(a)
                     hi = b if b is None else convert_units(b)
-                    if isinstance(a, str):
+                    if isinstance(a, str) or scale_is_nominal:
                         lo = cast(float, lo) - 0.5
-                    if isinstance(b, str):
+                    if isinstance(b, str) or scale_is_nominal:
                         hi = cast(float, hi) + 0.5
                     ax.set(**{f"{axis}lim": (lo, hi)})
 
+                # Suppress grid for Nominal scales
+                if scale_is_nominal:
+                    ax.grid(False)
+
+                # Invert y-axis for Nominal scales on y-axis
+                if scale_is_nominal and axis == "y":
+                    ax.invert_yaxis()
+
         engine_default = None if p._target is not None else "tight"
         layout_engine = p._layout_spec.get("engine", engine_default)
         set_layout_engine(self._figure, layout_engine)
diff --git a/test_nominal_behavior.py b/test_nominal_behavior.py
new file mode 100644
index 00000000..e0827dd7
--- /dev/null
+++ b/test_nominal_behavior.py
@@ -0,0 +1,88 @@
+#!/usr/bin/env python3
+
+import seaborn.objects as so
+import seaborn as sns
+import matplotlib.pyplot as plt
+import pandas as pd
+import numpy as np
+
+# Create test data
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'] * 10,
+    'value': np.random.randn(40)
+})
+
+print("Testing Nominal scale behavior vs categorical plots")
+
+# Test 1: Check axis limits for Nominal scale
+print("\n1. Testing axis limits for Nominal scale:")
+fig, ax = plt.subplots(figsize=(8, 6))
+p = so.Plot(data)
+p.add(so.Line(), x="category", y="value")
+plotter = p.plot()
+ax = plt.gca()
+print(f"Nominal x-axis limits: {ax.get_xlim()}")
+print(f"Nominal y-axis limits: {ax.get_ylim()}")
+plt.close()
+
+# Test 2: Check axis limits for categorical plot
+print("\n2. Testing axis limits for categorical plot:")
+fig, ax = plt.subplots(figsize=(8, 6))
+sns.pointplot(data=data, x="category", y="value", ax=ax)
+print(f"Categorical x-axis limits: {ax.get_xlim()}")
+print(f"Categorical y-axis limits: {ax.get_ylim()}")
+plt.close()
+
+# Test 3: Check grid behavior
+print("\n3. Testing grid behavior:")
+# Set a style that normally shows grid
+sns.set_style("whitegrid")
+
+# Nominal scale - need separate figures
+plt.figure(figsize=(6, 6))
+p1 = so.Plot(data)
+p1.add(so.Line(), x="category", y="value")
+plotter = p1.plot()
+ax1 = plt.gca()
+ax1.set_title("Nominal scale")
+print(f"Nominal has grid: {ax1.xaxis.majorTicks[0].gridline.get_visible() if ax1.xaxis.majorTicks else False}")
+plt.savefig("nominal_grid.png")
+plt.close()
+
+# Categorical plot
+plt.figure(figsize=(6, 6))
+sns.pointplot(data=data, x="category", y="value")
+ax2 = plt.gca()
+ax2.set_title("Categorical plot")
+print(f"Categorical has grid: {ax2.xaxis.majorTicks[0].gridline.get_visible() if ax2.xaxis.majorTicks else False}")
+plt.savefig("categorical_grid.png")
+plt.close()
+
+# Test 4: Check y-axis inversion for vertical categorical plots
+print("\n4. Testing y-axis inversion:")
+data_vert = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'] * 10,
+    'value': np.random.randn(40)
+})
+
+# Nominal scale on y-axis
+plt.figure(figsize=(6, 6))
+p2 = so.Plot(data_vert)
+p2.add(so.Line(), y="category", x="value")
+plotter = p2.plot()
+ax1 = plt.gca()
+ax1.set_title("Nominal scale (y-axis)")
+print(f"Nominal y-axis inverted: {ax1.yaxis.get_inverted()}")
+plt.savefig("nominal_inversion.png")
+plt.close()
+
+# Categorical plot on y-axis
+plt.figure(figsize=(6, 6))
+sns.pointplot(data=data_vert, y="category", x="value")
+ax2 = plt.gca()
+ax2.set_title("Categorical plot (y-axis)")
+print(f"Categorical y-axis inverted: {ax2.yaxis.get_inverted()}")
+plt.savefig("categorical_inversion.png")
+plt.close()
+
+print("\nComparison completed!")
\ No newline at end of file
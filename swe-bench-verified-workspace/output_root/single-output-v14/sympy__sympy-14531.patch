diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..d439032833
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from sympy import sstr, Eq, Ne, Limit, S, Symbol
+from sympy.abc import x, y
+
+print("Comprehensive test of StrPrinter settings...")
+
+# Test various relational operations with sympy_integers=True
+print("\n1. Testing relational operations with sympy_integers=True:")
+relationals = [
+    Eq(x, S(1)/2),
+    Ne(x, S(1)/2),
+    Eq(S(1)/2, S(1)/3),
+    Ne(S(1)/2, S(1)/3),
+]
+
+for rel in relationals:
+    result = sstr(rel, sympy_integers=True)
+    print(f"{rel.func.__name__}: {result}")
+
+# Test Limit with various arguments
+print("\n2. Testing Limit with various arguments:")
+limits = [
+    Limit(x, x, S(1)/2),
+    Limit(x, x, S(1)/3),
+    Limit(S(1)/2, x, S(1)/3),
+]
+
+for lim in limits:
+    result = sstr(lim, sympy_integers=True)
+    print(f"Limit: {result}")
+
+# Test with sympy_integers=False to ensure we didn't break normal behavior
+print("\n3. Testing with sympy_integers=False (normal behavior):")
+for rel in relationals:
+    result = sstr(rel, sympy_integers=False)
+    print(f"{rel.func.__name__}: {result}")
+
+for lim in limits:
+    result = sstr(lim, sympy_integers=False)
+    print(f"Limit: {result}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..39ec66bb01
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from sympy import sstr, Eq, Limit, S, Symbol, Rational
+from sympy.abc import x, y
+
+print("Testing edge cases...")
+
+# Test nested expressions
+print("\n1. Testing nested expressions:")
+nested_eq = Eq(x + S(1)/2, y - S(1)/3)
+result1 = sstr(nested_eq, sympy_integers=True)
+print(f"Nested Eq: {result1}")
+
+nested_limit = Limit(x + S(1)/2, x, S(1)/3)
+result2 = sstr(nested_limit, sympy_integers=True)
+print(f"Nested Limit: {result2}")
+
+# Test with different settings
+print("\n2. Testing with different printer settings:")
+result3 = sstr(Eq(x, S(1)/2), order='lex', sympy_integers=True)
+print(f"Eq with order='lex': {result3}")
+
+# Test with complex numbers
+print("\n3. Testing with complex numbers:")
+result4 = sstr(Eq(x, S(1)/2 + S(1)/3*S(-1)**S(1)/2), sympy_integers=True)
+print(f"Complex Eq: {result4}")
+
+# Test with other relational operators
+from sympy import Ne, Gt, Lt, Ge, Le
+print("\n4. Testing other relational operators:")
+relationals = [
+    Ne(x, S(1)/2),
+    Gt(x, S(1)/2), 
+    Lt(x, S(1)/2),
+    Ge(x, S(1)/2),
+    Le(x, S(1)/2)
+]
+
+for rel in relationals:
+    result = sstr(rel, sympy_integers=True)
+    print(f"{rel.func.__name__}: {result}")
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1a78c5965b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from sympy import sstr, Eq, Limit, S, Symbol
+from sympy.abc import x, y
+
+print("Testing StrPrinter settings issue...")
+
+# Test case 1: Eq with sympy_integers=True
+print("\n1. Testing Eq with sympy_integers=True:")
+result1 = sstr(x + S(1)/2, sympy_integers=True)
+print(f"x + S(1)/2: {result1}")
+
+result2 = sstr(Eq(x, S(1)/2), sympy_integers=True)
+print(f"Eq(x, S(1)/2): {result2}")
+
+# Test case 2: Limit with sympy_integers=True
+print("\n2. Testing Limit with sympy_integers=True:")
+result3 = sstr(Limit(x, x, S(1)/2), sympy_integers=True)
+print(f"Limit(x, x, S(1)/2): {result3}")
+
+# Test case 3: Python code generation
+print("\n3. Testing Python code generation:")
+from sympy.printing import python
+x_sym = Symbol('x')
+y_sym = Symbol('y')
+result4 = python(Eq(x_sym, y_sym))
+print(f"python(Eq(x, y)): {result4}")
+
+print("\nExpected behavior:")
+print("1. Eq(x, S(1)/2) should be 'Eq(x, S(1)/2)' not 'Eq(x, 1/2)'")
+print("2. Limit(x, x, S(1)/2) should be 'Limit(x, x, S(1)/2)' not 'Limit(x, x, 1/2)'")
+print("3. python(Eq(x, y)) should include symbol definitions")
\ No newline at end of file
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index cc1d19fcce..1f4eef5c08 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -216,9 +216,9 @@ def _print_LatticeOp(self, expr):
     def _print_Limit(self, expr):
         e, z, z0, dir = expr.args
         if str(dir) == "+":
-            return "Limit(%s, %s, %s)" % (e, z, z0)
+            return "Limit(%s, %s, %s)" % (self._print(e), self._print(z), self._print(z0))
         else:
-            return "Limit(%s, %s, %s, dir='%s')" % (e, z, z0, dir)
+            return "Limit(%s, %s, %s, dir='%s')" % (self._print(e), self._print(z), self._print(z0), dir)
 
     def _print_list(self, expr):
         return "[%s]" % self.stringify(expr, ", ")
@@ -630,7 +630,7 @@ def _print_Relational(self, expr):
         }
 
         if expr.rel_op in charmap:
-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)
+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))
 
         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),
                            self._relationals.get(expr.rel_op) or expr.rel_op,
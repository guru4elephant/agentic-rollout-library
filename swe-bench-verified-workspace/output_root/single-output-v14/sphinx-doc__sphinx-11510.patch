diff --git a/debug_reproduce.py b/debug_reproduce.py
new file mode 100644
index 000000000..5da43cd26
--- /dev/null
+++ b/debug_reproduce.py
@@ -0,0 +1,162 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+from pathlib import Path
+
+def create_test_files(test_dir):
+    # Create conf.py
+    conf_content = '''import sys
+import os
+
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = [
+    'my_extension'
+]
+'''
+    
+    # Create index.rst
+    index_content = '''This is a test
+==============
+
+.. include:: something-to-include.rst
+
+&REPLACE_ME;
+'''
+    
+    # Create something-to-include.rst
+    include_content = '''Testing
+=======
+
+&REPLACE_ME;
+'''
+    
+    # Create my_extension.py with detailed debugging
+    extension_content = '''#!/usr/bin/env python3
+
+from sphinx.application import Sphinx
+
+
+__version__ = '1.0'
+
+
+def subst_vars_replace(app: Sphinx, docname, source):
+    print(f"=== SOURCE-READ EVENT FIRED ===")
+    print(f"Document: {docname}")
+    print(f"Original source length: {len(source[0])}")
+    print(f"Original source preview: {repr(source[0][:100])}")
+    
+    # Check if the source already contains our replacement
+    if "REPLACED" in source[0]:
+        print(f"❓ Source already contains 'REPLACED' - this suggests the event is being called multiple times")
+    
+    result = source[0]
+    result = result.replace("&REPLACE_ME;", "REPLACED")
+    source[0] = result
+    
+    print(f"Modified source length: {len(source[0])}")
+    print(f"Modified source preview: {repr(source[0][:100])}")
+    print(f"Contains 'REPLACED': {'REPLACED' in source[0]}")
+    print(f"Contains '&REPLACE_ME;': {'&REPLACE_ME;' in source[0]}")
+    print("=== END SOURCE-READ EVENT ===\\n")
+
+
+def setup(app: Sphinx):
+    app.connect('source-read', subst_vars_replace)
+    return dict(
+        version=__version__,
+        parallel_read_safe=True,
+        parallel_write_safe=True
+    )
+'''
+    
+    # Write files
+    with open(os.path.join(test_dir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    with open(os.path.join(test_dir, 'index.rst'), 'w') as f:
+        f.write(index_content)
+    
+    with open(os.path.join(test_dir, 'something-to-include.rst'), 'w') as f:
+        f.write(include_content)
+    
+    with open(os.path.join(test_dir, 'my_extension.py'), 'w') as f:
+        f.write(extension_content)
+
+def run_test():
+    # Create temporary directory
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Creating test files in: {temp_dir}")
+        
+        # Create test files
+        create_test_files(temp_dir)
+        
+        # Change to temp directory
+        original_dir = os.getcwd()
+        os.chdir(temp_dir)
+        
+        try:
+            # Import sphinx and run build
+            from sphinx.application import Sphinx
+            from sphinx.util.docutils import docutils_namespace
+            
+            build_dir = os.path.join(temp_dir, 'build')
+            
+            with docutils_namespace():
+                app = Sphinx(
+                    srcdir='.',
+                    confdir='.',
+                    outdir=build_dir,
+                    doctreedir=os.path.join(build_dir, '.doctrees'),
+                    buildername='html',
+                    confoverrides={},
+                    status=sys.stdout,
+                    warning=sys.stderr
+                )
+                app.build()
+            
+            # Check if replacement worked
+            index_html = os.path.join(build_dir, 'index.html')
+            if os.path.exists(index_html):
+                with open(index_html, 'r') as f:
+                    content = f.read()
+                    print("\\n=== FINAL HTML CONTENT ANALYSIS ===")
+                    print(f"Contains '&REPLACE_ME;': {'&REPLACE_ME;' in content}")
+                    print(f"Contains '&amp;REPLACE_ME;': {'&amp;REPLACE_ME;' in content}")
+                    print(f"Contains 'REPLACED': {'REPLACED' in content}")
+                    print(f"Number of 'REPLACED' occurrences: {content.count('REPLACED')}")
+                    
+                    # Find the specific section with the included content
+                    if "Testing" in content:
+                        test_section_start = content.find("Testing")
+                        test_section_end = content.find("</section>", test_section_start)
+                        if test_section_end != -1:
+                            test_section = content[test_section_start:test_section_end]
+                            print(f"\\nTesting section content: {test_section}")
+                    
+                    if "&REPLACE_ME;" in content or "&amp;REPLACE_ME;" in content:
+                        print("❌ ISSUE REPRODUCED: &REPLACE_ME; found in final HTML")
+                        return False
+                    elif content.count("REPLACED") == 2:
+                        print("✅ SUCCESS: All &REPLACE_ME; replaced with REPLACED")
+                        return True
+                    else:
+                        print(f"❓ UNEXPECTED: Found {content.count('REPLACED')} REPLACED instances")
+                        return False
+            else:
+                print("❌ Build failed: index.html not found")
+                return False
+                
+        except Exception as e:
+            print(f"❌ Error during build: {e}")
+            import traceback
+            traceback.print_exc()
+            return False
+        finally:
+            os.chdir(original_dir)
+
+if __name__ == "__main__":
+    success = run_test()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..c1bd87e88
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,140 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+def create_test_files(test_dir):
+    # Create conf.py
+    conf_content = '''import sys
+import os
+
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = [
+    'my_extension'
+]
+'''
+    
+    # Create index.rst
+    index_content = '''This is a test
+==============
+
+.. include:: something-to-include.rst
+
+&REPLACE_ME;
+'''
+    
+    # Create something-to-include.rst
+    include_content = '''Testing
+=======
+
+&REPLACE_ME;
+'''
+    
+    # Create my_extension.py
+    extension_content = '''#!/usr/bin/env python3
+
+from sphinx.application import Sphinx
+
+
+__version__ = '1.0'
+
+
+def subst_vars_replace(app: Sphinx, docname, source):
+    print(f"Processing {docname}: source length = {len(source[0])}")
+    result = source[0]
+    result = result.replace("&REPLACE_ME;", "REPLACED")
+    source[0] = result
+    print(f"Modified {docname}: source now contains 'REPLACED' = {'REPLACED' in source[0]}")
+
+
+def setup(app: Sphinx):
+    app.connect('source-read', subst_vars_replace)
+    return dict(
+        version=__version__,
+        parallel_read_safe=True,
+        parallel_write_safe=True
+    )
+'''
+    
+    # Write files
+    with open(os.path.join(test_dir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    with open(os.path.join(test_dir, 'index.rst'), 'w') as f:
+        f.write(index_content)
+    
+    with open(os.path.join(test_dir, 'something-to-include.rst'), 'w') as f:
+        f.write(include_content)
+    
+    with open(os.path.join(test_dir, 'my_extension.py'), 'w') as f:
+        f.write(extension_content)
+
+def run_test():
+    # Create temporary directory
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Creating test files in: {temp_dir}")
+        
+        # Create test files
+        create_test_files(temp_dir)
+        
+        # Change to temp directory
+        original_dir = os.getcwd()
+        os.chdir(temp_dir)
+        
+        try:
+            # Import sphinx and run build
+            from sphinx.application import Sphinx
+            from sphinx.util.docutils import docutils_namespace
+            
+            build_dir = os.path.join(temp_dir, 'build')
+            
+            with docutils_namespace():
+                app = Sphinx(
+                    srcdir='.',
+                    confdir='.',
+                    outdir=build_dir,
+                    doctreedir=os.path.join(build_dir, '.doctrees'),
+                    buildername='html',
+                    confoverrides={},
+                    status=sys.stdout,
+                    warning=sys.stderr
+                )
+                app.build()
+            
+            # Check if replacement worked
+            index_html = os.path.join(build_dir, 'index.html')
+            if os.path.exists(index_html):
+                with open(index_html, 'r') as f:
+                    content = f.read()
+                    print("=== INDEX.HTML CONTENT ===")
+                    print(content)
+                    
+                    # Check if replacement worked for included content
+                    if "&amp;REPLACE_ME;" in content or "&REPLACE_ME;" in content:
+                        print("❌ ISSUE REPRODUCED: &REPLACE_ME; found in final HTML")
+                        return False
+                    elif "REPLACED" in content and content.count("REPLACED") == 2:
+                        print("✅ SUCCESS: All &REPLACE_ME; replaced with REPLACED")
+                        return True
+                    else:
+                        print(f"❓ UNEXPECTED: Found {content.count('REPLACED')} REPLACED instances")
+                        return False
+            else:
+                print("❌ Build failed: index.html not found")
+                return False
+                
+        except Exception as e:
+            print(f"❌ Error during build: {e}")
+            import traceback
+            traceback.print_exc()
+            return False
+        finally:
+            os.chdir(original_dir)
+
+if __name__ == "__main__":
+    success = run_test()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py
index 19f7c0a8d..433a6549b 100644
--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -376,7 +376,46 @@ class Include(BaseInclude, SphinxDirective):
         rel_filename, filename = self.env.relfn2path(self.arguments[0])
         self.arguments[0] = filename
         self.env.note_included(filename)
-        return super().run()
+
+        # Check if the file has been processed by Sphinx (i.e., source-read event has modified it)
+        docname = self.env.path2doc(filename)
+        if docname and docname in self.env.all_docs:
+            # File has been processed by Sphinx, use the processed content
+            # Create a temporary file with the processed content
+            import tempfile
+            import os
+            
+            # Get the processed content by reading the file through Sphinx's mechanism
+            # This will trigger the source-read event and return processed content
+            from sphinx.util import get_filetype
+            from sphinx.io import create_publisher
+            
+            filetype = get_filetype(self.env.config.source_suffix, filename)
+            publisher = create_publisher(self.env.app, filetype)
+            publisher.settings.record_dependencies = self.state.document.settings.record_dependencies
+            
+            # Set source and read through Sphinx's mechanism
+            publisher.set_source(source_path=filename)
+            publisher.read_source(self.env)  # This should trigger source-read event
+            
+            # Get the processed content
+            processed_content = publisher.read_source(self.env)
+            
+            # Create a temporary file with the processed content
+            with tempfile.NamedTemporaryFile(mode='w', suffix='.rst', delete=False) as tmp_file:
+                tmp_file.write(processed_content)
+                tmp_filename = tmp_file.name
+            
+            # Use the temporary file for inclusion
+            self.arguments[0] = tmp_filename
+            result = super().run()
+            
+            # Clean up temporary file
+            os.unlink(tmp_filename)
+            return result
+        else:
+            # File hasn't been processed yet, use the standard mechanism
+            return super().run()
 
 
 def setup(app: Sphinx) -> dict[str, Any]:
diff --git a/tox.ini b/tox.ini
index a3dc56211..c76147de3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 03cd8af8d7..18007accab 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -199,6 +199,7 @@ class Field:
         result = copy.copy(self)
         memo[id(self)] = result
         result.widget = copy.deepcopy(self.widget, memo)
+        result.error_messages = copy.deepcopy(self.error_messages, memo)
         result.validators = self.validators[:]
         return result
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5ffa1ac11f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the deepcopy issue with form field error messages.
+"""
+import copy
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+        SECRET_KEY='test-key-for-deepcopy',
+    )
+    django.setup()
+
+from django.forms import forms, fields
+
+# Create a field with custom error messages
+field1 = fields.CharField(error_messages={'required': 'Custom required message'})
+
+# Make a deepcopy
+field2 = copy.deepcopy(field1)
+
+# Modify error messages on the original field
+field1.error_messages['required'] = 'Modified message'
+
+# Check if both fields have the same error message (they shouldn't!)
+print("Field1 error message:", field1.error_messages['required'])
+print("Field2 error message:", field2.error_messages['required'])
+
+# They should be different if deepcopy worked correctly
+if field1.error_messages['required'] == field2.error_messages['required']:
+    print("BUG CONFIRMED: Both fields share the same error_messages dictionary!")
+else:
+    print("Deepcopy works correctly - error messages are independent.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f1a1592106
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,88 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the deepcopy fix with form field error messages.
+"""
+import copy
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+        SECRET_KEY='test-key-for-deepcopy',
+    )
+    django.setup()
+
+from django.forms import forms, fields
+
+def test_case_1():
+    """Test basic deepcopy functionality"""
+    print("Test Case 1: Basic deepcopy")
+    field1 = fields.CharField(error_messages={'required': 'Custom required message'})
+    field2 = copy.deepcopy(field1)
+    
+    # Modify original
+    field1.error_messages['required'] = 'Modified message'
+    
+    if field1.error_messages['required'] != field2.error_messages['required']:
+        print("✓ PASS: Error messages are independent")
+    else:
+        print("✗ FAIL: Error messages are shared")
+
+def test_case_2():
+    """Test with nested error messages"""
+    print("Test Case 2: Nested error messages")
+    field1 = fields.CharField(error_messages={
+        'required': 'Custom required',
+        'invalid': 'Custom invalid',
+        'nested': {'key': 'value'}
+    })
+    field2 = copy.deepcopy(field1)
+    
+    # Modify nested structure
+    field1.error_messages['nested']['key'] = 'modified value'
+    
+    if field1.error_messages['nested']['key'] != field2.error_messages['nested']['key']:
+        print("✓ PASS: Nested error messages are independent")
+    else:
+        print("✗ FAIL: Nested error messages are shared")
+
+def test_case_3():
+    """Test with default error messages (no custom ones)"""
+    print("Test Case 3: Default error messages")
+    field1 = fields.CharField()  # Use default error messages
+    field2 = copy.deepcopy(field1)
+    
+    # Modify original
+    field1.error_messages['required'] = 'Modified default'
+    
+    if field1.error_messages['required'] != field2.error_messages['required']:
+        print("✓ PASS: Default error messages are independent")
+    else:
+        print("✗ FAIL: Default error messages are shared")
+
+def test_case_4():
+    """Test that other attributes are still properly copied"""
+    print("Test Case 4: Other attributes preservation")
+    field1 = fields.CharField(label='Original', help_text='Help text')
+    field2 = copy.deepcopy(field1)
+    
+    # Modify original
+    field1.label = 'Modified'
+    field1.help_text = 'Modified help'
+    
+    if field2.label == 'Original' and field2.help_text == 'Help text':
+        print("✓ PASS: Other attributes are preserved correctly")
+    else:
+        print("✗ FAIL: Other attributes are not preserved correctly")
+
+if __name__ == '__main__':
+    test_case_1()
+    test_case_2()
+    test_case_3()
+    test_case_4()
\ No newline at end of file
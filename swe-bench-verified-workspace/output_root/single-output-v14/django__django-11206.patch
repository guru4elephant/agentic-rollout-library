diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..34ab61b149 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -30,7 +30,30 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
         # Format values with more than 200 digits (an arbitrary cutoff) using
         # scientific notation to avoid high memory usage in {:f}'.format().
         _, digits, exponent = number.as_tuple()
-        if abs(exponent) + len(digits) > 200:
+        
+        # Check if decimal_pos is specified and the number is smaller than what can be
+        # represented with the given number of decimal places
+        if decimal_pos is not None:
+            # Calculate the smallest number that can be represented with decimal_pos decimal places
+            smallest_representable = Decimal('1e-{}'.format(decimal_pos))
+            if abs(number) < smallest_representable and number != Decimal('0'):
+                # Number is too small to represent with given decimal places, format as zero
+                str_number = '0'
+                if decimal_pos > 0:
+                    str_number += '.'
+                    str_number += '0' * decimal_pos
+            elif abs(exponent) + len(digits) > 200:
+                number = '{:e}'.format(number)
+                coefficient, exponent = number.split('e')
+                # Format the coefficient.
+                coefficient = format(
+                    coefficient, decimal_sep, decimal_pos, grouping,
+                    thousand_sep, force_grouping, use_l10n,
+                )
+                return '{}e{}'.format(coefficient, exponent)
+            else:
+                str_number = '{:f}'.format(number)
+        elif abs(exponent) + len(digits) > 200:
             number = '{:e}'.format(number)
             coefficient, exponent = number.split('e')
             # Format the coefficient.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..80810738b7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+from decimal import Decimal
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        USE_L10N=False,
+        USE_THOUSAND_SEPARATOR=False
+    )
+    django.setup()
+
+from django.utils.numberformat import format as nformat
+
+# Test cases from the GitHub issue
+print("Testing the issue...")
+result1 = nformat(Decimal('1e-199'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-199'), '.', decimal_pos=2) = '{result1}'")
+
+result2 = nformat(Decimal('1e-200'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-200'), '.', decimal_pos=2) = '{result2}'")
+
+# Expected: both should return '0.00' instead of exponential notation
+print(f"\nExpected: both should return '0.00'")
+print(f"Result 1 is correct: {result1 == '0.00'}")
+print(f"Result 2 is correct: {result2 == '0.00'}")
+
+# Additional edge cases
+print("\nTesting additional edge cases:")
+test_cases = [
+    ('1e-10', 8, '0.00000000'),
+    ('1e-15', 8, '0.00000000'),
+    ('1e-20', 8, '0.00000000'),
+    ('1e-100', 8, '0.00000000'),
+    ('1e-199', 8, '0.00000000'),
+    ('1e-200', 8, '0.00000000'),
+    ('1e-201', 8, '0.00000000'),
+]
+
+for value, decimal_pos, expected in test_cases:
+    result = nformat(Decimal(value), '.', decimal_pos)
+    print(f"nformat(Decimal('{value}'), '.', {decimal_pos}) = '{result}' (expected: '{expected}')")
+    print(f"  Correct: {result == expected}")
\ No newline at end of file
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..e5b77a70ac
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+import django
+from django.conf import settings
+
+# Configure Django settings for testing
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_L10N=False,
+        USE_THOUSAND_SEPARATOR=False,
+        TEST_RUNNER='django.test.runner.DiscoverRunner'
+    )
+    django.setup()
+
+import unittest
+from tests.utils_tests.test_numberformat import TestNumberFormat
+
+# Run the specific test
+suite = unittest.TestLoader().loadTestsFromTestCase(TestNumberFormat)
+runner = unittest.TextTestRunner(verbosity=2)
+result = runner.run(suite)
+
+print(f"\nTests run: {result.testsRun}")
+print(f"Errors: {len(result.errors)}")
+print(f"Failures: {len(result.failures)}")
\ No newline at end of file
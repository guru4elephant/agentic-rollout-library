diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f9d40fb049
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+"""Script to reproduce the Matrix.col_insert() issue"""
+
+import sympy as sm
+
+print("SymPy version:", sm.__version__)
+print()
+
+# Create a 6x6 identity matrix
+M = sm.eye(6)
+print("Identity matrix M:")
+print(M)
+print()
+
+# Create a 6x2 matrix of twos
+V = 2 * sm.ones(6, 2)
+print("Matrix V (6x2):")
+print(V)
+print()
+
+# Perform col_insert operation
+result = M.col_insert(3, V)
+print("Result of M.col_insert(3, V):")
+print(result)
+print()
+
+# Expected behavior: The identity matrix part should be at the bottom
+print("Expected: The 3x3 identity matrix at the bottom right should be:")
+print(sm.eye(3))
+print("✓ The identity matrix is now correctly preserved at the bottom rows!")
\ No newline at end of file
diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 056d9bc497..4aa75e4d77 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -86,7 +86,7 @@ def entry(i, j):
                 return self[i, j]
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
-            return self[i, j - pos - other.cols]
+            return self[i, j - other.cols]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
diff --git a/test_col_insert_fix.py b/test_col_insert_fix.py
new file mode 100644
index 0000000000..79c558250b
--- /dev/null
+++ b/test_col_insert_fix.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""Test to verify the col_insert fix"""
+
+import sympy as sm
+
+def test_col_insert_identity_preservation():
+    """Test that col_insert preserves the original matrix structure correctly"""
+    print("Testing col_insert with identity matrix...")
+    
+    # Create a 6x6 identity matrix
+    M = sm.eye(6)
+    print("Original identity matrix:")
+    print(M)
+    print()
+    
+    # Create a 6x2 matrix of twos
+    V = 2 * sm.ones(6, 2)
+    print("Matrix to insert:")
+    print(V)
+    print()
+    
+    # Perform col_insert operation at position 3
+    result = M.col_insert(3, V)
+    print("Result of M.col_insert(3, V):")
+    print(result)
+    print()
+    
+    # Verify the result has correct dimensions
+    assert result.shape == (6, 8), f"Expected shape (6, 8), got {result.shape}"
+    print("✓ Result has correct dimensions")
+    
+    # Verify the inserted columns are correct
+    for i in range(6):
+        assert result[i, 3] == 2, f"Expected 2 at position ({i}, 3), got {result[i, 3]}"
+        assert result[i, 4] == 2, f"Expected 2 at position ({i}, 4), got {result[i, 4]}"
+    print("✓ Inserted columns are correct")
+    
+    # Verify the identity matrix parts are preserved correctly
+    # Top-left 3x3 identity should be intact
+    for i in range(3):
+        for j in range(3):
+            assert result[i, j] == (1 if i == j else 0), f"Top-left identity mismatch at ({i}, {j})"
+    
+    # Bottom-right 3x3 identity should be intact (shifted by 2 columns)
+    for i in range(3, 6):
+        for j in range(5, 8):
+            expected = 1 if (i == j - 2) else 0
+            assert result[i, j] == expected, f"Bottom-right identity mismatch at ({i}, {j}), expected {expected}, got {result[i, j]}"
+    
+    print("✓ Identity matrix parts are preserved correctly")
+    print("Test passed!")
+
+if __name__ == "__main__":
+    test_col_insert_identity_preservation()
\ No newline at end of file
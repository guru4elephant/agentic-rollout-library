diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..9e88c13614
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+
+from sympy import Rational
+
+def test_rational_behavior():
+    """Test comprehensive Rational behavior to ensure our fix works correctly"""
+    
+    print("Testing Rational behavior comprehensively...")
+    
+    # Test cases from the original issue
+    assert Rational('0.5', '100') == Rational(1, 200), f"Failed: Rational('0.5', '100') = {Rational('0.5', '100')}, expected 1/200"
+    assert Rational(0.5, 100) == Rational(1, 200), f"Failed: Rational(0.5, 100) = {Rational(0.5, 100)}, expected 1/200"
+    
+    # Test various combinations of string arguments
+    test_cases = [
+        # (p, q, expected_result)
+        ('1', '2', Rational(1, 2)),
+        ('0.5', '2', Rational(1, 4)),
+        ('1/2', '2', Rational(1, 4)),
+        ('2', '0.5', Rational(4, 1)),
+        ('0.25', '4', Rational(1, 16)),
+        ('1/4', '4', Rational(1, 16)),
+        ('3', '1/3', Rational(9, 1)),
+    ]
+    
+    for p, q, expected in test_cases:
+        result = Rational(p, q)
+        assert result == expected, f"Failed: Rational({p!r}, {q!r}) = {result}, expected {expected}"
+        print(f"✓ Rational({p!r}, {q!r}) = {result}")
+    
+    # Test mixed types
+    mixed_cases = [
+        (1, '2', Rational(1, 2)),
+        ('1', 2, Rational(1, 2)),
+        (0.5, '2', Rational(1, 4)),
+        ('0.5', 2, Rational(1, 4)),
+        (Rational(1, 2), '2', Rational(1, 4)),
+        ('1/2', Rational(2), Rational(1, 4)),
+    ]
+    
+    for p, q, expected in mixed_cases:
+        result = Rational(p, q)
+        assert result == expected, f"Failed: Rational({p!r}, {q!r}) = {result}, expected {expected}"
+        print(f"✓ Rational({p!r}, {q!r}) = {result}")
+    
+    # Test that single argument behavior is preserved
+    single_cases = [
+        ('1', Rational(1)),
+        ('0.5', Rational(1, 2)),
+        ('1/2', Rational(1, 2)),
+        ('2/3', Rational(2, 3)),
+    ]
+    
+    for arg, expected in single_cases:
+        result = Rational(arg)
+        assert result == expected, f"Failed: Rational({arg!r}) = {result}, expected {expected}"
+        print(f"✓ Rational({arg!r}) = {result}")
+    
+    print("All tests passed! ✅")
+
+if __name__ == "__main__":
+    test_rational_behavior()
\ No newline at end of file
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..36131c5690
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+from sympy import Rational
+
+def test_edge_cases():
+    """Test edge cases to ensure no regressions"""
+    
+    print("Testing edge cases...")
+    
+    # Test division by zero
+    try:
+        result = Rational(1, 0)
+        print(f"Unexpected: Rational(1, 0) = {result}")
+    except Exception as e:
+        print(f"✓ Expected error for Rational(1, 0): {e}")
+    
+    try:
+        result = Rational('1', '0')
+        print(f"Unexpected: Rational('1', '0') = {result}")
+    except Exception as e:
+        print(f"✓ Expected error for Rational('1', '0'): {e}")
+    
+    # Test zero numerator
+    assert Rational(0, 1) == Rational(0), "Rational(0, 1) should be 0"
+    assert Rational('0', '1') == Rational(0), "Rational('0', '1') should be 0"
+    print("✓ Zero numerator cases work correctly")
+    
+    # Test negative numbers
+    assert Rational(-1, 2) == Rational(-1, 2), "Rational(-1, 2) should be -1/2"
+    assert Rational('-1', '2') == Rational(-1, 2), "Rational('-1', '2') should be -1/2"
+    assert Rational('1', '-2') == Rational(-1, 2), "Rational('1', '-2') should be -1/2"
+    assert Rational('-1', '-2') == Rational(1, 2), "Rational('-1', '-2') should be 1/2"
+    print("✓ Negative number cases work correctly")
+    
+    # Test large numbers
+    assert Rational('1000000', '2000000') == Rational(1, 2), "Large number simplification works"
+    print("✓ Large number cases work correctly")
+    
+    # Test that gcd simplification still works
+    assert Rational(2, 4) == Rational(1, 2), "GCD simplification should work"
+    assert Rational('2', '4') == Rational(1, 2), "String GCD simplification should work"
+    print("✓ GCD simplification works correctly")
+    
+    print("All edge case tests passed! ✅")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..1ebfdfa272
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy import Rational
+
+print("Final verification of the GitHub issue fix:")
+print("=" * 50)
+
+# Original issue: Rational('0.5', '100') should equal Rational(0.5, 100)
+result1 = Rational('0.5', '100')
+result2 = Rational(0.5, 100)
+
+print(f"Rational('0.5', '100') = {result1}")
+print(f"Rational(0.5, 100) = {result2}")
+print(f"Are they equal? {result1 == result2}")
+
+# Both should be 1/200
+expected = Rational(1, 200)
+print(f"Expected result: {expected}")
+print(f"Rational('0.5', '100') == 1/200? {result1 == expected}")
+print(f"Rational(0.5, 100) == 1/200? {result2 == expected}")
+
+if result1 == result2 == expected:
+    print("\n✅ SUCCESS: The issue has been fixed!")
+    print("   Both Rational('0.5', '100') and Rational(0.5, 100) now return 1/200")
+else:
+    print("\n❌ FAILURE: The issue is not fixed")
+    print(f"   Rational('0.5', '100') = {result1}")
+    print(f"   Rational(0.5, 100) = {result2}")
+    print(f"   Expected: {expected}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b628fb0f2e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from sympy import Rational
+
+# Test the issue described in the GitHub issue
+print("Testing Rational calculation issue:")
+
+# Test case 1: Rational with string arguments
+result1 = Rational('0.5', '100')
+print(f"Rational('0.5', '100') = {result1}")
+
+# Test case 2: Rational with numeric arguments  
+result2 = Rational(0.5, 100)
+print(f"Rational(0.5, 100) = {result2}")
+
+# Expected result should be 1/200 for both
+print(f"Expected result: 1/200")
+
+# Additional test cases to understand the behavior
+print("\nAdditional tests:")
+print(f"Rational('0.5') = {Rational('0.5')}")
+print(f"Rational('100') = {Rational('100')}")
+print(f"Rational(0.5) = {Rational(0.5)}")
+print(f"Rational(100) = {Rational(100)}")
\ No newline at end of file
diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 52f7ea45ad..bcc38d0041 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1626,18 +1626,22 @@ def __new__(cls, p, q=None, gcd=None):
             gcd = 1
 
         if not isinstance(p, SYMPY_INTS):
-            p = Rational(p)
-            q *= p.q
-            p = p.p
+            p_rational = Rational(p)
+            if not isinstance(q, SYMPY_INTS):
+                q_rational = Rational(q)
+                p = p_rational.p * q_rational.q
+                q = p_rational.q * q_rational.p
+            else:
+                q = int(q) * p_rational.q
+                p = p_rational.p
         else:
             p = int(p)
-
-        if not isinstance(q, SYMPY_INTS):
-            q = Rational(q)
-            p *= q.q
-            q = q.p
-        else:
-            q = int(q)
+            if not isinstance(q, SYMPY_INTS):
+                q_rational = Rational(q)
+                p *= q_rational.q
+                q = q_rational.p
+            else:
+                q = int(q)
 
         # p and q are now ints
         if q == 0:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..8b083dc73d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from sympy import Rational
+
+print("Testing edge cases for Rational:")
+
+# Test various combinations of input types
+test_cases = [
+    # Both integers
+    (1, 2),
+    # Both strings
+    ('1', '2'),
+    ('0.5', '100'),
+    ('1/2', '1/3'),
+    # Mixed types
+    (1, '2'),
+    ('1', 2),
+    (0.5, '100'),
+    ('0.5', 100),
+    # Float inputs
+    (0.5, 100),
+    (1.5, 2.5),
+    # Complex cases
+    ('1/2', '2/3'),
+    ('0.25', '4'),
+]
+
+for p, q in test_cases:
+    try:
+        result = Rational(p, q)
+        print(f"Rational({p!r}, {q!r}) = {result}")
+    except Exception as e:
+        print(f"Rational({p!r}, {q!r}) failed: {e}")
+
+# Test single argument cases
+print("\nTesting single argument cases:")
+single_cases = [1, '1', 0.5, '0.5', '1/2']
+for arg in single_cases:
+    try:
+        result = Rational(arg)
+        print(f"Rational({arg!r}) = {result}")
+    except Exception as e:
+        print(f"Rational({arg!r}) failed: {e}")
\ No newline at end of file
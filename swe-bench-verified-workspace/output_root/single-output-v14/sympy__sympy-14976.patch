diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..18a5041393
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+
+from sympy import Eq, rf, S, nsolve, Float, symbols
+from sympy.utilities.lambdify import lambdify
+import inspect
+
+x = symbols('x')
+
+# Reproduce the issue
+print("=== Reproducing the issue ===")
+eqn = Eq(rf(18, x), 77 + S(1)/3)
+f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')
+print("Generated function source:")
+print(inspect.getsource(f))
+
+print("\n=== Testing the issue with nsolve ===")
+eqn = Eq(rf(18, x), 77 + S(1)/3)
+x0 = nsolve(eqn, Float('1.5', 64), prec=64)
+print("x0 =", x0)
+print("rf(18, x0).evalf(64) =", rf(18, x0).evalf(64))
+print("Expected (77 + 1/3) =", (77 + S(1)/3).evalf(64))
+print("Difference =", (rf(18, x0) - (77 + S(1)/3)).evalf(64))
\ No newline at end of file
diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index d06901425d..91c54bb07a 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -331,6 +331,15 @@ def _print_Float(self, e):
         args = str(tuple(map(int, e._mpf_)))
         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)
 
+    def _print_Rational(self, e):
+        # Convert rational numbers to mpmath.mpf to maintain precision
+        # Use string representation to avoid Python integer division
+        return '{func}("{p}/{q}")'.format(
+            func=self._module_format('mpmath.mpf'),
+            p=e.p,
+            q=e.q
+        )
+
 
     def _print_uppergamma(self, e):
         return "{0}({1}, {2}, {3})".format(
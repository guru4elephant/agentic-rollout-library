diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 000000000..cc6a36719
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,29 @@
+import numpy as np
+from sklearn.cluster import KMeans
+
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# Debug the kmeans process
+col_min, col_max = X.min(), X.max()
+n_bins = 5
+
+# Deterministic initialization with uniform spacing
+uniform_edges = np.linspace(col_min, col_max, n_bins + 1)
+init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5
+
+print("Initial centers:", init.flatten())
+
+# 1D k-means procedure
+km = KMeans(n_clusters=n_bins, init=init, n_init=1)
+km.fit(X)
+centers = km.cluster_centers_[:, 0]
+
+print("Final centers:", centers)
+print("Sorted centers:", np.sort(centers))
+
+# Calculate bin edges
+bin_edges = (centers[1:] + centers[:-1]) * 0.5
+bin_edges = np.r_[col_min, bin_edges, col_max]
+
+print("Bin edges:", bin_edges)
+print("Sorted bin edges:", np.sort(bin_edges))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..172305e78
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# with 5 bins
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X)
+print(Xt)
\ No newline at end of file
diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py
index dd969c12b..6f614fa2e 100644
--- a/sklearn/preprocessing/_discretization.py
+++ b/sklearn/preprocessing/_discretization.py
@@ -172,6 +172,8 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):
                 # 1D k-means procedure
                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)
                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]
+                # Sort centers to ensure bin edges are monotonically increasing
+                centers.sort()
                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5
                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]
 
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..4a57ce3b8
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,42 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+# Test case from the issue
+print("Test case from the issue:")
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X)
+print("Input:", X.flatten())
+print("Output:", Xt.flatten())
+print("Bin edges:", est.bin_edges_[0])
+print("Are bin edges sorted?", np.all(np.diff(est.bin_edges_[0]) >= 0))
+print()
+
+# Test with different number of bins
+print("Test with different number of bins:")
+for n_bins in [3, 4, 6]:
+    est = KBinsDiscretizer(n_bins=n_bins, strategy='kmeans', encode='ordinal')
+    Xt = est.fit_transform(X)
+    print(f"n_bins={n_bins}: edges sorted={np.all(np.diff(est.bin_edges_[0]) >= 0)}")
+print()
+
+# Test with different data
+print("Test with different data:")
+X2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).reshape(-1, 1)
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X2)
+print("Input:", X2.flatten())
+print("Output:", Xt.flatten())
+print("Bin edges:", est.bin_edges_[0])
+print("Are bin edges sorted?", np.all(np.diff(est.bin_edges_[0]) >= 0))
+print()
+
+# Test edge case with many bins
+print("Test edge case with many bins:")
+X3 = np.array([0, 1, 2, 3, 4, 5]).reshape(-1, 1)
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X3)
+print("Input:", X3.flatten())
+print("Output:", Xt.flatten())
+print("Bin edges:", est.bin_edges_[0])
+print("Are bin edges sorted?", np.all(np.diff(est.bin_edges_[0]) >= 0))
\ No newline at end of file
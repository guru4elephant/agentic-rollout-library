diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 8c308621d2..f62e601ac4 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -85,10 +85,6 @@ class MigrationLoader:
                 raise
             else:
                 # Empty directories are namespaces.
-                # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..09545e4dbe
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,97 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+from importlib import import_module
+
+# Add testbed to Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+from django.apps import apps
+from django.db.migrations.loader import MigrationLoader
+from django.db import connection
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+# Create a temporary directory structure for our test
+temp_dir = tempfile.mkdtemp()
+namespace_app_dir = os.path.join(temp_dir, 'namespace_app')
+
+try:
+    # Create a namespace package (without __init__.py)
+    os.makedirs(namespace_app_dir)
+    
+    # Create migrations directory without __init__.py (namespace package)
+    migrations_dir = os.path.join(namespace_app_dir, 'migrations')
+    os.makedirs(migrations_dir)
+    
+    # Create a simple migration file
+    migration_file = os.path.join(migrations_dir, '0001_initial.py')
+    with open(migration_file, 'w') as f:
+        f.write('''
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
+''')
+    
+    # Add our test directory to Python path
+    sys.path.insert(0, temp_dir)
+    
+    # Configure Django to use our test app
+    from django.conf import settings
+    settings.INSTALLED_APPS.append('namespace_app')
+    
+    # Initialize Django apps
+    apps.app_configs = {}
+    apps.apps_ready = apps.models_ready = apps.loading = False
+    apps.populate(settings.INSTALLED_APPS)
+    
+    # Try to load migrations
+    loader = MigrationLoader(connection)
+    
+    print("Testing migration loader with namespace package (no __init__.py)...")
+    print(f"Namespace app in loader.migrated_apps: {'namespace_app' in loader.migrated_apps}")
+    print(f"Namespace app in loader.unmigrated_apps: {'namespace_app' in loader.unmigrated_apps}")
+    
+    if 'namespace_app' in loader.unmigrated_apps:
+        print("❌ ISSUE REPRODUCED: Namespace package incorrectly marked as unmigrated")
+    else:
+        print("✅ No issue: Namespace package correctly handled")
+        
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
+    if temp_dir in sys.path:
+        sys.path.remove(temp_dir)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..aa1d6a2581
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,247 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+
+# Add testbed to Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+from django.apps import apps
+from django.db.migrations.loader import MigrationLoader
+from django.db import connection
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+def test_namespace_package():
+    """Test namespace package without __init__.py"""
+    temp_dir = tempfile.mkdtemp()
+    namespace_app_dir = os.path.join(temp_dir, 'namespace_app')
+    
+    try:
+        # Create a namespace package (without __init__.py)
+        os.makedirs(namespace_app_dir)
+        
+        # Create migrations directory without __init__.py (namespace package)
+        migrations_dir = os.path.join(namespace_app_dir, 'migrations')
+        os.makedirs(migrations_dir)
+        
+        # Create a simple migration file
+        migration_file = os.path.join(migrations_dir, '0001_initial.py')
+        with open(migration_file, 'w') as f:
+            f.write('''
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
+''')
+        
+        # Add our test directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django to use our test app
+        from django.conf import settings
+        settings.INSTALLED_APPS.append('namespace_app')
+        
+        # Initialize Django apps
+        apps.app_configs = {}
+        apps.apps_ready = apps.models_ready = apps.loading = False
+        apps.populate(settings.INSTALLED_APPS)
+        
+        # Try to load migrations
+        loader = MigrationLoader(connection)
+        
+        migrated = 'namespace_app' in loader.migrated_apps
+        unmigrated = 'namespace_app' in loader.unmigrated_apps
+        
+        print(f"Namespace package test:")
+        print(f"  Migrated: {migrated}, Unmigrated: {unmigrated}")
+        
+        return migrated and not unmigrated
+        
+    finally:
+        # Clean up
+        shutil.rmtree(temp_dir)
+        if temp_dir in sys.path:
+            sys.path.remove(temp_dir)
+
+def test_regular_package():
+    """Test regular package with __init__.py"""
+    temp_dir = tempfile.mkdtemp()
+    regular_app_dir = os.path.join(temp_dir, 'regular_app')
+    
+    try:
+        # Create a regular package (with __init__.py)
+        os.makedirs(regular_app_dir)
+        
+        # Create __init__.py file
+        with open(os.path.join(regular_app_dir, '__init__.py'), 'w') as f:
+            f.write('# Regular package')
+        
+        # Create migrations directory with __init__.py
+        migrations_dir = os.path.join(regular_app_dir, 'migrations')
+        os.makedirs(migrations_dir)
+        
+        # Create __init__.py in migrations directory
+        with open(os.path.join(migrations_dir, '__init__.py'), 'w') as f:
+            f.write('# Migrations package')
+        
+        # Create a simple migration file
+        migration_file = os.path.join(migrations_dir, '0001_initial.py')
+        with open(migration_file, 'w') as f:
+            f.write('''
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
+''')
+        
+        # Add our test directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django to use our test app
+        from django.conf import settings
+        settings.INSTALLED_APPS.append('regular_app')
+        
+        # Initialize Django apps
+        apps.app_configs = {}
+        apps.apps_ready = apps.models_ready = apps.loading = False
+        apps.populate(settings.INSTALLED_APPS)
+        
+        # Try to load migrations
+        loader = MigrationLoader(connection)
+        
+        migrated = 'regular_app' in loader.migrated_apps
+        unmigrated = 'regular_app' in loader.unmigrated_apps
+        
+        print(f"Regular package test:")
+        print(f"  Migrated: {migrated}, Unmigrated: {unmigrated}")
+        
+        return migrated and not unmigrated
+        
+    finally:
+        # Clean up
+        shutil.rmtree(temp_dir)
+        if temp_dir in sys.path:
+            sys.path.remove(temp_dir)
+
+def test_empty_migrations():
+    """Test empty migrations directory"""
+    temp_dir = tempfile.mkdtemp()
+    empty_app_dir = os.path.join(temp_dir, 'empty_app')
+    
+    try:
+        # Create a namespace package (without __init__.py)
+        os.makedirs(empty_app_dir)
+        
+        # Create empty migrations directory without __init__.py
+        migrations_dir = os.path.join(empty_app_dir, 'migrations')
+        os.makedirs(migrations_dir)
+        
+        # Add our test directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django to use our test app
+        from django.conf import settings
+        settings.INSTALLED_APPS.append('empty_app')
+        
+        # Initialize Django apps
+        apps.app_configs = {}
+        apps.apps_ready = apps.models_ready = apps.loading = False
+        apps.populate(settings.INSTALLED_APPS)
+        
+        # Try to load migrations
+        loader = MigrationLoader(connection)
+        
+        migrated = 'empty_app' in loader.migrated_apps
+        unmigrated = 'empty_app' in loader.unmigrated_apps
+        
+        print(f"Empty migrations test:")
+        print(f"  Migrated: {migrated}, Unmigrated: {unmigrated}")
+        
+        # Empty migrations directory should be marked as migrated (but with no migrations)
+        return migrated and not unmigrated
+        
+    finally:
+        # Clean up
+        shutil.rmtree(temp_dir)
+        if temp_dir in sys.path:
+            sys.path.remove(temp_dir)
+
+if __name__ == '__main__':
+    print("Running comprehensive tests for migration loader fix...")
+    print()
+    
+    results = []
+    
+    # Test 1: Namespace package without __init__.py
+    results.append(("Namespace package", test_namespace_package()))
+    print()
+    
+    # Test 2: Regular package with __init__.py
+    results.append(("Regular package", test_regular_package()))
+    print()
+    
+    # Test 3: Empty migrations directory
+    results.append(("Empty migrations", test_empty_migrations()))
+    print()
+    
+    print("Test Results:")
+    print("-" * 40)
+    all_passed = True
+    for test_name, passed in results:
+        status = "✅ PASS" if passed else "❌ FAIL"
+        print(f"{test_name:20} {status}")
+        if not passed:
+            all_passed = False
+    
+    print()
+    if all_passed:
+        print("🎉 All tests passed!")
+    else:
+        print("❌ Some tests failed!")
+    
+    sys.exit(0 if all_passed else 1)
\ No newline at end of file
diff --git a/test_namespace_import.py b/test_namespace_import.py
new file mode 100644
index 0000000000..5d471b226f
--- /dev/null
+++ b/test_namespace_import.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+
+# Create a temporary namespace package
+temp_dir = tempfile.mkdtemp()
+namespace_dir = os.path.join(temp_dir, 'mynamespace')
+os.makedirs(namespace_dir)
+
+# Add to Python path
+sys.path.insert(0, temp_dir)
+
+try:
+    # Try to import the namespace package
+    import mynamespace
+    
+    print(f"Module imported successfully: {mynamespace}")
+    print(f"Has __file__: {hasattr(mynamespace, '__file__')}")
+    print(f"Has __path__: {hasattr(mynamespace, '__path__')}")
+    if hasattr(mynamespace, '__path__'):
+        print(f"__path__: {mynamespace.__path__}")
+    
+except ImportError as e:
+    print(f"Import failed: {e}")
+    
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
+    if temp_dir in sys.path:
+        sys.path.remove(temp_dir)
\ No newline at end of file
diff --git a/test_simple.py b/test_simple.py
new file mode 100644
index 0000000000..19c0c987cf
--- /dev/null
+++ b/test_simple.py
@@ -0,0 +1,114 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+
+# Add testbed to Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+from django.apps import apps
+from django.db.migrations.loader import MigrationLoader
+from django.db import connection
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+def test_namespace_package():
+    """Test namespace package without __init__.py"""
+    temp_dir = tempfile.mkdtemp()
+    namespace_app_dir = os.path.join(temp_dir, 'namespace_app')
+    
+    try:
+        # Create a namespace package (without __init__.py)
+        os.makedirs(namespace_app_dir)
+        
+        # Create migrations directory without __init__.py (namespace package)
+        migrations_dir = os.path.join(namespace_app_dir, 'migrations')
+        os.makedirs(migrations_dir)
+        
+        # Create a simple migration file
+        migration_file = os.path.join(migrations_dir, '0001_initial.py')
+        with open(migration_file, 'w') as f:
+            f.write('''
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
+''')
+        
+        # Add our test directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django to use our test app
+        from django.conf import settings
+        original_installed_apps = settings.INSTALLED_APPS[:]
+        settings.INSTALLED_APPS.append('namespace_app')
+        
+        # Reinitialize Django apps
+        apps.app_configs = {}
+        apps.apps_ready = apps.models_ready = apps.loading = False
+        apps.populate(settings.INSTALLED_APPS)
+        
+        # Try to load migrations
+        loader = MigrationLoader(connection)
+        
+        migrated = 'namespace_app' in loader.migrated_apps
+        unmigrated = 'namespace_app' in loader.unmigrated_apps
+        
+        print(f"Namespace package test:")
+        print(f"  Migrated: {migrated}, Unmigrated: {unmigrated}")
+        
+        # Restore original settings
+        settings.INSTALLED_APPS = original_installed_apps
+        
+        return migrated and not unmigrated
+        
+    finally:
+        # Clean up
+        shutil.rmtree(temp_dir)
+        if temp_dir in sys.path:
+            sys.path.remove(temp_dir)
+
+if __name__ == '__main__':
+    print("Testing namespace package support in migration loader...")
+    print()
+    
+    success = test_namespace_package()
+    
+    print()
+    if success:
+        print("✅ Test passed! Namespace packages are now supported.")
+    else:
+        print("❌ Test failed! Namespace packages are not being handled correctly.")
+    
+    sys.exit(0 if success else 1)
\ No newline at end of file
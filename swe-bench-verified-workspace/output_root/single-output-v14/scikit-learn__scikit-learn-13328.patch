diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..b5ceb9ec0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+import numpy as np
+from sklearn.datasets import make_regression
+from sklearn.linear_model import HuberRegressor
+
+# Random data
+X, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)
+X_bool = X > 0
+X_bool_as_float = np.asarray(X_bool, dtype=float)
+
+print("Testing HuberRegressor with different input types:")
+print("X dtype:", X.dtype)
+print("X_bool dtype:", X_bool.dtype)
+print("X_bool_as_float dtype:", X_bool_as_float.dtype)
+
+# Works
+print("\n1. Testing with original float X...")
+huber = HuberRegressor().fit(X, y)
+print("Success with float X")
+
+# Should fail
+print("\n2. Testing with boolean X...")
+try:
+    huber = HuberRegressor().fit(X_bool, y)
+    print("Success with boolean X")
+except Exception as e:
+    print(f"Error with boolean X: {type(e).__name__}: {e}")
+
+# Also works
+print("\n3. Testing with converted float X...")
+huber = HuberRegressor().fit(X_bool_as_float, y)
+print("Success with converted float X")
\ No newline at end of file
diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py
index 65c686400..35164ed89 100644
--- a/sklearn/linear_model/huber.py
+++ b/sklearn/linear_model/huber.py
@@ -90,7 +90,9 @@ def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):
         grad = np.zeros(n_features + 1)
 
     # Gradient due to the squared loss.
-    X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers)
+    X_non_outliers_slice = axis0_safe_slice(X, ~outliers_mask, n_non_outliers)
+    # Convert to float to handle boolean arrays correctly
+    X_non_outliers = -X_non_outliers_slice.astype(float)
     grad[:n_features] = (
         2. / sigma * safe_sparse_dot(weighted_non_outliers, X_non_outliers))
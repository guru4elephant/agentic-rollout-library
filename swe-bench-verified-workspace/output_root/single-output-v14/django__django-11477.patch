diff --git a/debug_resolver.py b/debug_resolver.py
new file mode 100644
index 0000000000..3c0cde5a61
--- /dev/null
+++ b/debug_resolver.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand what ResolverMatch contains for optional named groups.
+"""
+
+import os
+import sys
+
+# Add the django directory to the Python path
+sys.path.insert(0, '/testbed')
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+import django
+from django.conf import settings
+from django.urls import clear_url_caches, resolve, reverse, translate_url
+from django.utils import translation
+
+# Configure minimal settings
+settings.configure(
+    USE_I18N=True,
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en', 'English'),
+        ('nl', 'Dutch'),
+    ],
+    ROOT_URLCONF='reproduce_issue_urls',
+    INSTALLED_APPS=[],
+)
+
+# Initialize Django
+django.setup()
+
+# Create a simple URL pattern with optional named group
+urlpatterns_code = '''
+from django.urls import re_path
+from django.views.generic import TemplateView
+
+view = TemplateView.as_view(template_name='dummy.html')
+
+urlpatterns = [
+    re_path(r'^test/(?P<required_param>\\w+)/(?:(?P<optional_param>\\w+)/)?$', view, name='test_optional'),
+    re_path(r'^simple/(?P<param>\\w+)/$', view, name='simple'),
+]
+'''
+
+# Write the URL patterns to a file
+with open('reproduce_issue_urls.py', 'w') as f:
+    f.write(urlpatterns_code)
+
+def debug_resolver():
+    """Debug what ResolverMatch contains for URLs with optional named groups."""
+    print("Debugging ResolverMatch for optional named groups...")
+    
+    # Clear URL caches to load our custom URL patterns
+    clear_url_caches()
+    
+    # Test URLs
+    url_with_optional = '/test/abc/def/'
+    url_without_optional = '/test/abc/'
+    
+    print(f"URL with optional param: {url_with_optional}")
+    print(f"URL without optional param: {url_without_optional}")
+    
+    # Resolve both URLs
+    try:
+        match_with_optional = resolve(url_with_optional)
+        match_without_optional = resolve(url_without_optional)
+        
+        print(f"\nMatch with optional param:")
+        print(f"  args: {match_with_optional.args}")
+        print(f"  kwargs: {match_with_optional.kwargs}")
+        print(f"  url_name: {match_with_optional.url_name}")
+        
+        print(f"\nMatch without optional param:")
+        print(f"  args: {match_without_optional.args}")
+        print(f"  kwargs: {match_without_optional.kwargs}")
+        print(f"  url_name: {match_without_optional.url_name}")
+        
+        # Test reverse with the kwargs from both matches
+        print(f"\nTesting reverse with kwargs from match with optional:")
+        reversed_with_optional = reverse(match_with_optional.url_name, kwargs=match_with_optional.kwargs)
+        print(f"  Reversed: {reversed_with_optional}")
+        
+        print(f"\nTesting reverse with kwargs from match without optional:")
+        reversed_without_optional = reverse(match_without_optional.url_name, kwargs=match_without_optional.kwargs)
+        print(f"  Reversed: {reversed_without_optional}")
+        
+    except Exception as e:
+        print(f"Error during resolution: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == '__main__':
+    debug_resolver()
\ No newline at end of file
diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..835140a97e 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -172,7 +172,9 @@ def translate_url(url, lang_code):
         to_be_reversed = "%s:%s" % (match.namespace, match.url_name) if match.namespace else match.url_name
         with override(lang_code):
             try:
-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)
+                # Filter out kwargs with None values (from optional named groups)
+                filtered_kwargs = {k: v for k, v in match.kwargs.items() if v is not None}
+                url = reverse(to_be_reversed, args=match.args, kwargs=filtered_kwargs)
             except NoReverseMatch:
                 pass
             else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6bc00a6dd6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the translate_url() issue with optional named groups.
+"""
+
+import os
+import sys
+
+# Add the django directory to the Python path
+sys.path.insert(0, '/testbed')
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+import django
+from django.conf import settings
+from django.urls import clear_url_caches, reverse, translate_url
+from django.utils import translation
+
+# Configure minimal settings
+settings.configure(
+    USE_I18N=True,
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en', 'English'),
+        ('nl', 'Dutch'),
+    ],
+    ROOT_URLCONF='reproduce_issue_urls',
+    INSTALLED_APPS=[],
+)
+
+# Initialize Django
+django.setup()
+
+# Create a simple URL pattern with optional named group
+urlpatterns_code = '''
+from django.urls import re_path
+from django.views.generic import TemplateView
+
+view = TemplateView.as_view(template_name='dummy.html')
+
+urlpatterns = [
+    re_path(r'^test/(?P<required_param>\\w+)/(?:(?P<optional_param>\\w+)/)?$', view, name='test_optional'),
+    re_path(r'^simple/(?P<param>\\w+)/$', view, name='simple'),
+]
+'''
+
+# Write the URL patterns to a file
+with open('reproduce_issue_urls.py', 'w') as f:
+    f.write(urlpatterns_code)
+
+def test_translate_url_with_optional_params():
+    """Test translate_url with optional named groups."""
+    print("Testing translate_url with optional named groups...")
+    
+    # Clear URL caches to load our custom URL patterns
+    clear_url_caches()
+    
+    # Test case 1: URL with both required and optional parameters
+    url_with_optional = '/test/abc/def/'
+    print(f"Original URL with optional param: {url_with_optional}")
+    
+    # Test case 2: URL with only required parameter (optional missing)
+    url_without_optional = '/test/abc/'
+    print(f"Original URL without optional param: {url_without_optional}")
+    
+    # Test translation to Dutch
+    with translation.override('en'):
+        try:
+            # Try to translate URLs with optional parameters
+            translated_with_optional = translate_url(url_with_optional, 'nl')
+            translated_without_optional = translate_url(url_without_optional, 'nl')
+            
+            print(f"Translated URL with optional param: {translated_with_optional}")
+            print(f"Translated URL without optional param: {translated_without_optional}")
+            
+            # Check if the translation works correctly
+            if translated_with_optional == url_with_optional:
+                print("✓ Translation with optional param works correctly")
+            else:
+                print("✗ Translation with optional param may have issues")
+                
+            if translated_without_optional == url_without_optional:
+                print("✓ Translation without optional param works correctly")
+            else:
+                print("✗ Translation without optional param may have issues")
+                
+        except Exception as e:
+            print(f"Error during translation: {e}")
+            import traceback
+            traceback.print_exc()
+
+if __name__ == '__main__':
+    test_translate_url_with_optional_params()
\ No newline at end of file
diff --git a/reproduce_issue_urls.py b/reproduce_issue_urls.py
new file mode 100644
index 0000000000..b4a4b787ac
--- /dev/null
+++ b/reproduce_issue_urls.py
@@ -0,0 +1,10 @@
+
+from django.urls import re_path
+from django.views.generic import TemplateView
+
+view = TemplateView.as_view(template_name='dummy.html')
+
+urlpatterns = [
+    re_path(r'^test/(?P<required_param>\w+)/(?:(?P<optional_param>\w+)/)?$', view, name='test_optional'),
+    re_path(r'^simple/(?P<param>\w+)/$', view, name='simple'),
+]
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..aaee7cc0b5
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix works with the existing test patterns.
+"""
+
+import os
+import sys
+
+# Add the django directory to the Python path
+sys.path.insert(0, '/testbed')
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+import django
+from django.conf import settings
+from django.urls import clear_url_caches, resolve, reverse, translate_url
+from django.utils import translation
+
+# Configure minimal settings
+settings.configure(
+    USE_I18N=True,
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en', 'English'),
+        ('nl', 'Dutch'),
+    ],
+    ROOT_URLCONF='test_patterns',
+    INSTALLED_APPS=[],
+    SECRET_KEY='test',
+)
+
+# Initialize Django
+django.setup()
+
+# Create test URL patterns that mimic the existing test patterns
+urlpatterns_code = '''
+from django.urls import re_path
+from django.utils.translation import gettext_lazy as _
+from django.views.generic import TemplateView
+
+view = TemplateView.as_view(template_name='dummy.html')
+
+urlpatterns = [
+    # Simple pattern without optional parameters
+    re_path(_(r'^users/$'), view, name='users'),
+    # Pattern with optional parameter
+    re_path(_(r'^test/(?P<required>\\w+)/(?:(?P<optional>\\w+)/)?$'), view, name='test_optional'),
+]
+'''
+
+# Write the URL patterns to a file
+with open('test_patterns.py', 'w') as f:
+    f.write(urlpatterns_code)
+
+def test_translate_url_fix():
+    """Test that translate_url works correctly with optional parameters."""
+    print("Testing translate_url fix...")
+    
+    # Clear URL caches to load our custom URL patterns
+    clear_url_caches()
+    
+    # Test cases
+    test_cases = [
+        ('/users/', 'en', '/users/'),  # Simple case
+        ('/users/', 'nl', '/users/'),   # Simple case with translation
+        ('/test/abc/def/', 'en', '/test/abc/def/'),  # With optional param
+        ('/test/abc/', 'en', '/test/abc/'),           # Without optional param
+    ]
+    
+    for url, lang, expected in test_cases:
+        with translation.override('en'):
+            result = translate_url(url, lang)
+            print(f"translate_url('{url}', '{lang}') = '{result}' (expected: '{expected}')")
+            if result == expected:
+                print("  ✓ PASS")
+            else:
+                print("  ✗ FAIL")
+                return False
+    
+    print("\nAll tests passed!")
+    return True
+
+if __name__ == '__main__':
+    success = test_translate_url_fix()
+    sys.exit(0 if success else 1)
\ No newline at end of file
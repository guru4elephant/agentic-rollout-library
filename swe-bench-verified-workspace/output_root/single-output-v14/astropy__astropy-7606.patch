diff --git a/astropy/units/core.py b/astropy/units/core.py
index e9bd986d33..0ee8cf869b 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -1710,7 +1710,10 @@ class UnrecognizedUnit(IrreducibleUnit):
         _unrecognized_operator
 
     def __eq__(self, other):
-        other = Unit(other, parse_strict='silent')
+        try:
+            other = Unit(other, parse_strict='silent')
+        except (ValueError, UnitsError, TypeError):
+            return False
         return isinstance(other, UnrecognizedUnit) and self.name == other.name
 
     def __ne__(self, other):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dfba21524b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+# Create an UnrecognizedUnit
+x = u.Unit('asdf', parse_strict='silent')
+print(f"Created UnrecognizedUnit: {x}")
+print(f"Type: {type(x)}")
+
+# This should return False but currently raises TypeError
+try:
+    result = x == None
+    print(f"x == None: {result}")
+except TypeError as e:
+    print(f"Error: {e}")
+
+# Test other comparisons that should work
+try:
+    result = x == 'asdf'
+    print(f"x == 'asdf': {result}")
+except Exception as e:
+    print(f"Error in x == 'asdf': {e}")
+
+try:
+    result = x == u.Unit('asdf', parse_strict='silent')
+    print(f"x == u.Unit('asdf'): {result}")
+except Exception as e:
+    print(f"Error in x == u.Unit('asdf'): {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..09634eb806
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+# Create an UnrecognizedUnit
+x = u.Unit('asdf', parse_strict='silent')
+print(f"Created UnrecognizedUnit: {x}")
+
+# Test various edge cases
+test_cases = [
+    None,
+    '',
+    'invalid_unit',
+    123,
+    0.0,
+    [],
+    {},
+    u.Unit('m'),
+    u.Unit('asdf', parse_strict='silent'),
+    u.Unit('different', parse_strict='silent')
+]
+
+print("\nTesting edge cases:")
+for case in test_cases:
+    try:
+        result = x == case
+        print(f"x == {case!r}: {result}")
+    except Exception as e:
+        print(f"Error in x == {case!r}: {e}")
\ No newline at end of file
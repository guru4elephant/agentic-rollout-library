diff --git a/debug_deep.py b/debug_deep.py
new file mode 100644
index 00000000..2e0cf2e7
--- /dev/null
+++ b/debug_deep.py
@@ -0,0 +1,27 @@
+import xarray as xr
+
+original = xr.Dataset({"x": [1, 2, 3], "y": ("x", list("abc")), "z": 42})
+print("Original variables:")
+for k, v in original.variables.items():
+    print(f"  {k}: dims={v.dims}, data={v.data}")
+
+# Let's manually test the to_index_variable method
+print("\nTesting to_index_variable:")
+y_var = original.variables["y"]
+print(f"Original y variable: dims={y_var.dims}, data={y_var.data}")
+y_index_var = y_var.to_index_variable()
+print(f"After to_index_variable: dims={y_index_var.dims}, data={y_index_var.data}")
+
+# Let's test the _replace method
+print("\nTesting _replace:")
+y_replaced = y_index_var._replace(dims=("y",))
+print(f"After _replace: dims={y_replaced.dims}, data={y_replaced.data}")
+
+# Let's test what happens with create_default_index_implicit
+print("\nTesting create_default_index_implicit:")
+from xarray.core.indexes import create_default_index_implicit
+index, index_vars = create_default_index_implicit(y_index_var)
+print(f"Index: {index}")
+print(f"Index variables:")
+for k, v in index_vars.items():
+    print(f"  {k}: dims={v.dims}, data={v.data}")
\ No newline at end of file
diff --git a/debug_dims.py b/debug_dims.py
new file mode 100644
index 00000000..72031151
--- /dev/null
+++ b/debug_dims.py
@@ -0,0 +1,12 @@
+import xarray as xr
+
+original = xr.Dataset({"x": [1, 2, 3], "y": ("x", list("abc")), "z": 42})
+print("Original dimensions:", original.dims)
+
+dims_dict = {"x": "y"}
+result_dims = {dims_dict.get(dim, dim) for dim in original.dims}
+print("result_dims:", result_dims)
+
+# Let's see what variables are in result_dims
+for k in original.variables:
+    print(f"Variable '{k}' in result_dims: {k in result_dims}")
\ No newline at end of file
diff --git a/debug_swap.py b/debug_swap.py
new file mode 100644
index 00000000..ff94ade5
--- /dev/null
+++ b/debug_swap.py
@@ -0,0 +1,33 @@
+import xarray as xr
+import pandas as pd
+
+# Recreate the test case with more detailed debugging
+original = xr.Dataset({"x": [1, 2, 3], "y": ("x", list("abc")), "z": 42})
+print("Original dataset:")
+print(original)
+
+# Let's manually trace through what swap_dims should do
+print("\n=== Manual trace of swap_dims logic ===")
+
+# Step 1: For each variable, calculate new dimensions
+dims_dict = {"x": "y"}
+result_dims = {"y"}  # This would be calculated from original.dims
+
+print(f"dims_dict: {dims_dict}")
+print(f"result_dims: {result_dims}")
+
+for k, v in original.variables.items():
+    dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)
+    print(f"\nVariable {k}:")
+    print(f"  Original dims: {v.dims}")
+    print(f"  New dims: {dims}")
+    print(f"  Data: {v.data}")
+    
+    if k in result_dims:
+        print(f"  -> Will become index variable")
+        var = v.to_index_variable()
+        print(f"  After to_index_variable(): dims={var.dims}, data={var.data}")
+    else:
+        print(f"  -> Will become base variable")
+        var = v.to_base_variable()
+        print(f"  After to_base_variable(): dims={var.dims}, data={var.data}")
\ No newline at end of file
diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 00000000..92bf2bab
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,27 @@
+import xarray as xr
+import pandas as pd
+
+# Recreate the test case
+original = xr.Dataset({"x": [1, 2, 3], "y": ("x", list("abc")), "z": 42})
+print("Original dataset:")
+print(original)
+print("\nOriginal variables:")
+for k, v in original.variables.items():
+    print(f"  {k}: dims={v.dims}, data={v.data}")
+
+print("\nExpected result:")
+expected = xr.Dataset({"z": 42}, {"x": ("y", [1, 2, 3]), "y": list("abc")})
+print(expected)
+print("\nExpected variables:")
+for k, v in expected.variables.items():
+    print(f"  {k}: dims={v.dims}, data={v.data}")
+
+print("\nActual result:")
+try:
+    actual = original.swap_dims({"x": "y"})
+    print(actual)
+    print("\nActual variables:")
+    for k, v in actual.variables.items():
+        print(f"  {k}: dims={v.dims}, data={v.data}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..fa740e8e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+import numpy as np
+import xarray as xr
+
+nz = 11
+ds = xr.Dataset(
+    data_vars={
+        "y": ("z", np.random.rand(nz)),
+        "lev": ("z", np.arange(nz) * 10),
+        # ^ We want this to be a dimension coordinate
+    },
+)
+print(f"ds\n{ds}")
+print(f"\nds, 'lev' -> dim coord\n{ds.swap_dims(z='lev')}")
+
+ds2 = (
+    ds.swap_dims(z="lev")
+    .rename_dims(lev="z")
+    .reset_index("lev")
+    .reset_coords()
+)
+print(f"\nds2\n{ds2}")
+# ^ This Dataset appears same as the original
+
+print(f"\nds2, 'lev' -> dim coord\n{ds2.swap_dims(z='lev')}")
+# ^ Produces a Dataset with dimension coordinate 'lev'
+print(f"\nds2 after .swap_dims() applied\n{ds2}")
+# ^ `ds2['lev']` now has dimension 'lev' although otherwise same
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 00000000..d71be44e
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,73 @@
+import numpy as np
+import xarray as xr
+
+# Test 1: Original issue reproduction
+print("=== Test 1: Original issue ===")
+nz = 11
+ds = xr.Dataset(
+    data_vars={
+        "y": ("z", np.random.rand(nz)),
+        "lev": ("z", np.arange(nz) * 10),
+    },
+)
+ds2 = (
+    ds.swap_dims(z="lev")
+    .rename_dims(lev="z")
+    .reset_index("lev")
+    .reset_coords()
+)
+
+# Check that ds2['lev'] has dimension 'z' before swap
+print(f"Before swap_dims: ds2['lev'].dims = {ds2['lev'].dims}")
+ds2_swap = ds2.swap_dims(z="lev")
+# Check that ds2['lev'] still has dimension 'z' after swap (should not be modified)
+print(f"After swap_dims: ds2['lev'].dims = {ds2['lev'].dims}")
+print(f"ds2_swap['lev'].dims = {ds2_swap['lev'].dims}")
+
+# Test 2: Multiple variables with same dimension
+print("\n=== Test 2: Multiple variables ===")
+ds_multi = xr.Dataset(
+    data_vars={
+        "temp": ("z", np.random.rand(nz)),
+        "pressure": ("z", np.random.rand(nz)),
+        "height": ("z", np.arange(nz) * 10),
+    },
+)
+
+# Store original dimensions
+orig_dims = {name: var.dims for name, var in ds_multi.data_vars.items()}
+print(f"Original dims: {orig_dims}")
+
+ds_multi_swapped = ds_multi.swap_dims(z="height")
+
+# Check that original dataset wasn't modified
+for name, var in ds_multi.data_vars.items():
+    assert var.dims == orig_dims[name], f"Variable {name} was modified!"
+    print(f"{name}: original={orig_dims[name]}, current={var.dims}")
+
+print("All original variables preserved their dimensions!")
+
+# Test 3: DataArray swap_dims
+print("\n=== Test 3: DataArray swap_dims ===")
+da = xr.DataArray(
+    np.random.rand(nz),
+    dims="z",
+    coords={"z": np.arange(nz), "height": ("z", np.arange(nz) * 10)},
+)
+
+orig_da_dims = da.dims
+orig_coord_dims = {name: coord.dims for name, coord in da.coords.items()}
+print(f"Original DA dims: {orig_da_dims}")
+print(f"Original coord dims: {orig_coord_dims}")
+
+da_swapped = da.swap_dims(z="height")
+
+# Check that original DataArray wasn't modified
+assert da.dims == orig_da_dims, "DataArray dimensions were modified!"
+for name, coord in da.coords.items():
+    assert coord.dims == orig_coord_dims[name], f"Coord {name} was modified!"
+    print(f"Coord {name}: original={orig_coord_dims[name]}, current={coord.dims}")
+
+print("All original DataArray and coords preserved their dimensions!")
+
+print("\n=== All tests passed! ===")
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index c775d05c..09b81036 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3773,18 +3773,24 @@ class Dataset(
             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)
             if k in result_dims:
                 var = v.to_index_variable()
-                var.dims = dims
                 if k in self._indexes:
                     indexes[k] = self._indexes[k]
+                    var = var._replace(dims=dims)
                     variables[k] = var
                 else:
-                    index, index_vars = create_default_index_implicit(var)
+                    # For variables that need default index creation, use original dims
+                    # for index creation, then update dimensions afterwards
+                    temp_var = var
+                    index, index_vars = create_default_index_implicit(temp_var)
+                    # Now update the dimensions of the index variables
+                    for name, index_var in index_vars.items():
+                        index_vars[name] = index_var._replace(dims=tuple(dims_dict.get(dim, dim) for dim in index_var.dims))
                     indexes.update({name: index for name in index_vars})
                     variables.update(index_vars)
                     coord_names.update(index_vars)
             else:
                 var = v.to_base_variable()
-                var.dims = dims
+                var = var._replace(dims=dims)
                 variables[k] = var
 
         return self._replace_with_new_dims(variables, coord_names, indexes=indexes)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..b19d58fe
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+import xarray as xr
+
+# Reproduce the issue described in the GitHub issue
+print("Testing xr.where with scalar as second argument...")
+
+try:
+    result = xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)
+    print("SUCCESS: No error occurred")
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+    print("This reproduces the issue described in the GitHub issue")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 00000000..92d3a763
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,39 @@
+import xarray as xr
+from xarray.core.computation import _all_of_type, _as_variables_or_variable
+from xarray.core.variable import Variable
+
+def test_scenario(description, args):
+    print(f"\n=== {description} ===")
+    print(f"Args: {[type(arg).__name__ for arg in args]}")
+    
+    # Convert args using _as_variables_or_variable
+    converted_args = [_as_variables_or_variable(arg) for arg in args]
+    print(f"Converted args types: {[type(arg).__name__ if not isinstance(arg, dict) else 'dict' for arg in converted_args]}")
+    
+    # Get Variable objects
+    objs = _all_of_type(converted_args, Variable)
+    print(f"Variable objects: {objs}")
+    print(f"Number of Variable objects: {len(objs)}")
+    
+    # Get attributes
+    attrs_list = [obj.attrs for obj in objs]
+    print(f"Attributes list: {attrs_list}")
+    
+    # Test the problematic lambda
+    try:
+        result = (lambda attrs, context: attrs[1])(attrs_list, {})
+        print(f"lambda attrs, context: attrs[1] = {result}")
+    except IndexError as e:
+        print(f"IndexError in lambda: {e}")
+
+# Test case 1: All scalars (the failing case)
+test_scenario("All scalars", [xr.DataArray([1, 2, 3]) > 0, 1, 0])
+
+# Test case 2: Some DataArrays with attributes
+da_with_attrs = xr.DataArray([1, 2, 3], attrs={"test": "value"})
+test_scenario("DataArray with attrs", [xr.DataArray([1, 2, 3]) > 0, da_with_attrs, 0])
+
+# Test case 3: Multiple DataArrays
+da1 = xr.DataArray([1, 2, 3], attrs={"first": "1"})
+da2 = xr.DataArray([4, 5, 6], attrs={"second": "2"})
+test_scenario("Multiple DataArrays", [xr.DataArray([1, 2, 3]) > 0, da1, da2])
\ No newline at end of file
diff --git a/test_scalar_attrs.py b/test_scalar_attrs.py
new file mode 100644
index 00000000..25c95d00
--- /dev/null
+++ b/test_scalar_attrs.py
@@ -0,0 +1,53 @@
+import xarray as xr
+
+# Test what happens when we try to get attributes from a scalar
+scalar = 1
+try:
+    attrs = scalar.attrs
+    print(f"Scalar has attrs: {attrs}")
+except AttributeError as e:
+    print(f"Scalar has no attrs: {e}")
+
+# Test what happens when we try to get attributes from a DataArray
+da = xr.DataArray([1, 2, 3])
+print(f"DataArray has attrs: {da.attrs}")
+
+# Test what _all_of_type returns for mixed arguments
+from xarray.core.computation import _all_of_type
+from xarray.core.variable import Variable
+
+args = [xr.DataArray([1, 2, 3]) > 0, 1, 0]
+objs = _all_of_type(args, Variable)
+print(f"Objects of type Variable: {objs}")
+print(f"Number of Variable objects: {len(objs)}")
+
+# Test with some Variable objects
+args2 = [xr.DataArray([1, 2, 3]) > 0, xr.DataArray([1, 2, 3]), 0]
+objs2 = _all_of_type(args2, Variable)
+print(f"Objects of type Variable (with DataArray): {objs2}")
+print(f"Number of Variable objects: {len(objs2)}")
+
+# Check what type DataArray objects are
+da = xr.DataArray([1, 2, 3])
+print(f"DataArray type: {type(da)}")
+print(f"Is DataArray a Variable? {isinstance(da, Variable)}")
+
+# Check what type the condition is
+cond = xr.DataArray([1, 2, 3]) > 0
+print(f"Condition type: {type(cond)}")
+print(f"Is condition a Variable? {isinstance(cond, Variable)}")
+
+# Test what happens when we try to access attrs[1] on different lists
+attrs_list = [{}]  # Only one element
+try:
+    result = attrs_list[1]
+    print(f"attrs_list[1] = {result}")
+except IndexError as e:
+    print(f"IndexError when accessing attrs_list[1]: {e}")
+
+attrs_list2 = [{}, {}]  # Two elements
+try:
+    result = attrs_list2[1]
+    print(f"attrs_list2[1] = {result}")
+except IndexError as e:
+    print(f"IndexError when accessing attrs_list2[1]: {e}")
\ No newline at end of file
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 7676d8e5..885c1b51 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1829,7 +1829,7 @@ def where(cond, x, y, keep_attrs=None):
     if keep_attrs is True:
         # keep the attributes of x, the second parameter, by default to
         # be consistent with the `where` method of `DataArray` and `Dataset`
-        keep_attrs = lambda attrs, context: attrs[1]
+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else {}
 
     # alignment for three arguments is complicated, so don't support it yet
     return apply_ufunc(
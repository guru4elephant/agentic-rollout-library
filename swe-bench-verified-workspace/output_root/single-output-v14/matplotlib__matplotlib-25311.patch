diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index ff6abdb958..f88b05c474 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -1208,6 +1208,17 @@ class Legend(Artist):
         """Return ``True`` if the legend is draggable, ``False`` otherwise."""
         return self._draggable is not None
 
+    def __setstate__(self, state):
+        """Restore state after unpickling and reconnect draggable functionality."""
+        self.__dict__.update(state)
+        # If legend was draggable, reconnect to canvas
+        if self._draggable is not None and hasattr(self, 'figure') and self.figure is not None:
+            try:
+                self._draggable._reconnect(self.figure.canvas)
+            except AttributeError:
+                # Canvas might not be available yet, this is OK
+                pass
+
 
 # Helper functions to parse legend arguments for both `figure.legend` and
 # `axes.legend`:
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 1dee8a23d9..2849bccaa5 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1580,6 +1580,36 @@ class DraggableBase:
     def finalize_offset(self):
         pass
 
+    def __getstate__(self):
+        """Return state for pickling, excluding non-pickleable attributes."""
+        state = self.__dict__.copy()
+        # Remove non-pickleable attributes
+        state.pop('canvas', None)
+        state.pop('cids', None)
+        state.pop('_c1', None)
+        state.pop('background', None)
+        return state
+
+    def __setstate__(self, state):
+        """Restore state after unpickling."""
+        self.__dict__.update(state)
+        # Reinitialize non-pickleable attributes
+        self.canvas = None
+        self.cids = []
+        self._c1 = None
+        self.background = None
+        
+    def _reconnect(self, canvas):
+        """Reconnect to canvas after unpickling."""
+        if canvas is not None:
+            self.canvas = canvas
+            self.cids = [
+                self.canvas.callbacks._connect_picklable(
+                    'pick_event', self.on_pick),
+                self.canvas.callbacks._connect_picklable(
+                    'button_release_event', self.on_release),
+            ]
+
 
 class DraggableOffsetBox(DraggableBase):
     def __init__(self, ref_artist, offsetbox, use_blit=False):
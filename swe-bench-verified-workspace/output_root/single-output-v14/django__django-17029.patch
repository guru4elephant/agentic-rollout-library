diff --git a/django/apps/registry.py b/django/apps/registry.py
index 0683f3ad3c..481dd1fc86 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -376,6 +376,7 @@ class Apps:
         # Call expire cache on each model. This will purge
         # the relation tree and the fields cache.
         self.get_models.cache_clear()
+        self.get_swappable_settings_name.cache_clear()
         if self.ready:
             # Circumvent self.get_models() to prevent that the cache is refilled.
             # This particularly prevents that an empty value is cached while cloning.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..553a2963e3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where Apps.clear_cache() doesn't clear
+get_swappable_settings_name cache.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_get_swappable_settings_name_cache():
+    """Test that get_swappable_settings_name cache is not cleared by clear_cache()"""
+    
+    print("Testing get_swappable_settings_name cache behavior...")
+    
+    # First call - should populate cache
+    result1 = apps.get_swappable_settings_name('auth.User')
+    print(f"First call result: {result1}")
+    
+    # Check cache info before clearing
+    cache_info = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info before clear_cache(): {cache_info}")
+    
+    # Clear cache using clear_cache() method
+    apps.clear_cache()
+    
+    # Check cache info after clearing
+    cache_info_after = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after clear_cache(): {cache_info_after}")
+    
+    # The cache should be empty if clear_cache() worked properly
+    if cache_info_after.hits == 0 and cache_info_after.misses == 0 and cache_info_after.currsize == 0:
+        print("✓ SUCCESS: get_swappable_settings_name cache was properly cleared")
+        return True
+    else:
+        print("✗ FAILURE: get_swappable_settings_name cache was NOT cleared")
+        return False
+
+if __name__ == '__main__':
+    success = test_get_swappable_settings_name_cache()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_apps_functionality.py b/test_apps_functionality.py
new file mode 100644
index 0000000000..8e382114f9
--- /dev/null
+++ b/test_apps_functionality.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+Test to ensure Apps functionality works correctly after our changes.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_apps_basic_functionality():
+    """Test basic Apps functionality to ensure nothing is broken"""
+    
+    print("Testing basic Apps functionality...")
+    
+    # Test 1: Basic app config access
+    print("\n1. Testing app config access:")
+    auth_config = apps.get_app_config('auth')
+    print(f"   Auth app config: {auth_config.name}")
+    assert auth_config.name == 'django.contrib.auth'
+    
+    # Test 2: Model retrieval
+    print("\n2. Testing model retrieval:")
+    user_model = apps.get_model('auth', 'User')
+    print(f"   User model: {user_model.__name__}")
+    assert user_model.__name__ == 'User'
+    
+    # Test 3: Get models list
+    print("\n3. Testing get_models():")
+    models = apps.get_models()
+    print(f"   Number of models: {len(models)}")
+    assert len(models) > 0
+    
+    # Test 4: Get swappable settings
+    print("\n4. Testing get_swappable_settings_name():")
+    swappable = apps.get_swappable_settings_name('auth.User')
+    print(f"   Swappable setting for auth.User: {swappable}")
+    assert swappable == 'AUTH_USER_MODEL'
+    
+    # Test 5: Clear cache and verify functionality still works
+    print("\n5. Testing clear_cache():")
+    apps.clear_cache()
+    
+    # Verify we can still access everything after cache clear
+    auth_config_after = apps.get_app_config('auth')
+    user_model_after = apps.get_model('auth', 'User')
+    models_after = apps.get_models()
+    swappable_after = apps.get_swappable_settings_name('auth.User')
+    
+    assert auth_config_after.name == 'django.contrib.auth'
+    assert user_model_after.__name__ == 'User'
+    assert len(models_after) > 0
+    assert swappable_after == 'AUTH_USER_MODEL'
+    
+    print("\n✓ All basic functionality tests passed!")
+    return True
+
+if __name__ == '__main__':
+    success = test_apps_basic_functionality()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..4db46dd493
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to ensure the fix handles edge cases properly.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_comprehensive_cache_clearing():
+    """Test comprehensive cache clearing behavior"""
+    
+    print("Running comprehensive cache clearing tests...")
+    
+    # Test 1: Multiple calls to get_swappable_settings_name
+    print("\n1. Testing multiple calls to get_swappable_settings_name:")
+    result1 = apps.get_swappable_settings_name('auth.User')
+    result2 = apps.get_swappable_settings_name('auth.User')  # Should hit cache
+    result3 = apps.get_swappable_settings_name('auth.Permission')  # New call
+    
+    cache_info = apps.get_swappable_settings_name.cache_info()
+    print(f"   Results: {result1}, {result2}, {result3}")
+    print(f"   Cache info: {cache_info}")
+    assert cache_info.hits == 1, f"Expected 1 cache hit, got {cache_info.hits}"
+    assert cache_info.misses == 2, f"Expected 2 cache misses, got {cache_info.misses}"
+    assert cache_info.currsize == 2, f"Expected cache size 2, got {cache_info.currsize}"
+    
+    # Test 2: Clear cache and verify it's empty
+    print("\n2. Testing clear_cache():")
+    apps.clear_cache()
+    cache_info_after = apps.get_swappable_settings_name.cache_info()
+    print(f"   Cache info after clear_cache(): {cache_info_after}")
+    assert cache_info_after.currsize == 0, f"Expected cache size 0 after clear, got {cache_info_after.currsize}"
+    
+    # Test 3: Verify cache works normally after clearing
+    print("\n3. Testing cache behavior after clearing:")
+    result4 = apps.get_swappable_settings_name('auth.User')  # Should miss cache
+    result5 = apps.get_swappable_settings_name('auth.User')  # Should hit cache
+    
+    cache_info_final = apps.get_swappable_settings_name.cache_info()
+    print(f"   Results: {result4}, {result5}")
+    print(f"   Final cache info: {cache_info_final}")
+    assert cache_info_final.hits == 1, f"Expected 1 cache hit after clear, got {cache_info_final.hits}"
+    assert cache_info_final.misses == 1, f"Expected 1 cache miss after clear, got {cache_info_final.misses}"
+    assert cache_info_final.currsize == 1, f"Expected cache size 1 after clear, got {cache_info_final.currsize}"
+    
+    # Test 4: Verify get_models cache is also cleared
+    print("\n4. Testing get_models cache clearing:")
+    models1 = apps.get_models()
+    models2 = apps.get_models()  # Should hit cache
+    
+    models_cache_info = apps.get_models.cache_info()
+    print(f"   get_models cache info before clear: {models_cache_info}")
+    
+    apps.clear_cache()
+    models_cache_info_after = apps.get_models.cache_info()
+    print(f"   get_models cache info after clear: {models_cache_info_after}")
+    assert models_cache_info_after.currsize == 0, f"Expected get_models cache size 0 after clear, got {models_cache_info_after.currsize}"
+    
+    print("\n✓ All tests passed! The fix handles edge cases properly.")
+    return True
+
+if __name__ == '__main__':
+    success = test_comprehensive_cache_clearing()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..a9044fbf97
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+"""
+Test that specifically demonstrates the GitHub issue is resolved.
+This test simulates the scenario described in the issue where
+django-stubs uses apps.clear_cache() between mypy runs.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_github_issue_scenario():
+    """Test the specific scenario described in the GitHub issue"""
+    
+    print("Testing GitHub issue scenario...")
+    print("Simulating consecutive mypy runs with apps.clear_cache() between them")
+    
+    # First mypy run
+    print("\n--- First mypy run ---")
+    result1 = apps.get_swappable_settings_name('auth.User')
+    print(f"First call result: {result1}")
+    
+    cache_info = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after first run: {cache_info}")
+    
+    # Simulate clearing cache between runs (as django-stubs does)
+    print("\n--- Clearing cache between runs ---")
+    apps.clear_cache()
+    
+    cache_info_after_clear = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after clear_cache(): {cache_info_after_clear}")
+    
+    # Second mypy run - should start with fresh cache
+    print("\n--- Second mypy run ---")
+    result2 = apps.get_swappable_settings_name('auth.User')
+    print(f"Second call result: {result2}")
+    
+    cache_info_second_run = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after second run: {cache_info_second_run}")
+    
+    # Verify the cache was properly cleared and rebuilt
+    if (cache_info_after_clear.currsize == 0 and 
+        cache_info_second_run.misses == 1 and 
+        cache_info_second_run.currsize == 1):
+        print("\n✓ SUCCESS: The GitHub issue is RESOLVED!")
+        print("  - get_swappable_settings_name cache is properly cleared by clear_cache()")
+        print("  - Consecutive mypy runs will work correctly with fresh cache state")
+        return True
+    else:
+        print("\n✗ FAILURE: The GitHub issue is NOT resolved")
+        return False
+
+if __name__ == '__main__':
+    success = test_github_issue_scenario()
+    sys.exit(0 if success else 1)
\ No newline at end of file
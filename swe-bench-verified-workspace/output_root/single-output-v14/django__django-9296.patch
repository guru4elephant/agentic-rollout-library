diff --git a/django/core/paginator.py b/django/core/paginator.py
index 1f92da5d4f..a6ef43110c 100644
--- a/django/core/paginator.py
+++ b/django/core/paginator.py
@@ -124,6 +124,13 @@ class Paginator:
                 stacklevel=3
             )
 
+    def __iter__(self):
+        """
+        Iterate through all pages in the paginator.
+        """
+        for page_num in self.page_range:
+            yield self.page(page_num)
+
 
 class Page(collections.abc.Sequence):
 
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..ac5bfd1267
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,130 @@
+#!/usr/bin/env python3
+from django.core.paginator import Paginator
+
+def test_original_functionality():
+    """Test that original functionality still works"""
+    print("Testing original functionality...")
+    
+    objects = list(range(1, 21))
+    paginator = Paginator(objects, 5)
+    
+    # Test original page_range functionality
+    print(f"Page range: {list(paginator.page_range)}")
+    assert list(paginator.page_range) == [1, 2, 3, 4]
+    
+    # Test page() method
+    page1 = paginator.page(1)
+    print(f"Page 1: {list(page1)}")
+    assert list(page1) == [1, 2, 3, 4, 5]
+    
+    print("âœ“ Original functionality works correctly")
+
+def test_new_iter_functionality():
+    """Test the new __iter__ functionality"""
+    print("\nTesting new __iter__ functionality...")
+    
+    objects = list(range(1, 21))
+    paginator = Paginator(objects, 5)
+    
+    # Test that we can iterate directly over paginator
+    pages = list(paginator)
+    print(f"Pages from iteration: {len(pages)}")
+    assert len(pages) == 4
+    
+    # Test each page content
+    for i, page in enumerate(pages, 1):
+        print(f"Page {i}: {list(page)}")
+        if i == 1:
+            assert list(page) == [1, 2, 3, 4, 5]
+        elif i == 2:
+            assert list(page) == [6, 7, 8, 9, 10]
+        elif i == 3:
+            assert list(page) == [11, 12, 13, 14, 15]
+        elif i == 4:
+            assert list(page) == [16, 17, 18, 19, 20]
+    
+    print("âœ“ New __iter__ functionality works correctly")
+
+def test_consistency():
+    """Test that both methods produce consistent results"""
+    print("\nTesting consistency between old and new methods...")
+    
+    objects = list(range(1, 21))
+    paginator = Paginator(objects, 5)
+    
+    # Get pages using old method
+    old_pages = []
+    for page_num in paginator.page_range:
+        old_pages.append(paginator.page(page_num))
+    
+    # Get pages using new method
+    new_pages = list(paginator)
+    
+    # Both should produce identical results
+    assert len(old_pages) == len(new_pages)
+    
+    for old_page, new_page in zip(old_pages, new_pages):
+        assert list(old_page) == list(new_page)
+        assert old_page.number == new_page.number
+    
+    print("âœ“ Both methods produce consistent results")
+
+def test_edge_cases():
+    """Test edge cases"""
+    print("\nTesting edge cases...")
+    
+    # Empty paginator
+    empty_paginator = Paginator([], 5)
+    empty_pages = list(empty_paginator)
+    assert len(empty_pages) == 1
+    assert list(empty_pages[0]) == []
+    print("âœ“ Empty paginator works")
+    
+    # Single page
+    single_paginator = Paginator([1, 2, 3], 5)
+    single_pages = list(single_paginator)
+    assert len(single_pages) == 1
+    assert list(single_pages[0]) == [1, 2, 3]
+    print("âœ“ Single page paginator works")
+    
+    # Large paginator
+    large_objects = list(range(1, 101))
+    large_paginator = Paginator(large_objects, 10)
+    large_pages = list(large_paginator)
+    assert len(large_pages) == 10
+    assert list(large_pages[0]) == list(range(1, 11))
+    assert list(large_pages[9]) == list(range(91, 101))
+    print("âœ“ Large paginator works")
+
+def test_iteration_methods():
+    """Test different iteration methods"""
+    print("\nTesting different iteration methods...")
+    
+    objects = list(range(1, 11))
+    paginator = Paginator(objects, 3)
+    
+    # Method 1: Using iter() function
+    iterator = iter(paginator)
+    first_page = next(iterator)
+    assert list(first_page) == [1, 2, 3]
+    print("âœ“ iter() function works")
+    
+    # Method 2: Using for loop directly
+    page_count = 0
+    for page in paginator:
+        page_count += 1
+    assert page_count == 4  # 10 items, 3 per page = 4 pages
+    print("âœ“ Direct for loop works")
+    
+    # Method 3: Using list comprehension
+    pages = [page for page in paginator]
+    assert len(pages) == 4
+    print("âœ“ List comprehension works")
+
+if __name__ == '__main__':
+    test_original_functionality()
+    test_new_iter_functionality()
+    test_consistency()
+    test_edge_cases()
+    test_iteration_methods()
+    print("\nðŸŽ‰ All tests passed! The __iter__ implementation is working correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..551ca24342
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+from django.core.paginator import Paginator
+
+# Create a simple paginator for testing
+objects = list(range(1, 21))  # 20 objects
+paginator = Paginator(objects, 5)  # 5 items per page
+
+print("Testing current paginator functionality:")
+print(f"Number of pages: {paginator.num_pages}")
+print(f"Page range: {list(paginator.page_range)}")
+
+# Current way to iterate through pages (using page_range)
+print("\nCurrent iteration method (using page_range):")
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    print(f"Page {page_num}: {list(page)}")
+
+# Test if __iter__ method exists (should fail currently)
+print("\nTesting if __iter__ method exists:")
+try:
+    iter(paginator)
+    print("__iter__ method exists!")
+except TypeError as e:
+    print(f"Error: {e}")
+    print("__iter__ method does not exist yet")
+
+# Test what should work after implementing __iter__
+print("\nExpected behavior after implementing __iter__:")
+print("Should be able to do: for page in paginator:")
\ No newline at end of file
diff --git a/run_paginator_tests.py b/run_paginator_tests.py
new file mode 100644
index 0000000000..692895a2f8
--- /dev/null
+++ b/run_paginator_tests.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test-key-for-paginator-tests',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Now run the paginator tests
+from django.test.utils import get_runner
+
+TestRunner = get_runner(settings)
+test_runner = TestRunner(verbosity=2)
+failures = test_runner.run_tests(['django.core.tests.test_paginator'])
+
+print(f'Tests completed. Failures: {failures}')
\ No newline at end of file
diff --git a/test_iter_functionality.py b/test_iter_functionality.py
new file mode 100644
index 0000000000..aee76c4ffb
--- /dev/null
+++ b/test_iter_functionality.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+from django.core.paginator import Paginator
+
+# Create a simple paginator for testing
+objects = list(range(1, 21))  # 20 objects
+paginator = Paginator(objects, 5)  # 5 items per page
+
+print("Testing new __iter__ functionality:")
+print(f"Number of pages: {paginator.num_pages}")
+print(f"Page range: {list(paginator.page_range)}")
+
+# Test the new __iter__ method
+print("\nTesting __iter__ method:")
+for page in paginator:
+    print(f"Page {page.number}: {list(page)}")
+
+# Compare with the old method to ensure they produce the same results
+print("\nComparing with old method:")
+old_pages = []
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    old_pages.append(page)
+    print(f"Page {page_num}: {list(page)}")
+
+# Test that both methods produce identical results
+new_pages = list(paginator)
+print(f"\nConsistency check: {len(old_pages)} == {len(new_pages)} pages")
+for i, (old_page, new_page) in enumerate(zip(old_pages, new_pages), 1):
+    print(f"Page {i}: old={list(old_page)}, new={list(new_page)}, match={list(old_page) == list(new_page)}")
+
+# Test edge cases
+print("\nTesting edge cases:")
+
+# Empty paginator
+empty_paginator = Paginator([], 5)
+print(f"Empty paginator pages: {list(empty_paginator.page_range)}")
+print(f"Empty paginator iteration: {list(empty_paginator)}")
+
+# Single page paginator
+single_paginator = Paginator([1, 2, 3], 5)
+print(f"Single page paginator pages: {list(single_paginator.page_range)}")
+for page in single_paginator:
+    print(f"Single page: {list(page)}")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/test_iter_implementation.py b/test_iter_implementation.py
new file mode 100644
index 0000000000..c80239e3e2
--- /dev/null
+++ b/test_iter_implementation.py
@@ -0,0 +1,117 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test-key-for-paginator-tests',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
+import unittest
+
+class PaginatorIterTest(unittest.TestCase):
+    
+    def test_iter_method_exists(self):
+        """Test that __iter__ method exists and works"""
+        paginator = Paginator([1, 2, 3, 4, 5], 2)
+        
+        # Test that we can iterate directly over paginator
+        pages = list(paginator)
+        self.assertEqual(len(pages), 3)  # 5 items, 2 per page = 3 pages
+        
+        # Test that each page has correct content
+        self.assertEqual(list(pages[0]), [1, 2])
+        self.assertEqual(list(pages[1]), [3, 4])
+        self.assertEqual(list(pages[2]), [5])
+        
+        # Test that page numbers are correct
+        self.assertEqual(pages[0].number, 1)
+        self.assertEqual(pages[1].number, 2)
+        self.assertEqual(pages[2].number, 3)
+    
+    def test_iter_vs_page_range_consistency(self):
+        """Test that iterating over paginator produces same results as using page_range"""
+        objects = list(range(1, 21))  # 20 objects
+        paginator = Paginator(objects, 5)  # 5 items per page
+        
+        # Get pages using old method
+        old_pages = []
+        for page_num in paginator.page_range:
+            old_pages.append(paginator.page(page_num))
+        
+        # Get pages using new __iter__ method
+        new_pages = list(paginator)
+        
+        # Both should produce identical results
+        self.assertEqual(len(old_pages), len(new_pages))
+        
+        for old_page, new_page in zip(old_pages, new_pages):
+            self.assertEqual(list(old_page), list(new_page))
+            self.assertEqual(old_page.number, new_page.number)
+    
+    def test_empty_paginator(self):
+        """Test iteration with empty paginator"""
+        paginator = Paginator([], 5)
+        pages = list(paginator)
+        
+        # Should have one empty page
+        self.assertEqual(len(pages), 1)
+        self.assertEqual(list(pages[0]), [])
+        self.assertEqual(pages[0].number, 1)
+    
+    def test_single_page(self):
+        """Test iteration with single page"""
+        paginator = Paginator([1, 2, 3], 5)
+        pages = list(paginator)
+        
+        self.assertEqual(len(pages), 1)
+        self.assertEqual(list(pages[0]), [1, 2, 3])
+        self.assertEqual(pages[0].number, 1)
+    
+    def test_large_paginator(self):
+        """Test iteration with larger dataset"""
+        objects = list(range(1, 101))  # 100 objects
+        paginator = Paginator(objects, 10)  # 10 items per page
+        
+        pages = list(paginator)
+        self.assertEqual(len(pages), 10)  # 10 pages
+        
+        # Check first page
+        self.assertEqual(list(pages[0]), list(range(1, 11)))
+        self.assertEqual(pages[0].number, 1)
+        
+        # Check last page
+        self.assertEqual(list(pages[9]), list(range(91, 101)))
+        self.assertEqual(pages[9].number, 10)
+    
+    def test_is_iterator(self):
+        """Test that paginator is now iterable"""
+        paginator = Paginator([1, 2, 3, 4], 2)
+        
+        # Should be able to use iter() function
+        iterator = iter(paginator)
+        first_page = next(iterator)
+        self.assertEqual(list(first_page), [1, 2])
+        self.assertEqual(first_page.number, 1)
+        
+        # Should be able to use in for loops
+        page_count = 0
+        for page in paginator:
+            page_count += 1
+            self.assertTrue(hasattr(page, 'number'))
+            self.assertTrue(hasattr(page, 'object_list'))
+        
+        self.assertEqual(page_count, 2)  # 4 items, 2 per page = 2 pages
+
+if __name__ == '__main__':
+    unittest.main(verbosity=2)
\ No newline at end of file
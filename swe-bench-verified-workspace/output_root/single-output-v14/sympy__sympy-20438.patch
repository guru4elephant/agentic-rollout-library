diff --git a/debug_equality.py b/debug_equality.py
new file mode 100644
index 0000000000..03ede2692f
--- /dev/null
+++ b/debug_equality.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, ProductSet, Eq
+
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+print("b =", b)
+print("c =", c)
+print()
+
+# Let's see what Eq(b, c) looks like
+eq = Eq(b, c)
+print("Eq(b, c) =", eq)
+print("Type:", type(eq))
+
+# Let's see what happens during simplify
+try:
+    result = eq.simplify()
+    print("Eq(b, c).simplify() =", result)
+except Exception as e:
+    print("Error:", type(e).__name__, "-", e)
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/debug_intersection.py b/debug_intersection.py
new file mode 100644
index 0000000000..89e286ef2d
--- /dev/null
+++ b/debug_intersection.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, ProductSet, Eq
+
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+print("b =", b)
+print("c =", c)
+print()
+
+intersection = b.intersection(c)
+print("b.intersection(c) =", intersection)
+print("Type:", type(intersection))
+print("intersection == b:", intersection == b)
+print()
+
+# Let's see what happens in the fallback case
+if intersection == b:
+    print("Fallback would return True")
+else:
+    print("Fallback would return False")
\ No newline at end of file
diff --git a/debug_is_subset.py b/debug_is_subset.py
new file mode 100644
index 0000000000..eb7831a081
--- /dev/null
+++ b/debug_is_subset.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, ProductSet, Eq
+
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+print("b =", b)
+print("c =", c)
+print()
+
+print("b.is_subset(c):", b.is_subset(c))
+print("c.is_subset(b):", c.is_subset(b))
+print()
+
+# Let's debug the _eval_is_subset methods
+print("b._eval_is_subset(c):", b._eval_is_subset(c))
+print("c._eval_is_superset(b):", c._eval_is_superset(b))
+print()
+
+# Let's also check what the multiple dispatch returns
+from sympy.sets.handlers.issubset import is_subset_sets
+print("is_subset_sets(b, c):", is_subset_sets(b, c))
+print("is_subset_sets(c, b):", is_subset_sets(c, b))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..06dee9d90c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, ProductSet, Eq
+
+# Reproduce the issue described in the GitHub issue
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+print("a =", a)
+print("b = ProductSet(a, a) =", b)
+print("c =", c)
+print()
+
+print("b.intersection(c) == c.intersection(b):", b.intersection(c) == c.intersection(b))
+print("b.is_subset(c):", b.is_subset(c))
+print("c.is_subset(b):", c.is_subset(b))
+print()
+
+try:
+    result = Eq(b, c).simplify()
+    print("Eq(b, c).simplify() =", result)
+except Exception as e:
+    print("Error in Eq(b, c).simplify():", type(e).__name__, "-", e)
+print()
+
+print("b.rewrite(FiniteSet) =", b.rewrite(FiniteSet))
\ No newline at end of file
diff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py
index fdca06025a..166038336c 100644
--- a/sympy/sets/handlers/issubset.py
+++ b/sympy/sets/handlers/issubset.py
@@ -1,7 +1,7 @@
 from sympy import S, Symbol
 from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or
 from sympy.core.relational import Eq
-from sympy.sets.sets import FiniteSet, Interval, Set, Union
+from sympy.sets.sets import FiniteSet, Interval, Set, Union, ProductSet
 from sympy.sets.fancysets import Complexes, Reals, Range, Rationals
 from sympy.multipledispatch import dispatch
 
@@ -133,3 +133,24 @@ def is_subset_sets(a, b): # noqa:F811
 @dispatch(Rationals, Range)  # type: ignore # noqa:F811
 def is_subset_sets(a, b): # noqa:F811
     return False
+
+@dispatch(ProductSet, FiniteSet)  # type: ignore # noqa:F811
+def is_subset_sets(a_productset, b_finiteset): # noqa:F811
+    # A ProductSet is a subset of a FiniteSet if and only if
+    # all elements of the ProductSet are contained in the FiniteSet
+    # Since ProductSet is iterable when all its sets are iterable,
+    # we can check each element
+    
+    # If the ProductSet is not iterable, we can't determine the result
+    if not a_productset.is_iterable:
+        return None
+    
+    # Check if all elements of the ProductSet are in the FiniteSet
+    try:
+        for element in a_productset:
+            if element not in b_finiteset:
+                return False
+        return True
+    except (TypeError, ValueError):
+        # If there's an issue iterating (e.g., symbolic elements), return None
+        return None
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..b24dd84a9b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, ProductSet
+
+# Test 1: ProductSet that is a subset of FiniteSet
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+print("Test 1 - b.is_subset(c):", b.is_subset(c))  # Should be True
+
+# Test 2: ProductSet that is NOT a subset of FiniteSet
+d = FiniteSet((1, 1), (1, 2))  # Missing (2, 1) and (2, 2)
+print("Test 2 - b.is_subset(d):", b.is_subset(d))  # Should be False
+
+# Test 3: Empty ProductSet
+empty_set = FiniteSet()
+empty_product = ProductSet(empty_set, empty_set)
+print("Test 3 - empty_product.is_subset(c):", empty_product.is_subset(c))  # Should be True
+
+# Test 4: Single element ProductSet
+single = FiniteSet(1)
+single_product = ProductSet(single, single)
+e = FiniteSet((1, 1))
+print("Test 4 - single_product.is_subset(e):", single_product.is_subset(e))  # Should be True
+
+# Test 5: Non-iterable ProductSet (symbolic)
+from sympy import Symbol
+x = Symbol('x')
+symbolic_set = FiniteSet(x)
+symbolic_product = ProductSet(symbolic_set, symbolic_set)
+f = FiniteSet((x, x))
+print("Test 5 - symbolic_product.is_subset(f):", symbolic_product.is_subset(f))  # Should be None (can't determine)
\ No newline at end of file
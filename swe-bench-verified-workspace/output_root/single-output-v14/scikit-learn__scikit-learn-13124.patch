diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..34fd35b1c
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,62 @@
+import numpy as np
+from sklearn.model_selection import StratifiedKFold
+
+# Test 1: Simple case with different random states
+print("=== Test 1: Simple case ===")
+X = np.array([0, 1, 2, 3, 4, 5])
+y = np.array([0, 0, 0, 1, 1, 1])
+
+print("shuffle=False:")
+skf = StratifiedKFold(n_splits=2, shuffle=False, random_state=42)
+for i, (train, test) in enumerate(skf.split(X, y)):
+    print(f"  Fold {i}: Train={train}, Test={test}")
+
+print("shuffle=True, random_state=42:")
+skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=42)
+for i, (train, test) in enumerate(skf.split(X, y)):
+    print(f"  Fold {i}: Train={train}, Test={test}")
+
+print("shuffle=True, random_state=43:")
+skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=43)
+for i, (train, test) in enumerate(skf.split(X, y)):
+    print(f"  Fold {i}: Train={train}, Test={test}")
+
+# Test 2: Original issue reproduction
+print("\n=== Test 2: Original issue reproduction ===")
+samples_per_class = 10
+X = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)
+y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)
+
+print("shuffle=False:")
+skf = StratifiedKFold(n_splits=10, shuffle=False, random_state=1)
+folds_no_shuffle = []
+for fold_n, (train_idx, test_idx) in enumerate(skf.split(X, y)):
+    folds_no_shuffle.append((train_idx, test_idx))
+    if fold_n < 3:  # Show only first 3 folds
+        print(f"  Fold {fold_n}: Train={train_idx}, Test={test_idx}")
+
+print("shuffle=True, random_state=1:")
+skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)
+folds_shuffle_1 = []
+for fold_n, (train_idx, test_idx) in enumerate(skf.split(X, y)):
+    folds_shuffle_1.append((train_idx, test_idx))
+    if fold_n < 3:  # Show only first 3 folds
+        print(f"  Fold {fold_n}: Train={train_idx}, Test={test_idx}")
+
+print("shuffle=True, random_state=2:")
+skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=2)
+folds_shuffle_2 = []
+for fold_n, (train_idx, test_idx) in enumerate(skf.split(X, y)):
+    folds_shuffle_2.append((train_idx, test_idx))
+    if fold_n < 3:  # Show only first 3 folds
+        print(f"  Fold {fold_n}: Train={train_idx}, Test={test_idx}")
+
+# Check if shuffling actually changes the folds
+print("\n=== Verification ===")
+print("Are shuffle=False and shuffle=True (random_state=1) folds the same?")
+same_folds = all(np.array_equal(folds_no_shuffle[i][1], folds_shuffle_1[i][1]) for i in range(len(folds_no_shuffle)))
+print(f"  {same_folds}")
+
+print("Are shuffle=True (random_state=1) and shuffle=True (random_state=2) folds the same?")
+same_folds_diff_seed = all(np.array_equal(folds_shuffle_1[i][1], folds_shuffle_2[i][1]) for i in range(len(folds_shuffle_1)))
+print(f"  {same_folds_diff_seed}")
\ No newline at end of file
diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 000000000..f39225e35
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,24 @@
+import numpy as np
+from sklearn.model_selection import StratifiedKFold
+
+# Simple test case
+X = np.array([0, 1, 2, 3, 4, 5])
+y = np.array([0, 0, 0, 1, 1, 1])
+
+print("X:", X)
+print("y:", y)
+
+print("\nshuffle = False")
+skf = StratifiedKFold(n_splits=2, shuffle=False, random_state=42)
+for i, (train, test) in enumerate(skf.split(X, y)):
+    print(f"Fold {i}: Train={train}, Test={test}")
+
+print("\nshuffle = True, random_state=42")
+skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=42)
+for i, (train, test) in enumerate(skf.split(X, y)):
+    print(f"Fold {i}: Train={train}, Test={test}")
+
+print("\nshuffle = True, random_state=43")
+skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=43)
+for i, (train, test) in enumerate(skf.split(X, y)):
+    print(f"Fold {i}: Train={train}, Test={test}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..40cc62883
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+import numpy as np
+from sklearn.model_selection import StratifiedKFold
+
+RANDOM_SEED = 1
+
+samples_per_class = 10
+X = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)
+y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)
+
+print(X, '\n', y, '\n')
+
+print('\nshuffle = False\n')
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print(f"  Train: {train_idx}")
+    print(f"  Test:  {test_idx}")
+
+print('\nshuffle = True, Random seed =', RANDOM_SEED, '\n')
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print(f"  Train: {train_idx}")
+    print(f"  Test:  {test_idx}")
+
+RANDOM_SEED += 1
+print('\nshuffle = True, Random seed =', RANDOM_SEED, '\n')
+  
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print(f"  Train: {train_idx}")
+    print(f"  Test:  {test_idx}")
\ No newline at end of file
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..cba82e8c3 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -645,29 +645,29 @@ class StratifiedKFold(_BaseKFold):
                            " be less than n_splits=%d."
                            % (min_groups, self.n_splits)), Warning)
 
-        # pre-assign each sample to a test fold index using individual KFold
-        # splitting strategies for each class so as to respect the balance of
-        # classes
-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]
-        # will break when the data is not 100% stratifiable for all classes.
-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
-        per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
-            for count in y_counts]
-
         test_folds = np.zeros(n_samples, dtype=np.int)
-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):
-                cls_test_folds = test_folds[y == cls]
-                # the test split can be too big because we used
-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%
-                # stratifiable for all the classes
-                # (we use a warning instead of raising an exception)
-                # If this is the case, let's trim it:
-                test_split = test_split[test_split < len(cls_test_folds)]
-                cls_test_folds[test_split] = test_fold_indices
-                test_folds[y == cls] = cls_test_folds
+        
+        # For each class, assign samples to folds with optional shuffling
+        for cls_idx, cls in enumerate(unique_y):
+            # Get indices for this class
+            cls_indices = np.where(y == cls)[0]
+            n_cls_samples = len(cls_indices)
+            
+            if self.shuffle:
+                # Shuffle the indices within this class
+                random_state = check_random_state(rng)
+                cls_indices = random_state.permutation(cls_indices)
+            
+            # Determine fold sizes for this class
+            fold_sizes = np.full(self.n_splits, n_cls_samples // self.n_splits, dtype=np.int)
+            fold_sizes[:n_cls_samples % self.n_splits] += 1
+            
+            # Assign samples to folds
+            current = 0
+            for fold_idx, fold_size in enumerate(fold_sizes):
+                start, stop = current, current + fold_size
+                test_folds[cls_indices[start:stop]] = fold_idx
+                current = stop
 
         return test_folds
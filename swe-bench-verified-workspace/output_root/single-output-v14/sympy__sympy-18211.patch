diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..08e31af62f
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,37 @@
+"""
+Test to verify that the original GitHub issue is resolved.
+The issue was that `solveset` raises `NotImplementedError` instead of returning `ConditionSet`
+for equations like Eq(n*cos(n) - 3*sin(n), 0).
+"""
+
+from sympy import Eq, cos, sin, symbols
+from sympy.sets import ConditionSet, Reals
+
+# Original issue reproduction
+n = symbols('n')
+expr = Eq(n*cos(n) - 3*sin(n), 0)
+
+print("Testing the original GitHub issue:")
+print("Expression:", expr)
+
+# Test as_set() method (this was the failing case)
+try:
+    result = expr.as_set()
+    print("✓ expr.as_set() works:", result)
+except Exception as e:
+    print("✗ expr.as_set() failed:", e)
+
+# Test that it returns the expected ConditionSet
+expected = ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)
+result = expr.as_set()
+print("✓ Returns expected ConditionSet:", result == expected)
+
+# Test that solveset also works (this was mentioned in the issue but actually worked)
+from sympy.solvers.solveset import solveset
+try:
+    solveset_result = solveset(expr, n)
+    print("✓ solveset() works:", solveset_result)
+except Exception as e:
+    print("✗ solveset() failed:", e)
+
+print("\nAll tests passed! The issue has been resolved.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ee10fea535
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+from sympy import Eq, cos, sin, symbols
+from sympy.calculus.util import periodicity
+from sympy.core.relational import Relational
+
+# Reproduce the issue using as_set() method as mentioned in the GitHub issue
+n = symbols('n')
+expr = Eq(n*cos(n) - 3*sin(n), 0)
+
+print("Periodicity:", periodicity(expr, n))
+print("Relational type:", type(expr).__name__)
+print("Is equality?", isinstance(expr, Eq))
+
+try:
+    result = expr._eval_as_set()
+    print("_eval_as_set() result:", result)
+except Exception as e:
+    print("Error in _eval_as_set():", type(e).__name__, str(e))
+
+try:
+    result = expr.as_set()
+    print("as_set() result:", result)
+except Exception as e:
+    print("Error in as_set():", type(e).__name__, str(e))
+
+# Expected behavior: should return ConditionSet
+from sympy.sets import ConditionSet, Reals
+expected = ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)
+print("Expected result:", expected)
\ No newline at end of file
diff --git a/sympy/core/relational.py b/sympy/core/relational.py
index f581bfa3c4..abd9e71e65 100644
--- a/sympy/core/relational.py
+++ b/sympy/core/relational.py
@@ -392,7 +392,17 @@ def _eval_as_set(self):
         syms = self.free_symbols
         assert len(syms) == 1
         x = syms.pop()
-        return solve_univariate_inequality(self, x, relational=False)
+        
+        # For equations that cannot be solved by solve_univariate_inequality,
+        # return a ConditionSet instead of raising NotImplementedError
+        if isinstance(self, Eq):
+            try:
+                return solve_univariate_inequality(self, x, relational=False)
+            except NotImplementedError:
+                from sympy.sets import ConditionSet
+                return ConditionSet(x, self, S.Reals)
+        else:
+            return solve_univariate_inequality(self, x, relational=False)
 
     @property
     def binary_symbols(self):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..9bf6bbfcb1
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,61 @@
+from sympy import Eq, Ne, Gt, Lt, Ge, Le, cos, sin, symbols
+from sympy.sets import ConditionSet, Reals
+
+n = symbols('n')
+
+# Test 1: Original issue - complex equation
+from sympy.calculus.util import periodicity
+expr1 = Eq(n*cos(n) - 3*sin(n), 0)
+print("Test 1 - Original issue:")
+print("Periodicity:", periodicity(expr1, n))
+result1 = expr1.as_set()
+expected1 = ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)
+print("Result:", result1)
+print("Expected:", expected1)
+print("Match:", result1 == expected1)
+print()
+
+# Test 2: Simple equation that can be solved
+expr2 = Eq(n, 0)
+result2 = expr2.as_set()
+print("Test 2 - Simple equation:")
+print("Result:", result2)
+print("Should be FiniteSet(0)")
+print()
+
+# Test 3: Inequality (should still work)
+expr3 = Gt(n, 0)
+result3 = expr3.as_set()
+print("Test 3 - Inequality:")
+print("Result:", result3)
+print("Should be Interval(0, oo, True, False)")
+print()
+
+# Test 4: Not equal
+expr4 = Ne(n, 0)
+result4 = expr4.as_set()
+print("Test 4 - Not equal:")
+print("Result:", result4)
+print("Should be Union(Interval(-oo, 0), Interval(0, oo))")
+print()
+
+# Test 5: Check periodicity of another complex equation
+from sympy.calculus.util import periodicity
+expr5 = Eq(cos(n), sin(n))
+print("Test 5 - Periodicity check:")
+print("Periodicity:", periodicity(expr5, n))
+try:
+    result5 = expr5.as_set()
+    print("Result:", result5)
+except Exception as e:
+    print("Error:", type(e).__name__, str(e))
+print()
+
+# Test 6: Check that inequalities still raise NotImplementedError when appropriate
+expr6 = Gt(cos(n), sin(n))  # This might be solvable or not
+try:
+    result6 = expr6.as_set()
+    print("Test 6 - Complex inequality:")
+    print("Result:", result6)
+except Exception as e:
+    print("Test 6 - Complex inequality raises:", type(e).__name__, str(e))
\ No newline at end of file
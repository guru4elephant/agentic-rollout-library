diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..0a6bb84e24 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -859,7 +859,6 @@ class Card(_Verify):
                     return kw, vc
 
                 value = m.group("strg") or ""
-                value = value.rstrip().replace("''", "'")
                 if value and value[-1] == "&":
                     value = value[:-1]
                 values.append(value)
diff --git a/debug_card_format.py b/debug_card_format.py
new file mode 100644
index 0000000000..d36535f174
--- /dev/null
+++ b/debug_card_format.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test what the actual card image looks like for problematic cases
+test_cases = [
+    ("x" * 65 + "''", 65),  # This should fail
+    ("x" * 64 + "''", 64),  # This should work
+    ("x" * 65 + "'", 65),   # Single quote case
+]
+
+for value, n in test_cases:
+    print(f"n={n}, value={repr(value)}")
+    card = fits.Card('CONFIG', value)
+    print(f"  Card image: {repr(str(card))}")
+    print(f"  Card image length: {len(str(card))}")
+    
+    # Parse it back
+    card2 = fits.Card.fromstring(str(card))
+    print(f"  Parsed value: {repr(card2.value)}")
+    print(f"  Match: {card.value == card2.value}")
+    print()
\ No newline at end of file
diff --git a/debug_continue.py b/debug_continue.py
new file mode 100644
index 0000000000..7626fb29a0
--- /dev/null
+++ b/debug_continue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test CONTINUE card handling
+value = "x" * 65 + "''"
+print(f"Original value: {repr(value)}")
+print(f"Original length: {len(value)}")
+
+card = fits.Card('CONFIG', value)
+print(f"Card image: {repr(str(card))}")
+print(f"Card image parts: {str(card).split('CONTINUE')}")
+
+# Let's manually examine what happens with CONTINUE parsing
+card_image = str(card)
+continue_parts = card_image.split("CONTINUE")
+print(f"Number of CONTINUE parts: {len(continue_parts)}")
+
+for i, part in enumerate(continue_parts):
+    print(f"Part {i}: {repr(part)}")
+    # Try to parse each part as a card
+    try:
+        card_part = fits.Card.fromstring(part.strip())
+        print(f"  Parsed value: {repr(card_part.value)}")
+    except Exception as e:
+        print(f"  Error parsing: {e}")
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..fd357da44b
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import re
+
+# Test the exact regex behavior
+test_strings = [
+    "hello''world",  # Original has double quotes
+    "hello'world",   # Original has single quote
+    "''",            # Just double quotes
+    "'",             # Just single quote
+]
+
+for test_str in test_strings:
+    print(f"Original: {repr(test_str)}")
+    
+    # Simulate the formatting process
+    exp_val_str = test_str.replace("'", "''")
+    print(f"Formatted: {repr(exp_val_str)}")
+    
+    # Simulate the parsing process (current problematic code)
+    parsed_str = re.sub("''", "'", exp_val_str)
+    print(f"Parsed (current): {repr(parsed_str)}")
+    print(f"Match original: {parsed_str == test_str}")
+    print()
\ No newline at end of file
diff --git a/debug_regex.py b/debug_regex.py
new file mode 100644
index 0000000000..40fa7a7206
--- /dev/null
+++ b/debug_regex.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import re
+
+# Test the regex pattern
+_strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+_strg_re = re.compile(_strg)
+
+# Test cases that show the issue
+test_cases = [
+    "'hello''world'",
+    "'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'''",  # This might be the problematic case
+    "'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''''", # Another potential case
+]
+
+for test_str in test_cases:
+    print(f"Testing: {test_str}")
+    match = _strg_re.match(test_str)
+    if match:
+        print(f"  Captured strg: {repr(match.group('strg'))}")
+        # Apply the current substitution
+        result = re.sub("''", "'", match.group("strg"))
+        print(f"  After substitution: {repr(result)}")
+    else:
+        print("  No match")
+    print()
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 243782fdfc..b2688da2a5 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..76713207eb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+print("Testing double single-quote ('') management in FITS Card")
+print("=" * 60)
+
+# Test case 1: Double quotes at the end of string
+print("\nTest 1: Double quotes at the end of string")
+print("n | len | card1.value == card2.value")
+print("-" * 40)
+for n in range(60, 70):
+    card1 = fits.Card('CONFIG', "x" * n + "''")
+    card2 = fits.Card.fromstring(str(card1))
+    print(f"{n} | {len(card1.value)} | {card1.value == card2.value}")
+    if card1.value != card2.value:
+        print(f"  card1.value: {repr(card1.value)}")
+        print(f"  card2.value: {repr(card2.value)}")
+
+# Test case 2: Double quotes in the middle of string
+print("\nTest 2: Double quotes in the middle of string")
+print("n | len | card1.value == card2.value")
+print("-" * 40)
+for n in range(50, 70):
+    card1 = fits.Card('CONFIG', "x" * n + "''" + "x"*10)
+    card2 = fits.Card.fromstring(str(card1))
+    print(f"{n} | {len(card1.value)} | {card1.value == card2.value}")
+    if card1.value != card2.value:
+        print(f"  card1.value: {repr(card1.value)}")
+        print(f"  card2.value: {repr(card2.value)}")
+
+# Test case 3: Simple case to understand the issue
+print("\nTest 3: Simple case")
+card1 = fits.Card('TEST', "hello''world")
+card2 = fits.Card.fromstring(str(card1))
+print(f"Original: {repr(card1.value)}")
+print(f"Parsed:   {repr(card2.value)}")
+print(f"Equal:    {card1.value == card2.value}")
\ No newline at end of file
diff --git a/test_escaping.py b/test_escaping.py
new file mode 100644
index 0000000000..e8c783f726
--- /dev/null
+++ b/test_escaping.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test various combinations of quotes
+test_cases = [
+    "hello'world",      # Single quote
+    "hello''world",     # Double quotes
+    "hello'''world",    # Triple quotes
+    "hello''''world",   # Quadruple quotes
+]
+
+for test_value in test_cases:
+    print(f"Original: {repr(test_value)}")
+    
+    # Create card and format it
+    card = fits.Card('TEST', test_value)
+    card_image = str(card)
+    print(f"Card image: {repr(card_image)}")
+    
+    # Parse it back
+    card2 = fits.Card.fromstring(card_image)
+    print(f"Parsed back: {repr(card2.value)}")
+    print(f"Match: {test_value == card2.value}")
+    print()
\ No newline at end of file
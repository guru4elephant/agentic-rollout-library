diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..f5e2a53f56 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -513,14 +513,14 @@ class NDArithmeticMixin:
             ``handle_mask`` must create (and copy) the returned mask.
         """
         # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+        if handle_mask is None:
+            return None
+        elif self.mask is None and (operand is None or not hasattr(operand, 'mask') or operand.mask is None):
             return None
-        elif self.mask is None and operand is not None:
+        elif self.mask is None and operand is not None and hasattr(operand, 'mask') and operand.mask is not None:
             # Make a copy so there is no reference in the result.
             return deepcopy(operand.mask)
-        elif operand is None:
+        elif operand is None or not hasattr(operand, 'mask') or operand.mask is None:
             return deepcopy(self.mask)
         else:
             # Now lets calculate the resulting mask (operation enforces copy)
diff --git a/pyproject.toml b/pyproject.toml
index 15bb49f22b..dc9c3c5f37 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "cython==0.29.34",
             "oldest-supported-numpy",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1a7978d7ac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+# Reproduce the issue described in the GitHub issue
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("Testing NDDataRef mask propagation issue...")
+
+# multiply no mask by constant (no mask * no mask)
+print("\n1. multiply no mask by constant (no mask * no mask):")
+try:
+    result = nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask
+    print(f"Result: {result} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# multiply no mask by itself (no mask * no mask)
+print("\n2. multiply no mask by itself (no mask * no mask):")
+try:
+    result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+    print(f"Result: {result} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# multiply mask by constant (mask * no mask) - THIS SHOULD FAIL
+print("\n3. multiply mask by constant (mask * no mask):")
+try:
+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask
+    print(f"Result: {result} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# multiply mask by itself (mask * mask)
+print("\n4. multiply mask by itself (mask * mask):")
+try:
+    result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask
+    print(f"Result shape: {result.shape} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# multiply mask by no mask (mask * no mask) - THIS SHOULD FAIL
+print("\n5. multiply mask by no mask (mask * no mask):")
+try:
+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+    print(f"Result shape: {result.shape} - OK")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..bc23a90c6f
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,80 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+# Test various scenarios to ensure our fix doesn't break anything
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask1 = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+mask2 = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
+
+# Create test objects
+nd_nomask = NDDataRef(array)
+nd_mask1 = NDDataRef(array, mask=mask1)
+nd_mask2 = NDDataRef(array, mask=mask2)
+
+print("Testing comprehensive mask scenarios...")
+
+# Test 1: Both have no mask
+print("\n1. Both have no mask:")
+try:
+    result = nd_nomask.add(nd_nomask, handle_mask=np.bitwise_or)
+    print(f"Result mask: {result.mask} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 2: First has mask, second has no mask
+print("\n2. First has mask, second has no mask:")
+try:
+    result = nd_mask1.add(nd_nomask, handle_mask=np.bitwise_or)
+    print(f"Result mask shape: {result.mask.shape} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 3: First has no mask, second has mask
+print("\n3. First has no mask, second has mask:")
+try:
+    result = nd_nomask.add(nd_mask1, handle_mask=np.bitwise_or)
+    print(f"Result mask shape: {result.mask.shape} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 4: Both have masks
+print("\n4. Both have masks:")
+try:
+    result = nd_mask1.add(nd_mask2, handle_mask=np.bitwise_or)
+    print(f"Result mask shape: {result.mask.shape} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 5: Scalar operand with mask
+print("\n5. Scalar operand with mask:")
+try:
+    result = nd_mask1.add(5, handle_mask=np.bitwise_or)
+    print(f"Result mask shape: {result.mask.shape} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 6: Scalar operand without mask
+print("\n6. Scalar operand without mask:")
+try:
+    result = nd_nomask.add(5, handle_mask=np.bitwise_or)
+    print(f"Result mask: {result.mask} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 7: Different handle_mask functions
+print("\n7. Different handle_mask functions:")
+try:
+    result = nd_mask1.add(nd_mask2, handle_mask=np.logical_and)
+    print(f"Result mask shape: {result.mask.shape} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 8: handle_mask=None
+print("\n8. handle_mask=None:")
+try:
+    result = nd_mask1.add(nd_mask2, handle_mask=None)
+    print(f"Result mask: {result.mask} - OK")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
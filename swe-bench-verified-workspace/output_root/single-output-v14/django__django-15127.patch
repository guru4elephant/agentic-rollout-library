diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py
index 01422066a6..a46c57cd53 100644
--- a/django/contrib/messages/storage/base.py
+++ b/django/contrib/messages/storage/base.py
@@ -38,7 +38,7 @@ class Message:
 
     @property
     def level_tag(self):
-        return LEVEL_TAGS.get(self.level, '')
+        return utils.get_level_tags().get(self.level, '')
 
 
 class BaseStorage:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2f993bffb0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.messages',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.test.utils import override_settings
+from django.contrib.messages.storage.base import Message
+
+def test_level_tags_with_override_settings():
+    """Test that LEVEL_TAGS is updated when using @override_settings"""
+    
+    # Test with default settings
+    message = Message(10, "Test message")
+    print(f"Default level_tag for DEBUG (10): '{message.level_tag}'")
+    
+    # Test with @override_settings
+    with override_settings(MESSAGE_TAGS={10: 'custom-debug'}):
+        message2 = Message(10, "Test message")
+        print(f"With override level_tag for DEBUG (10): '{message2.level_tag}'")
+        
+        # This should show 'custom-debug' but will likely show 'debug' due to the bug
+        if message2.level_tag == 'custom-debug':
+            print("SUCCESS: LEVEL_TAGS updated correctly")
+            return True
+        else:
+            print("FAILURE: LEVEL_TAGS not updated with @override_settings")
+            return False
+
+if __name__ == "__main__":
+    success = test_level_tags_with_override_settings()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..49e5d27bc1
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.messages',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.test.utils import override_settings
+from django.contrib.messages.storage.base import Message
+
+def test_edge_cases():
+    """Test edge cases for LEVEL_TAGS with @override_settings"""
+    
+    # Test 1: Empty MESSAGE_TAGS
+    with override_settings(MESSAGE_TAGS={}):
+        message = Message(10, "Test message")
+        print(f"Empty MESSAGE_TAGS level_tag for DEBUG (10): '{message.level_tag}'")
+        assert message.level_tag == 'debug'  # Should fall back to default
+    
+    # Test 2: Custom level not in defaults
+    with override_settings(MESSAGE_TAGS={99: 'custom-level'}):
+        message = Message(99, "Test message")
+        print(f"Custom level (99) level_tag: '{message.level_tag}'")
+        assert message.level_tag == 'custom-level'
+    
+    # Test 3: Override existing level
+    with override_settings(MESSAGE_TAGS={20: 'custom-info'}):
+        message = Message(20, "Test message")
+        print(f"Overridden INFO (20) level_tag: '{message.level_tag}'")
+        assert message.level_tag == 'custom-info'
+    
+    # Test 4: Level not in any tags
+    message = Message(999, "Test message")
+    print(f"Non-existent level (999) level_tag: '{message.level_tag}'")
+    assert message.level_tag == ''  # Should return empty string
+    
+    # Test 5: Multiple overrides
+    with override_settings(MESSAGE_TAGS={10: 'custom-debug', 25: 'custom-success'}):
+        message1 = Message(10, "Test message")
+        message2 = Message(25, "Test message")
+        print(f"Multiple overrides - DEBUG (10): '{message1.level_tag}', SUCCESS (25): '{message2.level_tag}'")
+        assert message1.level_tag == 'custom-debug'
+        assert message2.level_tag == 'custom-success'
+    
+    print("All edge case tests passed!")
+    return True
+
+if __name__ == "__main__":
+    success = test_edge_cases()
+    sys.exit(0 if success else 1)
\ No newline at end of file
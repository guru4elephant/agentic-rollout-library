diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..5ad5244c7
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+print("Final comprehensive test for CountVectorizer fix...")
+
+# Test the exact scenario from the GitHub issue
+print("\n1. Testing the exact GitHub issue scenario:")
+corpus = [
+    'This is the first document.',
+    'This is the second second document.',
+    'And the third one.',
+    'Is this the first document?',
+]
+
+vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
+
+vectorizer = CountVectorizer(vocabulary=vocabulary)
+print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+
+# This should work now (previously raised NotFittedError)
+try:
+    feature_names = vectorizer.get_feature_names()
+    print(f"SUCCESS: get_feature_names() works: {feature_names}")
+except Exception as e:
+    print(f"FAILED: {e}")
+
+# Transform should still work
+try:
+    result = vectorizer.transform(corpus)
+    print(f"SUCCESS: transform() works: {result.shape}")
+except Exception as e:
+    print(f"FAILED: {e}")
+
+# Test that normal behavior without vocabulary still works
+print("\n2. Testing normal behavior without vocabulary:")
+vectorizer_no_vocab = CountVectorizer()
+print(f"hasattr(vectorizer_no_vocab, 'vocabulary_'): {hasattr(vectorizer_no_vocab, 'vocabulary_')}")
+
+# Should raise NotFittedError
+try:
+    vectorizer_no_vocab.get_feature_names()
+    print("FAILED: Should have raised NotFittedError")
+except Exception as e:
+    print(f"SUCCESS: Correctly raised NotFittedError: {e}")
+
+# Test that fit still works normally
+print("\n3. Testing that fit() still works:")
+vectorizer_fit = CountVectorizer()
+vectorizer_fit.fit(corpus)
+print(f"After fit, hasattr(vectorizer_fit, 'vocabulary_'): {hasattr(vectorizer_fit, 'vocabulary_')}")
+
+try:
+    feature_names = vectorizer_fit.get_feature_names()
+    print(f"SUCCESS: get_feature_names() after fit: {feature_names}")
+except Exception as e:
+    print(f"FAILED: {e}")
+
+# Test that transform without vocabulary still raises error
+print("\n4. Testing transform without vocabulary (should raise error):")
+vectorizer_no_vocab2 = CountVectorizer()
+try:
+    vectorizer_no_vocab2.transform(corpus)
+    print("FAILED: Should have raised NotFittedError")
+except Exception as e:
+    print(f"SUCCESS: Correctly raised NotFittedError: {e}")
+
+print("\nAll tests completed successfully! The fix is working correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..a3e9e46e0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+print("Testing CountVectorizer get_feature_names issue...")
+
+# Test case 1: Without vocabulary - should raise NotFittedError
+print("\n1. Testing without vocabulary:")
+vectorizer1 = CountVectorizer()
+corpus = [
+    'This is the first document.',
+    'This is the second second document.',
+    'And the third one.',
+    'Is this the first document?',
+]
+
+try:
+    vectorizer1.transform(corpus)
+    print("ERROR: Should have raised NotFittedError")
+except Exception as e:
+    print(f"Expected error: {e}")
+
+try:
+    vectorizer1.get_feature_names()
+    print("ERROR: Should have raised NotFittedError")
+except Exception as e:
+    print(f"Expected error: {e}")
+
+# Test case 2: With vocabulary - should work according to the issue
+print("\n2. Testing with vocabulary:")
+vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
+
+vectorizer2 = CountVectorizer(vocabulary=vocabulary)
+print(f"hasattr(vectorizer2, 'vocabulary_'): {hasattr(vectorizer2, 'vocabulary_')}")
+
+try:
+    feature_names = vectorizer2.get_feature_names()
+    print(f"ERROR: Should have raised NotFittedError but got: {feature_names}")
+except Exception as e:
+    print(f"Current behavior (raises error): {e}")
+
+# Test transform method which should work
+try:
+    result = vectorizer2.transform(corpus)
+    print(f"Transform works: {result.shape}")
+    print(f"After transform, hasattr(vectorizer2, 'vocabulary_'): {hasattr(vectorizer2, 'vocabulary_')}")
+except Exception as e:
+    print(f"Transform error: {e}")
+
+# Test get_feature_names after transform
+try:
+    feature_names = vectorizer2.get_feature_names()
+    print(f"After transform, get_feature_names works: {feature_names}")
+except Exception as e:
+    print(f"After transform, get_feature_names error: {e}")
+
+print("\n3. Testing the expected behavior:")
+# According to the issue, get_feature_names should work when vocabulary is provided
+# even without calling transform first
+vectorizer3 = CountVectorizer(vocabulary=vocabulary)
+print(f"hasattr(vectorizer3, 'vocabulary_'): {hasattr(vectorizer3, 'vocabulary_')}")
+
+# This should work according to the issue description
+try:
+    feature_names = vectorizer3.get_feature_names()
+    print(f"Expected behavior (should work): {feature_names}")
+except Exception as e:
+    print(f"Current behavior (still raises error): {e}")
\ No newline at end of file
diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index 9b1ebd632..023d277c2 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -300,6 +300,11 @@ class VectorizerMixin(object):
 
     def _check_vocabulary(self):
         """Check if vocabulary is empty or missing (not fit-ed)"""
+        # If vocabulary is provided but vocabulary_ is not set up yet,
+        # validate the vocabulary first
+        if self.vocabulary is not None and not hasattr(self, 'vocabulary_'):
+            self._validate_vocabulary()
+        
         msg = "%(name)s - Vocabulary wasn't fitted."
         check_is_fitted(self, 'vocabulary_', msg=msg),
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..6227650c3
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+print("Testing edge cases for CountVectorizer fix...")
+
+# Test case 1: Empty vocabulary
+print("\n1. Testing empty vocabulary:")
+try:
+    vectorizer = CountVectorizer(vocabulary=[])
+    print("ERROR: Should have raised ValueError for empty vocabulary")
+except ValueError as e:
+    print(f"Expected error: {e}")
+
+# Test case 2: Vocabulary with duplicates
+print("\n2. Testing vocabulary with duplicates:")
+try:
+    vectorizer = CountVectorizer(vocabulary=['a', 'b', 'a'])
+    print("ERROR: Should have raised ValueError for duplicate terms")
+except ValueError as e:
+    print(f"Expected error: {e}")
+
+# Test case 3: Valid vocabulary
+print("\n3. Testing valid vocabulary:")
+vocabulary = ['apple', 'banana', 'cherry']
+vectorizer = CountVectorizer(vocabulary=vocabulary)
+print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+print(f"Vocabulary_: {vectorizer.vocabulary_}")
+print(f"Feature names: {vectorizer.get_feature_names()}")
+
+# Test case 4: Vocabulary as mapping (dict)
+print("\n4. Testing vocabulary as mapping:")
+vocabulary_dict = {'apple': 0, 'banana': 1, 'cherry': 2}
+vectorizer = CountVectorizer(vocabulary=vocabulary_dict)
+print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+print(f"Vocabulary_: {vectorizer.vocabulary_}")
+print(f"Feature names: {vectorizer.get_feature_names()}")
+
+# Test case 5: Vocabulary as set
+print("\n5. Testing vocabulary as set:")
+vocabulary_set = {'apple', 'banana', 'cherry'}
+vectorizer = CountVectorizer(vocabulary=vocabulary_set)
+print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+print(f"Vocabulary_: {vectorizer.vocabulary_}")
+print(f"Feature names: {vectorizer.get_feature_names()}")
+
+# Test case 6: No vocabulary (should still raise NotFittedError)
+print("\n6. Testing no vocabulary:")
+vectorizer = CountVectorizer()
+try:
+    vectorizer.get_feature_names()
+    print("ERROR: Should have raised NotFittedError")
+except Exception as e:
+    print(f"Expected error: {e}")
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
diff --git a/test_edge_cases_fixed.py b/test_edge_cases_fixed.py
new file mode 100644
index 000000000..9409cca47
--- /dev/null
+++ b/test_edge_cases_fixed.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+print("Testing edge cases for CountVectorizer fix...")
+
+# Test case 1: Empty vocabulary
+print("\n1. Testing empty vocabulary:")
+try:
+    vectorizer = CountVectorizer(vocabulary=[])
+    vectorizer.get_feature_names()
+    print("ERROR: Should have raised ValueError for empty vocabulary")
+except ValueError as e:
+    print(f"Expected error: {e}")
+
+# Test case 2: Vocabulary with duplicates
+print("\n2. Testing vocabulary with duplicates:")
+try:
+    vectorizer = CountVectorizer(vocabulary=['a', 'b', 'a'])
+    vectorizer.get_feature_names()
+    print("ERROR: Should have raised ValueError for duplicate terms")
+except ValueError as e:
+    print(f"Expected error: {e}")
+
+# Test case 3: Valid vocabulary
+print("\n3. Testing valid vocabulary:")
+vocabulary = ['apple', 'banana', 'cherry']
+vectorizer = CountVectorizer(vocabulary=vocabulary)
+print(f"Before get_feature_names, hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+feature_names = vectorizer.get_feature_names()
+print(f"After get_feature_names, hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+print(f"Vocabulary_: {vectorizer.vocabulary_}")
+print(f"Feature names: {feature_names}")
+
+# Test case 4: Vocabulary as mapping (dict)
+print("\n4. Testing vocabulary as mapping:")
+vocabulary_dict = {'apple': 0, 'banana': 1, 'cherry': 2}
+vectorizer = CountVectorizer(vocabulary=vocabulary_dict)
+print(f"Before get_feature_names, hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+feature_names = vectorizer.get_feature_names()
+print(f"After get_feature_names, hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+print(f"Vocabulary_: {vectorizer.vocabulary_}")
+print(f"Feature names: {feature_names}")
+
+# Test case 5: Vocabulary as set
+print("\n5. Testing vocabulary as set:")
+vocabulary_set = {'apple', 'banana', 'cherry'}
+vectorizer = CountVectorizer(vocabulary=vocabulary_set)
+print(f"Before get_feature_names, hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+feature_names = vectorizer.get_feature_names()
+print(f"After get_feature_names, hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+print(f"Vocabulary_: {vectorizer.vocabulary_}")
+print(f"Feature names: {feature_names}")
+
+# Test case 6: No vocabulary (should still raise NotFittedError)
+print("\n6. Testing no vocabulary:")
+vectorizer = CountVectorizer()
+try:
+    vectorizer.get_feature_names()
+    print("ERROR: Should have raised NotFittedError")
+except Exception as e:
+    print(f"Expected error: {e}")
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
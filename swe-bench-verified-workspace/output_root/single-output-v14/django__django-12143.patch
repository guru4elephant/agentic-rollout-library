diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 137e6faa0f..a100f1c499 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):
 
     def _get_edited_object_pks(self, request, prefix):
         """Return POST data values of list_editable primary keys."""
-        pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, self.model._meta.pk.name))
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))
         return [value for key, value in request.POST.items() if pk_pattern.match(key)]
 
     def _get_list_editable_queryset(self, request, prefix):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..3b1b0de5b3
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the fix handles all edge cases
+"""
+
+import re
+
+def test_regex_escaping():
+    """Test that our fix handles various regex special characters correctly"""
+    
+    test_cases = [
+        # (prefix, expected_key, should_match)
+        ("normal", "normal-0-id", True),
+        ("form[0]", "form[0]-0-id", True),
+        ("form.^$*+?{}[]\\|()", "form.^$*+?{}[]\\|()-0-id", True),
+        ("form-with-dashes", "form-with-dashes-0-id", True),
+        ("form_with_underscores", "form_with_underscores-0-id", True),
+        ("form.with.dots", "form.with.dots-0-id", True),
+    ]
+    
+    print("=== Testing regex escaping fix ===")
+    
+    for prefix, expected_key, should_match in test_cases:
+        # Test the fixed pattern
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), "id"))
+        matches = pk_pattern.match(expected_key) is not None
+        
+        print(f"Prefix: '{prefix}'")
+        print(f"  Expected key: '{expected_key}'")
+        print(f"  Should match: {should_match}")
+        print(f"  Actual match: {matches}")
+        print(f"  Pattern: {pk_pattern.pattern}")
+        
+        if matches != should_match:
+            print(f"  ❌ FAILED")
+            return False
+        else:
+            print(f"  ✅ PASSED")
+        print()
+    
+    # Test that non-matching keys don't match
+    print("=== Testing non-matching keys ===")
+    prefix = "form[0]"
+    non_matching_keys = [
+        "wrong-0-id",
+        "form[0]-0-other",
+        "form[0]-id",  # missing digit
+        "form[0]-0-id-extra",  # extra content
+    ]
+    
+    pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), "id"))
+    
+    for key in non_matching_keys:
+        matches = pk_pattern.match(key) is not None
+        print(f"Key '{key}' should not match: {not matches}")
+        if matches:
+            print(f"  ❌ FAILED - incorrectly matched")
+            return False
+        else:
+            print(f"  ✅ PASSED")
+    
+    print("\n=== All tests passed! ===")
+    return True
+
+if __name__ == "__main__":
+    success = test_regex_escaping()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f8d6a62f5f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the regex special characters issue in admin changeform view.
+This script demonstrates the problem when using special regex characters in formset prefix.
+"""
+
+import re
+
+def demonstrate_issue():
+    print("=== Demonstrating the regex special characters issue ===")
+    
+    # Test case 1: Normal prefix (should work)
+    normal_prefix = "form"
+    pk_name = "id"
+    pattern_normal = re.compile(r'{}-\d+-{}$'.format(normal_prefix, pk_name))
+    print(f"Normal prefix '{normal_prefix}': pattern = {pattern_normal.pattern}")
+    
+    # Test with matching key
+    test_key = "form-0-id"
+    match_normal = pattern_normal.match(test_key)
+    print(f"  Key '{test_key}' matches: {bool(match_normal)}")
+    
+    # Test case 2: Prefix with regex special characters (will fail)
+    special_prefix = "form[0]"
+    pattern_special = re.compile(r'{}-\d+-{}$'.format(special_prefix, pk_name))
+    print(f"\nSpecial prefix '{special_prefix}': pattern = {pattern_special.pattern}")
+    
+    # Test with what should be a matching key
+    test_key_special = "form[0]-0-id"
+    match_special = pattern_special.match(test_key_special)
+    print(f"  Key '{test_key_special}' matches: {bool(match_special)}")
+    
+    # The issue: the pattern becomes "form[0]-\d+-id$" which is invalid regex
+    # because [0] is interpreted as a character class
+    
+    print(f"\n=== Expected behavior ===")
+    # With proper escaping, this should work
+    escaped_prefix = re.escape(special_prefix)
+    pattern_fixed = re.compile(r'{}-\\d+-{}$'.format(escaped_prefix, pk_name))
+    print(f"Escaped prefix '{escaped_prefix}': pattern = {pattern_fixed.pattern}")
+    
+    match_fixed = pattern_fixed.match(test_key_special)
+    print(f"  Key '{test_key_special}' matches: {bool(match_fixed)}")
+    
+    # Let's also test what happens with the original pattern (should raise an exception)
+    print(f"\n=== Testing original problematic pattern ===")
+    try:
+        pattern_problematic = re.compile(r'{}-\d+-{}$'.format(special_prefix, pk_name))
+        print(f"Problematic pattern created successfully: {pattern_problematic.pattern}")
+        print(f"  Key '{test_key_special}' matches: {bool(pattern_problematic.match(test_key_special))}")
+        
+        # Let's test what the pattern actually matches
+        print(f"  Pattern explanation: '{pattern_problematic.pattern}'")
+        print(f"    - 'form[0]' is interpreted as 'form' followed by character class '[0]'")
+        print(f"    - This means it matches 'form' followed by any character in '0'")
+        
+        # Test what it actually matches
+        test_wrong_key = "form0-0-id"  # This would match the pattern form[0] (character class)
+        print(f"  Key '{test_wrong_key}' matches: {bool(pattern_problematic.match(test_wrong_key))}")
+        
+    except re.error as e:
+        print(f"ERROR: Failed to compile pattern - {e}")
+
+if __name__ == "__main__":
+    demonstrate_issue()
\ No newline at end of file
diff --git a/test_admin_fix.py b/test_admin_fix.py
new file mode 100644
index 0000000000..d00e89b570
--- /dev/null
+++ b/test_admin_fix.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+"""
+Test to verify the admin fix works correctly without breaking existing functionality
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.admin.options import ModelAdmin
+from django.test import RequestFactory
+
+class MockModel:
+    class Meta:
+        pk = type('', (), {'name': 'id'})()
+    
+    _meta = Meta()
+
+class TestModelAdmin(ModelAdmin):
+    def __init__(self):
+        self.model = MockModel()
+
+def test_get_edited_object_pks():
+    """Test the fixed _get_edited_object_pks method"""
+    print("=== Testing _get_edited_object_pks method ===")
+    
+    admin = TestModelAdmin()
+    factory = RequestFactory()
+    
+    # Test case 1: Normal prefix
+    print("\n1. Testing normal prefix:")
+    request = factory.post('/', {
+        'form-0-id': '123',
+        'form-1-id': '456',
+        'other-field': 'value'
+    })
+    result = admin._get_edited_object_pks(request, 'form')
+    print(f"   Result: {result}")
+    assert result == ['123', '456'], f"Expected ['123', '456'], got {result}"
+    
+    # Test case 2: Prefix with regex special characters
+    print("\n2. Testing prefix with regex special characters:")
+    request = factory.post('/', {
+        'form[0]-0-id': '123',
+        'form[0]-1-id': '456',
+        'other-field': 'value'
+    })
+    result = admin._get_edited_object_pks(request, 'form[0]')
+    print(f"   Result: {result}")
+    assert result == ['123', '456'], f"Expected ['123', '456'], got {result}"
+    
+    # Test case 3: Complex prefix
+    print("\n3. Testing complex prefix:")
+    complex_prefix = 'form.^$*+?{}[]\\|()'
+    request = factory.post('/', {
+        'form.^$*+?{}[]\\|()-0-id': '123',
+        'other-field': 'value'
+    })
+    result = admin._get_edited_object_pks(request, complex_prefix)
+    print(f"   Result: {result}")
+    assert result == ['123'], f"Expected ['123'], got {result}"
+    
+    # Test case 4: Non-matching keys should be filtered out
+    print("\n4. Testing non-matching keys:")
+    request = factory.post('/', {
+        'form[0]-0-id': '123',
+        'form[0]-1-id': '456',
+        'wrong-prefix-0-id': '999',
+        'form[0]-0-other': 'should-not-match',
+        'form[0]-id': 'missing-digit'
+    })
+    result = admin._get_edited_object_pks(request, 'form[0]')
+    print(f"   Result: {result}")
+    assert result == ['123', '456'], f"Expected ['123', '456'], got {result}"
+    
+    print("\n=== All tests passed! ===")
+    return True
+
+if __name__ == "__main__":
+    try:
+        success = test_get_edited_object_pks()
+        sys.exit(0 if success else 1)
+    except Exception as e:
+        print(f"❌ Test failed with error: {e}")
+        import traceback
+        traceback.print_exc()
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..71d309b502
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for regex special characters issue.
+This simulates the actual Django admin behavior with the fixed code.
+"""
+
+import re
+
+class MockModel:
+    class Meta:
+        pk = type('', (), {'name': 'id'})()  # Mock pk with name 'id'
+
+class MockRequest:
+    def __init__(self, post_data):
+        self.POST = post_data
+
+def test_get_edited_object_pks_fixed(prefix, post_data):
+    """Simulate the fixed _get_edited_object_pks method"""
+    # Mock self.model._meta.pk.name
+    pk_name = "id"
+    
+    # Fixed pattern using re.escape
+    pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), pk_name))
+    
+    # Return matching values (simulating the actual method)
+    return [value for key, value in post_data.items() if pk_pattern.match(key)]
+
+def test_scenarios():
+    print("=== Testing the fix for regex special characters issue ===")
+    
+    # Test case 1: Normal prefix
+    print("\n1. Normal prefix 'form':")
+    post_data = {'form-0-id': '123', 'form-1-id': '456', 'other-field': 'value'}
+    result = test_get_edited_object_pks_fixed('form', post_data)
+    print(f"   Input: {post_data}")
+    print(f"   Result: {result}")
+    assert result == ['123', '456'], f"Expected ['123', '456'], got {result}"
+    
+    # Test case 2: Prefix with regex special characters
+    print("\n2. Special prefix 'form[0]':")
+    post_data = {'form[0]-0-id': '123', 'form[0]-1-id': '456', 'other-field': 'value'}
+    result = test_get_edited_object_pks_fixed('form[0]', post_data)
+    print(f"   Input: {post_data}")
+    print(f"   Result: {result}")
+    assert result == ['123', '456'], f"Expected ['123', '456'], got {result}"
+    
+    # Test case 3: More complex regex characters
+    print("\n3. Complex prefix 'form.^$*+?{}[]\\|()':")
+    complex_prefix = 'form.^$*+?{}[]\\|()'
+    post_data = {'form.^$*+?{}[]\\|()-0-id': '123', 'other-field': 'value'}
+    result = test_get_edited_object_pks_fixed(complex_prefix, post_data)
+    print(f"   Input: {post_data}")
+    print(f"   Result: {result}")
+    assert result == ['123'], f"Expected ['123'], got {result}"
+    
+    # Test case 4: Non-matching keys should be filtered out
+    print("\n4. Mixed keys with non-matches:")
+    post_data = {
+        'form[0]-0-id': '123',
+        'form[0]-1-id': '456', 
+        'wrong-prefix-0-id': '999',
+        'form[0]-0-other': 'should-not-match',
+        'form[0]-id': 'missing-digit'
+    }
+    result = test_get_edited_object_pks_fixed('form[0]', post_data)
+    print(f"   Input: {post_data}")
+    print(f"   Result: {result}")
+    assert result == ['123', '456'], f"Expected ['123', '456'], got {result}"
+    
+    print("\n=== All tests passed! ===")
+
+if __name__ == "__main__":
+    test_scenarios()
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..df68c8e551
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+from decimal import Decimal, Context, ROUND_HALF_UP
+
+def debug_floatformat():
+    text = '0.00'
+    arg = 0
+    
+    try:
+        input_val = str(text)
+        d = Decimal(input_val)
+        print(f"Decimal('{text}') = {d}")
+        
+        p = int(arg)
+        print(f"p = {p}")
+        
+        m = int(d) - d
+        print(f"m = {m}")
+        
+        if not m and p < 0:
+            print("Would return early")
+            return
+        
+        exp = Decimal(1).scaleb(-abs(p))
+        print(f"exp = {exp}")
+        
+        tupl = d.as_tuple()
+        print(f"tupl = {tupl}")
+        
+        units = len(tupl[1])
+        print(f"units from digits = {units}")
+        
+        print(f"tupl[2] (exponent) = {tupl[2]}")
+        print(f"m = {m} (truthy: {bool(m)})")
+        
+        adjustment = -tupl[2] if m else tupl[2]
+        print(f"adjustment = {adjustment}")
+        units += adjustment
+        print(f"final units = {units}")
+        
+        prec = abs(p) + units + 1
+        print(f"prec = {prec}")
+        
+        # This is where the error occurs
+        context = Context(prec=prec)
+        print(f"Context created with prec={prec}")
+        
+        rounded_d = d.quantize(exp, ROUND_HALF_UP, context)
+        print(f"rounded_d = {rounded_d}")
+        
+    except Exception as e:
+        print(f"Error: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    debug_floatformat()
\ No newline at end of file
diff --git a/detailed_debug.py b/detailed_debug.py
new file mode 100644
index 0000000000..b0f50e5dcc
--- /dev/null
+++ b/detailed_debug.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+
+from decimal import Decimal, Context, ROUND_HALF_UP
+
+def debug_floatformat_detailed():
+    text = '0.00'
+    arg = 0
+    
+    try:
+        input_val = str(text)
+        d = Decimal(input_val)
+        print(f"Decimal('{text}') = {d}")
+        print(f"d.as_tuple() = {d.as_tuple()}")
+        
+        p = int(arg)
+        print(f"p = {p}")
+        
+        m = int(d) - d
+        print(f"m = {m}")
+        print(f"type(m) = {type(m)}")
+        print(f"m == Decimal(0) = {m == Decimal(0)}")
+        print(f"m != Decimal(0) = {m != Decimal(0)}")
+        print(f"bool(m) = {bool(m)}")
+        
+        if not m and p < 0:
+            print("Would return early")
+            return
+        
+        exp = Decimal(1).scaleb(-abs(p))
+        print(f"exp = {exp}")
+        
+        tupl = d.as_tuple()
+        print(f"tupl = {tupl}")
+        print(f"tupl[1] = {tupl[1]}")
+        print(f"tupl[2] = {tupl[2]}")
+        
+        units = len(tupl[1])
+        print(f"units from digits = {units}")
+        
+        # Test the fixed condition
+        adjustment = -tupl[2] if m != Decimal(0) else tupl[2]
+        print(f"adjustment = {adjustment}")
+        units += adjustment
+        print(f"final units = {units}")
+        
+        prec = abs(p) + units + 1
+        print(f"prec = {prec}")
+        
+        # This is where the error occurs
+        context = Context(prec=prec)
+        print(f"Context created with prec={prec}")
+        
+        rounded_d = d.quantize(exp, ROUND_HALF_UP, context)
+        print(f"rounded_d = {rounded_d}")
+        
+    except Exception as e:
+        print(f"Error: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    debug_floatformat_detailed()
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..b65c478a2b 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -182,8 +182,10 @@ def floatformat(text, arg=-1):
     # Set the precision high enough to avoid an exception (#15789).
     tupl = d.as_tuple()
     units = len(tupl[1])
-    units += -tupl[2] if m else tupl[2]
+    units += -tupl[2] if m != Decimal(0) else tupl[2]
     prec = abs(p) + units + 1
+    # Ensure precision is at least 1 to avoid Decimal context error
+    prec = max(prec, 1)
 
     # Avoid conversion to scientific notation by accessing `sign`, `digits`,
     # and `exponent` from Decimal.as_tuple() directly.
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..04a5bd6230
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from decimal import Decimal
+
+# Configure minimal Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+from django.conf import settings
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+django.setup()
+
+from django.template.defaultfilters import floatformat
+
+print("Testing the specific issue cases...")
+
+# Test cases from the GitHub issue
+test_cases = [
+    ("0.00", 0),
+    (Decimal("0.00"), 0),
+]
+
+print("Testing the original issue cases:")
+for value, arg in test_cases:
+    try:
+        result = floatformat(value, arg)
+        print(f"✓ floatformat({value!r}, {arg}) = {result!r}")
+    except Exception as e:
+        print(f"✗ floatformat({value!r}, {arg}) failed: {e}")
+
+print("\nTesting related edge cases:")
+edge_cases = [
+    ("0.000", 0),
+    ("0.000", 1),
+    ("0.000", 2),
+    (Decimal("0.000"), 0),
+    (Decimal("0.000"), 1),
+    ("0.0", 0),
+    ("0", 0),
+    (Decimal("0"), 0),
+]
+
+for value, arg in edge_cases:
+    try:
+        result = floatformat(value, arg)
+        print(f"✓ floatformat({value!r}, {arg}) = {result!r}")
+    except Exception as e:
+        print(f"✗ floatformat({value!r}, {arg}) failed: {e}")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8a5377dee8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from decimal import Decimal
+
+# Configure minimal Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+from django.conf import settings
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+django.setup()
+
+from django.template.defaultfilters import floatformat
+
+print("Testing floatformat crash issue...")
+
+try:
+    result1 = floatformat('0.00', 0)
+    print(f"floatformat('0.00', 0) = {result1}")
+except Exception as e:
+    print(f"floatformat('0.00', 0) failed: {e}")
+
+try:
+    result2 = floatformat(Decimal('0.00'), 0)
+    print(f"floatformat(Decimal('0.00'), 0) = {result2}")
+except Exception as e:
+    print(f"floatformat(Decimal('0.00'), 0) failed: {e}")
+
+print("Done.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0226e0c856
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from decimal import Decimal
+
+# Configure minimal Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+from django.conf import settings
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+django.setup()
+
+from django.template.defaultfilters import floatformat
+
+print("Testing edge cases for floatformat...")
+
+test_cases = [
+    ('0.00', 0),
+    ('0.00', 1),
+    ('0.00', -1),
+    ('0.00', 2),
+    ('1.23', 0),
+    ('1.23', 1),
+    ('1.23', -1),
+    ('0.0', 0),
+    ('0', 0),
+    ('0', 1),
+]
+
+for value, arg in test_cases:
+    try:
+        result = floatformat(value, arg)
+        print(f"floatformat('{value}', {arg}) = '{result}'")
+    except Exception as e:
+        print(f"floatformat('{value}', {arg}) failed: {e}")
+
+print("\nTesting with Decimal objects...")
+decimal_cases = [
+    (Decimal('0.00'), 0),
+    (Decimal('0.00'), 1),
+    (Decimal('1.23'), 0),
+    (Decimal('0'), 0),
+]
+
+for value, arg in decimal_cases:
+    try:
+        result = floatformat(value, arg)
+        print(f"floatformat({value}, {arg}) = '{result}'")
+    except Exception as e:
+        print(f"floatformat({value}, {arg}) failed: {e}")
+
+print("Done.")
\ No newline at end of file
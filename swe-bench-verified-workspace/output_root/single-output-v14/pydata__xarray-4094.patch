diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 00000000..91cf6cd1
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,68 @@
+import xarray as xr
+import numpy as np
+import pandas as pd
+
+print("Debugging the issue with to_unstacked_dataset for single-dim variables...")
+
+# Create test data as described in the issue
+arr = xr.DataArray(
+     np.arange(3),
+     coords=[("x", [0, 1, 2])],
+)
+data = xr.Dataset({"a": arr, "b": arr})
+
+print("Original dataset:")
+print(data)
+print()
+
+print("Stacking the dataset...")
+stacked = data.to_stacked_array('y', sample_dims=['x'])
+print("Stacked array:")
+print(stacked)
+print("Stacked array indexes:")
+print(stacked.indexes)
+print("Stacked array coords:")
+print(stacked.coords)
+print()
+
+# Let's manually debug what happens in to_unstacked_dataset
+print("Debugging to_unstacked_dataset step by step:")
+idx = stacked.indexes['y']
+print(f"Index: {idx}")
+print(f"Index type: {type(idx)}")
+print(f"Index levels: {idx.levels}")
+print(f"Index names: {idx.names}")
+
+level_number = idx._get_level_number(0)
+print(f"Level number: {level_number}")
+variables = idx.levels[level_number]
+print(f"Variables: {variables}")
+variable_dim = idx.names[level_number]
+print(f"Variable dim: {variable_dim}")
+
+# Try to manually reproduce what happens in the method
+print("\nTrying to manually extract variables:")
+data_dict = {}
+for k in variables:
+    print(f"Processing variable: {k}")
+    selected = stacked.sel({variable_dim: k})
+    print(f"Selected: {selected}")
+    squeezed = selected.squeeze(drop=True)
+    print(f"Squeezed: {squeezed}")
+    data_dict[k] = squeezed
+    print()
+
+print("Data dict:")
+for k, v in data_dict.items():
+    print(f"{k}: {v}")
+    print(f"{k} coords: {v.coords}")
+    print()
+
+# Try to create dataset manually
+try:
+    manual_dataset = xr.Dataset(data_dict)
+    print("Manual dataset creation succeeded:")
+    print(manual_dataset)
+except Exception as e:
+    print(f"Manual dataset creation failed: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/debug_issue2.py b/debug_issue2.py
new file mode 100644
index 00000000..9c6a12f5
--- /dev/null
+++ b/debug_issue2.py
@@ -0,0 +1,59 @@
+import xarray as xr
+import numpy as np
+import pandas as pd
+
+print("Debugging the issue with to_unstacked_dataset for single-dim variables...")
+
+# Create test data as described in the issue
+arr = xr.DataArray(
+     np.arange(3),
+     coords=[("x", [0, 1, 2])],
+)
+data = xr.Dataset({"a": arr, "b": arr})
+
+print("Original dataset:")
+print(data)
+print()
+
+print("Stacking the dataset...")
+stacked = data.to_stacked_array('y', sample_dims=['x'])
+print("Stacked array:")
+print(stacked)
+print()
+
+# Let's manually debug what happens in to_unstacked_dataset
+print("Debugging to_unstacked_dataset step by step:")
+idx = stacked.indexes['y']
+level_number = idx._get_level_number(0)
+variables = idx.levels[level_number]
+variable_dim = idx.names[level_number]
+
+# Try to manually reproduce what happens in the method
+print("\nTrying to manually extract variables without y coordinate:")
+data_dict = {}
+for k in variables:
+    print(f"Processing variable: {k}")
+    selected = stacked.sel({variable_dim: k})
+    print(f"Selected: {selected}")
+    squeezed = selected.squeeze(drop=True)
+    print(f"Squeezed: {squeezed}")
+    # Drop the y coordinate manually
+    squeezed_without_y = squeezed.drop('y')
+    print(f"Squeezed without y: {squeezed_without_y}")
+    data_dict[k] = squeezed_without_y
+    print()
+
+print("Data dict:")
+for k, v in data_dict.items():
+    print(f"{k}: {v}")
+    print(f"{k} coords: {v.coords}")
+    print()
+
+# Try to create dataset manually
+try:
+    manual_dataset = xr.Dataset(data_dict)
+    print("Manual dataset creation succeeded:")
+    print(manual_dataset)
+except Exception as e:
+    print(f"Manual dataset creation failed: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/debug_level.py b/debug_level.py
new file mode 100644
index 00000000..a9dc0343
--- /dev/null
+++ b/debug_level.py
@@ -0,0 +1,35 @@
+import xarray as xr
+import numpy as np
+
+print("Debugging different level test...")
+
+arr = xr.DataArray(
+    np.arange(12).reshape(2, 3, 2),
+    coords=[("x", ["a", "b"]), ("y", [0, 1, 2]), ("z", [0, 1])]
+)
+data = xr.Dataset({"var1": arr, "var2": arr})
+
+print("Original data:")
+print(data)
+print()
+
+stacked = data.to_stacked_array('w', sample_dims=['x'])
+print("Stacked data:")
+print(stacked)
+print("Stacked indexes:")
+print(stacked.indexes)
+print()
+
+# Unstack with level 1 (y dimension)
+print("Unstacking with level 1...")
+unstacked = stacked.to_unstacked_dataset('w', level=1)
+
+print("Unstacked data:")
+print(unstacked)
+print("Unstacked dims:", unstacked.dims)
+print("Unstacked data_vars:", list(unstacked.data_vars.keys()))
+
+# Let's see what the MultiIndex looks like
+idx = stacked.indexes['w']
+print("MultiIndex levels:", idx.levels)
+print("MultiIndex names:", idx.names)
\ No newline at end of file
diff --git a/debug_multidim.py b/debug_multidim.py
new file mode 100644
index 00000000..bc91ba6c
--- /dev/null
+++ b/debug_multidim.py
@@ -0,0 +1,74 @@
+import xarray as xr
+import numpy as np
+
+print("Debugging multi-dimensional case...")
+
+# Create multi-dimensional data
+arr2d = xr.DataArray(
+    np.arange(6).reshape(2, 3),
+    coords=[("x", ["a", "b"]), ("y", [0, 1, 2])]
+)
+data2d = xr.Dataset({"a": arr2d, "b": arr2d})
+
+print("Original dataset:")
+print(data2d)
+print()
+
+print("Stacking the dataset...")
+stacked2d = data2d.to_stacked_array('z', sample_dims=['x'])
+print("Stacked array:")
+print(stacked2d)
+print("Stacked array indexes:")
+print(stacked2d.indexes)
+print()
+
+# Let's manually debug what happens in to_unstacked_dataset
+print("Debugging to_unstacked_dataset step by step:")
+idx = stacked2d.indexes['z']
+print(f"Index: {idx}")
+print(f"Index type: {type(idx)}")
+print(f"Index levels: {idx.levels}")
+print(f"Index names: {idx.names}")
+
+level_number = idx._get_level_number(0)
+print(f"Level number: {level_number}")
+variables = idx.levels[level_number]
+print(f"Variables: {variables}")
+variable_dim = idx.names[level_number]
+print(f"Variable dim: {variable_dim}")
+
+# Try to manually reproduce what happens in the method
+print("\nTrying to manually extract variables:")
+data_dict = {}
+for k in variables:
+    print(f"Processing variable: {k}")
+    selected = stacked2d.sel({variable_dim: k})
+    print(f"Selected: {selected}")
+    squeezed = selected.squeeze(drop=True)
+    print(f"Squeezed: {squeezed}")
+    print(f"Squeezed dims: {squeezed.dims}")
+    print(f"Squeezed coords: {squeezed.coords}")
+    
+    # Check if the dimension exists before dropping
+    if 'z' in squeezed.coords:
+        squeezed_without_z = squeezed.drop('z')
+        print(f"Squeezed without z: {squeezed_without_z}")
+        data_dict[k] = squeezed_without_z
+    else:
+        print("z coordinate not present, no need to drop")
+        data_dict[k] = squeezed
+    print()
+
+print("Data dict:")
+for k, v in data_dict.items():
+    print(f"{k}: {v}")
+    print()
+
+# Try to create dataset manually
+try:
+    manual_dataset = xr.Dataset(data_dict)
+    print("Manual dataset creation succeeded:")
+    print(manual_dataset)
+except Exception as e:
+    print(f"Manual dataset creation failed: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 00000000..2d82b993
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,73 @@
+import xarray as xr
+import numpy as np
+
+def test_single_dim_roundtrip():
+    """Test the original issue: single dimension variables"""
+    print("Testing single dimension roundtrip...")
+    arr = xr.DataArray(np.arange(3), coords=[("x", [0, 1, 2])])
+    data = xr.Dataset({"a": arr, "b": arr})
+    
+    stacked = data.to_stacked_array('y', sample_dims=['x'])
+    unstacked = stacked.to_unstacked_dataset('y')
+    
+    # Check that we get back the original data
+    assert data.identical(unstacked)
+    print("✓ Single dimension roundtrip works")
+
+def test_multi_dim_roundtrip():
+    """Test multi-dimensional variables"""
+    print("Testing multi-dimensional roundtrip...")
+    arr = xr.DataArray(
+        np.arange(6).reshape(2, 3),
+        coords=[("x", ["a", "b"]), ("y", [0, 1, 2])]
+    )
+    data = xr.Dataset({"a": arr, "b": arr})
+    
+    stacked = data.to_stacked_array('z', sample_dims=['x'])
+    unstacked = stacked.to_unstacked_dataset('z')
+    
+    assert data.identical(unstacked)
+    print("✓ Multi-dimensional roundtrip works")
+
+def test_mixed_dims_roundtrip():
+    """Test mixed dimensionality variables"""
+    print("Testing mixed dimensionality roundtrip...")
+    arr1d = xr.DataArray(np.arange(2), coords=[("x", ["a", "b"])])
+    arr2d = xr.DataArray(
+        np.arange(6).reshape(2, 3),
+        coords=[("x", ["a", "b"]), ("y", [0, 1, 2])]
+    )
+    data = xr.Dataset({"a": arr1d, "b": arr2d})
+    
+    stacked = data.to_stacked_array('z', sample_dims=['x'])
+    unstacked = stacked.to_unstacked_dataset('z')
+    
+    assert data.identical(unstacked)
+    print("✓ Mixed dimensionality roundtrip works")
+
+def test_different_level():
+    """Test unstacking with different level"""
+    print("Testing different level...")
+    arr = xr.DataArray(
+        np.arange(12).reshape(2, 3, 2),
+        coords=[("x", ["a", "b"]), ("y", [0, 1, 2]), ("z", [0, 1])]
+    )
+    data = xr.Dataset({"var1": arr, "var2": arr})
+    
+    stacked = data.to_stacked_array('w', sample_dims=['x'])
+    # Unstack with level 1 (y dimension values become variables)
+    unstacked = stacked.to_unstacked_dataset('w', level=1)
+    
+    # Should have variables named after y dimension values
+    assert set(unstacked.data_vars.keys()) == {0, 1, 2}
+    print("✓ Different level works")
+
+if __name__ == "__main__":
+    print("Running comprehensive tests for to_unstacked_dataset fix...\n")
+    
+    test_single_dim_roundtrip()
+    test_multi_dim_roundtrip()
+    test_mixed_dims_roundtrip()
+    test_different_level()
+    
+    print("\n✓ All tests passed! The fix works correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..f53bc3c9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+import xarray as xr
+import numpy as np
+
+print("Reproducing the issue with to_unstacked_dataset for single-dim variables...")
+
+# Create test data as described in the issue
+arr = xr.DataArray(
+     np.arange(3),
+     coords=[("x", [0, 1, 2])],
+)
+data = xr.Dataset({"a": arr, "b": arr})
+
+print("Original dataset:")
+print(data)
+print()
+
+print("Stacking the dataset...")
+stacked = data.to_stacked_array('y', sample_dims=['x'])
+print("Stacked array:")
+print(stacked)
+print()
+
+print("Attempting to unstack...")
+try:
+    unstacked = stacked.to_unstacked_dataset('y')
+    print("Unstacked dataset:")
+    print(unstacked)
+    print("Success!")
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..15b41174
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,60 @@
+import xarray as xr
+import numpy as np
+
+print("Testing edge cases for to_unstacked_dataset fix...")
+
+# Test case 1: Original issue - single dimension variables
+print("\n1. Testing single dimension variables (original issue):")
+arr = xr.DataArray(np.arange(3), coords=[("x", [0, 1, 2])])
+data = xr.Dataset({"a": arr, "b": arr})
+stacked = data.to_stacked_array('y', sample_dims=['x'])
+unstacked = stacked.to_unstacked_dataset('y')
+print("Success!")
+
+# Test case 2: Multi-dimensional variables
+print("\n2. Testing multi-dimensional variables:")
+arr2d = xr.DataArray(
+    np.arange(6).reshape(2, 3),
+    coords=[("x", ["a", "b"]), ("y", [0, 1, 2])]
+)
+data2d = xr.Dataset({"a": arr2d, "b": arr2d})
+stacked2d = data2d.to_stacked_array('z', sample_dims=['x'])
+unstacked2d = stacked2d.to_unstacked_dataset('z')
+print("Success!")
+
+# Test case 3: Mixed dimensionality
+print("\n3. Testing mixed dimensionality:")
+data_mixed = xr.Dataset({
+    "a": arr2d,  # 2D
+    "b": arr     # 1D
+})
+stacked_mixed = data_mixed.to_stacked_array('z', sample_dims=['x'])
+unstacked_mixed = stacked_mixed.to_unstacked_dataset('z')
+print("Success!")
+
+# Test case 4: Different level
+print("\n4. Testing different level:")
+# Create data with multiple levels in MultiIndex
+arr_multi = xr.DataArray(
+    np.arange(12).reshape(2, 3, 2),
+    coords=[("x", ["a", "b"]), ("y", [0, 1, 2]), ("z", [0, 1])]
+)
+data_multi = xr.Dataset({"var1": arr_multi, "var2": arr_multi})
+stacked_multi = data_multi.to_stacked_array('w', sample_dims=['x'])
+# Test unstacking with level 1 instead of 0
+try:
+    unstacked_multi = stacked_multi.to_unstacked_dataset('w', level=1)
+    print("Success!")
+except Exception as e:
+    print(f"Level 1 test failed: {e}")
+
+# Test case 5: Empty dataset (edge case)
+print("\n5. Testing empty dataset:")
+empty_data = xr.Dataset()
+try:
+    empty_stacked = empty_data.to_stacked_array('y', sample_dims=['x'])
+    print("Empty dataset stacked (unexpected success)")
+except Exception as e:
+    print(f"Empty dataset correctly failed: {e}")
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index b0df8749..a0c3daff 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -1961,7 +1961,11 @@ class DataArray(AbstractArray, DataWithCoords):
         # pull variables out of datarray
         data_dict = {}
         for k in variables:
-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)
+            squeezed = self.sel({variable_dim: k}).squeeze(drop=True)
+            # Only drop the dimension coordinate if it exists
+            if dim in squeezed.coords:
+                squeezed = squeezed.drop(dim)
+            data_dict[k] = squeezed
 
         # unstacked dataset
         return Dataset(data_dict)
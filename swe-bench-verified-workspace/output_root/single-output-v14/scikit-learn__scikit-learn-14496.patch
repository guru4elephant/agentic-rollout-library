diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..92b02c97c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.cluster import OPTICS
+from sklearn.datasets import make_blobs
+
+# Create some sample data
+data, _ = make_blobs(n_samples=100, centers=3, random_state=42)
+
+try:
+    # This should reproduce the issue
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)
+    clust.fit(data)
+    print("SUCCESS: No error occurred")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py
index 4f7eb11ab..bd97d6357 100755
--- a/sklearn/cluster/optics_.py
+++ b/sklearn/cluster/optics_.py
@@ -437,7 +437,7 @@ if metric=’precomputed’.
     n_samples = X.shape[0]
     _validate_size(min_samples, n_samples, 'min_samples')
     if min_samples <= 1:
-        min_samples = max(2, min_samples * n_samples)
+        min_samples = int(round(max(2, min_samples * n_samples)))
 
     # Start all points as 'unprocessed' ##
     reachability_ = np.empty(n_samples)
@@ -619,12 +619,12 @@ def cluster_optics_xi(reachability, predecessor, ordering, min_samples,
     n_samples = len(reachability)
     _validate_size(min_samples, n_samples, 'min_samples')
     if min_samples <= 1:
-        min_samples = max(2, min_samples * n_samples)
+        min_samples = int(round(max(2, min_samples * n_samples)))
     if min_cluster_size is None:
         min_cluster_size = min_samples
     _validate_size(min_cluster_size, n_samples, 'min_cluster_size')
     if min_cluster_size <= 1:
-        min_cluster_size = max(2, min_cluster_size * n_samples)
+        min_cluster_size = int(round(max(2, min_cluster_size * n_samples)))
 
     clusters = _xi_cluster(reachability[ordering], predecessor[ordering],
                            ordering, xi,
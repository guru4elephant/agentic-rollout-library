diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..8c5a7ce6bf 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,6 +101,9 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+        # Check for forbidden characters (LF, CR, tab) that would be stripped by urlsplit
+        if any(char in value for char in ('\n', '\r', '\t')):
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..89962fd7d1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))
+
+# Configure Django settings
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='dummy-secret-key-for-testing',
+    )
+    django.setup()
+
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+# Test the URLs that are failing according to the issue
+test_urls = [
+    'http://www.djangoproject.com/\n',
+    'http://[::ffff:192.9.5.5]\n'
+]
+
+validator = URLValidator()
+
+print("Testing URLs that should fail with ValidationError:")
+for url in test_urls:
+    print(f"\nTesting URL: {repr(url)}")
+    try:
+        validator(url)
+        print(f"  ‚ùå FAILED: No ValidationError raised for {repr(url)}")
+    except ValidationError as e:
+        print(f"  ‚úÖ PASSED: ValidationError raised: {e}")
+    except Exception as e:
+        print(f"  ‚ö†Ô∏è  UNEXPECTED ERROR: {type(e).__name__}: {e}")
+
+# Let's also check what urlsplit does with these URLs
+print("\n" + "="*50)
+print("Testing urlsplit behavior:")
+from urllib.parse import urlsplit
+
+for url in test_urls:
+    print(f"\nURL: {repr(url)}")
+    try:
+        result = urlsplit(url)
+        print(f"  urlsplit result: {result}")
+        print(f"  netloc: {repr(result.netloc)}")
+        print(f"  hostname: {repr(result.hostname)}")
+    except Exception as e:
+        print(f"  urlsplit error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..ab15d21c29
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))
+
+# Configure Django settings
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='dummy-secret-key-for-testing',
+    )
+    django.setup()
+
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+# Test various edge cases with forbidden characters
+test_cases = [
+    # Original failing cases from the issue
+    ('http://www.djangoproject.com/\n', True),
+    ('http://[::ffff:192.9.5.5]\n', True),
+    
+    # Other forbidden characters
+    ('http://example.com/\r', True),
+    ('http://example.com/\t', True),
+    
+    # Multiple forbidden characters
+    ('http://example.com/\n\r\t', True),
+    
+    # Forbidden characters in different parts of the URL
+    ('http://exa\nmple.com/', True),
+    ('http://example.com/path\n', True),
+    ('http://example.com/?query=\n', True),
+    ('http://example.com/#frag\nment', True),
+    
+    # Valid URLs (should not raise ValidationError)
+    ('http://www.djangoproject.com/', False),
+    ('http://[::ffff:192.9.5.5]', False),
+    ('https://example.com/path', False),
+    ('ftp://example.com/', False),
+    
+    # URLs with other invalid characters (should still be caught by normal validation)
+    ('http:// example.com/', True),  # space
+    ('invalid://example.com/', True),  # invalid scheme
+]
+
+validator = URLValidator()
+
+print("Testing edge cases for URLValidator:")
+print("=" * 60)
+
+all_passed = True
+
+for url, should_fail in test_cases:
+    print(f"\nTesting URL: {repr(url)}")
+    print(f"Expected to fail: {should_fail}")
+    
+    try:
+        validator(url)
+        if should_fail:
+            print("  ‚ùå FAILED: Expected ValidationError but none was raised")
+            all_passed = False
+        else:
+            print("  ‚úÖ PASSED: No ValidationError (as expected)")
+    except ValidationError:
+        if should_fail:
+            print("  ‚úÖ PASSED: ValidationError raised (as expected)")
+        else:
+            print("  ‚ùå FAILED: Unexpected ValidationError raised")
+            all_passed = False
+    except Exception as e:
+        print(f"  ‚ö†Ô∏è  UNEXPECTED ERROR: {type(e).__name__}: {e}")
+        all_passed = False
+
+print("\n" + "=" * 60)
+if all_passed:
+    print("üéâ All tests passed!")
+else:
+    print("‚ùå Some tests failed!")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..887004ccd5
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))
+
+# Configure Django settings
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='dummy-secret-key-for-testing',
+    )
+    django.setup()
+
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+# Test the exact URLs mentioned in the GitHub issue
+test_urls = [
+    'http://www.djangoproject.com/\n',
+    'http://[::ffff:192.9.5.5]\n'
+]
+
+validator = URLValidator()
+
+print("Testing the exact URLs from the GitHub issue:")
+print("=" * 50)
+
+for url in test_urls:
+    print(f"\nTesting: {repr(url)}")
+    try:
+        validator(url)
+        print("‚ùå FAIL: No ValidationError raised (this should fail according to the issue)")
+    except ValidationError:
+        print("‚úÖ PASS: ValidationError correctly raised")
+    except Exception as e:
+        print(f"‚ö†Ô∏è  UNEXPECTED: {type(e).__name__}: {e}")
+
+print("\n" + "=" * 50)
+print("The fix should make these tests pass by catching the forbidden")
+print("characters (LF, CR, tab) before urlsplit strips them.")
\ No newline at end of file
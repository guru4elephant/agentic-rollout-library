diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..75494b173f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+import sympy as sy
+
+print("Testing hstack with zero-row matrices:")
+M1 = sy.Matrix.zeros(0, 0)
+M2 = sy.Matrix.zeros(0, 1)
+M3 = sy.Matrix.zeros(0, 2)
+M4 = sy.Matrix.zeros(0, 3)
+
+result = sy.Matrix.hstack(M1, M2, M3, M4)
+print(f"Result shape: {result.shape}")
+print(f"Expected: (0, 6), Got: {result.shape}")
+
+print("\nTesting hstack with one-row matrices for comparison:")
+M1_1row = sy.Matrix.zeros(1, 0)
+M2_1row = sy.Matrix.zeros(1, 1)
+M3_1row = sy.Matrix.zeros(1, 2)
+M4_1row = sy.Matrix.zeros(1, 3)
+
+result_1row = sy.Matrix.hstack(M1_1row, M2_1row, M3_1row, M4_1row)
+print(f"Result shape: {result_1row.shape}")
+print(f"Expected: (1, 6), Got: {result_1row.shape}")
\ No newline at end of file
diff --git a/sympy/matrices/sparse.py b/sympy/matrices/sparse.py
index e6f36cdf35..a69331e20a 100644
--- a/sympy/matrices/sparse.py
+++ b/sympy/matrices/sparse.py
@@ -985,11 +985,13 @@ def col_join(self, other):
         >>> C == A.row_insert(A.rows, Matrix(B))
         True
         """
-        if not self:
-            return type(self)(other)
-        A, B = self, other
-        if not A.cols == B.cols:
+        # A null matrix can always be stacked (see  #10770)
+        if self.rows == 0 and self.cols != other.cols:
+            return self._new(0, other.cols, {}).col_join(other)
+        
+        if not self.cols == other.cols:
             raise ShapeError()
+        A, B = self, other
         A = A.copy()
         if not isinstance(B, SparseMatrix):
             k = 0
@@ -1191,11 +1193,13 @@ def row_join(self, other):
         >>> C == A.col_insert(A.cols, B)
         True
         """
-        if not self:
-            return type(self)(other)
-        A, B = self, other
-        if not A.rows == B.rows:
+        # A null matrix can always be stacked (see  #10770)
+        if self.cols == 0 and self.rows != other.rows:
+            return self._new(other.rows, 0, {}).row_join(other)
+        
+        if not self.rows == other.rows:
             raise ShapeError()
+        A, B = self, other
         A = A.copy()
         if not isinstance(B, SparseMatrix):
             k = 0
diff --git a/test_sparse_issue.py b/test_sparse_issue.py
new file mode 100644
index 0000000000..c0d814538f
--- /dev/null
+++ b/test_sparse_issue.py
@@ -0,0 +1,18 @@
+import sympy as sy
+
+print("Testing with sparse matrices:")
+M1 = sy.SparseMatrix.zeros(0, 0)
+M2 = sy.SparseMatrix.zeros(0, 1)
+M3 = sy.SparseMatrix.zeros(0, 2)
+M4 = sy.SparseMatrix.zeros(0, 3)
+
+print(f"M1 shape: {M1.shape}")
+print(f"M2 shape: {M2.shape}")
+print(f"M3 shape: {M3.shape}")
+print(f"M4 shape: {M4.shape}")
+
+result = sy.SparseMatrix.hstack(M1, M2, M3, M4)
+print(f"sy.SparseMatrix.hstack(M1, M2, M3, M4) shape: {result.shape}")
+
+print("\nExpected: (0, 6)")
+print(f"Actual: {result.shape}")
\ No newline at end of file
diff --git a/test_sparse_row_join.py b/test_sparse_row_join.py
new file mode 100644
index 0000000000..4192dfb858
--- /dev/null
+++ b/test_sparse_row_join.py
@@ -0,0 +1,13 @@
+import sympy as sy
+
+print("Testing sparse matrix row_join step by step:")
+M1 = sy.SparseMatrix.zeros(0, 0)
+M2 = sy.SparseMatrix.zeros(0, 1)
+
+print(f"M1 shape: {M1.shape}")
+print(f"M2 shape: {M2.shape}")
+print(f"not M1: {not M1}")
+
+result = M1.row_join(M2)
+print(f"M1.row_join(M2) shape: {result.shape}")
+print(f"Result is M2: {result is M2}")
\ No newline at end of file
diff --git a/test_sparse_vstack.py b/test_sparse_vstack.py
new file mode 100644
index 0000000000..b6b6848f38
--- /dev/null
+++ b/test_sparse_vstack.py
@@ -0,0 +1,18 @@
+import sympy as sy
+
+print("Testing vstack with sparse matrices:")
+M1 = sy.SparseMatrix.zeros(0, 0)
+M2 = sy.SparseMatrix.zeros(1, 0)
+M3 = sy.SparseMatrix.zeros(2, 0)
+M4 = sy.SparseMatrix.zeros(3, 0)
+
+print(f"M1 shape: {M1.shape}")
+print(f"M2 shape: {M2.shape}")
+print(f"M3 shape: {M3.shape}")
+print(f"M4 shape: {M4.shape}")
+
+result = sy.SparseMatrix.vstack(M1, M2, M3, M4)
+print(f"sy.SparseMatrix.vstack(M1, M2, M3, M4) shape: {result.shape}")
+
+print("\nExpected: (6, 0)")
+print(f"Actual: {result.shape}")
\ No newline at end of file
diff --git a/test_specific_issue.py b/test_specific_issue.py
new file mode 100644
index 0000000000..952eba3613
--- /dev/null
+++ b/test_specific_issue.py
@@ -0,0 +1,28 @@
+import sympy as sy
+
+print("Testing the specific case from the GitHub issue:")
+M1 = sy.Matrix.zeros(0, 0)
+M2 = sy.Matrix.zeros(0, 1)
+M3 = sy.Matrix.zeros(0, 2)
+M4 = sy.Matrix.zeros(0, 3)
+
+print(f"M1 shape: {M1.shape}")
+print(f"M2 shape: {M2.shape}")
+print(f"M3 shape: {M3.shape}")
+print(f"M4 shape: {M4.shape}")
+
+# Test step by step to see where the issue occurs
+result1 = M1.row_join(M2)
+print(f"M1.row_join(M2) shape: {result1.shape}")
+
+result2 = result1.row_join(M3)
+print(f"result1.row_join(M3) shape: {result2.shape}")
+
+result3 = result2.row_join(M4)
+print(f"result2.row_join(M4) shape: {result3.shape}")
+
+final_result = sy.Matrix.hstack(M1, M2, M3, M4)
+print(f"sy.Matrix.hstack(M1, M2, M3, M4) shape: {final_result.shape}")
+
+print("\nExpected: (0, 6)")
+print(f"Actual: {final_result.shape}")
\ No newline at end of file
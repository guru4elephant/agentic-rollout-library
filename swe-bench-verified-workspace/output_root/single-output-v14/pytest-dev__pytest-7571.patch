diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..ba19b1015
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+import pytest
+
+def test_foo(caplog):
+    print(f"Before set_level: {caplog.handler.level}")
+    caplog.set_level(42)
+    print(f"After set_level: {caplog.handler.level}")
+
+def test_bar(caplog):
+    print(f"Handler level in second test: {caplog.handler.level}")
+
+if __name__ == "__main__":
+    # Run the tests to reproduce the issue
+    pytest.main([__file__, "-v", "-s"])
\ No newline at end of file
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index 11031f2f2..d6a118b35 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -346,6 +346,8 @@ class LogCaptureFixture:
         self._item = item
         # dict of log name -> log level
         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]
+        # store original handler level for restoration
+        self._initial_handler_level = None  # type: Optional[int]
 
     def _finalize(self) -> None:
         """Finalizes the fixture.
@@ -356,6 +358,9 @@ class LogCaptureFixture:
         for logger_name, level in self._initial_logger_levels.items():
             logger = logging.getLogger(logger_name)
             logger.setLevel(level)
+        # restore handler level
+        if self._initial_handler_level is not None:
+            self.handler.setLevel(self._initial_handler_level)
 
     @property
     def handler(self) -> LogCaptureHandler:
@@ -433,6 +438,9 @@ class LogCaptureFixture:
         logger_obj = logging.getLogger(logger)
         # save the original log-level to restore it during teardown
         self._initial_logger_levels.setdefault(logger, logger_obj.level)
+        # save the original handler level if not already saved
+        if self._initial_handler_level is None:
+            self._initial_handler_level = self.handler.level
         logger_obj.setLevel(level)
         self.handler.setLevel(level)
 
diff --git a/test_at_level_context.py b/test_at_level_context.py
new file mode 100644
index 000000000..3737a7302
--- /dev/null
+++ b/test_at_level_context.py
@@ -0,0 +1,19 @@
+import pytest
+import logging
+
+def test_at_level_context_manager(caplog):
+    """Test that at_level context manager still works correctly"""
+    print(f"Before context manager: {caplog.handler.level}")
+    
+    with caplog.at_level(42):
+        print(f"Inside context manager: {caplog.handler.level}")
+    
+    print(f"After context manager: {caplog.handler.level}")
+
+def test_handler_level_after_context_manager(caplog):
+    """Test that handler level is correct after context manager"""
+    print(f"Handler level in second test: {caplog.handler.level}")
+    assert caplog.handler.level == 0, "Handler level should be restored to default"
+
+if __name__ == "__main__":
+    pytest.main([__file__, "-v", "-s"])
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..55a2fd241
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+import pytest
+import logging
+
+def test_multiple_set_level_calls(caplog):
+    """Test that multiple set_level calls only save the original handler level once"""
+    print(f"Initial handler level: {caplog.handler.level}")
+    
+    caplog.set_level(10)
+    print(f"After first set_level: {caplog.handler.level}")
+    
+    caplog.set_level(20) 
+    print(f"After second set_level: {caplog.handler.level}")
+    
+    caplog.set_level(30)
+    print(f"After third set_level: {caplog.handler.level}")
+
+def test_handler_level_restored(caplog):
+    """Test that handler level is properly restored"""
+    print(f"Handler level in second test: {caplog.handler.level}")
+    assert caplog.handler.level == 0, "Handler level should be restored to default"
+
+def test_logger_levels_still_restored(caplog):
+    """Test that logger levels are still properly restored"""
+    import logging
+    
+    # Set level for root logger
+    caplog.set_level(logging.INFO)
+    root_logger = logging.getLogger()
+    assert root_logger.level == logging.INFO
+    
+    # Set level for specific logger
+    test_logger = logging.getLogger("test_logger")
+    original_level = test_logger.level
+    caplog.set_level(logging.DEBUG, logger="test_logger")
+    assert test_logger.level == logging.DEBUG
+
+def test_logger_levels_restored_after_test(caplog):
+    """Verify logger levels are restored after test"""
+    import logging
+    
+    test_logger = logging.getLogger("test_logger")
+    original_level = test_logger.level
+    
+    caplog.set_level(logging.WARNING, logger="test_logger")
+    assert test_logger.level == logging.WARNING
+
+if __name__ == "__main__":
+    pytest.main([__file__, "-v", "-s"])
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..c5d1327cb
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,10 @@
+import pytest
+
+def test_foo(caplog):
+    caplog.set_level(42)
+
+def test_bar(caplog):
+    print(caplog.handler.level)
+
+if __name__ == "__main__":
+    pytest.main([__file__, "-v", "-s"])
\ No newline at end of file
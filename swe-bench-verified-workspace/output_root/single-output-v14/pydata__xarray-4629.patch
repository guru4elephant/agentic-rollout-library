diff --git a/final_test.py b/final_test.py
new file mode 100644
index 00000000..39002de3
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,74 @@
+import xarray as xr
+
+def test_original_issue():
+    """Test the exact issue reported in the GitHub issue"""
+    print("Testing original issue...")
+    xds1 = xr.Dataset(attrs={'a':'b'})
+    xds2 = xr.Dataset(attrs={'a':'c'})
+    print(f"Before merge: xds1.a={xds1.attrs['a']}, xds2.a={xds2.attrs['a']}")
+    
+    xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+    print(f"After merge: xds1.a={xds1.attrs['a']}, xds2.a={xds2.attrs['a']}, xds3.a={xds3.attrs['a']}")
+    
+    xds3.attrs['a'] = 'd'
+    print(f"After modification: xds1.a={xds1.attrs['a']}, xds2.a={xds2.attrs['a']}, xds3.a={xds3.attrs['a']}")
+    
+    # The fix: xds1 should not be modified
+    assert xds1.attrs['a'] == 'b', f"Expected 'b', got {xds1.attrs['a']}"
+    assert xds2.attrs['a'] == 'c', f"Expected 'c', got {xds2.attrs['a']}"
+    assert xds3.attrs['a'] == 'd', f"Expected 'd', got {xds3.attrs['a']}"
+    print("âœ“ Original issue fixed!")
+
+def test_other_combine_attrs_modes():
+    """Test that other combine_attrs modes still work correctly"""
+    print("\nTesting other combine_attrs modes...")
+    
+    xds1 = xr.Dataset(attrs={'a': 'b'})
+    xds2 = xr.Dataset(attrs={'a': 'c'})
+    
+    # Test drop mode
+    xds3 = xr.merge([xds1, xds2], combine_attrs='drop')
+    assert xds3.attrs == {}, f"Expected empty attrs, got {xds3.attrs}"
+    print("âœ“ drop mode works")
+    
+    # Test no_conflicts mode (should fail with conflicting attrs)
+    try:
+        xds3 = xr.merge([xds1, xds2], combine_attrs='no_conflicts')
+        assert False, "no_conflicts should have failed"
+    except xr.core.merge.MergeError:
+        print("âœ“ no_conflicts mode correctly fails with conflicts")
+    
+    # Test identical mode (should fail with different attrs)
+    try:
+        xds3 = xr.merge([xds1, xds2], combine_attrs='identical')
+        assert False, "identical should have failed"
+    except xr.core.merge.MergeError:
+        print("âœ“ identical mode correctly fails with different attrs")
+
+def test_edge_cases():
+    """Test edge cases for the override mode"""
+    print("\nTesting edge cases...")
+    
+    # Test with empty attributes
+    xds1 = xr.Dataset(attrs={})
+    xds2 = xr.Dataset(attrs={'a': 'c'})
+    xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+    assert xds3.attrs == {}, "Empty attrs should remain empty"
+    print("âœ“ Empty attributes handled correctly")
+    
+    # Test with multiple attributes
+    xds1 = xr.Dataset(attrs={'a': 'b', 'x': 'y'})
+    xds2 = xr.Dataset(attrs={'a': 'c', 'z': 'w'})
+    xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+    assert xds3.attrs == {'a': 'b', 'x': 'y'}, f"Expected {{'a': 'b', 'x': 'y'}}, got {xds3.attrs}"
+    
+    # Modify and ensure original is not affected
+    xds3.attrs['a'] = 'modified'
+    assert xds1.attrs['a'] == 'b', "Original dataset should not be modified"
+    print("âœ“ Multiple attributes handled correctly")
+
+if __name__ == "__main__":
+    test_original_issue()
+    test_other_combine_attrs_modes()
+    test_edge_cases()
+    print("\nðŸŽ‰ All tests passed! The fix is working correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..5f449039
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+import xarray as xr
+
+# Reproduce the issue described in the GitHub issue
+xds1 = xr.Dataset(attrs={'a':'b'})
+xds2 = xr.Dataset(attrs={'a':'c'})
+print(f"a1: {xds1.attrs['a']}, a2: {xds2.attrs['a']}")
+
+xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+print(f"a1: {xds1.attrs['a']}, a2: {xds2.attrs['a']}, a3: {xds3.attrs['a']}")
+
+xds3.attrs['a'] = 'd'
+print(f"a1: {xds1.attrs['a']}, a2: {xds2.attrs['a']}, a3: {xds3.attrs['a']}")
+
+# The issue: xds1.attrs['a'] should remain 'b' but becomes 'd'
+if xds1.attrs['a'] == 'b':
+    print("SUCCESS: The issue is fixed!")
+else:
+    print("FAILURE: The issue still exists - xds1 was modified!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..6a6b6e6e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+import xarray as xr
+
+# Test 1: Empty attributes
+print("Test 1: Empty attributes")
+xds1 = xr.Dataset(attrs={})
+xds2 = xr.Dataset(attrs={'a':'c'})
+xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+print(f"Empty attrs test: {xds3.attrs}")
+
+# Test 2: Multiple attributes
+print("\nTest 2: Multiple attributes")
+xds1 = xr.Dataset(attrs={'a':'b', 'x':'y'})
+xds2 = xr.Dataset(attrs={'a':'c', 'z':'w'})
+xds3 = xr.merge([xds1, xds2], combine_attrs='override')
+print(f"Multiple attrs test: {xds3.attrs}")
+xds3.attrs['a'] = 'modified'
+print(f"After modification - xds1: {xds1.attrs}, xds3: {xds3.attrs}")
+
+# Test 3: Other combine_attrs modes should still work
+print("\nTest 3: Other combine_attrs modes")
+xds1 = xr.Dataset(attrs={'a':'b'})
+xds2 = xr.Dataset(attrs={'a':'c'})
+
+try:
+    xds3 = xr.merge([xds1, xds2], combine_attrs='identical')
+    print("identical mode should have failed but didn't")
+except Exception as e:
+    print(f"identical mode correctly failed: {e}")
+
+try:
+    xds3 = xr.merge([xds1, xds2], combine_attrs='no_conflicts')
+    print("no_conflicts mode should have failed but didn't")
+except Exception as e:
+    print(f"no_conflicts mode correctly failed: {e}")
+
+xds3 = xr.merge([xds1, xds2], combine_attrs='drop')
+print(f"drop mode works: {xds3.attrs}")
\ No newline at end of file
diff --git a/xarray/core/merge.py b/xarray/core/merge.py
index ca4e29b6..dff00804 100644
--- a/xarray/core/merge.py
+++ b/xarray/core/merge.py
@@ -501,7 +501,7 @@ def merge_attrs(variable_attrs, combine_attrs):
     if combine_attrs == "drop":
         return {}
     elif combine_attrs == "override":
-        return variable_attrs[0]
+        return dict(variable_attrs[0])
     elif combine_attrs == "no_conflicts":
         result = dict(variable_attrs[0])
         for attrs in variable_attrs[1:]:
diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 0000000000..aa57080fbb
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+import datetime
+
+# Test the specific case that's failing
+d1 = datetime.datetime(1997, 1, 1)
+t_delta = datetime.timedelta(weeks=26)  # 26 weeks = about 6 months
+d2 = d1 + t_delta
+
+print(f"Date range: {d1} to {d2}")
+
+fig, ax = plt.subplots()
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+ax.xaxis.set_major_locator(locator)
+ax.xaxis.set_major_formatter(formatter)
+
+ax.plot([d1, d2], [0, 0])
+fig.canvas.draw()
+
+print(f"Offset: '{formatter.get_offset()}'")
+print(f"Expected: '' (empty)")
+
+# We can't easily get the tick values without triggering the same error
+# Let's just check the offset behavior
+print("The offset shows the year '1997' which provides context for the 6-month period")
+
+plt.close()
\ No newline at end of file
diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 4d8ddf3ee5..b1fda63635 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -799,6 +799,16 @@ class ConciseDateFormatter(ticker.Formatter):
             if len(np.unique(tickdate[:, level])) > 1:
                 if level < 2:
                     show_offset = False
+                    # Special case: if we're at month level and the year doesn't change,
+                    # but January is not included in the tick labels, show the year offset
+                    if level == 1:
+                        # Check if all ticks are in the same year
+                        years_unique = np.unique(tickdate[:, 0])
+                        if len(years_unique) == 1:
+                            # Check if January is not included in the month labels
+                            january_included = any(dt.month == 1 for dt in tickdatetime)
+                            if not january_included:
+                                show_offset = True
                 break
             elif level == 0:
                 # all tickdate are the same, so only micros might be different
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d466af94c4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+
+#create time array
+initial = datetime(2021,2,14,0,0,0)
+time_array = [initial + timedelta(days=x) for x in range(1,200)]
+
+#create data array
+data = [-x**2/20000 for x in range(1,200)]
+
+
+#plot data
+fig,ax = plt.subplots()
+ax.plot(time_array,data) 
+        
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+
+ax.grid(True)
+ax.set_ylabel("Temperature ($\degree$C)")
+ax.xaxis.set_major_locator(locator)   
+ax.xaxis.set_major_formatter(formatter)
+fig.autofmt_xdate() #automatically makes the x-labels rotate
+
+# Save the figure to see the output
+plt.savefig('test_output.png')
+plt.close()
+
+# Also print the offset string to see what's being shown
+print("Offset string:", formatter.get_offset())
\ No newline at end of file
diff --git a/specific_issue_output.png b/specific_issue_output.png
new file mode 100644
index 0000000000..7d7eaefce3
Binary files /dev/null and b/specific_issue_output.png differ
diff --git a/test_january_check.py b/test_january_check.py
new file mode 100644
index 0000000000..192e023675
--- /dev/null
+++ b/test_january_check.py
@@ -0,0 +1,35 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+import datetime
+
+# Test case 1: Starts from January (should NOT show year offset according to original behavior)
+d1 = datetime.datetime(1997, 1, 1)
+d2 = d1 + datetime.timedelta(weeks=26)  # 26 weeks = about 6 months
+
+fig, ax = plt.subplots()
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+ax.xaxis.set_major_locator(locator)
+ax.xaxis.set_major_formatter(formatter)
+
+ax.plot([d1, d2], [0, 0])
+fig.canvas.draw()
+
+print(f"Case 1 (Jan 1 to Jul 2): Offset='{formatter.get_offset()}'")
+plt.close()
+
+# Test case 2: Starts from February (SHOULD show year offset according to GitHub issue)
+d1 = datetime.datetime(1997, 2, 1)
+d2 = d1 + datetime.timedelta(weeks=26)  # 26 weeks = about 6 months
+
+fig, ax = plt.subplots()
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+ax.xaxis.set_major_locator(locator)
+ax.xaxis.set_major_formatter(formatter)
+
+ax.plot([d1, d2], [0, 0])
+fig.canvas.draw()
+
+print(f"Case 2 (Feb 1 to Aug 2): Offset='{formatter.get_offset()}'")
+plt.close()
\ No newline at end of file
diff --git a/test_output.png b/test_output.png
new file mode 100644
index 0000000000..7d7eaefce3
Binary files /dev/null and b/test_output.png differ
diff --git a/test_specific_issue.py b/test_specific_issue.py
new file mode 100644
index 0000000000..40f8563957
--- /dev/null
+++ b/test_specific_issue.py
@@ -0,0 +1,38 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+
+# Test case from the GitHub issue: plotting <12 months starting from Feb 2021
+initial = datetime(2021, 2, 14, 0, 0, 0)
+time_array = [initial + timedelta(days=x) for x in range(1, 200)]  # About 6.5 months
+
+#create data array
+data = [-x**2/20000 for x in range(1, 200)]
+
+#plot data
+fig, ax = plt.subplots()
+ax.plot(time_array, data) 
+
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+
+ax.grid(True)
+ax.set_ylabel("Temperature ($\degree$C)")
+ax.xaxis.set_major_locator(locator)   
+ax.xaxis.set_major_formatter(formatter)
+fig.autofmt_xdate()
+
+# Draw the figure to trigger formatter
+fig.canvas.draw()
+
+# Check the offset
+print("Offset string:", formatter.get_offset())
+print("Expected: Should show '2021' since we're plotting data from 2021")
+
+# Also check what level we're at and what the tick dates are
+tick_values = locator.tick_values(time_array[0], time_array[-1])
+tick_datetime = [mdates.num2date(value) for value in tick_values]
+print("Tick dates:", [d.strftime('%Y-%m-%d') for d in tick_datetime])
+
+plt.savefig('specific_issue_output.png')
+plt.close()
\ No newline at end of file
diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..d200934a70 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1746,7 +1746,16 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
         raise RuntimeError("matplotlib does not "
                            "support generators as input")
     else:
-        return next(val for val in obj if safe_isfinite(val))
+        try:
+            return next(val for val in obj if safe_isfinite(val))
+        except StopIteration:
+            # If no finite values are found, return the first element
+            # This maintains backward compatibility with previous behavior
+            try:
+                return next(iter(obj))
+            except StopIteration:
+                # If the object is empty, return None
+                return None
 
 
 def sanitize_sequence(data):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b5ca061f1f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test case 1: Both x and height are nan
+f, ax = plt.subplots()
+try:
+    bars = ax.bar([np.nan], [np.nan])
+    print("Test 1 passed: ax.bar([np.nan], [np.nan]) works")
+    print(f"Return type: {type(bars)}")
+    print(f"Number of bars: {len(bars)}")
+    if len(bars) > 0:
+        print(f"First bar x: {bars[0].get_x()}")
+except Exception as e:
+    print(f"Test 1 failed: {e}")
+
+# Test case 2: Only x is nan, height is 0
+try:
+    bars = ax.bar([np.nan], [0])
+    print("Test 2 passed: ax.bar([np.nan], [0]) works")
+    print(f"Return type: {type(bars)}")
+    print(f"Number of bars: {len(bars)}")
+    if len(bars) > 0:
+        print(f"First bar x: {bars[0].get_x()}")
+except Exception as e:
+    print(f"Test 2 failed: {e}")
+
+# Test case 3: Only height is nan, x is 0
+try:
+    bars = ax.bar([0], [np.nan])
+    print("Test 3 passed: ax.bar([0], [np.nan]) works")
+    print(f"Return type: {type(bars)}")
+    print(f"Number of bars: {len(bars)}")
+    if len(bars) > 0:
+        print(f"First bar x: {bars[0].get_x()}")
+except Exception as e:
+    print(f"Test 3 failed: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6286e9ae37
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,44 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test various edge cases
+f, ax = plt.subplots()
+
+# Test case 1: Empty array
+try:
+    bars = ax.bar([], [])
+    print("Test 1 passed: ax.bar([], []) works")
+except Exception as e:
+    print(f"Test 1 failed: {e}")
+
+# Test case 2: Multiple NaN values
+try:
+    bars = ax.bar([np.nan, np.nan], [np.nan, np.nan])
+    print("Test 2 passed: ax.bar([np.nan, np.nan], [np.nan, np.nan]) works")
+    print(f"Number of bars: {len(bars)}")
+except Exception as e:
+    print(f"Test 2 failed: {e}")
+
+# Test case 3: Mixed finite and NaN values
+try:
+    bars = ax.bar([1, np.nan, 2], [3, np.nan, 4])
+    print("Test 3 passed: ax.bar([1, np.nan, 2], [3, np.nan, 4]) works")
+    print(f"Number of bars: {len(bars)}")
+except Exception as e:
+    print(f"Test 3 failed: {e}")
+
+# Test case 4: Infinity values
+try:
+    bars = ax.bar([np.inf], [np.inf])
+    print("Test 4 passed: ax.bar([np.inf], [np.inf]) works")
+    print(f"Number of bars: {len(bars)}")
+except Exception as e:
+    print(f"Test 4 failed: {e}")
+
+# Test case 5: Negative infinity values
+try:
+    bars = ax.bar([-np.inf], [-np.inf])
+    print("Test 5 passed: ax.bar([-np.inf], [-np.inf]) works")
+    print(f"Number of bars: {len(bars)}")
+except Exception as e:
+    print(f"Test 5 failed: {e}")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..46b3db77ac
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,17 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Original reproduction code from the issue
+f, ax = plt.subplots()
+try:
+    bar_collection = ax.bar([np.nan], [np.nan])
+    print("Original issue test passed: ax.bar([np.nan], [np.nan]) works")
+    print(f"Return type: {type(bar_collection)}")
+    print(f"Number of bars: {len(bar_collection)}")
+    if len(bar_collection) > 0:
+        print(f"First bar x: {bar_collection[0].get_x()}")
+        print(f"First bar height: {bar_collection[0].get_height()}")
+except Exception as e:
+    print(f"Original issue test failed: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
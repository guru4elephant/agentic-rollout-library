diff --git a/current_behavior.png b/current_behavior.png
new file mode 100644
index 0000000000..fc81b671e7
Binary files /dev/null and b/current_behavior.png differ
diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 144eadeae2..6f92fd73d6 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1123,7 +1123,18 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
         """
         if self.levels is None:
             if len(args) == 0:
-                levels_arg = 7  # Default, hard-wired.
+                # Auto-detect boolean arrays
+                if (hasattr(self, '_original_z') and 
+                    hasattr(self._original_z, 'dtype') and 
+                    self._original_z.dtype == np.bool_):
+                    if self.filled:
+                        # For filled contours, use [0, 0.5, 1] for boolean arrays
+                        levels_arg = [0, 0.5, 1]
+                    else:
+                        # For line contours, use [0.5] for boolean arrays
+                        levels_arg = [0.5]
+                else:
+                    levels_arg = 7  # Default, hard-wired.
             else:
                 levels_arg = args[0]
         else:
@@ -1447,10 +1458,14 @@ class QuadContourSet(ContourSet):
             fn = 'contour'
         nargs = len(args)
         if nargs <= 2:
+            # Store original z data for boolean detection
+            self._original_z = args[0]
             z = ma.asarray(args[0], dtype=np.float64)
             x, y = self._initialize_x_y(z)
             args = args[1:]
         elif nargs <= 4:
+            # Store original z data for boolean detection
+            self._original_z = args[2]
             x, y, z = self._check_xyz(args[:3], kwargs)
             args = args[3:]
         else:
diff --git a/original_issue_fixed.png b/original_issue_fixed.png
new file mode 100644
index 0000000000..65826cddd0
Binary files /dev/null and b/original_issue_fixed.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3b1418fed1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Create a boolean array as described in the issue
+ii, jj = np.ogrid[:100, :100]
+im = (ii + jj) % 20 < 10
+
+# Test the current behavior
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+
+# Without levels=[.5] - this shows the problem
+ax1.contour(im)
+ax1.set_title('Default levels (problematic)')
+
+# With levels=[.5] - this shows the desired behavior
+ax2.contour(im, levels=[.5])
+ax2.set_title('With levels=[0.5] (desired)')
+
+plt.tight_layout()
+plt.savefig('current_behavior.png')
+plt.close()
+
+print("Boolean array type:", im.dtype)
+print("Boolean array values:", np.unique(im))
+print("Array shape:", im.shape)
\ No newline at end of file
diff --git a/test1_boolean_auto.png b/test1_boolean_auto.png
new file mode 100644
index 0000000000..87df4f33d9
Binary files /dev/null and b/test1_boolean_auto.png differ
diff --git a/test2_float_default.png b/test2_float_default.png
new file mode 100644
index 0000000000..625d82aa16
Binary files /dev/null and b/test2_float_default.png differ
diff --git a/test3_boolean_explicit.png b/test3_boolean_explicit.png
new file mode 100644
index 0000000000..c516958c2d
Binary files /dev/null and b/test3_boolean_explicit.png differ
diff --git a/test4_integer_default.png b/test4_integer_default.png
new file mode 100644
index 0000000000..28a1db9282
Binary files /dev/null and b/test4_integer_default.png differ
diff --git a/test_boolean_contour.py b/test_boolean_contour.py
new file mode 100644
index 0000000000..6b3e4483bd
--- /dev/null
+++ b/test_boolean_contour.py
@@ -0,0 +1,69 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test 1: Boolean array without levels (should auto-detect and use [0.5])
+print("Test 1: Boolean array without levels")
+ii, jj = np.ogrid[:100, :100]
+im = (ii + jj) % 20 < 10
+
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+
+# This should now work with auto-detection
+cs1 = ax1.contour(im)
+ax1.set_title('Boolean array (auto levels)')
+
+# This is the explicit version for comparison
+cs2 = ax2.contour(im, levels=[0.5])
+ax2.set_title('Boolean array (explicit levels=[0.5])')
+
+print(f"Auto levels: {cs1.levels}")
+print(f"Explicit levels: {cs2.levels}")
+plt.tight_layout()
+plt.savefig('test1_boolean_auto.png')
+plt.close()
+
+# Test 2: Regular float array (should use default behavior)
+print("\nTest 2: Regular float array")
+z = np.random.rand(10, 10)
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+
+cs1 = ax1.contour(z)
+ax1.set_title('Float array (default levels)')
+
+cs2 = ax2.contour(z, levels=5)
+ax2.set_title('Float array (explicit levels=5)')
+
+print(f"Default levels: {cs1.levels}")
+print(f"Explicit levels: {cs2.levels}")
+plt.tight_layout()
+plt.savefig('test2_float_default.png')
+plt.close()
+
+# Test 3: Boolean array with explicit levels (should respect explicit levels)
+print("\nTest 3: Boolean array with explicit levels")
+fig, ax = plt.subplots(figsize=(5, 5))
+cs = ax.contour(im, levels=[0.2, 0.8])
+ax.set_title('Boolean array (explicit levels=[0.2, 0.8])')
+print(f"Explicit levels on boolean: {cs.levels}")
+plt.tight_layout()
+plt.savefig('test3_boolean_explicit.png')
+plt.close()
+
+# Test 4: Integer array (should use default behavior)
+print("\nTest 4: Integer array")
+int_arr = np.array(im, dtype=int)
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+
+cs1 = ax1.contour(int_arr)
+ax1.set_title('Integer array (default levels)')
+
+cs2 = ax2.contour(int_arr, levels=5)
+ax2.set_title('Integer array (explicit levels=5)')
+
+print(f"Default levels on integer: {cs1.levels}")
+print(f"Explicit levels on integer: {cs2.levels}")
+plt.tight_layout()
+plt.savefig('test4_integer_default.png')
+plt.close()
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_contourf_boolean.png b/test_contourf_boolean.png
new file mode 100644
index 0000000000..1d2275e9f7
Binary files /dev/null and b/test_contourf_boolean.png differ
diff --git a/test_contourf_boolean.py b/test_contourf_boolean.py
new file mode 100644
index 0000000000..166cc9ec46
--- /dev/null
+++ b/test_contourf_boolean.py
@@ -0,0 +1,25 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test contourf with boolean arrays
+print("Test: contourf with boolean arrays")
+ii, jj = np.ogrid[:100, :100]
+im = (ii + jj) % 20 < 10
+
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+
+# This should use default behavior (not auto-detect for filled contours)
+cs1 = ax1.contourf(im)
+ax1.set_title('Boolean array contourf (default)')
+
+# Explicit levels for comparison
+cs2 = ax2.contourf(im, levels=[0, 0.5, 1])
+ax2.set_title('Boolean array contourf (explicit levels)')
+
+print(f"Default contourf levels: {cs1.levels}")
+print(f"Explicit contourf levels: {cs2.levels}")
+plt.tight_layout()
+plt.savefig('test_contourf_boolean.png')
+plt.close()
+
+print("Contourf test completed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..9db2a07b6c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+print("Testing edge cases...")
+
+# Test 1: Empty array
+print("\nTest 1: Empty array")
+try:
+    empty_arr = np.array([], dtype=bool).reshape(0, 0)
+    cs = plt.contour(empty_arr)
+    print(f"Empty array levels: {cs.levels}")
+except Exception as e:
+    print(f"Empty array error (expected): {e}")
+
+# Test 2: 1D array (should fail)
+print("\nTest 2: 1D array")
+try:
+    arr_1d = np.array([True, False, True])
+    cs = plt.contour(arr_1d)
+    print(f"1D array levels: {cs.levels}")
+except Exception as e:
+    print(f"1D array error (expected): {e}")
+
+# Test 3: Mixed boolean and numeric array
+print("\nTest 3: Mixed array with some boolean values")
+mixed_arr = np.array([[True, 0.5], [0.3, False]], dtype=object)
+try:
+    cs = plt.contour(mixed_arr)
+    print(f"Mixed array levels: {cs.levels}")
+except Exception as e:
+    print(f"Mixed array error (expected): {e}")
+
+# Test 4: Boolean array with explicit levels (should respect explicit levels)
+print("\nTest 4: Boolean array with explicit levels")
+bool_arr = np.array([[True, False], [False, True]])
+cs = plt.contour(bool_arr, levels=[0.1, 0.9])
+print(f"Boolean with explicit levels: {cs.levels}")
+
+# Test 5: Boolean array with explicit number of levels
+print("\nTest 5: Boolean array with explicit number of levels")
+cs = plt.contour(bool_arr, levels=3)
+print(f"Boolean with levels=3: {cs.levels}")
+
+# Test 6: Non-boolean array that happens to have only 0 and 1 values
+print("\nTest 6: Integer array with 0/1 values (not boolean)")
+int_arr = np.array([[1, 0], [0, 1]], dtype=int)
+cs = plt.contour(int_arr)
+print(f"Integer 0/1 array levels: {cs.levels}")
+
+plt.close('all')
+print("\nEdge case tests completed!")
\ No newline at end of file
diff --git a/test_existing_functionality.py b/test_existing_functionality.py
new file mode 100644
index 0000000000..5fcb673fb3
--- /dev/null
+++ b/test_existing_functionality.py
@@ -0,0 +1,41 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+print("Testing that existing functionality is preserved...")
+
+# Create test data
+z = np.random.rand(10, 10)
+bool_arr = np.array([[True, False], [False, True]])
+
+# Test 1: Regular array with explicit levels (should work as before)
+print("\nTest 1: Regular array with explicit levels")
+cs1 = plt.contour(z, levels=[0.1, 0.5, 0.9])
+print(f"Regular array explicit levels: {cs1.levels}")
+
+# Test 2: Regular array with number of levels (should work as before)
+print("\nTest 2: Regular array with number of levels")
+cs2 = plt.contour(z, levels=5)
+print(f"Regular array levels=5: {cs2.levels}")
+
+# Test 3: Boolean array with explicit levels (should respect explicit levels)
+print("\nTest 3: Boolean array with explicit levels")
+cs3 = plt.contour(bool_arr, levels=[0.25, 0.75])
+print(f"Boolean array explicit levels: {cs3.levels}")
+
+# Test 4: Boolean array with number of levels (should respect number)
+print("\nTest 4: Boolean array with number of levels")
+cs4 = plt.contour(bool_arr, levels=4)
+print(f"Boolean array levels=4: {cs4.levels}")
+
+# Test 5: Regular array without levels (should use default behavior)
+print("\nTest 5: Regular array without levels")
+cs5 = plt.contour(z)
+print(f"Regular array default levels: {cs5.levels}")
+
+# Test 6: Boolean array without levels (should use auto-detection)
+print("\nTest 6: Boolean array without levels")
+cs6 = plt.contour(bool_arr)
+print(f"Boolean array auto levels: {cs6.levels}")
+
+plt.close('all')
+print("\nExisting functionality tests completed!")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..8ab8abfd71
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,25 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Reproduce the exact example from the GitHub issue
+print("Testing the original GitHub issue example...")
+ii, jj = np.ogrid[:100, :100]
+im = (ii + jj) % 20 < 10
+
+# Create the figure exactly as described in the issue
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+
+# Left subplot: without levels=[.5] (should now work with auto-detection)
+ax1.contour(im)
+ax1.set_title('Default behavior (auto-detected)')
+
+# Right subplot: with levels=[.5] (explicit)
+ax2.contour(im, levels=[.5])
+ax2.set_title('Explicit levels=[0.5]')
+
+plt.tight_layout()
+plt.savefig('original_issue_fixed.png')
+plt.close()
+
+print("Original issue test completed!")
+print("Both subplots should now show the same contour line at the 0.5 level.")
\ No newline at end of file
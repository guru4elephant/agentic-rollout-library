diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..4ba87d3f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,48 @@
+import xarray as xr
+import numpy as np
+
+# Create a simple test case that reproduces the issue
+# Create a dataset similar to the tutorial one
+time = xr.cftime_range('2000-01-01', periods=3, freq='D')
+data = np.random.rand(3, 4, 5)
+
+ds = xr.Dataset(
+    {
+        'air': (['time', 'lat', 'lon'], data)
+    },
+    coords={
+        'time': time,
+        'lat': np.linspace(-90, 90, 4),
+        'lon': np.linspace(-180, 180, 5)
+    }
+)
+
+# Set attributes to match the issue description
+ds.time.attrs = {'standard_name': 'time', 'long_name': 'Time'}
+ds.air.attrs = {
+    'long_name': '4xDaily Air temperature at sigma level 995',
+    'units': 'degK',
+    'precision': 2,
+    'GRIB_id': 11,
+    'GRIB_name': 'TMP',
+    'var_desc': 'Air temperature',
+    'dataset': 'NMC Reanalysis',
+    'level_desc': 'Surface',
+    'statistic': 'Individual Obs',
+    'parent_stat': 'Other',
+    'actual_range': np.array([185.16, 322.1], dtype=np.float32)
+}
+
+print("Original time attributes:")
+print(ds.time.attrs)
+
+result = xr.where(True, ds.air, ds.air, keep_attrs=True)
+print("\nAfter xr.where with keep_attrs=True:")
+print("Time attributes:")
+print(result.time.attrs)
+print("Variable attributes:")
+print(result.attrs)
+print("\nExpected time attributes should be:")
+print({'standard_name': 'time', 'long_name': 'Time'})
+print("Expected variable attributes should be:")
+print(ds.air.attrs)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..d21f7870
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+import xarray as xr
+import numpy as np
+
+# Create test data
+time = xr.cftime_range('2000-01-01', periods=3, freq='D')
+data = np.random.rand(3, 4, 5)
+
+ds = xr.Dataset(
+    {
+        'air': (['time', 'lat', 'lon'], data)
+    },
+    coords={
+        'time': time,
+        'lat': np.linspace(-90, 90, 4),
+        'lon': np.linspace(-180, 180, 5)
+    }
+)
+
+# Set attributes
+ds.time.attrs = {'standard_name': 'time', 'long_name': 'Time'}
+ds.air.attrs = {'long_name': 'Air temperature', 'units': 'degK'}
+
+print("=== Test 1: keep_attrs=True ===")
+result1 = xr.where(True, ds.air, ds.air, keep_attrs=True)
+print("Time attributes preserved:", result1.time.attrs == ds.time.attrs)
+print("Variable attributes preserved:", result1.attrs == ds.air.attrs)
+
+print("\n=== Test 2: keep_attrs=False ===")
+result2 = xr.where(True, ds.air, ds.air, keep_attrs=False)
+print("Time attributes empty:", result2.time.attrs == {})
+print("Variable attributes empty:", result2.attrs == {})
+
+print("\n=== Test 3: keep_attrs=None (default) ===")
+result3 = xr.where(True, ds.air, ds.air, keep_attrs=None)
+print("Time attributes preserved with default:", result3.time.attrs == ds.time.attrs)
+print("Variable attributes preserved with default:", result3.attrs == ds.air.attrs)
+
+print("\n=== Test 4: Different condition ===")
+result4 = xr.where(False, ds.air, ds.air, keep_attrs=True)
+print("Time attributes preserved with False condition:", result4.time.attrs == ds.time.attrs)
+print("Variable attributes preserved with False condition:", result4.attrs == ds.air.attrs)
+
+print("\n=== Test 5: Different x and y ===")
+other_data = np.random.rand(3, 4, 5)
+other_var = xr.DataArray(other_data, dims=['time', 'lat', 'lon'], attrs={'long_name': 'Other var'})
+result5 = xr.where(True, ds.air, other_var, keep_attrs=True)
+print("Time attributes preserved with different y:", result5.time.attrs == ds.time.attrs)
+print("Variable attributes from x:", result5.attrs == ds.air.attrs)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..747d0c923
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the TypeError in autodoc mock for generic-typed classes.
+"""
+
+from typing import TypeVar, Generic
+from sphinx.ext.autodoc.mock import _make_subclass
+
+# Create a TypeVar (like in generic classes)
+T = TypeVar('T')
+
+# Try to create a mock subclass with a TypeVar as the module parameter
+# This should reproduce the TypeError: can only concatenate str (not "TypeVar") to str
+try:
+    result = _make_subclass('TestClass', T)
+    print("Success: No error occurred")
+    print(f"Result: {result}")
+except TypeError as e:
+    print(f"Error reproduced: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 3d499983f..e07b2fd4f 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py
index 98a3a3a96..122f8d2eb 100644
--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -68,9 +68,11 @@ class _MockObject:
         return self.__display_name__
 
 
-def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
+def _make_subclass(name: str, module: Any, superclass: Any = _MockObject,
                    attributes: Any = None) -> Any:
-    attrs = {'__module__': module, '__display_name__': module + '.' + name}
+    # Handle cases where module might not be a string (e.g., TypeVar)
+    module_str = str(module) if not isinstance(module, str) else module
+    attrs = {'__module__': module, '__display_name__': module_str + '.' + name}
     attrs.update(attributes or {})
 
     return type(name, (superclass,), attrs)
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..91390cb4c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the _make_subclass fix.
+"""
+
+from typing import TypeVar, Generic
+from sphinx.ext.autodoc.mock import _make_subclass
+
+# Test 1: TypeVar (original issue)
+T = TypeVar('T')
+result1 = _make_subclass('TestClass1', T)
+print(f"Test 1 - TypeVar: {result1}")
+print(f"Display name: {result1.__display_name__}")
+
+# Test 2: Regular string (should work as before)
+result2 = _make_subclass('TestClass2', 'test_module')
+print(f"Test 2 - String: {result2}")
+print(f"Display name: {result2.__display_name__}")
+
+# Test 3: Other non-string types
+class CustomClass:
+    def __str__(self):
+        return "custom_module"
+
+custom_obj = CustomClass()
+result3 = _make_subclass('TestClass3', custom_obj)
+print(f"Test 3 - Custom object: {result3}")
+print(f"Display name: {result3.__display_name__}")
+
+# Test 4: None (edge case)
+result4 = _make_subclass('TestClass4', None)
+print(f"Test 4 - None: {result4}")
+print(f"Display name: {result4.__display_name__}")
+
+# Test 5: Integer (edge case)
+result5 = _make_subclass('TestClass5', 123)
+print(f"Test 5 - Integer: {result5}")
+print(f"Display name: {result5.__display_name__}")
\ No newline at end of file
diff --git a/test_generic_class.py b/test_generic_class.py
new file mode 100644
index 000000000..0010eb54e
--- /dev/null
+++ b/test_generic_class.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+"""
+Test simulating the actual autodoc usage with generic classes.
+"""
+
+from typing import TypeVar, Generic
+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass
+
+# Simulate a generic class that would be processed by autodoc
+T = TypeVar('T')
+
+class GenericClass(Generic[T]):
+    """A generic class that would cause the original issue."""
+    
+    def method(self, param: T) -> T:
+        return param
+
+# Test the mock functionality that would be used by autodoc
+try:
+    # This simulates what autodoc does when it encounters a generic type
+    mock_class = _make_subclass('GenericClass', T, _MockObject)
+    print(f"Mock class created successfully: {mock_class}")
+    print(f"Display name: {mock_class.__display_name__}")
+    
+    # Test that we can create instances and access attributes
+    instance = mock_class()
+    print(f"Instance created: {instance}")
+    print(f"Instance display name: {instance.__display_name__}")
+    
+    # Test attribute access (this would trigger _make_subclass internally)
+    attr = instance.some_attribute
+    print(f"Attribute access works: {attr}")
+    
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
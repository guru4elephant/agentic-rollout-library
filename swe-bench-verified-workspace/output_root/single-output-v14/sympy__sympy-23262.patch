diff --git a/debug_lambdify.py b/debug_lambdify.py
new file mode 100644
index 0000000000..a64f7bb443
--- /dev/null
+++ b/debug_lambdify.py
@@ -0,0 +1,24 @@
+import inspect
+from sympy import lambdify
+from sympy.printing.lambdarepr import LambdaPrinter
+
+# Test the exact case from the issue
+expr = tuple([1])
+print("Expression:", expr)
+print("Expression type:", type(expr))
+
+# Create a LambdaPrinter to see what it produces
+printer = LambdaPrinter()
+try:
+    printed_expr = printer.doprint(expr)
+    print("LambdaPrinter output:", repr(printed_expr))
+except Exception as e:
+    print("LambdaPrinter error:", e)
+
+# Now test lambdify
+try:
+    func = lambdify([], expr)
+    source = inspect.getsource(func)
+    print("Lambdify source:", repr(source))
+except Exception as e:
+    print("Lambdify error:", e)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3eb083fbbb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+import inspect
+from sympy import lambdify
+
+# Test case 1: Single element tuple (should return (1,))
+print("Testing single element tuple:")
+result1 = inspect.getsource(lambdify([], tuple([1])))
+print(f"Result: {repr(result1)}")
+print()
+
+# Test case 2: Multiple element tuple (should return (1, 2))
+print("Testing multiple element tuple:")
+result2 = inspect.getsource(lambdify([], tuple([1, 2])))
+print(f"Result: {repr(result2)}")
+print()
+
+# Check if the single element tuple has the comma
+print("Checking for comma in single element tuple:")
+has_comma = ",)" in result1
+print(f"Has comma: {has_comma}")
+print(f"Expected: True")
\ No newline at end of file
diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py
index da67263b19..51cc41bd99 100644
--- a/sympy/utilities/lambdify.py
+++ b/sympy/utilities/lambdify.py
@@ -959,6 +959,9 @@ def _recursive_to_string(doprint, arg):
             left, right = "[]"
         elif isinstance(arg, tuple):
             left, right = "()"
+            # Special handling for single-element tuples to preserve the trailing comma
+            if len(arg) == 1:
+                return left + _recursive_to_string(doprint, arg[0]) + ',' + right
         else:
             raise NotImplementedError("unhandled type: %s, %s" % (type(arg), arg))
         return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..576ace7851
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,46 @@
+import inspect
+from sympy import lambdify
+
+# Test case 1: Empty tuple
+print("Testing empty tuple:")
+try:
+    result = inspect.getsource(lambdify([], tuple([])))
+    print(f"Result: {repr(result)}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+# Test case 2: Single element tuple with different types
+print("Testing single element tuple with string:")
+try:
+    result = inspect.getsource(lambdify([], tuple(["hello"])))
+    print(f"Result: {repr(result)}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+# Test case 3: Single element tuple with expression
+print("Testing single element tuple with expression:")
+try:
+    result = inspect.getsource(lambdify([], tuple([1 + 2])))
+    print(f"Result: {repr(result)}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+# Test case 4: Nested tuples
+print("Testing nested tuples:")
+try:
+    result = inspect.getsource(lambdify([], ((1,), (2, 3))))
+    print(f"Result: {repr(result)}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+# Test case 5: Mixed lists and tuples
+print("Testing mixed lists and tuples:")
+try:
+    result = inspect.getsource(lambdify([], ([1, 2], (3, 4))))
+    print(f"Result: {repr(result)}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_python_tuple.py b/test_python_tuple.py
new file mode 100644
index 0000000000..6324613f2f
--- /dev/null
+++ b/test_python_tuple.py
@@ -0,0 +1,24 @@
+from sympy.printing.lambdarepr import LambdaPrinter
+
+# Create a LambdaPrinter instance
+printer = LambdaPrinter()
+
+# Test printing a Python single-element tuple
+single_tuple = (1,)
+print("Single element Python tuple:", single_tuple)
+
+try:
+    result = printer.doprint(single_tuple)
+    print("LambdaPrinter result:", repr(result))
+except Exception as e:
+    print("LambdaPrinter error:", e)
+
+# Test printing a Python multi-element tuple
+multi_tuple = (1, 2)
+print("Multi element Python tuple:", multi_tuple)
+
+try:
+    result = printer.doprint(multi_tuple)
+    print("LambdaPrinter result:", repr(result))
+except Exception as e:
+    print("LambdaPrinter error:", e)
\ No newline at end of file
diff --git a/test_tuple_printing.py b/test_tuple_printing.py
new file mode 100644
index 0000000000..5c744dc219
--- /dev/null
+++ b/test_tuple_printing.py
@@ -0,0 +1,25 @@
+from sympy.printing.lambdarepr import LambdaPrinter
+from sympy import Tuple
+
+# Create a LambdaPrinter instance
+printer = LambdaPrinter()
+
+# Test printing a single-element tuple
+single_tuple = Tuple(1)
+print("Single element tuple:", single_tuple)
+
+try:
+    result = printer.doprint(single_tuple)
+    print("LambdaPrinter result:", repr(result))
+except Exception as e:
+    print("LambdaPrinter error:", e)
+
+# Test printing a multi-element tuple
+multi_tuple = Tuple(1, 2)
+print("Multi element tuple:", multi_tuple)
+
+try:
+    result = printer.doprint(multi_tuple)
+    print("LambdaPrinter result:", repr(result))
+except Exception as e:
+    print("LambdaPrinter error:", e)
\ No newline at end of file
diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 4c0e7e2a56..c28458dd46 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -34,7 +34,12 @@ def trim_docstring(docstring):
         return ''
     # Convert tabs to spaces and split into lines
     lines = docstring.expandtabs().splitlines()
-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
+    # Calculate indentation from lines after the first one, but handle empty case
+    non_empty_lines = [line for line in lines[1:] if line.lstrip()]
+    if non_empty_lines:
+        indent = min(len(line) - len(line.lstrip()) for line in non_empty_lines)
+    else:
+        indent = 0
     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
     return "\n".join(trimmed).strip()
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..63d27c0fb7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the docutils error when first line is not empty."""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.contrib.admindocs.utils import trim_docstring
+
+# Let's manually test the trim_docstring function with different inputs
+def test_trim_docstring():
+    print("Testing trim_docstring function...")
+    
+    # Test case 1: Docstring with first line not empty
+    docstring1 = '''test tests something.
+    '''
+    print("Test case 1 - First line not empty:")
+    print(f"Input: {repr(docstring1)}")
+    result1 = trim_docstring(docstring1)
+    print(f"Output: {repr(result1)}")
+    print(f"Lines: {result1.splitlines()}")
+    print()
+    
+    # Test case 2: Docstring with first line empty
+    docstring2 = '''
+    test tests something.
+    '''
+    print("Test case 2 - First line empty:")
+    print(f"Input: {repr(docstring2)}")
+    result2 = trim_docstring(docstring2)
+    print(f"Output: {repr(result2)}")
+    print(f"Lines: {result2.splitlines()}")
+    print()
+    
+    # Test case 3: Multi-line with first line not empty
+    docstring3 = '''test tests something.
+    This is a longer docstring
+    with multiple lines.
+    '''
+    print("Test case 3 - Multi-line, first line not empty:")
+    print(f"Input: {repr(docstring3)}")
+    result3 = trim_docstring(docstring3)
+    print(f"Output: {repr(result3)}")
+    print(f"Lines: {result3.splitlines()}")
+
+if __name__ == "__main__":
+    test_trim_docstring()
+print("Test case 1 - First line not empty:")
+try:
+    # First trim the docstring
+    trimmed1 = trim_docstring(docstring1)
+    print(f"Trimmed result: {trimmed1}")
+    # Then try to parse it with docutils
+    result1 = parse_rst(trimmed1, 'view', 'test_view')
+    print(f"RST result: {result1}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print()
+
+# Test case 2: Docstring with first line empty (should work)
+docstring2 = '''
+test tests something.
+'''
+print("Test case 2 - First line empty:")
+try:
+    # First trim the docstring
+    trimmed2 = trim_docstring(docstring2)
+    print(f"Trimmed result: {trimmed2}")
+    # Then try to parse it with docutils
+    result2 = parse_rst(trimmed2, 'view', 'test_view')
+    print(f"RST result: {result2}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/reproduce_issue_clean.py b/reproduce_issue_clean.py
new file mode 100644
index 0000000000..62f9fe179f
--- /dev/null
+++ b/reproduce_issue_clean.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the docutils error when first line is not empty."""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.contrib.admindocs.utils import trim_docstring
+
+# Let's manually test the trim_docstring function with different inputs
+def test_trim_docstring():
+    print("Testing trim_docstring function...")
+    
+    # Test case 1: Docstring with first line not empty
+    docstring1 = '''test tests something.
+    '''
+    print("Test case 1 - First line not empty:")
+    print(f"Input: {repr(docstring1)}")
+    result1 = trim_docstring(docstring1)
+    print(f"Output: {repr(result1)}")
+    print(f"Lines: {result1.splitlines()}")
+    print()
+    
+    # Test case 2: Docstring with first line empty
+    docstring2 = '''
+    test tests something.
+    '''
+    print("Test case 2 - First line empty:")
+    print(f"Input: {repr(docstring2)}")
+    result2 = trim_docstring(docstring2)
+    print(f"Output: {repr(result2)}")
+    print(f"Lines: {result2.splitlines()}")
+    print()
+    
+    # Test case 3: Multi-line with first line not empty
+    docstring3 = '''test tests something.
+    This is a longer docstring
+    with multiple lines.
+    '''
+    print("Test case 3 - Multi-line, first line not empty:")
+    print(f"Input: {repr(docstring3)}")
+    result3 = trim_docstring(docstring3)
+    print(f"Output: {repr(result3)}")
+    print(f"Lines: {result3.splitlines()}")
+
+if __name__ == "__main__":
+    test_trim_docstring()
\ No newline at end of file
diff --git a/test_docutils_integration.py b/test_docutils_integration.py
new file mode 100644
index 0000000000..4cabb183e7
--- /dev/null
+++ b/test_docutils_integration.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""Test script to verify the fix works with docutils integration."""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.contrib.admindocs.utils import trim_docstring, parse_rst
+
+# Test the actual docutils integration that was mentioned in the issue
+def test_docutils_integration():
+    print("Testing docutils integration...")
+    
+    # Test case that should have caused the original error
+    docstring = '''test tests something.
+    This is a longer docstring
+    with multiple lines.
+    '''
+    
+    print("Input docstring:")
+    print(repr(docstring))
+    print("Content:")
+    print(docstring)
+    print()
+    
+    # First, trim the docstring
+    trimmed = trim_docstring(docstring)
+    print("After trim_docstring:")
+    print(repr(trimmed))
+    print("Content:")
+    print(trimmed)
+    print()
+    
+    # Now test if this can be processed by parse_rst without error
+    print("Testing parse_rst (this might fail if docutils is not available)...")
+    try:
+        # Note: We need to mock the Django settings for parse_rst to work fully
+        # but we can at least test that the trimmed output is valid
+        result = parse_rst(trimmed, 'view', 'test_view')
+        print("Success! parse_rst result:")
+        print(result)
+    except Exception as e:
+        print(f"parse_rst failed (may be expected due to Django setup): {e}")
+        print("But the important part is that trim_docstring worked correctly!")
+    
+    print()
+    print("Testing edge cases...")
+    
+    # Edge case: Single line docstring
+    single_line = '''test tests something.'''
+    print(f"Single line: {repr(single_line)} -> {repr(trim_docstring(single_line))}")
+    
+    # Edge case: Empty first line, content on second
+    empty_first = '''
+    test tests something.
+    '''
+    print(f"Empty first: {repr(empty_first)} -> {repr(trim_docstring(empty_first))}")
+    
+    # Edge case: Mixed indentation
+    mixed_indent = '''test tests something.
+        Line with 8 spaces
+      Line with 2 spaces
+    Line with 4 spaces
+    '''
+    print(f"Mixed indent: {repr(mixed_indent)} -> {repr(trim_docstring(mixed_indent))}")
+
+if __name__ == "__main__":
+    test_docutils_integration()
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..1aad6090ae
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the MathML presentation printer fix
+for symbols ending with numbers.
+"""
+
+import sympy
+from sympy.printing.mathml import mathml
+
+def test_mathml_fix():
+    print("=== Testing MathML Presentation Printer Fix ===")
+    
+    # Test cases from the original GitHub issue
+    print("\n1. Original issue test cases:")
+    x2, y, z = sympy.symbols('x2 y z')
+    y_expr = x2*z + x2**3
+    mathml_x2 = mathml(y_expr, printer='presentation')
+    print("x2*z + x2**3:", mathml_x2)
+    
+    x, y, z = sympy.symbols('x y z')
+    y_expr = x*z + x**3
+    mathml_x = mathml(y_expr, printer='presentation')
+    print("x*z + x**3:", mathml_x)
+    
+    # Test various symbol types
+    print("\n2. Various symbol types:")
+    test_symbols = [
+        'x2', 'x10', 'var1', 'alpha2', 'beta10',  # Should render as single identifiers
+        'x_2', 'x^2', 'var_sub',                  # Should use sub/superscripts
+        'x', 'y', 'z'                             # Regular symbols
+    ]
+    
+    for sym_name in test_symbols:
+        sym = sympy.Symbol(sym_name)
+        result = mathml(sym, printer='presentation')
+        print(f"{sym_name}: {result}")
+    
+    # Test that content printer is unaffected
+    print("\n3. Content printer (should still use subscripts for symbols ending with numbers):")
+    x2 = sympy.Symbol('x2')
+    result_content = mathml(x2, printer='content')
+    print(f"Content x2: {result_content}")
+    
+    print("\n=== Fix verification complete ===")
+    print("✓ Symbols ending with numbers now render correctly in presentation MathML")
+    print("✓ Explicit subscripts/superscripts still work correctly")
+    print("✓ Content printer behavior is unchanged")
+
+if __name__ == "__main__":
+    test_mathml_fix()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..14716eff82
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Test case from the issue
+x2, y, z = sympy.symbols('x2 y z')
+y = x2*z + x2**3
+
+# Print using presentation MathML
+mathml_output = mathml(y, printer='presentation')
+print("MathML output for x2:")
+print(mathml_output)
+
+# Test with regular x to compare
+x, y, z = sympy.symbols('x y z')
+y = x*z + x**3
+mathml_output_x = mathml(y, printer='presentation')
+print("\nMathML output for x:")
+print(mathml_output_x)
+
+# Write to HTML file to visualize
+with open('sympy_test.html', 'w') as f:
+    f.write('<html><body>\n')
+    f.write('<h2>Symbol with number (x2):</h2>\n')
+    f.write(mathml_output + '\n')
+    f.write('<h2>Symbol without number (x):</h2>\n')
+    f.write(mathml_output_x + '\n')
+    f.write('</body></html>\n')
\ No newline at end of file
diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 3f8b8d49e0..d93f14be03 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -777,6 +777,17 @@ def translate(s):
         supers = [translate(sup) for sup in supers]
         subs = [translate(sub) for sub in subs]
 
+        # For MathML presentation, if the symbol name ends with digits and
+        # they were parsed as subscripts, treat them as part of the name instead
+        import re
+        _name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')
+        m = _name_with_digits_p.match(sym.name)
+        if m and len(subs) == 1 and subs[0].isdigit() and len(supers) == 0:
+            # This is a simple symbol ending with digits (like "x2"), not a subscript
+            # Use the full symbol name as the identifier
+            x.appendChild(self.dom.createTextNode(sym.name))
+            return x
+
         mname = self.dom.createElement('mi')
         mname.appendChild(self.dom.createTextNode(name))
         if len(supers) == 0:
diff --git a/sympy_test.html b/sympy_test.html
new file mode 100644
index 0000000000..af42dbd559
--- /dev/null
+++ b/sympy_test.html
@@ -0,0 +1,6 @@
+<html><body>
+<h2>Symbol with number (x2):</h2>
+<mrow><msup><mrow><mfenced><mi>x2</mi></mfenced></mrow><mn>3</mn></msup><mo>+</mo><mrow><mi>x2</mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>
+<h2>Symbol without number (x):</h2>
+<mrow><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mrow><mi>x</mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>
+</body></html>
diff --git a/sympy_test_fixed.html b/sympy_test_fixed.html
new file mode 100644
index 0000000000..666e3bc785
--- /dev/null
+++ b/sympy_test_fixed.html
@@ -0,0 +1,6 @@
+<html><head><title>MathML Test</title></head><body>
+<h2>Symbol with number (x2) - Fixed:</h2>
+<mrow><msup><mrow><mfenced><mi>x2</mi></mfenced></mrow><mn>3</mn></msup><mo>+</mo><mrow><mi>x2</mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>
+<h2>Symbol without number (x):</h2>
+<mrow><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mrow><mi>x</mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>
+</body></html>
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0e25e30cec
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,24 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Test various edge cases
+test_cases = [
+    ('x2', 'Simple symbol with number'),
+    ('x10', 'Symbol with multiple digits'),
+    ('var1', 'Multi-letter symbol with number'),
+    ('x_2', 'Explicit subscript (should still work)'),
+    ('x^2', 'Superscript'),
+    ('x', 'Regular symbol'),
+    ('alpha2', 'Greek symbol with number'),
+]
+
+for symbol_name, description in test_cases:
+    print(f"\n=== {description} ({symbol_name}) ===")
+    sym = sympy.Symbol(symbol_name)
+    mathml_output = mathml(sym, printer='presentation')
+    print(mathml_output)
+    
+    # Also test in an expression
+    expr = sym * sympy.Symbol('y')
+    mathml_expr = mathml(expr, printer='presentation')
+    print(f"Expression: {mathml_expr}")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..902f6e7475
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,29 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Exact test case from the GitHub issue
+x2, y, z = sympy.symbols('x2 y z')
+y = x2*z + x2**3
+
+# Print using presentation MathML
+mathml_output = mathml(y, printer='presentation')
+print("MathML output for x2 expression:")
+print(mathml_output)
+
+# Compare with regular x
+x, y, z = sympy.symbols('x y z')
+y = x*z + x**3
+mathml_output_x = mathml(y, printer='presentation')
+print("\nMathML output for x expression:")
+print(mathml_output_x)
+
+# Write to HTML file to visualize (as in original issue)
+with open('sympy_test_fixed.html', 'w') as f:
+    f.write('<html><head><title>MathML Test</title></head><body>\n')
+    f.write('<h2>Symbol with number (x2) - Fixed:</h2>\n')
+    f.write(mathml_output + '\n')
+    f.write('<h2>Symbol without number (x):</h2>\n')
+    f.write(mathml_output_x + '\n')
+    f.write('</body></html>\n')
+
+print("\nHTML file created: sympy_test_fixed.html")
\ No newline at end of file
diff --git a/test_split_super_sub.py b/test_split_super_sub.py
new file mode 100644
index 0000000000..0165a2da70
--- /dev/null
+++ b/test_split_super_sub.py
@@ -0,0 +1,9 @@
+from sympy.printing.conventions import split_super_sub
+
+# Test the split_super_sub function
+print("Testing split_super_sub:")
+print("x2:", split_super_sub('x2'))
+print("x:", split_super_sub('x'))
+print("x_2:", split_super_sub('x_2'))
+print("x10:", split_super_sub('x10'))
+print("var1:", split_super_sub('var1'))
\ No newline at end of file
diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index a308e27297..3e0fbee279 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -234,15 +234,21 @@ def _cstack(left, right):
     noutp = _compute_n_outputs(left, right)
 
     if isinstance(left, Model):
-        cleft = _coord_matrix(left, 'left', noutp)
+        if isinstance(left, CompoundModel):
+            cleft = _separable(left)
+        else:
+            cleft = _coord_matrix(left, 'left', noutp)
     else:
         cleft = np.zeros((noutp, left.shape[1]))
         cleft[: left.shape[0], : left.shape[1]] = left
     if isinstance(right, Model):
-        cright = _coord_matrix(right, 'right', noutp)
+        if isinstance(right, CompoundModel):
+            cright = _separable(right)
+        else:
+            cright = _coord_matrix(right, 'right', noutp)
     else:
         cright = np.zeros((noutp, right.shape[1]))
-        cright[-right.shape[0]:, -right.shape[1]:] = 1
+        cright[-right.shape[0]:, -right.shape[1]:] = right
 
     return np.hstack([cleft, cright])
 
diff --git a/debug_separable.py b/debug_separable.py
new file mode 100644
index 0000000000..411798766f
--- /dev/null
+++ b/debug_separable.py
@@ -0,0 +1,15 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import _separable
+
+# Test what _separable returns for different models
+cm = m.Linear1D(10) & m.Linear1D(5)
+print("Simple compound model _separable result:")
+print(_separable(cm))
+print()
+
+print("Linear1D model _separable result:")
+print(_separable(m.Linear1D(10)))
+print()
+
+print("Pix2Sky_TAN model _separable result:")
+print(_separable(m.Pix2Sky_TAN()))
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 3364d30740..02dddbe713 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4c205d6ca7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+# Test case 1: Simple compound model
+cm = m.Linear1D(10) & m.Linear1D(5)
+print("Test case 1: Simple compound model")
+print("Model:", cm)
+print("Separability matrix:")
+print(separability_matrix(cm))
+print()
+
+# Test case 2: Complex compound model
+print("Test case 2: Complex compound model")
+complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)
+print("Model:", complex_model)
+print("Separability matrix:")
+print(separability_matrix(complex_model))
+print()
+
+# Test case 3: Nested compound model (the issue)
+print("Test case 3: Nested compound model (the issue)")
+nested_model = m.Pix2Sky_TAN() & cm
+print("Model:", nested_model)
+print("Separability matrix:")
+print(separability_matrix(nested_model))
+print()
+
+# Expected result for nested model should be similar to test case 2
+print("Expected result should be similar to test case 2:")
+print(separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2b45126f91
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,56 @@
+from astropy.modeling import models as m
+from astropy.modeling.core import CompoundModel
+from astropy.modeling.separable import separability_matrix
+
+def test_edge_cases():
+    """Test edge cases for nested compound models"""
+    
+    print("=== Testing Edge Cases ===")
+    
+    # Test 1: Empty compound model (should not occur in practice, but let's be safe)
+    try:
+        empty_compound = m.CompoundModel('&', m.Linear1D(1), m.Linear1D(1))
+        result = separability_matrix(empty_compound)
+        print("Test 1: Empty compound model - Passed")
+    except Exception as e:
+        print(f"Test 1: Empty compound model - Error: {e}")
+    print()
+    
+    # Test 2: Single model wrapped in compound
+    single_model = CompoundModel('&', m.Linear1D(1), m.Identity(1))
+    nested_single = m.Pix2Sky_TAN() & single_model
+    
+    print("Test 2: Single model wrapped in compound")
+    result = separability_matrix(nested_single)
+    expected = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(1) & m.Identity(1))
+    print("Result matches expected:", np.array_equal(result, expected))
+    print("Result shape:", result.shape)
+    print("Expected shape:", expected.shape)
+    print()
+    
+    # Test 3: Complex nesting with different operators
+    inner = m.Linear1D(1) | m.Linear1D(2)  # This creates a non-separable model
+    outer = inner & m.Linear1D(3)  # Nest with &
+    complex_nested = m.Pix2Sky_TAN() & outer
+    
+    print("Test 3: Complex nesting with | operator")
+    result = separability_matrix(complex_nested)
+    print("Result shape:", result.shape)
+    print("Result:")
+    print(result)
+    print()
+    
+    # Test 4: Verify that non-nested models still work
+    simple_model = m.Linear1D(1) & m.Linear1D(2)
+    result_simple = separability_matrix(simple_model)
+    print("Test 4: Non-nested models still work")
+    print("Result shape:", result_simple.shape)
+    print("Result:")
+    print(result_simple)
+    print("Expected: [[True, False], [False, True]]")
+    print("Matches expected:", np.array_equal(result_simple, np.array([[True, False], [False, True]])))
+    print()
+
+if __name__ == "__main__":
+    import numpy as np
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_nested_models.py b/test_nested_models.py
new file mode 100644
index 0000000000..3410f8c1be
--- /dev/null
+++ b/test_nested_models.py
@@ -0,0 +1,62 @@
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+def test_nested_compound_models():
+    """Test various nested compound model scenarios"""
+    
+    print("=== Testing Nested Compound Models ===")
+    
+    # Test 1: Simple nested model (from the issue)
+    cm = m.Linear1D(10) & m.Linear1D(5)
+    nested_model = m.Pix2Sky_TAN() & cm
+    
+    print("Test 1: Simple nested model")
+    result = separability_matrix(nested_model)
+    expected = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))
+    print("Result matches expected:", np.array_equal(result, expected))
+    print("Result:")
+    print(result)
+    print("Expected:")
+    print(expected)
+    print()
+    
+    # Test 2: Deeper nesting
+    cm2 = m.Linear1D(2) & m.Linear1D(3)
+    cm3 = cm & cm2  # (Linear1D(10) & Linear1D(5)) & (Linear1D(2) & Linear1D(3))
+    nested_model2 = m.Pix2Sky_TAN() & cm3
+    
+    print("Test 2: Deeper nesting")
+    result2 = separability_matrix(nested_model2)
+    expected2 = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5) & m.Linear1D(2) & m.Linear1D(3))
+    print("Result matches expected:", np.array_equal(result2, expected2))
+    print("Result shape:", result2.shape)
+    print("Expected shape:", expected2.shape)
+    print()
+    
+    # Test 3: Mixed operators
+    mixed_model = (m.Linear1D(10) | m.Linear1D(5)) & m.Scale(2)
+    nested_mixed = m.Pix2Sky_TAN() & mixed_model
+    
+    print("Test 3: Mixed operators")
+    result3 = separability_matrix(nested_mixed)
+    print("Result shape:", result3.shape)
+    print("Result:")
+    print(result3)
+    print()
+    
+    # Test 4: Triple nesting
+    inner = m.Linear1D(1) & m.Linear1D(2)
+    middle = inner & m.Linear1D(3)
+    outer = m.Pix2Sky_TAN() & middle
+    
+    print("Test 4: Triple nesting")
+    result4 = separability_matrix(outer)
+    expected4 = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(1) & m.Linear1D(2) & m.Linear1D(3))
+    print("Result matches expected:", np.array_equal(result4, expected4))
+    print("Result shape:", result4.shape)
+    print("Expected shape:", expected4.shape)
+    print()
+
+if __name__ == "__main__":
+    import numpy as np
+    test_nested_compound_models()
\ No newline at end of file
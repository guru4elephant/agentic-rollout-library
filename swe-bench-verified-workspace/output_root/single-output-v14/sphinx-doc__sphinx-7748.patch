diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..b26f3ae51
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with autodoc_docstring_signature and overloaded methods.
+"""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+from sphinx.ext.autodoc import FunctionDocumenter
+from sphinx.util.inspect import getdoc
+
+# Create a test class with overloaded methods
+class TestClass:
+    def overloaded_method(self, x):
+        """overloaded_method(x: int) -> int
+        overloaded_method(x: str) -> str
+        
+        This is an overloaded method that handles both int and string inputs.
+        
+        Args:
+            x: Either an integer or a string
+            
+        Returns:
+            The same type as input
+        """
+        pass
+
+def test_current_behavior():
+    """Test the current behavior of signature extraction"""
+    from sphinx.ext.autodoc import py_ext_sig_re
+    
+    docstring = getdoc(TestClass.overloaded_method)
+    print("Original docstring:")
+    print(repr(docstring))
+    print("\n")
+    
+    # Current behavior - only extracts first signature
+    lines = docstring.split('\n')
+    result = None
+    for i, line in enumerate(lines):
+        match = py_ext_sig_re.match(line.strip())
+        if match:
+            exmod, path, base, args, retann = match.groups()
+            print(f"Found signature: {base}({args}) -> {retann}")
+            result = args, retann
+            # Current implementation breaks here
+            break
+    
+    print(f"\nCurrent implementation returns: {result}")
+    print("This only captures the first signature!")
+
+def test_desired_behavior():
+    """Test what we want to achieve"""
+    from sphinx.ext.autodoc import py_ext_sig_re
+    
+    docstring = getdoc(TestClass.overloaded_method)
+    lines = docstring.split('\n')
+    
+    print("Desired behavior - extract ALL signatures:")
+    all_signatures = []
+    for i, line in enumerate(lines):
+        match = py_ext_sig_re.match(line.strip())
+        if match:
+            exmod, path, base, args, retann = match.groups()
+            signature = f"{base}({args}) -> {retann}"
+            print(f"Found signature: {signature}")
+            all_signatures.append((args, retann))
+    
+    print(f"\nAll signatures found: {all_signatures}")
+
+if __name__ == "__main__":
+    print("=== Current Behavior ===")
+    test_current_behavior()
+    
+    print("\n=== Desired Behavior ===")
+    test_desired_behavior()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 5e822fe9b..77b63df38 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/test_overload_simple.py b/test_overload_simple.py
new file mode 100644
index 000000000..5fe3b44f9
--- /dev/null
+++ b/test_overload_simple.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+"""
+Simple test using the existing test infrastructure.
+"""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+# Add the test target to the path so it can be imported
+sys.path.insert(0, '/testbed')
+
+from tests.test_ext_autodoc import do_autodoc
+
+def test_overloaded_method():
+    """Test that overloaded methods work with the existing test infrastructure"""
+    
+    # Import the test target
+    import test_overload_target
+    
+    # Create a minimal app configuration
+    from sphinx.application import Sphinx
+    from sphinx.util.docutils import docutils_namespace
+    
+    with docutils_namespace():
+        # Use the existing test root
+        testroot = 'test-ext-autodoc'
+        app = Sphinx(
+            srcdir=f'tests/roots/{testroot}',
+            confdir=f'tests/roots/{testroot}',
+            outdir='/tmp/test_out',
+            doctreedir='/tmp/test_doctree',
+            buildername='html'
+        )
+        
+        # Enable the feature we're testing
+        app.config.autodoc_docstring_signature = True
+        
+        print("=== Testing overloaded method ===")
+        options = {"members": None}
+        
+        # Test the overloaded method
+        actual = do_autodoc(app, 'method', 'test_overload_target.OverloadedClass.overloaded_method', options)
+        
+        print("Autodoc output for overloaded method:")
+        for line in actual:
+            print(repr(line))
+        
+        # Check if the signature contains multiple lines
+        output_text = '\n'.join(actual)
+        if output_text.count('(x:') > 1:
+            print("✓ SUCCESS: Multiple signatures detected!")
+        else:
+            print("✗ FAILED: Only one signature found!")
+
+if __name__ == "__main__":
+    test_overloaded_method()
\ No newline at end of file
diff --git a/test_overload_target.py b/test_overload_target.py
new file mode 100644
index 000000000..1a0010662
--- /dev/null
+++ b/test_overload_target.py
@@ -0,0 +1,42 @@
+"""
+Test target for overloaded method documentation.
+"""
+
+class OverloadedClass:
+    def overloaded_method(self, x):
+        """overloaded_method(x: int) -> int
+        overloaded_method(x: str) -> str
+        
+        This is an overloaded method that handles both int and string inputs.
+        
+        Args:
+            x: Either an integer or a string
+            
+        Returns:
+            The same type as input
+        """
+        pass
+    
+    def regular_method(self, x):
+        """regular_method(x: int) -> int
+        
+        This is a regular method with a single signature.
+        
+        Args:
+            x: An integer
+            
+        Returns:
+            The same integer
+        """
+        pass
+    
+    def method_without_signature(self, x):
+        """This method has no signature in the docstring.
+        
+        Args:
+            x: Some parameter
+            
+        Returns:
+            Some value
+        """
+        pass
\ No newline at end of file
diff --git a/test_overloaded_autodoc.py b/test_overloaded_autodoc.py
new file mode 100644
index 000000000..a22ea1f30
--- /dev/null
+++ b/test_overloaded_autodoc.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Test script to verify autodoc works with overloaded methods.
+"""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+from test_ext_autodoc import do_autodoc
+
+def test_overloaded_methods():
+    """Test autodoc with overloaded methods"""
+    
+    # Create a minimal Sphinx app for testing
+    with docutils_namespace():
+        srcdir = '/tmp/test_src'
+        outdir = '/tmp/test_out'
+        doctreedir = '/tmp/test_doctree'
+        confdir = '/tmp/test_src'
+        
+        os.makedirs(srcdir, exist_ok=True)
+        
+        # Create a minimal conf.py
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write("""
+extensions = ['sphinx.ext.autodoc']
+autodoc_docstring_signature = True
+""")
+        
+        # Copy our test target to the source directory
+        import shutil
+        shutil.copy('test_overload_target.py', srcdir)
+        
+        app = Sphinx(srcdir, confdir, outdir, doctreedir, 'html')
+        
+        print("=== Testing overloaded method ===")
+        options = {"members": None}
+        actual = do_autodoc(app, 'class', 'test_overload_target.OverloadedClass', options)
+        
+        print("Autodoc output:")
+        for line in actual:
+            print(repr(line))
+        
+        # Check if multiple signatures are present
+        output_lines = list(actual)
+        signature_lines = [line for line in output_lines if 'overloaded_method(' in line]
+        
+        print(f"\nFound {len(signature_lines)} signature lines for overloaded_method:")
+        for line in signature_lines:
+            print(f"  {line}")
+        
+        if len(signature_lines) > 1:
+            print("✓ SUCCESS: Multiple signatures detected for overloaded method!")
+        else:
+            print("✗ FAILED: Only one signature found for overloaded method!")
+
+if __name__ == "__main__":
+    test_overloaded_methods()
\ No newline at end of file
diff --git a/test_overloaded_methods.py b/test_overloaded_methods.py
new file mode 100644
index 000000000..15b945e62
--- /dev/null
+++ b/test_overloaded_methods.py
@@ -0,0 +1,130 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for autodoc_docstring_signature with overloaded methods.
+"""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+from sphinx.ext.autodoc import FunctionDocumenter
+from sphinx.util.inspect import getdoc
+
+# Create a test class with overloaded methods
+class TestClass:
+    def overloaded_method(self, x):
+        """overloaded_method(x: int) -> int
+        overloaded_method(x: str) -> str
+        
+        This is an overloaded method that handles both int and string inputs.
+        
+        Args:
+            x: Either an integer or a string
+            
+        Returns:
+            The same type as input
+        """
+        pass
+
+def test_signature_extraction():
+    """Test the signature extraction functionality directly"""
+    from sphinx.ext.autodoc import DocstringSignatureMixin, py_ext_sig_re
+    
+    # Create a mock documenter to test the _find_signature method
+    class MockDocumenter(DocstringSignatureMixin):
+        def __init__(self):
+            self.objpath = ['overloaded_method']
+            self._new_docstrings = None
+            
+        def get_doc(self):
+            docstring = getdoc(TestClass.overloaded_method)
+            return [docstring.split('\n')]
+    
+    documenter = MockDocumenter()
+    result = documenter._find_signature()
+    
+    print("=== Testing _find_signature method ===")
+    print(f"Result type: {type(result)}")
+    print(f"Result: {result}")
+    
+    if isinstance(result, list):
+        print("✓ Multiple signatures detected!")
+        for i, (args, retann) in enumerate(result):
+            print(f"  Signature {i+1}: args={args}, retann={retann}")
+    elif isinstance(result, tuple):
+        print("✓ Single signature detected!")
+        args, retann = result
+        print(f"  Signature: args={args}, retann={retann}")
+    else:
+        print("✗ No signatures found!")
+
+def test_format_signature():
+    """Test the format_signature method"""
+    from sphinx.ext.autodoc import DocstringSignatureMixin
+    
+    # Create a mock documenter with environment config
+    class MockDocumenter(DocstringSignatureMixin):
+        def __init__(self):
+            self.objpath = ['overloaded_method']
+            self._new_docstrings = None
+            self.args = None
+            self.retann = None
+            
+            # Mock environment config
+            class MockConfig:
+                autodoc_docstring_signature = True
+            class MockEnv:
+                config = MockConfig()
+            self.env = MockEnv()
+            
+        def get_doc(self):
+            docstring = getdoc(TestClass.overloaded_method)
+            return [docstring.split('\n')]
+            
+        def _find_signature(self, encoding=None):
+            # Use the actual implementation
+            from sphinx.ext.autodoc import py_ext_sig_re
+            docstrings = self.get_doc()
+            self._new_docstrings = docstrings[:]
+            results = []
+            for i, doclines in enumerate(docstrings):
+                if not doclines:
+                    continue
+                match = py_ext_sig_re.match(doclines[0])
+                if not match:
+                    continue
+                exmod, path, base, args, retann = match.groups()
+                valid_names = [self.objpath[-1]]
+                if base not in valid_names:
+                    continue
+                results.append((args, retann))
+            
+            if not results:
+                return None
+            elif len(results) == 1:
+                return results[0]
+            else:
+                return results
+    
+    documenter = MockDocumenter()
+    
+    # Test the format_signature method
+    print("\n=== Testing format_signature method ===")
+    documenter.format_signature()
+    
+    print(f"self.args: {repr(documenter.args)}")
+    print(f"self.retann: {documenter.retann}")
+    
+    if documenter.args and '\n' in documenter.args:
+        print("✓ Multiple signatures formatted correctly!")
+        signatures = documenter.args.split('\n')
+        for i, sig in enumerate(signatures):
+            print(f"  Formatted signature {i+1}: {sig}")
+    else:
+        print("✗ Signature formatting not working as expected!")
+
+if __name__ == "__main__":
+    test_signature_extraction()
+    test_format_signature()
\ No newline at end of file
diff --git a/test_simple_signature.py b/test_simple_signature.py
new file mode 100644
index 000000000..0966138ec
--- /dev/null
+++ b/test_simple_signature.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify the signature extraction logic.
+"""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.ext.autodoc import py_ext_sig_re
+
+def test_signature_regex():
+    """Test the regex pattern with overloaded signatures"""
+    
+    # Test cases with overloaded signatures
+    test_cases = [
+        "overloaded_method(x: int) -> int",
+        "overloaded_method(x: str) -> str",
+        "some_method(a, b=1) -> None",
+        "Class::method(arg) -> ReturnType",
+    ]
+    
+    print("=== Testing signature regex pattern ===")
+    for test_case in test_cases:
+        match = py_ext_sig_re.match(test_case)
+        if match:
+            exmod, path, base, args, retann = match.groups()
+            print(f"✓ '{test_case}' -> base='{base}', args='{args}', retann='{retann}'")
+        else:
+            print(f"✗ '{test_case}' -> No match")
+
+def test_multiple_signatures():
+    """Test extracting multiple signatures from a docstring"""
+    
+    docstring = """overloaded_method(x: int) -> int
+overloaded_method(x: str) -> str
+
+This is an overloaded method that handles both int and string inputs.
+
+Args:
+    x: Either an integer or a string
+    
+Returns:
+    The same type as input
+"""
+    
+    print("\n=== Testing multiple signature extraction ===")
+    lines = docstring.split('\n')
+    results = []
+    
+    for line in lines:
+        match = py_ext_sig_re.match(line.strip())
+        if match:
+            exmod, path, base, args, retann = match.groups()
+            # Check if the base name matches our expected method name
+            if base == 'overloaded_method':
+                results.append((args, retann))
+                print(f"Found signature: {base}({args}) -> {retann}")
+    
+    print(f"\nAll signatures found: {results}")
+    
+    if len(results) > 1:
+        print("✓ Multiple signatures detected!")
+        
+        # Test the formatting logic
+        signatures = []
+        for args, retann in results:
+            signature = "(%s)" % args
+            if retann:
+                signature += " -> %s" % retann
+            signatures.append(signature)
+        
+        formatted_args = "\n".join(signatures)
+        print(f"\nFormatted signature string:")
+        print(repr(formatted_args))
+        
+    else:
+        print("✗ Only one signature found")
+
+if __name__ == "__main__":
+    test_signature_regex()
+    test_multiple_signatures()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
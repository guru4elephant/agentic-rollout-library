diff --git a/final_test.py b/final_test.py
new file mode 100644
index 00000000..1871e36b
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+
+import numpy as np
+import xarray as xr
+
+# Create test data
+da = xr.DataArray(
+    np.arange(12).reshape(4, 3),
+    dims=["x", "y"],
+    coords={"x": [0, 0.1, 1.1, 1.2], "y": [0, 1, 2]},
+)
+
+ds = xr.Dataset({
+    "a": (("x", "y"), np.arange(12).reshape(4, 3)),
+}, coords={"x": [0, 0.1, 1.1, 1.2], "y": [0, 1, 2]})
+
+print("Final test - API consistency check:")
+print("=" * 50)
+
+# Test that all methods now use 'coord' parameter consistently
+test_cases = [
+    ("Dataset.differentiate(coord='x')", lambda: ds.differentiate(coord='x')),
+    ("DataArray.differentiate(coord='x')", lambda: da.differentiate(coord='x')),
+    ("Dataset.integrate(coord='x')", lambda: ds.integrate(coord='x')),
+    ("DataArray.integrate(coord='x')", lambda: da.integrate(coord='x')),
+]
+
+all_passed = True
+
+for test_name, test_func in test_cases:
+    try:
+        result = test_func()
+        print(f"✓ {test_name}: SUCCESS")
+    except Exception as e:
+        print(f"✗ {test_name}: FAILED - {e}")
+        all_passed = False
+
+# Test that old 'dim' parameter is no longer accepted
+print("\nTesting backward incompatibility:")
+try:
+    da.integrate(dim='x')
+    print("✗ DataArray.integrate(dim='x') should fail but didn't!")
+    all_passed = False
+except TypeError:
+    print("✓ DataArray.integrate(dim='x') correctly fails")
+
+# Verify results are equivalent
+print("\nVerifying result consistency:")
+da_integrate = da.integrate(coord='x')
+ds_integrate = ds.integrate(coord='x')['a']  # Extract the same variable
+
+print(f"DataArray result: {da_integrate.values}")
+print(f"Dataset result: {ds_integrate.values}")
+print(f"Results match: {np.allclose(da_integrate.values, ds_integrate.values)}")
+
+print("\n" + "=" * 50)
+if all_passed:
+    print("🎉 SUCCESS: API is now consistent! All methods use 'coord' parameter.")
+else:
+    print("❌ FAILED: Some tests did not pass")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..2cb6aa19
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import numpy as np
+import xarray as xr
+
+# Create test data
+da = xr.DataArray(
+    np.arange(12).reshape(4, 3),
+    dims=["x", "y"],
+    coords={"x": [0, 0.1, 1.1, 1.2], "y": [0, 1, 2]},
+)
+
+ds = xr.Dataset({
+    "a": (("x", "y"), np.arange(12).reshape(4, 3)),
+    "b": (("x", "y"), np.arange(12, 24).reshape(4, 3))
+}, coords={"x": [0, 0.1, 1.1, 1.2], "y": [0, 1, 2]})
+
+print("Testing current API inconsistency:")
+print("=" * 50)
+
+# Test current behavior
+print("Dataset.differentiate(coord='x'):")
+try:
+    result = ds.differentiate(coord='x')
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nDataArray.differentiate(coord='x'):")
+try:
+    result = da.differentiate(coord='x')
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nDataset.integrate(coord='x'):")
+try:
+    result = ds.integrate(coord='x')
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nDataArray.integrate(dim='x'):")
+try:
+    result = da.integrate(dim='x')
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nDataArray.integrate(coord='x') - This should fail currently:")
+try:
+    result = da.integrate(coord='x')
+    print("SUCCESS - This indicates the issue is already fixed!")
+except Exception as e:
+    print(f"ERROR (expected): {e}")
+
+print("\n" + "=" * 50)
+print("The issue is that DataArray.integrate uses 'dim' parameter")
+print("while all others use 'coord' parameter")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 00000000..47053ae8
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+import numpy as np
+import xarray as xr
+
+# Create test data
+da = xr.DataArray(
+    np.arange(12).reshape(4, 3),
+    dims=["x", "y"],
+    coords={"x": [0, 0.1, 1.1, 1.2], "y": [0, 1, 2]},
+)
+
+ds = xr.Dataset({
+    "a": (("x", "y"), np.arange(12).reshape(4, 3)),
+    "b": (("x", "y"), np.arange(12, 24).reshape(4, 3))
+}, coords={"x": [0, 0.1, 1.1, 1.2], "y": [0, 1, 2]})
+
+print("Testing the fix for API consistency:")
+print("=" * 50)
+
+# Test all methods with consistent 'coord' parameter
+methods_to_test = [
+    ("Dataset.differentiate", lambda: ds.differentiate(coord='x')),
+    ("DataArray.differentiate", lambda: da.differentiate(coord='x')),
+    ("Dataset.integrate", lambda: ds.integrate(coord='x')),
+    ("DataArray.integrate", lambda: da.integrate(coord='x')),
+]
+
+all_passed = True
+
+for method_name, method_call in methods_to_test:
+    try:
+        result = method_call()
+        print(f"✓ {method_name}(coord='x'): SUCCESS")
+        print(f"  Result shape: {result.shape}")
+    except Exception as e:
+        print(f"✗ {method_name}(coord='x'): ERROR - {e}")
+        all_passed = False
+
+# Test that old 'dim' parameter no longer works for DataArray.integrate
+print("\nTesting backward incompatibility:")
+try:
+    result = da.integrate(dim='x')
+    print("✗ DataArray.integrate(dim='x') should fail but didn't!")
+    all_passed = False
+except TypeError as e:
+    print(f"✓ DataArray.integrate(dim='x') correctly fails: {e}")
+
+# Test that results are equivalent (integration should produce same result)
+print("\nTesting result consistency:")
+da_result = da.integrate(coord='x')
+ds_result = ds.integrate(coord='x')
+
+# For Dataset, we need to extract the same variable
+ds_a_result = ds_result['a']
+
+print(f"DataArray integrate result: {da_result.values}")
+print(f"Dataset integrate result (var 'a'): {ds_a_result.values}")
+print(f"Results are equal: {np.allclose(da_result.values, ds_a_result.values)}")
+
+print("\n" + "=" * 50)
+if all_passed:
+    print("🎉 All tests passed! The API is now consistent.")
+else:
+    print("❌ Some tests failed!")
\ No newline at end of file
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 2fef3edb..510e6d48 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -3481,17 +3481,17 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)
 
     def integrate(
-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
     ) -> "DataArray":
         """ integrate the array with the trapezoidal rule.
 
         .. note::
-            This feature is limited to simple cartesian geometry, i.e. dim
+            This feature is limited to simple cartesian geometry, i.e. coord
             must be one dimensional.
 
         Parameters
         ----------
-        dim : hashable, or sequence of hashable
+        coord : hashable, or sequence of hashable
             Coordinate(s) used for the integration.
         datetime_unit : {"Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", \
                          "ps", "fs", "as"}, optional
@@ -3528,7 +3528,7 @@ class DataArray(AbstractArray, DataWithCoords):
         array([5.4, 6.6, 7.8])
         Dimensions without coordinates: y
         """
-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)
+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)
         return self._from_temp_dataset(ds)
 
     def unify_chunks(self) -> "DataArray":
diff --git a/xarray/tests/test_units.py b/xarray/tests/test_units.py
index bb3127e9..76dd830d 100644
--- a/xarray/tests/test_units.py
+++ b/xarray/tests/test_units.py
@@ -3681,7 +3681,7 @@ class TestDataArray:
         (
             method("diff", dim="x"),
             method("differentiate", coord="x"),
-            method("integrate", dim="x"),
+            method("integrate", coord="x"),
             method("quantile", q=[0.25, 0.75]),
             method("reduce", func=np.sum, dim="x"),
             pytest.param(lambda x: x.dot(x), id="method_dot"),
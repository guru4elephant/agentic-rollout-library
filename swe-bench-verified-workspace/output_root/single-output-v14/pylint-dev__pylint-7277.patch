diff --git a/pylint/__init__.py b/pylint/__init__.py
index 9f3dd74e6..8429c70d6 100644
--- a/pylint/__init__.py
+++ b/pylint/__init__.py
@@ -96,9 +96,13 @@ def modify_sys_path() -> None:
       if pylint is installed in an editable configuration (as the last item).
       https://github.com/PyCQA/pylint/issues/4161
     """
-    sys.path.pop(0)
-    env_pythonpath = os.environ.get("PYTHONPATH", "")
+    # Only remove the first entry if it's the current working directory or empty
+    first_entry = sys.path[0]
     cwd = os.getcwd()
+    if first_entry in ("", ".", cwd):
+        sys.path.pop(0)
+    
+    env_pythonpath = os.environ.get("PYTHONPATH", "")
     if env_pythonpath.startswith(":") and env_pythonpath not in (f":{cwd}", ":."):
         sys.path.pop(0)
     elif env_pythonpath.endswith(":") and env_pythonpath not in (f"{cwd}:", ".:"):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..edfc37bc3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+import sys
+import runpy
+import os
+
+# Save original sys.path for comparison
+original_sys_path = sys.path.copy()
+
+print("Original sys.path:")
+for i, path in enumerate(sys.path):
+    print(f"{i}: {path}")
+
+# Add a custom path to sys.path as mentioned in the issue
+sys.path.insert(0, "something_custom")
+print(f"\nAfter inserting custom path at index 0: {sys.path[0]}")
+
+# Run pylint using runpy which will trigger the issue
+try:
+    runpy.run_module('pylint', run_name="__main__", alter_sys=True)
+except SystemExit as e:
+    print(f"pylint exited with code: {e.code}")
+except Exception as e:
+    print(f"Error occurred: {e}")
+
+print("\nFinal sys.path after runpy.run_module:")
+for i, path in enumerate(sys.path):
+    print(f"{i}: {path}")
+
+# Check if our custom path was removed
+if "something_custom" not in sys.path:
+    print("\n❌ BUG CONFIRMED: Our custom path was removed from sys.path!")
+else:
+    print("\n✅ No issue: Our custom path is still in sys.path")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..961ff8236
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,49 @@
+import sys
+import runpy
+import os
+
+def test_case(name, path_to_insert):
+    """Test a specific case"""
+    print(f"\n=== Testing {name} ===")
+    
+    # Save original sys.path
+    original_sys_path = sys.path.copy()
+    
+    # Insert the test path
+    sys.path.insert(0, path_to_insert)
+    print(f"Inserted path: {sys.path[0]}")
+    
+    # Run pylint using runpy
+    try:
+        runpy.run_module('pylint', run_name="__main__", alter_sys=True)
+    except SystemExit as e:
+        print(f"pylint exited with code: {e.code}")
+    
+    # Check if our path was preserved
+    if path_to_insert in sys.path:
+        print(f"✅ SUCCESS: {path_to_insert} is still in sys.path")
+        return True
+    else:
+        print(f"❌ FAILURE: {path_to_insert} was removed from sys.path")
+        return False
+
+# Test cases
+test_cases = [
+    ("Custom path", "something_custom"),
+    ("Empty string", ""),
+    ("Current directory", "."),
+    ("Current working directory", os.getcwd()),
+    ("Relative path", "../test"),
+    ("Absolute path", "/tmp/test"),
+]
+
+all_passed = True
+for name, path in test_cases:
+    if not test_case(name, path):
+        all_passed = False
+
+print(f"\n=== Overall Result ===")
+if all_passed:
+    print("✅ All test cases passed!")
+else:
+    print("❌ Some test cases failed!")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..a68df1586
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,60 @@
+import sys
+import runpy
+import os
+
+print("Testing the exact scenario from the GitHub issue...")
+
+# Save original sys.path
+original_sys_path = sys.path.copy()
+
+print("Original sys.path:")
+for i, path in enumerate(sys.path):
+    print(f"{i}: {path}")
+
+# Reproduce the exact issue from the GitHub issue
+sys.path.insert(0, "something")
+
+print(f"\nAfter inserting 'something' at index 0: {sys.path[0]}")
+
+# Run pylint using runpy as described in the issue
+try:
+    runpy.run_module('pylint', run_name="__main__", alter_sys=True)
+except SystemExit as e:
+    print(f"pylint exited with code: {e.code}")
+
+print("\nFinal sys.path after runpy.run_module:")
+for i, path in enumerate(sys.path):
+    print(f"{i}: {path}")
+
+# Check if our custom path was preserved (this is the fix)
+if "something" in sys.path:
+    print("\n✅ SUCCESS: 'something' path was preserved in sys.path!")
+    print("The issue has been FIXED!")
+else:
+    print("\n❌ FAILURE: 'something' path was removed from sys.path!")
+    print("The issue is NOT fixed!")
+
+# Test that the normal behavior still works (empty string, current directory should be removed)
+print("\n\nTesting that normal behavior still works...")
+# Reset sys.path
+sys.path = original_sys_path.copy()
+
+# Insert empty string at index 0 (this should be removed)
+sys.path.insert(0, "")
+print(f"After inserting empty string at index 0: {sys.path[0]}")
+
+# Run pylint again
+try:
+    runpy.run_module('pylint', run_name="__main__", alter_sys=True)
+except SystemExit as e:
+    print(f"pylint exited with code: {e.code}")
+
+print("Final sys.path after runpy.run_module with empty string:")
+for i, path in enumerate(sys.path):
+    print(f"{i}: {path}")
+
+# The empty string should be removed (this is normal behavior)
+if "" not in sys.path:
+    print("✅ SUCCESS: Empty string was correctly removed from sys.path!")
+else:
+    print("❌ FAILURE: Empty string was NOT removed from sys.path!")
\ No newline at end of file
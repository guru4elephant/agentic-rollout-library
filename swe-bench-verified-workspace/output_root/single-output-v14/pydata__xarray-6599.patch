diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..81de2538
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+import xarray as xr
+import numpy as np
+
+values = np.array(
+    [
+        "2021-04-01T05:25:19.000000000",
+        "2021-04-01T05:25:29.000000000",
+        "2021-04-01T05:25:39.000000000",
+        "2021-04-01T05:25:49.000000000",
+        "2021-04-01T05:25:59.000000000",
+        "2021-04-01T05:26:09.000000000",
+    ],
+    dtype="datetime64[ns]",
+)
+azimuth_time = xr.DataArray(
+    values, name="azimuth_time", coords={"azimuth_time": values - values[0]}
+)
+
+polyfit_coefficients = xr.DataArray(
+    [
+        [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],
+        [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],
+        [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],
+        [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],
+        [4.44739216e06, 1.45053974e06, 5.29960857e06],
+    ],
+    dims=("degree", "axis"),
+    coords={"axis": [0, 1, 2], "degree": [4, 3, 2, 1, 0]},
+)
+
+print("Result:")
+print(xr.polyval(azimuth_time, polyfit_coefficients))
+print("\nCoordinate dtype:", azimuth_time.dtype)
+print("Coordinate data:", azimuth_time.data)
\ No newline at end of file
diff --git a/test_timedelta_conversion.py b/test_timedelta_conversion.py
new file mode 100644
index 00000000..9357b551
--- /dev/null
+++ b/test_timedelta_conversion.py
@@ -0,0 +1,21 @@
+import numpy as np
+import xarray as xr
+from xarray.core.duck_array_ops import datetime_to_numeric
+
+# Create a timedelta array
+timedelta_array = np.array([0, 10, 20, 30, 40, 50], dtype='timedelta64[ns]')
+print("Original timedelta array:", timedelta_array)
+print("dtype:", timedelta_array.dtype)
+print("dtype.kind:", timedelta_array.dtype.kind)
+
+# Test current conversion approach (with datetime offset)
+result1 = datetime_to_numeric(timedelta_array, offset=np.datetime64("1970-01-01"), datetime_unit="ns")
+print("With datetime offset:", result1)
+
+# Test direct conversion approach
+result2 = timedelta_array.astype(float)
+print("Direct conversion:", result2)
+
+# Test what happens if we use None offset
+result3 = datetime_to_numeric(timedelta_array, offset=None, datetime_unit="ns")
+print("With None offset:", result3)
\ No newline at end of file
diff --git a/test_timedelta_correct.py b/test_timedelta_correct.py
new file mode 100644
index 00000000..fbf36dba
--- /dev/null
+++ b/test_timedelta_correct.py
@@ -0,0 +1,15 @@
+import numpy as np
+
+# Create a timedelta array
+timedelta_array = np.array([0, 10, 20, 30, 40, 50], dtype='timedelta64[ns]')
+print("Original timedelta array:", timedelta_array)
+print("dtype:", timedelta_array.dtype)
+print("dtype.kind:", timedelta_array.dtype.kind)
+
+# Correct way to convert timedelta to numeric
+result = timedelta_array.astype(float)
+print("Direct conversion to float:", result)
+
+# Alternative using timedelta division
+result2 = timedelta_array / np.timedelta64(1, 'ns')
+print("Using timedelta division:", result2)
\ No newline at end of file
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 823cbe02..835c5da7 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1933,7 +1933,7 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:
     from .dataset import Dataset
 
     def to_floatable(x: DataArray) -> DataArray:
-        if x.dtype.kind in "mM":
+        if x.dtype.kind == "M":  # datetime64
             return x.copy(
                 data=datetime_to_numeric(
                     x.data,
@@ -1941,6 +1941,8 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:
                     datetime_unit="ns",
                 ),
             )
+        elif x.dtype.kind == "m":  # timedelta64
+            return x.copy(data=x.data.astype(float))
         return x
 
     if isinstance(data, Dataset):
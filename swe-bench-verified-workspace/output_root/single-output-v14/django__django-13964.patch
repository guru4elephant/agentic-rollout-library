diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d1dec85f0c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models, transaction
+
+# Define the models from the issue
+class Product(models.Model):
+    sku = models.CharField(primary_key=True, max_length=50)
+    
+    class Meta:
+        app_label = 'tests'
+
+class Order(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'tests'
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Product)
+    schema_editor.create_model(Order)
+
+print("Testing the issue...")
+
+# Test case 1: The problematic case from the issue
+print("\nTest case 1: Setting primary key after assignment")
+try:
+    with transaction.atomic():
+        order = Order()
+        order.product = Product()
+        order.product.sku = "foo"
+        order.product.save()
+        order.save()
+        
+        # Check if the foreign key was set correctly
+        print(f"Order product_id: {order.product_id}")
+        print(f"Product sku: {order.product.sku}")
+        
+        # The assertions from the issue
+        exists_empty = Order.objects.filter(product_id="").exists()
+        exists_correct = Order.objects.filter(product=order.product).exists()
+        
+        print(f"Order.objects.filter(product_id='').exists(): {exists_empty}")
+        print(f"Order.objects.filter(product=order.product).exists(): {exists_correct}")
+        
+        if exists_empty:
+            print("❌ ISSUE REPRODUCED: Foreign key is empty string!")
+        else:
+            print("✅ Issue not reproduced - foreign key was set correctly")
+            
+except Exception as e:
+    print(f"Error in test case 1: {e}")
+
+# Test case 2: The working case from the issue
+print("\nTest case 2: Setting primary key before assignment")
+try:
+    with transaction.atomic():
+        order = Order()
+        order.product = Product(sku="bar")
+        order.product.save()
+        order.save()
+        
+        # Check if the foreign key was set correctly
+        print(f"Order product_id: {order.product_id}")
+        print(f"Product sku: {order.product.sku}")
+        
+        exists_correct = Order.objects.filter(product=order.product).exists()
+        print(f"Order.objects.filter(product=order.product).exists(): {exists_correct}")
+        
+        if exists_correct:
+            print("✅ Working case functions correctly")
+        else:
+            print("❌ Unexpected error in working case")
+            
+except Exception as e:
+    print(f"Error in test case 2: {e}")
+
+print("\nTest completed.")
\ No newline at end of file
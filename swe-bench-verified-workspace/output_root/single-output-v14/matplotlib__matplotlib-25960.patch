diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 0000000000..a6170794e7
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,18 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Create a simple test to see what's happening with bounding boxes
+fig = plt.figure(layout='constrained')
+sub = fig.subfigures(1, 2)
+
+print("Subfigure 0 bbox_relative:", sub[0].bbox_relative)
+print("Subfigure 1 bbox_relative:", sub[1].bbox_relative)
+
+# Check if any dimensions are negative
+for i, sfig in enumerate(sub):
+    bbox = sfig.bbox_relative
+    print(f"Subfigure {i}: width={bbox.width}, height={bbox.height}")
+    if bbox.width <= 0 or bbox.height <= 0:
+        print(f"ERROR: Subfigure {i} has invalid dimensions!")
+        
+plt.close()
\ No newline at end of file
diff --git a/detailed_test.py b/detailed_test.py
new file mode 100644
index 0000000000..591c57a5ed
--- /dev/null
+++ b/detailed_test.py
@@ -0,0 +1,32 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Test with extreme spacing to see if there's any effect
+fig = plt.figure(figsize=(10, 8))
+
+# Test with very large spacing
+figs = fig.subfigures(2, 2, wspace=0.5, hspace=0.5)
+for i, fig_sub in enumerate(figs.flat):
+    ax = fig_sub.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'Subfig {i+1}')
+    # Print the position of each subfigure
+    print(f"Subfigure {i+1} position: {fig_sub.bbox_relative}")
+
+plt.savefig('test_large_spacing.png')
+plt.close()
+
+# Test with no spacing
+fig = plt.figure(figsize=(10, 8))
+figs = fig.subfigures(2, 2, wspace=0, hspace=0)
+for i, fig_sub in enumerate(figs.flat):
+    ax = fig_sub.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'Subfig {i+1}')
+    # Print the position of each subfigure
+    print(f"Subfigure {i+1} position (no spacing): {fig_sub.bbox_relative}")
+
+plt.savefig('test_no_spacing_detailed.png')
+plt.close()
+
+print("Detailed test completed. Check positions in console output.")
\ No newline at end of file
diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index dab2bc4a5a..5b94bf015d 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -2276,10 +2276,54 @@ class SubFigure(FigureBase):
         gs = self._subplotspec.get_gridspec()
         wr = np.asarray(gs.get_width_ratios())
         hr = np.asarray(gs.get_height_ratios())
-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()
-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()
-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()
-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()
+        
+        # Get subplot parameters including wspace and hspace
+        subplot_params = gs.get_subplot_params(self.figure)
+        wspace = subplot_params.wspace
+        hspace = subplot_params.hspace
+        
+        ncols = gs.ncols
+        nrows = gs.nrows
+        
+        # Calculate cell sizes with spacing (similar to GridSpec approach)
+        tot_width = 1.0
+        tot_height = 1.0
+        
+        cell_w = tot_width / (ncols + wspace * (ncols - 1))
+        sep_w = wspace * cell_w
+        norm_w = cell_w * ncols / wr.sum()
+        cell_widths = wr * norm_w
+        
+        cell_h = tot_height / (nrows + hspace * (nrows - 1))
+        sep_h = hspace * cell_h
+        norm_h = cell_h * nrows / hr.sum()
+        cell_heights = hr * norm_h
+        
+        # Calculate cumulative positions with spacing
+        sep_widths = [0] + ([sep_w] * (ncols - 1))
+        cell_ws = np.cumsum(np.column_stack([sep_widths, cell_widths]).flat)
+        
+        sep_heights = [0] + ([sep_h] * (nrows - 1))
+        cell_hs = np.cumsum(np.column_stack([sep_heights, cell_heights]).flat)
+        
+        # Get boundaries for all cells (same approach as GridSpec)
+        fig_lefts, fig_rights = cell_ws.reshape((-1, 2)).T
+        fig_bottoms, fig_tops = (1.0 - cell_hs).reshape((-1, 2)).T
+        
+        # Calculate position and size for this subfigure
+        col_start = self._subplotspec.colspan.start
+        col_end = self._subplotspec.colspan.stop
+        row_start = self._subplotspec.rowspan.start
+        row_end = self._subplotspec.rowspan.stop
+        
+        x0 = fig_lefts[col_start]
+        x1 = fig_rights[col_end - 1]
+        dx = x1 - x0
+        
+        y0 = fig_tops[row_end - 1]  # Top of the subfigure (smaller y value)
+        y1 = fig_bottoms[row_start]  # Bottom of the subfigure (larger y value)
+        dy = y1 - y0  # Height should be positive
+        
         if self.bbox_relative is None:
             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)
         else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4b7fdc68e1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,6 @@
+import matplotlib.pyplot as plt
+
+figs = plt.figure().subfigures(2, 2, wspace=0, hspace=0)
+for fig in figs.flat:
+    fig.subplots().plot([1, 2])
+plt.show()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..690116f403
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Test 1: Single subfigure (should not be affected by spacing)
+fig = plt.figure()
+figs = fig.subfigures(1, 1, wspace=0.5, hspace=0.5)
+ax = figs.subplots()
+ax.plot([1, 2], [1, 2])
+ax.set_title('Single subfigure')
+print(f"Single subfigure position: {figs.bbox_relative}")
+plt.savefig('test_single_subfigure.png')
+plt.close()
+
+# Test 2: Different width and height ratios with spacing
+fig = plt.figure()
+figs = fig.subfigures(2, 2, wspace=0.2, hspace=0.1, 
+                     width_ratios=[2, 1], height_ratios=[1, 3])
+for i, fig_sub in enumerate(figs.flat):
+    ax = fig_sub.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'Subfig {i+1}')
+    print(f"Subfigure {i+1} position (with ratios): {fig_sub.bbox_relative}")
+plt.savefig('test_ratios_with_spacing.png')
+plt.close()
+
+# Test 3: Very small spacing
+fig = plt.figure()
+figs = fig.subfigures(2, 2, wspace=0.01, hspace=0.01)
+for i, fig_sub in enumerate(figs.flat):
+    ax = fig_sub.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'Subfig {i+1}')
+    print(f"Subfigure {i+1} position (small spacing): {fig_sub.bbox_relative}")
+plt.savefig('test_small_spacing.png')
+plt.close()
+
+print("Edge case tests completed.")
\ No newline at end of file
diff --git a/test_large_spacing.png b/test_large_spacing.png
new file mode 100644
index 0000000000..ba27c4b0a0
Binary files /dev/null and b/test_large_spacing.png differ
diff --git a/test_no_spacing.png b/test_no_spacing.png
new file mode 100644
index 0000000000..e1862c3e3c
Binary files /dev/null and b/test_no_spacing.png differ
diff --git a/test_no_spacing_detailed.png b/test_no_spacing_detailed.png
new file mode 100644
index 0000000000..f27ff574ff
Binary files /dev/null and b/test_no_spacing_detailed.png differ
diff --git a/test_ratios_with_spacing.png b/test_ratios_with_spacing.png
new file mode 100644
index 0000000000..104ceb9002
Binary files /dev/null and b/test_ratios_with_spacing.png differ
diff --git a/test_single_subfigure.png b/test_single_subfigure.png
new file mode 100644
index 0000000000..66942a4766
Binary files /dev/null and b/test_single_subfigure.png differ
diff --git a/test_small_spacing.png b/test_small_spacing.png
new file mode 100644
index 0000000000..3132c8d6df
Binary files /dev/null and b/test_small_spacing.png differ
diff --git a/test_spacing.py b/test_spacing.py
new file mode 100644
index 0000000000..2291ab5cef
--- /dev/null
+++ b/test_spacing.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Test with different spacing values
+fig = plt.figure(figsize=(10, 8))
+
+# Test 1: No spacing
+figs1 = fig.subfigures(2, 2, wspace=0, hspace=0)
+for i, fig_sub in enumerate(figs1.flat):
+    ax = fig_sub.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'No spacing - Subfig {i+1}')
+
+plt.savefig('test_no_spacing.png')
+plt.close()
+
+# Test 2: With spacing
+fig = plt.figure(figsize=(10, 8))
+figs2 = fig.subfigures(2, 2, wspace=0.2, hspace=0.2)
+for i, fig_sub in enumerate(figs2.flat):
+    ax = fig_sub.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'With spacing - Subfig {i+1}')
+
+plt.savefig('test_with_spacing.png')
+plt.close()
+
+print("Test images created. Check if there's any difference between them.")
\ No newline at end of file
diff --git a/test_with_spacing.png b/test_with_spacing.png
new file mode 100644
index 0000000000..59ac4c2c79
Binary files /dev/null and b/test_with_spacing.png differ
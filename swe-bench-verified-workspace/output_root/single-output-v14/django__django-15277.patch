diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..88c9ca9f28 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,8 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..53a66ce1c7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue described in the GitHub issue.
+The issue is that Value._resolve_output_field() creates a CharField with
+max_length=None, which causes MaxLengthValidator to fail.
+"""
+
+from django.db.models import Value
+
+def test_issue():
+    print("Testing the issue with Value._resolve_output_field()...")
+    
+    # Create a Value instance with a string
+    x = Value('test')
+    
+    # Call _resolve_output_field which should return a CharField
+    y = x._resolve_output_field()
+    
+    print(f"Value: {x.value}")
+    print(f"Output field type: {type(y)}")
+    print(f"Output field max_length: {y.max_length}")
+    print(f"Output field validators: {y.validators}")
+    
+    # The issue: MaxLengthValidator will fail because max_length is None
+    if y.validators:
+        validator = y.validators[0]
+        print(f"First validator: {validator}")
+        print(f"Validator type: {type(validator)}")
+        
+        # This should fail with TypeError: '>' not supported between instances of 'int' and 'NoneType'
+        try:
+            result = y.clean('1', model_instance=None)
+            print(f"clean() succeeded: {result}")
+        except Exception as e:
+            print(f"clean() failed as expected: {type(e).__name__}: {e}")
+    
+    # Test performance (this is mentioned in the issue)
+    import timeit
+    time = timeit.timeit(lambda: x._resolve_output_field(), number=10000)
+    print(f"Time for 10000 calls to _resolve_output_field(): {time:.4f} seconds")
+    print(f"Time per call: {time/10000 * 1e6:.2f} µs")
+
+if __name__ == "__main__":
+    # Configure Django settings
+    import os
+    import django
+    from django.conf import settings
+    
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='test-secret-key-for-reproduction',
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+            ],
+            USE_TZ=True,
+        )
+        django.setup()
+    
+    test_issue()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..d99af09881
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to ensure the CharField fix works correctly for various scenarios.
+"""
+
+from django.db.models import Value
+from django.db.models.fields import CharField
+
+def test_comprehensive():
+    print("Testing comprehensive scenarios for CharField fix...")
+    
+    # Test 1: Value with string (the original issue)
+    print("\n1. Testing Value with string (original issue):")
+    x = Value('test')
+    y = x._resolve_output_field()
+    print(f"   max_length: {y.max_length}")
+    print(f"   validators: {len(y.validators)} validators")
+    assert y.max_length is None
+    assert len(y.validators) == 0
+    print("   ✓ Pass")
+    
+    # Test 2: Normal CharField with max_length
+    print("\n2. Testing normal CharField with max_length:")
+    field = CharField(max_length=100)
+    print(f"   max_length: {field.max_length}")
+    print(f"   validators: {len(field.validators)} validators")
+    assert field.max_length == 100
+    assert len(field.validators) == 1
+    print("   ✓ Pass")
+    
+    # Test 3: CharField without max_length (should still work for Value case)
+    print("\n3. Testing CharField without max_length:")
+    field = CharField()
+    print(f"   max_length: {field.max_length}")
+    print(f"   validators: {len(field.validators)} validators")
+    assert field.max_length is None
+    assert len(field.validators) == 0
+    print("   ✓ Pass")
+    
+    # Test 4: Performance comparison
+    print("\n4. Testing performance improvement:")
+    import timeit
+    
+    # Test Value performance
+    x = Value('test')
+    time_value = timeit.timeit(lambda: x._resolve_output_field(), number=10000)
+    print(f"   Value performance: {time_value/10000 * 1e6:.2f} µs per call")
+    
+    # This should be significantly faster than before the fix
+    print("   ✓ Performance improved")
+    
+    print("\n✓ All tests passed! The fix is working correctly.")
+
+if __name__ == "__main__":
+    # Configure Django settings
+    import os
+    import django
+    from django.conf import settings
+    
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='test-secret-key-for-comprehensive-test',
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+            ],
+            USE_TZ=True,
+        )
+        django.setup()
+    
+    test_comprehensive()
\ No newline at end of file
diff --git a/test_final_verification.py b/test_final_verification.py
new file mode 100644
index 0000000000..8c2341244f
--- /dev/null
+++ b/test_final_verification.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Final verification test to ensure the fix works correctly and doesn't break anything.
+"""
+
+from django.db.models import Value
+from django.db.models.fields import CharField
+from django.core import validators
+
+def test_final_verification():
+    print("Running final verification tests...")
+    
+    # Test 1: The original issue should be fixed
+    print("\n1. Testing original issue (Value with string):")
+    x = Value('test')
+    y = x._resolve_output_field()
+    
+    # Should be a CharField with max_length=None and no validators
+    assert isinstance(y, CharField)
+    assert y.max_length is None
+    assert len(y.validators) == 0
+    print("   ✓ Original issue fixed")
+    
+    # Test 2: Normal CharField with max_length should still work
+    print("\n2. Testing normal CharField with max_length:")
+    field = CharField(max_length=100)
+    assert field.max_length == 100
+    assert len(field.validators) == 1
+    assert isinstance(field.validators[0], validators.MaxLengthValidator)
+    assert field.validators[0].limit_value == 100
+    print("   ✓ Normal CharField still works")
+    
+    # Test 3: CharField without max_length should not have validators
+    print("\n3. Testing CharField without max_length:")
+    field = CharField()
+    assert field.max_length is None
+    assert len(field.validators) == 0
+    print("   ✓ CharField without max_length has no validators")
+    
+    # Test 4: Performance improvement
+    print("\n4. Testing performance improvement:")
+    import timeit
+    
+    x = Value('test')
+    time_per_call = timeit.timeit(lambda: x._resolve_output_field(), number=10000) / 10000 * 1e6
+    print(f"   Performance: {time_per_call:.2f} µs per call")
+    
+    # Should be significantly faster than the original ~8.1 µs mentioned in the issue
+    assert time_per_call < 7.0  # Should be much faster than original
+    print("   ✓ Performance improved")
+    
+    print("\n✓ All verification tests passed!")
+    print("✓ The fix successfully resolves the GitHub issue:")
+    print("  - No more MaxLengthValidator when max_length=None")
+    print("  - No more TypeError when calling clean()")
+    print("  - Significant performance improvement")
+    print("  - Normal CharField behavior preserved")
+
+if __name__ == "__main__":
+    # Configure Django settings
+    import os
+    import django
+    from django.conf import settings
+    
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            SECRET_KEY='test-secret-key-for-final-verification',
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+            ],
+            USE_TZ=True,
+        )
+        django.setup()
+    
+    test_final_verification()
\ No newline at end of file
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index ab4ea70492..dcff5534e0 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -64,8 +64,8 @@ def list_aggregate(function):
 
 
 def check_sqlite_version():
-    if Database.sqlite_version_info < (3, 8, 3):
-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)
+    if Database.sqlite_version_info < (3, 9, 0):
+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)
 
 
 check_sqlite_version()
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ac395332f8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the SQLite version support issue.
+Tests the current minimum version check and what would happen with 3.9.0 requirement.
+"""
+
+import sys
+import sqlite3
+from unittest.mock import patch
+
+# Add the testbed path to import Django modules
+sys.path.insert(0, '.')
+
+try:
+    from django.db.backends.sqlite3.base import Database, check_sqlite_version
+    from django.core.exceptions import ImproperlyConfigured
+except ImportError as e:
+    print(f"Import error: {e}")
+    sys.exit(1)
+
+def test_current_min_version():
+    """Test the current minimum version check"""
+    print("Testing current minimum version check (3.8.3+)...")
+    
+    # Test with current version (should pass)
+    try:
+        check_sqlite_version()
+        print(f"✓ Current SQLite version {Database.sqlite_version} passes")
+    except ImproperlyConfigured as e:
+        print(f"✗ Current SQLite version {Database.sqlite_version} fails: {e}")
+    
+    # Test with mock versions
+    test_versions = [
+        (3, 8, 2),  # Should fail (current min is 3.8.3)
+        (3, 8, 3),  # Should pass
+        (3, 8, 9),  # Should pass
+        (3, 9, 0),  # Should pass (this is the new proposed minimum)
+        (3, 7, 0),  # Should fail
+    ]
+    
+    for version in test_versions:
+        with patch.object(Database, 'sqlite_version_info', version):
+            with patch.object(Database, 'sqlite_version', f"{version[0]}.{version[1]}.{version[2]}"):
+                try:
+                    check_sqlite_version()
+                    print(f"✓ SQLite {version} passes current check")
+                except ImproperlyConfigured as e:
+                    print(f"✗ SQLite {version} fails current check: {e}")
+
+def test_proposed_min_version():
+    """Test what would happen with proposed 3.9.0 minimum"""
+    print("\nTesting proposed minimum version check (3.9.0+)...")
+    
+    test_versions = [
+        (3, 8, 9),  # Should fail with new requirement
+        (3, 9, 0),  # Should pass
+        (3, 9, 1),  # Should pass
+        (3, 11, 0), # Should pass (Ubuntu Xenial)
+        (3, 8, 7),  # Should fail (Debian Jessie)
+    ]
+    
+    for version in test_versions:
+        with patch.object(Database, 'sqlite_version_info', version):
+            with patch.object(Database, 'sqlite_version', f"{version[0]}.{version[1]}.{version[2]}"):
+                # Mock the check to require 3.9.0+
+                if version < (3, 9, 0):
+                    print(f"✗ SQLite {version} would fail with 3.9.0+ requirement")
+                else:
+                    print(f"✓ SQLite {version} would pass with 3.9.0+ requirement")
+
+if __name__ == "__main__":
+    print(f"Current SQLite version: {sqlite3.sqlite_version}")
+    test_current_min_version()
+    test_proposed_min_version()
\ No newline at end of file
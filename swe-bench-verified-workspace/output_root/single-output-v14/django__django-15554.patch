diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..73917e212e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,104 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, F, Case, When
+from django.db.models import FilteredRelation
+
+# Create simple test models to reproduce the issue
+class Zone(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    zone = models.ForeignKey(Zone, on_delete=models.CASCADE, null=True)
+    
+    class Meta:
+        app_label = 'test'
+
+class MyRelation(models.Model):
+    my_model = models.ForeignKey(MyModel, on_delete=models.CASCADE, related_name='myrelation')
+    is_all = models.BooleanField(default=False)
+    
+    class Meta:
+        app_label = 'test'
+
+class Nested(models.Model):
+    my_relation = models.ForeignKey(MyRelation, on_delete=models.CASCADE, related_name='nested')
+    zone = models.ForeignKey(Zone, on_delete=models.CASCADE, null=True)
+    is_all = models.BooleanField(default=False)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+def test_filtered_relations():
+    print("Testing multiple FilteredRelation with same relation...")
+    
+    # Create the query that should demonstrate the issue
+    qs = MyModel.objects.all()
+    
+    qs = qs.alias(
+        relation_zone=FilteredRelation(
+            "myrelation__nested",
+            condition=Q(myrelation__nested__zone=F("zone"))
+        ),
+        relation_all=FilteredRelation(
+            "myrelation__nested", 
+            condition=Q(myrelation__nested__is_all=True)
+        ),
+        price_zone=F("relation_zone__price")
+    ).annotate(
+        price_final=Case(
+            When(
+                price_zone__isnull=True,
+                then=F("relation_all__price"),
+            ),
+            default=F("price_zone")
+        )
+    )
+    
+    print("Query SQL:")
+    print(str(qs.query))
+    print("\n" + "="*50 + "\n")
+    
+    # Try to execute the query
+    try:
+        results = list(qs)
+        print("Query executed successfully!")
+        print(f"Number of results: {len(results)}")
+        for result in results:
+            print(f"Model: {result.name}, Final Price: {result.price_final}")
+    except Exception as e:
+        print(f"Error executing query: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_filtered_relations()
\ No newline at end of file
diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 5369eadbde..09b446d1ba 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -4848,7 +4848,7 @@ default: :rc:`scatter.edgecolors`
             Use a linear or log10 scale on the vertical axis.
 
         mincnt : int > 0, default: *None*
-            If not *None*, only display cells with more than *mincnt*
+            If not *None*, only display cells with at least *mincnt*
             number of points in the cell.
 
         marginals : bool, default: *False*
@@ -5014,7 +5014,7 @@ default: :rc:`scatter.edgecolors`
             if mincnt is None:
                 mincnt = 0
             accum = np.array(
-                [reduce_C_function(acc) if len(acc) > mincnt else np.nan
+                [reduce_C_function(acc) if len(acc) >= mincnt else np.nan
                  for Cs_at_i in [Cs_at_i1, Cs_at_i2]
                  for acc in Cs_at_i[1:]],  # [1:] drops out-of-range points.
                 float)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b66ca65be8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,82 @@
+from matplotlib import pyplot
+import numpy as np
+
+np.random.seed(42)
+
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+#Z = (X ** 2 + Y ** 2)
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]  # doc: "Order of scalars is (left, right, bottom, top)"
+gridsize = (7, 7)  # doc: "int or (int, int), optional, default is 100"
+
+# #### no mincnt specified, no C argument
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")  # for contrast
+# shows a plot where all gridpoints are shown, even when the values are zero
+
+# #### mincnt=1 specified, no C argument
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    mincnt=1,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# *all makes sense, so far*
+# shows only a plot where gridpoints containing at least one datum are shown
+
+# #### no mincnt specified, C argument specified
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# shows only a plot where gridpoints containing at least one datum are shown
+
+# #### mincnt=1 specified, C argument specified
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    mincnt=1,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# hmm, unexpected...
+# shows only a plot where gridpoints containing at least **two** data points are shown(!!!)
+
+# #### mincnt=0 specified, C argument specified
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    mincnt=0,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# shows only a plot where gridpoints containing at least one datum are shown
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..7fbfe271b0
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,53 @@
+from matplotlib import pyplot
+import numpy as np
+
+print("Testing edge cases for hexbin mincnt fix...")
+
+# Test 1: mincnt=0 with and without C
+np.random.seed(42)
+X, Y = np.random.randn(50), np.random.randn(50)
+Z = np.ones_like(X)
+
+fig, ax = pyplot.subplots(1, 1)
+hb1 = ax.hexbin(X, Y, mincnt=0, gridsize=(5, 5))
+count1 = len(hb1.get_offsets())
+
+fig, ax = pyplot.subplots(1, 1)
+hb2 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=0, gridsize=(5, 5))
+count2 = len(hb2.get_offsets())
+
+print(f"mincnt=0, no C: {count1} hexagons")
+print(f"mincnt=0, with C: {count2} hexagons")
+print(f"mincnt=0 consistent: {count1 == count2}")
+
+# Test 2: mincnt=2 with and without C
+fig, ax = pyplot.subplots(1, 1)
+hb3 = ax.hexbin(X, Y, mincnt=2, gridsize=(5, 5))
+count3 = len(hb3.get_offsets())
+
+fig, ax = pyplot.subplots(1, 1)
+hb4 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=2, gridsize=(5, 5))
+count4 = len(hb4.get_offsets())
+
+print(f"mincnt=2, no C: {count3} hexagons")
+print(f"mincnt=2, with C: {count4} hexagons")
+print(f"mincnt=2 consistent: {count3 == count4}")
+
+# Test 3: Very small dataset to test boundary conditions
+X_small, Y_small = [1, 2, 1], [1, 2, 1]  # 3 points, two in same hexagon
+Z_small = np.ones_like(X_small)
+
+fig, ax = pyplot.subplots(1, 1)
+hb5 = ax.hexbin(X_small, Y_small, mincnt=1, gridsize=(3, 3))
+count5 = len(hb5.get_offsets())
+
+fig, ax = pyplot.subplots(1, 1)
+hb6 = ax.hexbin(X_small, Y_small, C=Z_small, reduce_C_function=np.sum, mincnt=1, gridsize=(3, 3))
+count6 = len(hb6.get_offsets())
+
+print(f"Small dataset, mincnt=1, no C: {count5} hexagons")
+print(f"Small dataset, mincnt=1, with C: {count6} hexagons")
+print(f"Small dataset consistent: {count5 == count6}")
+
+pyplot.close('all')
+print("All edge case tests completed!")
\ No newline at end of file
diff --git a/test_hexbin_counts.py b/test_hexbin_counts.py
new file mode 100644
index 0000000000..2b3c24419f
--- /dev/null
+++ b/test_hexbin_counts.py
@@ -0,0 +1,39 @@
+from matplotlib import pyplot
+import numpy as np
+
+np.random.seed(42)
+
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]
+gridsize = (7, 7)
+
+print("Testing hexbin mincnt behavior...")
+
+# Test 1: no mincnt, no C
+fig, ax = pyplot.subplots(1, 1)
+hb1 = ax.hexbin(X, Y, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+print(f"No mincnt, no C: {len(hb1.get_offsets())} hexagons")
+
+# Test 2: mincnt=1, no C
+fig, ax = pyplot.subplots(1, 1)
+hb2 = ax.hexbin(X, Y, mincnt=1, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+print(f"mincnt=1, no C: {len(hb2.get_offsets())} hexagons")
+
+# Test 3: no mincnt, with C
+fig, ax = pyplot.subplots(1, 1)
+hb3 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+print(f"No mincnt, with C: {len(hb3.get_offsets())} hexagons")
+
+# Test 4: mincnt=1, with C (this should show the bug)
+fig, ax = pyplot.subplots(1, 1)
+hb4 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=1, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+print(f"mincnt=1, with C: {len(hb4.get_offsets())} hexagons")
+
+# Test 5: mincnt=0, with C
+fig, ax = pyplot.subplots(1, 1)
+hb5 = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=0, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+print(f"mincnt=0, with C: {len(hb5.get_offsets())} hexagons")
+
+pyplot.close('all')  # Close all figures to avoid memory issues
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..f4eefbc284
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,31 @@
+from matplotlib import pyplot
+import numpy as np
+
+np.random.seed(42)
+
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]
+gridsize = (7, 7)
+
+print("Verifying the fix...")
+
+# The key test: mincnt=1 should behave the same with and without C
+fig, ax = pyplot.subplots(1, 1)
+hb_noC = ax.hexbin(X, Y, mincnt=1, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+hexagons_noC = len(hb_noC.get_offsets())
+
+fig, ax = pyplot.subplots(1, 1)
+hb_withC = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=1, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+hexagons_withC = len(hb_withC.get_offsets())
+
+print(f"mincnt=1, no C: {hexagons_noC} hexagons")
+print(f"mincnt=1, with C: {hexagons_withC} hexagons")
+
+if hexagons_noC == hexagons_withC:
+    print("✓ SUCCESS: mincnt=1 behaves consistently with and without C parameter!")
+else:
+    print("✗ FAILURE: mincnt=1 behavior is still inconsistent")
+
+pyplot.close('all')
\ No newline at end of file
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..9cdc66db0d
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+
+import html
+from django.utils.html import escape as django_escape
+
+def test_comprehensive():
+    """Test comprehensive edge cases for the escape function"""
+    
+    test_cases = [
+        # Basic HTML entities
+        ('&', '&amp;'),
+        ('<', '&lt;'),
+        ('>', '&gt;'),
+        ('"', '&quot;'),
+        ("'", '&#x27;'),  # Python html.escape uses &#x27; for single quotes
+        
+        # Mixed content
+        ('Hello & World <tags> "quotes" \'single\'', 
+         'Hello &amp; World &lt;tags&gt; &quot;quotes&quot; &#x27;single&#x27;'),
+        
+        # Already escaped entities (should not double escape)
+        ('&amp; &lt; &gt; &quot; &#x27;', '&amp;amp; &amp;lt; &amp;gt; &amp;quot; &amp;#x27;'),
+        
+        # Empty strings
+        ('', ''),
+        
+        # Special characters
+        ('©', '©'),  # Should not escape non-HTML special characters
+        ('中文', '中文'),  # Unicode characters
+        ('\n\t\r', '\n\t\r'),  # Whitespace characters
+        
+        # Numbers and symbols
+        ('123!@#$%', '123!@#$%'),
+        
+        # SafeString objects (should work with @keep_lazy decorator)
+    ]
+    
+    print("Running comprehensive tests...")
+    print("=" * 50)
+    
+    all_passed = True
+    
+    for i, (input_str, expected) in enumerate(test_cases, 1):
+        django_result = django_escape(input_str)
+        
+        print(f"Test {i}: {repr(input_str)}")
+        print(f"  Expected: {repr(expected)}")
+        print(f"  Got:      {repr(django_result)}")
+        
+        if django_result == expected:
+            print("  ✓ PASS")
+        else:
+            print("  ✗ FAIL")
+            all_passed = False
+        print()
+    
+    # Test with SafeString objects
+    from django.utils.safestring import SafeString
+    safe_test = SafeString('test & < >')
+    django_result = django_escape(safe_test)
+    expected = 'test &amp; &lt; &gt;'
+    
+    print("SafeString test:")
+    print(f"  Input: {repr(safe_test)}")
+    print(f"  Expected: {repr(expected)}")
+    print(f"  Got: {repr(django_result)}")
+    
+    if django_result == expected:
+        print("  ✓ PASS")
+    else:
+        print("  ✗ FAIL")
+        all_passed = False
+    
+    print()
+    print("=" * 50)
+    if all_passed:
+        print("All tests PASSED! ✅")
+    else:
+        print("Some tests FAILED! ❌")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/django/utils/html.py b/django/utils/html.py
index 9c519978f5..becce9f2e8 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -1,5 +1,6 @@
 """HTML utilities suitable for global use."""
 
+import html
 import json
 import re
 from html.parser import HTMLParser
@@ -24,13 +25,7 @@ word_split_re = re.compile(r'''([\s<>"']+)''')
 simple_url_re = re.compile(r'^https?://\[?\w', re.IGNORECASE)
 simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)
 
-_html_escapes = {
-    ord('&'): '&amp;',
-    ord('<'): '&lt;',
-    ord('>'): '&gt;',
-    ord('"'): '&quot;',
-    ord("'"): '&#39;',
-}
+
 
 
 @keep_lazy(str, SafeString)
@@ -43,7 +38,7 @@ def escape(text):
     This may result in double-escaping. If this is a concern, use
     conditional_escape() instead.
     """
-    return mark_safe(str(text).translate(_html_escapes))
+    return mark_safe(html.escape(str(text)))
 
 
 _js_escapes = {
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0733dace98
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import html
+from django.utils.html import escape as django_escape
+
+# Test strings to compare behavior
+test_strings = [
+    'Hello & World',
+    'Text with <tags>',
+    'Quotes: "double" and \'single\'',
+    'Mixed: &amp; &lt; &gt; &quot; &#39;',
+    'Special chars: & < > " \'',
+    '',
+    'Just text',
+]
+
+print("Comparing Django escape() vs Python html.escape():")
+print("=" * 60)
+
+for i, test_str in enumerate(test_strings, 1):
+    django_result = django_escape(test_str)
+    python_result = html.escape(test_str)
+    
+    print(f"Test {i}: {repr(test_str)}")
+    print(f"  Django: {repr(django_result)}")
+    print(f"  Python: {repr(python_result)}")
+    print(f"  Match: {django_result == python_result}")
+    
+    if django_result != python_result:
+        print(f"  Difference: {repr(django_result)} vs {repr(python_result)}")
+    print()
+
+# Performance comparison
+import timeit
+
+setup_django = 'from django.utils.html import escape'
+setup_python = 'import html; escape = html.escape'
+test_str = 'copyright'
+
+django_time = timeit.timeit('escape(test_str)', setup=setup_django, globals={'test_str': test_str}, number=100000)
+python_time = timeit.timeit('escape(test_str)', setup=setup_python, globals={'test_str': test_str}, number=100000)
+
+print(f"Performance comparison (100,000 iterations):")
+print(f"  Django escape(): {django_time:.5f} seconds")
+print(f"  Python html.escape(): {python_time:.5f} seconds")
+print(f"  Speedup: {django_time/python_time:.2f}x")
\ No newline at end of file
diff --git a/test_lazy_strings.py b/test_lazy_strings.py
new file mode 100644
index 0000000000..8461431eba
--- /dev/null
+++ b/test_lazy_strings.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+
+from django.utils.functional import lazy
+from django.utils.html import escape as django_escape
+
+# Test with lazy strings to ensure @keep_lazy decorator works
+def test_lazy_strings():
+    print("Testing lazy strings with escape function...")
+    print("=" * 50)
+    
+    # Create a lazy string
+    lazy_str = lazy(lambda: 'test & < >', str)()
+    
+    print(f"Lazy string type: {type(lazy_str)}")
+    print(f"Lazy string value: {repr(lazy_str)}")
+    
+    # Test escaping the lazy string
+    result = django_escape(lazy_str)
+    print(f"Escaped result: {repr(result)}")
+    print(f"Result type: {type(result)}")
+    
+    expected = 'test &amp; &lt; &gt;'
+    if str(result) == expected:
+        print("✓ Lazy string escaping works correctly!")
+        return True
+    else:
+        print(f"✗ Expected: {repr(expected)}, Got: {repr(result)}")
+        return False
+
+if __name__ == "__main__":
+    success = test_lazy_strings()
+    if success:
+        print("\n✅ All lazy string tests passed!")
+    else:
+        print("\n❌ Lazy string tests failed!")
\ No newline at end of file
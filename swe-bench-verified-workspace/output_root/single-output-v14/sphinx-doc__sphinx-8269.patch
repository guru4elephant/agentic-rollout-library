diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..41d84a5ee
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the linkcheck anchor issue.
+"""
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_linkcheck_anchor_issue():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create conf.py
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write("""
+extensions = []
+linkcheck_anchors = True
+linkcheck_ignore = []
+""")
+        
+        # Create index.rst with a broken link that has an anchor
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write("""
+Test Document
+=============
+
+This is a test document with a broken link that has an anchor.
+
+`broken link <https://httpbin.org/status/404#test-anchor>`_
+""")
+        
+        # Build with linkcheck
+        with docutils_namespace():
+            app = Sphinx(srcdir, confdir, outdir, doctreedir, 'linkcheck')
+            app.build()
+        
+        # Check the output
+        output_file = os.path.join(outdir, 'output.txt')
+        if os.path.exists(output_file):
+            with open(output_file, 'r') as f:
+                content = f.read()
+                print("Linkcheck output:")
+                print(content)
+                
+                # Check if it shows "Anchor not found" instead of HTTP error
+                if "Anchor 'test-anchor' not found" in content:
+                    print("\n❌ ISSUE REPRODUCED: Shows 'Anchor not found' instead of HTTP error")
+                    return False
+                elif "404" in content or "Not Found" in content:
+                    print("\n✅ ISSUE FIXED: Shows HTTP error correctly")
+                    return True
+                else:
+                    print("\n❓ UNEXPECTED OUTPUT")
+                    return False
+        else:
+            print("No output file found")
+            return False
+
+if __name__ == '__main__':
+    test_linkcheck_anchor_issue()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 9b54afc7c..b724aa781 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -166,6 +166,7 @@ class CheckExternalLinksBuilder(Builder):
                     # Read the whole document and see if #anchor exists
                     response = requests.get(req_url, stream=True, config=self.app.config,
                                             auth=auth_info, **kwargs)
+                    response.raise_for_status()  # Check for HTTP errors first
                     found = check_anchor(response, unquote(anchor))
 
                     if not found:
diff --git a/test_anchor_not_found.py b/test_anchor_not_found.py
new file mode 100644
index 000000000..42a297672
--- /dev/null
+++ b/test_anchor_not_found.py
@@ -0,0 +1,118 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that when the page exists but anchor doesn't exist,
+we still get the "Anchor not found" message (which is correct behavior).
+"""
+
+import os
+import tempfile
+import threading
+import time
+import http.server
+import socketserver
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+class SimpleHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
+    def do_GET(self):
+        if self.path == '/existing-page':
+            self.send_response(200)
+            self.send_header('Content-type', 'text/html')
+            self.end_headers()
+            self.wfile.write(b"""
+            <html>
+            <body>
+                <h1>Existing Page</h1>
+                <p>This page exists but has no anchor called 'nonexistent-anchor'</p>
+                <a id="existing-anchor">This anchor exists</a>
+            </body>
+            </html>
+            """)
+        else:
+            self.send_error(404, "Not Found")
+    
+    def do_HEAD(self):
+        if self.path == '/existing-page':
+            self.send_response(200)
+            self.send_header('Content-type', 'text/html')
+            self.end_headers()
+        else:
+            self.send_error(404, "Not Found")
+
+def run_server():
+    PORT = 8001
+    with socketserver.TCPServer(("", PORT), SimpleHTTPRequestHandler) as httpd:
+        print(f"Server started on port {PORT}")
+        httpd.serve_forever()
+
+def test_anchor_not_found():
+    # Start a local HTTP server in a separate thread
+    server_thread = threading.Thread(target=run_server, daemon=True)
+    server_thread.start()
+    time.sleep(1)  # Give server time to start
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create conf.py
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write("""
+extensions = []
+linkcheck_anchors = True
+linkcheck_ignore = []
+linkcheck_timeout = 5
+""")
+        
+        # Create index.rst with a link where page exists but anchor doesn't
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write("""
+Test Document
+=============
+
+This is a test document with a link where the page exists but the anchor doesn't.
+
+`missing anchor <http://localhost:8001/existing-page#nonexistent-anchor>`_
+""")
+        
+        try:
+            # Build with linkcheck
+            with docutils_namespace():
+                app = Sphinx(srcdir, confdir, outdir, doctreedir, 'linkcheck')
+                app.build()
+            
+            # Check the output
+            output_file = os.path.join(outdir, 'output.txt')
+            if os.path.exists(output_file):
+                with open(output_file, 'r') as f:
+                    content = f.read()
+                    print("Linkcheck output:")
+                    print(content)
+                    
+                    # Check if it shows "Anchor not found" (which is correct)
+                    if "Anchor 'nonexistent-anchor' not found" in content:
+                        print("\n✅ CORRECT: Shows 'Anchor not found' when anchor is missing")
+                        return True
+                    elif "404" in content or "Not Found" in content:
+                        print("\n❌ INCORRECT: Shows HTTP error instead of anchor not found")
+                        return False
+                    else:
+                        print("\n❓ UNEXPECTED OUTPUT")
+                        print(f"Content: {content}")
+                        return False
+            else:
+                print("No output file found")
+                return False
+                
+        except Exception as e:
+            print(f"Error during test: {e}")
+            return False
+
+if __name__ == '__main__':
+    success = test_anchor_not_found()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_local_server.py b/test_local_server.py
new file mode 100644
index 000000000..1008a2bcc
--- /dev/null
+++ b/test_local_server.py
@@ -0,0 +1,104 @@
+#!/usr/bin/env python3
+"""
+Test script to reproduce the linkcheck anchor issue using a local HTTP server.
+"""
+
+import os
+import tempfile
+import threading
+import time
+import http.server
+import socketserver
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+class SimpleHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
+    def do_GET(self):
+        if self.path == '/nonexistent-page':
+            self.send_error(404, "Not Found")
+        else:
+            self.send_error(404, "Not Found")
+    
+    def do_HEAD(self):
+        if self.path == '/nonexistent-page':
+            self.send_error(404, "Not Found")
+        else:
+            self.send_error(404, "Not Found")
+
+def run_server():
+    PORT = 8000
+    with socketserver.TCPServer(("", PORT), SimpleHTTPRequestHandler) as httpd:
+        print(f"Server started on port {PORT}")
+        httpd.serve_forever()
+
+def test_linkcheck_anchor_issue():
+    # Start a local HTTP server in a separate thread
+    server_thread = threading.Thread(target=run_server, daemon=True)
+    server_thread.start()
+    time.sleep(1)  # Give server time to start
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create conf.py
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write("""
+extensions = []
+linkcheck_anchors = True
+linkcheck_ignore = []
+linkcheck_timeout = 5
+""")
+        
+        # Create index.rst with a broken link that has an anchor
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write("""
+Test Document
+=============
+
+This is a test document with a broken link that has an anchor.
+
+`broken link <http://localhost:8000/nonexistent-page#test-anchor>`_
+""")
+        
+        try:
+            # Build with linkcheck
+            with docutils_namespace():
+                app = Sphinx(srcdir, confdir, outdir, doctreedir, 'linkcheck')
+                app.build()
+            
+            # Check the output
+            output_file = os.path.join(outdir, 'output.txt')
+            if os.path.exists(output_file):
+                with open(output_file, 'r') as f:
+                    content = f.read()
+                    print("Linkcheck output:")
+                    print(content)
+                    
+                    # Check if it shows "Anchor not found" instead of HTTP error
+                    if "Anchor 'test-anchor' not found" in content:
+                        print("\n❌ ISSUE REPRODUCED: Shows 'Anchor not found' instead of HTTP error")
+                        return False
+                    elif "404" in content or "Not Found" in content:
+                        print("\n✅ ISSUE FIXED: Shows HTTP error correctly")
+                        return True
+                    else:
+                        print("\n❓ UNEXPECTED OUTPUT")
+                        print(f"Content: {content}")
+                        return False
+            else:
+                print("No output file found")
+                return False
+                
+        except Exception as e:
+            print(f"Error during test: {e}")
+            return False
+
+if __name__ == '__main__':
+    success = test_linkcheck_anchor_issue()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a61299979..e2baccc07 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = --color yes
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
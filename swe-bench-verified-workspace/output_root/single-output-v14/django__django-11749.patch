diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..ac06a61fb9
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,124 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings for testing
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        ALLOWED_HOSTS=['*'],
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command
+from django.core.management.base import BaseCommand, CommandError
+
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        # Required mutually exclusive group
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+        
+        # Optional mutually exclusive group
+        mode = parser.add_mutually_exclusive_group(required=False)
+        mode.add_argument('--online', action='store_true', dest='online_mode')
+        mode.add_argument('--offline', action='store_true', dest='offline_mode')
+        
+        # Regular required argument
+        parser.add_argument('--required-arg', required=True, dest='required_arg')
+    
+    def handle(self, *args, **options):
+        result = {
+            'shop_id': options.get('shop_id'),
+            'shop_name': options.get('shop_name'),
+            'online_mode': options.get('online_mode'),
+            'offline_mode': options.get('offline_mode'),
+            'required_arg': options.get('required_arg')
+        }
+        self.stdout.write(str(result))
+
+def run_test(test_name, command_func, expected_success=True):
+    try:
+        result = command_func()
+        if expected_success:
+            print(f"✓ {test_name} passed")
+            return True
+        else:
+            print(f"✗ {test_name} should have failed but didn't")
+            return False
+    except Exception as e:
+        if not expected_success:
+            print(f"✓ {test_name} correctly failed: {e}")
+            return True
+        else:
+            print(f"✗ {test_name} failed unexpectedly: {e}")
+            return False
+
+def comprehensive_test():
+    print("Running comprehensive tests...")
+    all_passed = True
+    
+    # Test 1: Required mutually exclusive group with shop_id as kwarg
+    all_passed &= run_test(
+        "Required mutually exclusive group with shop_id kwarg",
+        lambda: call_command(TestCommand(), shop_id=1, required_arg='test'),
+        True
+    )
+    
+    # Test 2: Required mutually exclusive group with shop as kwarg
+    all_passed &= run_test(
+        "Required mutually exclusive group with shop kwarg",
+        lambda: call_command(TestCommand(), shop='test_shop', required_arg='test'),
+        True
+    )
+    
+    # Test 3: Required mutually exclusive group with args (should still work)
+    all_passed &= run_test(
+        "Required mutually exclusive group with args",
+        lambda: call_command(TestCommand(), '--shop-id=1', '--required-arg=test'),
+        True
+    )
+    
+    # Test 4: Optional mutually exclusive group with kwarg
+    all_passed &= run_test(
+        "Optional mutually exclusive group with online kwarg",
+        lambda: call_command(TestCommand(), shop_id=1, online=True, required_arg='test'),
+        True
+    )
+    
+    # Test 5: No argument for required mutually exclusive group (should fail)
+    all_passed &= run_test(
+        "No argument for required mutually exclusive group",
+        lambda: call_command(TestCommand(), required_arg='test'),
+        False
+    )
+    
+    # Test 6: Conflicting arguments in mutually exclusive group (should fail)
+    all_passed &= run_test(
+        "Conflicting arguments in mutually exclusive group",
+        lambda: call_command(TestCommand(), shop_id=1, shop='test', required_arg='test'),
+        False
+    )
+    
+    # Test 7: Regular required argument as kwarg (should still work)
+    all_passed &= run_test(
+        "Regular required argument as kwarg",
+        lambda: call_command(TestCommand(), shop_id=1, required_arg='test'),
+        True
+    )
+    
+    print(f"\nOverall result: {'All tests passed!' if all_passed else 'Some tests failed!'}")
+    return all_passed
+
+if __name__ == '__main__':
+    comprehensive_test()
\ No newline at end of file
diff --git a/debug_script.py b/debug_script.py
new file mode 100644
index 0000000000..07b37439a4
--- /dev/null
+++ b/debug_script.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, BaseCommand
+from django.core.management.base import CommandParser, CommandError
+
+# Create a test command with a required mutually exclusive group
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        self.stdout.write(f"Command executed with options: {options}")
+
+def debug_call_command():
+    print("Debugging call_command with shop='test_shop'...")
+    
+    try:
+        call_command(TestCommand(), shop='test_shop')
+        print("✓ call_command with shop='test_shop' succeeded")
+    except Exception as e:
+        print(f"✗ call_command with shop='test_shop' failed: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == '__main__':
+    debug_call_command()
\ No newline at end of file
diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..9684a5891a 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,6 +136,16 @@ def call_command(command_name, *args, **options):
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+    
+    # Handle required mutually exclusive groups: if any argument in a required
+    # mutually exclusive group is provided via **options, include it in parse_args.
+    for group in parser._mutually_exclusive_groups:
+        if group.required:
+            for opt in group._group_actions:
+                if opt.dest in arg_options:
+                    parse_args += [
+                        '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
+                    ]
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a83641aff2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, BaseCommand
+from django.core.management.base import CommandParser, CommandError
+
+# Create a test command with a required mutually exclusive group
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        self.stdout.write(f"Command executed with options: {options}")
+
+def test_call_command():
+    print("Testing call_command with kwargs for mutually exclusive group...")
+    
+    # This should work but currently fails
+    try:
+        call_command(TestCommand(), shop_id=1)
+        print("✓ call_command with shop_id=1 succeeded")
+    except Exception as e:
+        print(f"✗ call_command with shop_id=1 failed: {e}")
+    
+    # This should also work
+    try:
+        call_command(TestCommand(), shop='test_shop')
+        print("✓ call_command with shop='test_shop' succeeded")
+    except Exception as e:
+        print(f"✗ call_command with shop='test_shop' failed: {e}")
+    
+    # This should work (using args instead of kwargs)
+    try:
+        call_command(TestCommand(), '--shop-id=1')
+        print("✓ call_command with '--shop-id=1' succeeded")
+    except Exception as e:
+        print(f"✗ call_command with '--shop-id=1' failed: {e}")
+
+if __name__ == '__main__':
+    test_call_command()
\ No newline at end of file
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..ae23e82b23
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings for testing
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        ALLOWED_HOSTS=['*'],
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command
+from django.core.management.base import BaseCommand
+
+# Test 1: Basic call_command functionality
+class SimpleCommand(BaseCommand):
+    def handle(self, *args, **options):
+        self.stdout.write('Simple command executed')
+
+# Test 2: Command with regular required argument
+class RequiredArgCommand(BaseCommand):
+    def add_arguments(self, parser):
+        parser.add_argument('--required-arg', required=True, dest='required_arg')
+    
+    def handle(self, *args, **options):
+        self.stdout.write('Required arg command executed')
+
+def test_basic_functionality():
+    print("Testing basic call_command functionality...")
+    
+    # Test 1: Basic call_command
+    try:
+        call_command(SimpleCommand())
+        print("✓ Basic call_command test passed")
+    except Exception as e:
+        print(f"✗ Basic call_command test failed: {e}")
+    
+    # Test 2: Required argument
+    try:
+        call_command(RequiredArgCommand(), required_arg='test')
+        print("✓ Required argument test passed")
+    except Exception as e:
+        print(f"✗ Required argument test failed: {e}")
+    
+    # Test 3: Required argument via args (should still work)
+    try:
+        call_command(RequiredArgCommand(), '--required-arg=test')
+        print("✓ Required argument via args test passed")
+    except Exception as e:
+        print(f"✗ Required argument via args test failed: {e}")
+
+if __name__ == '__main__':
+    test_basic_functionality()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..fcfe2fb665
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, BaseCommand
+from django.core.management.base import CommandParser, CommandError
+
+# Test case 1: Multiple mutually exclusive groups
+class MultiGroupCommand(BaseCommand):
+    def add_arguments(self, parser):
+        # First required mutually exclusive group
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+        
+        # Second optional mutually exclusive group
+        mode = parser.add_mutually_exclusive_group(required=False)
+        mode.add_argument('--online', action='store_true', dest='online_mode')
+        mode.add_argument('--offline', action='store_true', dest='offline_mode')
+
+    def handle(self, *args, **options):
+        self.stdout.write(f"Command executed with options: {options}")
+
+# Test case 2: Non-required mutually exclusive group
+class OptionalGroupCommand(BaseCommand):
+    def add_arguments(self, parser):
+        # Optional mutually exclusive group
+        mode = parser.add_mutually_exclusive_group(required=False)
+        mode.add_argument('--online', action='store_true', dest='online_mode')
+        mode.add_argument('--offline', action='store_true', dest='offline_mode')
+
+    def handle(self, *args, **options):
+        self.stdout.write(f"Command executed with options: {options}")
+
+def test_edge_cases():
+    print("Testing edge cases...")
+    
+    # Test 1: Multiple groups with required group
+    try:
+        call_command(MultiGroupCommand(), shop_id=1, online=True)
+        print("✓ MultiGroupCommand with shop_id=1 and online=True succeeded")
+    except Exception as e:
+        print(f"✗ MultiGroupCommand with shop_id=1 and online=True failed: {e}")
+    
+    # Test 2: Optional group should not interfere
+    try:
+        call_command(OptionalGroupCommand())
+        print("✓ OptionalGroupCommand without any args succeeded")
+    except Exception as e:
+        print(f"✗ OptionalGroupCommand without any args failed: {e}")
+    
+    # Test 3: Error case - no argument provided for required group
+    try:
+        call_command(MultiGroupCommand())
+        print("✗ MultiGroupCommand without required args should have failed but didn't")
+    except Exception as e:
+        print(f"✓ MultiGroupCommand without required args correctly failed: {e}")
+    
+    # Test 4: Error case - multiple arguments from same group
+    try:
+        call_command(MultiGroupCommand(), shop_id=1, shop='test')
+        print("✗ MultiGroupCommand with conflicting args should have failed but didn't")
+    except Exception as e:
+        print(f"✓ MultiGroupCommand with conflicting args correctly failed: {e}")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
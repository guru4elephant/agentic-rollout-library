diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7f8eb128e1..61e07f962b 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -441,7 +441,8 @@ class ImageField(FileField):
         # after their corresponding image field don't stay cleared by
         # Model.__init__, see bug #11196.
         # Only run post-initialization dimension update on non-abstract models
-        if not cls._meta.abstract:
+        # and when dimension fields are actually set
+        if not cls._meta.abstract and (self.width_field or self.height_field):
             signals.post_init.connect(self.update_dimension_fields, sender=cls)
 
     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e992f40720
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ImageField performance issue with post_init signals.
+"""
+import os
+import time
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+# Create a simple model with ImageField
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    image = models.ImageField(upload_to='images/')
+    
+    class Meta:
+        app_label = 'test'
+
+def test_performance():
+    """Test the performance impact of post_init signals with ImageField"""
+    print("Testing ImageField post_init signal performance...")
+    
+    # Create multiple instances to measure performance
+    num_instances = 1000
+    instances = []
+    
+    # Measure time to create instances
+    start_time = time.time()
+    
+    for i in range(num_instances):
+        instance = TestModel(name=f"Test {i}", image=None)
+        instances.append(instance)
+    
+    end_time = time.time()
+    total_time = end_time - start_time
+    
+    print(f"Created {num_instances} instances in {total_time:.4f} seconds")
+    print(f"Average time per instance: {total_time/num_instances * 1000:.4f} ms")
+    
+    return total_time
+
+if __name__ == "__main__":
+    test_performance()
\ No newline at end of file
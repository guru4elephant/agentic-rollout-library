diff --git a/basic_functionality_test.py b/basic_functionality_test.py
new file mode 100644
index 0000000000..ea1996f8ac
--- /dev/null
+++ b/basic_functionality_test.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import (
+    validate_email, validate_ipv4_address, validate_ipv6_address, 
+    validate_ipv46_address, RegexValidator
+)
+from django.core.exceptions import ValidationError
+
+def test_basic_functionality():
+    """Test that the basic validation functionality still works"""
+    
+    print("Testing basic validation functionality...")
+    
+    # Test valid cases
+    try:
+        validate_email("test@example.com")
+        print("✓ Valid email passes")
+    except ValidationError:
+        print("✗ Valid email fails")
+        return False
+    
+    try:
+        validate_ipv4_address("192.168.1.1")
+        print("✓ Valid IPv4 passes")
+    except ValidationError:
+        print("✗ Valid IPv4 fails")
+        return False
+    
+    try:
+        validate_ipv6_address("::1")
+        print("✓ Valid IPv6 passes")
+    except ValidationError:
+        print("✗ Valid IPv6 fails")
+        return False
+    
+    # Test invalid cases
+    try:
+        validate_email("invalid")
+        print("✗ Invalid email passes")
+        return False
+    except ValidationError:
+        print("✓ Invalid email fails")
+    
+    try:
+        validate_ipv4_address("300.400.500.600")
+        print("✗ Invalid IPv4 passes")
+        return False
+    except ValidationError:
+        print("✓ Invalid IPv4 fails")
+    
+    # Test RegexValidator
+    validator = RegexValidator(r'^[a-z]+$')
+    try:
+        validator("abc")
+        print("✓ Valid regex pattern passes")
+    except ValidationError:
+        print("✗ Valid regex pattern fails")
+        return False
+    
+    try:
+        validator("123")
+        print("✗ Invalid regex pattern passes")
+        return False
+    except ValidationError:
+        print("✓ Invalid regex pattern fails")
+    
+    print("\nAll basic functionality tests passed!")
+    return True
+
+if __name__ == "__main__":
+    test_basic_functionality()
\ No newline at end of file
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..6dc3d660bf
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import (
+    EmailValidator, ValidationError, RegexValidator, URLValidator,
+    validate_ipv4_address, validate_ipv6_address, validate_ipv46_address
+)
+from django.utils.translation import gettext_lazy as _
+
+def test_validator(validator, test_value, expected_error_contains=None):
+    """Test a validator and check if value is included in params"""
+    print(f"\nTesting {validator.__class__.__name__ if hasattr(validator, '__class__') else validator.__name__} with value: {test_value!r}")
+    
+    try:
+        validator(test_value)
+        print("ERROR: Should have raised ValidationError")
+        return False
+    except ValidationError as e:
+        print(f"✓ Error raised: {e}")
+        print(f"  Message: {e.message}")
+        print(f"  Code: {e.code}")
+        print(f"  Params: {e.params}")
+        
+        # Check if value is in params
+        if e.params and 'value' in e.params:
+            print(f"  ✓ Value included in params: {e.params['value']!r}")
+            
+            # Check if value matches the test value
+            if e.params['value'] == test_value:
+                print("  ✓ Value in params matches test value")
+            else:
+                print(f"  ✗ Value in params doesn't match test value: {e.params['value']!r} vs {test_value!r}")
+                return False
+        else:
+            print("  ✗ Value NOT included in params")
+            return False
+            
+        # Check if expected error contains the value
+        if expected_error_contains and expected_error_contains in str(e):
+            print(f"  ✓ Error message contains expected text: {expected_error_contains!r}")
+        elif expected_error_contains:
+            print(f"  ✗ Error message doesn't contain expected text: {expected_error_contains!r}")
+            return False
+            
+        return True
+
+# Test EmailValidator
+email_validator = EmailValidator()
+test_validator(email_validator, "invalid_email")
+
+custom_email_validator = EmailValidator(message=_("'%(value)s' is not a valid email."))
+test_validator(custom_email_validator, "bad@email")
+
+# Test RegexValidator
+regex_validator = RegexValidator(
+    regex=r'^[a-zA-Z]+$',
+    message=_("'%(value)s' is not alphabetic.")
+)
+test_validator(regex_validator, "123", "'123' is not alphabetic")
+
+# Test URLValidator
+url_validator = URLValidator()
+test_validator(url_validator, "invalid-url", "Enter a valid URL")
+
+# Test IPv4 validator
+test_validator(validate_ipv4_address, "300.400.500.600", "Enter a valid IPv4 address")
+
+# Test IPv6 validator  
+test_validator(validate_ipv6_address, "not-ipv6", "Enter a valid IPv6 address")
+
+# Test IPv46 validator
+test_validator(validate_ipv46_address, "not-ip", "Enter a valid IPv4 or IPv6 address")
+
+print("\n" + "="*50)
+print("All tests completed!")
\ No newline at end of file
diff --git a/django/core/validators.py b/django/core/validators.py
index 84b4f31ec7..d42115ee7e 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -48,7 +48,7 @@ class RegexValidator:
         regex_matches = self.regex.search(str(value))
         invalid_input = regex_matches if self.inverse_match else not regex_matches
         if invalid_input:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):
 
     def __call__(self, value):
         if not isinstance(value, str):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         # Then check full URL
         try:
@@ -208,12 +208,12 @@ class EmailValidator:
 
     def __call__(self, value):
         if not value or '@' not in value:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         user_part, domain_part = value.rsplit('@', 1)
 
         if not self.user_regex.match(user_part):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         if (domain_part not in self.domain_allowlist and
                 not self.validate_domain_part(domain_part)):
@@ -225,7 +225,7 @@ class EmailValidator:
             else:
                 if self.validate_domain_part(domain_part):
                     return
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def validate_domain_part(self, domain_part):
         if self.domain_regex.match(domain_part):
@@ -272,12 +272,12 @@ def validate_ipv4_address(value):
     try:
         ipaddress.IPv4Address(value)
     except ValueError:
-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')
+        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})
 
 
 def validate_ipv6_address(value):
     if not is_valid_ipv6_address(value):
-        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')
+        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})
 
 
 def validate_ipv46_address(value):
@@ -287,7 +287,7 @@ def validate_ipv46_address(value):
         try:
             validate_ipv6_address(value)
         except ValidationError:
-            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')
+            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value})
 
 
 ip_address_validator_map = {
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..1820d83028
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,116 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import (
+    EmailValidator, RegexValidator, URLValidator,
+    validate_ipv4_address, validate_ipv6_address, validate_ipv46_address
+)
+from django.utils.translation import gettext_lazy as _
+from django.core.exceptions import ValidationError
+
+def test_github_issue_fixed():
+    """Test that the GitHub issue is resolved - validators include value in ValidationError"""
+    
+    print("Testing GitHub Issue Resolution:")
+    print("=" * 50)
+    
+    # Test the exact example from the GitHub issue description
+    print("\n1. Testing EmailValidator with custom message:")
+    email_validator = EmailValidator(
+        message=_("'%(value)s' is not a valid email.")
+    )
+    
+    try:
+        email_validator("blah")
+        print("ERROR: Should have raised ValidationError")
+    except ValidationError as e:
+        error_message = str(e)
+        print(f"Error message: {error_message}")
+        if "'blah' is not a valid email." in error_message:
+            print("✓ SUCCESS: Value 'blah' is included in the error message!")
+        else:
+            print("✗ FAIL: Value is not included in the error message")
+            return False
+    
+    # Test RegexValidator with value placeholder
+    print("\n2. Testing RegexValidator with custom message:")
+    regex_validator = RegexValidator(
+        regex=r'^[a-z]+$',
+        message=_("'%(value)s' must contain only lowercase letters.")
+    )
+    
+    try:
+        regex_validator("UPPERCASE")
+        print("ERROR: Should have raised ValidationError")
+    except ValidationError as e:
+        error_message = str(e)
+        print(f"Error message: {error_message}")
+        if "'UPPERCASE' must contain only lowercase letters." in error_message:
+            print("✓ SUCCESS: Value 'UPPERCASE' is included in the error message!")
+        else:
+            print("✗ FAIL: Value is not included in the error message")
+            return False
+    
+    # Test URLValidator
+    print("\n3. Testing URLValidator with custom message:")
+    url_validator = URLValidator(
+        message=_("'%(value)s' is not a valid URL.")
+    )
+    
+    try:
+        url_validator("invalid-url")
+        print("ERROR: Should have raised ValidationError")
+    except ValidationError as e:
+        error_message = str(e)
+        print(f"Error message: {error_message}")
+        if "'invalid-url' is not a valid URL." in error_message:
+            print("✓ SUCCESS: Value 'invalid-url' is included in the error message!")
+        else:
+            print("✗ FAIL: Value is not included in the error message")
+            return False
+    
+    # Test IP address validators
+    print("\n4. Testing IP address validators with custom messages:")
+    
+    # IPv4
+    try:
+        validate_ipv4_address("300.400.500.600")
+        print("ERROR: Should have raised ValidationError for IPv4")
+    except ValidationError as e:
+        if e.params and 'value' in e.params and e.params['value'] == "300.400.500.600":
+            print("✓ SUCCESS: IPv4 value included in params!")
+        else:
+            print("✗ FAIL: IPv4 value not included in params")
+            return False
+    
+    # IPv6
+    try:
+        validate_ipv6_address("not-ipv6")
+        print("ERROR: Should have raised ValidationError for IPv6")
+    except ValidationError as e:
+        if e.params and 'value' in e.params and e.params['value'] == "not-ipv6":
+            print("✓ SUCCESS: IPv6 value included in params!")
+        else:
+            print("✗ FAIL: IPv6 value not included in params")
+            return False
+    
+    print("\n" + "=" * 50)
+    print("🎉 ALL TESTS PASSED! The GitHub issue has been successfully resolved!")
+    print("Validators now include the provided value in ValidationError,")
+    print("allowing custom error messages to use the %(value)s placeholder.")
+    return True
+
+if __name__ == "__main__":
+    test_github_issue_fixed()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..300f92abac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import EmailValidator, ValidationError
+from django.utils.translation import gettext_lazy as _
+
+# Test the current behavior of EmailValidator
+validator = EmailValidator()
+
+try:
+    validator("invalid_email")
+    print("ERROR: Should have raised ValidationError")
+except ValidationError as e:
+    print(f"EmailValidator error: {e}")
+    print(f"Error message: {e.message}")
+    print(f"Error code: {e.code}")
+    print(f"Error params: {e.params}")
+    print(f"Can we access value through params? {'value' in e.params if e.params else False}")
+
+# Test with a custom message that includes %(value)s
+custom_validator = EmailValidator(
+    message=_("'%(value)s' is not a valid email address.")
+)
+
+try:
+    custom_validator("invalid_email")
+    print("ERROR: Should have raised ValidationError")
+except ValidationError as e:
+    print(f"Custom EmailValidator error: {e}")
+    print(f"Error message: {e.message}")
+    print(f"Error code: {e.code}")
+    print(f"Error params: {e.params}")
+    print(f"Can we access value through params? {'value' in e.params if e.params else False}")
+
+# Test RegexValidator
+from django.core.validators import RegexValidator
+
+regex_validator = RegexValidator(
+    regex=r'^[a-zA-Z]+$',
+    message=_("'%(value)s' is not alphabetic.")
+)
+
+try:
+    regex_validator("123")
+    print("ERROR: Should have raised ValidationError")
+except ValidationError as e:
+    print(f"RegexValidator error: {e}")
+    print(f"Error message: {e.message}")
+    print(f"Error code: {e.code}")
+    print(f"Error params: {e.params}")
+    print(f"Can we access value through params? {'value' in e.params if e.params else False}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3d83781c89
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import (
+    EmailValidator, ValidationError, RegexValidator, URLValidator,
+    validate_ipv4_address, validate_ipv6_address, validate_ipv46_address
+)
+from django.utils.translation import gettext_lazy as _
+
+def test_edge_cases():
+    """Test edge cases to make sure the changes handle them properly"""
+    
+    print("Testing edge cases...")
+    
+    # Test with empty string
+    email_validator = EmailValidator()
+    try:
+        email_validator("")
+        print("ERROR: Should have raised ValidationError for empty string")
+    except ValidationError as e:
+        if e.params and 'value' in e.params:
+            print(f"✓ Empty string value included in params: {e.params['value']!r}")
+        else:
+            print("✗ Empty string value NOT included in params")
+    
+    # Test with None
+    try:
+        email_validator(None)
+        print("ERROR: Should have raised ValidationError for None")
+    except ValidationError as e:
+        if e.params and 'value' in e.params:
+            print(f"✓ None value included in params: {e.params['value']!r}")
+        else:
+            print("✗ None value NOT included in params")
+    
+    # Test with numeric values
+    regex_validator = RegexValidator(
+        regex=r'^[a-z]+$',
+        message=_("'%(value)s' must be lowercase letters only.")
+    )
+    try:
+        regex_validator(123)  # numeric value
+        print("ERROR: Should have raised ValidationError for numeric value")
+    except ValidationError as e:
+        if e.params and 'value' in e.params:
+            print(f"✓ Numeric value included in params: {e.params['value']!r} (type: {type(e.params['value']).__name__})")
+        else:
+            print("✗ Numeric value NOT included in params")
+    
+    # Test URLValidator with non-string
+    url_validator = URLValidator()
+    try:
+        url_validator(123)  # numeric value
+        print("ERROR: Should have raised ValidationError for numeric value")
+    except ValidationError as e:
+        if e.params and 'value' in e.params:
+            print(f"✓ URLValidator numeric value included in params: {e.params['value']!r} (type: {type(e.params['value']).__name__})")
+        else:
+            print("✗ URLValidator numeric value NOT included in params")
+    
+    print("\nEdge case testing completed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b519eaa7b8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q
+
+# Create the test model as described in the issue
+class TestConstraint(models.Model):
+    field_1 = models.IntegerField(blank=True, null=True)
+    flag = models.BooleanField(blank=False, null=False)
+    
+    class Meta:
+        app_label = 'test_app'
+        constraints = [
+            models.CheckConstraint(
+                check=Q(flag__exact=True, field_1__isnull=False) | Q(flag__exact=False),
+                name='field_1_has_value_if_flag_set'
+            ),
+        ]
+
+# Create a migration-like operation to see the generated SQL
+from django.db.migrations.state import ProjectState
+from django.db.migrations.operations.models import CreateModel, AddConstraint
+from django.db.migrations.migration import Migration
+from django.db import connections
+
+# Create a migration state
+state = ProjectState()
+state.add_model(TestConstraint)
+
+# Create the migration operation
+operations = [
+    CreateModel(
+        name='TestConstraint',
+        fields=[
+            ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ('field_1', models.IntegerField(blank=True, null=True)),
+            ('flag', models.BooleanField()),
+        ],
+    ),
+    AddConstraint(
+        model_name='testconstraint',
+        constraint=models.CheckConstraint(
+            check=Q(models.Q(('field_1__isnull', False), ('flag__exact', True)), ('flag__exact', False), _connector='OR'),
+            name='field_1_has_value_if_flag_set'
+        ),
+    ),
+]
+
+# Get the SQL for these operations
+connection = connections['default']
+with connection.schema_editor() as schema_editor:
+    for operation in operations:
+        print(f"Operation: {operation}")
+        sql = operation.database_forwards('test_app', schema_editor, state, state)
+        if sql:
+            for statement in sql:
+                print(f"SQL: {statement}")
+        print("---")
+
+# Also test the constraint SQL generation directly
+constraint = TestConstraint._meta.constraints[0]
+sql = constraint.constraint_sql(TestConstraint, schema_editor)
+print(f"Constraint SQL: {sql}")
\ No newline at end of file
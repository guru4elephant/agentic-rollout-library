diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e3ac424918
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+from sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation
+
+G = DihedralGroup(18)
+
+try:
+    S2 = G.sylow_subgroup(p=2)
+    print("Success: sylow_subgroup() worked")
+except IndexError as e:
+    print(f"IndexError: {e}")
+
+G2 = DihedralGroup(2*25)
+
+try:
+    S2_2 = G2.sylow_subgroup(p=2)
+    print("Success: sylow_subgroup() worked for DihedralGroup(50)")
+except IndexError as e:
+    print(f"IndexError for DihedralGroup(50): {e}")
\ No newline at end of file
diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..d69813b24f 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2194,18 +2194,22 @@ def _number_blocks(blocks):
                 # check if the system is minimal with
                 # respect to the already discovere ones
                 minimal = True
-                to_remove = []
+                to_remove_indices = []
+                to_remove_blocks = []
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
                         # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
-                        to_remove.append(rep_blocks[i])
+                        to_remove_indices.append(i)
+                        to_remove_blocks.append(rep_blocks[i])
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
                         minimal = False
                         break
+                # remove non-minimal systems in reverse order to preserve indices
+                for i in sorted(to_remove_indices, reverse=True):
+                    del num_blocks[i], blocks[i]
                 # remove non-minimal representative blocks
-                rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                rep_blocks = [r for r in rep_blocks if r not in to_remove_blocks]
 
                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..46bdfd766c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+from sympy.combinatorics import DihedralGroup, SymmetricGroup, AlternatingGroup
+
+# Test various group sizes that might trigger the minimal_blocks logic
+test_cases = [
+    DihedralGroup(6),
+    DihedralGroup(10),
+    DihedralGroup(14),
+    DihedralGroup(18),
+    DihedralGroup(22),
+    DihedralGroup(26),
+    DihedralGroup(30),
+    DihedralGroup(50),
+    SymmetricGroup(4),
+    SymmetricGroup(5),
+    AlternatingGroup(4),
+    AlternatingGroup(5),
+]
+
+for i, group in enumerate(test_cases):
+    try:
+        # Test sylow subgroups for different primes
+        if group.order() % 2 == 0:
+            sylow_2 = group.sylow_subgroup(p=2)
+            print(f"✓ Group {i} ({group.__class__.__name__}({group.degree})): 2-Sylow subgroup found (order {sylow_2.order()})")
+        
+        if group.order() % 3 == 0:
+            sylow_3 = group.sylow_subgroup(p=3)
+            print(f"✓ Group {i} ({group.__class__.__name__}({group.degree})): 3-Sylow subgroup found (order {sylow_3.order()})")
+            
+        if group.order() % 5 == 0:
+            sylow_5 = group.sylow_subgroup(p=5)
+            print(f"✓ Group {i} ({group.__class__.__name__}({group.degree})): 5-Sylow subgroup found (order {sylow_5.order()})")
+            
+    except Exception as e:
+        print(f"✗ Group {i} ({group.__class__.__name__}({group.degree})): Error - {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..a01e64e5cc
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,14 @@
+# Test the exact cases from the GitHub issue
+from sympy.combinatorics import DihedralGroup
+
+print("Testing DihedralGroup(18)...")
+G = DihedralGroup(18)
+S2 = G.sylow_subgroup(p=2)
+print(f"✓ Success: 2-Sylow subgroup of DihedralGroup(18) has order {S2.order()}")
+
+print("\nTesting DihedralGroup(50)...")
+G2 = DihedralGroup(2*25)
+S2_2 = G2.sylow_subgroup(p=2)
+print(f"✓ Success: 2-Sylow subgroup of DihedralGroup(50) has order {S2_2.order()}")
+
+print("\nBoth test cases from the GitHub issue are now working!")
\ No newline at end of file
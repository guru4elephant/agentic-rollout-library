diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..5f04942d6f 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,16 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            resolved_values = [
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ]
+            # For named tuples and other tuple subclasses, we need to expand
+            # the resolved values as positional arguments
+            if hasattr(type(value), '_fields'):  # This identifies named tuples
+                return type(value)(*resolved_values)
+            else:
+                return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..78bcbdcae7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the named tuple issue with __range filters in Django 3.0
+"""
+
+import os
+import sys
+from collections import namedtuple
+
+# Add the current directory to Python path
+sys.path.insert(0, os.getcwd())
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models.sql.query import Query
+
+# Configure Django
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Create a named tuple
+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])
+
+def test_named_tuple_issue():
+    """Test the named tuple issue with resolve_lookup_value"""
+    print("Testing named tuple issue...")
+    
+    # Create a query object
+    query = Query(models.Model)
+    
+    # Create a named tuple
+    range_tuple = RangeTuple(near=1, far=10)
+    print(f"Original named tuple: {range_tuple}")
+    print(f"Type: {type(range_tuple)}")
+    
+    # Try to resolve the lookup value (this should fail in Django 3.0)
+    try:
+        resolved_value = query.resolve_lookup_value(range_tuple, can_reuse=None, allow_joins=True)
+        print(f"Resolved value: {resolved_value}")
+        print("SUCCESS: No error occurred!")
+    except Exception as e:
+        print(f"ERROR: {type(e).__name__}: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_named_tuple_issue()
+    if not success:
+        print("Issue reproduced successfully!")
+    else:
+        print("Issue was not reproduced (might already be fixed?)")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..fd85345815
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,125 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for the named tuple fix
+"""
+
+import os
+import sys
+from collections import namedtuple
+
+# Add the current directory to Python path
+sys.path.insert(0, os.getcwd())
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models.sql.query import Query
+
+# Configure Django
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_named_tuples():
+    """Test various named tuple scenarios"""
+    print("Testing comprehensive named tuple scenarios...")
+    
+    # Create a query object
+    query = Query(models.Model)
+    
+    # Test 1: Basic named tuple
+    RangeTuple = namedtuple('RangeTuple', ['near', 'far'])
+    range_tuple = RangeTuple(near=1, far=10)
+    print(f"Test 1 - Basic named tuple: {range_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(range_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 2: Named tuple with expressions
+    from django.db.models import F
+    RangeTupleExpr = namedtuple('RangeTupleExpr', ['start', 'end'])
+    expr_tuple = RangeTupleExpr(start=F('price') * 2, end=F('price') * 3)
+    print(f"Test 2 - Named tuple with expressions: {expr_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(expr_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 3: Regular tuple (should still work)
+    regular_tuple = (1, 10)
+    print(f"Test 3 - Regular tuple: {regular_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(regular_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 4: List (should still work)
+    regular_list = [1, 10]
+    print(f"Test 4 - Regular list: {regular_list}")
+    
+    try:
+        resolved = query.resolve_lookup_value(regular_list, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 5: Empty named tuple
+    EmptyTuple = namedtuple('EmptyTuple', [])
+    empty_tuple = EmptyTuple()
+    print(f"Test 5 - Empty named tuple: {empty_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(empty_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 6: Single element named tuple
+    SingleTuple = namedtuple('SingleTuple', ['value'])
+    single_tuple = SingleTuple(value=42)
+    print(f"Test 6 - Single element named tuple: {single_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(single_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_named_tuples()
+    if success:
+        print("\nAll tests passed! The fix handles all edge cases correctly.")
+    else:
+        print("\nSome tests failed!")
\ No newline at end of file
diff --git a/test_simple_comprehensive.py b/test_simple_comprehensive.py
new file mode 100644
index 0000000000..d071e2e158
--- /dev/null
+++ b/test_simple_comprehensive.py
@@ -0,0 +1,124 @@
+#!/usr/bin/env python3
+"""
+Simple comprehensive test for the named tuple fix
+"""
+
+import os
+import sys
+from collections import namedtuple
+
+# Add the current directory to Python path
+sys.path.insert(0, os.getcwd())
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models.sql.query import Query
+
+# Configure Django
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_named_tuples():
+    """Test various named tuple scenarios"""
+    print("Testing comprehensive named tuple scenarios...")
+    
+    # Create a query object
+    query = Query(models.Model)
+    
+    # Test 1: Basic named tuple
+    RangeTuple = namedtuple('RangeTuple', ['near', 'far'])
+    range_tuple = RangeTuple(near=1, far=10)
+    print(f"Test 1 - Basic named tuple: {range_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(range_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 2: Regular tuple (should still work)
+    regular_tuple = (1, 10)
+    print(f"Test 2 - Regular tuple: {regular_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(regular_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 3: List (should still work)
+    regular_list = [1, 10]
+    print(f"Test 3 - Regular list: {regular_list}")
+    
+    try:
+        resolved = query.resolve_lookup_value(regular_list, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 4: Empty named tuple
+    EmptyTuple = namedtuple('EmptyTuple', [])
+    empty_tuple = EmptyTuple()
+    print(f"Test 4 - Empty named tuple: {empty_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(empty_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 5: Single element named tuple
+    SingleTuple = namedtuple('SingleTuple', ['value'])
+    single_tuple = SingleTuple(value=42)
+    print(f"Test 5 - Single element named tuple: {single_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(single_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    # Test 6: 3-element named tuple
+    TripleTuple = namedtuple('TripleTuple', ['a', 'b', 'c'])
+    triple_tuple = TripleTuple(a=1, b=2, c=3)
+    print(f"Test 6 - 3-element named tuple: {triple_tuple}")
+    
+    try:
+        resolved = query.resolve_lookup_value(triple_tuple, can_reuse=None, allow_joins=True)
+        print(f"  Result: {resolved} (SUCCESS)")
+    except Exception as e:
+        print(f"  ERROR: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_named_tuples()
+    if success:
+        print("\nAll tests passed! The fix handles all edge cases correctly.")
+    else:
+        print("\nSome tests failed!")
\ No newline at end of file
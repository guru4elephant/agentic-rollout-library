diff --git a/debug_inheritance.py b/debug_inheritance.py
new file mode 100644
index 000000000..823d65492
--- /dev/null
+++ b/debug_inheritance.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand the inheritance diagram URL generation.
+"""
+
+import sys
+import os
+sys.path.insert(0, '/testbed')
+
+from sphinx.ext.inheritance_diagram import html_visit_inheritance_diagram
+from sphinx.application import Sphinx
+from sphinx.environment import BuildEnvironment
+from sphinx.writers.html import HTML5Translator
+
+# Let's examine the issue more carefully
+# The problem is in the URL generation logic for SVG format
+
+def analyze_issue():
+    """Analyze the URL generation issue."""
+    
+    # The issue is in lines 415-423 of inheritance_diagram.py
+    # When SVG format is used, the code adds "../" prefix to URLs
+    # But this doesn't work correctly for nested directories
+    
+    print("Issue analysis:")
+    print("1. SVG files are stored in _images/ directory")
+    print("2. When embedded in HTML files in subdirectories, the relative path calculation is wrong")
+    print("3. The current logic adds '../' prefix, but this assumes HTML is in root directory")
+    print("4. For HTML files in subdirectories, we need a more sophisticated approach")
+    
+    # Let's look at the current problematic code:
+    problematic_code = '''
+if graphviz_output_format == 'SVG':
+    urls[child['reftitle']] = "../" + child.get('refuri')
+else:
+    urls[child['reftitle']] = child.get('refuri')
+'''
+    print("\nProblematic code:")
+    print(problematic_code)
+    
+    # The solution should calculate the correct relative path
+    # from the _images directory to the target document
+    
+    solution_approach = '''
+Solution approach:
+1. Calculate the relative path from the _images directory to the target document
+2. For SVG format, we need paths relative to the SVG file location
+3. Use os.path.relpath() to calculate correct relative paths
+'''
+    print(solution_approach)
+
+if __name__ == "__main__":
+    analyze_issue()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..664be71c2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,127 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the inheritance diagram SVG link issue.
+This script creates a minimal test case to reproduce the issue.
+"""
+
+import os
+import tempfile
+import shutil
+from pathlib import Path
+
+def create_test_case():
+    """Create a test case that reproduces the SVG link issue."""
+    
+    # Create temporary directory
+    test_dir = Path("/tmp/sphinx_svg_test")
+    if test_dir.exists():
+        shutil.rmtree(test_dir)
+    test_dir.mkdir()
+    
+    # Create source directory structure
+    source_dir = test_dir / "docs_source"
+    source_dir.mkdir()
+    
+    # Create my_package subdirectory
+    package_dir = source_dir / "my_package"
+    package_dir.mkdir()
+    
+    # Create conf.py
+    conf_content = '''
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.graphviz', 
+    'sphinx.ext.inheritance_diagram'
+]
+
+graphviz_output_format = 'svg'
+'''
+    (source_dir / "conf.py").write_text(conf_content)
+    
+    # Create index.rst in root
+    index_content = '''
+Test Documentation
+==================
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    (source_dir / "index.rst").write_text(index_content)
+    
+    # Create index.rst in my_package
+    package_index_content = '''
+My Package
+==========
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    (package_dir / "index.rst").write_text(package_index_content)
+    
+    # Create my_package module
+    package_init = source_dir / "my_package.py"
+    package_init.write_text('''
+class MyClass1:
+    """First test class."""
+    pass
+
+class MyClass2(MyClass1):
+    """Second test class that inherits from MyClass1."""
+    pass
+''')
+    
+    print(f"Test case created at: {test_dir}")
+    return test_dir
+
+def build_and_test(test_dir):
+    """Build the documentation and check for the issue."""
+    source_dir = test_dir / "docs_source"
+    build_dir = test_dir / "docs_build"
+    
+    # Build the documentation
+    os.chdir(str(source_dir))
+    os.system("sphinx-build -b html . ../docs_build")
+    
+    # Check the generated files
+    print("\nChecking generated files...")
+    
+    # Check root index.html
+    root_index = build_dir / "index.html"
+    if root_index.exists():
+        print("Root index.html exists")
+        content = root_index.read_text()
+        if 'inheritance' in content:
+            print("  - Contains inheritance diagram")
+    
+    # Check package index.html  
+    package_index = build_dir / "my_package" / "index.html"
+    if package_index.exists():
+        print("Package index.html exists")
+        content = package_index.read_text()
+        if 'inheritance' in content:
+            print("  - Contains inheritance diagram")
+    
+    # Check SVG files
+    images_dir = build_dir / "_images"
+    if images_dir.exists():
+        svg_files = list(images_dir.glob("*.svg"))
+        print(f"Found {len(svg_files)} SVG files")
+        for svg_file in svg_files:
+            print(f"  - {svg_file.name}")
+            content = svg_file.read_text()
+            # Check for links in SVG
+            if 'xlink:href' in content:
+                print("    - Contains links")
+                # Extract links to see if they're correct
+                import re
+                links = re.findall(r'xlink:href="([^"]*)"', content)
+                for link in links:
+                    print(f"      - Link: {link}")
+
+if __name__ == "__main__":
+    test_dir = create_test_case()
+    build_and_test(test_dir)
\ No newline at end of file
diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py
index 6e3985512..dbcfa82b8 100644
--- a/sphinx/ext/inheritance_diagram.py
+++ b/sphinx/ext/inheritance_diagram.py
@@ -413,12 +413,20 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag
     for child in pending_xrefs:
         if child.get('refuri') is not None:
             if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = "../" + child.get('refuri')
+                # Calculate correct relative path from _images directory to target
+                images_dir = path.join(self.builder.outdir, self.builder.imgpath)
+                target_path = path.join(self.builder.outdir, child.get('refuri'))
+                relative_path = path.relpath(target_path, images_dir)
+                urls[child['reftitle']] = relative_path.replace(path.sep, '/')
             else:
                 urls[child['reftitle']] = child.get('refuri')
         elif child.get('refid') is not None:
             if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')
+                # Calculate correct relative path from _images directory to target
+                images_dir = path.join(self.builder.outdir, self.builder.imgpath)
+                target_path = path.join(self.builder.outdir, current_filename)
+                relative_path = path.relpath(target_path, images_dir)
+                urls[child['reftitle']] = relative_path.replace(path.sep, '/') + '#' + child.get('refid')
             else:
                 urls[child['reftitle']] = '#' + child.get('refid')
 
diff --git a/test_urls.py b/test_urls.py
new file mode 100644
index 000000000..45c164cb8
--- /dev/null
+++ b/test_urls.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+"""
+Test script to understand what URLs are being generated by the inheritance diagram.
+"""
+
+import sys
+import os
+sys.path.insert(0, '/testbed')
+
+from sphinx.ext.inheritance_diagram import html_visit_inheritance_diagram
+from sphinx.application import Sphinx
+from sphinx.environment import BuildEnvironment
+from sphinx.writers.html import HTML5Translator
+
+def test_url_generation():
+    """Test URL generation logic."""
+    
+    # The current problematic code in inheritance_diagram.py:
+    print("Current URL generation logic for SVG:")
+    print("""
+if graphviz_output_format == 'SVG':
+    urls[child['reftitle']] = "../" + child.get('refuri')
+else:
+    urls[child['reftitle']] = child.get('refuri')
+""")
+    
+    print("\nThe issue is that this assumes:")
+    print("1. All HTML files are in the root directory")
+    print("2. The '../' prefix works for all cases")
+    print("3. But for HTML files in subdirectories, this breaks")
+    
+    print("\nExample:")
+    print("HTML file: /docs_build/my_package/index.html")
+    print("SVG file:  /docs_build/_images/inheritance.svg")
+    print("Target:    /docs_build/my_package/my_class_1.html")
+    print()
+    print("Current logic gives: '../my_package/my_class_1.html'")
+    print("But from _images/, this resolves to: '/docs_build/my_class_1.html' (404)")
+    print()
+    print("Correct approach should calculate relative path from _images/ to target")
+    print("For the example: '../../my_package/my_class_1.html'")
+    
+    # The solution is to calculate the correct relative path
+    # from the _images directory to the target document
+    
+    solution = """
+def get_svg_url(refuri, builder):
+    \"\"\"Calculate correct URL for SVG format.\"\"\"
+    # The SVG file is stored in builder.imgpath (usually '_images')
+    # We need a path relative to the SVG file location
+    
+    # Calculate the relative path from the images directory to the target
+    images_dir = os.path.join(builder.outdir, builder.imgpath)
+    target_path = os.path.join(builder.outdir, refuri)
+    relative_path = os.path.relpath(target_path, images_dir)
+    
+    # Convert to POSIX path for URLs
+    return relative_path.replace(os.sep, '/')
+"""
+    
+    print("\nProposed solution:")
+    print(solution)
+
+if __name__ == "__main__":
+    test_url_generation()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a3dc56211..c76147de3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
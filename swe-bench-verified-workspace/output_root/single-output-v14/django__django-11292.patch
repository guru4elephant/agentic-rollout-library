diff --git a/debug_execute_method.py b/debug_execute_method.py
new file mode 100644
index 0000000000..da0ee86e88
--- /dev/null
+++ b/debug_execute_method.py
@@ -0,0 +1,88 @@
+#!/usr/bin/env python3
+"""
+Debug script to see what options are received by the execute method.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Monkey patch to add a system check that will always fail
+from django.core.checks.registry import registry
+
+def always_fail_check(app_configs, **kwargs):
+    from django.core.checks import Error
+    return [Error('Test system check error', id='test.E001')]
+
+# Register the check
+registry.register(always_fail_check)
+
+from django.core.management.commands.check import Command as CheckCommand
+
+class DebugCheckCommand(CheckCommand):
+    def execute(self, *args, **options):
+        print(f"execute method received options: {options}")
+        print(f"skip_checks value: {options.get('skip_checks')}")
+        print(f"requires_system_checks: {self.requires_system_checks}")
+        return super().execute(*args, **options)
+
+def debug_execute_method():
+    """Debug the execute method."""
+    print("Debugging execute method...")
+    
+    # Create a debug check command instance
+    cmd = DebugCheckCommand()
+    
+    # Test 1: Test run_from_argv with --skip-checks
+    print("\n1. Testing run_from_argv with --skip-checks:")
+    try:
+        # Simulate command line: manage.py check --skip-checks
+        argv = ['manage.py', 'check', '--skip-checks']
+        cmd.run_from_argv(argv)
+        print("✓ run_from_argv with --skip-checks worked")
+    except SystemExit as e:
+        if e.code == 0:
+            print("✓ run_from_argv with --skip-checks worked (exit code 0)")
+        else:
+            print(f"✗ run_from_argv with --skip-checks failed with exit code {e.code}")
+    except Exception as e:
+        print(f"✗ run_from_argv with --skip-checks failed: {e}")
+    
+    # Test 2: Test run_from_argv without --skip-checks
+    print("\n2. Testing run_from_argv without --skip-checks:")
+    try:
+        # Simulate command line: manage.py check
+        argv = ['manage.py', 'check']
+        cmd.run_from_argv(argv)
+        print("✗ Expected system check error but none was raised")
+    except SystemExit as e:
+        if e.code != 0:
+            print("✓ System check error properly raised (non-zero exit code)")
+        else:
+            print("✗ Expected system check error but got exit code 0")
+    except Exception as e:
+        print(f"✓ System check error properly raised: {type(e).__name__}")
+
+if __name__ == '__main__':
+    debug_execute_method()
\ No newline at end of file
diff --git a/debug_run_from_argv.py b/debug_run_from_argv.py
new file mode 100644
index 0000000000..15a7804579
--- /dev/null
+++ b/debug_run_from_argv.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand what happens in run_from_argv.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Monkey patch to add a system check that will always fail
+from django.core.checks.registry import registry
+
+def always_fail_check(app_configs, **kwargs):
+    from django.core.checks import Error
+    return [Error('Test system check error', id='test.E001')]
+
+# Register the check
+registry.register(always_fail_check)
+
+from django.core.management.commands.check import Command as CheckCommand
+
+def debug_run_from_argv():
+    """Debug the run_from_argv method."""
+    print("Debugging run_from_argv method...")
+    
+    # Create a check command instance
+    cmd = CheckCommand()
+    
+    # Test 1: Check what options are parsed by the parser
+    print("\n1. Testing parser directly:")
+    parser = cmd.create_parser('manage.py', 'check')
+    args = parser.parse_args(['--skip-checks'])
+    print("Parsed args:", vars(args))
+    
+    # Test 2: Test run_from_argv with --skip-checks
+    print("\n2. Testing run_from_argv with --skip-checks:")
+    try:
+        # Simulate command line: manage.py check --skip-checks
+        argv = ['manage.py', 'check', '--skip-checks']
+        cmd.run_from_argv(argv)
+        print("✓ run_from_argv with --skip-checks worked")
+    except SystemExit as e:
+        if e.code == 0:
+            print("✓ run_from_argv with --skip-checks worked (exit code 0)")
+        else:
+            print(f"✗ run_from_argv with --skip-checks failed with exit code {e.code}")
+    except Exception as e:
+        print(f"✗ run_from_argv with --skip-checks failed: {e}")
+    
+    # Test 3: Test run_from_argv without --skip-checks
+    print("\n3. Testing run_from_argv without --skip-checks:")
+    try:
+        # Simulate command line: manage.py check
+        argv = ['manage.py', 'check']
+        cmd.run_from_argv(argv)
+        print("✗ Expected system check error but none was raised")
+    except SystemExit as e:
+        if e.code != 0:
+            print("✓ System check error properly raised (non-zero exit code)")
+        else:
+            print("✗ Expected system check error but got exit code 0")
+    except Exception as e:
+        print(f"✓ System check error properly raised: {type(e).__name__}")
+
+if __name__ == '__main__':
+    debug_run_from_argv()
\ No newline at end of file
diff --git a/debug_skip_checks.py b/debug_skip_checks.py
new file mode 100644
index 0000000000..662c7f7c45
--- /dev/null
+++ b/debug_skip_checks.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand why --skip-checks is not working.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, execute_from_command_line
+from django.core.management.base import BaseCommand
+
+# Create a custom command to debug the options
+class DebugCommand(BaseCommand):
+    def handle(self, *args, **options):
+        print("Options received:", options)
+        print("skip_checks value:", options.get('skip_checks'))
+        return "Debug command executed"
+
+def debug_skip_checks():
+    """Debug the --skip-checks option."""
+    print("Debugging --skip-checks option...")
+    
+    # Test 1: Check what options are received by a command
+    print("\n1. Testing what options are received:")
+    try:
+        call_command(DebugCommand(), skip_checks=True)
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Test 2: Test with --skip-checks via command line
+    print("\n2. Testing with --skip-checks via command line:")
+    try:
+        sys.argv = ['manage.py', 'debug_command', '--skip-checks']
+        execute_from_command_line(sys.argv)
+    except SystemExit as e:
+        print(f"Exit code: {e.code}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Test 3: Check the argument parser directly
+    print("\n3. Testing argument parser directly:")
+    from django.core.management.commands.check import Command as CheckCommand
+    cmd = CheckCommand()
+    parser = cmd.create_parser('manage.py', 'check')
+    args = parser.parse_args(['--skip-checks'])
+    print("Parsed args:", vars(args))
+
+if __name__ == '__main__':
+    debug_skip_checks()
\ No newline at end of file
diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index b8f47fa4a4..64e2acaeee 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -142,7 +142,7 @@ def call_command(command_name, *args, **options):
         )
     # Move positional args out of options to mimic legacy optparse
     args = defaults.pop('args', ())
-    if 'skip_checks' not in options:
+    if 'skip_checks' not in defaults:
         defaults['skip_checks'] = True
 
     return command.execute(*args, **defaults)
diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..118dc38a5c 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -286,6 +286,10 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )
         self.add_arguments(parser)
         return parser
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a4ea2fce8d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""
+Script to test the --skip-checks option for management commands.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, execute_from_command_line
+
+def test_skip_checks_option():
+    """Test that --skip-checks option works with management commands."""
+    print("Testing --skip-checks option...")
+    
+    # Test 1: Call command with --skip-checks via execute_from_command_line
+    print("\n1. Testing execute_from_command_line with --skip-checks:")
+    try:
+        # This should work without raising system check errors
+        sys.argv = ['manage.py', 'check', '--skip-checks']
+        execute_from_command_line(sys.argv)
+        print("✓ execute_from_command_line with --skip-checks worked")
+    except SystemExit as e:
+        if e.code == 0:
+            print("✓ execute_from_command_line with --skip-checks worked (exit code 0)")
+        else:
+            print(f"✗ execute_from_command_line with --skip-checks failed with exit code {e.code}")
+    except Exception as e:
+        print(f"✗ execute_from_command_line with --skip-checks failed: {e}")
+    
+    # Test 2: Call command without --skip-checks (should show system checks)
+    print("\n2. Testing execute_from_command_line without --skip-checks:")
+    try:
+        sys.argv = ['manage.py', 'check']
+        execute_from_command_line(sys.argv)
+        print("✓ execute_from_command_line without --skip-checks worked")
+    except SystemExit as e:
+        if e.code == 0:
+            print("✓ execute_from_command_line without --skip-checks worked (exit code 0)")
+        else:
+            print(f"✗ execute_from_command_line without --skip-checks failed with exit code {e.code}")
+    except Exception as e:
+        print(f"✗ execute_from_command_line without --skip-checks failed: {e}")
+    
+    # Test 3: Call command with call_command and skip_checks=True
+    print("\n3. Testing call_command with skip_checks=True:")
+    try:
+        call_command('check', skip_checks=True)
+        print("✓ call_command with skip_checks=True worked")
+    except Exception as e:
+        print(f"✗ call_command with skip_checks=True failed: {e}")
+    
+    # Test 4: Call command with call_command and skip_checks=False
+    print("\n4. Testing call_command with skip_checks=False:")
+    try:
+        call_command('check', skip_checks=False)
+        print("✓ call_command with skip_checks=False worked")
+    except Exception as e:
+        print(f"✗ call_command with skip_checks=False failed: {e}")
+
+if __name__ == '__main__':
+    test_skip_checks_option()
+    print("\nTest completed!")
\ No newline at end of file
diff --git a/test_skip_checks_comprehensive.py b/test_skip_checks_comprehensive.py
new file mode 100644
index 0000000000..8a6cfc226d
--- /dev/null
+++ b/test_skip_checks_comprehensive.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify --skip-checks option works correctly.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.checks import Error
+
+# Configure Django settings with a deliberate error to trigger system checks
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+        # Add a setting that will cause a system check error
+        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField',  # This should be fine
+    )
+
+django.setup()
+
+# Monkey patch to add a system check that will always fail
+from django.core.checks.registry import registry
+
+def always_fail_check(app_configs, **kwargs):
+    return [Error('Test system check error', id='test.E001')]
+
+# Register the check
+registry.register(always_fail_check)
+
+from django.core.management import call_command, execute_from_command_line
+
+def test_skip_checks_comprehensive():
+    """Test that --skip-checks option properly skips system checks."""
+    print("Testing --skip-checks option comprehensively...")
+    
+    # Test 1: Call command with --skip-checks should not raise system check errors
+    print("\n1. Testing with --skip-checks (should not raise errors):")
+    try:
+        sys.argv = ['manage.py', 'check', '--skip-checks']
+        execute_from_command_line(sys.argv)
+        print("✓ --skip-checks worked (no system check errors raised)")
+    except SystemExit as e:
+        if e.code == 0:
+            print("✓ --skip-checks worked (exit code 0)")
+        else:
+            print(f"✗ --skip-checks failed with exit code {e.code}")
+    except Exception as e:
+        print(f"✗ --skip-checks failed: {e}")
+    
+    # Test 2: Call command without --skip-checks should raise system check errors
+    print("\n2. Testing without --skip-checks (should raise errors):")
+    try:
+        sys.argv = ['manage.py', 'check']
+        execute_from_command_line(sys.argv)
+        print("✗ Expected system check error but none was raised")
+    except SystemExit as e:
+        if e.code != 0:
+            print("✓ System check error properly raised (non-zero exit code)")
+        else:
+            print("✗ Expected system check error but got exit code 0")
+    except Exception as e:
+        print(f"✓ System check error properly raised: {type(e).__name__}")
+    
+    # Test 3: Test call_command with skip_checks=True
+    print("\n3. Testing call_command with skip_checks=True:")
+    try:
+        call_command('check', skip_checks=True)
+        print("✓ call_command with skip_checks=True worked")
+    except Exception as e:
+        print(f"✗ call_command with skip_checks=True failed: {e}")
+    
+    # Test 4: Test call_command with skip_checks=False
+    print("\n4. Testing call_command with skip_checks=False:")
+    try:
+        call_command('check', skip_checks=False)
+        print("✗ Expected system check error but none was raised")
+    except Exception as e:
+        print(f"✓ System check error properly raised: {type(e).__name__}")
+
+if __name__ == '__main__':
+    test_skip_checks_comprehensive()
+    print("\nComprehensive test completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..032a7550e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the sphinx-quickstart issue with existing conf.py
+"""
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_quickstart_exit_with_existing_conf():
+    """Test that sphinx-quickstart exits properly when conf.py exists"""
+    
+    # Create a temporary directory
+    with tempfile.TemporaryDirectory() as tmpdir:
+        print(f"Testing in temporary directory: {tmpdir}")
+        
+        # Create an existing conf.py file
+        conf_path = os.path.join(tmpdir, "conf.py")
+        with open(conf_path, "w") as f:
+            f.write("# Existing conf.py file\n")
+        
+        print("Created existing conf.py file")
+        
+        # Change to the temporary directory
+        original_cwd = os.getcwd()
+        os.chdir(tmpdir)
+        
+        try:
+            # Run sphinx-quickstart and simulate pressing Enter
+            print("Running sphinx-quickstart (first run)...")
+            result1 = subprocess.run([
+                sys.executable, "-m", "sphinx.cmd.quickstart", 
+                "--no-makefile", "--no-batchfile"
+            ], input="\n", text=True, capture_output=True, timeout=30)
+            
+            print("First run completed")
+            print("STDOUT:", result1.stdout)
+            print("STDERR:", result1.stderr)
+            print("Return code:", result1.returncode)
+            
+            # Run sphinx-quickstart again to trigger the issue
+            print("\nRunning sphinx-quickstart (second run) to trigger the issue...")
+            result2 = subprocess.run([
+                sys.executable, "-m", "sphinx.cmd.quickstart", 
+                "--no-makefile", "--no-batchfile"
+            ], input="\n", text=True, capture_output=True, timeout=30)
+            
+            print("Second run completed")
+            print("STDOUT:", result2.stdout)
+            print("STDERR:", result2.stderr)
+            print("Return code:", result2.returncode)
+            
+            # Check if the issue occurs (should see "Please enter a valid path name" error)
+            if "Please enter a valid path name" in result2.stderr:
+                print("\n‚ùå ISSUE REPRODUCED: User cannot exit by pressing Enter")
+                return False
+            else:
+                print("\n‚úÖ Issue not reproduced")
+                return True
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    success = test_quickstart_exit_with_existing_conf()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 206ff4ad4..4bb5faeb1 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py
index a40a21073..cc5f8b680 100644
--- a/sphinx/cmd/quickstart.py
+++ b/sphinx/cmd/quickstart.py
@@ -95,6 +95,13 @@ def is_path(x: str) -> str:
     return x
 
 
+def is_path_or_empty(x: str) -> str:
+    """Validator that allows empty string (for exiting) or validates as path."""
+    if not x:
+        return x  # Allow empty string for exiting
+    return is_path(x)
+
+
 def allow_empty(x: str) -> str:
     return x
 
@@ -223,7 +230,7 @@ def ask_user(d: Dict) -> None:
         print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))
         print()
         d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),
-                              '', is_path)
+                              '', is_path_or_empty)
         if not d['path']:
             sys.exit(1)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..1ea9dec33
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the sphinx-quickstart fix
+"""
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_edge_cases():
+    """Test various edge cases for the path validation fix"""
+    
+    # Test case 1: Empty string should exit
+    print("Test 1: Empty string should exit")
+    with tempfile.TemporaryDirectory() as tmpdir:
+        conf_path = os.path.join(tmpdir, "conf.py")
+        with open(conf_path, "w") as f:
+            f.write("# Existing conf.py file\n")
+        
+        os.chdir(tmpdir)
+        result = subprocess.run([
+            sys.executable, "-m", "sphinx.cmd.quickstart", 
+            "--no-makefile", "--no-batchfile"
+        ], input="\n", text=True, capture_output=True, timeout=30)
+        
+        print(f"Return code: {result.returncode}")
+        print(f"STDOUT: {result.stdout}")
+        print(f"STDERR: {result.stderr}")
+        assert result.returncode == 1, "Should exit with code 1 when pressing Enter"
+        print("‚úÖ Test 1 passed")
+    
+    # Test case 2: Valid path should accept the path (we'll just check it doesn't error immediately)
+    print("\nTest 2: Valid path should be accepted")
+    with tempfile.TemporaryDirectory() as tmpdir:
+        conf_path = os.path.join(tmpdir, "conf.py")
+        with open(conf_path, "w") as f:
+            f.write("# Existing conf.py file\n")
+        
+        os.chdir(tmpdir)
+        # Create a subdirectory to use as valid path
+        subdir = os.path.join(tmpdir, "subdir")
+        os.makedirs(subdir)
+        
+        # Just test that it accepts the valid path without validation error
+        # We'll interrupt after it accepts the path to avoid long-running process
+        result = subprocess.run([
+            sys.executable, "-m", "sphinx.cmd.quickstart", 
+            "--no-makefile", "--no-batchfile"
+        ], input=f"{subdir}\n", text=True, capture_output=True, timeout=10)
+        
+        print(f"Return code: {result.returncode}")
+        print(f"STDOUT: {result.stdout}")
+        print(f"STDERR: {result.stderr}")
+        # Should not contain validation error for valid path
+        assert "Please enter a valid path name" not in result.stdout, "Should accept valid path"
+        print("‚úÖ Test 2 passed")
+    
+    # Test case 3: Invalid path should show error and reprompt
+    print("\nTest 3: Invalid path should show error and reprompt")
+    with tempfile.TemporaryDirectory() as tmpdir:
+        conf_path = os.path.join(tmpdir, "conf.py")
+        with open(conf_path, "w") as f:
+            f.write("# Existing conf.py file\n")
+        
+        os.chdir(tmpdir)
+        # Provide invalid path, then exit with Enter
+        result = subprocess.run([
+            sys.executable, "-m", "sphinx.cmd.quickstart", 
+            "--no-makefile", "--no-batchfile"
+        ], input="invalid_path\n\n", text=True, capture_output=True, timeout=30)
+        
+        print(f"Return code: {result.returncode}")
+        print(f"STDOUT: {result.stdout}")
+        print(f"STDERR: {result.stderr}")
+        assert result.returncode == 1, "Should eventually exit"
+        assert "Please enter a valid path name" in result.stdout, "Should show validation error"
+        print("‚úÖ Test 3 passed")
+
+if __name__ == "__main__":
+    test_edge_cases()
+    print("\nüéâ All edge case tests passed!")
\ No newline at end of file
diff --git a/test_final_verification.py b/test_final_verification.py
new file mode 100644
index 000000000..52533a49c
--- /dev/null
+++ b/test_final_verification.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+"""
+Final verification test for the sphinx-quickstart fix
+This test reproduces the exact scenario described in the GitHub issue
+"""
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_github_issue_scenario():
+    """Test the exact scenario described in the GitHub issue"""
+    
+    print("Testing the exact GitHub issue scenario...")
+    print("1. Running sphinx-quickstart in a folder")
+    print("2. Running sphinx-quickstart again in the same folder (with existing conf.py)")
+    print("3. Pressing Enter should exit cleanly without validation error")
+    
+    with tempfile.TemporaryDirectory() as tmpdir:
+        print(f"Using temporary directory: {tmpdir}")
+        
+        # Step 1: First run to create conf.py
+        print("\nStep 1: First run to create conf.py")
+        os.chdir(tmpdir)
+        result1 = subprocess.run([
+            sys.executable, "-m", "sphinx.cmd.quickstart", 
+            "--no-makefile", "--no-batchfile", "--quiet"
+        ], input="\n\n\n\n\n\n\n\n\n", text=True, capture_output=True, timeout=30)
+        
+        if result1.returncode != 0:
+            print("First run failed, but that's okay for this test")
+        
+        # Check if conf.py was created
+        conf_exists = os.path.exists("conf.py")
+        print(f"conf.py created: {conf_exists}")
+        
+        if not conf_exists:
+            # If quickstart didn't create conf.py, create it manually
+            with open("conf.py", "w") as f:
+                f.write("# Test conf.py file\n")
+            print("Created conf.py manually for testing")
+        
+        # Step 2: Second run to trigger the issue
+        print("\nStep 2: Second run (should detect existing conf.py)")
+        result2 = subprocess.run([
+            sys.executable, "-m", "sphinx.cmd.quickstart", 
+            "--no-makefile", "--no-batchfile"
+        ], input="\n", text=True, capture_output=True, timeout=30)
+        
+        print(f"Return code: {result2.returncode}")
+        print("STDOUT:")
+        print(result2.stdout)
+        print("STDERR:")
+        print(result2.stderr)
+        
+        # Verify the fix
+        success = True
+        issues = []
+        
+        # Check 1: Should exit with code 1 (user chose to exit)
+        if result2.returncode != 1:
+            issues.append(f"Expected exit code 1, got {result2.returncode}")
+            success = False
+        
+        # Check 2: Should NOT show "Please enter a valid path name" error
+        if "Please enter a valid path name" in result2.stdout:
+            issues.append("Still shows validation error for empty input")
+            success = False
+        
+        # Check 3: Should show the prompt about existing conf.py
+        if "existing conf.py has been found" not in result2.stdout:
+            issues.append("Did not detect existing conf.py")
+            success = False
+        
+        # Check 4: Should exit cleanly without validation errors
+        if success:
+            print("\n‚úÖ SUCCESS: The fix works correctly!")
+            print("   - User can exit by pressing Enter")
+            print("   - No validation error for empty input")
+            print("   - Clean exit with code 1")
+        else:
+            print("\n‚ùå FAILED: Issues found:")
+            for issue in issues:
+                print(f"   - {issue}")
+        
+        return success
+
+if __name__ == "__main__":
+    success = test_github_issue_scenario()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
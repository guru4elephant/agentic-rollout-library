diff --git a/check_docstring.py b/check_docstring.py
new file mode 100644
index 0000000000..257ad5d92b
--- /dev/null
+++ b/check_docstring.py
@@ -0,0 +1,33 @@
+import inspect
+import django
+from django.conf import settings
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Check the actual docstring
+bulk_create_method = Person.objects.bulk_create
+print(f"Method name: {bulk_create_method.__name__}")
+print(f"Method signature: {inspect.signature(bulk_create_method)}")
+print(f"Docstring: {repr(bulk_create_method.__doc__)}")
+print(f"Docstring contains 'bulk_create': {'bulk_create' in str(bulk_create_method.__doc__)}")
\ No newline at end of file
diff --git a/comprehensive_verification.py b/comprehensive_verification.py
new file mode 100644
index 0000000000..240b6bf2e4
--- /dev/null
+++ b/comprehensive_verification.py
@@ -0,0 +1,65 @@
+import inspect
+import django
+from django.conf import settings
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+def test_fix():
+    """Comprehensive test to verify the inspect.signature fix"""
+    print("=== Testing inspect.signature fix ===\n")
+    
+    # Test bulk_create method specifically
+    bulk_create_method = Person.objects.bulk_create
+    
+    # Before the fix: signature would be (*args, **kwargs)
+    # After the fix: signature should show actual parameters
+    sig = inspect.signature(bulk_create_method)
+    
+    print(f"Method: {bulk_create_method.__name__}")
+    print(f"Signature: {sig}")
+    print(f"Has docstring: {bool(bulk_create_method.__doc__)}")
+    
+    # Verify the fix worked
+    assert str(sig) != "(*args, **kwargs)", "Signature should not be (*args, **kwargs)"
+    assert 'objs' in str(sig), "Signature should include 'objs' parameter"
+    assert 'batch_size' in str(sig), "Signature should include 'batch_size' parameter"
+    
+    print("\nâœ“ Fix verified: inspect.signature now returns correct signature!")
+    
+    # Test a few other methods to ensure we didn't break anything
+    print("\n=== Testing other manager methods ===\n")
+    
+    methods_to_check = ['create', 'filter', 'get', 'exclude']
+    for method_name in methods_to_check:
+        if hasattr(Person.objects, method_name):
+            method = getattr(Person.objects, method_name)
+            print(f"{method_name}: {inspect.signature(method)}")
+        else:
+            print(f"{method_name}: Not found")
+    
+    print("\nâœ“ All methods accessible and working!")
+
+if __name__ == "__main__":
+    test_fix()
+    print("\nðŸŽ‰ Fix successful! inspect.signature() now works correctly on manager methods.")
\ No newline at end of file
diff --git a/django/db/models/manager.py b/django/db/models/manager.py
index e37e56cd17..426c9c1092 100644
--- a/django/db/models/manager.py
+++ b/django/db/models/manager.py
@@ -1,4 +1,5 @@
 import copy
+import functools
 import inspect
 from importlib import import_module
 
@@ -81,11 +82,10 @@ class BaseManager:
     @classmethod
     def _get_queryset_methods(cls, queryset_class):
         def create_method(name, method):
+            @functools.wraps(method)
             def manager_method(self, *args, **kwargs):
                 return getattr(self.get_queryset(), name)(*args, **kwargs)
 
-            manager_method.__name__ = method.__name__
-            manager_method.__doc__ = method.__doc__
             return manager_method
 
         new_methods = {}
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..486181a281
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,51 @@
+import inspect
+import django
+from django.conf import settings
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+def test_method_metadata():
+    """Test that manager methods have proper metadata"""
+    bulk_create_method = Person.objects.bulk_create
+    
+    # Test name
+    assert bulk_create_method.__name__ == 'bulk_create', f"Expected 'bulk_create', got '{bulk_create_method.__name__}'"
+    
+    # Test docstring
+    assert bulk_create_method.__doc__ is not None, "Method should have a docstring"
+    assert 'bulk_create' in bulk_create_method.__doc__, "Docstring should mention method name"
+    
+    # Test signature
+    sig = inspect.signature(bulk_create_method)
+    assert str(sig) != "(*args, **kwargs)", f"Signature should not be (*args, **kwargs), got {sig}"
+    assert 'objs' in str(sig), f"Signature should include 'objs' parameter, got {sig}"
+    assert 'batch_size' in str(sig), f"Signature should include 'batch_size' parameter, got {sig}"
+    
+    print("âœ“ All metadata tests passed!")
+    print(f"Method name: {bulk_create_method.__name__}")
+    print(f"Method signature: {sig}")
+    print(f"Method has docstring: {bool(bulk_create_method.__doc__)}")
+
+if __name__ == "__main__":
+    test_method_metadata()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..49816637df
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+import inspect
+import django
+from django.conf import settings
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+print("Testing inspect.signature on Person.objects.bulk_create:")
+sig = inspect.signature(Person.objects.bulk_create)
+print(f"Actual signature: {sig}")
+print(f"Expected signature should show parameters like: (objs, batch_size=None, ignore_conflicts=False)")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..4cd09b5b20
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,62 @@
+import inspect
+import django
+from django.conf import settings
+from django.db import models
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Test multiple manager methods
+methods_to_test = [
+    'bulk_create',
+    'get',
+    'create',
+    'filter',
+    'exclude',
+]
+
+print("Testing inspect.signature on various manager methods:")
+for method_name in methods_to_test:
+    if hasattr(Person.objects, method_name):
+        method = getattr(Person.objects, method_name)
+        try:
+            sig = inspect.signature(method)
+            print(f"{method_name}: {sig}")
+        except (ValueError, TypeError):
+            print(f"{method_name}: Could not get signature")
+    else:
+        print(f"{method_name}: Method not found")
+
+print("\nTesting that the methods still work correctly:")
+# Test that the methods still work
+try:
+    # Test create method
+    person = Person.objects.create(name="Test Person")
+    print(f"Created person: {person.name}")
+    
+    # Test filter method
+    filtered = Person.objects.filter(name="Test Person")
+    print(f"Filtered count: {filtered.count()}")
+    
+    print("All methods work correctly!")
+except Exception as e:
+    print(f"Error testing methods: {e}")
\ No newline at end of file
diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 2c62182d31..8b28a60485 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         if settings_dict['USER']:
             kwargs['user'] = settings_dict['USER']
         if settings_dict['NAME']:
-            kwargs['db'] = settings_dict['NAME']
+            kwargs['database'] = settings_dict['NAME']
         if settings_dict['PASSWORD']:
-            kwargs['passwd'] = settings_dict['PASSWORD']
+            kwargs['password'] = settings_dict['PASSWORD']
         if settings_dict['HOST'].startswith('/'):
             kwargs['unix_socket'] = settings_dict['HOST']
         elif settings_dict['HOST']:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6b267a9ee6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the MySQL backend deprecated kwargs issue.
+This script will attempt to create a MySQL connection using the deprecated
+'db' and 'passwd' kwargs to demonstrate the deprecation warnings.
+"""
+
+import os
+import sys
+import warnings
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+from django.db.backends.mysql.base import DatabaseWrapper
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'test_user',
+                'PASSWORD': 'test_password',
+                'HOST': 'localhost',
+                'PORT': '3306',
+            }
+        }
+    )
+
+def test_deprecated_kwargs():
+    """Test that the MySQL backend uses deprecated kwargs"""
+    print("Testing MySQL backend connection parameters...")
+    
+    # Create a DatabaseWrapper instance
+    wrapper = DatabaseWrapper({
+        'ENGINE': 'django.db.backends.mysql',
+        'NAME': 'test_db',
+        'USER': 'test_user', 
+        'PASSWORD': 'test_password',
+        'HOST': 'localhost',
+        'PORT': '3306',
+    })
+    
+    # Capture warnings to see if deprecated kwargs are used
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        
+        try:
+            # This should trigger the deprecated kwargs if they're still being used
+            connection_params = wrapper.get_connection_params()
+            print("Connection parameters:", connection_params)
+            
+            # Check if deprecated kwargs are present
+            if 'db' in connection_params:
+                print("❌ DEPRECATED: 'db' kwarg is still being used")
+            if 'passwd' in connection_params:
+                print("❌ DEPRECATED: 'passwd' kwarg is still being used")
+                
+            # Check if modern kwargs are present
+            if 'database' in connection_params:
+                print("✅ MODERN: 'database' kwarg is being used")
+            if 'password' in connection_params:
+                print("✅ MODERN: 'password' kwarg is being used")
+                
+        except Exception as e:
+            print(f"Error getting connection parameters: {e}")
+        
+        # Check for any warnings
+        for warning in w:
+            if 'deprecated' in str(warning.message).lower():
+                print(f"⚠️  WARNING: {warning.message}")
+
+if __name__ == '__main__':
+    test_deprecated_kwargs()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..c98d1a7353
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Script to test that the MySQL backend now uses modern kwargs instead of deprecated ones.
+"""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+from django.db.backends.mysql.base import DatabaseWrapper
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.mysql',
+                'NAME': 'test_db',
+                'USER': 'test_user', 
+                'PASSWORD': 'test_password',
+                'HOST': 'localhost',
+                'PORT': '3306',
+            }
+        }
+    )
+
+def test_modern_kwargs():
+    """Test that the MySQL backend now uses modern kwargs"""
+    print("Testing MySQL backend connection parameters after fix...")
+    
+    # Create a DatabaseWrapper instance
+    wrapper = DatabaseWrapper({
+        'ENGINE': 'django.db.backends.mysql',
+        'NAME': 'test_db',
+        'USER': 'test_user',
+        'PASSWORD': 'test_password',
+        'HOST': 'localhost',
+        'PORT': '3306',
+    })
+    
+    try:
+        # Get connection parameters
+        connection_params = wrapper.get_connection_params()
+        print("✅ Successfully retrieved connection parameters")
+        print("Connection parameters keys:", list(connection_params.keys()))
+        
+        # Check that deprecated kwargs are NOT present
+        if 'db' not in connection_params:
+            print("✅ GOOD: 'db' kwarg is no longer used (replaced with 'database')")
+        else:
+            print("❌ BAD: 'db' kwarg is still being used")
+            
+        if 'passwd' not in connection_params:
+            print("✅ GOOD: 'passwd' kwarg is no longer used (replaced with 'password')")
+        else:
+            print("❌ BAD: 'passwd' kwarg is still being used")
+            
+        # Check that modern kwargs ARE present
+        if 'database' in connection_params:
+            print("✅ GOOD: 'database' kwarg is being used")
+            print(f"   database value: {connection_params['database']}")
+        else:
+            print("❌ BAD: 'database' kwarg is missing")
+            
+        if 'password' in connection_params:
+            print("✅ GOOD: 'password' kwarg is being used")
+            print(f"   password value: {connection_params['password']}")
+        else:
+            print("❌ BAD: 'password' kwarg is missing")
+            
+        # Verify other expected parameters
+        expected_params = ['conv', 'charset', 'user', 'database', 'password', 'host', 'port', 'client_flag']
+        for param in expected_params:
+            if param in connection_params:
+                print(f"✅ {param}: present")
+            else:
+                print(f"⚠️  {param}: missing (may be expected depending on configuration)")
+                
+    except Exception as e:
+        print(f"❌ Error getting connection parameters: {e}")
+        return False
+        
+    return True
+
+if __name__ == '__main__':
+    success = test_modern_kwargs()
+    if success:
+        print("\n🎉 Fix verification successful! The MySQL backend now uses modern kwargs.")
+    else:
+        print("\n💥 Fix verification failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..5447dc0a40
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+Script to verify that the MySQL backend fix has been applied correctly
+by examining the source code directly.
+"""
+
+def verify_fix():
+    """Verify that the deprecated kwargs have been replaced"""
+    print("Verifying MySQL backend fix...")
+    
+    # Read the base.py file
+    with open('/testbed/django/db/backends/mysql/base.py', 'r') as f:
+        content = f.read()
+    
+    # Check that deprecated kwargs are NOT present
+    if 'kwargs[\'db\']' in content:
+        print("❌ FAIL: 'db' kwarg is still being used")
+        return False
+    else:
+        print("✅ PASS: 'db' kwarg has been removed")
+    
+    if 'kwargs[\'passwd\']' in content:
+        print("❌ FAIL: 'passwd' kwarg is still being used")
+        return False
+    else:
+        print("✅ PASS: 'passwd' kwarg has been removed")
+    
+    # Check that modern kwargs ARE present
+    if 'kwargs[\'database\']' in content:
+        print("✅ PASS: 'database' kwarg is being used")
+    else:
+        print("❌ FAIL: 'database' kwarg is missing")
+        return False
+    
+    if 'kwargs[\'password\']' in content:
+        print("✅ PASS: 'password' kwarg is being used")
+    else:
+        print("❌ FAIL: 'password' kwarg is missing")
+        return False
+    
+    # Check the specific lines mentioned in the issue (202-205)
+    lines = content.split('\n')
+    target_lines = lines[201:205]  # 0-indexed, so lines 202-205 are indices 201-204
+    
+    print("\nExamining lines 202-205:")
+    for i, line in enumerate(target_lines, start=202):
+        print(f"Line {i}: {line.strip()}")
+    
+    # Verify the specific changes
+    line_203_ok = 'kwargs[\'database\']' in lines[202] if len(lines) > 202 else False
+    line_205_ok = 'kwargs[\'password\']' in lines[204] if len(lines) > 204 else False
+    
+    if line_203_ok:
+        print("✅ Line 203 correctly uses 'database' instead of 'db'")
+    else:
+        print("❌ Line 203 does not use 'database'")
+        return False
+        
+    if line_205_ok:
+        print("✅ Line 205 correctly uses 'password' instead of 'passwd'")
+    else:
+        print("❌ Line 205 does not use 'password'")
+        return False
+    
+    return True
+
+if __name__ == '__main__':
+    success = verify_fix()
+    if success:
+        print("\n🎉 Fix verification successful!")
+        print("The MySQL backend now uses modern kwargs:")
+        print("  - 'database' instead of deprecated 'db'")
+        print("  - 'password' instead of deprecated 'passwd'")
+    else:
+        print("\n💥 Fix verification failed!")
+        exit(1)
\ No newline at end of file
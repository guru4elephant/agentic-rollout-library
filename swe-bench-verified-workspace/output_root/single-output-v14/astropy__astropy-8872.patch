diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index ded609cbe9..32eda696de 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -377,9 +377,10 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):
                             "Numpy numeric type.")
 
         # by default, cast any integer, boolean, etc., to float
+        # but preserve existing float types (kind 'f') 
         if dtype is None and (not (np.can_cast(np.float32, value.dtype)
                                    or value.dtype.fields)
-                              or value.dtype.kind == 'O'):
+                              or value.dtype.kind == 'O') and value.dtype.kind != 'f':
             value = value.astype(float)
 
         value = value.view(cls)
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..1b489ad5e6
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+import numpy as np
+import astropy.units as u
+
+def test_case(name, value, expected_dtype):
+    """Test a single case and report results"""
+    try:
+        result = value * u.km
+        actual_dtype = result.dtype
+        success = actual_dtype == expected_dtype
+        status = "✓ PASS" if success else "✗ FAIL"
+        print(f"{status} {name}: {actual_dtype} (expected: {expected_dtype})")
+        return success
+    except Exception as e:
+        print(f"✗ ERROR {name}: {e}")
+        return False
+
+print("Comprehensive test of dtype preservation:")
+print("=" * 60)
+
+# Test cases
+test_cases = [
+    # Float types (should preserve)
+    ("float16", np.float16(1), np.dtype('float16')),
+    ("float32", np.float32(1), np.dtype('float32')),
+    ("float64", np.float64(1), np.dtype('float64')),
+    
+    # Integer types (should convert to float64)
+    ("int8", np.int8(1), np.dtype('float64')),
+    ("int16", np.int16(1), np.dtype('float64')),
+    ("int32", np.int32(1), np.dtype('float64')),
+    ("int64", np.int64(1), np.dtype('float64')),
+    ("uint8", np.uint8(1), np.dtype('float64')),
+    ("uint16", np.uint16(1), np.dtype('float64')),
+    ("uint32", np.uint32(1), np.dtype('float64')),
+    ("uint64", np.uint64(1), np.dtype('float64')),
+    
+    # Boolean (should convert to float64)
+    ("bool", np.bool_(True), np.dtype('float64')),
+    
+    # Complex types (should preserve)
+    ("complex64", np.complex64(1), np.dtype('complex64')),
+    ("complex128", np.complex128(1), np.dtype('complex128')),
+    
+    # Python built-in types
+    ("Python int", 1, np.dtype('float64')),
+    ("Python float", 1.0, np.dtype('float64')),
+]
+
+# Run all tests
+all_passed = True
+for name, value, expected_dtype in test_cases:
+    if not test_case(name, value, expected_dtype):
+        all_passed = False
+
+print("\n" + "=" * 60)
+if all_passed:
+    print("🎉 ALL TESTS PASSED! The fix works correctly.")
+else:
+    print("❌ SOME TESTS FAILED. Please review the implementation.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2c1499f327
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+import numpy as np
+import astropy.units as u
+
+print("Testing float16 dtype preservation in Quantity creation")
+print("=" * 50)
+
+# Test float16
+float16_val = np.float16(1)
+print(f"np.float16(1): {float16_val}")
+print(f"np.float16(1).dtype: {float16_val.dtype}")
+
+float16_quantity = float16_val * u.km
+print(f"(np.float16(1) * u.km): {float16_quantity}")
+print(f"(np.float16(1) * u.km).dtype: {float16_quantity.dtype}")
+
+print("\nTesting other float types for comparison:")
+print("-" * 40)
+
+# Test float32
+float32_quantity = np.float32(1) * u.km
+print(f"(np.float32(1) * u.km).dtype: {float32_quantity.dtype}")
+
+# Test float64
+float64_quantity = np.float64(1) * u.km
+print(f"(np.float64(1) * u.km).dtype: {float64_quantity.dtype}")
+
+# Test float128 if available
+try:
+    float128_quantity = np.float128(1) * u.km
+    print(f"(np.float128(1) * u.km).dtype: {float128_quantity.dtype}")
+except AttributeError:
+    print("np.float128 not available")
+
+# Test built-in float
+float_quantity = float(1) * u.km
+print(f"(float(1) * u.km).dtype: {float_quantity.dtype}")
+
+# Test np.float_
+float__quantity = np.float_(1) * u.km
+print(f"(np.float_(1) * u.km).dtype: {float__quantity.dtype}")
\ No newline at end of file
diff --git a/test_can_cast.py b/test_can_cast.py
new file mode 100644
index 0000000000..ead9e88331
--- /dev/null
+++ b/test_can_cast.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+import numpy as np
+
+print("Testing np.can_cast behavior:")
+print("=" * 30)
+
+# Test float16
+float16_dtype = np.dtype('float16')
+print(f"np.can_cast(np.float32, np.float16): {np.can_cast(np.float32, np.float16)}")
+print(f"np.can_cast(np.float32, {float16_dtype}): {np.can_cast(np.float32, float16_dtype)}")
+
+# Test other float types for comparison
+print(f"np.can_cast(np.float32, np.float32): {np.can_cast(np.float32, np.float32)}")
+print(f"np.can_cast(np.float32, np.float64): {np.can_cast(np.float32, np.float64)}")
+
+# Test the actual condition from the code
+test_value = np.array([1.0], dtype=np.float16)
+print(f"\nTesting the actual condition from code:")
+print(f"value.dtype: {test_value.dtype}")
+print(f"value.dtype.fields: {test_value.dtype.fields}")
+print(f"np.can_cast(np.float32, test_value.dtype): {np.can_cast(np.float32, test_value.dtype)}")
+print(f"not (np.can_cast(np.float32, test_value.dtype) or test_value.dtype.fields): {not (np.can_cast(np.float32, test_value.dtype) or test_value.dtype.fields)}")
\ No newline at end of file
diff --git a/test_dtype_kind.py b/test_dtype_kind.py
new file mode 100644
index 0000000000..18a1b40f70
--- /dev/null
+++ b/test_dtype_kind.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+import numpy as np
+
+print("Testing dtype.kind for various types:")
+print("=" * 40)
+
+# Test various numeric types
+test_types = [
+    np.int8(1), np.int16(1), np.int32(1), np.int64(1),
+    np.uint8(1), np.uint16(1), np.uint32(1), np.uint64(1),
+    np.float16(1), np.float32(1), np.float64(1),
+    np.bool_(True), np.complex64(1), np.complex128(1)
+]
+
+if hasattr(np, 'float128'):
+    test_types.append(np.float128(1))
+if hasattr(np, 'complex256'):
+    test_types.append(np.complex256(1))
+
+for val in test_types:
+    arr = np.array([val])
+    print(f"{type(val).__name__}: dtype={arr.dtype}, kind={arr.dtype.kind}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..869089ef08
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+import numpy as np
+import astropy.units as u
+
+print("Testing edge cases for dtype preservation:")
+print("=" * 50)
+
+# Test that integer types still get converted to float64
+print("Integer types (should convert to float64):")
+print("-" * 40)
+for int_type in [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64]:
+    try:
+        val = int_type(1)
+        q = val * u.km
+        print(f"{int_type.__name__}(1) * u.km -> dtype: {q.dtype}")
+    except Exception as e:
+        print(f"{int_type.__name__}(1) * u.km -> Error: {e}")
+
+print("\nBoolean type (should convert to float64):")
+print("-" * 40)
+bool_q = np.bool_(True) * u.km
+print(f"np.bool_(True) * u.km -> dtype: {bool_q.dtype}")
+
+print("\nComplex types (should preserve):")
+print("-" * 40)
+for complex_type in [np.complex64, np.complex128]:
+    try:
+        val = complex_type(1)
+        q = val * u.km
+        print(f"{complex_type.__name__}(1) * u.km -> dtype: {q.dtype}")
+    except Exception as e:
+        print(f"{complex_type.__name__}(1) * u.km -> Error: {e}")
+
+print("\nTest with explicit dtype parameter:")
+print("-" * 40)
+float16_val = np.float16(1)
+q_explicit = u.Quantity(float16_val, u.km, dtype=np.float32)
+print(f"Quantity(np.float16(1), u.km, dtype=np.float32) -> dtype: {q_explicit.dtype}")
\ No newline at end of file
diff --git a/test_float_types.py b/test_float_types.py
new file mode 100644
index 0000000000..e84e80645d
--- /dev/null
+++ b/test_float_types.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+import numpy as np
+
+print("Testing numpy float types:")
+print("=" * 30)
+
+# Test all available float types
+float_types = ['float16', 'float32', 'float64']
+if hasattr(np, 'float128'):
+    float_types.append('float128')
+
+for float_type in float_types:
+    try:
+        dtype_obj = getattr(np, float_type)
+        arr = np.array([1.0], dtype=dtype_obj)
+        
+        print(f"{float_type}:")
+        print(f"  dtype: {arr.dtype}")
+        print(f"  can_cast(np.float32, {float_type}): {np.can_cast(np.float32, arr.dtype)}")
+        print(f"  dtype.fields: {arr.dtype.fields}")
+        print(f"  dtype.kind: {arr.dtype.kind}")
+        print()
+        
+    except AttributeError:
+        print(f"{float_type} not available")
+        print()
\ No newline at end of file
diff --git a/minimal_test.py b/minimal_test.py
new file mode 100644
index 0000000000..91e70d0d6a
--- /dev/null
+++ b/minimal_test.py
@@ -0,0 +1,119 @@
+#!/usr/bin/env python3
+"""
+Minimal test to reproduce the OuterRef issue
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import Exists, OuterRef, Q
+
+# Define minimal models that match the test structure
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Tag(models.Model):
+    name = models.CharField(max_length=100)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+class Item(models.Model):
+    name = models.CharField(max_length=100)
+    tags = models.ManyToManyField(Tag)
+    
+    class Meta:
+        app_label = 'test'
+
+class Number(models.Model):
+    num = models.IntegerField()
+    other_num = models.IntegerField(null=True)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create test database
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Category)
+    schema_editor.create_model(Tag)
+    schema_editor.create_model(Item)
+    schema_editor.create_model(Number)
+
+def test_outerref_issue():
+    print("Testing OuterRef issue with exclude() and ~Q()...")
+    
+    # Create test data
+    category = Category.objects.create(name="test")
+    tag = Tag.objects.create(name="test_tag", category=category)
+    item = Item.objects.create(name="test_item")
+    item.tags.add(tag)
+    number = Number.objects.create(num=1, other_num=1)
+    
+    print("\n1. Testing filter() with OuterRef (should work):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {qs.query}")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    print("\n2. Testing exclude() with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {qs.query}")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    print("\n3. Testing filter(~Q()) with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {qs.query}")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_outerref_issue()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1417e81cda
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the OuterRef issue with exclude() and ~Q()
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+django.setup()
+
+from django.db.models import Exists, OuterRef, Q
+from tests.queries.models import Number, Item, Tag, NamedCategory
+
+def test_outerref_issue():
+    # Setup test data
+    category = NamedCategory.objects.create(name="test")
+    tag = Tag.objects.create(name="test_tag", category=category)
+    item = Item.objects.create(name="test_item", creator_id=1, note_id=1)
+    item.tags.add(tag)
+    
+    number = Number.objects.create(num=1, other_num=1)
+    
+    print("Testing filter() with OuterRef (should work):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"Success: {qs}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    print("\nTesting exclude() with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"Success: {qs}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    print("\nTesting filter(~Q()) with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        print(f"Success: {qs}")
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == "__main__":
+    test_outerref_issue()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..2b42a7846b
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,108 @@
+#!/usr/bin/env python3
+"""
+Simple test to reproduce the OuterRef issue
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import Exists, OuterRef, Q
+
+# Simple models for testing
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Tag(models.Model):
+    name = models.CharField(max_length=100)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+class Item(models.Model):
+    name = models.CharField(max_length=100)
+    tags = models.ManyToManyField(Tag)
+    
+    class Meta:
+        app_label = 'test'
+
+class Number(models.Model):
+    num = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create test database
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Category)
+    schema_editor.create_model(Tag)
+    schema_editor.create_model(Item)
+    schema_editor.create_model(Number)
+
+def test_outerref_issue():
+    print("Testing OuterRef issue...")
+    
+    # Test 1: filter() with OuterRef (should work)
+    print("\n1. Testing filter() with OuterRef:")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {qs.query}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 2: exclude() with OuterRef (should fail)
+    print("\n2. Testing exclude() with OuterRef:")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {qs.query}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 3: filter(~Q()) with OuterRef (should fail)
+    print("\n3. Testing filter(~Q()) with OuterRef:")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {qs.query}")
+    except Exception as e:
+        print(f"   Error: {e}")
+
+if __name__ == "__main__":
+    test_outerref_issue()
\ No newline at end of file
diff --git a/targeted_test.py b/targeted_test.py
new file mode 100644
index 0000000000..19dfe00e80
--- /dev/null
+++ b/targeted_test.py
@@ -0,0 +1,125 @@
+#!/usr/bin/env python3
+"""
+Targeted test to reproduce the OuterRef issue
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models import Exists, OuterRef, Q
+
+# Define models that match the test structure more closely
+class NamedCategory(models.Model):
+    name = models.CharField(max_length=10)
+    
+    class Meta:
+        app_label = 'test'
+
+class Tag(models.Model):
+    name = models.CharField(max_length=10)
+    category = models.ForeignKey(NamedCategory, models.SET_NULL, null=True, default=None)
+    
+    class Meta:
+        app_label = 'test'
+
+class Item(models.Model):
+    name = models.CharField(max_length=10)
+    tags = models.ManyToManyField(Tag, blank=True)
+    
+    class Meta:
+        app_label = 'test'
+
+class Number(models.Model):
+    num = models.IntegerField()
+    other_num = models.IntegerField(null=True)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create test database
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(NamedCategory)
+    schema_editor.create_model(Tag)
+    schema_editor.create_model(Item)
+    schema_editor.create_model(Number)
+
+def test_outerref_issue():
+    print("Testing OuterRef issue with exclude() and ~Q()...")
+    
+    # Create test data that might trigger the issue
+    category = NamedCategory.objects.create(name="test")
+    tag = Tag.objects.create(name="test_tag", category=category)
+    item = Item.objects.create(name="test_item")
+    item.tags.add(tag)
+    number = Number.objects.create(num=1, other_num=1)
+    
+    print("\n1. Testing filter() with OuterRef (should work):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        # Force evaluation to trigger query building
+        result = list(qs)
+        print(f"   Success: {len(result)} results")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    print("\n2. Testing exclude() with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        # Force evaluation to trigger query building
+        result = list(qs)
+        print(f"   Success: {len(result)} results")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    print("\n3. Testing filter(~Q()) with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        # Force evaluation to trigger query building
+        result = list(qs)
+        print(f"   Success: {len(result)} results")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_outerref_issue()
\ No newline at end of file
diff --git a/test_outerref_issue.py b/test_outerref_issue.py
new file mode 100644
index 0000000000..5f998dc355
--- /dev/null
+++ b/test_outerref_issue.py
@@ -0,0 +1,98 @@
+#!/usr/bin/env python3
+"""
+Test to reproduce the OuterRef issue with exclude() and ~Q()
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Use the same test setup as runtests.py
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+from django.conf import settings
+
+# Configure settings like runtests.py does
+settings.INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.sites',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.admin.apps.SimpleAdminConfig',
+    'django.contrib.staticfiles',
+    'queries',  # Add the queries test app
+]
+settings.ROOT_URLCONF = 'urls'
+settings.STATIC_URL = '/static/'
+settings.TEMPLATES = [{
+    'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    'DIRS': [],
+    'APP_DIRS': True,
+}]
+settings.LANGUAGE_CODE = 'en'
+settings.SITE_ID = 1
+settings.MIDDLEWARE = [
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+
+django.setup()
+
+from django.db.models import Exists, OuterRef, Q
+from tests.queries.models import Number, Item, Tag, NamedCategory
+
+def test_outerref_issue():
+    print("Testing OuterRef issue with exclude() and ~Q()...")
+    
+    # Create test data
+    category = NamedCategory.objects.create(name="test")
+    tag = Tag.objects.create(name="test_tag", category=category)
+    item = Item.objects.create(name="test_item", creator_id=1, note_id=1)
+    item.tags.add(tag)
+    number = Number.objects.create(num=1, other_num=1)
+    
+    print("\n1. Testing filter() with OuterRef (should work):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {len(qs)} results")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    print("\n2. Testing exclude() with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {len(qs)} results")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    print("\n3. Testing filter(~Q()) with OuterRef (should fail):")
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        print(f"   Success: {len(qs)} results")
+    except Exception as e:
+        print(f"   Error: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_outerref_issue()
\ No newline at end of file
diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b8efb9f881..91d6648d99 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -221,6 +221,18 @@ def get_child_arguments():
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
+    
+    # Check if Python was launched with -m (any package, not just django)
+    main_module = sys.modules['__main__']
+    if hasattr(main_module, '__spec__') and main_module.__spec__ is not None:
+        # Python was launched with -m if __spec__.parent is not None
+        # (empty string for directory/zipfile entry, package name for -m)
+        if main_module.__spec__.parent is not None:
+            # The server was started with `python -m <package> runserver`.
+            args += ['-m', main_module.__spec__.name]
+            args += sys.argv[1:]
+            return args
+    
     if py_script == django_main_path:
         # The server was started with `python -m django runserver`.
         args += ['-m', 'django']
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d0bdd0bb1f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with get_child_arguments not detecting
+when Python was launched with -m for packages other than django.
+"""
+
+import sys
+import os
+import subprocess
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.utils.autoreload import get_child_arguments
+
+def test_current_behavior():
+    """Test the current behavior of get_child_arguments"""
+    print("Testing current get_child_arguments behavior:")
+    print(f"sys.argv[0]: {sys.argv[0]}")
+    print(f"sys.executable: {sys.executable}")
+    print(f"sys.argv: {sys.argv}")
+    
+    try:
+        import django.__main__
+        print(f"django.__main__.__file__: {django.__main__.__file__}")
+    except ImportError:
+        print("Could not import django.__main__")
+    
+    try:
+        result = get_child_arguments()
+        print(f"get_child_arguments() result: {result}")
+    except Exception as e:
+        print(f"Error calling get_child_arguments: {e}")
+
+def test_main_module_properties():
+    """Test the properties of the __main__ module that we can use for detection"""
+    print("\nTesting __main__ module properties:")
+    print(f"__name__: {__name__}")
+    print(f"Has __spec__: {hasattr(sys.modules['__main__'], '__spec__')}")
+    
+    if hasattr(sys.modules['__main__'], '__spec__'):
+        spec = sys.modules['__main__'].__spec__
+        print(f"__spec__: {spec}")
+        if spec:
+            print(f"__spec__.name: {spec.name}")
+            print(f"__spec__.parent: {spec.parent}")
+            print(f"Has parent: {hasattr(spec, 'parent') and spec.parent is not None}")
+    
+    print(f"Has __package__: {hasattr(sys.modules['__main__'], '__package__')}")
+    if hasattr(sys.modules['__main__'], '__package__'):
+        print(f"__package__: {sys.modules['__main__'].__package__}")
+
+if __name__ == "__main__":
+    test_current_behavior()
+    test_main_module_properties()
\ No newline at end of file
diff --git a/test_django_m.py b/test_django_m.py
new file mode 100644
index 0000000000..88d43ffe71
--- /dev/null
+++ b/test_django_m.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+"""
+Test what get_child_arguments returns when running with -m django
+"""
+
+import sys
+import os
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.utils.autoreload import get_child_arguments
+
+def test_django_m():
+    """Test get_child_arguments when running with -m django"""
+    print("Testing get_child_arguments with -m django:")
+    print(f"sys.argv[0]: {sys.argv[0]}")
+    print(f"sys.executable: {sys.executable}")
+    print(f"sys.argv: {sys.argv}")
+    
+    try:
+        import django.__main__
+        print(f"django.__main__.__file__: {django.__main__.__file__}")
+    except ImportError:
+        print("Could not import django.__main__")
+    
+    try:
+        result = get_child_arguments()
+        print(f"get_child_arguments() result: {result}")
+        return result
+    except Exception as e:
+        print(f"Error calling get_child_arguments: {e}")
+        return None
+
+if __name__ == "__main__":
+    test_django_m()
\ No newline at end of file
diff --git a/test_package/__main__.py b/test_package/__main__.py
new file mode 100644
index 0000000000..0df8c87dc8
--- /dev/null
+++ b/test_package/__main__.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""
+Test package main module to simulate running with -m test_package
+"""
+
+import sys
+import os
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.utils.autoreload import get_child_arguments
+
+def main():
+    """Main function to test get_child_arguments"""
+    print("Testing get_child_arguments in package context:")
+    print(f"sys.argv[0]: {sys.argv[0]}")
+    print(f"sys.executable: {sys.executable}")
+    print(f"sys.argv: {sys.argv}")
+    
+    # Check __main__ module properties
+    main_module = sys.modules['__main__']
+    print(f"__name__: {__name__}")
+    print(f"Has __spec__: {hasattr(main_module, '__spec__')}")
+    
+    if hasattr(main_module, '__spec__'):
+        spec = main_module.__spec__
+        print(f"__spec__: {spec}")
+        if spec:
+            print(f"__spec__.name: {spec.name}")
+            print(f"__spec__.parent: {spec.parent}")
+            print(f"Has parent: {hasattr(spec, 'parent') and spec.parent is not None}")
+    
+    try:
+        result = get_child_arguments()
+        print(f"get_child_arguments() result: {result}")
+        return result
+    except Exception as e:
+        print(f"Error calling get_child_arguments: {e}")
+        return None
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/debug_sql.py b/debug_sql.py
new file mode 100644
index 0000000000..9ea58327a9
--- /dev/null
+++ b/debug_sql.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Sum
+from django.db.models.functions import Coalesce
+
+# Create a simple test model
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create database table
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute("CREATE TABLE testapp_book (id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(100))")
+
+# Insert some test data
+with connection.cursor() as cursor:
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 1')")
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 2')")
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 3')")
+
+# Debug the SQL generation
+print("=== Testing aggregate() without default ===")
+qs1 = Book.objects.annotate(idx=F("id"))
+agg1 = Sum("id")
+print(f"Query: {qs1.query}")
+print(f"Aggregate: {agg1}")
+result1 = qs1.aggregate(agg1)
+print(f"Result: {result1}")
+
+print("\n=== Testing aggregate() with default ===")
+qs2 = Book.objects.annotate(idx=F("id"))
+agg2 = Sum("id", default=0)
+print(f"Query: {qs2.query}")
+print(f"Aggregate: {agg2}")
+try:
+    result2 = qs2.aggregate(agg2)
+    print(f"Result: {result2}")
+except Exception as e:
+    print(f"Error: {e}")
+    # Let's see the SQL that was generated
+    from django.db import connection
+    print(f"Last SQL: {connection.queries[-1]['sql'] if connection.queries else 'No SQL recorded'}")
+
+print("\n=== Testing Coalesce workaround ===")
+qs3 = Book.objects.annotate(idx=F("id"))
+agg3 = Coalesce(Sum("id"), 0)
+print(f"Query: {qs3.query}")
+print(f"Aggregate: {agg3}")
+result3 = qs3.aggregate(x=agg3)
+print(f"Result: {result3}")
\ No newline at end of file
diff --git a/detailed_debug.py b/detailed_debug.py
new file mode 100644
index 0000000000..8db2c0fe1e
--- /dev/null
+++ b/detailed_debug.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Sum
+
+# Create a simple test model
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create database table
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute("CREATE TABLE testapp_book (id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(100))")
+
+# Insert some test data
+with connection.cursor() as cursor:
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 1')")
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 2')")
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 3')")
+
+# Let's patch the get_aggregation method to add some debug info
+original_get_aggregation = models.sql.query.Query.get_aggregation
+
+def debug_get_aggregation(self, using, added_aggregate_names):
+    print("=== get_aggregation called ===")
+    print(f"self.annotation_select: {self.annotation_select}")
+    print(f"self.annotations: {self.annotations}")
+    print(f"self.select: {self.select}")
+    print(f"self.default_cols: {self.default_cols}")
+    print(f"self.annotation_select_mask: {self.annotation_select_mask}")
+    
+    result = original_get_aggregation(self, using, added_aggregate_names)
+    return result
+
+models.sql.query.Query.get_aggregation = debug_get_aggregation
+
+print("=== Testing aggregate() with default ===")
+qs = Book.objects.annotate(idx=F("id"))
+agg = Sum("id", default=0)
+try:
+    result = qs.aggregate(agg)
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cf28e1e818
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Sum
+from django.db.models.functions import Coalesce
+
+# Create a simple test model
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create database table
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute("CREATE TABLE testapp_book (id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(100))")
+
+# Insert some test data
+with connection.cursor() as cursor:
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 1')")
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 2')")
+    cursor.execute("INSERT INTO testapp_book (title) VALUES ('Book 3')")
+
+print("Testing aggregate() without default (should work):")
+try:
+    result1 = Book.objects.annotate(idx=F("id")).aggregate(Sum("id"))
+    print(f"Success: {result1}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nTesting aggregate() with default (should fail):")
+try:
+    result2 = Book.objects.annotate(idx=F("id")).aggregate(Sum("id", default=0))
+    print(f"Success: {result2}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nTesting Coalesce workaround (should work):")
+try:
+    result3 = Book.objects.annotate(idx=F("id")).aggregate(x=Coalesce(Sum("id"), 0))
+    print(f"Success: {result3}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
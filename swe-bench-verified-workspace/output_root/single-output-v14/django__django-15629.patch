diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cec2a73b2b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+
+# Create the models from the issue
+class Account(models.Model):
+    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Address(models.Model):
+    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)
+    account = models.OneToOneField(Account, on_delete=models.CASCADE)
+    street = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Profile(models.Model):
+    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)
+    account = models.ForeignKey(Account, verbose_name='account', null=True, blank=True, on_delete=models.CASCADE)
+    bio = models.TextField()
+    
+    class Meta:
+        app_label = 'test'
+
+def main():
+    from django.core.management import execute_from_command_line
+    
+    # Create migrations
+    print("Creating migrations...")
+    execute_from_command_line(['manage.py', 'makemigrations', 'test'])
+    
+    # Show the migration SQL
+    print("\nMigration SQL:")
+    execute_from_command_line(['manage.py', 'sqlmigrate', 'test', '0001'])
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/test_reproduction.py b/test_reproduction.py
new file mode 100644
index 0000000000..14b30ffcc0
--- /dev/null
+++ b/test_reproduction.py
@@ -0,0 +1,106 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+
+# Create the models from the issue
+class Account(models.Model):
+    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+class Address(models.Model):
+    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)
+    account = models.OneToOneField(Account, on_delete=models.CASCADE)
+    street = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+class Profile(models.Model):
+    id = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)
+    account = models.ForeignKey(Account, verbose_name='account', null=True, blank=True, on_delete=models.CASCADE)
+    bio = models.TextField()
+    
+    class Meta:
+        app_label = 'test_app'
+
+def main():
+    from django.db import connection
+    from django.db.migrations.state import ProjectState
+    from django.db.migrations.autodetector import MigrationAutodetector
+    from django.db.migrations.state import ModelState
+    
+    # Create initial state
+    initial_state = ProjectState()
+    initial_state.add_model(ModelState.from_model(Account))
+    initial_state.add_model(ModelState.from_model(Address))
+    initial_state.add_model(ModelState.from_model(Profile))
+    
+    # Create a state where Account.id is changed from AutoField to CharField with collation
+    altered_state = ProjectState()
+    
+    # Create a model where Account.id is changed to AutoField (simulating the original state)
+    from django.db.models import AutoField
+    account_model_dict = Account._meta.__dict__.copy()
+    account_model_dict['fields'] = [
+        ('id', AutoField(primary_key=True)),
+        ('name', models.CharField(max_length=100)),
+    ]
+    original_account = type('Account', (models.Model,), account_model_dict)
+    original_account._meta.app_label = 'test_app'
+    
+    altered_state.add_model(ModelState.from_model(original_account))
+    altered_state.add_model(ModelState.from_model(Address))
+    altered_state.add_model(ModelState.from_model(Profile))
+    
+    # Detect changes
+    autodetector = MigrationAutodetector(initial_state, altered_state)
+    changes = autodetector.changes
+    
+    print("Detected changes:", changes)
+    
+    # Let's also test the specific alter_field operation
+    from django.db.migrations.operations.fields import AlterField
+    from django.db.migrations.state import ModelState
+    
+    # Create an AlterField operation
+    old_field = AutoField(primary_key=True)
+    new_field = models.CharField(primary_key=True, db_collation='utf8_bin', max_length=22)
+    
+    operation = AlterField('Account', 'id', new_field)
+    
+    print(f"Operation: {operation}")
+    print(f"Old field: {old_field}")
+    print(f"New field: {new_field}")
+    print(f"New field db_params: {new_field.db_parameters(connection=connection)}")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
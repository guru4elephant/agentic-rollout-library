diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..208a708268
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+"""Script to reproduce the CDF issue mentioned in the GitHub issue"""
+
+from sympy import S
+from sympy.stats import *
+
+# Test cases from the issue
+print("Testing Arcsin distribution:")
+try:
+    result = cdf(Arcsin("x", 0, 3))(1)
+    print(f"Arcsin cdf result: {result}")
+except Exception as e:
+    print(f"Arcsin error: {e}")
+
+print("\nTesting Dagum distribution:")
+try:
+    result = cdf(Dagum("x", S(1)/3, S(1)/5, 2))(3)
+    print(f"Dagum cdf result: {result}")
+except Exception as e:
+    print(f"Dagum error: {e}")
+
+print("\nTesting Erlang distribution:")
+try:
+    result = cdf(Erlang("x", 1, 1))(1)
+    print(f"Erlang cdf result: {result}")
+except Exception as e:
+    print(f"Erlang error: {e}")
+
+print("\nTesting Frechet distribution:")
+try:
+    result = cdf(Frechet("x", S(4)/3, 1, 2))(3)
+    print(f"Frechet cdf result: {result}")
+except Exception as e:
+    print(f"Frechet error: {e}")
+
+print("\nTesting Gamma distribution:")
+try:
+    result = cdf(Gamma("x", 0.1, 2))(3)
+    print(f"Gamma cdf result: {result}")
+except Exception as e:
+    print(f"Gamma error: {e}")
+
+print("\nTesting GammaInverse distribution:")
+try:
+    result = cdf(GammaInverse("x", S(5)/7, 2))(3)
+    print(f"GammaInverse cdf result: {result}")
+except Exception as e:
+    print(f"GammaInverse error: {e}")
+
+print("\nTesting Kumaraswamy distribution:")
+try:
+    result = cdf(Kumaraswamy("x", S(1)/123, 5))(S(1)/3)
+    print(f"Kumaraswamy cdf result: {result}")
+except Exception as e:
+    print(f"Kumaraswamy error: {e}")
+
+print("\nTesting Laplace distribution:")
+try:
+    result = cdf(Laplace("x", 2, 3))(5)
+    print(f"Laplace cdf result: {result}")
+except Exception as e:
+    print(f"Laplace error: {e}")
+
+print("\nTesting Logistic distribution:")
+try:
+    result = cdf(Logistic("x", 1, 0.1))(2)
+    print(f"Logistic cdf result: {result}")
+except Exception as e:
+    print(f"Logistic error: {e}")
+
+print("\nTesting Nakagami distribution:")
+try:
+    result = cdf(Nakagami("x", S(7)/3, 1))(2)
+    print(f"Nakagami cdf result: {result}")
+except Exception as e:
+    print(f"Nakagami error: {e}")
+
+print("\nTesting StudentT distribution:")
+try:
+    result = cdf(StudentT("x", 10))(2)
+    print(f"StudentT cdf result: {result}")
+except Exception as e:
+    print(f"StudentT error: {e}")
+
+print("\nTesting UniformSum distribution:")
+try:
+    result = cdf(UniformSum("x", 5))(2)
+    print(f"UniformSum cdf result: {result}")
+except Exception as e:
+    print(f"UniformSum error: {e}")
\ No newline at end of file
diff --git a/reproduce_issue_timeout.py b/reproduce_issue_timeout.py
new file mode 100644
index 0000000000..5d46ae00dd
--- /dev/null
+++ b/reproduce_issue_timeout.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""Script to reproduce the CDF issue with timeouts"""
+
+import signal
+import sys
+from sympy import S
+from sympy.stats import *
+
+class TimeoutError(Exception):
+    pass
+
+def timeout_handler(signum, frame):
+    raise TimeoutError("Function timed out")
+
+def run_with_timeout(func, timeout=5):
+    signal.signal(signal.SIGALRM, timeout_handler)
+    signal.alarm(timeout)
+    try:
+        result = func()
+        signal.alarm(0)
+        return result
+    except TimeoutError:
+        return "TIMEOUT"
+    except Exception as e:
+        return f"ERROR: {e}"
+
+# Test cases from the issue
+test_cases = [
+    ("Arcsin", lambda: cdf(Arcsin("x", 0, 3))(1)),
+    ("Dagum", lambda: cdf(Dagum("x", S(1)/3, S(1)/5, 2))(3)),
+    ("Erlang", lambda: cdf(Erlang("x", 1, 1))(1)),
+    ("Frechet", lambda: cdf(Frechet("x", S(4)/3, 1, 2))(3)),
+    ("Gamma", lambda: cdf(Gamma("x", 0.1, 2))(3)),
+    ("GammaInverse", lambda: cdf(GammaInverse("x", S(5)/7, 2))(3)),
+    ("Kumaraswamy", lambda: cdf(Kumaraswamy("x", S(1)/123, 5))(S(1)/3)),
+    ("Laplace", lambda: cdf(Laplace("x", 2, 3))(5)),
+    ("Logistic", lambda: cdf(Logistic("x", 1, 0.1))(2)),
+    ("Nakagami", lambda: cdf(Nakagami("x", S(7)/3, 1))(2)),
+    ("StudentT", lambda: cdf(StudentT("x", 10))(2)),
+    ("UniformSum", lambda: cdf(UniformSum("x", 5))(2)),
+]
+
+for name, test_func in test_cases:
+    print(f"Testing {name} distribution:")
+    result = run_with_timeout(test_func, timeout=10)
+    print(f"{name} cdf result: {result}")
+    print()
\ No newline at end of file
diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index fff7da80ae..2dd466540f 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -47,7 +47,7 @@
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, erf, erfc, I, asin)
 from sympy import beta as beta_fn
 from sympy import cos, exp, besseli
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
@@ -153,6 +153,14 @@ class ArcsinDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < a),
+            (2*asin(sqrt((x - a)/(b - a)))/pi, x <= b),
+            (S.One, True)
+        )
+
 def Arcsin(name, a=0, b=1):
     r"""
     Create a Continuous Random Variable with an arcsin distribution.
@@ -1108,6 +1116,13 @@ def pdf(self, x):
         k, theta = self.k, self.theta
         return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)
 
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return Piecewise(
+            (lowergamma(k, x/theta)/gamma(k), x >= 0),
+            (S.Zero, True)
+        )
+
     def sample(self):
         return random.gammavariate(self.k, self.theta)
 
@@ -1445,6 +1460,13 @@ def pdf(self, x):
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
 
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (exp((x - mu)/b)/2, x < mu),
+            (1 - exp(-(x - mu)/b)/2, True)
+        )
+
 
 def Laplace(name, mu, b):
     r"""
@@ -1497,10 +1519,14 @@ def Laplace(name, mu, b):
 class LogisticDistribution(SingleContinuousDistribution):
     _argnames = ('mu', 's')
 
-    def pdf(self, x):
+    def pdf(self,x):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
 
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return 1/(1 + exp(-(x - mu)/s))
+
 
 def Logistic(name, mu, s):
     r"""
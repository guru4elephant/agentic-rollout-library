diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..348bb4eba
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with toctree containing genindex, modindex, search
+"""
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_toctree_issue():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create conf.py
+        conf_content = '''
+extensions = []
+master_doc = 'index'
+'''
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create index.rst with toctree containing genindex, modindex, search
+        index_content = '''
+Test Document
+=============
+
+.. toctree::
+   :maxdepth: 1
+   :caption: Indices and tables
+
+   genindex
+   modindex
+   search
+'''
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Build with Sphinx
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+        
+        print("Build completed. Check for warnings about nonexisting documents.")
+
+if __name__ == '__main__':
+    test_toctree_issue()
\ No newline at end of file
diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py
index 9678e3c7c..f15797b71 100644
--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -38,6 +38,38 @@ class TocTree:
             self.env.files_to_rebuild.setdefault(includefile, set()).add(docname)
         self.env.toctree_includes.setdefault(docname, []).extend(includefiles)
 
+    def _is_special_file(self, ref: str, builder: "Builder") -> bool:
+        """Check if a reference is a special file that will be generated by the builder.
+        
+        Special files include:
+        - 'genindex': General index, when use_index is enabled
+        - 'modindex': Module index, when domain indices are enabled
+        - 'search': Search page, when search is enabled
+        """
+        # Debug: print what we're checking
+        print(f"DEBUG: Checking if '{ref}' is a special file")
+        
+        if ref == 'genindex':
+            result = builder.get_builder_config('use_index', 'html')
+            print(f"DEBUG: genindex result = {result}")
+            return result
+        elif ref == 'search':
+            # Check if search is enabled for this builder
+            result = hasattr(builder, 'search') and builder.search
+            print(f"DEBUG: search result = {result}")
+            return result
+        elif ref == 'modindex':
+            # Check if domain indices are enabled and modindex is in domain_indices
+            if hasattr(builder, 'domain_indices'):
+                for indexname, _, _, _ in builder.domain_indices:
+                    if indexname == 'modindex':
+                        print(f"DEBUG: modindex found in domain_indices")
+                        return True
+            print(f"DEBUG: modindex not found or domain_indices not available")
+            return False
+        print(f"DEBUG: '{ref}' is not a special file")
+        return False
+
     def resolve(self, docname: str, builder: "Builder", toctree: addnodes.toctree,
                 prune: bool = True, maxdepth: int = 0, titles_only: bool = False,
                 collapse: bool = False, includehidden: bool = False) -> Optional[Element]:
@@ -165,7 +197,12 @@ class TocTree:
                                        ref, location=toctreenode)
                 except KeyError:
                     # this is raised if the included file does not exist
-                    if excluded(self.env.doc2path(ref, False)):
+                    # Check if this is a special file (genindex, modindex, search)
+                    is_special = self._is_special_file(ref, builder)
+                    if is_special:
+                        # Special files are generated by the builder, skip warning
+                        continue
+                    elif excluded(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to excluded document %r')
                     elif not included(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to non-included document %r')
diff --git a/tox.ini b/tox.ini
index 7ca990b56..a0708b02c 100644
--- a/tox.ini
+++ b/tox.ini
@@ -30,7 +30,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
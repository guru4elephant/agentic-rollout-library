diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f9b4bfb477..c0fcafeb5a 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -124,6 +124,10 @@ class Command(BaseCommand):
                             "self" if relations[column_name][1] == table_name
                             else table2model(relations[column_name][1])
                         )
+                        # Check if foreign key references a specific column other than primary key
+                        referenced_column = relations[column_name][0]
+                        if referenced_column != 'id':
+                            extra_params['to_field'] = "'%s'" % referenced_column
                         if rel_to in known_models:
                             field_type = '%s(%s' % (rel_type, rel_to)
                         else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f8ff481622
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import sqlite3
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.auth_tests.settings')
+
+import django
+from django.conf import settings
+from django.db import connections
+from django.core.management import call_command
+
+def setup_test_database():
+    """Set up a test database with the schema from the issue"""
+    
+    # Create a temporary database
+    db_path = tempfile.mktemp(suffix='.db')
+    conn = sqlite3.connect(db_path)
+    
+    # Create the tables as described in the issue
+    conn.execute("""
+    CREATE TABLE foo (
+        id INTEGER PRIMARY KEY AUTOINCREMENT,
+        other_id INTEGER UNIQUE
+    )
+    """)
+    
+    conn.execute("""
+    CREATE TABLE bar (
+        id INTEGER PRIMARY KEY AUTOINCREMENT,
+        other_id INTEGER,
+        CONSTRAINT myconst FOREIGN KEY(other_id) REFERENCES foo(other_id)
+    )
+    """)
+    
+    conn.close()
+    
+    # Configure Django to use this database
+    settings.DATABASES['default'] = {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': db_path,
+    }
+    
+    return db_path
+
+def test_inspectdb():
+    """Test inspectdb to see the issue"""
+    db_path = setup_test_database()
+    
+    try:
+        # Call inspectdb and capture output
+        from io import StringIO
+        output = StringIO()
+        
+        call_command('inspectdb', 'bar', stdout=output)
+        result = output.getvalue()
+        
+        print("Inspectdb output:")
+        print(result)
+        
+        # Check if the foreign key points to foo(other_id) or just foo
+        if 'ForeignKey(foo' in result and 'ForeignKey(foo.other_id' not in result:
+            print("\nISSUE CONFIRMED: ForeignKey points to foo instead of foo(other_id)")
+            return False
+        elif 'ForeignKey(foo.other_id' in result:
+            print("\nISSUE FIXED: ForeignKey correctly points to foo(other_id)")
+            return True
+        else:
+            print("\nUNEXPECTED: No ForeignKey found in output")
+            return False
+            
+    finally:
+        # Clean up
+        if os.path.exists(db_path):
+            os.unlink(db_path)
+
+if __name__ == '__main__':
+    django.setup()
+    success = test_inspectdb()
+    print(f"Test result: {'PASS' if success else 'FAIL'}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..816d3be350
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+# Test edge cases for the fix
+
+def test_edge_cases():
+    """Test various edge cases for the foreign key fix"""
+    
+    test_cases = [
+        {
+            'name': 'FK to non-id column',
+            'relations': {'other_id': ('other_id', 'foo')},
+            'row_name': 'other_id',
+            'expected_to_field': True
+        },
+        {
+            'name': 'FK to id column',
+            'relations': {'foo_id': ('id', 'foo')},
+            'row_name': 'foo_id', 
+            'expected_to_field': False
+        },
+        {
+            'name': 'FK to custom primary key',
+            'relations': {'custom_id': ('custom_pk', 'foo')},
+            'row_name': 'custom_id',
+            'expected_to_field': True
+        }
+    ]
+    
+    for test_case in test_cases:
+        print(f"\nTesting: {test_case['name']}")
+        
+        # Simulate the logic from inspectdb
+        extra_params = {}
+        referenced_column = test_case['relations'][test_case['row_name']][0]
+        
+        # Apply the fix logic
+        if referenced_column != 'id':
+            extra_params['to_field'] = "'%s'" % referenced_column
+        
+        has_to_field = 'to_field' in extra_params
+        print(f"Referenced column: {referenced_column}")
+        print(f"Has to_field: {has_to_field}")
+        print(f"Expected to_field: {test_case['expected_to_field']}")
+        
+        if has_to_field == test_case['expected_to_field']:
+            print("PASS")
+        else:
+            print("FAIL")
+            return False
+    
+    return True
+
+if __name__ == '__main__':
+    success = test_edge_cases()
+    print(f"\nOverall test result: {'PASS' if success else 'FAIL'}")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..48a0775d37
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+# Test the fix without full Django setup
+from django.core.management.commands.inspectdb import Command
+from django.db.backends.postgresql.introspection import DatabaseIntrospection
+
+def test_relations_processing():
+    """Test that relations are processed correctly with the fix"""
+    
+    # Mock the relations data that would come from get_relations
+    # Format: {field_name: (referenced_column_name, table_name)}
+    relations = {
+        'other_id': ('other_id', 'foo')  # This represents a FK from bar.other_id to foo.other_id
+    }
+    
+    # Mock row data
+    class MockRow:
+        def __init__(self, name):
+            self.name = name
+    
+    row = MockRow('other_id')
+    
+    # Test the logic from inspectdb
+    extra_params = {}
+    known_models = ['Foo']
+    table_name = 'bar'
+    
+    # Simulate the logic from inspectdb
+    rel_type = 'ForeignKey'
+    rel_to = 'Foo'  # table2model('foo') would return 'Foo'
+    
+    # Apply the fix logic
+    referenced_column = relations['other_id'][0]  # 'other_id'
+    if referenced_column != 'id':
+        extra_params['to_field'] = "'%s'" % referenced_column
+    
+    # Build the field type
+    field_type = '%s(%s' % (rel_type, rel_to)
+    
+    # Build the field description
+    field_desc = 'other_id = models.%s' % field_type
+    if extra_params:
+        field_desc += ', ' + ', '.join('%s=%s' % (k, v) for k, v in extra_params.items())
+    field_desc += ')'
+    
+    print("Generated field:", field_desc)
+    
+    # Check if the fix is working
+    if 'to_field' in extra_params:
+        print("SUCCESS: to_field parameter is included")
+        return True
+    else:
+        print("FAIL: to_field parameter is missing")
+        return False
+
+if __name__ == '__main__':
+    success = test_relations_processing()
+    print(f"Test result: {'PASS' if success else 'FAIL'}")
\ No newline at end of file
diff --git a/test_introspection.py b/test_introspection.py
new file mode 100644
index 0000000000..265625a417
--- /dev/null
+++ b/test_introspection.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.auth_tests.settings')
+
+import django
+from django.db import connections
+from django.db.backends.sqlite3.introspection import DatabaseIntrospection
+
+def test_sqlite_introspection():
+    """Test SQLite introspection directly"""
+    django.setup()
+    
+    # Create a simple in-memory SQLite database
+    connection = connections['default']
+    connection.settings_dict['NAME'] = ':memory:'
+    
+    with connection.cursor() as cursor:
+        # Create the tables as described in the issue
+        cursor.execute("""
+        CREATE TABLE foo (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            other_id INTEGER UNIQUE
+        )
+        """)
+        
+        cursor.execute("""
+        CREATE TABLE bar (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            other_id INTEGER,
+            CONSTRAINT myconst FOREIGN KEY(other_id) REFERENCES foo(other_id)
+        )
+        """)
+        
+        # Test introspection
+        introspection = DatabaseIntrospection(connection)
+        
+        # Get relations for bar table
+        relations = introspection.get_relations(cursor, 'bar')
+        print("Relations for bar table:", relations)
+        
+        # Get key columns for bar table
+        key_columns = introspection.get_key_columns(cursor, 'bar')
+        print("Key columns for bar table:", key_columns)
+        
+        # Get constraints for bar table
+        constraints = introspection.get_constraints(cursor, 'bar')
+        print("Constraints for bar table:", constraints)
+
+if __name__ == '__main__':
+    test_sqlite_introspection()
\ No newline at end of file
diff --git a/test_postgres_setup.py b/test_postgres_setup.py
new file mode 100644
index 0000000000..65178e4825
--- /dev/null
+++ b/test_postgres_setup.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import subprocess
+
+# Simple test to create a PostgreSQL database and test the inspectdb command
+def test_with_postgres():
+    """Test the fix with a real PostgreSQL database"""
+    
+    # This is a simplified test that assumes PostgreSQL is available
+    # In a real environment, you would set up a test database
+    
+    print("Testing inspectdb with PostgreSQL...")
+    
+    # Create a temporary SQL file with the test schema
+    sql_content = """
+CREATE TABLE foo ( 
+    id serial primary key, 
+    other_id int UNIQUE
+);
+
+CREATE TABLE bar (
+    id serial primary key,
+    other_id int,
+    constraint myconst FOREIGN KEY(other_id) references foo(other_id)
+);
+"""
+    
+    # Write to temporary file
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.sql', delete=False) as f:
+        f.write(sql_content)
+        sql_file = f.name
+    
+    try:
+        # Load the SQL into a test database (this would require PostgreSQL setup)
+        # For now, we'll just print the SQL and manually verify
+        print("Test SQL schema:")
+        print(sql_content)
+        
+        print("\nTo test manually:")
+        print(f"1. Create a PostgreSQL database")
+        print(f"2. Run the SQL from {sql_file}")
+        print(f"3. Run: python -m django inspectdb bar --database=your_test_db")
+        print(f"4. Check if the output includes: ForeignKey('Foo', to_field='other_id')")
+        
+        return True
+        
+    finally:
+        # Clean up
+        os.unlink(sql_file)
+
+if __name__ == '__main__':
+    test_with_postgres()
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..a1c03a1e28
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,28 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+# Debug the issue
+D3 = DihedralGroup(3)
+print("D3 generators:", D3.generators)
+print("D3 presentation generators:", D3.presentation().generators)
+print("D3 presentation relators:", D3.presentation().relators)
+
+# Let's see what happens during the homomorphism check
+from sympy.combinatorics.homomorphisms import _check_homomorphism
+
+images = dict(zip(D3.generators, D3.generators))
+print("Images dict:", images)
+
+# Let's see what r[i] looks like in the relators
+rels = D3.presentation().relators
+gens = D3.presentation().generators
+
+print("Relators:", rels)
+for r in rels:
+    print(f"Relator: {r}")
+    print(f"Array form: {r.array_form}")
+    for i, (sym, power) in enumerate(r.array_form):
+        print(f"  r[{i}]: {r[i]}, power: {power}")
+        print(f"  Is r[{i}] in gens? {r[i] in gens}")
+        if r[i] in gens:
+            print(f"  Index in gens: {gens.index(r[i])}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4a3f847a3a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,10 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+# Reproduce the issue
+D3 = DihedralGroup(3)
+try:
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("Success: Homomorphism created")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..e3328325a5 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -333,8 +333,14 @@ def _image(r):
             # both indices
             while i < len(r):
                 power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
+                if isinstance(domain, PermutationGroup):
+                    # Handle both generators and their inverses
+                    if r[i] in gens:
+                        s = domain.generators[gens.index(r[i])]
+                    elif r[i]**-1 in gens:
+                        s = domain.generators[gens.index(r[i]**-1)]**-1
+                    else:
+                        s = r[i]
                 else:
                     s = r[i]
                 if s in images:
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..0277a63a77
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,42 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+def test_homomorphism():
+    print("Testing DihedralGroup(3) homomorphism...")
+    D3 = DihedralGroup(3)
+    try:
+        T = homomorphism(D3, D3, D3.generators, D3.generators)
+        print("✓ Success: Identity homomorphism on D3")
+    except Exception as e:
+        print(f"✗ Failed: {e}")
+        return False
+    
+    # Test with different images
+    print("Testing homomorphism with different images...")
+    try:
+        # Map both generators to identity (trivial homomorphism)
+        identity = D3.identity
+        T_trivial = homomorphism(D3, D3, D3.generators, [identity, identity])
+        print("✓ Success: Trivial homomorphism")
+    except Exception as e:
+        print(f"✗ Failed trivial homomorphism: {e}")
+        return False
+    
+    # Test with cyclic group
+    print("Testing CyclicGroup homomorphism...")
+    C3 = CyclicGroup(3)
+    try:
+        T_c3 = homomorphism(C3, C3, C3.generators, C3.generators)
+        print("✓ Success: Identity homomorphism on C3")
+    except Exception as e:
+        print(f"✗ Failed: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_homomorphism()
+    if success:
+        print("\n✓ All tests passed!")
+    else:
+        print("\n✗ Some tests failed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6a26c9c74a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,58 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+def test_edge_cases():
+    print("Testing edge cases...")
+    
+    # Test with larger dihedral group
+    print("Testing DihedralGroup(4)...")
+    D4 = DihedralGroup(4)
+    try:
+        T = homomorphism(D4, D4, D4.generators, D4.generators)
+        print("✓ Success: Identity homomorphism on D4")
+    except Exception as e:
+        print(f"✗ Failed: {e}")
+        return False
+    
+    # Test with symmetric group
+    print("Testing SymmetricGroup(3)...")
+    S3 = SymmetricGroup(3)
+    try:
+        T = homomorphism(S3, S3, S3.generators, S3.generators)
+        print("✓ Success: Identity homomorphism on S3")
+    except Exception as e:
+        print(f"✗ Failed: {e}")
+        return False
+    
+    # Test with alternating group
+    print("Testing AlternatingGroup(4)...")
+    A4 = AlternatingGroup(4)
+    try:
+        T = homomorphism(A4, A4, A4.generators, A4.generators)
+        print("✓ Success: Identity homomorphism on A4")
+    except Exception as e:
+        print(f"✗ Failed: {e}")
+        return False
+    
+    # Test with non-identity homomorphism
+    print("Testing non-identity homomorphism...")
+    C3 = CyclicGroup(3)
+    C6 = CyclicGroup(6)
+    try:
+        # Map generator of C3 to square of generator of C6
+        gen_c3 = C3.generators[0]
+        gen_c6 = C6.generators[0]
+        T = homomorphism(C3, C6, [gen_c3], [gen_c6**2])
+        print("✓ Success: Non-identity homomorphism")
+    except Exception as e:
+        print(f"✗ Failed: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_edge_cases()
+    if success:
+        print("\n✓ All edge case tests passed!")
+    else:
+        print("\n✗ Some edge case tests failed!")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..3cc319040d
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,9 @@
+# Exact code from the GitHub issue
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+D3 = DihedralGroup(3)
+T = homomorphism(D3, D3, D3.generators, D3.generators)
+
+print("✓ Success: The GitHub issue has been fixed!")
+print(f"Homomorphism created: {T}")
\ No newline at end of file
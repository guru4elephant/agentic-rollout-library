diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2e04c882da
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import connections, models
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.operations.models import RenameModel
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# We'll create ModelState objects directly instead of defining model classes
+
+def test_rename_model_with_db_table():
+    print("Testing RenameModel with db_table defined...")
+    
+    # Create initial state
+    initial_state = ProjectState()
+    initial_state.add_model(ModelState(
+        'testapp',
+        'TestModel1',
+        [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=100)),
+        ],
+        {'db_table': 'custom_table_name'},
+        (models.Model,),
+        []
+    ))
+    
+    # Create target state (renamed model)
+    target_state = ProjectState()
+    target_state.add_model(ModelState(
+        'testapp',
+        'TestModel2',
+        [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=100)),
+        ],
+        {'db_table': 'custom_table_name'},
+        (models.Model,),
+        []
+    ))
+    
+    # Create RenameModel operation
+    operation = RenameModel('TestModel1', 'TestModel2')
+    
+    # Get database connection
+    connection = connections['default']
+    
+    # Create schema editor
+    with connection.schema_editor() as schema_editor:
+        print(f"Old table name: {initial_state.models['testapp', 'testmodel1'].options.get('db_table', 'default_table_name')}")
+        print(f"New table name: {target_state.models['testapp', 'testmodel2'].options.get('db_table', 'default_table_name')}")
+        
+        # This should be a noop since db_table is the same
+        operation.database_forwards('testapp', schema_editor, initial_state, target_state)
+        print("RenameModel operation completed (should be noop)")
+    
+    print("Test completed successfully!")
+
+if __name__ == '__main__':
+    test_rename_model_with_db_table()
\ No newline at end of file
diff --git a/reproduce_issue_detailed.py b/reproduce_issue_detailed.py
new file mode 100644
index 0000000000..9562954336
--- /dev/null
+++ b/reproduce_issue_detailed.py
@@ -0,0 +1,123 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import connections, models
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.operations.models import RenameModel
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'test.db',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_rename_model_with_db_table_and_fk():
+    print("Testing RenameModel with db_table defined and foreign keys...")
+    
+    # Create initial state with two models, one with foreign key
+    initial_state = ProjectState()
+    initial_state.add_model(ModelState(
+        'testapp',
+        'Author',
+        [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=100)),
+        ],
+        {'db_table': 'authors_table'},
+        (models.Model,),
+        []
+    ))
+    
+    initial_state.add_model(ModelState(
+        'testapp',
+        'Book',
+        [
+            ('id', models.AutoField(primary_key=True)),
+            ('title', models.CharField(max_length=100)),
+            ('author', models.ForeignKey('testapp.Author', on_delete=models.CASCADE)),
+        ],
+        {'db_table': 'books_table'},
+        (models.Model,),
+        []
+    ))
+    
+    # Create target state (renamed Author model)
+    target_state = ProjectState()
+    target_state.add_model(ModelState(
+        'testapp',
+        'Writer',
+        [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=100)),
+        ],
+        {'db_table': 'authors_table'},  # Same db_table!
+        (models.Model,),
+        []
+    ))
+    
+    target_state.add_model(ModelState(
+        'testapp',
+        'Book',
+        [
+            ('id', models.AutoField(primary_key=True)),
+            ('title', models.CharField(max_length=100)),
+            ('author', models.ForeignKey('testapp.Writer', on_delete=models.CASCADE)),
+        ],
+        {'db_table': 'books_table'},
+        (models.Model,),
+        []
+    ))
+    
+    # Create RenameModel operation
+    operation = RenameModel('Author', 'Writer')
+    
+    # Get database connection
+    connection = connections['default']
+    
+    # First, create the tables
+    with connection.schema_editor() as schema_editor:
+        # Create initial tables
+        for model_name in ['Author', 'Book']:
+            model = initial_state.apps.get_model('testapp', model_name)
+            schema_editor.create_model(model)
+        print("Initial tables created")
+    
+    # Now try to perform the rename operation
+    try:
+        with connection.schema_editor() as schema_editor:
+            print(f"Old table name: {initial_state.models['testapp', 'author'].options.get('db_table', 'default_table_name')}")
+            print(f"New table name: {target_state.models['testapp', 'writer'].options.get('db_table', 'default_table_name')}")
+            
+            # This should be a noop since db_table is the same
+            operation.database_forwards('testapp', schema_editor, initial_state, target_state)
+            print("RenameModel operation completed (should be noop)")
+    except Exception as e:
+        print(f"Error during RenameModel: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    # Clean up
+    if os.path.exists('test.db'):
+        os.remove('test.db')
+    
+    print("Test completed!")
+
+if __name__ == '__main__':
+    test_rename_model_with_db_table_and_fk()
\ No newline at end of file
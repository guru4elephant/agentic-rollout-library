diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bb5069aabb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, Rational, expand_func, nsimplify, pi, log
+from sympy.printing import pprint
+
+# Test case 1: polylog(2, 1/2) should evaluate to -log(2)**2/2 + pi**2/12
+print("Test case 1: polylog(2, Rational(1,2))")
+result1 = polylog(2, Rational(1,2))
+print("polylog(2, 1/2) =")
+pprint(result1)
+
+print("\nAfter expand_func:")
+result1_expanded = expand_func(result1)
+pprint(result1_expanded)
+
+print("\nExpected: -log(2)**2/2 + pi**2/12")
+expected1 = -log(2)**2/2 + pi**2/12
+print("Expected result:")
+pprint(expected1)
+
+# Test case 2: polylog(1, z) should not have exp_polar in expansion
+print("\n" + "="*50)
+print("Test case 2: polylog(1, z) expansion")
+from sympy.abc import z
+result2 = polylog(1, z)
+print("polylog(1, z) =")
+pprint(result2)
+
+print("\nAfter expand_func:")
+result2_expanded = expand_func(result2)
+pprint(result2_expanded)
+
+print("\nExpected: -log(1 - z)")
+expected2 = -log(1 - z)
+print("Expected result:")
+pprint(expected2)
+
+# Test derivative consistency
+print("\n" + "="*50)
+print("Test derivative consistency:")
+diff1 = expand_func(result2).diff(z)
+diff2 = expected2.diff(z)
+print("Derivative of expand_func(polylog(1, z)):")
+pprint(diff1)
+print("Derivative of -log(1 - z):")
+pprint(diff2)
+print("Difference:", diff1 - diff2)
\ No newline at end of file
diff --git a/sympy/functions/special/tests/test_zeta_functions.py b/sympy/functions/special/tests/test_zeta_functions.py
index 3911dadd10..d646af0c1d 100644
--- a/sympy/functions/special/tests/test_zeta_functions.py
+++ b/sympy/functions/special/tests/test_zeta_functions.py
@@ -128,10 +128,16 @@ def test_polylog_expansion():
     assert polylog(s, 1) == zeta(s)
     assert polylog(s, -1) == -dirichlet_eta(s)
 
-    assert myexpand(polylog(1, z), -log(1 + exp_polar(-I*pi)*z))
+    assert myexpand(polylog(1, z), -log(1 - z))
     assert myexpand(polylog(0, z), z/(1 - z))
     assert myexpand(polylog(-1, z), z**2/(1 - z)**2 + z/(1 - z))
     assert myexpand(polylog(-5, z), None)
+    
+    # Test specific values for polylog(2, z)
+    from sympy import S
+    assert expand_func(polylog(2, S.Half)) == -log(2)**2/2 + pi**2/12
+    assert expand_func(polylog(2, -1)) == -pi**2/12
+    assert expand_func(polylog(2, 1)) == pi**2/6
 
 
 def test_lerchphi_expansion():
diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py
index b8e2b66195..773a2565f1 100644
--- a/sympy/functions/special/zeta_functions.py
+++ b/sympy/functions/special/zeta_functions.py
@@ -288,10 +288,17 @@ def _eval_rewrite_as_lerchphi(self, s, z):
         return z*lerchphi(z, s, 1)
 
     def _eval_expand_func(self, **hints):
-        from sympy import log, expand_mul, Dummy, exp_polar, I
+        from sympy import log, expand_mul, Dummy, exp_polar, I, pi
         s, z = self.args
         if s == 1:
-            return -log(1 + exp_polar(-I*pi)*z)
+            return -log(1 - z)
+        if s == 2:
+            if z == S.Half:
+                return pi**2/12 - log(2)**2/2
+            elif z == -1:
+                return -pi**2/12
+            elif z == 1:
+                return pi**2/6
         if s.is_Integer and s <= 0:
             u = Dummy('u')
             start = u/(1 - u)
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..90f2ad2926
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+from sympy import polylog, expand_func, Rational, S, pi, log
+
+# Test edge cases for polylog expansion
+print("Testing edge cases for polylog expansion:")
+
+# Test that non-special cases still return polylog
+print("\n1. Testing non-special cases:")
+result1 = expand_func(polylog(2, Rational(1,3)))
+print(f"polylog(2, 1/3) = {result1}")
+assert result1 == polylog(2, Rational(1,3)), "Should return unchanged for non-special values"
+
+result2 = expand_func(polylog(3, S.Half))
+print(f"polylog(3, 1/2) = {result2}")
+assert result2 == polylog(3, S.Half), "Should return unchanged for s != 2"
+
+# Test that s=1 works with different z values
+print("\n2. Testing polylog(1, z) expansion:")
+from sympy.abc import z
+result3 = expand_func(polylog(1, z))
+print(f"polylog(1, z) = {result3}")
+assert result3 == -log(1 - z), "Should expand to -log(1 - z)"
+
+result4 = expand_func(polylog(1, Rational(1,2)))
+print(f"polylog(1, 1/2) = {result4}")
+assert result4 == -log(S.Half), "Should expand to -log(1/2)"
+
+# Test that s=2 special cases work
+print("\n3. Testing polylog(2, z) special cases:")
+result5 = expand_func(polylog(2, S.Half))
+print(f"polylog(2, 1/2) = {result5}")
+expected5 = -log(2)**2/2 + pi**2/12
+assert result5 == expected5, f"Should expand to {expected5}"
+
+result6 = expand_func(polylog(2, -1))
+print(f"polylog(2, -1) = {result6}")
+expected6 = -pi**2/12
+assert result6 == expected6, f"Should expand to {expected6}"
+
+result7 = expand_func(polylog(2, 1))
+print(f"polylog(2, 1) = {result7}")
+expected7 = pi**2/6
+assert result7 == expected7, f"Should expand to {expected7}"
+
+print("\nAll edge case tests passed!")
\ No newline at end of file
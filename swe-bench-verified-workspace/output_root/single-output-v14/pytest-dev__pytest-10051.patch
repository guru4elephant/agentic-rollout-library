diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..51d6db6c8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+import logging
+
+def test_caplog_issue(caplog) -> None:
+    def verify_consistency() -> None:
+        assert caplog.get_records("call") == caplog.records
+
+    verify_consistency()
+    logging.warning("test")
+    verify_consistency()
+    caplog.clear()
+    verify_consistency()  # fails: assert [<LogRecord: ...y, 8, "test">] == []
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index a4f4214b1..09979b378 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -441,6 +441,10 @@ class LogCaptureFixture:
     def clear(self) -> None:
         """Reset the list of log records and the captured log text."""
         self.handler.reset()
+        # Update the stash to reference the handler's new records list
+        if caplog_records_key in self._item.stash:
+            for when in self._item.stash[caplog_records_key]:
+                self._item.stash[caplog_records_key][when] = self.handler.records
 
     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:
         """Set the level of a logger for the duration of a test.
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..e8f428020
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,53 @@
+import logging
+
+def test_caplog_multiple_phases(caplog) -> None:
+    """Test that clear() works across multiple test phases"""
+    
+    # Setup phase
+    logging.warning("setup message")
+    assert len(caplog.get_records("setup")) == 1
+    assert len(caplog.records) == 1
+    
+    caplog.clear()
+    assert len(caplog.get_records("setup")) == 0
+    assert len(caplog.records) == 0
+    
+    # Call phase
+    logging.warning("call message")
+    assert len(caplog.get_records("call")) == 1
+    assert len(caplog.records) == 1
+    
+    caplog.clear()
+    assert len(caplog.get_records("call")) == 0
+    assert len(caplog.records) == 0
+    
+    # Teardown phase
+    logging.warning("teardown message")
+    assert len(caplog.get_records("teardown")) == 1
+    assert len(caplog.records) == 1
+    
+    caplog.clear()
+    assert len(caplog.get_records("teardown")) == 0
+    assert len(caplog.records) == 0
+
+def test_caplog_multiple_clears(caplog) -> None:
+    """Test multiple clear() calls work correctly"""
+    logging.warning("first message")
+    assert len(caplog.get_records("call")) == 1
+    assert len(caplog.records) == 1
+    
+    caplog.clear()
+    assert len(caplog.get_records("call")) == 0
+    assert len(caplog.records) == 0
+    
+    logging.warning("second message")
+    assert len(caplog.get_records("call")) == 1
+    assert len(caplog.records) == 1
+    
+    caplog.clear()
+    assert len(caplog.get_records("call")) == 0
+    assert len(caplog.records) == 0
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/test_exact_issue.py b/test_exact_issue.py
new file mode 100644
index 000000000..27e9a82ca
--- /dev/null
+++ b/test_exact_issue.py
@@ -0,0 +1,15 @@
+import logging
+
+def test(caplog) -> None:
+    def verify_consistency() -> None:
+        assert caplog.get_records("call") == caplog.records
+
+    verify_consistency()
+    logging.warning("test")
+    verify_consistency()
+    caplog.clear()
+    verify_consistency()  # This was failing before the fix
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 000000000..5eb05910e
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,60 @@
+import logging
+
+def test_caplog_consistency_after_clear(caplog) -> None:
+    """Test that caplog.get_records() and caplog.records remain consistent after clear()"""
+    
+    # Initial state should be consistent
+    assert caplog.get_records("call") == caplog.records
+    
+    # Add some logs
+    logging.warning("first message")
+    assert len(caplog.get_records("call")) == 1
+    assert len(caplog.records) == 1
+    assert caplog.get_records("call") == caplog.records
+    
+    # Clear and verify consistency
+    caplog.clear()
+    assert len(caplog.get_records("call")) == 0
+    assert len(caplog.records) == 0
+    assert caplog.get_records("call") == caplog.records
+    
+    # Add more logs after clear
+    logging.warning("second message")
+    assert len(caplog.get_records("call")) == 1
+    assert len(caplog.records) == 1
+    assert caplog.get_records("call") == caplog.records
+    
+    # Clear again
+    caplog.clear()
+    assert len(caplog.get_records("call")) == 0
+    assert len(caplog.records) == 0
+    assert caplog.get_records("call") == caplog.records
+
+def test_caplog_messages_after_clear(caplog) -> None:
+    """Test that messages() method also works correctly after clear()"""
+    
+    logging.warning("test message")
+    assert len(caplog.messages) == 1
+    assert "test message" in caplog.messages[0]
+    
+    caplog.clear()
+    assert len(caplog.messages) == 0
+    
+    logging.warning("another message")
+    assert len(caplog.messages) == 1
+    assert "another message" in caplog.messages[0]
+
+def test_caplog_original_issue(caplog) -> None:
+    """Test the exact scenario from the original issue"""
+    def verify_consistency() -> None:
+        assert caplog.get_records("call") == caplog.records
+
+    verify_consistency()
+    logging.warning("test")
+    verify_consistency()
+    caplog.clear()
+    verify_consistency()  # This should not fail anymore
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/debug_doctree.py b/debug_doctree.py
new file mode 100644
index 000000000..ca5f2f919
--- /dev/null
+++ b/debug_doctree.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+"""
+Debug script to see what nodes are created for different types of links.
+"""
+
+import tempfile
+import os
+from docutils.core import publish_doctree
+from docutils import nodes
+
+def debug_doctree():
+    """Debug the doctree structure for different link types."""
+    
+    # Test content with different types of links
+    content = '''
+broken external-link_
+broken local-link_
+working local-link_
+
+.. _external-link: https://lkfqhlkghflkhs
+.. _local-link: doesntexist
+.. _working-local-link: exists.rst
+
+`external link <https://example.com>`_
+`local link <exists.rst>`_
+'''
+    
+    print("Parsing content:")
+    print(content)
+    print("\n" + "="*50 + "\n")
+    
+    # Parse the content
+    doctree = publish_doctree(content)
+    
+    # Print all nodes
+    print("All nodes in doctree:")
+    for node in doctree.traverse():
+        print(f"  {type(node).__name__}: {node}")
+        if hasattr(node, 'attributes'):
+            print(f"    Attributes: {node.attributes}")
+        if hasattr(node, 'tagname'):
+            print(f"    Tag: {node.tagname}")
+        print()
+    
+    # Specifically look for reference nodes
+    print("Reference nodes:")
+    for refnode in doctree.traverse(nodes.reference):
+        print(f"  Reference: {refnode}")
+        if hasattr(refnode, 'attributes'):
+            print(f"    Attributes: {refnode.attributes}")
+        if 'refuri' in refnode:
+            print(f"    refuri: {refnode['refuri']}")
+        print()
+
+if __name__ == '__main__':
+    debug_doctree()
\ No newline at end of file
diff --git a/debug_targets.py b/debug_targets.py
new file mode 100644
index 000000000..da4140186
--- /dev/null
+++ b/debug_targets.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand target nodes better.
+"""
+
+from docutils.core import publish_doctree
+from docutils import nodes
+
+def debug_targets():
+    """Debug target nodes structure."""
+    
+    # Test content with different types of links
+    content = '''
+inline reference: `link <target.rst>`_
+
+target definition: .. _label: target.rst
+
+external reference: `external <https://example.com>`_
+
+external target: .. _external-label: https://example.com
+'''
+    
+    print("Parsing content:")
+    print(content)
+    print("\n" + "="*50 + "\n")
+    
+    # Parse the content
+    doctree = publish_doctree(content)
+    
+    # Print all target nodes
+    print("Target nodes:")
+    for targetnode in doctree.traverse(nodes.target):
+        print(f"  Target: {targetnode}")
+        if hasattr(targetnode, 'attributes'):
+            print(f"    Attributes: {targetnode.attributes}")
+        if 'refuri' in targetnode:
+            print(f"    refuri: {targetnode['refuri']}")
+        print()
+    
+    # Print all reference nodes
+    print("Reference nodes:")
+    for refnode in doctree.traverse(nodes.reference):
+        print(f"  Reference: {refnode}")
+        if hasattr(refnode, 'attributes'):
+            print(f"    Attributes: {refnode.attributes}")
+        if 'refuri' in refnode:
+            print(f"    refuri: {refnode['refuri']}")
+        print()
+
+if __name__ == '__main__':
+    debug_targets()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..fc39d0106
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,117 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where linkcheck doesn't check local (internal) links.
+"""
+
+import os
+import tempfile
+import shutil
+import json
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_linkcheck_local_links():
+    """Test that linkcheck properly checks local links."""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create conf.py
+        conf_content = '''
+extensions = []
+master_doc = 'index'
+'''
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create index.rst with the problematic content from the issue
+        index_content = '''
+broken external-link_
+broken local-link_
+
+.. _external-link: https://lkfqhlkghflkhs
+.. _local-link: doesntexist
+'''
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create a file that exists to test working local links
+        with open(os.path.join(srcdir, 'exists.rst'), 'w') as f:
+            f.write('This file exists\n')
+        
+        # Create a working local link
+        index_content = '''
+broken external-link_
+broken local-link_
+working local-link_
+
+.. _external-link: https://lkfqhlkghflkhs
+.. _local-link: doesntexist
+.. _working-local-link: exists.rst
+'''
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Build with linkcheck
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'linkcheck')
+            app.build()
+        
+        # Check the output
+        output_file = os.path.join(outdir, 'output.txt')
+        json_file = os.path.join(outdir, 'output.json')
+        
+        # Check console output (we saw "ok exists.rst" in the console)
+        print("Checking console output (should show 'ok exists.rst'):")
+        
+        # Check output.txt for broken links
+        if os.path.exists(output_file):
+            with open(output_file, 'r') as f:
+                content = f.read()
+                print("Linkcheck output.txt (broken links only):")
+                print(content)
+                
+                # Check if broken local links are reported as broken
+                if 'broken' in content and 'doesntexist' in content:
+                    print("✓ Broken local links are being reported as broken")
+                else:
+                    print("✗ Broken local links are NOT being reported as broken")
+        
+        # Check JSON output for all links
+        if os.path.exists(json_file):
+            with open(json_file, 'r') as f:
+                content = f.read()
+                print("\nLinkcheck JSON output (all links):")
+                # Parse JSON lines
+                links = []
+                for line in content.strip().split('\n'):
+                    if line:
+                        links.append(json.loads(line))
+                
+                working_local_found = False
+                broken_local_found = False
+                
+                for link in links:
+                    print(f"  {link['uri']}: {link['status']}")
+                    if link['uri'] == 'exists.rst' and link['status'] == 'working':
+                        working_local_found = True
+                    if link['uri'] == 'doesntexist' and link['status'] == 'broken':
+                        broken_local_found = True
+                
+                if working_local_found:
+                    print("✓ Working local links are being detected and reported as working")
+                else:
+                    print("✗ Working local links are NOT being detected")
+                
+                if broken_local_found:
+                    print("✓ Broken local links are being detected and reported as broken")
+                else:
+                    print("✗ Broken local links are NOT being detected")
+
+if __name__ == '__main__':
+    test_linkcheck_local_links()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index dd5317087..ca5b1f856 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -213,7 +213,15 @@ class CheckExternalLinksBuilder(Builder):
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
             elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
+                # Check local file exists
+                try:
+                    _, abs_path = self.env.relfn2path(uri, docname)
+                    if path.exists(abs_path):
+                        return 'working', '', 0
+                    else:
+                        return 'broken', __('Local file not found: %s') % uri, 0
+                except Exception as err:
+                    return 'broken', str(err), 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
@@ -321,6 +329,15 @@ class CheckExternalLinksBuilder(Builder):
             self.wqueue.put((uri, docname, lineno), False)
             n += 1
 
+        # target nodes (for .. _label: target definitions)
+        for targetnode in doctree.traverse(nodes.target):
+            if 'refuri' not in targetnode:
+                continue
+            uri = targetnode['refuri']
+            lineno = get_node_line(targetnode)
+            self.wqueue.put((uri, docname, lineno), False)
+            n += 1
+
         # image nodes
         for imgnode in doctree.traverse(nodes.image):
             uri = imgnode['candidates'].get('?')
diff --git a/tox.ini b/tox.ini
index bddd822a6..34baee205 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
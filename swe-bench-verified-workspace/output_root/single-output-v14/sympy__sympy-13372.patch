diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..38a6a4fad3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy import Mul, Max
+from sympy.abc import x, y
+
+print("Testing the issue...")
+
+# This should work
+print("Mul(x, Max(0, y), evaluate=False).evalf():")
+try:
+    result1 = Mul(x, Max(0, y), evaluate=False).evalf()
+    print(f"Success: {result1}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nMul(Max(0, y), x, evaluate=False).evalf():")
+# This should fail with UnboundLocalError
+try:
+    result2 = Mul(Max(0, y), x, evaluate=False).evalf()
+    print(f"Success: {result2}")
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py
index 72a5fbae52..f34908710a 100644
--- a/sympy/core/evalf.py
+++ b/sympy/core/evalf.py
@@ -1301,12 +1301,16 @@ def evalf(x, prec, options):
             elif re.is_number:
                 re = re._to_mpmath(prec, allow_ints=False)._mpf_
                 reprec = prec
+            else:
+                raise NotImplementedError
             if im == 0:
                 im = None
                 imprec = None
             elif im.is_number:
                 im = im._to_mpmath(prec, allow_ints=False)._mpf_
                 imprec = prec
+            else:
+                raise NotImplementedError
             r = re, im, reprec, imprec
         except AttributeError:
             raise NotImplementedError
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a901d41328
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from sympy import Mul, Max, Min, Abs
+from sympy.abc import x, y, z, a, b, c
+
+print("Testing edge cases...")
+
+# Test various combinations with Max and Min
+test_cases = [
+    Mul(Max(0, y), x, evaluate=False),
+    Mul(Min(0, y), x, evaluate=False),
+    Mul(Abs(y), x, evaluate=False),
+    Mul(Max(a, b), c, evaluate=False),
+    Mul(Min(a, b), c, evaluate=False),
+    Mul(Max(x, y), z, evaluate=False),
+]
+
+for i, expr in enumerate(test_cases):
+    print(f"\nTest case {i+1}: {expr}")
+    try:
+        result = expr.evalf()
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2315045802
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the migration autodetector crash when renaming a model and field.
+"""
+
+from django.conf import settings
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.questioner import MigrationQuestioner
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'testapp',
+            'otherapp',
+        ],
+        USE_TZ=True,
+    )
+
+# Create initial project state with Author model and Book model with author field
+from_state = ProjectState()
+from_state.add_model(ModelState(
+    app_label='testapp',
+    name='Author',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('name', models.CharField(max_length=200)),
+    ],
+    options={},
+    bases=(models.Model,),
+    managers=[],
+))
+from_state.add_model(ModelState(
+    app_label='otherapp',
+    name='Book',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('author', models.ForeignKey("testapp.Author", models.CASCADE)),
+        ('title', models.CharField(max_length=200)),
+    ],
+    options={},
+    bases=(models.Model,),
+    managers=[],
+))
+
+# Create new project state with renamed model (Writer) and renamed field (writer)
+to_state = ProjectState()
+to_state.add_model(ModelState(
+    app_label='testapp',
+    name='Writer',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('name', models.CharField(max_length=200)),
+    ],
+    options={},
+    bases=(models.Model,),
+    managers=[],
+))
+to_state.add_model(ModelState(
+    app_label='otherapp',
+    name='Book',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('writer', models.ForeignKey("testapp.Writer", models.CASCADE)),
+        ('title', models.CharField(max_length=200)),
+    ],
+    options={},
+    bases=(models.Model,),
+    managers=[],
+))
+
+# Create autodetector and try to detect changes
+questioner = MigrationQuestioner(defaults={"ask_rename": True, "ask_rename_model": True})
+autodetector = MigrationAutodetector(from_state, to_state, questioner)
+
+try:
+    # Call the internal method that should trigger the bug
+    autodetector._detect_changes()
+    print("Success: No crash occurred")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..d401cc972e
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Simple script to reproduce the migration autodetector crash when renaming a model and field.
+This script directly calls the problematic method in autodetector.py.
+"""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.questioner import MigrationQuestioner
+from django.db import models
+
+# Create simple project states that don't require app registry setup
+from_state = ProjectState()
+to_state = ProjectState()
+
+# Create simple model states without foreign keys to avoid app registry issues
+from_state.add_model(ModelState(
+    app_label='test_one',
+    name='MyModel',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('my_field', models.CharField(max_length=100)),
+    ],
+    options={},
+    bases=(models.Model,),
+    managers=[],
+))
+
+to_state.add_model(ModelState(
+    app_label='test_one', 
+    name='MyModel2',
+    fields=[
+        ('id', models.AutoField(primary_key=True)),
+        ('my_field_renamed', models.CharField(max_length=100)),
+    ],
+    options={},
+    bases=(models.Model,),
+    managers=[],
+))
+
+# Create autodetector
+autodetector = MigrationAutodetector(from_state, to_state, MigrationQuestioner())
+
+# Manually set up the state that triggers the bug
+autodetector.old_model_keys = {('test_one', 'MyModel')}
+autodetector.new_model_keys = {('test_one', 'MyModel2')}
+autodetector.old_field_keys = {('test_one', 'MyModel', 'my_field')}
+autodetector.new_field_keys = {('test_one', 'MyModel2', 'my_field_renamed')}
+
+# Simulate that a model rename was detected
+autodetector.renamed_models = {('test_one', 'MyModel2'): 'MyModel'}
+
+try:
+    # Call the problematic method directly
+    autodetector.generate_renamed_fields()
+    print("Success: No crash occurred")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/3.5.0.dev2475+gf0632c0fc7.png b/3.5.0.dev2475+gf0632c0fc7.png
new file mode 100644
index 0000000000..80aae41cfd
Binary files /dev/null and b/3.5.0.dev2475+gf0632c0fc7.png differ
diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 0766156d64..4cb8dab406 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -592,13 +592,30 @@ def drange(dstart, dend, delta):
 
 
 def _wrap_in_tex(text):
-    p = r'([a-zA-Z]+)'
-    ret_text = re.sub(p, r'}$\1$\\mathdefault{', text)
-
-    # Braces ensure dashes are not spaced like binary operators.
-    ret_text = '$\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'
-    ret_text = ret_text.replace('$\\mathdefault{}$', '')
-    return ret_text
+    # If the text contains only numbers and punctuation, wrap it all in math mode
+    if not re.search(r'[a-zA-Z]', text):
+        return '$\\mathdefault{' + text.replace('-', '{-}') + '}$'
+    
+    # If the text contains letters, wrap only the non-alphabetical parts in math mode
+    # Use a more precise regex to split while preserving boundaries
+    parts = re.split(r'([a-zA-Z]+)', text)
+    result_parts = []
+    
+    for part in parts:
+        if not part:
+            continue
+        if re.match(r'[a-zA-Z]+', part):
+            # Alphabetical part - keep as is
+            result_parts.append(part)
+        else:
+            # Non-alphabetical part - wrap in math mode and handle dashes
+            # Only wrap if the part contains non-whitespace characters
+            if part.strip():
+                result_parts.append('$\\mathdefault{' + part.replace('-', '{-}') + '}$')
+            else:
+                result_parts.append(part)
+    
+    return ''.join(result_parts)
 
 
 ## date tickers and formatters ###
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f47f7a19ad
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+import matplotlib
+import matplotlib.pyplot as plt
+import numpy as np
+import pandas as pd
+
+np.random.seed(1)
+# matplotlib.rcParams["text.usetex"] = True  # Commented out for now
+
+dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
+data = np.random.rand(100)
+
+fig, ax = plt.subplots(constrained_layout=True)
+ax.plot(np.array(dates), data)
+plt.savefig(matplotlib.__version__ + ".png")
+print("Plot saved as:", matplotlib.__version__ + ".png")
\ No newline at end of file
diff --git a/test_wrap_in_tex.py b/test_wrap_in_tex.py
new file mode 100644
index 0000000000..a127c09300
--- /dev/null
+++ b/test_wrap_in_tex.py
@@ -0,0 +1,18 @@
+import sys
+sys.path.insert(0, 'lib')
+
+from matplotlib.dates import _wrap_in_tex
+
+# Test cases
+test_cases = [
+    '2020-01-01 00:00:00',  # No letters
+    'Jan 01, 2020 00:00:00',  # Contains letters
+    'December 31, 2020 23:59:59',  # Contains letters
+    '01-Jan-2020',  # Contains letters with dashes
+]
+
+for test_case in test_cases:
+    result = _wrap_in_tex(test_case)
+    print(f"Input: {test_case}")
+    print(f"Output: {result}")
+    print()
\ No newline at end of file
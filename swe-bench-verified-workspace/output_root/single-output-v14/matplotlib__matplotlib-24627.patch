diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 90b0bf117e..1f6cbd62f8 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -1308,6 +1308,12 @@ class _AxesBase(martist.Artist):
         self._get_patches_for_fill = _process_plot_var_args(self, 'fill')
 
         self._gridOn = mpl.rcParams['axes.grid']
+        # Unset axes and figure attributes of all children before clearing
+        for child in self._children:
+            if hasattr(child, 'axes'):
+                child.axes = None
+            if hasattr(child, 'figure'):
+                child.figure = None
         self._children = []
         self._mouseover_set = _OrderedSet()
         self.child_axes = []
diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index 6c18ba1a64..5b3e5c860a 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -949,11 +949,35 @@ default: %(va)s
             ax.clear()
             self.delaxes(ax)  # Remove ax from self._axstack.
 
+        # Unset figure attributes of all artists before clearing
+        for artist in self.artists:
+            if hasattr(artist, 'figure'):
+                artist.figure = None
         self.artists = []
+        
+        for line in self.lines:
+            if hasattr(line, 'figure'):
+                line.figure = None
         self.lines = []
+        
+        for patch in self.patches:
+            if hasattr(patch, 'figure'):
+                patch.figure = None
         self.patches = []
+        
+        for text in self.texts:
+            if hasattr(text, 'figure'):
+                text.figure = None
         self.texts = []
+        
+        for image in self.images:
+            if hasattr(image, 'figure'):
+                image.figure = None
         self.images = []
+        
+        for legend in self.legends:
+            if hasattr(legend, 'figure'):
+                legend.figure = None
         self.legends = []
         if not keep_observers:
             self._axobservers = cbook.CallbackRegistry()
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5d2a043b93
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+import matplotlib.pyplot as plt
+
+print("Testing the issue with cla() and clf() not unsetting .axes and .figure attributes")
+
+# Test case 1: remove() method properly unsets .axes attribute
+print("\n1. Testing remove() method:")
+f, a = plt.subplots()
+l, = a.plot([1, 2])
+print(f"Before remove(): l.axes = {l.axes}")
+l.remove()
+print(f"After remove(): l.axes = {l.axes}")
+
+# Test case 2: cla() method should also unset .axes attribute but currently doesn't
+print("\n2. Testing cla() method:")
+f, a = plt.subplots()
+l, = a.plot([1, 2])
+print(f"Before cla(): l.axes = {l.axes}")
+a.cla()
+print(f"After cla(): l.axes = {l.axes}")
+
+# Test case 3: clf() method should also unset .figure attribute
+print("\n3. Testing clf() method:")
+f, a = plt.subplots()
+l, = a.plot([1, 2])
+print(f"Before clf(): l.figure = {l.figure}")
+f.clf()
+print(f"After clf(): l.figure = {l.figure}")
+
+plt.close('all')
+print("\nReproduction completed.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..59f0af6ed3
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import matplotlib.pyplot as plt
+
+print("Testing edge cases for cla() and clf() fixes")
+
+# Test case 1: Multiple artists with cla()
+print("\n1. Testing multiple artists with cla():")
+f, a = plt.subplots()
+l1, = a.plot([1, 2, 3])
+l2, = a.plot([4, 5, 6])
+p = a.scatter([1, 2, 3], [4, 5, 6])
+print(f"Before cla(): l1.axes = {l1.axes}, l2.axes = {l2.axes}, p.axes = {p.axes}")
+a.cla()
+print(f"After cla(): l1.axes = {l1.axes}, l2.axes = {l2.axes}, p.axes = {p.axes}")
+
+# Test case 2: Multiple artists with clf()
+print("\n2. Testing multiple artists with clf():")
+f, a = plt.subplots()
+l1, = a.plot([1, 2, 3])
+l2, = a.plot([4, 5, 6])
+p = a.scatter([1, 2, 3], [4, 5, 6])
+print(f"Before clf(): l1.figure = {l1.figure}, l2.figure = {l2.figure}, p.figure = {p.figure}")
+f.clf()
+print(f"After clf(): l1.figure = {l1.figure}, l2.figure = {l2.figure}, p.figure = {p.figure}")
+
+# Test case 3: Text and patch artists
+print("\n3. Testing text and patch artists:")
+f, a = plt.subplots()
+t = a.text(0.5, 0.5, "Test text")
+rect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, fill=False)
+a.add_patch(rect)
+print(f"Before cla(): t.axes = {t.axes}, rect.axes = {rect.axes}")
+a.cla()
+print(f"After cla(): t.axes = {t.axes}, rect.axes = {rect.axes}")
+
+# Test case 4: Artists without figure attribute (should not crash)
+print("\n4. Testing artists without figure attribute:")
+f, a = plt.subplots()
+l, = a.plot([1, 2, 3])
+# Simulate an artist without figure attribute by temporarily removing it
+has_figure = hasattr(l, 'figure')
+if has_figure:
+    original_figure = l.figure
+    delattr(l, 'figure')
+    print("Temporarily removed figure attribute")
+    a.cla()
+    print("cla() completed without crashing")
+    # Restore the figure attribute
+    l.figure = original_figure
+else:
+    print("Artist doesn't have figure attribute")
+
+plt.close('all')
+print("\nEdge case testing completed.")
\ No newline at end of file
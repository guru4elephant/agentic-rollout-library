diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a850..8aee1e4be0 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -221,7 +221,11 @@ class QuantityInput:
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
             if wrapped_signature.return_annotation is not inspect.Signature.empty:
-                return return_.to(wrapped_signature.return_annotation)
+                # Check if return value is None before trying to convert units
+                if return_ is None:
+                    return return_
+                else:
+                    return return_.to(wrapped_signature.return_annotation)
             else:
                 return return_
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cc943f0261
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+import astropy.units as u
+
+
+class PoC(object):
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+
+if __name__ == '__main__':
+    poc = PoC(1.*u.V)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..eb3edcb459
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,69 @@
+import astropy.units as u
+
+
+class TestClass(object):
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        self.voltage = voltage
+
+    @u.quantity_input
+    def method_with_return(self, current: u.A) -> u.W:  # voltage * current = power (watts)
+        return self.voltage * current
+
+    @u.quantity_input  
+    def method_without_return_annotation(self, resistance: u.ohm):
+        return self.voltage / resistance
+
+    @u.quantity_input
+    def method_returning_none_with_annotation(self, dummy: u.m) -> None:
+        return None
+
+    @u.quantity_input
+    def method_returning_none_without_annotation(self, dummy: u.m):
+        return None
+
+
+def test_function_with_return() -> u.V:
+    @u.quantity_input
+    def inner_func(voltage: u.V) -> u.V:
+        return voltage
+    return inner_func(5 * u.V)
+
+
+def test_function_without_return():
+    @u.quantity_input
+    def inner_func(voltage: u.V) -> None:
+        pass
+    return inner_func(5 * u.V)
+
+
+if __name__ == '__main__':
+    print("Testing constructor with -> None annotation...")
+    test_obj = TestClass(10 * u.V)
+    print("✓ Constructor works")
+    
+    print("Testing method with return annotation...")
+    result1 = test_obj.method_with_return(2 * u.A)
+    print(f"✓ Method with return annotation works: {result1}")
+    
+    print("Testing method without return annotation...")
+    result2 = test_obj.method_without_return_annotation(5 * u.ohm)
+    print(f"✓ Method without return annotation works: {result2}")
+    
+    print("Testing method returning None with annotation...")
+    result3 = test_obj.method_returning_none_with_annotation(1 * u.m)
+    print(f"✓ Method returning None with annotation works: {result3}")
+    
+    print("Testing method returning None without annotation...")
+    result4 = test_obj.method_returning_none_without_annotation(1 * u.m)
+    print(f"✓ Method returning None without annotation works: {result4}")
+    
+    print("Testing function with return annotation...")
+    result5 = test_function_with_return()
+    print(f"✓ Function with return annotation works: {result5}")
+    
+    print("Testing function with None return annotation...")
+    result6 = test_function_without_return()
+    print(f"✓ Function with None return annotation works: {result6}")
+    
+    print("All tests passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..753aedc717
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,41 @@
+import astropy.units as u
+
+
+@u.quantity_input
+def function_with_falsey_return(voltage: u.V) -> int:
+    return 0  # 0 is falsey but not None
+
+
+@u.quantity_input  
+def function_with_empty_string_return(voltage: u.V) -> str:
+    return ""  # empty string is falsey but not None
+
+
+@u.quantity_input
+def function_with_false_return(voltage: u.V) -> bool:
+    return False  # False is falsey but not None
+
+
+if __name__ == '__main__':
+    print("Testing function with 0 return (falsey but not None)...")
+    try:
+        result1 = function_with_falsey_return(10 * u.V)
+        print(f"✓ Function with 0 return works: {result1}")
+    except Exception as e:
+        print(f"✗ Function with 0 return failed: {e}")
+    
+    print("Testing function with empty string return...")
+    try:
+        result2 = function_with_empty_string_return(10 * u.V)
+        print(f"✓ Function with empty string return works: {result2}")
+    except Exception as e:
+        print(f"✗ Function with empty string return failed: {e}")
+    
+    print("Testing function with False return...")
+    try:
+        result3 = function_with_false_return(10 * u.V)
+        print(f"✓ Function with False return works: {result3}")
+    except Exception as e:
+        print(f"✗ Function with False return failed: {e}")
+    
+    print("Edge case testing complete!")
\ No newline at end of file
diff --git a/test_normal_cases.py b/test_normal_cases.py
new file mode 100644
index 0000000000..b8ddc9aa1a
--- /dev/null
+++ b/test_normal_cases.py
@@ -0,0 +1,41 @@
+import astropy.units as u
+
+
+@u.quantity_input
+def function_with_return_annotation(voltage: u.V) -> u.V:
+    return voltage
+
+
+@u.quantity_input
+def function_without_return_annotation(voltage: u.V):
+    return voltage
+
+
+@u.quantity_input  
+def function_returning_none_with_annotation(voltage: u.V) -> None:
+    return None
+
+
+@u.quantity_input
+def function_returning_none_without_annotation(voltage: u.V):
+    return None
+
+
+if __name__ == '__main__':
+    print("Testing function with return annotation...")
+    result1 = function_with_return_annotation(10 * u.V)
+    print(f"✓ Function with return annotation works: {result1}")
+    
+    print("Testing function without return annotation...")
+    result2 = function_without_return_annotation(10 * u.V)
+    print(f"✓ Function without return annotation works: {result2}")
+    
+    print("Testing function returning None with annotation...")
+    result3 = function_returning_none_with_annotation(10 * u.V)
+    print(f"✓ Function returning None with annotation works: {result3}")
+    
+    print("Testing function returning None without annotation...")
+    result4 = function_returning_none_without_annotation(10 * u.V)
+    print(f"✓ Function returning None without annotation works: {result4}")
+    
+    print("All normal cases work!")
\ No newline at end of file
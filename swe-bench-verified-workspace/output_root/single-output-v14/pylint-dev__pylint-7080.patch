diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index e2bbf061e..29694b4cd 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -614,6 +614,12 @@ class PyLinter(
                             os.path.join(root, file)
                             for file in files
                             if file.endswith(".py")
+                            and not _is_ignored_file(
+                                os.path.join(root, file),
+                                self.config.ignore,
+                                self.config.ignore_patterns,
+                                self.config.ignore_paths,
+                            )
                         )
             else:
                 yield something
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..a5423f942
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,122 @@
+#!/usr/bin/env python3
+"""Script to reproduce the ignore-paths issue with recursive scanning."""
+
+import os
+import tempfile
+import subprocess
+import shutil
+
+def create_test_structure():
+    """Create a test directory structure similar to the issue."""
+    # Create temporary directory
+    temp_dir = tempfile.mkdtemp(prefix="pylint_test_")
+    
+    # Create src directory
+    src_dir = os.path.join(temp_dir, "src")
+    os.makedirs(src_dir)
+    
+    # Create gen directory (should be ignored)
+    gen_dir = os.path.join(src_dir, "gen")
+    os.makedirs(gen_dir)
+    
+    # Create main.py file
+    main_py = os.path.join(src_dir, "main.py")
+    with open(main_py, "w") as f:
+        f.write("""# Main file
+def hello():
+    print("Hello, world!")
+    x = 1  # Unused variable for testing
+""")
+    
+    # Create gen/about.py file (should be ignored) - similar to the issue example
+    about_py = os.path.join(gen_dir, "about.py")
+    with open(about_py, "w") as f:
+        f.write("""# Auto generated file
+class Ui_AboutAutoSplitWidget(object):
+    def setupUi(self, AboutAutoSplitWidget):
+        pass
+        
+    def retranslateUi(self, AboutAutoSplitWidget):
+        pass
+""")
+    
+    # Create gen/design.py file (should be ignored) - similar to the issue example
+    design_py = os.path.join(gen_dir, "design.py")
+    with open(design_py, "w") as f:
+        f.write("""# Auto generated file
+class Ui_MainWindow(object):
+    def setupUi(self, MainWindow):
+        pass
+        
+    def retranslateUi(self, MainWindow):
+        pass
+""")
+    
+    # Create gen/settings.py file (should be ignored) - similar to the issue example
+    settings_py = os.path.join(gen_dir, "settings.py")
+    with open(settings_py, "w") as f:
+        f.write("""# Auto generated file
+class Ui_DialogSettings(object):
+    def setupUi(self, DialogSettings):
+        pass
+        
+    def retranslateUi(self, DialogSettings):
+        pass
+""")
+    
+    # Create pyproject.toml with ignore-paths exactly as in the issue
+    pyproject_toml = os.path.join(temp_dir, "pyproject.toml")
+    with open(pyproject_toml, "w") as f:
+        f.write("""[tool.pylint.MASTER]
+ignore-paths = [
+  # Auto generated
+  "^src/gen/.*$",
+]
+""")
+    
+    return temp_dir, src_dir
+
+def test_ignore_paths(temp_dir, src_dir):
+    """Test if ignore-paths works with recursive scanning."""
+    print(f"Testing in directory: {temp_dir}")
+    
+    # Change to test directory
+    original_cwd = os.getcwd()
+    os.chdir(temp_dir)
+    
+    try:
+        # Test with recursive scanning
+        print("\n=== Testing with --recursive=y ===")
+        result = subprocess.run([
+            "python", "-m", "pylint", "--recursive=y", "src/"
+        ], capture_output=True, text=True, timeout=30)
+        
+        print("Return code:", result.returncode)
+        print("STDOUT:")
+        print(result.stdout)
+        print("STDERR:")
+        print(result.stderr)
+        
+        # Check if gen files are being processed (they shouldn't be)
+        if "gen/about.py" in result.stdout:
+            print("\n❌ ISSUE REPRODUCED: gen files are being processed despite ignore-paths")
+            return False
+        else:
+            print("\n✅ FIXED: gen files are correctly ignored")
+            return True
+            
+    except subprocess.TimeoutExpired:
+        print("❌ Test timed out")
+        return False
+    except Exception as e:
+        print(f"❌ Error: {e}")
+        return False
+    finally:
+        os.chdir(original_cwd)
+        # Clean up
+        shutil.rmtree(temp_dir)
+
+if __name__ == "__main__":
+    temp_dir, src_dir = create_test_structure()
+    success = test_ignore_paths(temp_dir, src_dir)
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..dd5c51e4cd
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python
+
+from sympy.geometry import Point
+from sympy import sqrt
+
+# Test the exact case from the GitHub issue
+print("Testing the exact GitHub issue case:")
+result = Point(2, 0).distance(Point(1, 0, 2))
+expected = sqrt(5)
+print(f"Point(2, 0).distance(Point(1, 0, 2)) = {result}")
+print(f"Expected: {expected}")
+print(f"Match: {result == expected}")
+
+# Verify it's not 1 anymore
+print(f"Is it 1? {result == 1}")
+print(f"Is it sqrt(5)? {result == sqrt(5)}")
+
+# Test that the calculation is correct numerically
+print(f"Numerical value: {result.evalf()}")
+print(f"Expected numerical value: {expected.evalf()}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1ab8eb32e2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python
+
+from sympy.geometry import Point
+
+# Reproduce the issue from the github issue
+print("Testing the issue:")
+p1 = Point(2, 0)
+p2 = Point(1, 0, 2)
+result = p1.distance(p2)
+print(f"Point(2, 0).distance(Point(1, 0, 2)) = {result}")
+print(f"Expected: sqrt(5) ≈ {5**0.5}")
+print(f"Actual result is 1, which is wrong!")
+
+# Additional test cases
+print("\nAdditional test cases:")
+# 2D to 2D
+p3 = Point(1, 1)
+p4 = Point(4, 5)
+print(f"Point(1, 1).distance(Point(4, 5)) = {p3.distance(p4)} (should be 5)")
+
+# 3D to 3D
+p5 = Point(1, 2, 3)
+p6 = Point(4, 6, 8)
+print(f"Point(1, 2, 3).distance(Point(4, 6, 8)) = {p5.distance(p6)} (should be sqrt(50) ≈ 7.07)")
+
+# Mixed dimensions: 2D to 3D (this is the problematic case)
+p7 = Point(1, 2)
+p8 = Point(4, 6, 8)
+print(f"Point(1, 2).distance(Point(4, 6, 8)) = {p7.distance(p8)} (should be sqrt(61) ≈ 7.81)")
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464b..46232551d4 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -266,8 +266,16 @@ def distance(self, p):
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+        # Handle points with different dimensions by treating missing coordinates as 0
+        self_coords = self.args
+        p_coords = p.args if isinstance(p, Point) else p
+        
+        # Pad the shorter coordinate list with zeros
+        max_len = max(len(self_coords), len(p_coords))
+        self_padded = list(self_coords) + [0] * (max_len - len(self_coords))
+        p_padded = list(p_coords) + [0] * (max_len - len(p_coords))
+        
+        return sqrt(sum([(a - b)**2 for a, b in zip(self_padded, p_padded)]))
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..9a2ff34b2f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python
+
+from sympy.geometry import Point
+from sympy import sqrt
+
+# Test edge cases for the distance calculation fix
+print("Testing edge cases:")
+
+# Case 1: Original issue - 2D to 3D
+p1 = Point(2, 0)
+p2 = Point(1, 0, 2)
+result = p1.distance(p2)
+expected = sqrt(5)
+print(f"Point(2, 0).distance(Point(1, 0, 2)) = {result}")
+print(f"Expected: {expected}")
+print(f"Correct: {result == expected}")
+
+# Case 2: 3D to 2D (reverse of original issue)
+p3 = Point(1, 0, 2)
+p4 = Point(2, 0)
+result2 = p3.distance(p4)
+print(f"Point(1, 0, 2).distance(Point(2, 0)) = {result2}")
+print(f"Expected: {expected}")
+print(f"Correct: {result2 == expected}")
+
+# Case 3: 1D to 3D
+p5 = Point(5)
+p6 = Point(1, 2, 3)
+result3 = p5.distance(p6)
+expected3 = sqrt((5-1)**2 + (0-2)**2 + (0-3)**2)
+print(f"Point(5).distance(Point(1, 2, 3)) = {result3}")
+print(f"Expected: {expected3}")
+print(f"Correct: {result3 == expected3}")
+
+# Case 4: 3D to 1D
+p7 = Point(1, 2, 3)
+p8 = Point(5)
+result4 = p7.distance(p8)
+print(f"Point(1, 2, 3).distance(Point(5)) = {result4}")
+print(f"Expected: {expected3}")
+print(f"Correct: {result4 == expected3}")
+
+# Case 5: Same dimension points (should still work)
+p9 = Point(1, 2, 3)
+p10 = Point(4, 5, 6)
+result5 = p9.distance(p10)
+expected5 = sqrt((1-4)**2 + (2-5)**2 + (3-6)**2)
+print(f"Point(1, 2, 3).distance(Point(4, 5, 6)) = {result5}")
+print(f"Expected: {expected5}")
+print(f"Correct: {result5 == expected5}")
\ No newline at end of file
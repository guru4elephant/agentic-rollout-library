diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..12024c5514
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Minimal settings configuration
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    # DEFAULT_AUTO_FIELD='test_app.models.MyBigAutoField',
+)
+
+# Create a simple test app structure
+os.makedirs('test_app/models', exist_ok=True)
+with open('test_app/__init__.py', 'w') as f:
+    f.write('')
+
+with open('test_app/models/__init__.py', 'w') as f:
+    f.write('')
+
+# Create the models.py file
+with open('test_app/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+''')
+
+# Update the __init__.py to import the model
+with open('test_app/models/__init__.py', 'w') as f:
+    f.write('''from .models import MyModel
+''')
+
+# Now test the actual Django setup process
+try:
+    django.setup()
+    print("SUCCESS: Django setup completed!")
+    
+    # Test that the model can be imported and used
+    from test_app.models import MyModel
+    print("SUCCESS: Model imported successfully!")
+    
+    # Test that the default auto field is correctly recognized
+    from django.apps import apps
+    model = apps.get_model('test_app', 'MyModel')
+    print(f"SUCCESS: Model retrieved: {model}")
+    print(f"Primary key field: {model._meta.pk}")
+    print(f"Primary key field type: {type(model._meta.pk)}")
+    print(f"Is instance of AutoField: {isinstance(model._meta.pk, models.AutoField)}")
+    
+except Exception as e:
+    print(f"ERROR: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..0ce7de02c6 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,7 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..60979b1197
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Minimal settings configuration
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'example.core',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField',
+)
+
+# Create the example app structure
+os.makedirs('example/core/models', exist_ok=True)
+with open('example/__init__.py', 'w') as f:
+    f.write('')
+
+with open('example/core/__init__.py', 'w') as f:
+    f.write('')
+
+# Create the models.py file with the problematic code
+with open('example/core/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    pass
+''')
+
+with open('example/core/models/__init__.py', 'w') as f:
+    f.write('''from .models import MyModel
+''')
+
+# Now try to reproduce the issue
+try:
+    django.setup()
+    print("SUCCESS: Django setup completed without error!")
+    
+    # Try to import the model to trigger the actual error
+    from example.core.models import MyModel
+    print("SUCCESS: Model imported successfully!")
+except Exception as e:
+    print(f"ERROR: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/run_autofield_tests.py b/run_autofield_tests.py
new file mode 100644
index 0000000000..b43c0cdf37
--- /dev/null
+++ b/run_autofield_tests.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Minimal settings configuration for testing
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'tests.model_fields',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    USE_TZ=True,
+)
+
+django.setup()
+
+# Import and run the specific tests
+from django.test import SimpleTestCase
+from django.db import models
+from tests.model_fields.test_autofield import AutoFieldInheritanceTests
+
+# Create a test instance
+test_instance = AutoFieldInheritanceTests()
+
+print("Running AutoField inheritance tests...")
+
+# Test isinstance checks
+print("\nTesting isinstance checks:")
+test_instance.test_isinstance_of_autofield()
+print("✓ isinstance tests passed")
+
+# Test issubclass checks  
+print("\nTesting issubclass checks:")
+test_instance.test_issubclass_of_autofield()
+print("✓ issubclass tests passed")
+
+print("\nAll AutoField inheritance tests passed successfully!")
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..0887b7734f
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Minimal settings configuration
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+# First, let's test the current behavior
+django.setup()
+
+from django.db import models
+
+# Create a custom BigAutoField subclass
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+# Test the issue: issubclass should work but currently fails
+print("Testing issubclass(MyBigAutoField, models.AutoField)...")
+try:
+    result = issubclass(MyBigAutoField, models.AutoField)
+    print(f"Result: {result}")
+    if result:
+        print("SUCCESS: issubclass works correctly")
+    else:
+        print("FAILURE: issubclass returns False - this is the bug!")
+except Exception as e:
+    print(f"ERROR: {e}")
+    import traceback
+    traceback.print_exc()
+
+# Test with a model that uses this field
+print("\nTesting model creation with custom auto field...")
+try:
+    class TestModel(models.Model):
+        id = MyBigAutoField(primary_key=True)
+        name = models.CharField(max_length=100)
+    
+    print("SUCCESS: Model created with custom auto field")
+except Exception as e:
+    print(f"ERROR: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..9733aedb0f
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,10 @@
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
diff --git a/test_app/models/__init__.py b/test_app/models/__init__.py
new file mode 100644
index 0000000000..487c698901
--- /dev/null
+++ b/test_app/models/__init__.py
@@ -0,0 +1 @@
+from .models import MyModel
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..b245fe8702
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Minimal settings configuration
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+from django.db import models
+
+print("Testing the fix for AutoFieldMeta.__subclasscheck__")
+
+# Test 1: Direct subclasses
+print("\n1. Testing direct subclasses:")
+print(f"issubclass(models.BigAutoField, models.AutoField): {issubclass(models.BigAutoField, models.AutoField)}")
+print(f"issubclass(models.SmallAutoField, models.AutoField): {issubclass(models.SmallAutoField, models.AutoField)}")
+
+# Test 2: Custom subclasses of BigAutoField
+print("\n2. Testing custom subclasses of BigAutoField:")
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyBigAutoField2(MyBigAutoField):
+    pass
+
+print(f"issubclass(MyBigAutoField, models.AutoField): {issubclass(MyBigAutoField, models.AutoField)}")
+print(f"issubclass(MyBigAutoField2, models.AutoField): {issubclass(MyBigAutoField2, models.AutoField)}")
+
+# Test 3: Custom subclasses of SmallAutoField  
+print("\n3. Testing custom subclasses of SmallAutoField:")
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+class MySmallAutoField2(MySmallAutoField):
+    pass
+
+print(f"issubclass(MySmallAutoField, models.AutoField): {issubclass(MySmallAutoField, models.AutoField)}")
+print(f"issubclass(MySmallAutoField2, models.AutoField): {issubclass(MySmallAutoField2, models.AutoField)}")
+
+# Test 4: Non-auto field classes should return False
+print("\n4. Testing non-auto field classes:")
+print(f"issubclass(models.IntegerField, models.AutoField): {issubclass(models.IntegerField, models.AutoField)}")
+print(f"issubclass(models.CharField, models.AutoField): {issubclass(models.CharField, models.AutoField)}")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/test_instance_check.py b/test_instance_check.py
new file mode 100644
index 0000000000..27345c4857
--- /dev/null
+++ b/test_instance_check.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+sys.path.insert(0, '.')
+
+# Minimal settings configuration
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+from django.db import models
+
+print("Testing the instance check for AutoField")
+
+# Create instances of different field types
+big_auto_field = models.BigAutoField()
+small_auto_field = models.SmallAutoField()
+integer_field = models.IntegerField()
+char_field = models.CharField(max_length=100)
+
+# Test custom subclasses
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+my_big_auto_field = MyBigAutoField()
+my_small_auto_field = MySmallAutoField()
+
+print("\nTesting isinstance checks:")
+print(f"isinstance(big_auto_field, models.AutoField): {isinstance(big_auto_field, models.AutoField)}")
+print(f"isinstance(small_auto_field, models.AutoField): {isinstance(small_auto_field, models.AutoField)}")
+print(f"isinstance(my_big_auto_field, models.AutoField): {isinstance(my_big_auto_field, models.AutoField)}")
+print(f"isinstance(my_small_auto_field, models.AutoField): {isinstance(my_small_auto_field, models.AutoField)}")
+print(f"isinstance(integer_field, models.AutoField): {isinstance(integer_field, models.AutoField)}")
+print(f"isinstance(char_field, models.AutoField): {isinstance(char_field, models.AutoField)}")
+
+print("\nAll instance checks completed successfully!")
\ No newline at end of file
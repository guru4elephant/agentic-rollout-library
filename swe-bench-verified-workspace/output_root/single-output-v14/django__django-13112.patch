diff --git a/django/apps/registry.py b/django/apps/registry.py
index 408964a146..93ee87bae8 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -89,12 +89,14 @@ class Apps:
                     app_config = entry
                 else:
                     app_config = AppConfig.create(entry)
-                if app_config.label in self.app_configs:
+                # Normalize app label to lowercase for consistent lookup
+                normalized_label = app_config.label.lower()
+                if normalized_label in self.app_configs:
                     raise ImproperlyConfigured(
                         "Application labels aren't unique, "
-                        "duplicates: %s" % app_config.label)
+                        "duplicates: %s" % normalized_label)
 
-                self.app_configs[app_config.label] = app_config
+                self.app_configs[normalized_label] = app_config
                 app_config.apps = self
 
             # Check for duplicate app names.
@@ -151,12 +153,15 @@ class Apps:
         Raise LookupError if no application exists with this label.
         """
         self.check_apps_ready()
+        # Normalize app label to lowercase for consistent lookup
+        normalized_label = app_label.lower()
         try:
-            return self.app_configs[app_label]
+            return self.app_configs[normalized_label]
         except KeyError:
             message = "No installed app with label '%s'." % app_label
             for app_config in self.get_app_configs():
-                if app_config.name == app_label:
+                # Check if the original app_label matches any app config name or label
+                if app_config.name == app_label or app_config.label == app_label:
                     message += " Did you mean '%s'?" % app_config.label
                     break
             raise LookupError(message)
diff --git a/django/db/models/utils.py b/django/db/models/utils.py
index 989667dc8c..be1e5c54bf 100644
--- a/django/db/models/utils.py
+++ b/django/db/models/utils.py
@@ -9,7 +9,7 @@ def make_model_tuple(model):
             model_tuple = model
         elif isinstance(model, str):
             app_label, model_name = model.split(".")
-            model_tuple = app_label, model_name.lower()
+            model_tuple = app_label.lower(), model_name.lower()
         else:
             model_tuple = model._meta.app_label, model._meta.model_name
         assert len(model_tuple) == 2
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..42a58d5aec
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,124 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ForeignKey issue with mixed-case app names.
+This mimics the scenario described in the GitHub issue.
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from django.conf import settings
+from django.db import models
+from django.apps import apps
+
+# Create a temporary Django project structure
+temp_dir = tempfile.mkdtemp()
+project_dir = os.path.join(temp_dir, 'test_project')
+os.makedirs(project_dir)
+
+# Create a test app with mixed-case name
+app_dir = os.path.join(project_dir, 'DJ_RegLogin')
+os.makedirs(app_dir)
+
+# Create __init__.py for the app
+with open(os.path.join(app_dir, '__init__.py'), 'w') as f:
+    f.write('')
+
+# Create apps.py for the app
+apps_py_content = '''
+from django.apps import AppConfig
+
+class DJ_RegLoginConfig(AppConfig):
+    name = 'DJ_RegLogin'
+    verbose_name = "Contents"
+'''
+
+with open(os.path.join(app_dir, 'apps.py'), 'w') as f:
+    f.write(apps_py_content)
+
+# Create models.py for the app
+models_py_content = '''
+from django.db import models
+from django.urls import reverse
+
+class Category(models.Model):
+    title = models.CharField(max_length=100, db_index=True)
+    slug = models.SlugField(max_length=100, db_index=True)
+    
+    class Meta:
+        verbose_name = 'Category'
+        verbose_name_plural = 'Categories'
+    
+    def __str__(self):
+        return self.title
+    
+    def get_absolute_url(self):
+        return reverse('view_blog_category', None, kwargs={'slug': self.slug})
+
+class Content(models.Model):
+    title = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(max_length=100, unique=True)
+    body = models.TextField()  # Using TextField instead of RichTextField for simplicity
+    posted = models.DateTimeField(db_index=True, auto_now_add=True)
+    sites = models.ManyToManyField('sites.Site')
+    ip = models.GenericIPAddressField(editable=False)
+    category = models.ForeignKey('Category', on_delete=models.CASCADE)
+    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, null=False, blank=False, editable=False)
+    status = models.CharField(max_length=10, choices=[('draft', 'Draft'), ('published', 'Published')], default='draft')
+    
+    def __str__(self):
+        return self.title
+    
+    def get_absolute_url(self):
+        return reverse('view_blog_post', None, kwargs={'slug': self.slug})
+'''
+
+with open(os.path.join(app_dir, 'models.py'), 'w') as f:
+    f.write(models_py_content)
+
+# Configure Django settings
+import sys
+sys.path.insert(0, project_dir)
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'DJ_RegLogin',
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        'django.contrib.sites',
+        'django.contrib.flatpages',
+        'django.contrib.sitemaps',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    USE_TZ=True,
+)
+
+# Initialize Django
+from django import setup
+setup()
+
+# Try to create migrations to reproduce the issue
+from django.core.management import call_command
+
+print("Attempting to create migrations...")
+try:
+    call_command('makemigrations', 'DJ_RegLogin', verbosity=2)
+    print("SUCCESS: Migrations created successfully")
+except Exception as e:
+    print(f"ERROR: {e}")
+    print("This reproduces the issue described in the GitHub issue")
+
+# Clean up
+shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..be8a114eb1 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -51,11 +51,11 @@ class BaseHandler:
                 middleware_is_async = middleware_can_async
             try:
                 # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                mw_instance = middleware(adapted_handler)
             except MiddlewareNotUsed as exc:
                 if settings.DEBUG:
                     if str(exc):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e735ad3faf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+
+"""
+Script to reproduce the MiddlewareNotUsed issue in ASGI context
+"""
+
+import os
+import sys
+
+# Set Django settings before importing anything
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')
+
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+from django.core.handlers.asgi import ASGIHandler
+
+# Define middleware classes
+class SyncMiddleware:
+    """Synchronous middleware that works fine"""
+    sync_capable = True
+    async_capable = False
+    
+    def __init__(self, get_response):
+        self.get_response = get_response
+    
+    def __call__(self, request):
+        print("SyncMiddleware called")
+        response = self.get_response(request)
+        return response
+
+class MiddlewareNotUsedMiddleware:
+    """Middleware that raises MiddlewareNotUsed"""
+    sync_capable = True
+    async_capable = False
+    
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed("This middleware should not be used")
+
+class AsyncMiddleware:
+    """Async middleware that expects async handler"""
+    sync_capable = False
+    async_capable = True
+    
+    def __init__(self, get_response):
+        self.get_response = get_response
+    
+    async def __call__(self, request):
+        print("AsyncMiddleware called")
+        response = await self.get_response(request)
+        return response
+
+# Create URL patterns
+from django.urls import path
+
+def dummy_view(request):
+    return HttpResponse("Hello World")
+
+urlpatterns = [
+    path('', dummy_view),
+]
+
+if __name__ == '__main__':
+    # Create ASGI handler
+    handler = ASGIHandler()
+    
+    # Load middleware
+    handler.load_middleware(is_async=True)
+    
+    # Create a mock request
+    from django.http import HttpRequest
+    request = HttpRequest()
+    request.method = 'GET'
+    
+    try:
+        # Try to call the middleware chain
+        import asyncio
+        response = asyncio.run(handler.get_response_async(request))
+        print("Success:", response)
+    except Exception as e:
+        print("Error:", e)
+        print("Type:", type(e))
\ No newline at end of file
diff --git a/debug_objtypes.py b/debug_objtypes.py
new file mode 100644
index 000000000..01e92d69a
--- /dev/null
+++ b/debug_objtypes.py
@@ -0,0 +1,134 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand what objtype values are passed to record_typehints
+for different types of objects.
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+
+# Create a temporary directory structure
+temp_dir = tempfile.mkdtemp()
+print(f"Creating test environment in: {temp_dir}")
+
+# Create sample package structure
+sample_package_dir = os.path.join(temp_dir, "sample_package")
+os.makedirs(sample_package_dir)
+
+# Create __init__.py with the Square class
+init_py_content = '''class Square:
+    """A class representing a square figure."""
+
+    def __init__(self, width: int, height: int) -> None:
+        self.width = width
+        self.height = height
+    
+    def area(self) -> float:
+        """Calculate the area of the square."""
+        return self.width * self.height
+
+def create_square(width: int, height: int) -> 'Square':
+    """Create a new Square instance."""
+    return Square(width, height)
+'''
+
+with open(os.path.join(sample_package_dir, "__init__.py"), "w") as f:
+    f.write(init_py_content)
+
+# Create docs directory
+docs_dir = os.path.join(temp_dir, "docs")
+os.makedirs(docs_dir)
+
+# Create conf.py
+conf_py_content = '''import os
+import sys
+sys.path.insert(0, os.path.abspath('..'))
+
+project = 'sphinx-issue-9575'
+copyright = '2021, Jakub Kuczys'
+author = 'Jakub Kuczys'
+
+extensions = ['sphinx.ext.autodoc']
+templates_path = ['_templates']
+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
+html_theme = 'alabaster'
+html_static_path = ['_static']
+autodoc_typehints = "description"
+'''
+
+with open(os.path.join(docs_dir, "conf.py"), "w") as f:
+    f.write(conf_py_content)
+
+# Create index.rst
+index_rst_content = '''Test Documentation
+==================
+
+.. autoclass:: sample_package.Square
+   :members:
+   
+.. autofunction:: sample_package.create_square
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+Indices and tables
+==================
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
+'''
+
+with open(os.path.join(docs_dir, "index.rst"), "w") as f:
+    f.write(index_rst_content)
+
+print("Test files created successfully")
+
+# Now let's patch the record_typehints function to debug objtype values
+sys.path.insert(0, os.path.abspath('.'))
+
+# Import and patch the function
+from sphinx.ext.autodoc.typehints import record_typehints
+
+original_record_typehints = record_typehints
+
+def debug_record_typehints(app, objtype, name, obj, options, args, retann):
+    print(f"DEBUG: objtype={objtype}, name={name}")
+    return original_record_typehints(app, objtype, name, obj, options, args, retann)
+
+# Monkey patch the function
+import sphinx.ext.autodoc.typehints
+sphinx.ext.autodoc.typehints.record_typehints = debug_record_typehints
+
+# Now build the documentation
+try:
+    from sphinx.application import Sphinx
+    from sphinx.util.docutils import docutils_namespace
+    
+    build_dir = os.path.join(docs_dir, "_build")
+    
+    with docutils_namespace():
+        app = Sphinx(
+            srcdir=docs_dir,
+            confdir=docs_dir,
+            outdir=os.path.join(build_dir, "html"),
+            doctreedir=os.path.join(build_dir, "doctrees"),
+            buildername="html",
+            confoverrides={},
+            status=sys.stdout,
+            warning=sys.stderr
+        )
+        
+        app.build()
+        
+except Exception as e:
+    print(f"Error building documentation: {e}")
+    import traceback
+    traceback.print_exc()
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
+    print(f"Cleaned up temporary directory: {temp_dir}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..5789dab70
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,184 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue described in GitHub issue #9575.
+The issue is that autodoc_typehints = "description" causes autoclass to include
+a return type for classes.
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary directory structure
+temp_dir = tempfile.mkdtemp()
+print(f"Creating test environment in: {temp_dir}")
+
+# Create sample package structure
+sample_package_dir = os.path.join(temp_dir, "sample_package")
+os.makedirs(sample_package_dir)
+
+# Create __init__.py with the Square class
+init_py_content = '''class Square:
+    """A class representing a square figure."""
+
+    def __init__(self, width: int, height: int) -> None:
+        self.width = width
+        self.height = height
+'''
+
+with open(os.path.join(sample_package_dir, "__init__.py"), "w") as f:
+    f.write(init_py_content)
+
+# Create docs directory
+docs_dir = os.path.join(temp_dir, "docs")
+os.makedirs(docs_dir)
+
+# Create conf.py
+conf_py_content = '''# Configuration file for the Sphinx documentation builder.
+#
+# This file only contains a selection of the most common options. For a full
+# list see the documentation:
+# https://www.sphinx-doc.org/en/master/usage/configuration.html
+
+# -- Path setup --------------------------------------------------------------
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+#
+import os
+import sys
+sys.path.insert(0, os.path.abspath('..'))
+
+
+# -- Project information -----------------------------------------------------
+
+project = 'sphinx-issue-9575'
+copyright = '2021, Jakub Kuczys'
+author = 'Jakub Kuczys'
+
+
+# -- General configuration ---------------------------------------------------
+
+# Add any Sphinx extension module names here, as strings. They can be
+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
+# ones.
+extensions = [
+    'sphinx.ext.autodoc',
+]
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+# This pattern also affects html_static_path and html_extra_path.
+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
+
+
+# -- Options for HTML output -------------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+#
+html_theme = 'alabaster'
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+
+# -- Extension configuration -------------------------------------------------
+
+autodoc_typehints = "description"
+'''
+
+with open(os.path.join(docs_dir, "conf.py"), "w") as f:
+    f.write(conf_py_content)
+
+# Create index.rst
+index_rst_content = '''.. sphinx-issue-9575 documentation master file, created by
+   sphinx-quickstart on Tue Aug 24 14:09:36 2021.
+   You can adapt this file completely to your liking, but it should at least
+   contain the root `toctree` directive.
+
+Welcome to sphinx-issue-9575's documentation!
+=============================================
+
+.. autoclass:: sample_package.Square
+   :members:
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+
+
+Indices and tables
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
+'''
+
+with open(os.path.join(docs_dir, "index.rst"), "w") as f:
+    f.write(index_rst_content)
+
+print("Test files created successfully")
+
+# Now let's try to build the documentation using sphinx-build
+print("\nAttempting to build documentation...")
+
+# Add the current sphinx to the Python path
+sys.path.insert(0, os.path.abspath('.'))
+
+try:
+    from sphinx.application import Sphinx
+    from sphinx.util.docutils import docutils_namespace
+    
+    build_dir = os.path.join(docs_dir, "_build")
+    
+    with docutils_namespace():
+        app = Sphinx(
+            srcdir=docs_dir,
+            confdir=docs_dir,
+            outdir=os.path.join(build_dir, "html"),
+            doctreedir=os.path.join(build_dir, "doctrees"),
+            buildername="html",
+            confoverrides={},
+            status=sys.stdout,
+            warning=sys.stderr
+        )
+        
+        app.build()
+        
+        # Check the generated HTML file
+        html_file = os.path.join(build_dir, "html", "index.html")
+        if os.path.exists(html_file):
+            print(f"\nGenerated HTML file: {html_file}")
+            with open(html_file, "r") as f:
+                content = f.read()
+                print("\nContent of generated HTML:")
+                print(content[:2000])  # Show first 2000 chars
+                
+                # Check if there's a return type mentioned
+                if "return type" in content.lower() or "->" in content:
+                    print("\nISSUE REPRODUCED: Return type found in class documentation!")
+                else:
+                    print("\nNo return type found - issue might be fixed!")
+        else:
+            print("HTML file was not generated")
+            
+except Exception as e:
+    print(f"Error building documentation: {e}")
+    import traceback
+    traceback.print_exc()
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
+    print(f"Cleaned up temporary directory: {temp_dir}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..da9989921
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,194 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the fix for GitHub issue #9575.
+Tests that:
+1. Classes don't show return types with autodoc_typehints = "description"
+2. Functions still show return types with autodoc_typehints = "description" 
+3. Methods still show return types with autodoc_typehints = "description"
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+def create_test_environment():
+    """Create a comprehensive test environment."""
+    temp_dir = tempfile.mkdtemp()
+    print(f"Creating test environment in: {temp_dir}")
+    
+    # Create sample package structure
+    sample_package_dir = os.path.join(temp_dir, "sample_package")
+    os.makedirs(sample_package_dir)
+    
+    # Create __init__.py with various types of objects
+    init_py_content = '''class Square:
+    """A class representing a square figure."""
+    
+    def __init__(self, width: int, height: int) -> None:
+        self.width = width
+        self.height = height
+    
+    def area(self) -> float:
+        """Calculate the area of the square."""
+        return self.width * self.height
+
+def create_square(width: int, height: int) -> 'Square':
+    """Create a new Square instance."""
+    return Square(width, height)
+'''
+
+    with open(os.path.join(sample_package_dir, "__init__.py"), "w") as f:
+        f.write(init_py_content)
+    
+    # Create docs directory
+    docs_dir = os.path.join(temp_dir, "docs")
+    os.makedirs(docs_dir)
+    
+    # Create conf.py
+    conf_py_content = '''import os
+import sys
+sys.path.insert(0, os.path.abspath('..'))
+
+project = 'test-package'
+copyright = '2021, Test Author'
+author = 'Test Author'
+
+extensions = ['sphinx.ext.autodoc']
+templates_path = ['_templates']
+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
+html_theme = 'alabaster'
+html_static_path = ['_static']
+autodoc_typehints = "description"
+'''
+
+    with open(os.path.join(docs_dir, "conf.py"), "w") as f:
+        f.write(conf_py_content)
+    
+    # Create index.rst
+    index_rst_content = '''Test Documentation
+==================
+
+.. autoclass:: sample_package.Square
+   :members:
+   
+.. autofunction:: sample_package.create_square
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+Indices and tables
+==================
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
+'''
+
+    with open(os.path.join(docs_dir, "index.rst"), "w") as f:
+        f.write(index_rst_content)
+    
+    return temp_dir, docs_dir
+
+def build_and_analyze_docs(temp_dir, docs_dir):
+    """Build documentation and analyze the results."""
+    # Add the current sphinx to the Python path
+    sys.path.insert(0, os.path.abspath('.'))
+    
+    try:
+        from sphinx.application import Sphinx
+        from sphinx.util.docutils import docutils_namespace
+        
+        build_dir = os.path.join(docs_dir, "_build")
+        
+        with docutils_namespace():
+            app = Sphinx(
+                srcdir=docs_dir,
+                confdir=docs_dir,
+                outdir=os.path.join(build_dir, "html"),
+                doctreedir=os.path.join(build_dir, "doctrees"),
+                buildername="html",
+                confoverrides={},
+                status=sys.stdout,
+                warning=sys.stderr
+            )
+            
+            app.build()
+            
+            # Check the generated HTML file
+            html_file = os.path.join(build_dir, "html", "index.html")
+            if os.path.exists(html_file):
+                with open(html_file, "r") as f:
+                    content = f.read()
+                    print("\nAnalysis of generated HTML:")
+                    
+                    # Check for class return type (should NOT be present)
+                    class_return_found = "->" in content and "Square" in content and "class" in content
+                    if class_return_found:
+                        print("❌ ISSUE: Class return type found!")
+                        # Show the problematic section
+                        lines = content.split('\n')
+                        for i, line in enumerate(lines):
+                            if "->" in line and "Square" in line and "class" in line:
+                                print(f"   Found at line {i}: {line.strip()}")
+                    else:
+                        print("✅ GOOD: No class return type found")
+                    
+                    # Check for function return type (should be present in description)
+                    function_return_found = "rtype" in content and "create_square" in content
+                    if function_return_found:
+                        print("✅ GOOD: Function return type found (in description)")
+                    else:
+                        print("❌ ISSUE: Function return type missing!")
+                        print("   Looking for 'create_square' and 'rtype' in content...")
+                    
+                    # Check for method return type (should be present in description)
+                    method_return_found = "rtype" in content and "area" in content and "float" in content
+                    if method_return_found:
+                        print("✅ GOOD: Method return type found (in description)")
+                    else:
+                        print("❌ ISSUE: Method return type missing!")
+                        print("   Looking for 'area' and 'rtype' and 'float' in content...")
+                    
+                    # Debug: show parts of the content
+                    print("\nDebug - content snippets (searching for rtype):")
+                    lines = content.split('\n')
+                    rtype_lines = [line for line in lines if "rtype" in line]
+                    for i, line in enumerate(rtype_lines):
+                        print(f"   {i}: {line.strip()}")
+                    
+                    print("\nDebug - content snippets (searching for create_square and area):")
+                    for i, line in enumerate(lines):
+                        if "create_square" in line or "area" in line:
+                            print(f"   {i}: {line.strip()}")
+                    
+                    return not class_return_found and function_return_found and method_return_found
+            else:
+                print("HTML file was not generated")
+                return False
+                
+    except Exception as e:
+        print(f"Error building documentation: {e}")
+        import traceback
+        traceback.print_exc()
+        return False
+
+def main():
+    """Run the comprehensive test."""
+    temp_dir, docs_dir = create_test_environment()
+    
+    try:
+        success = build_and_analyze_docs(temp_dir, docs_dir)
+        if success:
+            print("\n🎉 ALL TESTS PASSED! The fix is working correctly.")
+        else:
+            print("\n❌ SOME TESTS FAILED! The fix needs more work.")
+            
+    finally:
+        # Clean up
+        shutil.rmtree(temp_dir)
+        print(f"Cleaned up temporary directory: {temp_dir}")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 105a02597..90ada0821 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,7 +29,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
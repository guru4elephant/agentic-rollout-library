diff --git a/debug_ast.py b/debug_ast.py
new file mode 100644
index 000000000..f168c8c91
--- /dev/null
+++ b/debug_ast.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+"""Debug script to see how AST parses the function signature."""
+
+import ast
+from sphinx.pycode.ast import ast_unparse
+
+def debug_ast_parsing():
+    # Test case from the GitHub issue: foo(a, b=0, /, c=1)
+    signature = "(a, b=0, /, c=1)"
+    
+    print("Parsing:", "def func" + signature + ": pass")
+    module = ast.parse("def func" + signature + ": pass")
+    definition = module.body[0]
+    
+    print("AST dump:")
+    print(ast.dump(definition, indent=2))
+    
+    print("\nArguments:")
+    args = definition.args
+    print("  posonlyargs:", [arg.arg for arg in args.posonlyargs] if hasattr(args, "posonlyargs") else "N/A")
+    print("  args:", [arg.arg for arg in args.args])
+    print("  defaults:", [ast_unparse(default) for default in args.defaults])
+    print("  kwonlyargs:", [arg.arg for arg in args.kwonlyargs] if hasattr(args, "kwonlyargs") else "N/A")
+    print("  kw_defaults:", [ast_unparse(default) for default in args.kw_defaults] if hasattr(args, "kw_defaults") else "N/A")
+
+if __name__ == "__main__":
+    debug_ast_parsing()
\ No newline at end of file
diff --git a/debug_ast_simple.py b/debug_ast_simple.py
new file mode 100644
index 000000000..85155b2e2
--- /dev/null
+++ b/debug_ast_simple.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+"""Debug script to see how AST parses the function signature."""
+
+import ast
+
+def debug_ast_parsing():
+    # Test case from the GitHub issue: foo(a, b=0, /, c=1)
+    signature = "(a, b=0, /, c=1)"
+    
+    print("Parsing:", "def func" + signature + ": pass")
+    module = ast.parse("def func" + signature + ": pass")
+    definition = module.body[0]
+    
+    print("AST dump:")
+    print(ast.dump(definition, indent=2))
+    
+    print("\nArguments:")
+    args = definition.args
+    print("  posonlyargs:", [arg.arg for arg in args.posonlyargs] if hasattr(args, "posonlyargs") else "N/A")
+    print("  args:", [arg.arg for arg in args.args])
+    print("  defaults:", [ast.dump(default) for default in args.defaults])
+
+if __name__ == "__main__":
+    debug_ast_parsing()
\ No newline at end of file
diff --git a/debug_test_failure.py b/debug_test_failure.py
new file mode 100644
index 000000000..bdc5f6476
--- /dev/null
+++ b/debug_test_failure.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+"""Debug script to understand the test failure."""
+
+from sphinx.testing.util import restructuredtext
+from sphinx.testing.util import SphinxTestApp
+from sphinx.addnodes import desc_signature, desc_parameterlist, desc_name, desc_returns, pending_xref
+from sphinx.testing.util import assert_node
+
+def debug_test():
+    app = SphinxTestApp(buildername='html')
+    
+    text = (".. py:function:: hello(a: str, b = 1, *args: str, "
+            "c: bool = True, **kwargs: str) -> str")
+    doctree = restructuredtext.parse(app, text)
+    
+    print("Doctree structure:")
+    print(doctree.pformat())
+    
+    print("\nDesc_signature children:")
+    desc = doctree[1]  # The desc node
+    signature = desc[0]  # The desc_signature node
+    print(f"Number of children in desc_signature: {len(signature)}")
+    for i, child in enumerate(signature):
+        print(f"  {i}: {child.__class__.__name__} - {child}")
+    
+    # Check if there's a parameterlist
+    param_list = None
+    for child in signature:
+        if isinstance(child, desc_parameterlist):
+            param_list = child
+            break
+    
+    if param_list:
+        print(f"\nParameter list children: {len(param_list)}")
+        for i, child in enumerate(param_list):
+            print(f"  {i}: {child.__class__.__name__} - {child}")
+
+if __name__ == "__main__":
+    debug_test()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..41382b32d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+"""Script to reproduce the issue with positional-only arguments default values."""
+
+import inspect
+
+def foo(a, b=0, /, c=1):
+    """Test function with positional-only arguments."""
+    return a + b + c
+
+if __name__ == "__main__":
+    print("Function signature:", foo.__name__)
+    print("Function signature with defaults:", inspect.signature(foo))
+    
+    # Test the function
+    print("foo(1):", foo(1))
+    print("foo(1, 2):", foo(1, 2))
+    print("foo(1, 2, 3):", foo(1, 2, 3))
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 5e822fe9b..77b63df38 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 15f0d66e2..6e93875d0 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -521,14 +521,26 @@ def signature_from_str(signature: str) -> inspect.Signature:
     params = []
 
     if hasattr(args, "posonlyargs"):
-        for arg in args.posonlyargs:  # type: ignore
+        for i, arg in enumerate(args.posonlyargs):  # type: ignore
+            # Handle defaults for positional-only parameters
+            # The defaults array contains defaults for both posonlyargs and args
+            # The first len(args.defaults) - len(args.args) defaults are for posonlyargs
+            posonly_defaults_count = max(0, len(args.defaults) - len(args.args))
+            if len(args.defaults) > 0 and i >= len(args.posonlyargs) - posonly_defaults_count and posonly_defaults_count > 0:
+                default_index = i - (len(args.posonlyargs) - posonly_defaults_count)
+                default = ast_unparse(args.defaults[default_index])
+            else:
+                default = Parameter.empty
+            
             annotation = ast_unparse(arg.annotation) or Parameter.empty
             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,
-                                    annotation=annotation))
+                                    default=default, annotation=annotation))
 
     for i, arg in enumerate(args.args):
-        if len(args.args) - i <= len(args.defaults):
-            default = ast_unparse(args.defaults[-len(args.args) + i])
+        # Adjust for defaults that were already used for positional-only parameters
+        posonly_defaults_count = max(0, len(args.defaults) - len(args.args))
+        if len(args.defaults) > 0 and i < len(args.defaults) - posonly_defaults_count:
+            default = ast_unparse(args.defaults[posonly_defaults_count + i])
         else:
             default = Parameter.empty
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..08045f65e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+"""Test script to verify edge cases for positional-only argument parsing."""
+
+from sphinx.util.inspect import signature_from_str
+import inspect
+
+def test_edge_cases():
+    test_cases = [
+        ("a, b=0, /, c=1", "Positional-only with defaults and regular with defaults"),
+        ("a, b, /, c=1", "Positional-only without defaults, regular with defaults"),
+        ("a=1, b=2, /, c, d", "Positional-only with defaults, regular without defaults"),
+        ("a, b, /, c, d", "No defaults at all"),
+        ("a=1, /", "Only positional-only with defaults"),
+        ("a, /", "Only positional-only without defaults"),
+        ("/, c=1", "Only regular with defaults (edge case)"),
+    ]
+    
+    for arglist, description in test_cases:
+        print(f"\nTesting: {description}")
+        print(f"Argument list: {arglist}")
+        try:
+            sig = signature_from_str(f"({arglist})")
+            print(f"Parsed signature: {sig}")
+            
+            print("Parameters:")
+            for name, param in sig.parameters.items():
+                print(f"  {name}: kind={param.kind}, default={param.default}")
+                
+        except Exception as e:
+            print(f"Error: {e}")
+            import traceback
+            traceback.print_exc()
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_positional_only.py b/test_positional_only.py
new file mode 100644
index 000000000..12abace18
--- /dev/null
+++ b/test_positional_only.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the positional-only argument default value issue."""
+
+import inspect
+from sphinx.util.inspect import stringify_signature
+
+def foo(a, b=0, /, c=1):
+    """Test function with positional-only arguments."""
+    return a + b + c
+
+if __name__ == "__main__":
+    sig = inspect.signature(foo)
+    print("Original signature:", sig)
+    print("Stringified signature:", stringify_signature(sig))
+    
+    # Test individual parameters
+    for name, param in sig.parameters.items():
+        print(f"Parameter {name}: kind={param.kind}, default={param.default}")
\ No newline at end of file
diff --git a/test_positional_only_directive.py b/test_positional_only_directive.py
new file mode 100644
index 000000000..0863bb624
--- /dev/null
+++ b/test_positional_only_directive.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the positional-only argument default value issue with directive parsing."""
+
+from sphinx.domains.python import _parse_arglist, _pseudo_parse_arglist
+from sphinx.util.inspect import signature_from_str
+from sphinx.addnodes import desc_parameterlist
+from docutils import nodes
+
+def test_parse_arglist():
+    # Test case from the GitHub issue: foo(a, b=0, /, c=1)
+    arglist = "a, b=0, /, c=1"
+    
+    print("Testing _parse_arglist with:", arglist)
+    try:
+        result = _parse_arglist(arglist)
+        print("_parse_arglist result:")
+        print(result.pformat())
+    except Exception as e:
+        print("_parse_arglist failed:", e)
+    
+    print("\nTesting _pseudo_parse_arglist with:", arglist)
+    try:
+        # Create a mock signode for testing
+        class MockSignode:
+            def __init__(self):
+                self.children = []
+            
+            def __iadd__(self, other):
+                self.children.append(other)
+                return self
+            
+            def pformat(self):
+                return "\n".join(str(child) for child in self.children)
+        
+        signode = MockSignode()
+        _pseudo_parse_arglist(signode, arglist)
+        print("_pseudo_parse_arglist result:")
+        print(signode.pformat())
+    except Exception as e:
+        print("_pseudo_parse_arglist failed:", e)
+
+if __name__ == "__main__":
+    test_parse_arglist()
\ No newline at end of file
diff --git a/test_signature_parsing.py b/test_signature_parsing.py
new file mode 100644
index 000000000..e6ab369c2
--- /dev/null
+++ b/test_signature_parsing.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+"""Test script to understand how signature parsing works."""
+
+from sphinx.util.inspect import signature_from_str
+import inspect
+
+def test_signature_parsing():
+    # Test case from the GitHub issue: foo(a, b=0, /, c=1)
+    arglist = "a, b=0, /, c=1"
+    
+    print("Testing signature_from_str with:", f"({arglist})")
+    try:
+        sig = signature_from_str(f"({arglist})")
+        print("Parsed signature:", sig)
+        
+        print("\nParameters:")
+        for name, param in sig.parameters.items():
+            print(f"  {name}: kind={param.kind}, default={param.default}")
+            
+    except Exception as e:
+        print("signature_from_str failed:", e)
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_signature_parsing()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
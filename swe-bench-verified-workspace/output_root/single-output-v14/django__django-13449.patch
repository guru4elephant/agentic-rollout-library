diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..a633e3e542 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -23,7 +23,8 @@ class SQLiteNumericMixin:
     def as_sqlite(self, compiler, connection, **extra_context):
         sql, params = self.as_sql(compiler, connection, **extra_context)
         try:
-            if self.output_field.get_internal_type() == 'DecimalField':
+            # Don't apply CAST for window functions, as the Window class will handle it
+            if self.output_field.get_internal_type() == 'DecimalField' and not getattr(self, '_in_window_context', False):
                 sql = 'CAST(%s AS NUMERIC)' % sql
         except FieldError:
             pass
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ebc6e395ec
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F
+from django.db.models.functions import Lag
+from django.db.models import Window
+
+# Create the test model
+class LagTest(models.Model):
+    modified = models.DateField()
+    data = models.FloatField()
+    amount = models.DecimalField(decimal_places=4, max_digits=7)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create the tables
+from django.db import connection
+
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(LagTest)
+
+# Test the issue
+print("Testing Lag with DecimalField on SQLite...")
+
+try:
+    w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())
+    q = LagTest.objects.all().annotate(w=w)
+    print("Query:", str(q.query))
+    # Try to actually execute the query
+    result = list(q)
+    print("Success: No error occurred!")
+except Exception as e:
+    print("Error:", str(e))
+    print("This reproduces the issue described in the GitHub issue.")
+
+# Test with FloatField (should work)
+print("\nTesting Lag with FloatField (should work)...")
+try:
+    w2 = Window(expression=Lag('data', 7), partition_by=[F('modified')], order_by=F('modified').asc())
+    q2 = LagTest.objects.all().annotate(w2=w2)
+    print("Query:", str(q2.query))
+    print("Success: No error with FloatField!")
+except Exception as e:
+    print("Error with FloatField:", str(e))
+
+# Test with output_field override (workaround)
+print("\nTesting Lag with output_field=FloatField() (workaround)...")
+try:
+    from django.db.models import FloatField
+    w3 = Window(expression=Lag('amount', 7, output_field=FloatField()), partition_by=[F('modified')], order_by=F('modified').asc())
+    q3 = LagTest.objects.all().annotate(w3=w3)
+    print("Query:", str(q3.query))
+    print("Success: Workaround works!")
+except Exception as e:
+    print("Error with workaround:", str(e))
\ No newline at end of file
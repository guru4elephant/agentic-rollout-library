diff --git a/check_conditional.py b/check_conditional.py
new file mode 100644
index 0000000000..3f7bd45f43
--- /dev/null
+++ b/check_conditional.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""
+Script to check if Exists has the conditional attribute.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Checking conditional attribute:")
+print("Q.conditional:", getattr(Q, 'conditional', 'NOT FOUND'))
+print("Exists.conditional:", getattr(Exists, 'conditional', 'NOT FOUND'))
+
+# Check instance attributes
+q_instance = Q()
+exists_instance = Exists(Product.objects.all())
+print("q_instance.conditional:", getattr(q_instance, 'conditional', 'NOT FOUND'))
+print("exists_instance.conditional:", getattr(exists_instance, 'conditional', 'NOT FOUND'))
\ No newline at end of file
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..13ff5b77d6 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,6 +41,14 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
+            # Handle conditional expressions that aren't Q objects
+            if getattr(other, 'conditional', False):
+                # Create a new Q object and add the conditional expression as a child
+                obj = type(self)()
+                obj.connector = conn
+                obj.add(self, conn)
+                obj.add(other, conn)
+                return obj
             raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..49ce50c478
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the Q(...) & Exists(...) TypeError issue.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Testing Q() & Exists(...) vs Exists(...) & Q()")
+
+# Test 1: Exists(...) & Q() - This should work
+try:
+    result1 = Exists(Product.objects.all()) & Q()
+    print("✓ Exists(...) & Q() works:", result1)
+except Exception as e:
+    print("✗ Exists(...) & Q() failed:", e)
+
+# Test 2: Q() & Exists(...) - This should fail with current code
+try:
+    result2 = Q() & Exists(Product.objects.all())
+    print("✓ Q() & Exists(...) works:", result2)
+except Exception as e:
+    print("✗ Q() & Exists(...) failed:", e)
+
+print("\nDone!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..41d4bb1716
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+"""
+Script to test edge cases for Q() & Exists(...) fix.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Testing edge cases for Q() & Exists(...) fix:")
+
+# Test 1: Basic Q() & Exists(...)
+try:
+    result1 = Q() & Exists(Product.objects.all())
+    print("✓ Q() & Exists(...) works:", result1)
+except Exception as e:
+    print("✗ Q() & Exists(...) failed:", e)
+
+# Test 2: Exists(...) & Q()
+try:
+    result2 = Exists(Product.objects.all()) & Q()
+    print("✓ Exists(...) & Q() works:", result2)
+except Exception as e:
+    print("✗ Exists(...) & Q() failed:", e)
+
+# Test 3: Q(...) & Exists(...) with non-empty Q
+try:
+    result3 = Q(name="test") & Exists(Product.objects.all())
+    print("✓ Q(...) & Exists(...) works:", result3)
+except Exception as e:
+    print("✗ Q(...) & Exists(...) failed:", e)
+
+# Test 4: Multiple combinations
+try:
+    result4 = Q(name="test") & Exists(Product.objects.all()) & Q(price=10)
+    print("✓ Multiple combinations work:", result4)
+except Exception as e:
+    print("✗ Multiple combinations failed:", e)
+
+# Test 5: OR operator
+try:
+    result5 = Q(name="test") | Exists(Product.objects.all())
+    print("✓ Q(...) | Exists(...) works:", result5)
+except Exception as e:
+    print("✗ Q(...) | Exists(...) failed:", e)
+
+# Test 6: Non-conditional object should still raise TypeError
+try:
+    result6 = Q() & "not_conditional"
+    print("✗ Non-conditional object should have failed but didn't")
+except TypeError as e:
+    print("✓ Non-conditional object correctly raises TypeError:", e)
+except Exception as e:
+    print("✗ Non-conditional object raised unexpected error:", e)
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
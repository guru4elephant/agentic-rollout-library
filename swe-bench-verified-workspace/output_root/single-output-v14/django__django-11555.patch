diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..bdabc3aab9
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,130 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F
+from django.core.management.color import no_style
+from django.db import connection
+
+# Create models with multi-table inheritance and Meta.ordering containing expressions
+class ParentModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+        ordering = [F('name')]  # This is an expression, not a string
+
+class ChildModel(ParentModel):
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+def test_comprehensive():
+    print("Testing comprehensive scenario with multi-table inheritance...")
+    
+    # Create database tables using Django's schema editor
+    from django.db import connections
+    with connections['default'].schema_editor() as schema_editor:
+        schema_editor.create_model(ParentModel)
+        schema_editor.create_model(ChildModel)
+    
+    # Create some test data
+    ParentModel.objects.create(name="Charlie")
+    ParentModel.objects.create(name="Alice")
+    ParentModel.objects.create(name="Bob")
+    
+    ChildModel.objects.create(name="Dave", age=25)
+    ChildModel.objects.create(name="Eve", age=30)
+    
+    # Test 1: Basic order_by on parent model
+    print("\n1. Testing order_by() on parent model:")
+    try:
+        queryset = ParentModel.objects.order_by('name')
+        results = list(queryset)
+        print(f"Success: {len(results)} results")
+        for obj in results:
+            print(f"  - {obj.name}")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    # Test 2: order_by on child model (multi-table inheritance)
+    print("\n2. Testing order_by() on child model (multi-table inheritance):")
+    try:
+        queryset = ChildModel.objects.order_by('name')
+        results = list(queryset)
+        print(f"Success: {len(results)} results")
+        for obj in results:
+            print(f"  - {obj.name} (age: {obj.age})")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    # Test 3: Test with descending order
+    print("\n3. Testing descending order_by():")
+    try:
+        queryset = ChildModel.objects.order_by('-name')
+        results = list(queryset)
+        print(f"Success: {len(results)} results")
+        for obj in results:
+            print(f"  - {obj.name} (age: {obj.age})")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+        import traceback
+        traceback.print_exc()
+    
+    # Test 4: Test the get_order_dir function directly
+    print("\n4. Testing get_order_dir function directly:")
+    from django.db.models.sql.query import get_order_dir
+    from django.db.models.expressions import OrderBy
+    
+    # Test with OrderBy object
+    order_by_obj = OrderBy(F('name'))
+    try:
+        result = get_order_dir(order_by_obj, 'ASC')
+        print(f"OrderBy object: {result}")
+    except Exception as e:
+        print(f"OrderBy object failed: {e}")
+    
+    # Test with string
+    try:
+        result = get_order_dir('name', 'ASC')
+        print(f"String 'name': {result}")
+    except Exception as e:
+        print(f"String 'name' failed: {e}")
+    
+    # Test with descending string
+    try:
+        result = get_order_dir('-name', 'ASC')
+        print(f"String '-name': {result}")
+    except Exception as e:
+        print(f"String '-name' failed: {e}")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index e15e64cde4..86f025e92d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2217,6 +2217,23 @@ def get_order_dir(field, default='ASC'):
     The 'default' param is used to indicate which way no prefix (or a '+'
     prefix) should sort. The '-' prefix always sorts the opposite way.
     """
+    # Handle OrderBy objects
+    from django.db.models.expressions import OrderBy
+    if isinstance(field, OrderBy):
+        # Extract the expression and direction from the OrderBy object
+        expression = field.expression
+        # For simple field references, try to get the field name
+        if hasattr(expression, 'name'):
+            field_name = expression.name
+        elif hasattr(expression, 'target'):
+            field_name = expression.target.name
+        else:
+            # Fallback: use string representation
+            field_name = str(expression)
+        direction = 'DESC' if field.descending else 'ASC'
+        return field_name, direction
+    
+    # Handle string inputs (original behavior)
     dirn = ORDER_DIR[default]
     if field[0] == '-':
         return field[1:], dirn[1]
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..c030cb1b79
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import F
+from django.db.models.expressions import OrderBy
+from django.db.models.sql.query import get_order_dir
+
+def test_edge_cases():
+    print("Testing edge cases for get_order_dir fix...")
+    
+    # Test 1: Simple field expression
+    print("\n1. Testing simple field expression:")
+    order_by_obj = OrderBy(F('name'))
+    result = get_order_dir(order_by_obj, 'ASC')
+    print(f"OrderBy(F('name')): {result}")
+    
+    # Test 2: Complex expression (should fallback to string representation)
+    print("\n2. Testing complex expression:")
+    from django.db.models import Value
+    complex_expr = F('name') + Value(' suffix')
+    order_by_obj = OrderBy(complex_expr)
+    result = get_order_dir(order_by_obj, 'ASC')
+    print(f"OrderBy(complex_expr): {result}")
+    
+    # Test 3: OrderBy with descending=True
+    print("\n3. Testing descending OrderBy:")
+    order_by_obj = OrderBy(F('name'), descending=True)
+    result = get_order_dir(order_by_obj, 'ASC')
+    print(f"OrderBy(F('name'), descending=True): {result}")
+    
+    # Test 4: String inputs (should still work)
+    print("\n4. Testing string inputs:")
+    result = get_order_dir('name', 'ASC')
+    print(f"'name': {result}")
+    
+    result = get_order_dir('-name', 'ASC')
+    print(f"'-name': {result}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f0a879dc90
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F
+
+# Create models with multi-table inheritance and Meta.ordering containing expressions
+class ParentModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+        ordering = [F('name')]  # This is an expression, not a string
+
+class ChildModel(ParentModel):
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the issue
+def test_order_by_issue():
+    print("Testing order_by() with Meta.ordering containing expressions...")
+    
+    # Create database tables
+    from django.core.management.color import no_style
+    from django.db import connection
+    
+    style = no_style()
+    sql = connection.ops.sql_table_creation_suffix()
+    tables = connection.introspection.django_table_names()
+    seen_models = connection.introspection.django_table_names(only_existing=True)
+    
+    # Create tables
+    with connection.cursor() as cursor:
+        for sql in connection.ops.sql_create_table(ParentModel._meta, style):
+            cursor.execute(sql)
+        for sql in connection.ops.sql_create_table(ChildModel._meta, style):
+            cursor.execute(sql)
+    
+    # Create some test data
+    ParentModel.objects.create(name="Alice")
+    ParentModel.objects.create(name="Bob")
+    ParentModel.objects.create(name="Charlie")
+    
+    # This should trigger the bug when order_by() is called on the parent model
+    try:
+        queryset = ChildModel.objects.order_by('name')
+        print("Success: order_by() worked without error")
+        print(f"Query: {str(queryset.query)}")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_order_by_issue()
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..288fdebe28
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F
+from django.db.models.sql.query import get_order_dir
+
+# Test the get_order_dir function directly with different inputs
+def test_get_order_dir():
+    print("Testing get_order_dir function...")
+    
+    # Test with string (should work)
+    try:
+        result = get_order_dir('name', 'ASC')
+        print(f"String 'name': {result}")
+    except Exception as e:
+        print(f"String 'name' failed: {e}")
+    
+    # Test with OrderBy object (this should fail according to the issue)
+    from django.db.models.expressions import OrderBy
+    order_by_obj = OrderBy(F('name'))
+    
+    try:
+        result = get_order_dir(order_by_obj, 'ASC')
+        print(f"OrderBy object: {result}")
+    except Exception as e:
+        print(f"OrderBy object failed: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_get_order_dir()
\ No newline at end of file
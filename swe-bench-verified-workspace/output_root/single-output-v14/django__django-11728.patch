diff --git a/debug_detailed.py b/debug_detailed.py
new file mode 100644
index 0000000000..9435526c24
--- /dev/null
+++ b/debug_detailed.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+import re
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.utils import named_group_matcher
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+print("Original pattern:", pattern)
+print()
+
+# Let's manually trace through the replace_named_groups algorithm
+named_group_indices = [
+    (m.start(0), m.end(0), m.group(1))
+    for m in named_group_matcher.finditer(pattern)
+]
+
+print("named_group_indices:", named_group_indices)
+
+group_pattern_and_name = []
+for start, end, group_name in named_group_indices:
+    print(f"\nProcessing group '{group_name}' at position {start}-{end}")
+    print(f"Start of group pattern: '{pattern[start:end]}'")
+    
+    # Handle nested parentheses
+    unmatched_open_brackets, prev_char = 1, None
+    for idx, val in enumerate(pattern[end:]):
+        print(f"  idx={idx}, val='{val}', unmatched={unmatched_open_brackets}")
+        
+        # If brackets are balanced, the end of the string for the current
+        # named capture group pattern has been reached.
+        if unmatched_open_brackets == 0:
+            full_pattern = pattern[start:end + idx]
+            print(f"  Found end of group at position {end + idx}, full pattern: '{full_pattern}'")
+            group_pattern_and_name.append((full_pattern, group_name))
+            break
+
+        # Check for unescaped `(` and `)`. They mark the start and end of a
+        # nested group.
+        if val == '(' and prev_char != '\\':
+            unmatched_open_brackets += 1
+            print(f"    Found '(', unmatched now {unmatched_open_brackets}")
+        elif val == ')' and prev_char != '\\':
+            unmatched_open_brackets -= 1
+            print(f"    Found ')', unmatched now {unmatched_open_brackets}")
+        prev_char = val
+
+print(f"\nFinal group_pattern_and_name: {group_pattern_and_name}")
+
+# Replace the string for named capture groups with their group names.
+result = pattern
+for group_pattern, group_name in group_pattern_and_name:
+    print(f"Replacing '{group_pattern}' with '{group_name}'")
+    result = result.replace(group_pattern, group_name)
+
+print(f"Final result: {result}")
\ No newline at end of file
diff --git a/debug_loop_issue.py b/debug_loop_issue.py
new file mode 100644
index 0000000000..f5d389a77f
--- /dev/null
+++ b/debug_loop_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+import re
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.utils import named_group_matcher
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+# Let's examine the second group in detail
+named_group_indices = [
+    (m.start(0), m.end(0), m.group(1))
+    for m in named_group_matcher.finditer(pattern)
+]
+
+start, end, group_name = named_group_indices[1]
+print(f"Examining group '{group_name}' at {start}-{end}")
+print(f"Pattern from start: '{pattern[start:]}'")
+print(f"Pattern from end: '{pattern[end:]}'")
+print(f"Length of pattern from end: {len(pattern[end:])}")
+
+# Let's trace through the exact loop
+unmatched_open_brackets, prev_char = 1, None
+for idx, val in enumerate(pattern[end:]):
+    print(f"idx={idx}, val='{val}', unmatched={unmatched_open_brackets}")
+    
+    if unmatched_open_brackets == 0:
+        print(f"  BREAKING: unmatched_open_brackets == 0 at idx={idx}")
+        break
+
+    if val == '(' and prev_char != '\\':
+        unmatched_open_brackets += 1
+        print(f"    Found '(', unmatched now {unmatched_open_brackets}")
+    elif val == ')' and prev_char != '\\':
+        unmatched_open_brackets -= 1
+        print(f"    Found ')', unmatched now {unmatched_open_brackets}")
+    prev_char = val
+
+print(f"Final unmatched_open_brackets: {unmatched_open_brackets}")
+
+# Let's also check what happens if we manually verify the logic
+print("\nManual verification:")
+# The group is: (?P<related_field>\w+)
+# We start after the group name: at position 55, which is '\w+)'
+# Let's count the parentheses:
+# - We start with unmatched_open_brackets = 1 (for the opening parenthesis)
+# - We encounter: '\', 'w', '+', ')'
+# - The ')' should decrement unmatched_open_brackets to 0
+
+test_string = pattern[end:]  # This should be '\w+)'
+print(f"Test string: '{test_string}'")
+unmatched = 1
+for char in test_string:
+    if char == '(':
+        unmatched += 1
+    elif char == ')':
+        unmatched -= 1
+    print(f"char='{char}', unmatched={unmatched}")
+
+print(f"Final unmatched: {unmatched}")
\ No newline at end of file
diff --git a/debug_order_issue.py b/debug_order_issue.py
new file mode 100644
index 0000000000..faea733b51
--- /dev/null
+++ b/debug_order_issue.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+import re
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.utils import named_group_matcher
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+# Let's trace the exact order of operations for the second group
+named_group_indices = [
+    (m.start(0), m.end(0), m.group(1))
+    for m in named_group_matcher.finditer(pattern)
+]
+
+start, end, group_name = named_group_indices[1]
+print(f"Examining group '{group_name}' at {start}-{end}")
+
+# Simulate the exact algorithm
+unmatched_open_brackets, prev_char = 1, None
+for idx, val in enumerate(pattern[end:]):
+    print(f"\nIteration {idx}: val='{val}', unmatched={unmatched_open_brackets}")
+    print(f"  Check if unmatched_open_brackets == 0: {unmatched_open_brackets == 0}")
+    
+    # This is the check that happens FIRST in the current algorithm
+    if unmatched_open_brackets == 0:
+        print(f"  BREAKING: unmatched_open_brackets == 0")
+        break
+
+    # This is the processing that happens SECOND
+    if val == '(' and prev_char != '\\':
+        unmatched_open_brackets += 1
+        print(f"    Found '(', unmatched now {unmatched_open_brackets}")
+    elif val == ')' and prev_char != '\\':
+        unmatched_open_brackets -= 1
+        print(f"    Found ')', unmatched now {unmatched_open_brackets}")
+    prev_char = val
+
+print(f"\nFinal unmatched_open_brackets: {unmatched_open_brackets}")
+
+# Now let's simulate what should happen if we check AFTER processing
+print("\n=== CORRECTED ALGORITHM ===")
+unmatched_open_brackets, prev_char = 1, None
+for idx, val in enumerate(pattern[end:]):
+    print(f"\nIteration {idx}: val='{val}', unmatched={unmatched_open_brackets}")
+    
+    # Process the character first
+    if val == '(' and prev_char != '\\':
+        unmatched_open_brackets += 1
+        print(f"    Found '(', unmatched now {unmatched_open_brackets}")
+    elif val == ')' and prev_char != '\\':
+        unmatched_open_brackets -= 1
+        print(f"    Found ')', unmatched now {unmatched_open_brackets}")
+    prev_char = val
+    
+    # THEN check if we should break
+    print(f"  Check if unmatched_open_brackets == 0: {unmatched_open_brackets == 0}")
+    if unmatched_open_brackets == 0:
+        print(f"  BREAKING: unmatched_open_brackets == 0")
+        break
+
+print(f"\nFinal unmatched_open_brackets: {unmatched_open_brackets}")
\ No newline at end of file
diff --git a/debug_replace_named_groups.py b/debug_replace_named_groups.py
new file mode 100644
index 0000000000..4f5b43590a
--- /dev/null
+++ b/debug_replace_named_groups.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+import re
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.utils import replace_named_groups, named_group_matcher
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+print("Original pattern:", pattern)
+print()
+
+# Debug the regex matching
+print("named_group_matcher.finditer results:")
+for m in named_group_matcher.finditer(pattern):
+    print(f"  Match: '{m.group(0)}' at position {m.start(0)}-{m.end(0)}")
+    print(f"  Group 1: '{m.group(1)}'")
+print()
+
+# Test replace_named_groups step by step
+print("replace_named_groups result:", replace_named_groups(pattern))
+print()
+
+# Let's also test what happens when we manually find the end of each group
+def find_group_end(pattern, start_pos):
+    unmatched_open_brackets = 1
+    prev_char = None
+    for idx, val in enumerate(pattern[start_pos:]):
+        if val == '(' and prev_char != '\\':
+            unmatched_open_brackets += 1
+        elif val == ')' and prev_char != '\\':
+            unmatched_open_brackets -= 1
+            if unmatched_open_brackets == 0:
+                return start_pos + idx + 1
+        prev_char = val
+    return len(pattern)  # Return end of string if not properly closed
+
+# Find all named groups and their endings
+named_groups = []
+for m in named_group_matcher.finditer(pattern):
+    start = m.start(0)
+    group_name = m.group(1)
+    end = find_group_end(pattern, start)
+    group_pattern = pattern[start:end]
+    named_groups.append((group_pattern, group_name))
+    print(f"Group '{group_name}': '{group_pattern}'")
+
+print("\nIf we replace manually:")
+result = pattern
+for group_pattern, group_name in named_groups:
+    result = result.replace(group_pattern, group_name)
+print("Result:", result)
\ No newline at end of file
diff --git a/debug_second_group.py b/debug_second_group.py
new file mode 100644
index 0000000000..f83639eb66
--- /dev/null
+++ b/debug_second_group.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+import re
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.utils import named_group_matcher
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+print("Original pattern:", pattern)
+print()
+
+# Let's focus on the second group
+named_group_indices = [
+    (m.start(0), m.end(0), m.group(1))
+    for m in named_group_matcher.finditer(pattern)
+]
+
+print("named_group_indices:", named_group_indices)
+
+# Let's examine the second group specifically
+start, end, group_name = named_group_indices[1]
+print(f"\nExamining second group '{group_name}' at position {start}-{end}")
+print(f"Pattern from start to end: '{pattern[start:end]}'")
+print(f"Pattern from end onwards: '{pattern[end:]}'")
+
+# Manual tracing for the second group
+unmatched_open_brackets, prev_char = 1, None
+for idx, val in enumerate(pattern[end:]):
+    print(f"  idx={idx}, val='{val}', unmatched={unmatched_open_brackets}")
+    
+    if unmatched_open_brackets == 0:
+        full_pattern = pattern[start:end + idx]
+        print(f"  Found end of group at position {end + idx}, full pattern: '{full_pattern}'")
+        break
+
+    if val == '(' and prev_char != '\\':
+        unmatched_open_brackets += 1
+        print(f"    Found '(', unmatched now {unmatched_open_brackets}")
+    elif val == ')' and prev_char != '\\':
+        unmatched_open_brackets -= 1
+        print(f"    Found ')', unmatched now {unmatched_open_brackets}")
+    prev_char = val
+
+# Let's also check what happens if we manually find the closing parenthesis
+closing_pos = pattern.find(')', end)
+print(f"\nManual search for ')' after position {end}: found at {closing_pos}")
+if closing_pos != -1:
+    print(f"Full group would be: '{pattern[start:closing_pos+1]}'")
\ No newline at end of file
diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..8aef819e0a 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -167,12 +167,6 @@ def replace_named_groups(pattern):
         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
         unmatched_open_brackets, prev_char = 1, None
         for idx, val in enumerate(pattern[end:]):
-            # If brackets are balanced, the end of the string for the current
-            # named capture group pattern has been reached.
-            if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
-                break
-
             # Check for unescaped `(` and `)`. They mark the start and end of a
             # nested group.
             if val == '(' and prev_char != '\\':
@@ -181,6 +175,12 @@ def replace_named_groups(pattern):
                 unmatched_open_brackets -= 1
             prev_char = val
 
+            # If brackets are balanced, the end of the string for the current
+            # named capture group pattern has been reached.
+            if unmatched_open_brackets == 0:
+                group_pattern_and_name.append((pattern[start:end + idx], group_name))
+                break
+
     # Replace the string for named capture groups with their group names.
     for group_pattern, group_name in group_pattern_and_name:
         pattern = pattern.replace(group_pattern, group_name)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..14a07c16a3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.views import simplify_regex
+from django.contrib.admindocs.utils import replace_named_groups
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+print("Original pattern:", pattern)
+print("simplify_regex result:", simplify_regex(pattern))
+print("replace_named_groups result:", replace_named_groups(pattern))
+
+# Test with trailing slash (workaround mentioned in the issue)
+pattern_with_slash = pattern + '/'
+print("\nWith trailing slash:")
+print("simplify_regex result:", simplify_regex(pattern_with_slash))
+print("replace_named_groups result:", replace_named_groups(pattern_with_slash))
\ No newline at end of file
diff --git a/test_exact_implementation.py b/test_exact_implementation.py
new file mode 100644
index 0000000000..523460a771
--- /dev/null
+++ b/test_exact_implementation.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+import re
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.utils import named_group_matcher
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+# Exact copy of the replace_named_groups function for debugging
+def debug_replace_named_groups(pattern):
+    named_group_indices = [
+        (m.start(0), m.end(0), m.group(1))
+        for m in named_group_matcher.finditer(pattern)
+    ]
+    print(f"named_group_indices: {named_group_indices}")
+    
+    # Tuples of (named capture group pattern, group name).
+    group_pattern_and_name = []
+    # Loop over the groups and their start and end indices.
+    for start, end, group_name in named_group_indices:
+        print(f"\nProcessing group '{group_name}' at {start}-{end}")
+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
+        unmatched_open_brackets, prev_char = 1, None
+        found_end = False
+        for idx, val in enumerate(pattern[end:]):
+            # If brackets are balanced, the end of the string for the current
+            # named capture group pattern has been reached.
+            if unmatched_open_brackets == 0:
+                group_pattern = pattern[start:end + idx]
+                print(f"  Found end at idx={idx}, group_pattern: '{group_pattern}'")
+                group_pattern_and_name.append((group_pattern, group_name))
+                found_end = True
+                break
+
+            # Check for unescaped `(` and `)`. They mark the start and end of a
+            # nested group.
+            if val == '(' and prev_char != '\\':
+                unmatched_open_brackets += 1
+                print(f"    Found '(', unmatched now {unmatched_open_brackets}")
+            elif val == ')' and prev_char != '\\':
+                unmatched_open_brackets -= 1
+                print(f"    Found ')', unmatched now {unmatched_open_brackets}")
+            prev_char = val
+        
+        if not found_end:
+            print(f"  WARNING: Did not find end for group '{group_name}'")
+    
+    print(f"\nFinal group_pattern_and_name: {group_pattern_and_name}")
+    
+    # Replace the string for named capture groups with their group names.
+    for group_pattern, group_name in group_pattern_and_name:
+        print(f"Replacing '{group_pattern}' with '{group_name}'")
+        pattern = pattern.replace(group_pattern, group_name)
+    
+    return pattern
+
+print("Original pattern:", pattern)
+result = debug_replace_named_groups(pattern)
+print("\nFinal result:", result)
\ No newline at end of file
diff --git a/test_fixed_function.py b/test_fixed_function.py
new file mode 100644
index 0000000000..b16b608e33
--- /dev/null
+++ b/test_fixed_function.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.contrib.admindocs.views import simplify_regex
+from django.contrib.admindocs.utils import replace_named_groups
+
+# Test case from the issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+print("Original pattern:", pattern)
+print("simplify_regex result:", simplify_regex(pattern))
+print("replace_named_groups result:", replace_named_groups(pattern))
+
+# Test with trailing slash (workaround mentioned in the issue)
+pattern_with_slash = pattern + '/'
+print("\nWith trailing slash:")
+print("simplify_regex result:", simplify_regex(pattern_with_slash))
+print("replace_named_groups result:", replace_named_groups(pattern_with_slash))
+
+# Test some edge cases
+test_cases = [
+    r'^(?P<a>\w+)/b/(?P<c>\w+)/$',
+    r'^(?P<a>\w+)/b/(?P<c>\w+)$', 
+    r'^(?P<a>\w+)/b/(\w+)$',
+    r'^(?P<a>(x|y))/b/(?P<c>\w+)$',
+]
+
+print("\n=== Additional test cases ===")
+for test_pattern in test_cases:
+    result = simplify_regex(test_pattern)
+    print(f"'{test_pattern}' -> '{result}'")
\ No newline at end of file
diff --git a/django/template/engine.py b/django/template/engine.py
index dfaa67ba12..ff9ce58d59 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -160,7 +160,7 @@ class Engine:
         if isinstance(context, Context):
             return t.render(context)
         else:
-            return t.render(Context(context))
+            return t.render(Context(context, autoescape=self.autoescape))
 
     def select_template(self, template_name_list):
         """
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..dc8bcb960d
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+
+from django.template import Engine, Context
+import tempfile
+import os
+
+def test_engine_autoescape_fix():
+    """Comprehensive test to verify the Engine.render_to_string() autoescape fix"""
+    
+    print("Testing Engine.render_to_string() autoescape fix...")
+    
+    # Create temporary template file
+    template_content = "{{ value }}"
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
+        f.write(template_content)
+        template_path = f.name
+    
+    try:
+        context_data = {'value': '<script>alert("test")</script>'}
+        template_name = os.path.basename(template_path)
+        template_dir = os.path.dirname(template_path)
+        
+        # Test 1: Engine with autoescape=False
+        engine_false = Engine(autoescape=False, dirs=[template_dir])
+        
+        # Test render_to_string
+        result_render_false = engine_false.render_to_string(template_name, context_data)
+        
+        # Test direct rendering for comparison
+        template_false = engine_false.from_string(template_content)
+        result_direct_false = template_false.render(Context(context_data, autoescape=False))
+        
+        print(f"\n1. Engine with autoescape=False:")
+        print(f"   render_to_string: {result_render_false}")
+        print(f"   direct render:    {result_direct_false}")
+        print(f"   Results match: {result_render_false == result_direct_false}")
+        print(f"   Should NOT be escaped: {result_render_false == '<script>alert(\\\"test\\\")</script>'}")  # Should be True
+        
+        # Test 2: Engine with autoescape=True
+        engine_true = Engine(autoescape=True, dirs=[template_dir])
+        
+        result_render_true = engine_true.render_to_string(template_name, context_data)
+        template_true = engine_true.from_string(template_content)
+        result_direct_true = template_true.render(Context(context_data, autoescape=True))
+        
+        print(f"\n2. Engine with autoescape=True:")
+        print(f"   render_to_string: {result_render_true}")
+        print(f"   direct render:    {result_direct_true}")
+        print(f"   Results match: {result_render_true == result_direct_true}")
+        print(f"   Should be escaped: {result_render_true == '&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;'}")  # Should be True
+        
+        # Test 3: Key verification - different results based on autoescape setting
+        print(f"\n3. Key verification:")
+        print(f"   autoescape=False != autoescape=True: {result_render_false != result_render_true}")
+        print(f"   This should be True (different autoescape settings produce different results)")
+        
+        # Test 4: Context object passed directly (should not be affected by our change)
+        context_obj_false = Context(context_data, autoescape=False)
+        context_obj_true = Context(context_data, autoescape=True)
+        
+        result_context_false = engine_false.render_to_string(template_name, context_obj_false)
+        result_context_true = engine_false.render_to_string(template_name, context_obj_true)
+        
+        print(f"\n4. Context object behavior (engine autoescape should be ignored):")
+        print(f"   Context autoescape=False: {result_context_false}")
+        print(f"   Context autoescape=True:  {result_context_true}")
+        print(f"   Context objects produce different results: {result_context_false != result_context_true}")
+        
+        # Summary
+        print(f"\n=== SUMMARY ===")
+        print(f"‚úì render_to_string now honors engine.autoescape: {result_render_false != result_render_true}")
+        print(f"‚úì Results match direct rendering: {result_render_false == result_direct_false and result_render_true == result_direct_true}")
+        print(f"‚úì Context objects are not affected: {result_context_false != result_context_true}")
+        
+        if (result_render_false != result_render_true and 
+            result_render_false == result_direct_false and 
+            result_render_true == result_direct_true and
+            result_context_false != result_context_true):
+            print(f"\nüéâ SUCCESS: Engine.render_to_string() now properly honors the autoescape attribute!")
+            return True
+        else:
+            print(f"\n‚ùå FAILURE: The fix may not be working correctly")
+            return False
+            
+    finally:
+        os.unlink(template_path)
+
+if __name__ == "__main__":
+    success = test_engine_autoescape_fix()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..87f28b5975
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+from django.template import Engine, Context
+
+# Create engine with autoescape=False
+engine = Engine(autoescape=False)
+
+# Test template that would be autoescaped if autoescape=True
+template_content = "{{ value }}"
+
+# Create a template from string for direct rendering comparison
+template = engine.from_string(template_content)
+
+# Context with value that would be autoescaped
+context_data = {'value': '<script>alert("test")</script>'}
+
+# Test render_to_string method by creating a template first and then using it
+template_obj = engine.from_string(template_content)
+result1 = template_obj.render(Context(context_data))
+print("direct template render result (should NOT be escaped):", result1)
+
+# Create engine with autoescape=True for comparison
+engine_autoescape = Engine(autoescape=True)
+template_autoescape = engine_autoescape.from_string(template_content)
+result2 = template_autoescape.render(Context(context_data))
+print("direct template render result (SHOULD be escaped):", result2)
+
+# The issue is that render_to_string doesn't honor autoescape, so let's test that
+# We need to create a simple template file for this
+import tempfile
+import os
+
+with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
+    f.write(template_content)
+    template_path = f.name
+
+# Test render_to_string with autoescape=False
+result3 = engine.render_to_string(os.path.basename(template_path), context_data)
+print("render_to_string with autoescape=False result:", result3)
+
+# Test render_to_string with autoescape=True
+result4 = engine_autoescape.render_to_string(os.path.basename(template_path), context_data)
+print("render_to_string with autoescape=True result:", result4)
+
+# Clean up
+os.unlink(template_path)
+
+print("\nComparison:")
+print("autoescape=False direct render:", result1)
+print("autoescape=True direct render:", result2)
+print("autoescape=False render_to_string:", result3)
+print("autoescape=True render_to_string:", result4)
+print("\nIssue: render_to_string should honor autoescape setting")
+print("autoescape=False results should match:", result1 == result3)
+print("autoescape=True results should match:", result2 == result4)
+
+# They should be the same if autoescape is properly honored
+print("Results match:", result1 == result2)
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..586798970a
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from django.template import Engine, Context
+
+# Create engines with different autoescape settings
+engine_false = Engine(autoescape=False)
+engine_true = Engine(autoescape=True)
+
+# Simple template content
+template_content = "{{ value }}"
+context_data = {'value': '<script>alert("test")</script>'}
+
+# Test direct template rendering
+template_false = engine_false.from_string(template_content)
+template_true = engine_true.from_string(template_content)
+
+result_false = template_false.render(Context(context_data))
+result_true = template_true.render(Context(context_data))
+
+print("Direct rendering with autoescape=False:", result_false)
+print("Direct rendering with autoescape=True:", result_true)
+print("Results are different:", result_false != result_true)
+
+# Now let's examine the Context objects to understand autoescape behavior
+context_false = Context(context_data, autoescape=False)
+context_true = Context(context_data, autoescape=True)
+
+print("\nContext autoescape=False:", context_false.autoescape)
+print("Context autoescape=True:", context_true.autoescape)
+
+# The issue is that render_to_string creates Context without passing engine.autoescape
+# Let's look at the current implementation
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0d12f3d155
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+from django.template import Engine, Context
+import tempfile
+import os
+
+def test_edge_cases():
+    """Test edge cases for the autoescape fix"""
+    
+    # Create temporary template file
+    template_content = "{{ value }}"
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
+        f.write(template_content)
+        template_path = f.name
+    
+    try:
+        # Test 1: Context object passed directly (should not be modified)
+        engine = Engine(autoescape=False, dirs=[os.path.dirname(template_path)])
+        context_data = {'value': '<script>test</script>'}
+        context_obj = Context(context_data, autoescape=True)  # Explicitly set to True
+        
+        result = engine.render_to_string(os.path.basename(template_path), context_obj)
+        print("Context object passed directly (autoescape=True):", result)
+        print("Should be escaped:", result == '&lt;script&gt;test&lt;/script&gt;')
+        
+        # Test 2: Empty context
+        result_empty = engine.render_to_string(os.path.basename(template_path), {})
+        print("Empty context result:", result_empty)
+        
+        # Test 3: None context
+        result_none = engine.render_to_string(os.path.basename(template_path), None)
+        print("None context result:", result_none)
+        
+        # Test 4: Different autoescape values
+        engine_mixed = Engine(autoescape=False, dirs=[os.path.dirname(template_path)])
+        context_mixed = Context({'value': 'safe text'}, autoescape=True)
+        result_mixed = engine_mixed.render_to_string(os.path.basename(template_path), context_mixed)
+        print("Mixed engine=False, context=True:", result_mixed)
+        
+    finally:
+        os.unlink(template_path)
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..037330a90d
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+
+from django.template import Engine, Context
+import tempfile
+import os
+
+def test_autoescape_honored():
+    """Test that render_to_string honors the engine's autoescape setting"""
+    
+    # Create temporary template file
+    template_content = "{{ value }}"
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
+        f.write(template_content)
+        template_path = f.name
+    
+    try:
+        # Test with autoescape=False
+        engine_false = Engine(autoescape=False, dirs=[os.path.dirname(template_path)])
+        context_data = {'value': '<script>alert("test")</script>'}
+        
+        # Test render_to_string
+        result_render_to_string = engine_false.render_to_string(os.path.basename(template_path), context_data)
+        
+        # Test direct rendering for comparison
+        template = engine_false.from_string(template_content)
+        result_direct = template.render(Context(context_data, autoescape=False))
+        
+        print("autoescape=False:")
+        print("  render_to_string result:", result_render_to_string)
+        print("  direct render result:   ", result_direct)
+        print("  Results match:", result_render_to_string == result_direct)
+        print("  Should NOT be escaped:", result_render_to_string == '<script>alert("test")</script>')
+        
+        # Test with autoescape=True
+        engine_true = Engine(autoescape=True, dirs=[os.path.dirname(template_path)])
+        
+        result_render_to_string_true = engine_true.render_to_string(os.path.basename(template_path), context_data)
+        template_true = engine_true.from_string(template_content)
+        result_direct_true = template_true.render(Context(context_data, autoescape=True))
+        
+        print("\nautoescape=True:")
+        print("  render_to_string result:", result_render_to_string_true)
+        print("  direct render result:   ", result_direct_true)
+        print("  Results match:", result_render_to_string_true == result_direct_true)
+        print("  Should be escaped:", result_render_to_string_true == '&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;')
+        
+        # The key test: results should be different based on autoescape setting
+        print("\nKey test - different autoescape settings produce different results:")
+        print("  autoescape=False != autoescape=True:", result_render_to_string != result_render_to_string_true)
+        
+    finally:
+        # Clean up
+        os.unlink(template_path)
+
+if __name__ == "__main__":
+    test_autoescape_honored()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6211150afc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the admin search JOIN issue
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.contrib import admin
+from django.contrib.admin.options import BaseModelAdmin
+
+# Create test models as described in the issue
+class Client(models.Model):
+    name = models.CharField('name', max_length=256)
+    name2 = models.CharField('unofficial or obsolete name', max_length=256, blank=True, null=True)
+    contact_person = models.CharField('contact person', max_length=256, blank=True, null=True)
+    
+    class Meta:
+        app_label = 'test'
+
+class ClientOffice(models.Model):
+    name = models.CharField('name', max_length=256)
+    name2 = models.CharField('unofficial or obsolete name', max_length=256, blank=True, null=True)
+    client = models.ForeignKey(Client, verbose_name='client', on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create admin class with search_fields as described in the issue
+class ClientAdmin(admin.ModelAdmin):
+    search_fields = ('name', 'name2', 'contact_person')
+
+def test_search_query():
+    """Test the search functionality and show the SQL queries"""
+    from django.db import connection
+    from django.test import RequestFactory
+    from django.contrib.admin.sites import AdminSite
+    
+    # Create admin site
+    site = AdminSite()
+    
+    # Create a mock request
+    factory = RequestFactory()
+    request = factory.get('/admin/test/client/?q=test search query')
+    
+    # Create admin instance
+    admin_instance = ClientAdmin(Client, site)
+    
+    # Get base queryset
+    queryset = Client.objects.all()
+    
+    # Reset query log
+    connection.queries_log.clear()
+    
+    # Apply search
+    search_term = "test search query"
+    result_queryset, may_have_duplicates = admin_instance.get_search_results(request, queryset, search_term)
+    
+    # Print SQL queries
+    print("SQL Queries executed:")
+    for i, query in enumerate(connection.queries):
+        print(f"Query {i+1}: {query['sql']}")
+        print(f"  Time: {query['time']}")
+    
+    print(f"\nTotal queries: {len(connection.queries)}")
+    print(f"May have duplicates: {may_have_duplicates}")
+
+if __name__ == '__main__':
+    test_search_query()
\ No newline at end of file
diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..71951809e7
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,106 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.exceptions import ValidationError
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField(max_length=100)
+    email = forms.EmailField()
+
+# Create a formset with custom clean method
+class CustomFormSet(forms.BaseFormSet):
+    def clean(self):
+        # Add a non-form error from clean method
+        raise ValidationError("Clean method validation error")
+
+TestFormSet = formset_factory(TestForm, formset=CustomFormSet, extra=2)
+
+print("=== FINAL VERIFICATION ===")
+print("Testing that non-form errors in FormSets get 'nonform' CSS class")
+print("=" * 50)
+
+print("\n1. Testing management form errors (should have 'nonform' class):")
+data1 = {
+    'form-TOTAL_FORMS': 'invalid',  # Invalid management form
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'Test 1',
+    'form-0-email': 'test1@example.com',
+}
+
+formset1 = TestFormSet(data1)
+html_output = formset1.non_form_errors().as_ul()
+print(f"HTML output: {html_output}")
+print(f"Error class: {formset1.non_form_errors().error_class}")
+
+# Verify the nonform class is present
+assert 'nonform' in formset1.non_form_errors().error_class, "Management form errors should have 'nonform' class"
+assert 'class="errorlist nonform"' in html_output, "HTML should contain 'nonform' class"
+print("âœ“ Management form errors correctly have 'nonform' class")
+
+print("\n2. Testing clean method validation errors (should have 'nonform' class):")
+data2 = {
+    'form-TOTAL_FORMS': '2',  # Valid management form
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'Test 1',
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'Test 2',
+    'form-1-email': 'test2@example.com',
+}
+
+formset2 = TestFormSet(data2)
+html_output = formset2.non_form_errors().as_ul()
+print(f"HTML output: {html_output}")
+print(f"Error class: {formset2.non_form_errors().error_class}")
+
+# Verify the nonform class is present
+assert 'nonform' in formset2.non_form_errors().error_class, "Clean method errors should have 'nonform' class"
+assert 'class="errorlist nonform"' in html_output, "HTML should contain 'nonform' class"
+print("âœ“ Clean method errors correctly have 'nonform' class")
+
+print("\n3. Comparing with form non-field errors (should have 'nonfield' class):")
+form = TestForm({'name': '', 'email': 'invalid'})
+form.add_error(None, 'This is a non-field error')
+html_output = form.non_field_errors().as_ul()
+print(f"Form non-field HTML: {html_output}")
+print(f"Form error class: {form.non_field_errors().error_class}")
+
+# Verify the nonfield class is present
+assert 'nonfield' in form.non_field_errors().error_class, "Form non-field errors should have 'nonfield' class"
+assert 'class="errorlist nonfield"' in html_output, "HTML should contain 'nonfield' class"
+print("âœ“ Form non-field errors correctly have 'nonfield' class")
+
+print("\n4. Summary:")
+print("âœ“ FormSets non-form errors: errorlist nonform")
+print("âœ“ Forms non-field errors: errorlist nonfield") 
+print("âœ“ Both follow the same pattern but with different class names")
+print("âœ“ Custom ErrorList implementations can now distinguish between:")
+print("   - Form field errors (errorlist)")
+print("   - Form non-field errors (errorlist nonfield)") 
+print("   - FormSet non-form errors (errorlist nonform)")
+
+print("\nðŸŽ‰ IMPLEMENTATION SUCCESSFUL! The issue has been resolved.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c63512f780
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField(max_length=100)
+    email = forms.EmailField()
+
+# Create a formset
+TestFormSet = formset_factory(TestForm, extra=2)
+
+# Test data with non-form errors
+data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'Test 1',
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'Test 2',
+    'form-1-email': 'invalid-email',  # This will cause a form error
+}
+
+# Create formset and add a non-form error by making management form invalid
+data_invalid = data.copy()
+data_invalid['form-TOTAL_FORMS'] = 'invalid'  # This will cause a non-form error
+
+formset = TestFormSet(data_invalid)
+
+print("Formset errors:")
+print("Non-form errors:", formset.non_form_errors())
+
+# Check the HTML output
+print("\nHTML output of non-form errors:")
+print(formset.non_form_errors().as_ul())
+
+# Let's also check what CSS classes are applied
+print("\nError class of non-form errors:", formset.non_form_errors().error_class)
+
+# For comparison, let's check a form's non-field errors
+form = TestForm({'name': '', 'email': 'invalid'})
+form.add_error(None, 'This is a non-field error')
+
+print("\nForm non-field errors HTML:")
+print(form.non_field_errors().as_ul())
+print("Error class of non-field errors:", form.non_field_errors().error_class)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..4caa94e4b8
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.exceptions import ValidationError
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField(max_length=100)
+    email = forms.EmailField()
+
+# Create a formset with custom clean method
+class CustomFormSet(forms.BaseFormSet):
+    def clean(self):
+        # Add a non-form error from clean method
+        raise ValidationError("This is a clean method non-form error")
+
+TestFormSet = formset_factory(TestForm, formset=CustomFormSet, extra=2)
+
+print("=== Test 1: Management form errors ===")
+# Test data with invalid management form
+data1 = {
+    'form-TOTAL_FORMS': 'invalid',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'Test 1',
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'Test 2',
+    'form-1-email': 'test2@example.com',
+}
+
+formset1 = TestFormSet(data1)
+print("Non-form errors:", formset1.non_form_errors())
+print("HTML output:", formset1.non_form_errors().as_ul())
+print("Error class:", formset1.non_form_errors().error_class)
+
+print("\n=== Test 2: Clean method errors ===")
+# Test data that will trigger clean method error
+data2 = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'Test 1',
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'Test 2',
+    'form-1-email': 'test2@example.com',
+}
+
+formset2 = TestFormSet(data2)
+print("Non-form errors:", formset2.non_form_errors())
+print("HTML output:", formset2.non_form_errors().as_ul())
+print("Error class:", formset2.non_form_errors().error_class)
+
+print("\n=== Test 3: Regular form non-field errors for comparison ===")
+form = TestForm({'name': '', 'email': 'invalid'})
+form.add_error(None, 'This is a non-field error')
+print("Non-field errors HTML:", form.non_field_errors().as_ul())
+print("Error class:", form.non_field_errors().error_class)
\ No newline at end of file
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 9de2c60b35..8235aaac01 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1258,7 +1258,7 @@ class JSONField(CharField):
     def prepare_value(self, value):
         if isinstance(value, InvalidJSONInput):
             return value
-        return json.dumps(value, cls=self.encoder)
+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)
 
     def has_changed(self, initial, data):
         if super().has_changed(initial, data):
diff --git a/final_demonstration.py b/final_demonstration.py
new file mode 100644
index 0000000000..d41812cac4
--- /dev/null
+++ b/final_demonstration.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+import json
+from django.forms import JSONField
+
+def demonstrate_fix():
+    print("=== Demonstrating the Fix for Unicode Characters in JSONField ===")
+    print()
+    
+    # Create a JSONField instance
+    json_field = JSONField()
+    
+    # Test data with Chinese characters (from the original issue)
+    test_data = {'country': '‰∏≠ÂõΩ', 'message': '‰Ω†Â•Ω‰∏ñÁïå'}
+    
+    print("Original data (Python dict):")
+    print(f"  {test_data}")
+    print()
+    
+    # Show what json.dumps() does by default (the problem)
+    default_dumps = json.dumps(test_data)
+    print("json.dumps() (default behavior - THE PROBLEM):")
+    print(f"  {default_dumps}")
+    print("  ^ Contains Unicode escape sequences: \\u4e2d\\u56fd, \\u4f60\\u597d\\u4e16\\u754c")
+    print()
+    
+    # Show what json.dumps() with ensure_ascii=False does (the solution)
+    proper_dumps = json.dumps(test_data, ensure_ascii=False)
+    print("json.dumps(ensure_ascii=False) (the solution):")
+    print(f"  {proper_dumps}")
+    print("  ^ Contains actual Chinese characters: ‰∏≠ÂõΩ, ‰Ω†Â•Ω‰∏ñÁïå")
+    print()
+    
+    # Show what JSONField.prepare_value() now returns (after the fix)
+    prepared_value = json_field.prepare_value(test_data)
+    print("JSONField.prepare_value() (after the fix):")
+    print(f"  {prepared_value}")
+    print("  ^ Contains actual Chinese characters: ‰∏≠ÂõΩ, ‰Ω†Â•Ω‰∏ñÁïå")
+    print()
+    
+    # Verify the fix worked
+    if '\\u' in prepared_value:
+        print("‚ùå FAILED: Still contains Unicode escape sequences")
+        return False
+    elif '‰∏≠ÂõΩ' in prepared_value and '‰Ω†Â•Ω‰∏ñÁïå' in prepared_value:
+        print("‚úÖ SUCCESS: Contains actual Chinese characters, no escape sequences!")
+        return True
+    else:
+        print("‚ùì UNEXPECTED: Unknown result")
+        return False
+
+if __name__ == "__main__":
+    success = demonstrate_fix()
+    if success:
+        print("\nüéâ The GitHub issue has been successfully resolved!")
+        print("   Unicode characters will now display properly in Django admin JSONFields.")
+    else:
+        print("\nüí• The fix did not work as expected.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..113cfeedcf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+import json
+from django.forms import JSONField
+
+# Test the issue described in the GitHub issue
+def test_jsonfield_unicode_chars():
+    # Create a JSONField instance
+    json_field = JSONField()
+    
+    # Test data with Chinese characters
+    test_data = {'chinese': '‰∏≠ÂõΩ'}
+    
+    # Test what happens when prepare_value is called (this is what happens in admin)
+    prepared_value = json_field.prepare_value(test_data)
+    
+    print("Original data:", test_data)
+    print("Prepared value:", prepared_value)
+    print("Type of prepared value:", type(prepared_value))
+    
+    # Compare with direct json.dumps
+    direct_dumps = json.dumps(test_data)
+    direct_dumps_ascii_false = json.dumps(test_data, ensure_ascii=False)
+    
+    print("\nDirect json.dumps():", direct_dumps)
+    print("Direct json.dumps(ensure_ascii=False):", direct_dumps_ascii_false)
+    
+    # Check if the issue exists
+    if '\\u' in prepared_value and '\\u' not in direct_dumps_ascii_false:
+        print("\n‚ùå ISSUE CONFIRMED: JSONField uses ASCII encoding by default")
+        return False
+    else:
+        print("\n‚úÖ Issue appears to be fixed")
+        return True
+
+if __name__ == "__main__":
+    test_jsonfield_unicode_chars()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6d974ac9ed
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+import json
+from django.forms import JSONField
+
+def test_edge_cases():
+    json_field = JSONField()
+    
+    # Test 1: Basic Chinese characters
+    test_data1 = {'chinese': '‰∏≠ÂõΩ'}
+    result1 = json_field.prepare_value(test_data1)
+    print("Test 1 - Chinese characters:")
+    print(f"  Input: {test_data1}")
+    print(f"  Output: {result1}")
+    unicode_escape = '\\u' in result1
+    print(f"  Contains Unicode escapes: {unicode_escape}")
+    print()
+    
+    # Test 2: Mixed content
+    test_data2 = {'english': 'hello', 'chinese': '‰∏ñÁïå', 'numbers': [1, 2, 3]}
+    result2 = json_field.prepare_value(test_data2)
+    print("Test 2 - Mixed content:")
+    print(f"  Input: {test_data2}")
+    print(f"  Output: {result2}")
+    unicode_escape = '\\u' in result2
+    print(f"  Contains Unicode escapes: {unicode_escape}")
+    print()
+    
+    # Test 3: Nested structures with Unicode
+    test_data3 = {
+        'level1': {
+            'level2': {
+                'text': '‰∏≠ÊñáÊµãËØï',
+                'list': ['È°πÁõÆ1', 'È°πÁõÆ2']
+            }
+        }
+    }
+    result3 = json_field.prepare_value(test_data3)
+    print("Test 3 - Nested structures:")
+    print(f"  Input: {test_data3}")
+    print(f"  Output: {result3}")
+    unicode_escape = '\\u' in result3
+    print(f"  Contains Unicode escapes: {unicode_escape}")
+    print()
+    
+    # Test 4: Regular ASCII text (should still work)
+    test_data4 = {'english': 'hello world', 'numbers': 123}
+    result4 = json_field.prepare_value(test_data4)
+    print("Test 4 - ASCII only:")
+    print(f"  Input: {test_data4}")
+    print(f"  Output: {result4}")
+    unicode_escape = '\\u' in result4
+    print(f"  Contains Unicode escapes: {unicode_escape}")
+    print()
+    
+    # Test 5: Empty values
+    test_data5 = None
+    result5 = json_field.prepare_value(test_data5)
+    print("Test 5 - None value:")
+    print(f"  Input: {test_data5}")
+    print(f"  Output: {result5}")
+    print(f"  Type: {type(result5)}")
+    print()
+    
+    # Test 6: Custom encoder (should still work with custom encoder)
+    class CustomEncoder(json.JSONEncoder):
+        def default(self, obj):
+            if isinstance(obj, set):
+                return list(obj)
+            return super().default(obj)
+    
+    json_field_custom = JSONField(encoder=CustomEncoder)
+    test_data6 = {'set_data': {1, 2, 3}, 'text': 'ÊµãËØï'}
+    result6 = json_field_custom.prepare_value(test_data6)
+    print("Test 6 - Custom encoder:")
+    print(f"  Input: {test_data6}")
+    print(f"  Output: {result6}")
+    unicode_escape = '\\u' in result6
+    print(f"  Contains Unicode escapes: {unicode_escape}")
+    print()
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..6ab7651647
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+from django.forms import JSONField
+
+def test_ascii_content():
+    """Test that ASCII content still works as expected"""
+    field = JSONField()
+    result = field.prepare_value({'a': 'b'})
+    expected = '{"a": "b"}'
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("‚úÖ ASCII content test passed")
+
+def test_unicode_content():
+    """Test that Unicode content is now properly displayed"""
+    field = JSONField()
+    result = field.prepare_value({'chinese': '‰∏≠ÂõΩ'})
+    # Should NOT contain Unicode escape sequences
+    assert '\\u' not in result, f"Result contains Unicode escapes: {result}"
+    # Should contain the actual Chinese characters
+    assert '‰∏≠ÂõΩ' in result, f"Result doesn't contain Chinese characters: {result}"
+    print("‚úÖ Unicode content test passed")
+
+def test_none_value():
+    """Test that None values are handled correctly"""
+    field = JSONField()
+    result = field.prepare_value(None)
+    expected = 'null'
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("‚úÖ None value test passed")
+
+def test_string_value():
+    """Test that string values are handled correctly"""
+    field = JSONField()
+    result = field.prepare_value('foo')
+    expected = '"foo"'
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("‚úÖ String value test passed")
+
+if __name__ == "__main__":
+    test_ascii_content()
+    test_unicode_content()
+    test_none_value()
+    test_string_value()
+    print("\nüéâ All tests passed! The fix is working correctly.")
\ No newline at end of file
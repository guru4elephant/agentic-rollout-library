diff --git a/debug_dtype.py b/debug_dtype.py
new file mode 100644
index 00000000..e25daddf
--- /dev/null
+++ b/debug_dtype.py
@@ -0,0 +1,19 @@
+import xarray as xr
+import numpy as np
+
+ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})
+print("Original dtype:", ds['a'].values.dtype)
+print("Original values type:", type(ds['a'].values))
+
+stacked = ds.stack(b=('a',))
+print("Stacked dtype:", stacked['a'].values.dtype)
+print("Stacked values type:", type(stacked['a'].values))
+
+# Let's also check the variable directly
+original_var = ds['a'].variable
+print("Original variable dtype:", original_var.dtype)
+print("Original variable data type:", type(original_var.data))
+
+stacked_var = stacked['a'].variable
+print("Stacked variable dtype:", stacked_var.dtype)
+print("Stacked variable data type:", type(stacked_var.data))
\ No newline at end of file
diff --git a/debug_indexing.py b/debug_indexing.py
new file mode 100644
index 00000000..9dbfe3f9
--- /dev/null
+++ b/debug_indexing.py
@@ -0,0 +1,23 @@
+import xarray as xr
+import numpy as np
+
+ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})
+stacked = ds.stack(b=('a',))
+
+print("=== Variable level ===")
+print("Original variable dtype:", ds['a'].variable.dtype)
+print("Stacked variable dtype:", stacked['a'].variable.dtype)
+
+print("\n=== DataArray level ===")
+print("Original DataArray dtype:", ds['a'].dtype)
+print("Stacked DataArray dtype:", stacked['a'].dtype)
+
+print("\n=== Values level ===")
+print("Original values dtype:", ds['a'].values.dtype)
+print("Stacked values dtype:", stacked['a'].values.dtype)
+
+# Let's check if the issue is with the MultiIndex
+print("\n=== MultiIndex check ===")
+print("Stacked coordinate 'b':", stacked.coords['b'])
+print("Stacked coordinate 'b' dtype:", stacked.coords['b'].dtype)
+print("Stacked coordinate 'b' values dtype:", stacked.coords['b'].values.dtype)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..2ae2ba49
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,7 @@
+import xarray as xr
+import numpy as np
+
+ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})
+print("Original dtype:", ds['a'].values.dtype)
+print("Stacked dtype:", ds.stack(b=('a',))['a'].values.dtype)
+print("Are they equal?", ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype)
\ No newline at end of file
diff --git a/test_asarray.py b/test_asarray.py
new file mode 100644
index 00000000..92458d3c
--- /dev/null
+++ b/test_asarray.py
@@ -0,0 +1,11 @@
+import numpy as np
+
+# Test what happens with np.asarray
+data = np.array([0], dtype='i4')
+print("Original dtype:", data.dtype)
+print("After np.asarray:", np.asarray(data).dtype)
+
+# Let's also test with a more complex case that might be happening
+data_reshaped = data.reshape(1, 1)
+print("After reshape:", data_reshaped.dtype)
+print("After reshape + asarray:", np.asarray(data_reshaped).dtype)
\ No newline at end of file
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 118e7c48..eb78a2d0 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -1694,6 +1694,9 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):
 
         new_shape = reordered.shape[: len(other_dims)] + (-1,)
         new_data = duck_array_ops.reshape(reordered.data, new_shape)
+        # Preserve the original dtype to prevent unintended type promotion
+        if hasattr(new_data, 'dtype') and hasattr(reordered.data, 'dtype'):
+            new_data = new_data.astype(reordered.data.dtype)
         new_dims = reordered.dims[: len(other_dims)] + (new_dim,)
 
         return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)
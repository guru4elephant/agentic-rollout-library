diff --git a/debug_nan.py b/debug_nan.py
new file mode 100644
index 0000000000..0f21931fca
--- /dev/null
+++ b/debug_nan.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""Debug script to understand NaN handling."""
+
+from sympy import *
+from sympy.abc import a
+
+def debug_nan():
+    """Debug NaN handling in factor_terms."""
+    # Create a simple expression that might contain NaN
+    expr = nan
+    print(f"expr = {expr}")
+    print(f"expr type = {type(expr)}")
+    print(f"expr is_number = {expr.is_number}")
+    print(f"expr is_comparable = {expr.is_comparable}")
+    # print(f"expr < 0 = {expr < 0}")  # This will cause error
+    
+    # Test as_coeff_Mul
+    coeff, mul = expr.as_coeff_Mul()
+    print(f"as_coeff_Mul result: coeff={coeff}, mul={mul}")
+    print(f"coeff type = {type(coeff)}")
+    print(f"coeff is_number = {coeff.is_number}")
+    print(f"coeff < 0 = {coeff < 0}")
+
+if __name__ == "__main__":
+    debug_nan()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..59b816b61e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+"""Script to reproduce the matrix determinant NaN comparison issue."""
+
+from sympy import *
+from sympy.abc import a
+
+def test_issue():
+    """Test the issue with matrix determinant calculation."""
+    print("Testing matrix determinant with symbolic entries...")
+    
+    f = lambda n: det(Matrix([[i + a*j for i in range(n)] for j in range(n)]))
+    
+    # Test cases from the issue
+    sizes = [1, 2, 3, 4, 5, 6]
+    
+    for n in sizes:
+        try:
+            result = f(n)
+            print(f"f({n}) = {result}")
+        except Exception as e:
+            print(f"f({n}) = ERROR: {type(e).__name__}: {e}")
+
+if __name__ == "__main__":
+    test_issue()
\ No newline at end of file
diff --git a/sympy/core/exprtools.py b/sympy/core/exprtools.py
index 4e0de9ec18..aeb2f35fd0 100644
--- a/sympy/core/exprtools.py
+++ b/sympy/core/exprtools.py
@@ -1176,7 +1176,7 @@ def do(expr):
         if p.is_Add:
             list_args = [do(a) for a in Add.make_args(p)]
             # get a common negative (if there) which gcd_terms does not remove
-            if all(a.as_coeff_Mul()[0] < 0 for a in list_args):
+            if all(a.as_coeff_Mul()[0].is_number and a.as_coeff_Mul()[0].is_comparable and a.as_coeff_Mul()[0] < 0 for a in list_args):
                 cont = -cont
                 list_args = [-a for a in list_args]
             # watch out for exp(-(x+2)) which gcd_terms will change to exp(-x-2)
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..8cd0eb9ea1
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""Test script to verify the fix doesn't break normal functionality."""
+
+from sympy import *
+from sympy.abc import a, x, y
+
+def test_normal_cases():
+    """Test that normal determinant calculations still work."""
+    print("Testing normal determinant cases...")
+    
+    # Test with regular numbers
+    M1 = Matrix([[1, 2], [3, 4]])
+    print(f"det([[1, 2], [3, 4]]) = {det(M1)}")
+    
+    # Test with symbols (should work normally)
+    M2 = Matrix([[x, y], [y, x]])
+    print(f"det([[x, y], [y, x]]) = {det(M2)}")
+    
+    # Test with negative numbers
+    M3 = Matrix([[-1, -2], [-3, -4]])
+    print(f"det([[-1, -2], [-3, -4]]) = {det(M3)}")
+    
+    # Test the original problematic case but with smaller sizes
+    f = lambda n: det(Matrix([[i + a*j for i in range(n)] for j in range(n)]))
+    for n in [1, 2, 3, 4]:
+        result = f(n)
+        print(f"f({n}) = {result}")
+
+def test_nan_cases():
+    """Test cases that should produce NaN."""
+    print("\nTesting NaN cases...")
+    
+    # Test division by zero that produces NaN
+    expr = nan
+    print(f"0/0 = {expr}")
+    
+    # Test that factor_terms handles NaN correctly
+    from sympy.core.exprtools import factor_terms
+    try:
+        result = factor_terms(expr)
+        print(f"factor_terms(0/0) = {result}")
+    except Exception as e:
+        print(f"factor_terms(0/0) failed: {e}")
+
+if __name__ == "__main__":
+    test_normal_cases()
+    test_nan_cases()
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..43652328c0
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""Test the exact case from the GitHub issue."""
+
+from sympy import *
+from sympy.abc import a
+
+# Exact test case from the GitHub issue
+f = lambda n: det(Matrix([[i + a*j for i in range(n)] for j in range(n)]))
+
+print("Testing the exact GitHub issue case...")
+print(f"f(1) = {f(1)}")
+print(f"f(2) = {f(2)}") 
+print(f"f(3) = {f(3)}")
+print(f"f(4) = {f(4)}")
+print(f"f(5) = {f(5)}")
+print(f"f(6) = {f(6)}")
+
+# Test that no TypeError is raised
+try:
+    result = f(6)
+    print(f"f(6) successfully returned: {result}")
+except TypeError as e:
+    print(f"TypeError still occurs: {e}")
+except Exception as e:
+    print(f"Other error: {e}")
\ No newline at end of file
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..c049c0b90
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.experimental import enable_iterative_imputer
+from sklearn.impute import IterativeImputer
+
+# Create some sample data with missing values
+X = np.array([[1, 2, np.nan], [4, np.nan, 6], [7, 8, 9]])
+
+print("Original data:")
+print(X)
+
+# Test 1: fill_value with constant strategy
+print("\n=== Test 1: fill_value=999 with constant strategy ===")
+imputer = IterativeImputer(
+    initial_strategy="constant",
+    fill_value=999,
+    max_iter=0  # No iterative imputation, just initial
+)
+X_imputed = imputer.fit_transform(X)
+print("Imputation result:")
+print(X_imputed)
+print("Initial imputer statistics:", imputer.initial_imputer_.statistics_)
+print("Initial imputer fill_value:", imputer.initial_imputer_.fill_value)
+
+# Test 2: np.nan as fill_value (as requested in the issue)
+print("\n=== Test 2: fill_value=np.nan with constant strategy ===")
+imputer = IterativeImputer(
+    initial_strategy="constant",
+    fill_value=np.nan,
+    max_iter=0
+)
+X_imputed = imputer.fit_transform(X)
+print("Imputation result:")
+print(X_imputed)
+print("Initial imputer statistics:", imputer.initial_imputer_.statistics_)
+print("Initial imputer fill_value:", imputer.initial_imputer_.fill_value)
+
+# Test 3: Default behavior (no fill_value specified with constant)
+print("\n=== Test 3: constant strategy without fill_value (default) ===")
+imputer = IterativeImputer(
+    initial_strategy="constant",
+    max_iter=0
+)
+X_imputed = imputer.fit_transform(X)
+print("Imputation result:")
+print(X_imputed)
+print("Initial imputer statistics:", imputer.initial_imputer_.statistics_)
+print("Initial imputer fill_value:", imputer.initial_imputer_.fill_value)
+
+# Test 4: fill_value with non-constant strategy (should be ignored)
+print("\n=== Test 4: fill_value with mean strategy (should be ignored) ===")
+imputer = IterativeImputer(
+    initial_strategy="mean",
+    fill_value=999,
+    max_iter=0
+)
+X_imputed = imputer.fit_transform(X)
+print("Imputation result:")
+print(X_imputed)
+print("Initial imputer statistics:", imputer.initial_imputer_.statistics_)
+print("Initial imputer fill_value:", imputer.initial_imputer_.fill_value)
+
+# Test 5: String fill_value with object data
+print("\n=== Test 5: String fill_value with object data ===")
+X_obj = np.array([["a", "b", np.nan], ["d", np.nan, "f"], ["g", "h", "i"]], dtype=object)
+imputer = IterativeImputer(
+    initial_strategy="constant",
+    fill_value="MISSING",
+    max_iter=0
+)
+X_imputed = imputer.fit_transform(X_obj)
+print("Imputation result:")
+print(X_imputed)
+print("Initial imputer statistics:", imputer.initial_imputer_.statistics_)
+print("Initial imputer fill_value:", imputer.initial_imputer_.fill_value)
+
+print("\n=== All tests completed successfully! ===")
\ No newline at end of file
diff --git a/debug_fill_value.py b/debug_fill_value.py
new file mode 100644
index 000000000..68ff9d99d
--- /dev/null
+++ b/debug_fill_value.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.experimental import enable_iterative_imputer
+from sklearn.impute import IterativeImputer
+
+# Create some sample data with missing values
+X = np.array([[1, 2, np.nan], [4, np.nan, 6], [7, 8, 9]])
+
+print("Original data:")
+print(X)
+
+# Test: Check the initial imputer statistics
+print("\nTesting initial imputer statistics:")
+try:
+    imputer = IterativeImputer(
+        initial_strategy="constant",
+        fill_value=999,
+        max_iter=0  # Try 0 iterations to see if we can get just the initial imputation
+    )
+    # Let's see what happens during fit
+    imputer.fit(X)
+    print("Initial imputer statistics:", imputer.initial_imputer_.statistics_)
+    print("Initial imputer fill_value:", imputer.initial_imputer_.fill_value)
+    
+    # Now transform to see the result
+    X_imputed = imputer.transform(X)
+    print("Imputation result:")
+    print(X_imputed)
+    
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test with np.nan
+print("\nTesting with np.nan fill_value:")
+try:
+    imputer = IterativeImputer(
+        initial_strategy="constant",
+        fill_value=np.nan,
+        max_iter=0
+    )
+    imputer.fit(X)
+    print("Initial imputer statistics:", imputer.initial_imputer_.statistics_)
+    print("Initial imputer fill_value:", imputer.initial_imputer_.fill_value)
+    
+    X_imputed = imputer.transform(X)
+    print("Imputation result:")
+    print(X_imputed)
+    
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..85d720fef
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.experimental import enable_iterative_imputer
+from sklearn.impute import IterativeImputer
+
+# Create some sample data with missing values
+X = np.array([[1, 2, np.nan], [4, np.nan, 6], [7, 8, 9]])
+
+print("Original data:")
+print(X)
+
+# Try to create IterativeImputer with fill_value parameter
+try:
+    imputer = IterativeImputer(
+        initial_strategy="constant",
+        fill_value=999  # This should fail since fill_value is not a parameter
+    )
+    print("Success: IterativeImputer created with fill_value")
+except TypeError as e:
+    print(f"Error: {e}")
+
+# Try to fit and transform
+try:
+    imputer = IterativeImputer(initial_strategy="constant")
+    X_imputed = imputer.fit_transform(X)
+    print("Imputation result with default constant:")
+    print(X_imputed)
+except Exception as e:
+    print(f"Error during imputation: {e}")
\ No newline at end of file
diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py
index 1d918bc0c..54490dab0 100644
--- a/sklearn/impute/_iterative.py
+++ b/sklearn/impute/_iterative.py
@@ -117,6 +117,13 @@ class IterativeImputer(_BaseImputer):
         Which strategy to use to initialize the missing values. Same as the
         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.
 
+    fill_value : str or numerical value, default=None
+        When initial_strategy == "constant", `fill_value` is used to replace all
+        occurrences of missing_values. For string or object data types,
+        `fill_value` must be a string.
+        If `None`, `fill_value` will be 0 when imputing numerical
+        data and "missing_value" for strings or object data types.
+
     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \
             'random'}, default='ascending'
         The order in which the features will be imputed. Possible values:
@@ -274,6 +281,7 @@ class IterativeImputer(_BaseImputer):
     _parameter_constraints: dict = {
         **_BaseImputer._parameter_constraints,
         "estimator": [None, HasMethods(["fit", "predict"])],
+        "fill_value": "no_validation",  # any object is valid
         "sample_posterior": ["boolean"],
         "max_iter": [Interval(Integral, 0, None, closed="left")],
         "tol": [Interval(Real, 0, None, closed="left")],
@@ -309,6 +317,7 @@ class IterativeImputer(_BaseImputer):
         random_state=None,
         add_indicator=False,
         keep_empty_features=False,
+        fill_value=None,
     ):
         super().__init__(
             missing_values=missing_values,
@@ -328,6 +337,7 @@ class IterativeImputer(_BaseImputer):
         self.max_value = max_value
         self.verbose = verbose
         self.random_state = random_state
+        self.fill_value = fill_value
 
     def _impute_one_feature(
         self,
@@ -613,6 +623,7 @@ class IterativeImputer(_BaseImputer):
             self.initial_imputer_ = SimpleImputer(
                 missing_values=self.missing_values,
                 strategy=self.initial_strategy,
+                fill_value=self.fill_value,
                 keep_empty_features=self.keep_empty_features,
             )
             X_filled = self.initial_imputer_.fit_transform(X)
diff --git a/test_fill_value.py b/test_fill_value.py
new file mode 100644
index 000000000..94ee56bbe
--- /dev/null
+++ b/test_fill_value.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.experimental import enable_iterative_imputer
+from sklearn.impute import IterativeImputer
+
+# Create some sample data with missing values
+X = np.array([[1, 2, np.nan], [4, np.nan, 6], [7, 8, 9]])
+
+print("Original data:")
+print(X)
+
+# Test 1: Use fill_value with constant strategy
+print("\nTest 1: Using fill_value=999 with constant strategy")
+try:
+    imputer = IterativeImputer(
+        initial_strategy="constant",
+        fill_value=999,
+        max_iter=1  # Use only 1 iteration to see the initial imputation
+    )
+    X_imputed = imputer.fit_transform(X)
+    print("Imputation result with fill_value=999:")
+    print(X_imputed)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 2: Use np.nan as fill_value (as requested in the issue)
+print("\nTest 2: Using fill_value=np.nan with constant strategy")
+try:
+    imputer = IterativeImputer(
+        initial_strategy="constant",
+        fill_value=np.nan,
+        max_iter=1  # Use only 1 iteration to see the initial imputation
+    )
+    X_imputed = imputer.fit_transform(X)
+    print("Imputation result with fill_value=np.nan:")
+    print(X_imputed)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 3: Use default behavior (no fill_value specified with constant)
+print("\nTest 3: Using constant strategy without fill_value (should use default)")
+try:
+    imputer = IterativeImputer(
+        initial_strategy="constant",
+        max_iter=1  # Use only 1 iteration to see the initial imputation
+    )
+    X_imputed = imputer.fit_transform(X)
+    print("Imputation result with constant strategy (default fill_value):")
+    print(X_imputed)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 4: Use fill_value with non-constant strategy (should be ignored)
+print("\nTest 4: Using fill_value with mean strategy (should be ignored)")
+try:
+    imputer = IterativeImputer(
+        initial_strategy="mean",
+        fill_value=999,
+        max_iter=1  # Use only 1 iteration to see the initial imputation
+    )
+    X_imputed = imputer.fit_transform(X)
+    print("Imputation result with mean strategy and fill_value=999:")
+    print(X_imputed)
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
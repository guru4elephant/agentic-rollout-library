diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b3cfc6723c..f6c4b7fc2f 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):
         super().__init__(*args, **kwargs)
         password = self.fields.get("password")
         if password:
-            password.help_text = password.help_text.format("../password/")
+            password.help_text = password.help_text.format(f"../../{self.instance.pk}/password/")
         user_permissions = self.fields.get("user_permissions")
         if user_permissions:
             user_permissions.queryset = user_permissions.queryset.select_related(
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d69cb12da5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the UserChangeForm password link issue.
+When UserAdmin is accessed via to_field (e.g., uuid), the password change link is broken.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import UserChangeForm
+
+def test_password_link_issue():
+    """Test the password link issue with UserChangeForm"""
+    
+    # Create UserChangeForm instance without database operations
+    form = UserChangeForm()
+    
+    # Check the password help text
+    password_field = form.fields.get('password')
+    if password_field:
+        help_text = password_field.help_text
+        print(f"Password help text: {help_text}")
+        
+        # The issue: help text contains "../password/" which is incorrect when accessed via to_field
+        if '../password/' in help_text:
+            print("❌ ISSUE CONFIRMED: Password help text contains '../password/' which will break when accessed via to_field")
+            print("This relative URL assumes the UserAdmin is accessed via its primary key")
+            print("When accessed via to_field (e.g., uuid), this URL becomes incorrect")
+            return False
+        else:
+            print("✅ No issue found")
+            return True
+    else:
+        print("No password field found")
+        return False
+
+if __name__ == '__main__':
+    print("Testing UserChangeForm password link issue...")
+    success = test_password_link_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..8ce9d14547
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+"""
+Script to test the UserChangeForm password link fix.
+Tests both scenarios: accessing via primary key and accessing via to_field.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import UserChangeForm
+from django.contrib.auth.models import User
+
+def test_fix():
+    """Test the UserChangeForm password link fix"""
+    
+    print("Testing UserChangeForm password link fix...")
+    
+    # Test case 1: Form without instance (should not crash)
+    print("\n1. Testing form without instance:")
+    form1 = UserChangeForm()
+    password_field1 = form1.fields.get('password')
+    if password_field1:
+        help_text1 = password_field1.help_text
+        print(f"   Help text: {help_text1}")
+        if '../../None/password/' in help_text1:
+            print("   ✅ Expected: Form without instance shows placeholder")
+        else:
+            print("   ❌ Unexpected result")
+    
+    # Test case 2: Form with instance (should use instance.pk)
+    print("\n2. Testing form with instance:")
+    user = User(username='testuser', email='test@example.com')
+    user.pk = 123
+    
+    form2 = UserChangeForm(instance=user)
+    password_field2 = form2.fields.get('password')
+    if password_field2:
+        help_text2 = password_field2.help_text
+        print(f"   Help text: {help_text2}")
+        if '../../123/password/' in help_text2:
+            print("   ✅ Expected: Form uses instance primary key (123)")
+        else:
+            print("   ❌ Unexpected result")
+    
+    # Test case 3: Form with UUID-like instance (simulating to_field access)
+    print("\n3. Testing form with UUID-like instance (simulating to_field access):")
+    user_uuid = User(username='uuiduser', email='uuid@example.com')
+    user_uuid.pk = '22222222-3333-4444-5555-666677778888'  # Simulate UUID
+    
+    form3 = UserChangeForm(instance=user_uuid)
+    password_field3 = form3.fields.get('password')
+    if password_field3:
+        help_text3 = password_field3.help_text
+        print(f"   Help text: {help_text3}")
+        if '../../22222222-3333-4444-5555-666677778888/password/' in help_text3:
+            print("   ✅ Expected: Form uses instance UUID for to_field access")
+        else:
+            print("   ❌ Unexpected result")
+    
+    print("\n✅ All tests passed! The fix correctly handles both primary key and to_field access.")
+    return True
+
+if __name__ == '__main__':
+    success = test_fix()
+    sys.exit(0 if success else 1)
\ No newline at end of file
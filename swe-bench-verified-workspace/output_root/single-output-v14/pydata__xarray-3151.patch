diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..ce7cdc16
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+import xarray as xr
+import numpy as np
+
+yCoord = ['a', 'b', 'c']  # works without error
+#yCoord = ['a', 'c', 'b']  # raises ValueError on combine
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("Success: combine_by_coords worked without error")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..eefd5758
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,96 @@
+import xarray as xr
+import numpy as np
+
+# Test case 1: Non-monotonic identical coordinates (should work now)
+print("Test case 1: Non-monotonic identical coordinates")
+yCoord = ['a', 'c', 'b']  # non-monotonic but identical across datasets
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords=dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✓ Success: Non-monotonic identical coordinates work")
+except Exception as e:
+    print(f"✗ Error: {e}")
+
+# Test case 2: Monotonic identical coordinates (should still work)
+print("\nTest case 2: Monotonic identical coordinates")
+yCoord = ['a', 'b', 'c']  # monotonic and identical across datasets
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords=dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✓ Success: Monotonic identical coordinates work")
+except Exception as e:
+    print(f"✗ Error: {e}")
+
+# Test case 3: Non-monotonic varying coordinates (should still fail)
+print("\nTest case 3: Non-monotonic varying coordinates")
+yCoord1 = ['a', 'c', 'b']  # non-monotonic and different across datasets
+yCoord2 = ['d', 'f', 'e']  # non-monotonic and different across datasets
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord1
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[4, 5, 6],
+        y=yCoord2
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✗ Unexpected success: Non-monotonic varying coordinates should fail")
+except ValueError as e:
+    print("✓ Expected error: Non-monotonic varying coordinates correctly fail")
+    print(f"  Error message: {e}")
+except Exception as e:
+    print(f"✗ Unexpected error: {e}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 00000000..bfc11786
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,119 @@
+"""
+Test specifically for the GitHub issue: 
+xr.combine_by_coords raises ValueError if identical coordinates are non-monotonic
+"""
+import xarray as xr
+import numpy as np
+
+def test_identical_non_monotonic_coords():
+    """Test that identical non-monotonic coordinates don't cause errors"""
+    # This is the exact case from the GitHub issue
+    yCoord = ['a', 'c', 'b']  # non-monotonic but identical across datasets
+    
+    ds1 = xr.Dataset(
+        data_vars=dict(
+            data=(['x', 'y'], np.random.rand(3, 3))
+        ),
+        coords=dict(
+            x=[1, 2, 3],
+            y=yCoord
+        )
+    )
+    
+    ds2 = xr.Dataset(
+        data_vars=dict(
+            data=(['x', 'y'], np.random.rand(4, 3))
+        ),
+        coords=dict(
+            x=[4, 5, 6, 7],
+            y=yCoord
+        )
+    )
+    
+    # This should work now (was failing before the fix)
+    result = xr.combine_by_coords((ds1, ds2))
+    
+    # Verify the result has the expected shape and coordinates
+    assert result.dims['x'] == 7  # 3 from ds1 + 4 from ds2
+    assert result.dims['y'] == 3  # unchanged (not concatenated)
+    
+    # Verify y coordinates are preserved as-is (non-monotonic)
+    assert list(result.coords['y'].values) == ['a', 'c', 'b']
+    
+    # Verify x coordinates are concatenated and monotonic
+    assert list(result.coords['x'].values) == [1, 2, 3, 4, 5, 6, 7]
+    
+    print("✓ GitHub issue test passed: identical non-monotonic coordinates work")
+
+def test_identical_monotonic_coords():
+    """Test that identical monotonic coordinates still work"""
+    yCoord = ['a', 'b', 'c']  # monotonic and identical across datasets
+    
+    ds1 = xr.Dataset(
+        data_vars=dict(
+            data=(['x', 'y'], np.random.rand(3, 3))
+        ),
+        coords=dict(
+            x=[1, 2, 3],
+            y=yCoord
+        )
+    )
+    
+    ds2 = xr.Dataset(
+        data_vars=dict(
+            data=(['x', 'y'], np.random.rand(4, 3))
+        ),
+        coords=dict(
+            x=[4, 5, 6, 7],
+            y=yCoord
+        )
+    )
+    
+    # This should work (was working before)
+    result = xr.combine_by_coords((ds1, ds2))
+    
+    assert result.dims['x'] == 7
+    assert result.dims['y'] == 3
+    assert list(result.coords['y'].values) == ['a', 'b', 'c']
+    assert list(result.coords['x'].values) == [1, 2, 3, 4, 5, 6, 7]
+    
+    print("✓ Identical monotonic coordinates test passed")
+
+def test_varying_non_monotonic_coords():
+    """Test that varying non-monotonic coordinates still fail appropriately"""
+    yCoord1 = ['a', 'c', 'b']  # non-monotonic and different
+    yCoord2 = ['d', 'f', 'e']  # non-monotonic and different
+    
+    ds1 = xr.Dataset(
+        data_vars=dict(
+            data=(['x', 'y'], np.random.rand(3, 3))
+        ),
+        coords=dict(
+            x=[1, 2, 3],
+            y=yCoord1
+        )
+    )
+    
+    ds2 = xr.Dataset(
+        data_vars=dict(
+            data=(['x', 'y'], np.random.rand(3, 3))
+        ),
+        coords=dict(
+            x=[4, 5, 6],
+            y=yCoord2
+        )
+    )
+    
+    # This should still fail (as expected)
+    try:
+        xr.combine_by_coords((ds1, ds2))
+        assert False, "Should have raised ValueError for non-monotonic varying coordinates"
+    except ValueError as e:
+        assert "neither monotonically increasing nor monotonically decreasing" in str(e)
+        print("✓ Varying non-monotonic coordinates correctly fail")
+
+if __name__ == "__main__":
+    test_identical_non_monotonic_coords()
+    test_identical_monotonic_coords()
+    test_varying_non_monotonic_coords()
+    print("\nAll tests passed! The GitHub issue has been fixed.")
\ No newline at end of file
diff --git a/xarray/core/combine.py b/xarray/core/combine.py
index 37ae903b..3a41c38e 100644
--- a/xarray/core/combine.py
+++ b/xarray/core/combine.py
@@ -501,7 +501,8 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',
                                    fill_value=fill_value)
 
         # Check the overall coordinates are monotonically increasing
-        for dim in concatenated.dims:
+        # Only check dimensions that were actually concatenated
+        for dim in concat_dims:
             if dim in concatenated:
                 indexes = concatenated.indexes.get(dim)
                 if not (indexes.is_monotonic_increasing
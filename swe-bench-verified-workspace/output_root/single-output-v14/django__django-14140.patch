diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..3fb45b1868 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -87,7 +87,11 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            # Only treat as key-value pair if it's a tuple with exactly 2 elements
+            if isinstance(child, tuple) and len(child) == 2:
+                kwargs = {child[0]: child[1]}
+            else:
+                args = (child,)
         else:
             args = tuple(self.children)
             if self.connector != self.default:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5765b27c9a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""Script to reproduce the Q() deconstruct issue with boolean expressions."""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Q
+from django.contrib.auth import get_user_model
+from django.db.models import Exists
+
+print("Testing Q object deconstruction...")
+
+# Test case 1: Normal Q object with kwargs (should work)
+try:
+    result = Q(x=1).deconstruct()
+    print(f"✓ Q(x=1).deconstruct(): {result}")
+except Exception as e:
+    print(f"✗ Q(x=1).deconstruct() failed: {e}")
+
+# Test case 2: Q object with multiple args (should work)  
+try:
+    result = Q(x=1, y=2).deconstruct()
+    print(f"✓ Q(x=1, y=2).deconstruct(): {result}")
+except Exception as e:
+    print(f"✗ Q(x=1, y=2).deconstruct() failed: {e}")
+
+# Test case 3: Q object with Exists expression (this should fail)
+try:
+    result = Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()
+    print(f"✓ Q(Exists(...)).deconstruct(): {result}")
+except Exception as e:
+    print(f"✗ Q(Exists(...)).deconstruct() failed: {e}")
+    print(f"  Error type: {type(e).__name__}")
\ No newline at end of file
diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..4114b50c8c 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -57,10 +57,29 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+    def __init__(self, header_rows=None):
+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)
 
     def write(self, lines):
         lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
+        
+        # Find the separator line (the one with position_char repeated)
+        separator_line = None
+        for line in lines:
+            if (line and line.strip() and 
+                all(c == self.header.position_char for c in line if c not in ' ')):
+                separator_line = line
+                break
+        
+        # If no separator line found, use the first non-empty line as fallback
+        if separator_line is None:
+            for line in lines:
+                if line.strip():
+                    separator_line = line
+                    break
+            if separator_line is None:
+                separator_line = "=" * 10  # Fallback
+        
+        # Add RST formatting: separator at top, then content, then separator at bottom
+        lines = [separator_line] + lines + [separator_line]
         return lines
diff --git a/debug_rst.py b/debug_rst.py
new file mode 100644
index 0000000000..604b8ab503
--- /dev/null
+++ b/debug_rst.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+print("=== RST with header_rows DEBUG ===")
+result = tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
\ No newline at end of file
diff --git a/debug_rst_structure.py b/debug_rst_structure.py
new file mode 100644
index 0000000000..b4ec6d6fe0
--- /dev/null
+++ b/debug_rst_structure.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from astropy.io.ascii.rst import RST
+from astropy.table import QTable
+import astropy.units as u
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+# Create RST writer with header_rows
+writer = RST(header_rows=["name", "unit"])
+
+# Get the lines from the parent write method
+lines = []
+writer.data.write(lines)
+print("Lines from data.write():")
+for i, line in enumerate(lines):
+    print(f"{i}: {line}")
+
+# Now test the full write method
+print("\nFull RST write output:")
+result = writer.write(lines.copy())
+for i, line in enumerate(result):
+    print(f"{i}: {line}")
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..0a70c36eb7
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+print("=== Final comprehensive test ===")
+
+# Create the exact table from the GitHub issue
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+print("1. Testing RST format without header_rows (should work as before):")
+tbl.write(sys.stdout, format="ascii.rst")
+print()
+
+print("2. Testing fixed_width format with header_rows (reference implementation):")
+tbl.write(sys.stdout, format="ascii.fixed_width", header_rows=["name", "unit"])
+print()
+
+print("3. Testing RST format with header_rows (the main fix):")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+print()
+
+print("4. Testing that the TypeError is fixed:")
+try:
+    tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+    print("✓ SUCCESS: No TypeError occurred")
+except TypeError as e:
+    print(f"✗ FAILED: {e}")
+except Exception as e:
+    print(f"✗ OTHER ERROR: {e}")
+
+print("\n=== Test completed ===")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 0d1ee66ab9..ec234472e2 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5ec472f51e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+print("Testing RST format without header_rows:")
+try:
+    tbl.write(sys.stdout, format="ascii.rst")
+    print("SUCCESS: RST without header_rows works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nTesting fixed_width format with header_rows:")
+try:
+    tbl.write(sys.stdout, format="ascii.fixed_width", header_rows=["name", "unit"])
+    print("SUCCESS: fixed_width with header_rows works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nTesting RST format with header_rows:")
+try:
+    tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+    print("SUCCESS: RST with header_rows works")
+except Exception as e:
+    print(f"ERROR: {e}")
\ No newline at end of file
diff --git a/simple_debug.py b/simple_debug.py
new file mode 100644
index 0000000000..1d34cb4233
--- /dev/null
+++ b/simple_debug.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+from astropy.io.ascii.rst import RST
+from astropy.table import Table
+
+# Create a simple table
+tbl = Table({'a': [1, 2], 'b': [3, 4]})
+
+# Test without header_rows
+writer1 = RST()
+lines1 = []
+writer1.data.write = lambda x: x.extend(["header", "=====", "1   3", "2   4"])
+result1 = writer1.write(lines1.copy())
+print("Without header_rows:", result1)
+
+# Test with header_rows  
+writer2 = RST(header_rows=["name"])
+lines2 = []
+writer2.data.write = lambda x: x.extend(["header1", "header2", "=====", "1   3", "2   4"])
+result2 = writer2.write(lines2.copy())
+print("With header_rows:", result2)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..784a338a1e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable, Table
+import astropy.units as u
+import sys
+
+print("=== Testing edge cases ===")
+
+# Test 1: No header_rows (should work as before)
+print("\n1. RST without header_rows:")
+tbl1 = Table({'a': [1, 2], 'b': [3, 4]})
+tbl1.write(sys.stdout, format="ascii.rst")
+
+# Test 2: Single header row
+print("\n2. RST with single header row:")
+tbl2 = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+tbl2.write(sys.stdout, format="ascii.rst", header_rows=["name"])
+
+# Test 3: Multiple header rows  
+print("\n3. RST with multiple header rows:")
+tbl3 = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+tbl3.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+
+# Test 4: Empty table with header rows
+print("\n4. Empty table with header rows:")
+tbl4 = QTable({'wave': [], 'response': []})
+try:
+    tbl4.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
\ No newline at end of file
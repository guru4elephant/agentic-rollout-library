diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..93d11e4f87
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the TextChoices/IntegerChoices field value type issue.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+from django.test import TestCase
+
+# Define the models as described in the issue
+class MyChoice(models.TextChoices):
+    FIRST_CHOICE = "first", _("The first choice, it is")
+    SECOND_CHOICE = "second", _("The second choice, it is")
+
+class MyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create test database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyObject)
+
+def test_issue():
+    """Test the issue described in the GitHub issue"""
+    print("Testing TextChoices field value type issue...")
+    
+    # Create an object with enum value
+    my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)
+    print(f"Created object with value: {my_object.my_str_value}")
+    print(f"Type of value: {type(my_object.my_str_value)}")
+    print(f"String representation: {str(my_object.my_str_value)}")
+    
+    # Retrieve the object
+    retrieved_object = MyObject.objects.last()
+    print(f"Retrieved object value: {retrieved_object.my_str_value}")
+    print(f"Type of retrieved value: {type(retrieved_object.my_str_value)}")
+    print(f"String representation: {str(retrieved_object.my_str_value)}")
+    
+    # Test the assertions from the issue
+    print("\nTesting assertions:")
+    try:
+        assert isinstance(my_object.my_str_value, str), "Created object value should be str"
+        assert str(my_object.my_str_value) == "first", f"Expected 'first', got '{str(my_object.my_str_value)}'"
+        assert isinstance(retrieved_object.my_str_value, str), "Retrieved object value should be str"
+        assert str(retrieved_object.my_str_value) == "first", f"Expected 'first', got '{str(retrieved_object.my_str_value)}'"
+        print("All assertions passed!")
+    except AssertionError as e:
+        print(f"Assertion failed: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index afd36d79e0..526414363b 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):
 
     def y(self):
         "Year, 2 digits; e.g. '99'"
-        return str(self.data.year)[2:]
+        return '%02d' % (self.data.year % 100)
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..8ab3cc013e
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""Final comprehensive test for the dateformat.y() fix"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+        SECRET_KEY='test-key-for-testing',
+    )
+    django.setup()
+
+import datetime
+from django.utils import dateformat
+
+def test_year_format(year, expected_y, expected_Y):
+    """Test both y and Y formats for a given year"""
+    try:
+        dt = datetime.datetime(year, 1, 1)
+        result_y = dateformat.format(dt, 'y')
+        result_Y = dateformat.format(dt, 'Y')
+        result_python_y = dt.strftime('%y')
+        result_python_Y = dt.strftime('%Y')
+        
+        y_status = "✓" if result_y == expected_y else "✗"
+        # For Y format, Django returns integer while Python returns string
+        # We need to compare Django's integer result with the expected integer
+        Y_status = "✓" if result_Y == year else "✗"
+        
+        print(f"Year {year}: y='{result_y}'{y_status} (exp: '{expected_y}', py: '{result_python_y}')")
+        print(f"         Y={result_Y}{Y_status} (exp: {year}, py: '{result_python_Y}')")
+        
+        return result_y == expected_y and result_Y == year
+        
+    except Exception as e:
+        print(f"Year {year}: Error - {e}")
+        return False
+
+print("Testing comprehensive year formatting:")
+print("=" * 60)
+
+test_cases = [
+    # Year, expected y, expected Y
+    (9, "09", 9),
+    (10, "10", 10),
+    (99, "99", 99),
+    (100, "00", 100),
+    (123, "23", 123),
+    (999, "99", 999),
+    (1000, "00", 1000),
+    (1979, "79", 1979),
+    (2000, "00", 2000),
+    (2023, "23", 2023),
+    (9999, "99", 9999),
+]
+
+all_passed = True
+for year, exp_y, exp_Y in test_cases:
+    passed = test_year_format(year, exp_y, exp_Y)
+    all_passed = all_passed and passed
+    print()
+
+print(f"All tests passed: {all_passed}")
+
+# Test the original issue case specifically
+print("\nOriginal issue test case:")
+dt = datetime.datetime(123, 4, 5, 6, 7)
+result_django = dateformat.format(dt, "y")
+result_python = dt.strftime("%y")
+print(f"Year 123: Django='{result_django}', Python='{result_python}', Match: {result_django == result_python}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..724850cf26
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""Script to reproduce the dateformat.y() issue with years < 1000"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+import datetime
+from django.utils import dateformat
+
+# Test case from the issue
+dt = datetime.datetime(123, 4, 5, 6, 7)
+result_django = dateformat.format(dt, "y")
+result_python = dt.strftime("%y")
+
+print(f"Django dateformat.y() result: '{result_django}'")
+print(f"Python datetime.strftime() result: '{result_python}'")
+print(f"Match: {result_django == result_python}")
+
+# Additional test cases
+test_cases = [
+    (123, "23"),  # Original issue case
+    (999, "99"),  # Edge case
+    (99, "99"),   # Two-digit year
+    (9, "09"),    # Single-digit year (should be zero-padded)
+    (1000, "00"), # Year 1000
+    (2023, "23"), # Modern year
+]
+
+print("\nAdditional test cases:")
+for year, expected in test_cases:
+    dt = datetime.datetime(year, 1, 1)
+    result_django = dateformat.format(dt, "y")
+    result_python = dt.strftime("%y")
+    status = "✓" if result_django == expected else "✗"
+    print(f"Year {year}: Django='{result_django}', Expected='{expected}', Python='{result_python}' {status}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..025b06c679
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""Test edge cases for the dateformat.y() fix"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+import datetime
+from django.utils import dateformat
+
+# Test edge cases
+edge_cases = [
+    (0, "00"),     # Year 0
+    (1, "01"),     # Year 1
+    (10, "10"),    # Year 10
+    (100, "00"),   # Year 100
+    (999, "99"),   # Year 999
+    (1000, "00"),  # Year 1000
+    (9999, "99"),  # Year 9999
+    (10000, "00"), # Year 10000
+    (-1, "99"),    # Year -1 (BC 1)
+    (-100, "00"),  # Year -100 (BC 100)
+]
+
+print("Testing edge cases:")
+for year, expected in edge_cases:
+    try:
+        dt = datetime.datetime(year, 1, 1)
+        result_django = dateformat.format(dt, "y")
+        result_python = dt.strftime("%y")
+        status = "✓" if result_django == expected else "✗"
+        print(f"Year {year}: Django='{result_django}', Expected='{expected}', Python='{result_python}' {status}")
+    except Exception as e:
+        print(f"Year {year}: Error - {e}")
+
+# Test with date objects (not datetime)
+print("\nTesting with date objects:")
+date_cases = [
+    (123, "23"),
+    (999, "99"),
+    (9, "09"),
+]
+
+for year, expected in date_cases:
+    try:
+        d = datetime.date(year, 1, 1)
+        result_django = dateformat.format(d, "y")
+        result_python = d.strftime("%y")
+        status = "✓" if result_django == expected else "✗"
+        print(f"Date Year {year}: Django='{result_django}', Expected='{expected}', Python='{result_python}' {status}")
+    except Exception as e:
+        print(f"Date Year {year}: Error - {e}")
\ No newline at end of file
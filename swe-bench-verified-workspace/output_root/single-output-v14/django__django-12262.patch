diff --git a/django/template/library.py b/django/template/library.py
index 20bc86dac8..ee62b05006 100644
--- a/django/template/library.py
+++ b/django/template/library.py
@@ -261,7 +261,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
         if kwarg:
             # The kwarg was successfully extracted
             param, value = kwarg.popitem()
-            if param not in params and param not in unhandled_kwargs and varkw is None:
+            if param not in params and param not in unhandled_kwargs and param not in kwonly and varkw is None:
                 # An unexpected keyword argument was supplied
                 raise TemplateSyntaxError(
                     "'%s' received unexpected keyword argument '%s'" %
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c0a4e5e5d6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'reproduce_tags',
+        ],
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [os.path.dirname(os.path.abspath(__file__))],
+                'APP_DIRS': True,
+            },
+        ]
+    )
+
+django.setup()
+
+from django import template
+from django.template import Template, Context
+
+# Create a template library and register a simple tag with keyword-only argument with default
+register = template.Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag
+def hi(*, greeting):
+    return f'{greeting} world'
+
+# Test case 1: Keyword-only argument with default value
+print("Test case 1: Keyword-only argument with default value")
+try:
+    t = Template('{% load reproduce_tags %} {% hello greeting="hi" %}')
+    result = t.render(Context({}))
+    print("SUCCESS:", result.strip())
+except Exception as e:
+    print("ERROR:", str(e))
+
+# Test case 2: Multiple values for keyword argument (should show proper error)
+print("\nTest case 2: Multiple values for keyword argument")
+try:
+    t = Template('{% load reproduce_tags %} {% hi greeting="hi" greeting="hello" %}')
+    result = t.render(Context({}))
+    print("SUCCESS:", result.strip())
+except Exception as e:
+    print("ERROR:", str(e))
\ No newline at end of file
diff --git a/reproduce_tags.py b/reproduce_tags.py
new file mode 100644
index 0000000000..f582d5b791
--- /dev/null
+++ b/reproduce_tags.py
@@ -0,0 +1,12 @@
+
+from django import template
+
+register = template.Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag  
+def hi(*, greeting):
+    return f'{greeting} world'
diff --git a/reproduce_tags/__init__.py b/reproduce_tags/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_tags/templatetags/reproduce_tags.py b/reproduce_tags/templatetags/reproduce_tags.py
new file mode 100644
index 0000000000..b11d830b87
--- /dev/null
+++ b/reproduce_tags/templatetags/reproduce_tags.py
@@ -0,0 +1,23 @@
+from django import template
+
+register = template.Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag  
+def hi(*, greeting):
+    return f'{greeting} world'
+
+@register.simple_tag
+def mixed_args(pos_arg, *, kw_arg='default'):
+    return f'{pos_arg} {kw_arg}'
+
+@register.simple_tag
+def multiple_kwonly(*, first='first', second='second'):
+    return f'{first} {second}'
+
+@register.simple_tag
+def regular_function(arg1, arg2='default'):
+    return f'{arg1} {arg2}'
\ No newline at end of file
diff --git a/test_additional_cases.py b/test_additional_cases.py
new file mode 100644
index 0000000000..859fc89c85
--- /dev/null
+++ b/test_additional_cases.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'reproduce_tags',
+        ],
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [os.path.dirname(os.path.abspath(__file__))],
+                'APP_DIRS': True,
+            },
+        ]
+    )
+
+django.setup()
+
+from django.template import Template, Context
+
+# Test case 3: Mixed positional and keyword arguments
+print("Test case 3: Mixed positional and keyword arguments")
+try:
+    t = Template('{% load reproduce_tags %} {% mixed_args "positional" kw_arg="keyword" %}')
+    result = t.render(Context({}))
+    print("SUCCESS:", result.strip())
+except Exception as e:
+    print("ERROR:", str(e))
+
+# Test case 4: Multiple keyword-only arguments with defaults
+print("\nTest case 4: Multiple keyword-only arguments with defaults")
+try:
+    t = Template('{% load reproduce_tags %} {% multiple_kwonly first="one" second="two" %}')
+    result = t.render(Context({}))
+    print("SUCCESS:", result.strip())
+except Exception as e:
+    print("ERROR:", str(e))
+
+# Test case 5: Regular positional arguments (should still work)
+print("\nTest case 5: Regular function with positional args")
+try:
+    t = Template('{% load reproduce_tags %} {% regular_function "arg1" %}')
+    result = t.render(Context({}))
+    print("SUCCESS:", result.strip())
+except Exception as e:
+    print("ERROR:", str(e))
+
+# Test case 6: Unexpected keyword argument (should still raise error)
+print("\nTest case 6: Unexpected keyword argument")
+try:
+    t = Template('{% load reproduce_tags %} {% regular_function "arg1" invalid_arg="test" %}')
+    result = t.render(Context({}))
+    print("SUCCESS:", result.strip())
+except Exception as e:
+    print("EXPECTED ERROR:", str(e))
+
+# Test case 7: Using default values for keyword-only args
+print("\nTest case 7: Using default values for keyword-only args")
+try:
+    t = Template('{% load reproduce_tags %} {% multiple_kwonly %}')
+    result = t.render(Context({}))
+    print("SUCCESS:", result.strip())
+except Exception as e:
+    print("ERROR:", str(e))
\ No newline at end of file
diff --git a/better_test.py b/better_test.py
new file mode 100644
index 000000000..a18f73f1f
--- /dev/null
+++ b/better_test.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""
+Better test to check if members are properly filtered when __all__ is empty.
+"""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.ext.autodoc.importer import import_module
+from sphinx.util.inspect import getall
+
+# Import the test module
+module = import_module('example')
+__all__ = getall(module)
+
+print(f"Module __all__: {__all__}")
+print(f"Module __all__ is None: {__all__ is None}")
+print(f"Module __all__ is empty: {len(__all__) == 0 if __all__ is not None else 'N/A'}")
+
+# Create a mock documenter
+class MockModuleDocumenter(ModuleDocumenter):
+    def __init__(self, module):
+        self.object = module
+        self.modname = 'example'
+        self.__all__ = getall(module)
+        self.analyzer = None
+        
+        # Mock options
+        class MockOptions:
+            members = None
+            inherited_members = False
+            exclude_members = None
+            private_members = None
+            special_members = None
+            undoc_members = False
+        
+        self.options = MockOptions()
+
+documenter = MockModuleDocumenter(module)
+
+# Get all module members first
+all_members = documenter.get_module_members()
+print(f"\nAll available members: {list(all_members.keys())}")
+
+# Test get_object_members with want_all=True
+members_check_module, result_members = documenter.get_object_members(want_all=True)
+
+print(f"\nAfter get_object_members:")
+print(f"members_check_module: {members_check_module}")
+print(f"Number of returned members: {len(result_members)}")
+
+# Check which members are skipped
+skipped_members = []
+not_skipped_members = []
+for member in result_members:
+    if hasattr(member, 'skipped') and member.skipped:
+        skipped_members.append(member[0])  # member[0] is the name
+    else:
+        not_skipped_members.append(member[0])  # member[0] is the name
+
+print(f"Skipped members: {skipped_members}")
+print(f"Not skipped members: {not_skipped_members}")
+
+# Now test filter_members
+filtered_members = documenter.filter_members(result_members, want_all=True)
+print(f"\nAfter filter_members:")
+print(f"Number of filtered members: {len(filtered_members)}")
+for mname, member, isattr in filtered_members:
+    print(f"  - {mname}")
\ No newline at end of file
diff --git a/example.py b/example.py
new file mode 100644
index 000000000..5c94d2e02
--- /dev/null
+++ b/example.py
@@ -0,0 +1,12 @@
+__all__ = []
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..ae0d088f7
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Final test to confirm the fix for empty __all__ handling.
+"""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.ext.autodoc.importer import import_module
+from sphinx.util.inspect import getall
+
+def test_empty_all():
+    """Test that empty __all__ returns no members."""
+    module = import_module('example')
+    __all__ = getall(module)
+    
+    print(f"Module __all__: {__all__}")
+    print(f"Module __all__ is None: {__all__ is None}")
+    print(f"Module __all__ is empty: {len(__all__) == 0 if __all__ is not None else 'N/A'}")
+    
+    # Create a minimal mock documenter
+    class MockModuleDocumenter(ModuleDocumenter):
+        def __init__(self, module):
+            self.object = module
+            self.modname = 'example'
+            self.__all__ = getall(module)
+            self.analyzer = None
+            
+            # Mock options
+            class MockOptions:
+                members = None
+                inherited_members = False
+            
+            self.options = MockOptions()
+        
+        def get_module_members(self):
+            # Simplified version that just returns some mock members
+            class MockMember:
+                def __init__(self, name):
+                    self.name = name
+                    self.skipped = False
+                
+                def __getitem__(self, index):
+                    if index == 0:
+                        return self.name
+                    raise IndexError("Only index 0 is supported")
+            
+            return {
+                'foo': MockMember('foo'),
+                'bar': MockMember('bar'),
+                'baz': MockMember('baz')
+            }
+    
+    documenter = MockModuleDocumenter(module)
+    
+    # Test get_object_members with want_all=True
+    members_check_module, result_members = documenter.get_object_members(want_all=True)
+    
+    print(f"\nResults:")
+    print(f"members_check_module: {members_check_module}")
+    print(f"Number of returned members: {len(result_members)}")
+    
+    if len(result_members) == 0:
+        print("✅ SUCCESS: Empty __all__ correctly returns 0 members")
+        return True
+    else:
+        print(f"❌ FAILURE: Expected 0 members, got {len(result_members)}")
+        return False
+
+if __name__ == "__main__":
+    success = test_empty_all()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..bc510fb47
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where empty __all__ is ignored by autodoc.
+"""
+
+import tempfile
+import os
+import sys
+from pathlib import Path
+
+# Add the testbed to Python path
+sys.path.insert(0, '/testbed')
+
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.ext.autodoc.importer import import_module
+
+# Create a test module with empty __all__
+test_module_content = '''
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+'''
+
+# Create temporary module
+with tempfile.TemporaryDirectory() as temp_dir:
+    # Create the test module
+    module_path = Path(temp_dir) / "example.py"
+    with open(module_path, 'w') as f:
+        f.write(test_module_content)
+    
+    # Add the temp directory to Python path
+    sys.path.insert(0, temp_dir)
+    
+    try:
+        # Import the module
+        example = import_module('example')
+        
+        # Create a mock ModuleDocumenter for testing
+        class MockModuleDocumenter(ModuleDocumenter):
+            def __init__(self, module):
+                self.object = module
+                self.modname = 'example'
+                self.__all__ = getattr(module, '__all__', None)
+                
+                # Mock options
+                class MockOptions:
+                    members = None
+                    inherited_members = False
+                
+                self.options = MockOptions()
+        
+        documenter = MockModuleDocumenter(example)
+        
+        # Get the module members
+        members_check_module, members = documenter.get_object_members(want_all=True)
+        
+        print(f"__all__ value: {documenter.__all__}")
+        print(f"want_all: True")
+        print(f"members_check_module: {members_check_module}")
+        print(f"Number of members returned: {len(members)}")
+        
+        for member in members:
+            print(f"Member: {member.name}, skipped: {getattr(member, 'skipped', False)}")
+            
+    finally:
+        # Remove the temp directory from path
+        sys.path.remove(temp_dir)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 000000000..383421805
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+"""
+Simple test to understand the __all__ behavior
+"""
+
+# Test case 1: Empty __all__
+class TestModule1:
+    __all__ = []
+    
+    def foo(self): pass
+    def bar(self): pass
+
+# Test case 2: Non-empty __all__
+class TestModule2:
+    __all__ = ['foo']
+    
+    def foo(self): pass
+    def bar(self): pass
+
+# Test case 3: No __all__
+class TestModule3:
+    def foo(self): pass
+    def bar(self): pass
+
+print("Test case 1 - Empty __all__:")
+print(f"__all__ = {TestModule1.__all__}")
+print(f"bool(__all__) = {bool(TestModule1.__all__)}")
+print(f"not __all__ = {not TestModule1.__all__}")
+
+print("\nTest case 2 - Non-empty __all__:")
+print(f"__all__ = {TestModule2.__all__}")
+print(f"bool(__all__) = {bool(TestModule2.__all__)}")
+print(f"not __all__ = {not TestModule2.__all__}")
+
+print("\nTest case 3 - No __all__:")
+print(f"hasattr __all__ = {hasattr(TestModule3, '__all__')}")
+if hasattr(TestModule3, '__all__'):
+    print(f"__all__ = {TestModule3.__all__}")
+    print(f"bool(__all__) = {bool(TestModule3.__all__)}")
+    print(f"not __all__ = {not TestModule3.__all__}")
\ No newline at end of file
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index d85d79617..ad60a6db9 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1074,10 +1074,13 @@ class ModuleDocumenter(Documenter):
     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         members = self.get_module_members()
         if want_all:
-            if not self.__all__:
+            if self.__all__ is None:
                 # for implicit module members, check __module__ to avoid
                 # documenting imported objects
                 return True, list(members.values())
+            elif not self.__all__:
+                # empty __all__ means no members should be documented
+                return False, []
             else:
                 for member in members.values():
                     if member.__name__ not in self.__all__:
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..f644a62c8
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for empty __all__ handling in autodoc.
+"""
+
+import sys
+import os
+sys.path.insert(0, '/testbed')
+
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.ext.autodoc.importer import import_module
+from sphinx.util.inspect import getall
+
+# Test cases
+def test_case(module_name, expected_member_count, description):
+    """Test a specific case and print results."""
+    print(f"\n=== {description} ===")
+    
+    try:
+        module = import_module(module_name)
+        __all__ = getall(module)
+        
+        # Create a mock documenter
+        class MockModuleDocumenter(ModuleDocumenter):
+            def __init__(self, module):
+                self.object = module
+                self.modname = module_name
+                self.__all__ = getall(module)
+                self.analyzer = None
+                
+                # Mock options
+                class MockOptions:
+                    members = None
+                    inherited_members = False
+                
+                self.options = MockOptions()
+        
+        documenter = MockModuleDocumenter(module)
+        
+        # Get module members
+        members = documenter.get_module_members()
+        print(f"All available members: {list(members.keys())}")
+        
+        # Test get_object_members with want_all=True
+        members_check_module, result_members = documenter.get_object_members(want_all=True)
+        
+        print(f"__all__ value: {documenter.__all__}")
+        print(f"__all__ is None: {documenter.__all__ is None}")
+        print(f"len(__all__): {len(documenter.__all__) if documenter.__all__ is not None else 'N/A'}")
+        print(f"members_check_module: {members_check_module}")
+        print(f"Number of returned members: {len(result_members)}")
+        print(f"Expected: {expected_member_count}")
+        
+        # Check if test passed
+        if len(result_members) == expected_member_count:
+            print("✅ PASS")
+        else:
+            print("❌ FAIL")
+            
+        return len(result_members) == expected_member_count
+        
+    except Exception as e:
+        print(f"Error: {e}")
+        return False
+
+# Test cases
+test_cases = [
+    ("example", 0, "Empty __all__ (should return 0 members)"),
+]
+
+all_passed = True
+for module_name, expected_count, description in test_cases:
+    passed = test_case(module_name, expected_count, description)
+    all_passed = all_passed and passed
+
+print(f"\n{'='*50}")
+if all_passed:
+    print("🎉 All tests passed!")
+else:
+    print("💥 Some tests failed!")
\ No newline at end of file
diff --git a/test_other_cases.py b/test_other_cases.py
new file mode 100644
index 000000000..26d35f3d1
--- /dev/null
+++ b/test_other_cases.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Test other cases to ensure the fix doesn't break existing functionality.
+"""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.util.inspect import getall
+
+def test_case(description, __all__value, expected_count):
+    """Test a specific __all__ case."""
+    print(f"\n=== {description} ===")
+    
+    # Create a mock module with the specified __all__
+    class MockModule:
+        def __init__(self, all_value):
+            if all_value is not None:
+                self.__all__ = all_value
+    
+    # Create a minimal mock documenter
+    class MockModuleDocumenter(ModuleDocumenter):
+        def __init__(self, module, all_value):
+            self.object = module
+            self.modname = 'test'
+            self.__all__ = all_value
+            self.analyzer = None
+            
+            # Mock options
+            class MockOptions:
+                members = None
+                inherited_members = False
+            
+            self.options = MockOptions()
+        
+        def get_module_members(self):
+            # Simplified version that just returns some mock members
+            class MockMember:
+                def __init__(self, name):
+                    self.name = name
+                    self.__name__ = name  # Add __name__ attribute
+                    self.skipped = False
+                
+                def __getitem__(self, index):
+                    if index == 0:
+                        return self.name
+                    raise IndexError("Only index 0 is supported")
+            
+            return {
+                'foo': MockMember('foo'),
+                'bar': MockMember('bar'),
+                'baz': MockMember('baz')
+            }
+    
+    module = MockModule(__all__value)
+    documenter = MockModuleDocumenter(module, getall(module) if hasattr(module, '__all__') else None)
+    
+    # Test get_object_members with want_all=True
+    members_check_module, result_members = documenter.get_object_members(want_all=True)
+    
+    print(f"__all__ value: {documenter.__all__}")
+    print(f"__all__ is None: {documenter.__all__ is None}")
+    if documenter.__all__ is not None:
+        print(f"len(__all__): {len(documenter.__all__)}")
+    print(f"members_check_module: {members_check_module}")
+    print(f"Number of returned members: {len(result_members)}")
+    print(f"Expected: {expected_count}")
+    
+    success = len(result_members) == expected_count
+    print("✅ PASS" if success else "❌ FAIL")
+    return success
+
+# Test cases
+test_cases = [
+    ("No __all__ defined", None, 3),  # Should return all members
+    ("Empty __all__", [], 0),         # Should return no members
+    ("Non-empty __all__", ['foo'], 3), # Should return all members (some will be skipped later)
+]
+
+all_passed = True
+for description, all_value, expected_count in test_cases:
+    passed = test_case(description, all_value, expected_count)
+    all_passed = all_passed and passed
+
+print(f"\n{'='*50}")
+if all_passed:
+    print("🎉 All test cases passed!")
+else:
+    print("💥 Some test cases failed!")
+
+sys.exit(0 if all_passed else 1)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..a8c3d428c
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,33 @@
+from sklearn.feature_extraction.text import strip_accents_unicode, strip_accents_ascii
+
+# Test the original issue from the GitHub issue
+print("=== Testing original issue ===")
+s1 = chr(241)  # ñ (composed)
+s2 = chr(110) + chr(771)  # n + combining tilde (decomposed)
+
+print(f"s1: {s1} -> {strip_accents_unicode(s1)}")
+print(f"s2: {s2} -> {strip_accents_unicode(s2)}")
+print(f"Both equal? {strip_accents_unicode(s1) == strip_accents_unicode(s2)}")
+
+# Test that existing functionality still works
+print("\n=== Testing existing functionality ===")
+test_cases = [
+    'àáâãäåçèéêë',
+    'ìíîïñòóôõöùúûüý',
+    '\u0625',  # arabic alef with hamza below
+    "this is à test"
+]
+
+expected_results = [
+    'aaaaaaceeee',
+    'iiiinooooouuuuy',
+    '\u0627',  # simple arabic alef
+    'this is a test'
+]
+
+for i, (test_case, expected) in enumerate(zip(test_cases, expected_results)):
+    result = strip_accents_unicode(test_case)
+    print(f"Test {i+1}: {test_case} -> {result} (expected: {expected})")
+    assert result == expected, f"Test {i+1} failed: got {result}, expected {expected}"
+
+print("\n=== All tests passed! ===")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..119029d2c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+from sklearn.feature_extraction.text import strip_accents_unicode
+
+# This string contains one code point, "LATIN SMALL LETTER N WITH TILDE"
+s1 = chr(241)
+
+# This string contains two code points, "LATIN SMALL LETTER N" followed by "COMBINING TILDE"
+s2 = chr(110) + chr(771)
+
+# They are visually identical, as expected
+print("s1:", s1) # => ñ
+print("s2:", s2) # => ñ
+
+# The tilde is removed from s1, as expected
+print("strip_accents_unicode(s1):", strip_accents_unicode(s1)) # => n
+
+# But strip_accents_unicode returns s2 unchanged
+print("strip_accents_unicode(s2) == s2:", strip_accents_unicode(s2) == s2) # => True
+print("strip_accents_unicode(s2):", strip_accents_unicode(s2))
+
+# Expected: both should return "n"
+print("Expected both to be 'n'")
+print("s1 result:", strip_accents_unicode(s1))
+print("s2 result:", strip_accents_unicode(s2))
\ No newline at end of file
diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index bb5a9d646..11236d958 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -130,10 +130,7 @@ def strip_accents_unicode(s):
         ASCII equivalent.
     """
     normalized = unicodedata.normalize('NFKD', s)
-    if normalized == s:
-        return s
-    else:
-        return ''.join([c for c in normalized if not unicodedata.combining(c)])
+    return ''.join([c for c in normalized if not unicodedata.combining(c)])
 
 
 def strip_accents_ascii(s):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..8b2038b59
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,27 @@
+from sklearn.feature_extraction.text import strip_accents_unicode
+
+# Test case 1: Empty string
+print("Empty string:", strip_accents_unicode(""))
+
+# Test case 2: String with no accents
+print("No accents:", strip_accents_unicode("hello world"))
+
+# Test case 3: String with multiple accents
+s3 = "café"  # é is composed
+s4 = "cafe" + chr(769)  # e + combining acute accent
+print("café:", strip_accents_unicode(s3))
+print("cafe + combining acute:", strip_accents_unicode(s4))
+
+# Test case 4: String with mixed accents
+s5 = "naïve"  # ï is composed
+s6 = "naive" + chr(776)  # i + combining diaeresis
+print("naïve:", strip_accents_unicode(s5))
+print("naive + combining diaeresis:", strip_accents_unicode(s6))
+
+# Test case 5: String already in NFKD form
+s7 = "n" + chr(771)  # n + combining tilde
+print("n + combining tilde:", strip_accents_unicode(s7))
+
+# Test case 6: String with non-combining characters that shouldn't be removed
+s8 = "hello" + chr(32) + "world"  # space character
+print("String with space:", strip_accents_unicode(s8))
\ No newline at end of file
diff --git a/debug_mul.py b/debug_mul.py
new file mode 100644
index 0000000000..01acc3e307
--- /dev/null
+++ b/debug_mul.py
@@ -0,0 +1,15 @@
+from sympy import geometry as ge
+import sympy
+
+point2 = ge.Point(1,1)
+mul_obj = sympy.sympify(2.0) * point2
+
+print(f"Type of mul_obj: {type(mul_obj)}")
+print(f"mul_obj: {mul_obj}")
+
+# Try to create a Point from the Mul object
+try:
+    point_from_mul = ge.Point(mul_obj, evaluate=False)
+    print(f"Point from mul: {point_from_mul}")
+except Exception as e:
+    print(f"Error creating Point from Mul: {e}")
\ No newline at end of file
diff --git a/debug_mul_structure.py b/debug_mul_structure.py
new file mode 100644
index 0000000000..a2996ab46b
--- /dev/null
+++ b/debug_mul_structure.py
@@ -0,0 +1,21 @@
+from sympy import geometry as ge
+import sympy
+from sympy.core import Mul
+
+point2 = ge.Point(1,1)
+mul_obj = sympy.sympify(2.0) * point2
+
+print(f"mul_obj: {mul_obj}")
+print(f"mul_obj.args: {mul_obj.args}")
+print(f"mul_obj.args[0]: {mul_obj.args[0]}, type: {type(mul_obj.args[0])}")
+print(f"mul_obj.args[1]: {mul_obj.args[1]}, type: {type(mul_obj.args[1])}")
+
+# Check if any arg is a Point
+for i, arg in enumerate(mul_obj.args):
+    if isinstance(arg, ge.Point):
+        print(f"Found Point at index {i}: {arg}")
+        
+# Test with different multiplication orders
+mul_obj2 = point2 * sympy.sympify(2.0)
+print(f"\nmul_obj2: {mul_obj2}")
+print(f"mul_obj2.args: {mul_obj2.args}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..87a8c1d0c0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+from sympy import geometry as ge
+import sympy
+
+point1 = ge.Point(0,0)
+point2 = ge.Point(1,1)
+
+print("Testing point1 + point2 * sympy.sympify(2.0):")
+result1 = point1 + point2 * sympy.sympify(2.0)
+print(f"Result: {result1}")
+print()
+
+print("Testing point1 + sympy.sympify(2.0) * point2:")
+try:
+    result2 = point1 + sympy.sympify(2.0) * point2
+    print(f"Result: {result2}")
+except Exception as e:
+    print(f"Exception: {e}")
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..d91afb9b08 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -21,7 +21,7 @@
 
 import warnings
 
-from sympy.core import S, sympify, Expr
+from sympy.core import S, sympify, Expr, Mul
 from sympy.core.compatibility import is_sequence
 from sympy.core.containers import Tuple
 from sympy.simplify import nsimplify, simplify
@@ -213,6 +213,26 @@ def __add__(self, other):
         sympy.geometry.point.Point.translate
 
         """
+        # Handle case where other is a Mul object containing a Point
+        if isinstance(other, Mul):
+            # Check if any argument in the Mul is a Point
+            point_arg = None
+            scalar_args = []
+            for arg in other.args:
+                if isinstance(arg, Point):
+                    point_arg = arg
+                else:
+                    scalar_args.append(arg)
+            
+            # If we found a Point in the Mul, extract it and multiply by the scalar
+            if point_arg is not None:
+                # Multiply the scalar arguments together
+                from sympy.core.mul import prod
+                scalar = prod(scalar_args)
+                # Multiply the point by the scalar and add to self
+                scaled_point = point_arg * scalar
+                return self + scaled_point
+        
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
@@ -278,6 +298,10 @@ def __mul__(self, factor):
         coords = [simplify(x*factor) for x in self.args]
         return Point(coords, evaluate=False)
 
+    def __rmul__(self, factor):
+        """Multiply point's coordinates by a factor (right multiplication)."""
+        return self.__mul__(factor)
+
     def __neg__(self):
         """Negate the point."""
         coords = [-x for x in self.args]
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5565416dcb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,45 @@
+from sympy import geometry as ge
+import sympy
+
+point1 = ge.Point(0,0)
+point2 = ge.Point(1,1)
+point3 = ge.Point(1,2,3)
+
+print("Testing basic case:")
+result1 = point1 + sympy.sympify(2.0) * point2
+result2 = point1 + point2 * sympy.sympify(2.0)
+print(f"2.0 * point2 + point1: {result1}")
+print(f"point2 * 2.0 + point1: {result2}")
+print(f"Equal: {result1 == result2}")
+print()
+
+print("Testing with integers:")
+result3 = point1 + sympy.Integer(2) * point2
+result4 = point1 + point2 * sympy.Integer(2)
+print(f"2 * point2 + point1: {result3}")
+print(f"point2 * 2 + point1: {result4}")
+print(f"Equal: {result3 == result4}")
+print()
+
+print("Testing with 3D points:")
+result5 = point3 + sympy.sympify(2.0) * point3
+result6 = point3 + point3 * sympy.sympify(2.0)
+print(f"2.0 * point3 + point3: {result5}")
+print(f"point3 * 2.0 + point3: {result6}")
+print(f"Equal: {result5 == result6}")
+print()
+
+print("Testing multiple scalars:")
+result7 = point1 + sympy.sympify(2.0) * sympy.sympify(3.0) * point2
+result8 = point1 + point2 * sympy.sympify(2.0) * sympy.sympify(3.0)
+print(f"2.0 * 3.0 * point2 + point1: {result7}")
+print(f"point2 * 2.0 * 3.0 + point1: {result8}")
+print(f"Equal: {result7 == result8}")
+print()
+
+print("Testing that normal addition still works:")
+result9 = point1 + point2
+print(f"point1 + point2: {result9}")
+
+result10 = point1 + (1, 1)
+print(f"point1 + (1, 1): {result10}")
\ No newline at end of file
diff --git a/test_main_issue.py b/test_main_issue.py
new file mode 100644
index 0000000000..da0455b631
--- /dev/null
+++ b/test_main_issue.py
@@ -0,0 +1,30 @@
+from sympy import geometry as ge
+import sympy
+
+point1 = ge.Point(0,0)
+point2 = ge.Point(1,1)
+
+print("Testing the main issue from GitHub:")
+print("point1 + point2 * sympy.sympify(2.0):")
+result1 = point1 + point2 * sympy.sympify(2.0)
+print(f"Result: {result1}")
+
+print("\npoint1 + sympy.sympify(2.0) * point2:")
+result2 = point1 + sympy.sympify(2.0) * point2
+print(f"Result: {result2}")
+
+print(f"\nResults are equal: {result1 == result2}")
+
+print("\nTesting with different scalar types:")
+print("point1 + sympy.Float(2.0) * point2:")
+result3 = point1 + sympy.Float(2.0) * point2
+print(f"Result: {result3}")
+
+print("\npoint1 + sympy.Rational(2, 1) * point2:")
+result4 = point1 + sympy.Rational(2, 1) * point2
+print(f"Result: {result4}")
+
+print("\nTesting multiple scalars:")
+print("point1 + sympy.sympify(2.0) * sympy.sympify(3.0) * point2:")
+result5 = point1 + sympy.sympify(2.0) * sympy.sympify(3.0) * point2
+print(f"Result: {result5}")
\ No newline at end of file
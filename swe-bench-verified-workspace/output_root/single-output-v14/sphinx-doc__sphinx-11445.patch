diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100755
index 000000000..8487fdd27
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where rst_prolog removes top level headings 
+containing a domain directive.
+"""
+
+import os
+import subprocess
+import shutil
+import tempfile
+
+def reproduce_issue():
+    # Create a temporary directory for testing
+    test_dir = tempfile.mkdtemp()
+    print(f"Using test directory: {test_dir}")
+    
+    try:
+        os.chdir(test_dir)
+        
+        # Step 1: Create sphinx project
+        print("Creating sphinx project...")
+        result = subprocess.run([
+            "sphinx-quickstart", "--no-sep", "--project", "mypackage", 
+            "--author", "me", "-v", "0.1.0", "--release", "0.1.0", 
+            "--language", "en", "docs"
+        ], capture_output=True, text=True)
+        
+        if result.returncode != 0:
+            print(f"sphinx-quickstart failed: {result.stderr}")
+            return False
+        
+        # Step 2: Create index.rst with toctree
+        print("Creating index.rst...")
+        with open("docs/index.rst", "w") as f:
+            f.write("""Welcome
+=======
+
+.. toctree::
+
+   mypackage
+""")
+        
+        # Step 3: Create mypackage.rst with domain directive heading
+        print("Creating mypackage.rst...")
+        with open("docs/mypackage.rst", "w") as f:
+            f.write(""":mod:`mypackage2`
+=================
+
+Content
+
+Subheading
+----------
+""")
+        
+        # Step 4: Add rst_prolog to conf.py
+        print("Adding rst_prolog to conf.py...")
+        with open("docs/conf.py", "a") as f:
+            f.write("""
+rst_prolog = \"\"\"
+.. |psf| replace:: Python Software Foundation
+\"\"\"
+""")
+        
+        # Step 5: Build the documentation
+        print("Building documentation...")
+        result = subprocess.run([
+            "sphinx-build", "-b", "html", "docs", "_build"
+        ], capture_output=True, text=True)
+        
+        if result.returncode != 0:
+            print(f"sphinx-build failed: {result.stderr}")
+            return False
+        
+        # Step 6: Check if the heading is missing
+        print("Checking if heading is missing...")
+        result = subprocess.run([
+            "grep", "mypackage2", "_build/index.html"
+        ], capture_output=True, text=True)
+        
+        if result.returncode != 0:
+            print("Issue reproduced: mypackage2 heading is missing from toctree!")
+            return True
+        else:
+            print("No issue found: mypackage2 heading is present in toctree")
+            print(f"grep output: {result.stdout}")
+            return False
+            
+    finally:
+        os.chdir("/testbed")
+        shutil.rmtree(test_dir)
+
+if __name__ == "__main__":
+    if reproduce_issue():
+        print("✓ Issue successfully reproduced")
+    else:
+        print("✗ Could not reproduce issue")
\ No newline at end of file
diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py
index 7a1538325..621d94553 100644
--- a/sphinx/util/rst.py
+++ b/sphinx/util/rst.py
@@ -25,7 +25,7 @@ except ImportError:
 
 logger = logging.getLogger(__name__)
 
-docinfo_re = re.compile(':\\w+:.*?')
+docinfo_re = re.compile(r':\w+:\s+.*')
 symbols_re = re.compile(r'([!-\-/:-@\[-`{-~])')  # symbols without dot(0x2e)
 SECTIONING_CHARS = ['=', '-', '~']
 
diff --git a/test_docinfo_vs_domain.py b/test_docinfo_vs_domain.py
new file mode 100644
index 000000000..7ae992e61
--- /dev/null
+++ b/test_docinfo_vs_domain.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Test script to understand the difference between docinfo fields and domain directives
+"""
+
+import re
+
+# Current regex pattern
+docinfo_re = re.compile(':\\w+:.*?')
+
+# Test cases
+test_lines = [
+    ':title: Test Document',
+    ':author: John Doe',
+    ':date: 2023-01-01',
+    ':mod:`mypackage2`',
+    ':func:`myfunction`',
+    ':class:`MyClass`',
+    'regular text',
+    '.. toctree::',
+    ':not_a_docinfo:',
+]
+
+print("Testing current regex pattern:")
+for line in test_lines:
+    match = docinfo_re.match(line)
+    if match:
+        print(f"MATCH: '{line}' -> '{match.group()}'")
+    else:
+        print(f"NO MATCH: '{line}'")
+
+print("\nStandard docinfo fields typically include:")
+print("- :author:")
+print("- :date:") 
+print("- :title:")
+print("- :copyright:")
+print("- :version:")
+print("- :status:")
+print("- :contact:")
+print("- :organization:")
+
+print("\nDomain directives (should NOT match):")
+print("- :mod:`package`")
+print("- :func:`function`")
+print("- :class:`Class`")
+print("- :meth:`method`")
+print("- :attr:`attribute`")
\ No newline at end of file
diff --git a/test_domain_directive_fix.py b/test_domain_directive_fix.py
new file mode 100644
index 000000000..2d1eaaaad
--- /dev/null
+++ b/test_domain_directive_fix.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+"""
+Test to verify that domain directives in headings are not treated as docinfo fields
+when rst_prolog is used.
+"""
+
+from docutils.statemachine import StringList
+
+from sphinx.util.rst import prepend_prolog
+
+def test_domain_directive_not_treated_as_docinfo():
+    """Test that domain directives in headings are not skipped as docinfo fields."""
+    
+    # Content with domain directive as heading (like in the GitHub issue)
+    content = StringList([
+        ':mod:`mypackage2`',
+        '=================',
+        '',
+        'Content',
+        '',
+        'Subheading',
+        '----------'
+    ], 'mypackage.rst')
+    
+    # Add rst_prolog (this was causing the issue)
+    prolog = ".. |psf| replace:: Python Software Foundation\n"
+    
+    # Apply the prolog
+    prepend_prolog(content, prolog)
+    
+    # Convert to list for easier inspection
+    result = list(content.xitems())
+    
+    # The prolog should be inserted at the beginning, NOT after the domain directive
+    # Domain directive should NOT be treated as docinfo
+    expected_structure = [
+        ('<rst_prolog>', 0, '.. |psf| replace:: Python Software Foundation'),
+        ('<generated>', 0, ''),
+        ('mypackage.rst', 0, ':mod:`mypackage2`'),
+        ('mypackage.rst', 1, '================='),
+        ('mypackage.rst', 2, ''),
+        ('mypackage.rst', 3, 'Content'),
+        ('mypackage.rst', 4, ''),
+        ('mypackage.rst', 5, 'Subheading'),
+        ('mypackage.rst', 6, '----------')
+    ]
+    
+    # Verify the structure
+    assert result == expected_structure, f"Expected {expected_structure}, but got {result}"
+    
+    print("✓ Domain directives are correctly not treated as docinfo fields")
+    print("✓ rst_prolog is properly inserted at the beginning")
+
+def test_real_docinfo_fields_still_work():
+    """Test that real docinfo fields are still properly handled."""
+    
+    # Content with actual docinfo fields
+    content = StringList([
+        ':title: Test Document',
+        ':author: John Doe',
+        '',
+        'Welcome',
+        '======='
+    ], 'index.rst')
+    
+    # Add rst_prolog
+    prolog = ".. |psf| replace:: Python Software Foundation\n"
+    
+    # Apply the prolog
+    prepend_prolog(content, prolog)
+    
+    # Convert to list for easier inspection
+    result = list(content.xitems())
+    
+    # The prolog should be inserted AFTER the docinfo fields
+    expected_structure = [
+        ('index.rst', 0, ':title: Test Document'),
+        ('index.rst', 1, ':author: John Doe'),
+        ('<generated>', 0, ''),
+        ('<rst_prolog>', 0, '.. |psf| replace:: Python Software Foundation'),
+        ('<generated>', 0, ''),
+        ('index.rst', 2, ''),
+        ('index.rst', 3, 'Welcome'),
+        ('index.rst', 4, '=======')
+    ]
+    
+    # Verify the structure
+    assert result == expected_structure, f"Expected {expected_structure}, but got {result}"
+    
+    print("✓ Real docinfo fields are still properly handled")
+
+if __name__ == "__main__":
+    test_domain_directive_not_treated_as_docinfo()
+    test_real_docinfo_fields_still_work()
+    print("All tests passed! The fix is working correctly.")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..4f4fd9191
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for docinfo vs domain directive matching
+"""
+
+import re
+
+# Current problematic regex pattern
+old_docinfo_re = re.compile(':\\w+:.*?')
+
+# New improved regex pattern that only matches true docinfo fields
+# Matches patterns like ":field: value" where there's whitespace after the colon
+new_docinfo_re = re.compile(r':\w+:\s+.*')
+
+# Test cases
+test_lines = [
+    ':title: Test Document',
+    ':author: John Doe', 
+    ':date: 2023-01-01',
+    ':mod:`mypackage2`',
+    ':func:`myfunction`',
+    ':class:`MyClass`',
+    'regular text',
+    '.. toctree::',
+    ':not_a_docinfo:',
+    ':version: 1.0',
+    ':copyright: 2023',
+]
+
+print("Testing OLD regex pattern:")
+for line in test_lines:
+    match = old_docinfo_re.match(line)
+    if match:
+        print(f"MATCH: '{line}'")
+    else:
+        print(f"NO MATCH: '{line}'")
+
+print("\nTesting NEW regex pattern:")
+for line in test_lines:
+    match = new_docinfo_re.match(line)
+    if match:
+        print(f"MATCH: '{line}'")
+    else:
+        print(f"NO MATCH: '{line}'")
+
+print("\nExpected behavior:")
+print("- Should match: :title:, :author:, :date:, :version:, :copyright:")
+print("- Should NOT match: :mod:`, :func:`, :class:`, :not_a_docinfo:")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 512aa5f74..84c8093a3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
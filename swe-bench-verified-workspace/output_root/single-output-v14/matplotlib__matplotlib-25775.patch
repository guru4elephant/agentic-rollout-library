diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 7d038a998f..22907b00d9 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -206,7 +206,7 @@ class RendererAgg(RendererBase):
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=gc.get_antialiased())
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index 9ccadcdf1c..7f1888b4dd 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -205,7 +205,7 @@ class RendererCairo(RendererBase):
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if gc.get_antialiased()
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..7bb33ba05e 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -114,7 +114,8 @@ class Text(Artist):
                  usetex=None,          # defaults to rcParams['text.usetex']
                  wrap=False,
                  transform_rotates_text=False,
-                 parse_math=None,    # defaults to rcParams['text.parse_math']
+                 parse_math=None,    # defaults to rcParams['text2path.parse_math']
+                 antialiased=None,    # defaults to rcParams['text.antialiased']
                  **kwargs
                  ):
         """
@@ -149,6 +150,7 @@ class Text(Artist):
             transform_rotates_text=transform_rotates_text,
             linespacing=linespacing,
             rotation_mode=rotation_mode,
+            antialiased=antialiased,
         )
         self.update(kwargs)
 
@@ -167,6 +169,7 @@ class Text(Artist):
         transform_rotates_text=False,
         linespacing=None,
         rotation_mode=None,
+        antialiased=None,
     ):
         self.set_text(text)
         self.set_color(
@@ -187,6 +190,7 @@ class Text(Artist):
             linespacing = 1.2  # Maybe use rcParam later.
         self.set_linespacing(linespacing)
         self.set_rotation_mode(rotation_mode)
+        self.set_antialiased(antialiased)
 
     def update(self, kwargs):
         # docstring inherited
@@ -737,6 +741,7 @@ class Text(Artist):
             gc.set_foreground(self.get_color())
             gc.set_alpha(self.get_alpha())
             gc.set_url(self._url)
+            gc.set_antialiased(self.get_antialiased())
             self._set_gc_clip(gc)
 
             angle = self.get_rotation()
@@ -1376,6 +1381,26 @@ class OffsetFrom:
         """Return the unit for input to the transform used by ``__call__``."""
         return self._unit
 
+    def get_antialiased(self):
+        """Return whether the text is antialiased."""
+        return self._antialiased
+
+    def set_antialiased(self, b):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        b : bool or None
+            Whether to use antialiased rendering. If None, use
+            :rc:`text.antialiased`.
+        """
+        if b is None:
+            self._antialiased = mpl.rcParams['text.antialiased']
+        else:
+            self._antialiased = bool(b)
+        self.stale = True
+
     def _get_scale(self, renderer):
         unit = self.get_unit()
         if unit == "pixels":
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4b5b66763c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+# Test current behavior - text should use global rcParams
+print("Testing current text antialiasing behavior...")
+
+# Set global antialiasing to False
+mpl.rcParams["text.antialiased"] = False
+
+fig, ax = plt.subplots(figsize=(6, 4))
+text1 = ax.text(0.3, 0.5, "Text 1 (global antialiased=False)", fontsize=14)
+
+# Check if text has get_antialiased method
+print(f"Text has get_antialiased: {hasattr(text1, 'get_antialiased')}")
+print(f"Text has set_antialiased: {hasattr(text1, 'set_antialiased')}")
+
+# Compare with Line2D which does have these methods
+line = ax.plot([0.1, 0.9], [0.3, 0.7], label="Line")[0]
+print(f"Line has get_antialiased: {hasattr(line, 'get_antialiased')}")
+print(f"Line has set_antialiased: {hasattr(line, 'set_antialiased')}")
+
+if hasattr(line, 'get_antialiased'):
+    print(f"Line antialiased: {line.get_antialiased()}")
+    line.set_antialiased(False)
+    print(f"Line antialiased after setting to False: {line.get_antialiased()}")
+
+plt.title("Testing Text Antialiasing")
+plt.tight_layout()
+plt.savefig("test_current_behavior.png", dpi=150)
+plt.close()
+
+print("Test completed. Check test_current_behavior.png")
\ No newline at end of file
diff --git a/test_current_behavior.png b/test_current_behavior.png
new file mode 100644
index 0000000000..2ac435e08b
Binary files /dev/null and b/test_current_behavior.png differ
diff --git a/debug_exception.py b/debug_exception.py
new file mode 100644
index 0000000000..a945df4bff
--- /dev/null
+++ b/debug_exception.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""Debug the exact exception that occurs with lazy strings."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        }]
+    )
+    django.setup()
+
+from django.utils.translation import gettext_lazy
+
+# Create test values
+lazy_string = gettext_lazy("Hello")
+regular_string = " World"
+
+print("Testing exact exception types:")
+print("=" * 50)
+
+# Test what exception occurs when trying to add regular string + lazy string
+try:
+    result = regular_string + lazy_string
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Exception type: {type(e)}")
+    print(f"Exception message: {e}")
+    print(f"Exception args: {e.args}")
+
+# Test what exception occurs when trying to add lazy string + regular string  
+try:
+    result = lazy_string + regular_string
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Exception type: {type(e)}")
+    print(f"Exception message: {e}")
+    print(f"Exception args: {e.args}")
+
+# Test what exception occurs when trying to add integer + non-numeric string
+try:
+    result = 2000 + "napis"
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Exception type: {type(e)}")
+    print(f"Exception message: {e}")
+    print(f"Exception args: {e.args}")
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..00771fa1e0
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+"""Debug script to understand the add filter issue."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        }]
+    )
+    django.setup()
+
+from django.template.defaultfilters import add
+from django.utils.translation import gettext_lazy
+
+# Create test values
+lazy_string = gettext_lazy("Hello")
+regular_string = " World"
+
+print("Testing add filter behavior:")
+print(f"lazy_string type: {type(lazy_string)}")
+print(f"regular_string type: {type(regular_string)}")
+
+# Test 1: lazy_string + regular_string (this works)
+try:
+    result1 = lazy_string + regular_string
+    print(f"lazy_string + regular_string: {result1} (type: {type(result1)})")
+except Exception as e:
+    print(f"lazy_string + regular_string failed: {e}")
+
+# Test 2: regular_string + lazy_string (this should fail)
+try:
+    result2 = regular_string + lazy_string
+    print(f"regular_string + lazy_string: {result2} (type: {type(result2)})")
+except Exception as e:
+    print(f"regular_string + lazy_string failed: {e}")
+
+# Test 3: str(lazy_string) conversion
+try:
+    str_lazy = str(lazy_string)
+    print(f"str(lazy_string): {str_lazy} (type: {type(str_lazy)})")
+except Exception as e:
+    print(f"str(lazy_string) failed: {e}")
+
+# Test 4: int conversion attempts
+try:
+    int_lazy = int(lazy_string)
+    print(f"int(lazy_string): {int_lazy}")
+except Exception as e:
+    print(f"int(lazy_string) failed: {e}")
+
+try:
+    int_regular = int(regular_string)
+    print(f"int(regular_string): {int_regular}")
+except Exception as e:
+    print(f"int(regular_string) failed: {e}")
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..93bcfce9fd 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -679,6 +679,15 @@ def add(value, arg):
     except (ValueError, TypeError):
         try:
             return value + arg
+        except TypeError as e:
+            # Handle specific case where one value is a lazy string (__proxy__)
+            # while preserving original behavior for other type mismatches
+            if "must be str, not __proxy__" in str(e):
+                try:
+                    return str(value) + str(arg)
+                except Exception:
+                    pass
+            return ''
         except Exception:
             return ''
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6bcb09309c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+"""Script to reproduce the add filter issue with lazy strings."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        }]
+    )
+    django.setup()
+
+from django.template.defaultfilters import add
+from django.utils.translation import gettext_lazy
+
+# Create a lazy string (translation string)
+lazy_string = gettext_lazy("Hello")
+regular_string = " World"
+
+# Test the add filter function directly
+try:
+    result = add(lazy_string, regular_string)
+    print(f"Result: {result}")
+    print(f"Result type: {type(result)}")
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
+
+# Also test the reverse order
+try:
+    result = add(regular_string, lazy_string)
+    print(f"Reverse result: {result}")
+    print(f"Reverse result type: {type(result)}")
+except Exception as e:
+    print(f"Reverse error: {e}")
+    print(f"Reverse error type: {type(e)}")
\ No newline at end of file
diff --git a/run_add_tests.py b/run_add_tests.py
new file mode 100644
index 0000000000..0ae21fab8d
--- /dev/null
+++ b/run_add_tests.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+"""Run the existing add filter tests to ensure no regression."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        }]
+    )
+    django.setup()
+
+# Import and run the tests manually
+from datetime import date, timedelta
+from django.template.defaultfilters import add
+from django.test import SimpleTestCase
+
+class TestAddFilter(SimpleTestCase):
+    """Test the add filter functionality."""
+    
+    def test_add_integers(self):
+        self.assertEqual(add('1', '2'), 3)
+        self.assertEqual(add(1, 2), 3)
+    
+    def test_add_strings(self):
+        self.assertEqual(add('hello', 'world'), 'helloworld')
+        # String + integer should return empty string if string can't be converted to int
+        self.assertEqual(add('hello', 123), '')
+    
+    def test_add_mixed_types(self):
+        self.assertEqual(add(2000, '5'), 2005)
+        self.assertEqual(add('2000', 5), 2005)
+    
+    def test_add_non_integers(self):
+        # Should fall back to string concatenation only if both are strings
+        self.assertEqual(add('not_an_int', '16'), 'not_an_int16')
+        # Integer + non-numeric string should return empty string
+        self.assertEqual(add('not_an_int', 16), '')
+    
+    def test_add_lists(self):
+        self.assertEqual(add([1, 2], [3, 4]), [1, 2, 3, 4])
+    
+    def test_add_tuples(self):
+        self.assertEqual(add((3, 4), (1, 2)), (3, 4, 1, 2))
+    
+    def test_add_date_timedelta(self):
+        result = add(date(2000, 1, 1), timedelta(10))
+        # The result should be a date object
+        self.assertEqual(result, date(2000, 1, 11))
+    
+    def test_add_failures(self):
+        # These should return empty string as per original behavior
+        self.assertEqual(add(2000, 'napis'), '')
+        self.assertEqual(add('not_an_int', 16), '')
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main(verbosity=2)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..e6b4ff7404
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+"""Comprehensive test for the add filter fix."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        }]
+    )
+    django.setup()
+
+from django.template.defaultfilters import add
+from django.utils.translation import gettext_lazy
+
+def test_case(description, value, arg, expected):
+    """Test a specific case and report results."""
+    try:
+        result = add(value, arg)
+        success = result == expected
+        status = "✓ PASS" if success else "✗ FAIL"
+        print(f"{status} {description}: '{result}' (expected: '{expected}')")
+        if not success:
+            return False
+    except Exception as e:
+        print(f"✗ ERROR {description}: {e}")
+        return False
+    return True
+
+print("Testing comprehensive add filter scenarios:")
+print("=" * 50)
+
+all_passed = True
+
+# Test 1: Regular string + lazy string
+all_passed &= test_case(
+    "Regular string + lazy string",
+    "Hello", gettext_lazy(" World"), "Hello World"
+)
+
+# Test 2: Lazy string + regular string
+all_passed &= test_case(
+    "Lazy string + regular string", 
+    gettext_lazy("Hello"), " World", "Hello World"
+)
+
+# Test 3: Lazy string + lazy string
+all_passed &= test_case(
+    "Lazy string + lazy string",
+    gettext_lazy("Hello"), gettext_lazy(" World"), "Hello World"
+)
+
+# Test 4: Regular integers (should still work)
+all_passed &= test_case(
+    "Regular integers",
+    5, 3, 8
+)
+
+# Test 5: String integers (should convert to int)
+all_passed &= test_case(
+    "String integers",
+    "5", "3", 8
+)
+
+# Test 6: Mixed types that can't be converted to int
+all_passed &= test_case(
+    "Mixed non-integer types",
+    "Hello", 123, "Hello123"
+)
+
+# Test 7: Empty strings
+all_passed &= test_case(
+    "Empty strings",
+    "", gettext_lazy("Hello"), "Hello"
+)
+
+# Test 8: Both empty
+all_passed &= test_case(
+    "Both empty",
+    gettext_lazy(""), "", ""
+)
+
+print("=" * 50)
+if all_passed:
+    print("✓ All tests passed!")
+else:
+    print("✗ Some tests failed!")
\ No newline at end of file
diff --git a/test_template_usage.py b/test_template_usage.py
new file mode 100644
index 0000000000..73c503482a
--- /dev/null
+++ b/test_template_usage.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""Test the add filter in template context."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        }]
+    )
+    django.setup()
+
+from django.template import Template, Context
+from django.utils.translation import gettext_lazy
+
+def test_template_case(description, template_string, context_dict, expected):
+    """Test a specific template case and report results."""
+    try:
+        template = Template(template_string)
+        context = Context(context_dict)
+        result = template.render(context)
+        success = result == expected
+        status = "✓ PASS" if success else "✗ FAIL"
+        print(f"{status} {description}: '{result}' (expected: '{expected}')")
+        if not success:
+            return False
+    except Exception as e:
+        print(f"✗ ERROR {description}: {e}")
+        return False
+    return True
+
+print("Testing add filter in template context:")
+print("=" * 50)
+
+all_passed = True
+
+# Create test values
+lazy_string = gettext_lazy("World")
+regular_string = "Hello "
+
+# Test 1: Regular string + lazy string in template
+all_passed &= test_template_case(
+    "Template: regular + lazy",
+    "{{ regular_string|add:lazy_string }}",
+    {"regular_string": regular_string, "lazy_string": lazy_string},
+    "Hello World"
+)
+
+# Test 2: Lazy string + regular string in template
+all_passed &= test_template_case(
+    "Template: lazy + regular", 
+    "{{ lazy_string|add:regular_string }}",
+    {"lazy_string": lazy_string, "regular_string": regular_string},
+    "WorldHello "
+)
+
+# Test 3: Both lazy strings in template
+lazy_hello = gettext_lazy("Hello")
+lazy_world = gettext_lazy(" World")
+all_passed &= test_template_case(
+    "Template: lazy + lazy",
+    "{{ lazy_hello|add:lazy_world }}",
+    {"lazy_hello": lazy_hello, "lazy_world": lazy_world},
+    "Hello World"
+)
+
+print("=" * 50)
+if all_passed:
+    print("✓ All template tests passed!")
+else:
+    print("✗ Some template tests failed!")
\ No newline at end of file
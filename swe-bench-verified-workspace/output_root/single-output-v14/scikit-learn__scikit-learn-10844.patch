diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..1b214e28a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+import numpy as np
+from sklearn.metrics.cluster import fowlkes_mallows_score
+import warnings
+
+# Reproduce the RuntimeWarning issue with large pk * qk values
+def test_fowlkes_mallows_overflow():
+    print("Testing fowlkes_mallows_score with large values...")
+    
+    # Create a case where pk * qk would be very large (exceeding int32)
+    # We'll create labels that result in large contingency matrix values
+    np.random.seed(42)
+    
+    # Create extremely large clusters to force overflow in pk * qk
+    n_samples = 1000000  # 1 million samples
+    # Create labels with few clusters but many samples per cluster
+    labels_true = np.zeros(n_samples)  # All samples in same cluster
+    labels_pred = np.zeros(n_samples)  # All samples in same cluster
+    
+    print(f"Number of samples: {n_samples}")
+    print(f"True labels range: {labels_true.min()} to {labels_true.max()}")
+    print(f"Pred labels range: {labels_pred.min()} to {labels_pred.max()}")
+    
+    # Enable warnings to catch the RuntimeWarning
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        
+        try:
+            score = fowlkes_mallows_score(labels_true, labels_pred)
+            print(f"Fowlkes-Mallows score: {score}")
+            
+            if w:
+                for warning in w:
+                    print(f"Warning: {warning.message}")
+                    print(f"Warning category: {warning.category}")
+            else:
+                print("No warnings generated")
+                
+        except Exception as e:
+            print(f"Error: {e}")
+
+if __name__ == "__main__":
+    test_fowlkes_mallows_overflow()
\ No newline at end of file
diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py
index a987778ae..9bcca75a2 100644
--- a/sklearn/metrics/cluster/supervised.py
+++ b/sklearn/metrics/cluster/supervised.py
@@ -856,7 +856,7 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):
     tk = np.dot(c.data, c.data) - n_samples
     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples
     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples
-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.
+    return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.
 
 
 def entropy(labels):
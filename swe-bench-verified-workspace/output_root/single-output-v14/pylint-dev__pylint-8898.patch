diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..c4cbcf676 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -114,9 +114,18 @@ def _regex_transformer(value: str) -> Pattern[str]:
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions."""
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
-        patterns.append(_regex_transformer(pattern))
-    return patterns
+    
+    # First, try to compile the entire value as a single regex pattern
+    # This handles cases where the regex itself contains commas
+    try:
+        patterns.append(_regex_transformer(value))
+        return patterns
+    except argparse.ArgumentTypeError:
+        # If the entire value doesn't compile as a single regex,
+        # fall back to CSV splitting for multiple patterns
+        for pattern in _csv_transformer(value):
+            patterns.append(_regex_transformer(pattern))
+        return patterns
 
 
 def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..f0c7549d0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+"""Script to reproduce the bad-name-rgxs comma issue."""
+
+import tempfile
+import os
+import subprocess
+import sys
+
+# Create a test config file with the problematic regex
+config_content = """[tool.pylint.basic]
+# capture group ensures that the part after the comma is an invalid regular
+# expression, causing pylint to crash
+bad-names-rgxs = "(foo{1,3})"
+"""
+
+# Create a simple Python file to lint
+python_content = """def test():
+    pass
+"""
+
+def test_reproduce_issue():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Create pyproject.toml
+        config_path = os.path.join(temp_dir, "pyproject.toml")
+        with open(config_path, "w") as f:
+            f.write(config_content)
+        
+        # Create Python file
+        python_path = os.path.join(temp_dir, "test.py")
+        with open(python_path, "w") as f:
+            f.write(python_content)
+        
+        # Change to temp directory and run pylint
+        original_cwd = os.getcwd()
+        try:
+            os.chdir(temp_dir)
+            result = subprocess.run(
+                [sys.executable, "-m", "pylint", "test.py"],
+                capture_output=True,
+                text=True
+            )
+            print("Return code:", result.returncode)
+            print("STDOUT:", result.stdout)
+            print("STDERR:", result.stderr)
+            
+            if result.returncode != 0:
+                print("✅ Issue reproduced successfully!")
+                return True
+            else:
+                print("❌ Issue not reproduced")
+                return False
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    test_reproduce_issue()
\ No newline at end of file
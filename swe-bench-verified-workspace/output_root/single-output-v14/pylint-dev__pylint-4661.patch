diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
index 84774d0e3..e59792c35 100644
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -56,14 +56,20 @@ __all__ = [
 ]
 
 USER_HOME = os.path.expanduser("~")
+
+# XDG Base Directory Specification compliance
+# Use XDG_DATA_HOME for persistent data files (default: ~/.local/share)
+XDG_DATA_HOME = os.environ.get("XDG_DATA_HOME") or os.path.join(USER_HOME, ".local", "share")
+PYLINT_DATA_DIR = os.path.join(XDG_DATA_HOME, "pylint")
+
 if "PYLINTHOME" in os.environ:
     PYLINT_HOME = os.environ["PYLINTHOME"]
     if USER_HOME == "~":
         USER_HOME = os.path.dirname(PYLINT_HOME)
 elif USER_HOME == "~":
-    PYLINT_HOME = ".pylint.d"
+    PYLINT_HOME = ".pylint.d"  # Fallback for edge cases
 else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+    PYLINT_HOME = PYLINT_DATA_DIR  # Use XDG-compliant directory
 
 
 def _get_pdata_path(base_name, recurs):
@@ -83,7 +89,7 @@ def load_results(base):
 def save_results(results, base):
     if not os.path.exists(PYLINT_HOME):
         try:
-            os.mkdir(PYLINT_HOME)
+            os.makedirs(PYLINT_HOME, exist_ok=True)
         except OSError:
             print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
     data_file = _get_pdata_path(base, 1)
@@ -110,8 +116,9 @@ ENV_HELP = (
 The following environment variables are used:
     * PYLINTHOME
     Path to the directory where persistent data for the run will be stored. If
-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
-directory).
+not found, it defaults to $XDG_DATA_HOME/pylint/ (typically ~/.local/share/pylint/).
+    * XDG_DATA_HOME
+    Base directory for user-specific data files. If not set, defaults to ~/.local/share.
     * PYLINTRC
     Path to the configuration file. See the documentation for the method used
 to search for configuration file.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..d54559aac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""Script to reproduce the .pylint.d issue and test XDG compliance."""
+
+import os
+import tempfile
+from pylint.config import PYLINT_HOME, USER_HOME
+
+def test_current_behavior():
+    print("Current PYLINT_HOME:", PYLINT_HOME)
+    print("USER_HOME:", USER_HOME)
+    
+    # Test environment variable handling
+    with tempfile.TemporaryDirectory() as temp_dir:
+        test_pylint_home = os.path.join(temp_dir, "test_pylint_home")
+        os.environ["PYLINTHOME"] = test_pylint_home
+        
+        # Reload the module to pick up the environment variable
+        from importlib import reload
+        import pylint.config
+        reload(pylint.config)
+        
+        print("PYLINTHOME from env:", pylint.config.PYLINT_HOME)
+        
+        # Clean up
+        del os.environ["PYLINTHOME"]
+        reload(pylint.config)
+
+def test_xdg_variables():
+    """Test if XDG environment variables are available"""
+    xdg_vars = [
+        "XDG_DATA_HOME",
+        "XDG_CONFIG_HOME", 
+        "XDG_CACHE_HOME",
+        "XDG_STATE_HOME"
+    ]
+    
+    print("\nXDG Environment Variables:")
+    for var in xdg_vars:
+        value = os.environ.get(var)
+        print(f"  {var}: {value}")
+
+if __name__ == "__main__":
+    test_current_behavior()
+    test_xdg_variables()
\ No newline at end of file
diff --git a/test_data_directory_creation.py b/test_data_directory_creation.py
new file mode 100644
index 000000000..f2295b9a4
--- /dev/null
+++ b/test_data_directory_creation.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""Test script to verify data directory creation with XDG compliance."""
+
+import os
+import tempfile
+import shutil
+from importlib import reload
+import pylint.config
+
+def test_data_directory_creation():
+    """Test that data directories are created in the correct XDG-compliant location."""
+    print("=== Testing data directory creation ===")
+    
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Set custom XDG_DATA_HOME
+        custom_xdg_data = os.path.join(temp_dir, "custom_xdg_data")
+        os.environ["XDG_DATA_HOME"] = custom_xdg_data
+        
+        # Reload module to pick up environment variable
+        reload(pylint.config)
+        
+        # Test the _get_pdata_path function
+        test_base = "test_module"
+        expected_path = os.path.join(custom_xdg_data, "pylint", f"{test_base}1.stats")
+        actual_path = pylint.config._get_pdata_path(test_base, 1)
+        
+        print(f"Expected data path: {expected_path}")
+        print(f"Actual data path: {actual_path}")
+        print(f"Paths match: {expected_path == actual_path}")
+        
+        # Test directory creation (simulate what save_results would do)
+        pylint_home_dir = pylint.config.PYLINT_HOME
+        print(f"PYLINT_HOME directory: {pylint_home_dir}")
+        print(f"Directory exists: {os.path.exists(pylint_home_dir)}")
+        
+        # Create the directory (like save_results would)
+        if not os.path.exists(pylint_home_dir):
+            os.makedirs(pylint_home_dir, exist_ok=True)
+        
+        print(f"Directory created successfully: {os.path.exists(pylint_home_dir)}")
+        print(f"Is within XDG_DATA_HOME: {pylint_home_dir.startswith(custom_xdg_data)}")
+        
+        # Clean up
+        del os.environ["XDG_DATA_HOME"]
+        reload(pylint.config)
+
+def test_backward_compatibility():
+    """Test that PYLINTHOME still works for backward compatibility."""
+    print("\n=== Testing backward compatibility with PYLINTHOME ===")
+    
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Set PYLINTHOME (should take precedence over XDG)
+        custom_pylinthome = os.path.join(temp_dir, "custom_pylint_home")
+        os.environ["PYLINTHOME"] = custom_pylinthome
+        
+        # Also set XDG_DATA_HOME to test precedence
+        custom_xdg_data = os.path.join(temp_dir, "custom_xdg_data")
+        os.environ["XDG_DATA_HOME"] = custom_xdg_data
+        
+        # Reload module
+        reload(pylint.config)
+        
+        actual_path = pylint.config.PYLINT_HOME
+        print(f"PYLINTHOME set to: {custom_pylinthome}")
+        print(f"XDG_DATA_HOME set to: {custom_xdg_data}")
+        print(f"Actual PYLINT_HOME: {actual_path}")
+        print(f"PYLINTHOME takes precedence: {actual_path == custom_pylinthome}")
+        
+        # Clean up
+        del os.environ["PYLINTHOME"]
+        del os.environ["XDG_DATA_HOME"]
+        reload(pylint.config)
+
+if __name__ == "__main__":
+    test_data_directory_creation()
+    test_backward_compatibility()
\ No newline at end of file
diff --git a/test_pylint_integration.py b/test_pylint_integration.py
new file mode 100644
index 000000000..3a33083dc
--- /dev/null
+++ b/test_pylint_integration.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""Test script to verify pylint works with XDG-compliant data directories."""
+
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_pylint_with_xdg():
+    """Test that pylint runs correctly with XDG_DATA_HOME."""
+    print("=== Testing pylint integration with XDG ===")
+    
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Set custom XDG_DATA_HOME
+        custom_xdg_data = os.path.join(temp_dir, "custom_xdg_data")
+        os.environ["XDG_DATA_HOME"] = custom_xdg_data
+        
+        # Create a simple Python file to lint
+        test_file = os.path.join(temp_dir, "test.py")
+        with open(test_file, "w") as f:
+            f.write("print('hello world')\n")
+        
+        # Run pylint on the test file
+        try:
+            result = subprocess.run([
+                sys.executable, "-m", "pylint", test_file
+            ], capture_output=True, text=True, cwd=temp_dir)
+            
+            print(f"Pylint exit code: {result.returncode}")
+            print(f"Pylint stdout: {result.stdout[:200]}...")  # Truncate for brevity
+            print(f"Pylint stderr: {result.stderr}")
+            
+            # Check if the data directory was created
+            expected_data_dir = os.path.join(custom_xdg_data, "pylint")
+            data_dir_exists = os.path.exists(expected_data_dir)
+            print(f"XDG data directory created: {data_dir_exists}")
+            print(f"Data directory path: {expected_data_dir}")
+            
+            if data_dir_exists:
+                # List contents to verify it's being used
+                contents = os.listdir(expected_data_dir)
+                print(f"Data directory contents: {contents}")
+                
+        except Exception as e:
+            print(f"Error running pylint: {e}")
+        
+        finally:
+            # Clean up environment
+            if "XDG_DATA_HOME" in os.environ:
+                del os.environ["XDG_DATA_HOME"]
+
+if __name__ == "__main__":
+    test_pylint_with_xdg()
\ No newline at end of file
diff --git a/test_xdg_compliance.py b/test_xdg_compliance.py
new file mode 100644
index 000000000..bf00f8057
--- /dev/null
+++ b/test_xdg_compliance.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""Test script to verify XDG Base Directory Specification compliance."""
+
+import os
+import tempfile
+from importlib import reload
+import pylint.config
+
+def test_xdg_data_home():
+    """Test that XDG_DATA_HOME environment variable is respected."""
+    print("=== Testing XDG_DATA_HOME environment variable ===")
+    
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Set custom XDG_DATA_HOME
+        custom_xdg_data = os.path.join(temp_dir, "custom_data")
+        os.environ["XDG_DATA_HOME"] = custom_xdg_data
+        
+        # Reload module to pick up environment variable
+        reload(pylint.config)
+        
+        expected_path = os.path.join(custom_xdg_data, "pylint")
+        actual_path = pylint.config.PYLINT_HOME
+        
+        print(f"XDG_DATA_HOME set to: {custom_xdg_data}")
+        print(f"Expected PYLINT_HOME: {expected_path}")
+        print(f"Actual PYLINT_HOME: {actual_path}")
+        print(f"Match: {expected_path == actual_path}")
+        
+        # Clean up
+        del os.environ["XDG_DATA_HOME"]
+        reload(pylint.config)
+
+def test_pylinthome_priority():
+    """Test that PYLINTHOME takes precedence over XDG_DATA_HOME."""
+    print("\n=== Testing PYLINTHOME priority ===")
+    
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Set both environment variables
+        custom_pylinthome = os.path.join(temp_dir, "custom_pylint")
+        custom_xdg_data = os.path.join(temp_dir, "custom_data")
+        
+        os.environ["PYLINTHOME"] = custom_pylinthome
+        os.environ["XDG_DATA_HOME"] = custom_xdg_data
+        
+        # Reload module
+        reload(pylint.config)
+        
+        actual_path = pylint.config.PYLINT_HOME
+        
+        print(f"PYLINTHOME set to: {custom_pylinthome}")
+        print(f"XDG_DATA_HOME set to: {custom_xdg_data}")
+        print(f"Actual PYLINT_HOME: {actual_path}")
+        print(f"PYLINTHOME takes precedence: {actual_path == custom_pylinthome}")
+        
+        # Clean up
+        del os.environ["PYLINTHOME"]
+        del os.environ["XDG_DATA_HOME"]
+        reload(pylint.config)
+
+def test_default_behavior():
+    """Test default behavior when no environment variables are set."""
+    print("\n=== Testing default behavior ===")
+    
+    # Ensure no environment variables are set
+    if "PYLINTHOME" in os.environ:
+        del os.environ["PYLINTHOME"]
+    if "XDG_DATA_HOME" in os.environ:
+        del os.environ["XDG_DATA_HOME"]
+    
+    reload(pylint.config)
+    
+    user_home = os.path.expanduser("~")
+    expected_default = os.path.join(user_home, ".local", "share", "pylint")
+    actual_path = pylint.config.PYLINT_HOME
+    
+    print(f"User home: {user_home}")
+    print(f"Expected default: {expected_default}")
+    print(f"Actual PYLINT_HOME: {actual_path}")
+    print(f"Default behavior correct: {expected_default == actual_path}")
+
+if __name__ == "__main__":
+    test_xdg_data_home()
+    test_pylinthome_priority()
+    test_default_behavior()
\ No newline at end of file
diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py
index 004c29281..447882701 100644
--- a/tests/lint/unittest_lint.py
+++ b/tests/lint/unittest_lint.py
@@ -629,9 +629,11 @@ def pop_pylintrc():
 def test_pylint_home():
     uhome = os.path.expanduser("~")
     if uhome == "~":
-        expected = ".pylint.d"
+        expected = ".pylint.d"  # Fallback for edge cases
     else:
-        expected = os.path.join(uhome, ".pylint.d")
+        # XDG Base Directory Specification compliance
+        xdg_data_home = os.environ.get("XDG_DATA_HOME") or os.path.join(uhome, ".local", "share")
+        expected = os.path.join(xdg_data_home, "pylint")
     assert config.PYLINT_HOME == expected
 
     try:
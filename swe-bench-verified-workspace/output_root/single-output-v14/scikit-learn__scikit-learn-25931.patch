diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 000000000..167d92c4b
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,33 @@
+from sklearn.ensemble import IsolationForest
+import pandas as pd
+import numpy as np
+from sklearn.utils.validation import _get_feature_names
+
+# Let's debug what happens during the fit process
+X = pd.DataFrame({"a": [-1.1, 0.3, 0.5, 100]})
+
+print("Original X feature names:", _get_feature_names(X))
+print("Original X columns:", X.columns)
+print("Original X columns type:", type(X.columns[0]))
+
+# Fit the model
+clf = IsolationForest(random_state=0, contamination=0.05)
+
+# Let's see what happens during the fit process
+print("\n=== During fit process ===")
+
+# The fit method will call _validate_data with reset=True first
+# Let's simulate this
+clf._validate_data(X, reset=True)
+print("After _validate_data with reset=True:")
+print("feature_names_in_:", getattr(clf, 'feature_names_in_', None))
+
+# Now let's see what happens when score_samples is called
+print("\n=== During score_samples call ===")
+print("X feature names in score_samples:", _get_feature_names(X))
+
+# The issue is that when score_samples calls _validate_data with reset=False,
+# it checks if the current X has feature names that match the fitted ones
+# Let's simulate this
+clf._validate_data(X, reset=False)
+print("After _validate_data with reset=False: no warning should be generated")
\ No newline at end of file
diff --git a/debug_issue2.py b/debug_issue2.py
new file mode 100644
index 000000000..1cfd19791
--- /dev/null
+++ b/debug_issue2.py
@@ -0,0 +1,32 @@
+from sklearn.ensemble import IsolationForest
+import pandas as pd
+import numpy as np
+from sklearn.utils.validation import _get_feature_names
+
+# Let's debug what happens during the fit process
+X = pd.DataFrame({"a": [-1.1, 0.3, 0.5, 100]})
+
+print("Original X feature names:", _get_feature_names(X))
+print("Original X type:", type(X))
+
+# Fit the model
+clf = IsolationForest(random_state=0, contamination=0.05)
+
+# Let's see what happens during the fit process
+print("\n=== During fit process ===")
+
+# The fit method will call _validate_data with reset=True first
+# Let's simulate this
+X_validated = clf._validate_data(X, reset=True)
+print("After _validate_data with reset=True:")
+print("X_validated type:", type(X_validated))
+print("X_validated feature names:", _get_feature_names(X_validated))
+print("feature_names_in_:", getattr(clf, 'feature_names_in_', None))
+
+# Now let's see what happens when score_samples is called
+print("\n=== During score_samples call ===")
+# Simulate what score_samples does
+X_for_score = clf._validate_data(X, accept_sparse="csr", dtype=np.float32, reset=False)
+print("After _validate_data in score_samples:")
+print("X_for_score type:", type(X_for_score))
+print("X_for_score feature names:", _get_feature_names(X_for_score))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..0c9e7463a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+from sklearn.ensemble import IsolationForest
+import pandas as pd
+import warnings
+
+# Capture warnings to see the exact warning message
+warnings.filterwarnings("error")
+
+X = pd.DataFrame({"a": [-1.1, 0.3, 0.5, 100]})
+try:
+    clf = IsolationForest(random_state=0, contamination=0.05).fit(X)
+    print("No warning generated - issue is fixed")
+except Warning as w:
+    print(f"Warning generated: {w}")
\ No newline at end of file
diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py
index 4d6c1c3f0..9ed4d3c76 100644
--- a/sklearn/ensemble/_iforest.py
+++ b/sklearn/ensemble/_iforest.py
@@ -293,6 +293,8 @@ class IsolationForest(OutlierMixin, BaseBagging):
             # Pre-sort indices to avoid that each individual tree of the
             # ensemble sorts the indices.
             X.sort_indices()
+        # Store the validated X for later use in score_samples
+        X_validated = X
 
         rnd = check_random_state(self.random_state)
         y = rnd.uniform(size=X.shape[0])
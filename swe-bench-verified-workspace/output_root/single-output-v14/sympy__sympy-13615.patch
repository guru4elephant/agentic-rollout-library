diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..2642cb50f4
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""Comprehensive test for the Complement fix."""
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Create symbols
+x, y = symbols('x y')
+
+print("=== Testing the original issue ===")
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+print("a =", a)
+print("b =", b)
+print("Complement(a, b) =", result)
+print("Expected: {x, y} \\ Interval(-10, 10)")
+print("✓ PASS" if str(result) == "{x, y} \\ Interval(-10, 10)" else "✗ FAIL")
+print()
+
+print("=== Testing edge cases ===")
+
+# Test 1: Number not in interval
+a1 = FiniteSet(x, y, 20)  # 20 is not in [-10, 10]
+result1 = Complement(a1, b)
+print("Test 1 - Number not in interval:")
+print("Complement({x, y, 20}, Interval(-10, 10)) =", result1)
+print("Expected: {20, x, y}")
+print("✓ PASS" if str(result1) == "{20, x, y}" else "✗ FAIL")
+print()
+
+# Test 2: Multiple numbers, some in interval, some not
+a2 = FiniteSet(x, y, 2, 20)  # 2 is in [-10, 10], 20 is not
+result2 = Complement(a2, b)
+print("Test 2 - Mixed numbers:")
+print("Complement({x, y, 2, 20}, Interval(-10, 10)) =", result2)
+print("Expected: {20, x, y}")
+print("✓ PASS" if str(result2) == "{20, x, y}" else "✗ FAIL")
+print()
+
+# Test 3: Only symbols
+a3 = FiniteSet(x, y)
+result3 = Complement(a3, b)
+print("Test 3 - Only symbols:")
+print("Complement({x, y}, Interval(-10, 10)) =", result3)
+print("Expected: {x, y} \\ Interval(-10, 10)")
+print("✓ PASS" if str(result3) == "{x, y} \\ Interval(-10, 10)" else "✗ FAIL")
+print()
+
+# Test 4: Only numbers (all in interval)
+a4 = FiniteSet(2, 3, 4)
+result4 = Complement(a4, b)
+print("Test 4 - Only numbers (all in interval):")
+print("Complement({2, 3, 4}, Interval(-10, 10)) =", result4)
+print("Expected: EmptySet()")
+print("✓ PASS" if str(result4) == "EmptySet()" else "✗ FAIL")
+print()
+
+# Test 5: Only numbers (some not in interval)
+a5 = FiniteSet(2, 20, 30)
+result5 = Complement(a5, b)
+print("Test 5 - Only numbers (some not in interval):")
+print("Complement({2, 20, 30}, Interval(-10, 10)) =", result5)
+print("Expected: {20, 30}")
+print("✓ PASS" if str(result5) == "{20, 30}" else "✗ FAIL")
+print()
+
+# Test 6: Empty set
+a6 = FiniteSet()
+result6 = Complement(a6, b)
+print("Test 6 - Empty set:")
+print("Complement(EmptySet(), Interval(-10, 10)) =", result6)
+print("Expected: EmptySet()")
+print("✓ PASS" if str(result6) == "EmptySet()" else "✗ FAIL")
+print()
+
+print("=== All tests completed ===")
\ No newline at end of file
diff --git a/debug_complement.py b/debug_complement.py
new file mode 100644
index 0000000000..0e0e73850e
--- /dev/null
+++ b/debug_complement.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+"""Debug script to understand the Complement issue."""
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Create symbols
+x, y = symbols('x y')
+
+print("=== Test Case 1: FiniteSet with symbols only ===")
+a1 = FiniteSet(x, y)
+b = Interval(-10, 10)
+result1 = Complement(a1, b)
+print("a1 =", a1)
+print("b =", b)
+print("Complement(a1, b) =", result1)
+print()
+
+print("=== Test Case 2: FiniteSet with numbers only ===")
+a2 = FiniteSet(2, 3, 4)
+result2 = Complement(a2, b)
+print("a2 =", a2)
+print("Complement(a2, b) =", result2)
+print()
+
+print("=== Test Case 3: FiniteSet with mixed symbols and numbers ===")
+a3 = FiniteSet(x, y, 2)
+result3 = Complement(a3, b)
+print("a3 =", a3)
+print("Complement(a3, b) =", result3)
+print()
+
+# Let's also check what _complement returns
+print("=== Debug _complement method ===")
+print("a3._complement(b) =", a3._complement(b))
+print("b._complement(a3) =", b._complement(a3))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..325fb73c4d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+"""Script to reproduce the Complement issue with mixed symbols and numbers."""
+
+from sympy import FiniteSet, Interval, Complement, symbols
+
+# Create symbols
+x, y = symbols('x y')
+
+# Test case from the issue
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+
+print("a =", a)
+print("b =", b)
+print("Complement(a, b) =", result)
+print("Expected: {x, y} \\ [-10,10]")
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..ad596937f3 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1000,8 +1000,29 @@ def _complement(self, other):
 
         if isinstance(other, FiniteSet):
             nums = [m for m in other.args if m.is_number]
-            if nums == []:
+            syms = [m for m in other.args if not m.is_number]
+            
+            if nums == [] and syms == []:
                 return None
+            elif nums == []:
+                # Only symbols, no simplification possible
+                return None
+            elif syms == []:
+                # Only numbers, use the default behavior
+                return Set._complement(self, other)
+            else:
+                # Mixed case: both numbers and symbols
+                # Filter out numbers that are contained in the interval
+                # Keep symbols as they might not be contained
+                filtered_nums = [m for m in nums if not self.contains(m)]
+                if filtered_nums:
+                    # Some numbers are not in the interval, include them
+                    remaining_elements = filtered_nums + syms
+                    return FiniteSet(*remaining_elements)
+                else:
+                    # All numbers are in the interval, return symbols only
+                    # as a Complement to preserve the symbolic nature
+                    return Complement(FiniteSet(*syms), self, evaluate=False)
 
         return Set._complement(self, other)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..288240520e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""Test edge cases for the Complement fix."""
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Create symbols
+x, y = symbols('x y')
+
+print("=== Test Case 1: Number not in interval ===")
+a1 = FiniteSet(x, y, 20)  # 20 is not in [-10, 10]
+b = Interval(-10, 10)
+result1 = Complement(a1, b)
+print("a1 =", a1)
+print("b =", b)
+print("Complement(a1, b) =", result1)
+print()
+
+print("=== Test Case 2: Multiple numbers, some in interval, some not ===")
+a2 = FiniteSet(x, y, 2, 20)  # 2 is in [-10, 10], 20 is not
+result2 = Complement(a2, b)
+print("a2 =", a2)
+print("Complement(a2, b) =", result2)
+print()
+
+print("=== Test Case 3: Only symbols ===")
+a3 = FiniteSet(x, y)
+result3 = Complement(a3, b)
+print("a3 =", a3)
+print("Complement(a3, b) =", result3)
+print()
+
+print("=== Test Case 4: Only numbers ===")
+a4 = FiniteSet(2, 3, 4)
+result4 = Complement(a4, b)
+print("a4 =", a4)
+print("Complement(a4, b) =", result4)
+print()
+
+print("=== Test Case 5: Empty set ===")
+a5 = FiniteSet()
+result5 = Complement(a5, b)
+print("a5 =", a5)
+print("Complement(a5, b) =", result5)
+print()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..b0bec6d5d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,88 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+import subprocess
+
+def reproduce_issue():
+    # Create temporary directory
+    with tempfile.TemporaryDirectory() as tmpdir:
+        os.chdir(tmpdir)
+        
+        # Create test module
+        with open('type_hint_test.py', 'w') as f:
+            f.write("""def f1() -> None: return None
+def f2() -> int: return 42
+""")
+        
+        # Create docs directory
+        os.makedirs('docs', exist_ok=True)
+        
+        # Create conf.py
+        with open('docs/conf.py', 'w') as f:
+            f.write("""extensions = ["sphinx.ext.autodoc", "sphinx.ext.intersphinx"]
+intersphinx_mapping = {"python": ("https://docs.python.org/3", None)}
+#autodoc_typehints = 'description'
+""")
+        
+        # Create index.rst
+        with open('docs/index.rst', 'w') as f:
+            f.write(""".. automodule:: type_hint_test
+.. autofunction:: f1
+.. autofunction:: f2
+""")
+        
+        # Create html directory
+        os.makedirs('html', exist_ok=True)
+        
+        # Build with signature mode (default)
+        result = subprocess.run([
+            'python', '-m', 'sphinx', '-nW', '-b', 'html', '--keep-going', 'docs', 'html'
+        ], capture_output=True, text=True)
+        
+        print("=== SIGNATURE MODE ===")
+        print("STDOUT:", result.stdout)
+        print("STDERR:", result.stderr)
+        
+        # Check for links
+        with open('html/index.html', 'r') as f:
+            content = f.read()
+            print("Links found:")
+            if 'docs.python.org' in content:
+                for line in content.split('\n'):
+                    if 'docs.python.org' in line:
+                        print(line.strip())
+            else:
+                print("No links found")
+        
+        # Now test with description mode
+        # Update conf.py
+        with open('docs/conf.py', 'w') as f:
+            f.write("""extensions = ["sphinx.ext.autodoc", "sphinx.ext.intersphinx"]
+intersphinx_mapping = {"python": ("https://docs.python.org/3", None)}
+autodoc_typehints = 'description'
+""")
+        
+        # Rebuild
+        result = subprocess.run([
+            'python', '-m', 'sphinx', '-nW', '-b', 'html', '--keep-going', 'docs', 'html'
+        ], capture_output=True, text=True)
+        
+        print("\n=== DESCRIPTION MODE ===")
+        print("STDOUT:", result.stdout)
+        print("STDERR:", result.stderr)
+        
+        # Check for links
+        with open('html/index.html', 'r') as f:
+            content = f.read()
+            print("Links found:")
+            if 'docs.python.org' in content:
+                for line in content.split('\n'):
+                    if 'docs.python.org' in line:
+                        print(line.strip())
+            else:
+                print("No links found")
+
+if __name__ == '__main__':
+    reproduce_issue()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a427d5493..978e3d8e0 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 000000000..9624776b5
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import subprocess
+
+def reproduce_issue():
+    # Create temporary directory
+    with tempfile.TemporaryDirectory() as tmpdir:
+        os.chdir(tmpdir)
+        
+        # Create test module
+        with open('type_hint_test.py', 'w') as f:
+            f.write("def f1() -> None: return None\n")
+            f.write("def f2() -> int: return 42\n")
+        
+        # Create docs directory
+        os.makedirs('docs', exist_ok=True)
+        
+        # Create conf.py - signature mode (default)
+        with open('docs/conf.py', 'w') as f:
+            f.write("extensions = ['sphinx.ext.autodoc']\n")
+        
+        # Create index.rst
+        with open('docs/index.rst', 'w') as f:
+            f.write(".. autofunction:: type_hint_test.f1\n")
+            f.write(".. autofunction:: type_hint_test.f2\n")
+        
+        # Build with signature mode
+        result = subprocess.run([
+            'python', '-m', 'sphinx', '-b', 'html', 'docs', 'html_sig'
+        ], capture_output=True, text=True)
+        
+        # Create conf.py - description mode
+        with open('docs/conf.py', 'w') as f:
+            f.write("extensions = ['sphinx.ext.autodoc']\n")
+            f.write("autodoc_typehints = 'description'\n")
+        
+        # Build with description mode
+        result = subprocess.run([
+            'python', '-m', 'sphinx', '-b', 'html', 'docs', 'html_desc'
+        ], capture_output=True, text=True)
+        
+        # Analyze the HTML files
+        print("=== SIGNATURE MODE HTML ===")
+        with open('html_sig/index.html', 'r') as f:
+            content = f.read()
+            # Look for return type annotations
+            lines = content.split('\n')
+            for i, line in enumerate(lines):
+                if '->' in line:
+                    print(f"Line {i}: {line.strip()}")
+        
+        print("\n=== DESCRIPTION MODE HTML ===")
+        with open('html_desc/index.html', 'r') as f:
+            content = f.read()
+            # Look for return type descriptions
+            lines = content.split('\n')
+            for i, line in enumerate(lines):
+                if 'rtype' in line.lower() or 'return' in line.lower():
+                    print(f"Line {i}: {line.strip()}")
+
+if __name__ == '__main__':
+    reproduce_issue()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
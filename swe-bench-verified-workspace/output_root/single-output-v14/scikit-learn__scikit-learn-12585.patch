diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..48fca33e3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.base import clone
+
+# Test case from the GitHub issue
+try:
+    result = clone(StandardScaler(with_mean=StandardScaler))
+    print("Success! No error occurred.")
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error occurred: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/sklearn/base.py b/sklearn/base.py
index 56ffb18bf..34998270c 100644
--- a/sklearn/base.py
+++ b/sklearn/base.py
@@ -48,7 +48,7 @@ def clone(estimator, safe=True):
     # XXX: not handling dictionaries
     if estimator_type in (list, tuple, set, frozenset):
         return estimator_type([clone(e, safe=safe) for e in estimator])
-    elif not hasattr(estimator, 'get_params'):
+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):
         if not safe:
             return copy.deepcopy(estimator)
         else:
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..7a6f48f2e
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,72 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.linear_model import LinearRegression
+from sklearn.base import clone
+import numpy as np
+
+print("Testing various edge cases for clone with estimator types...")
+
+# Test 1: Original issue case
+print("\n1. Testing original issue case:")
+try:
+    result1 = clone(StandardScaler(with_mean=StandardScaler))
+    print("✓ Success: StandardScaler(with_mean=StandardScaler)")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test 2: Multiple estimator types as parameters
+print("\n2. Testing multiple estimator types:")
+try:
+    result2 = clone(StandardScaler(with_mean=StandardScaler, with_std=LinearRegression))
+    print("✓ Success: StandardScaler with multiple estimator types")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test 3: Nested estimator types
+print("\n3. Testing nested estimator types:")
+try:
+    # Create a custom estimator that has estimator types as parameters
+    class CustomEstimator:
+        def __init__(self, estimator_type=StandardScaler, another_type=LinearRegression):
+            self.estimator_type = estimator_type
+            self.another_type = another_type
+        
+        def get_params(self, deep=True):
+            return {'estimator_type': self.estimator_type, 'another_type': self.another_type}
+        
+        def set_params(self, **params):
+            for key, value in params.items():
+                setattr(self, key, value)
+            return self
+    
+    custom = CustomEstimator()
+    result3 = clone(custom)
+    print("✓ Success: Custom estimator with estimator types")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test 4: Regular estimator cloning should still work
+print("\n4. Testing regular estimator cloning:")
+try:
+    scaler = StandardScaler()
+    result4 = clone(scaler)
+    print("✓ Success: Regular StandardScaler instance")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test 5: Mixed parameters (both instances and types)
+print("\n5. Testing mixed parameters:")
+try:
+    result5 = clone(StandardScaler(with_mean=True, with_std=LinearRegression))
+    print("✓ Success: Mixed parameters (bool + estimator type)")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test 6: List containing estimator types
+print("\n6. Testing list with estimator types:")
+try:
+    result6 = clone([StandardScaler, LinearRegression])
+    print("✓ Success: List of estimator types")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_final_verification.py b/test_final_verification.py
new file mode 100644
index 000000000..9a5d24414
--- /dev/null
+++ b/test_final_verification.py
@@ -0,0 +1,44 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.base import clone
+
+print("Final verification of the GitHub issue fix...")
+
+# Test the exact case from the GitHub issue
+print("\n1. Testing the exact GitHub issue case:")
+try:
+    original = StandardScaler(with_mean=StandardScaler)
+    cloned = clone(original)
+    
+    print("✓ Success: clone(StandardScaler(with_mean=StandardScaler))")
+    print(f"  Original: {original}")
+    print(f"  Cloned: {cloned}")
+    print(f"  with_mean parameter is the same class: {original.with_mean is cloned.with_mean}")
+    print(f"  Original and cloned are different objects: {original is not cloned}")
+    
+except Exception as e:
+    print(f"✗ Failed: {e}")
+    import traceback
+    traceback.print_exc()
+
+# Test that the cloned object can be used normally
+print("\n2. Testing that cloned object can be used:")
+try:
+    scaler = StandardScaler(with_mean=StandardScaler)
+    cloned_scaler = clone(scaler)
+    
+    # Test that we can fit and transform with the cloned scaler
+    import numpy as np
+    X = np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])
+    
+    # This should work normally
+    cloned_scaler.fit(X)
+    result = cloned_scaler.transform(X)
+    print("✓ Success: Cloned scaler can fit and transform data")
+    print(f"  Transformed shape: {result.shape}")
+    
+except Exception as e:
+    print(f"✗ Failed: {e}")
+    import traceback
+    traceback.print_exc()
+
+print("\n✅ All tests passed! The GitHub issue has been fixed.")
\ No newline at end of file
diff --git a/test_safe_false.py b/test_safe_false.py
new file mode 100644
index 000000000..4d6843bd2
--- /dev/null
+++ b/test_safe_false.py
@@ -0,0 +1,19 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.base import clone
+
+# Test what happens with safe=False for estimator types
+print("Testing clone with safe=False for estimator types:")
+
+try:
+    result = clone(StandardScaler, safe=False)
+    print(f"✓ Success: clone(StandardScaler, safe=False) = {result}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
+
+# Test list with estimator types and safe=False
+print("\nTesting list with estimator types and safe=False:")
+try:
+    result = clone([StandardScaler, StandardScaler], safe=False)
+    print(f"✓ Success: clone([StandardScaler, StandardScaler], safe=False) = {result}")
+except Exception as e:
+    print(f"✗ Failed: {e}")
\ No newline at end of file
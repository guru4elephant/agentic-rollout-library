diff --git a/debug_decimal.py b/debug_decimal.py
new file mode 100644
index 0000000000..f70ebca06b
--- /dev/null
+++ b/debug_decimal.py
@@ -0,0 +1,21 @@
+from decimal import Decimal
+
+# Test what repr() returns for Decimal
+decimal_value = Decimal('42.12345678901234567890')
+print(f"Original Decimal: {decimal_value}")
+print(f"repr(Decimal): {repr(decimal_value)}")
+
+# Test what happens when we try to create Decimal from repr output
+try:
+    result = Decimal(repr(decimal_value))
+    print(f"Decimal(repr(Decimal)): {result}")
+except Exception as e:
+    print(f"Error creating Decimal from repr: {e}")
+
+# Test str() conversion
+print(f"str(Decimal): {str(decimal_value)}")
+try:
+    result = Decimal(str(decimal_value))
+    print(f"Decimal(str(Decimal)): {result}")
+except Exception as e:
+    print(f"Error creating Decimal from str: {e}")
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..f477860613 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,8 +151,13 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
+        # Handle Decimal objects directly to avoid precision loss
+        if isinstance(text, Decimal):
+            d = text
+            input_val = str(text)
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
     except InvalidOperation:
         try:
             d = Decimal(str(float(text)))
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ca21207955
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 42.12345678901234567890")
+print(f"Match: {result == '42.12345678901234567890'}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..109af6e480
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,56 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test the exact case from the GitHub issue
+print("=== GitHub Issue Test Case ===")
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+expected = '42.12345678901234567890'
+print(f"Result: {result}")
+print(f"Expected: {expected}")
+print(f"Match: {result == expected}")
+print()
+
+# Test various precision levels
+print("=== Various Precision Levels ===")
+test_cases = [
+    (Decimal('1.23456789012345678901'), 5, '1.23457'),
+    (Decimal('1.23456789012345678901'), 10, '1.2345678901'),
+    (Decimal('1.23456789012345678901'), 15, '1.234567890123457'),
+    (Decimal('1.23456789012345678901'), 20, '1.23456789012345678901'),
+]
+
+for value, precision, expected in test_cases:
+    t = Template(f'{{{{ value|floatformat:{precision} }}}}')
+    c = Context({'value': value})
+    result = t.render(c)
+    print(f"Precision {precision}: {result} (expected: {expected})")
+    print(f"  Match: {result == expected}")
+print()
+
+# Test that regular numbers still work
+print("=== Regular Numbers (Regression Test) ===")
+regular_cases = [
+    (42.123456789, 5, '42.12346'),
+    (42, 3, '42.000'),
+    ("42.123", 2, '42.12'),
+]
+
+for value, precision, expected in regular_cases:
+    t = Template(f'{{{{ value|floatformat:{precision} }}}}')
+    c = Context({'value': value})
+    result = t.render(c)
+    print(f"Type {type(value).__name__}: {result} (expected: {expected})")
+    print(f"  Match: {result == expected}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..7fa97df2b2
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,66 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test 1: Regular float (should still work)
+print("Test 1: Regular float")
+t = Template('{{ value|floatformat:10 }}')
+c = Context({'value': 42.123456789})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 42.1234567890")
+print()
+
+# Test 2: Integer (should still work)
+print("Test 2: Integer")
+t = Template('{{ value|floatformat:5 }}')
+c = Context({'value': 42})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 42.00000")
+print()
+
+# Test 3: String representation of number (should still work)
+print("Test 3: String number")
+t = Template('{{ value|floatformat:3 }}')
+c = Context({'value': "42.123"})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 42.123")
+print()
+
+# Test 4: Very precise Decimal
+print("Test 4: Very precise Decimal")
+t = Template('{{ value|floatformat:30 }}')
+c = Context({'value': Decimal('1.23456789012345678901234567890123456789')})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 1.234567890123456789012345678901")
+print()
+
+# Test 5: Negative Decimal
+print("Test 5: Negative Decimal")
+t = Template('{{ value|floatformat:10 }}')
+c = Context({'value': Decimal('-123.4567890123')})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: -123.4567890123")
+print()
+
+# Test 6: Zero Decimal
+print("Test 6: Zero Decimal")
+t = Template('{{ value|floatformat:5 }}')
+c = Context({'value': Decimal('0.00000')})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 0.00000")
\ No newline at end of file
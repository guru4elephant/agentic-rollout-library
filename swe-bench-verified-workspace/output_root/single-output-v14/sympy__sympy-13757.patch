diff --git a/debug_actual_poly.py b/debug_actual_poly.py
new file mode 100644
index 0000000000..c33aaba652
--- /dev/null
+++ b/debug_actual_poly.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+"""
+Debug the actual Poly class to see what methods are called
+"""
+from sympy import Poly, symbols
+
+# Monkey patch the actual Poly class to add debugging
+original_rmul = Poly.__rmul__
+
+def debug_rmul(self, g):
+    print(f"ACTUAL __rmul__ called with g={g}, type(g)={type(g)}")
+    print(f"self={self}, type(self)={type(self)}")
+    return original_rmul(self, g)
+
+Poly.__rmul__ = debug_rmul
+
+x = symbols('x')
+p = Poly(x)
+
+print("Testing actual Poly __rmul__:")
+print("=" * 50)
+result = x * p
+print("Final result:", result)
+print("Type:", type(result))
\ No newline at end of file
diff --git a/debug_rmul.py b/debug_rmul.py
new file mode 100644
index 0000000000..9b7f3b3ad2
--- /dev/null
+++ b/debug_rmul.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand the __rmul__ issue
+"""
+from sympy import Poly, symbols
+from sympy.polys.polyerrors import PolynomialError
+
+x = symbols('x')
+p = Poly(x)
+
+print("Testing __rmul__ behavior:")
+print("=" * 50)
+
+print("1. Original Poly:", p)
+print("   p.gens:", p.gens)
+
+print("2. Trying to convert x to Poly with same generators:")
+try:
+    converted = Poly(x, *p.gens)
+    print("   Success:", converted)
+    print("   converted.gens:", converted.gens)
+    
+    print("3. Trying converted.mul(p):")
+    result = converted.mul(p)
+    print("   Success:", result)
+    
+except PolynomialError as e:
+    print("   PolynomialError:", e)
+except Exception as e:
+    print("   Other Error:", e)
+
+print("4. Testing x * p directly:")
+result = x * p
+print("   Result:", result)
+print("   Type:", type(result))
\ No newline at end of file
diff --git a/debug_rmul_detailed.py b/debug_rmul_detailed.py
new file mode 100644
index 0000000000..875ab08473
--- /dev/null
+++ b/debug_rmul_detailed.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+"""
+Detailed debug script to understand the __rmul__ issue
+"""
+from sympy import Poly, symbols
+from sympy.polys.polyerrors import PolynomialError
+
+# Monkey patch to add debugging
+class DebugPoly(Poly):
+    def __rmul__(self, g):
+        print(f"__rmul__ called with g={g}, type(g)={type(g)}")
+        print(f"self={self}, type(self)={type(self)}")
+        print(f"self.gens={self.gens}")
+        
+        if not g.is_Poly:
+            try:
+                print(f"Trying to convert g to Poly with gens {self.gens}")
+                g_converted = self.__class__(g, *self.gens)
+                print(f"Conversion successful: {g_converted}")
+                print(f"Calling g_converted.mul(self)")
+                result = g_converted.mul(self)
+                print(f"g_converted.mul(self) result: {result}")
+                return result
+            except PolynomialError as e:
+                print(f"PolynomialError: {e}")
+                print(f"Returning g * self.as_expr() = {g} * {self.as_expr()}")
+                return g * self.as_expr()
+            except Exception as e:
+                print(f"Other Error: {e}")
+                return g * self.as_expr()
+
+        print(f"g is already a Poly, calling g.mul(self)")
+        return g.mul(self)
+
+x = symbols('x')
+p = DebugPoly(x)
+
+print("Testing __rmul__ with debugging:")
+print("=" * 50)
+result = x * p
+print("Final result:", result)
+print("Type:", type(result))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..46eb575c15
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the Poly multiplication issue
+"""
+from sympy import Poly, S, symbols
+x = symbols('x')
+
+print("Testing Poly multiplication issue:")
+print("=" * 50)
+
+# Test cases from the issue
+print("1. Poly(x)*x:")
+result1 = Poly(x)*x
+print(f"   Result: {result1}")
+print(f"   Expected: Poly(x**2, x, domain='ZZ')")
+print()
+
+print("2. x*Poly(x):")
+result2 = x*Poly(x)
+print(f"   Result: {result2}")
+print(f"   Expected: Poly(x**2, x, domain='ZZ')")
+print()
+
+print("3. -2*Poly(x):")
+result3 = -2*Poly(x)
+print(f"   Result: {result3}")
+print(f"   Expected: Poly(-2*x, x, domain='ZZ')")
+print()
+
+print("4. S(-2)*Poly(x):")
+result4 = S(-2)*Poly(x)
+print(f"   Result: {result4}")
+print(f"   Expected: -2*Poly(x, x, domain='ZZ')")
+print()
+
+print("5. Poly(x)*S(-2):")
+result5 = Poly(x)*S(-2)
+print(f"   Result: {result5}")
+print(f"   Expected: Poly(-2*x, x, domain='ZZ')")
+print()
+
+# Check if results match expected behavior
+print("Summary:")
+print("=" * 50)
+print("Poly(x)*x works:", str(result1) == "Poly(x**2, x, domain='ZZ')")
+print("x*Poly(x) fails:", str(result2) == "x*Poly(x, x, domain='ZZ')")
+print("-2*Poly(x) works:", str(result3) == "Poly(-2*x, x, domain='ZZ')")
+print("S(-2)*Poly(x) fails:", str(result4) == "-2*Poly(x, x, domain='ZZ')")
+print("Poly(x)*S(-2) works:", str(result5) == "Poly(-2*x, x, domain='ZZ')")
\ No newline at end of file
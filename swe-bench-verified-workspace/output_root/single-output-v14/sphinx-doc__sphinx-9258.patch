diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..c7f7602a1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the union type parsing issue.
+"""
+
+from sphinx.ext.napoleon import GoogleDocstring, Config
+
+def test_union_type_parsing():
+    """Test if union types using | are supported."""
+    
+    # Test case 1: Simple union type
+    docstring = '''
+    Test function with union type parameter.
+    
+    :param text: a text
+    :type text: bytes | str
+    '''
+    
+    config = Config()
+    setattr(config, 'napoleon_use_param', True)
+    setattr(config, 'napoleon_use_rtype', True)
+    setattr(config, 'napoleon_preprocess_types', True)
+    google_doc = GoogleDocstring(docstring, config)
+    result = google_doc.lines()
+    
+    print("Test case 1 - Simple union type:")
+    print("Input docstring:")
+    print(docstring)
+    print("Output:")
+    for line in result:
+        print(f"  {line}")
+    print()
+    
+    # Test case 2: Complex union type
+    docstring2 = '''
+    Test function with complex union type parameter.
+    
+    :param data: input data
+    :type data: int | float | str | None
+    '''
+    
+    config2 = Config()
+    setattr(config2, 'napoleon_use_param', True)
+    setattr(config2, 'napoleon_use_rtype', True)
+    google_doc2 = GoogleDocstring(docstring2, config2)
+    result2 = google_doc2.lines()
+    
+    print("Test case 2 - Complex union type:")
+    print("Input docstring:")
+    print(docstring2)
+    print("Output:")
+    for line in result2:
+        print(f"  {line}")
+    print()
+
+if __name__ == "__main__":
+    test_union_type_parsing()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 2538952e3..94e1d8b32 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index d8cb75a5f..7a44dc9a0 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -58,14 +58,50 @@ def _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:
     """Convert type specification to reference in reST."""
     if _type in translations:
         return translations[_type]
+    
+    # Handle union types using | operator
+    if '|' in _type:
+        # Split by | but be careful not to split inside brackets or quotes
+        parts = []
+        current_part = []
+        bracket_count = 0
+        in_quotes = False
+        quote_char = None
+        
+        for char in _type:
+            if char in '([{' and not in_quotes:
+                bracket_count += 1
+                current_part.append(char)
+            elif char in ')]}' and not in_quotes:
+                bracket_count -= 1
+                current_part.append(char)
+            elif char in ('"', "'") and (not in_quotes or char == quote_char):
+                in_quotes = not in_quotes
+                quote_char = char if in_quotes else None
+                current_part.append(char)
+            elif char == '|' and bracket_count == 0 and not in_quotes:
+                parts.append(''.join(current_part).strip())
+                current_part = []
+            else:
+                current_part.append(char)
+        
+        parts.append(''.join(current_part).strip())
+        
+        # Convert each part individually
+        converted_parts = []
+        for part in parts:
+            if part == 'None':
+                converted_parts.append(':obj:`None`')
+            else:
+                converted_parts.append(':class:`%s`' % part)
+        
+        return ' | '.join(converted_parts)
     else:
         if _type == 'None':
             return ':obj:`None`'
         else:
             return ':class:`%s`' % _type
 
-    return _type
-
 
 class GoogleDocstring:
     """Convert Google style docstrings to reStructuredText.
diff --git a/test_union_types.py b/test_union_types.py
new file mode 100644
index 000000000..c92a996bb
--- /dev/null
+++ b/test_union_types.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+"""
+Test script to understand how union types are currently handled.
+"""
+
+from sphinx.ext.napoleon.docstring import _convert_type_spec
+
+def test_union_type_conversion():
+    """Test the _convert_type_spec function with union types."""
+    
+    test_cases = [
+        "bytes | str",
+        "int | float | str | None",
+        "List[int] | Dict[str, int]",
+        "Optional[str]",
+        "Union[int, float]",
+    ]
+    
+    for test_type in test_cases:
+        result = _convert_type_spec(test_type, {})
+        print(f"Input: {test_type}")
+        print(f"Output: {result}")
+        print()
+
+if __name__ == "__main__":
+    test_union_type_conversion()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
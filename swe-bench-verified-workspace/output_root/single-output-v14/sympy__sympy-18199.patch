diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..32e3bde73f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+
+from sympy.ntheory.residue_ntheory import nthroot_mod
+
+# Test the exact case from the GitHub issue
+print("Testing the exact case from GitHub issue: nthroot_mod(17*17, 5, 17)...")
+a = 17 * 17
+n = 5
+p = 17
+
+print(f"a = {a}, a % p = {a % p}")
+result = nthroot_mod(a, n, p, all_roots=True)
+print(f"Result: {result}")
+
+# Check if 0 is in the result
+if result is not None:
+    print(f"0 in result: {0 in result}")
+    if 0 not in result:
+        print("ERROR: 0 should be in the result but it's not!")
+else:
+    print("Result is None - this is unexpected")
+
+# Test with various cases where a % p == 0
+test_cases = [
+    (0, 3, 7),     # 0^3 ≡ 0 mod 7
+    (7, 2, 7),     # 7^2 ≡ 0 mod 7, root 0
+    (14, 3, 7),    # 14 ≡ 0 mod 7, root 0
+    (21, 4, 7),    # 21 ≡ 0 mod 7, root 0
+]
+
+print("\nTesting various cases where a % p == 0:")
+for a, n, p in test_cases:
+    print(f"nthroot_mod({a}, {n}, {p})...")
+    result = nthroot_mod(a, n, p, all_roots=True)
+    print(f"  Result: {result}")
+    if result is not None:
+        print(f"  0 in result: {0 in result}")
+        if 0 not in result:
+            print("  ERROR: 0 should be in the result!")
+    else:
+        print("  Result is None - this might be an issue")
\ No newline at end of file
diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py
index 9a3052d4c3..55a4ed6983 100644
--- a/sympy/ntheory/residue_ntheory.py
+++ b/sympy/ntheory/residue_ntheory.py
@@ -776,6 +776,24 @@ def nthroot_mod(a, n, p, all_roots=False):
     if not isprime(p):
         raise NotImplementedError("Not implemented for composite p")
 
+    # Special case: when a % p == 0, x = 0 is always a solution
+    if a % p == 0:
+        if all_roots:
+            # For x**n ≡ 0 mod p, we need to find all solutions
+            # x = 0 is always a solution, and there might be others
+            # if n and p-1 have common factors
+            roots = [0]
+            
+            # Check if there are other solutions by solving x**n ≡ 0 mod p
+            # This is equivalent to finding x such that x is divisible by p
+            # But since we're working mod p, the only solution is x ≡ 0 mod p
+            # However, there might be multiple roots if the equation has
+            # multiple solutions mod p (though for prime p, x=0 is the only solution)
+            return roots
+        else:
+            # Return the smallest root, which is 0
+            return 0
+
     if (p - 1) % n == 0:
         return _nthroot_mod1(a, n, p, all_roots)
     # The roots of ``x**n - a = 0 (mod p)`` are roots of
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0e6bac09b6
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+from sympy.ntheory.residue_ntheory import nthroot_mod
+
+# Test edge cases
+test_cases = [
+    # (a, n, p, description)
+    (0, 1, 5, "0^1 ≡ 0 mod 5"),
+    (0, 2, 5, "0^2 ≡ 0 mod 5"), 
+    (0, 3, 5, "0^3 ≡ 0 mod 5"),
+    (5, 2, 5, "5^2 ≡ 0 mod 5"),
+    (10, 3, 5, "10^3 ≡ 0 mod 5"),
+    (15, 4, 5, "15^4 ≡ 0 mod 5"),
+    (0, 2, 7, "0^2 ≡ 0 mod 7"),
+    (7, 3, 7, "7^3 ≡ 0 mod 7"),
+    (14, 4, 7, "14^4 ≡ 0 mod 7"),
+    (21, 5, 7, "21^5 ≡ 0 mod 7"),
+]
+
+print("Testing edge cases for a % p == 0:")
+for a, n, p, desc in test_cases:
+    print(f"\n{desc}")
+    print(f"nthroot_mod({a}, {n}, {p})...")
+    try:
+        result = nthroot_mod(a, n, p, all_roots=True)
+        print(f"  Result: {result}")
+        if result is not None:
+            print(f"  0 in result: {0 in result}")
+            if 0 not in result:
+                print("  ERROR: 0 should be in the result!")
+        else:
+            print("  Result is None - this might be an issue")
+    except Exception as e:
+        print(f"  Error: {e}")
+
+# Test that non-zero cases still work
+print("\n\nTesting that non-zero cases still work:")
+normal_cases = [
+    (1, 2, 5, "1^2 ≡ 1 mod 5"),
+    (4, 2, 5, "4^2 ≡ 1 mod 5"),
+    (2, 3, 7, "2^3 ≡ 8 ≡ 1 mod 7"),
+]
+
+for a, n, p, desc in normal_cases:
+    print(f"\n{desc}")
+    print(f"nthroot_mod({a}, {n}, {p})...")
+    try:
+        result = nthroot_mod(a, n, p, all_roots=True)
+        print(f"  Result: {result}")
+    except Exception as e:
+        print(f"  Error: {e}")
\ No newline at end of file
diff --git a/test_simple.py b/test_simple.py
new file mode 100644
index 0000000000..cd043f2e19
--- /dev/null
+++ b/test_simple.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from sympy.ntheory.residue_ntheory import nthroot_mod
+
+# Test the specific case that should fail
+print("Testing nthroot_mod(0, 3, 7)...")
+try:
+    result = nthroot_mod(0, 3, 7, all_roots=True)
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nTesting nthroot_mod(7, 2, 7)...")
+try:
+    result = nthroot_mod(7, 2, 7, all_roots=True)
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test a case that should work
+print("\nTesting nthroot_mod(1, 3, 7)...")
+try:
+    result = nthroot_mod(1, 3, 7, all_roots=True)
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
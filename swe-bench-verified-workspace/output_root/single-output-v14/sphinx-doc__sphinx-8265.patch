diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..ff34b8145
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sphinx.util.inspect import object_description, stringify_signature
+from inspect import Signature, Parameter
+
+# Test the object_description function with a tuple
+tuple_default = (1, 1, 1)
+print(f"object_description((1, 1, 1)) = '{object_description(tuple_default)}'")
+
+# Test with a signature that has tuple default
+params = [
+    Parameter('self', Parameter.POSITIONAL_OR_KEYWORD),
+    Parameter('lines', Parameter.POSITIONAL_OR_KEYWORD),
+    Parameter('color', Parameter.POSITIONAL_OR_KEYWORD, default=(1, 1, 1)),
+    Parameter('width', Parameter.POSITIONAL_OR_KEYWORD, default=5),
+    Parameter('label', Parameter.POSITIONAL_OR_KEYWORD, default=None),
+    Parameter('name', Parameter.POSITIONAL_OR_KEYWORD, default=None),
+]
+
+sig = Signature(params)
+signature_str = stringify_signature(sig, show_annotation=False)
+print(f"stringify_signature result = '{signature_str}'")
+
+# Let's also test regular repr
+print(f"repr((1, 1, 1)) = '{repr(tuple_default)}'")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py
index 9bafff11c..4b44042b9 100644
--- a/sphinx/pycode/ast.py
+++ b/sphinx/pycode/ast.py
@@ -173,7 +173,10 @@ class _UnparseVisitor(ast.NodeVisitor):
 
     def visit_Tuple(self, node: ast.Tuple) -> str:
         if node.elts:
-            return ", ".join(self.visit(e) for e in node.elts)
+            if len(node.elts) == 1:
+                return "(" + ", ".join(self.visit(e) for e in node.elts) + ",)"
+            else:
+                return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
         else:
             return "()"
 
diff --git a/test_ast_fix.py b/test_ast_fix.py
new file mode 100644
index 000000000..49e2965b7
--- /dev/null
+++ b/test_ast_fix.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from sphinx.pycode.ast import unparse
+import ast
+
+# Test the AST unparse function directly with tuple expressions
+# Create AST nodes for different tuple expressions
+
+# Test case 1: Simple tuple (1, 1, 1)
+tuple_ast = ast.Tuple(elts=[ast.Constant(value=1), ast.Constant(value=1), ast.Constant(value=1)])
+result1 = unparse(tuple_ast)
+print(f"unparse((1, 1, 1)) = '{result1}'")
+
+# Test case 2: Single element tuple (1,)
+tuple_ast2 = ast.Tuple(elts=[ast.Constant(value=1)])
+result2 = unparse(tuple_ast2)
+print(f"unparse((1,)) = '{result2}'")
+
+# Test case 3: Empty tuple ()
+tuple_ast3 = ast.Tuple(elts=[])
+result3 = unparse(tuple_ast3)
+print(f"unparse(()) = '{result3}'")
+
+# Test case 4: String tuple ('test', 123)
+tuple_ast4 = ast.Tuple(elts=[ast.Constant(value='test'), ast.Constant(value=123)])
+result4 = unparse(tuple_ast4)
+print(f"unparse(('test', 123)) = '{result4}'")
+
+# Test case 5: Test signature parsing
+from sphinx.util.inspect import signature_from_str
+
+# Test parsing a function signature with tuple default
+sig_str = "(lines, color=(1, 1, 1), width=5, label=None, name=None)"
+sig = signature_from_str(sig_str)
+
+print(f"\nTesting signature parsing:")
+print(f"Input: {sig_str}")
+print(f"Parsed signature: {sig}")
+
+# Test the parameter default values
+for param_name, param in sig.parameters.items():
+    if param.default is not param.empty:
+        print(f"Parameter '{param_name}' default: '{param.default}'")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..2ed60251e
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+
+import inspect
+from sphinx.ext.autodoc import FunctionDocumenter
+from sphinx.application import Sphinx
+from sphinx.config import Config
+from sphinx.environment import BuildEnvironment
+from docutils.utils import new_document
+from docutils.parsers.rst import Parser
+from docutils import nodes
+
+# Create a test class with the problematic method
+class TestClass:
+    def add_lines(self, lines, color=(1, 1, 1), width=5, label=None, name=None):
+        """Test method with tuple default."""
+        pass
+
+# Test the object directly
+print("=== Testing object_description directly ===")
+from sphinx.util.inspect import object_description
+print(f"object_description((1, 1, 1)) = '{object_description((1, 1, 1))}'")
+
+# Test stringify_signature directly
+print("\n=== Testing stringify_signature directly ===")
+from sphinx.util.inspect import stringify_signature
+sig = inspect.signature(TestClass.add_lines)
+print(f"stringify_signature(signature) = '{stringify_signature(sig, show_annotation=False)}'")
+
+# Let's also test what repr does with various tuple formats
+print("\n=== Testing different tuple representations ===")
+test_tuples = [
+    (1, 1, 1),
+    (1,),
+    (),
+    ("test", 123),
+    (1.0, 2.0, 3.0)
+]
+
+for tup in test_tuples:
+    print(f"repr({tup}) = '{repr(tup)}'")
+    print(f"object_description({tup}) = '{object_description(tup)}'")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..7a22d8be2
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+from sphinx.pycode.ast import unparse
+import ast
+
+# Test edge cases for tuple formatting
+
+test_cases = [
+    # Empty tuple
+    (ast.Tuple(elts=[]), "()"),
+    
+    # Single element tuple
+    (ast.Tuple(elts=[ast.Constant(value=1)]), "(1,)"),
+    
+    # Two element tuple
+    (ast.Tuple(elts=[ast.Constant(value=1), ast.Constant(value=2)]), "(1, 2)"),
+    
+    # Three element tuple (the original issue)
+    (ast.Tuple(elts=[ast.Constant(value=1), ast.Constant(value=1), ast.Constant(value=1)]), "(1, 1, 1)"),
+    
+    # Tuple with strings
+    (ast.Tuple(elts=[ast.Constant(value='test'), ast.Constant(value=123)]), "('test', 123)"),
+    
+    # Tuple with floats
+    (ast.Tuple(elts=[ast.Constant(value=1.0), ast.Constant(value=2.0), ast.Constant(value=3.0)]), "(1.0, 2.0, 3.0)"),
+    
+    # Tuple with mixed types
+    (ast.Tuple(elts=[ast.Constant(value=1), ast.Constant(value='test'), ast.Constant(value=3.14)]), "(1, 'test', 3.14)"),
+    
+    # Nested tuple (should work recursively)
+    (ast.Tuple(elts=[
+        ast.Tuple(elts=[ast.Constant(value=1), ast.Constant(value=2)]),
+        ast.Tuple(elts=[ast.Constant(value=3), ast.Constant(value=4)])
+    ]), "((1, 2), (3, 4))"),
+]
+
+print("Testing edge cases for tuple formatting:")
+for i, (ast_node, expected) in enumerate(test_cases):
+    result = unparse(ast_node)
+    status = "✓" if result == expected else "✗"
+    print(f"{status} Test {i+1}: Expected '{expected}', Got '{result}'")
+    
+    if result != expected:
+        print(f"   FAILED: Expected '{expected}' but got '{result}'")
\ No newline at end of file
diff --git a/test_full_pipeline.py b/test_full_pipeline.py
new file mode 100644
index 000000000..0e5552111
--- /dev/null
+++ b/test_full_pipeline.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+from sphinx.util.inspect import signature_from_str
+from sphinx.domains.python import _parse_arglist
+from sphinx import addnodes
+from docutils import nodes
+
+# Test the full pipeline: signature string -> parsed signature -> HTML output
+
+# Test case: function signature with tuple default
+sig_str = "add_lines(lines, color=(1, 1, 1), width=5, label=None, name=None)"
+
+# Parse the signature using the same method as the Python domain
+m = __import__('sphinx.domains.python').domains.python.py_sig_re.match(sig_str)
+if m is None:
+    print("Failed to match signature pattern")
+    exit(1)
+
+prefix, name, arglist, retann = m.groups()
+print(f"Parsed: prefix='{prefix}', name='{name}', arglist='{arglist}', retann='{retann}'")
+
+# Test the arglist parsing
+if arglist:
+    try:
+        params = _parse_arglist(arglist)
+        print(f"\nParsed arglist result:")
+        
+        # Walk through the parameter nodes to see how they're represented
+        for param_node in params:
+            print(f"Parameter node: {param_node}")
+            for child in param_node:
+                if isinstance(child, nodes.inline) and 'default_value' in child.get('classes', []):
+                    print(f"  Default value: '{child.astext()}'")
+                else:
+                    print(f"  Child: {child} ({type(child).__name__})")
+                    
+    except Exception as e:
+        print(f"Error parsing arglist: {e}")
+        import traceback
+        traceback.print_exc()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a61299979..e2baccc07 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = --color yes
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..3f9297064
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with py:method directive with :property: option
+creating index entries with parentheses when they shouldn't.
+"""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.environment import BuildEnvironment
+
+def test_index_entries():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        confdir = srcdir
+        
+        os.makedirs(srcdir)
+        
+        # Create conf.py
+        conf_content = '''
+extensions = []
+'''
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create index.rst with the test case from the issue
+        index_content = '''
+Test Document
+=============
+
+.. py:method:: Foo.bar
+   :property:
+
+.. py:property:: Foo.baz
+'''
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Build the documentation
+        app = Sphinx(srcdir, confdir, outdir, doctreedir, 'html')
+        app.build()
+        
+        # Check the index entries
+        env = app.env
+        from sphinx.environment.adapters.indexentries import IndexEntries
+        index_adapter = IndexEntries(env)
+        index_entries = index_adapter.create_index(app.builder)
+        
+        print("Index entries found:")
+        for entry_name, entries in index_entries.items():
+            print(f"  {entry_name}: {entries}")
+        
+        # Check specifically for the property entries
+        bar_entries = []
+        baz_entries = []
+        
+        # The index_entries structure is different, we need to search through it
+        for entry_name, entries in index_entries:
+            if entry_name == 'bar':
+                bar_entries = entries
+            elif entry_name == 'baz':
+                baz_entries = entries
+        
+        print(f"\nbar entries: {bar_entries}")
+        print(f"baz entries: {baz_entries}")
+        
+        # The issue: bar should not have parentheses in its index entry
+        for entry in bar_entries:
+            if '()' in str(entry):
+                print("BUG CONFIRMED: bar entry contains parentheses when it shouldn't!")
+                return False
+        
+        for entry in baz_entries:
+            if '()' in str(entry):
+                print("BUG: baz entry contains parentheses when it shouldn't!")
+                return False
+        
+        print("No parentheses found in property entries - bug may be fixed!")
+        return True
+
+if __name__ == '__main__':
+    test_index_entries()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 3dbc8746b..31bd48c0a 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/tox.ini b/tox.ini
index 00c8e13bd..11d3352df 100644
--- a/tox.ini
+++ b/tox.ini
@@ -22,14 +22,14 @@ deps =
     du15: docutils==0.15.*
     du16: docutils==0.16.*
     du17: docutils==0.17.*
-    py311: git+https://github.com/pytest-dev/py
+    py311: git+https://github.com/pytest -rA-dev/py
 extras =
     test
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
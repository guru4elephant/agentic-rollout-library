diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..3f882fe39e
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+
+from sympy.crypto.crypto import encode_morse, decode_morse
+
+print("=== Final Verification of Morse Code Fix ===")
+print()
+
+# Test the specific issue mentioned in the GitHub issue
+print("1. Testing the specific issue: Morse encoding for '1'")
+print(f"   Before fix: '----': '1' (incorrect)")
+print(f"   After fix:  '.----': '1' (correct)")
+
+# Test encoding '1' to Morse
+morse_1 = encode_morse('1')
+print(f"   encode_morse('1') = '{morse_1}'")
+
+# Test decoding the correct Morse for '1'
+decoded_1 = decode_morse('.----')
+print(f"   decode_morse('.----') = '{decoded_1}'")
+
+if morse_1 == '.----' and decoded_1 == '1':
+    print("   ✓ SUCCESS: The Morse code mapping for '1' is now correct!")
+else:
+    print("   ✗ FAILURE: The Morse code mapping is still incorrect!")
+
+print()
+
+# Test that the old incorrect mapping no longer works
+print("2. Testing that old incorrect mapping no longer works")
+try:
+    old_decoded = decode_morse('----')
+    print(f"   ✗ ERROR: Old mapping '----' still decodes to '{old_decoded}'")
+except KeyError:
+    print("   ✓ SUCCESS: Old incorrect mapping '----' correctly raises KeyError")
+
+print()
+
+# Test round-trip encoding/decoding for all digits
+print("3. Testing round-trip encoding/decoding for all digits (0-9)")
+digits = "0123456789"
+all_correct = True
+
+for digit in digits:
+    morse = encode_morse(digit)
+    decoded = decode_morse(morse)
+    status = "✓" if decoded == digit else "✗"
+    if decoded != digit:
+        all_correct = False
+    print(f"   {digit}: {morse} -> {decoded} {status}")
+
+if all_correct:
+    print("   ✓ SUCCESS: All digits encode and decode correctly!")
+else:
+    print("   ✗ FAILURE: Some digits don't encode/decode correctly!")
+
+print()
+
+# Verify the fix addresses the exact GitHub issue
+print("4. GitHub Issue Verification")
+print("   Issue: 'The current Morse mapping contains an incorrect mapping of \"----\": \"1\"'")
+print("   Fix: Changed to correct mapping of \".----\": \"1\"")
+print()
+print("   Current morse_char mapping for '1':")
+print(f"   {repr('.----')}: {repr('1')}")
+
+# Double-check by looking at the actual dictionary
+from sympy.crypto.crypto import morse_char
+if morse_char.get('.----') == '1' and '----' not in morse_char:
+    print("   ✓ SUCCESS: The fix correctly addresses the GitHub issue!")
+else:
+    print("   ✗ FAILURE: The fix does not correctly address the GitHub issue!")
+
+print()
+print("=== Verification Complete ===")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..25a1f778cc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+from sympy.crypto.crypto import encode_morse, decode_morse
+
+# Test the Morse code mapping for "1"
+print("Testing Morse code mapping...")
+
+# Encode "1" to Morse code
+morse_1 = encode_morse("1")
+print(f"Encode '1': {morse_1}")
+
+# Decode the correct Morse code for "1" (should be ".----")
+decoded_1 = decode_morse(".----")
+print(f"Decode '.----': {decoded_1}")
+
+# Verify the mapping is correct
+if morse_1 == ".----" and decoded_1 == "1":
+    print("\nSUCCESS: Morse code mapping for '1' is correct!")
+    print(f"  '1' -> '{morse_1}' -> '{decoded_1}'")
+else:
+    print("\nERROR: Morse code mapping is incorrect!")
+    print(f"  Expected: '1' -> '.----' -> '1'")
+    print(f"  Got:      '1' -> '{morse_1}' -> '{decoded_1}'")
+
+# Test a few more digits to ensure we didn't break anything
+print("\nTesting other digits...")
+for digit in "23456789":
+    morse = encode_morse(digit)
+    decoded = decode_morse(morse)
+    status = "✓" if decoded == digit else "✗"
+    print(f"  {digit}: {morse} -> {decoded} {status}")
\ No newline at end of file
diff --git a/sympy/crypto/crypto.py b/sympy/crypto/crypto.py
index ca552191c0..0c556b6efb 100644
--- a/sympy/crypto/crypto.py
+++ b/sympy/crypto/crypto.py
@@ -1520,7 +1520,7 @@ def decipher_kid_rsa(msg, key):
     "..-": "U", "...-": "V",
     ".--": "W", "-..-": "X",
     "-.--": "Y", "--..": "Z",
-    "-----": "0", "----": "1",
+    "-----": "0", ".----": "1",
     "..---": "2", "...--": "3",
     "....-": "4", ".....": "5",
     "-....": "6", "--...": "7",
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3831da7c3a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+from sympy.crypto.crypto import encode_morse, decode_morse
+
+# Test various characters to ensure the Morse code functionality works correctly
+test_cases = [
+    "HELLO",
+    "WORLD",
+    "12345",
+    "TEST",
+    "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
+    "0123456789",
+    ".,:;?!-()'=+/@$"
+]
+
+print("Testing Morse code edge cases...")
+for test_str in test_cases:
+    try:
+        # Encode to Morse
+        morse = encode_morse(test_str)
+        # Decode back to text
+        decoded = decode_morse(morse)
+        
+        # Check if round-trip works
+        if decoded == test_str.replace(" ", ""):
+            status = "✓"
+        else:
+            status = "✗"
+            
+        print(f"  '{test_str}' -> Morse -> '{decoded}' {status}")
+        
+    except Exception as e:
+        print(f"  '{test_str}' -> ERROR: {e}")
+
+# Test empty string
+print("\nTesting empty string...")
+try:
+    empty_morse = encode_morse("")
+    empty_decoded = decode_morse("")
+    print(f"  '' -> '{empty_morse}' -> '{empty_decoded}'")
+except Exception as e:
+    print(f"  '' -> ERROR: {e}")
+
+# Test with different separators
+print("\nTesting with different separators...")
+try:
+    morse_custom = encode_morse("HELLO", sep="/")
+    decoded_custom = decode_morse(morse_custom, sep="/")
+    print(f"  'HELLO' with custom separator -> '{morse_custom}' -> '{decoded_custom}'")
+except Exception as e:
+    print(f"  Custom separator -> ERROR: {e}")
\ No newline at end of file
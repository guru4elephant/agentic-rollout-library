diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py
index 78256ca3b2..b51e292aa0 100644
--- a/django/contrib/messages/storage/cookie.py
+++ b/django/contrib/messages/storage/cookie.py
@@ -92,7 +92,11 @@ class CookieStorage(BaseStorage):
                 samesite=settings.SESSION_COOKIE_SAMESITE,
             )
         else:
-            response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)
+            response.delete_cookie(
+                self.cookie_name,
+                domain=settings.SESSION_COOKIE_DOMAIN,
+                samesite=settings.SESSION_COOKIE_SAMESITE,
+            )
 
     def _store(self, messages, response, remove_oldest=True, *args, **kwargs):
         """
diff --git a/django/http/response.py b/django/http/response.py
index e00bcacefb..b9ad30c5ea 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -210,13 +210,13 @@ class HttpResponseBase:
         value = signing.get_cookie_signer(salt=key + salt).sign(value)
         return self.set_cookie(key, value, **kwargs)
 
-    def delete_cookie(self, key, path='/', domain=None):
+    def delete_cookie(self, key, path='/', domain=None, samesite=None):
         # Most browsers ignore the Set-Cookie header if the cookie name starts
         # with __Host- or __Secure- and the cookie doesn't use the secure flag.
         secure = key.startswith(('__Secure-', '__Host-'))
         self.set_cookie(
             key, max_age=0, path=path, domain=domain, secure=secure,
-            expires='Thu, 01 Jan 1970 00:00:00 GMT',
+            expires='Thu, 01 Jan 1970 00:00:00 GMT', samesite=samesite,
         )
 
     # Common methods used by subclasses
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..42592a98e7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with HttpResponse.delete_cookie() not preserving samesite attribute.
+"""
+
+from django.http import HttpResponse
+from django.conf import settings
+
+# Configure settings if needed
+if not settings.configured:
+    settings.configure(
+        SESSION_COOKIE_SAMESITE='Lax',
+        SESSION_COOKIE_SECURE=False,
+        SESSION_COOKIE_HTTPONLY=True,
+    )
+
+def test_delete_cookie_issue():
+    """Test that delete_cookie now preserves samesite attribute."""
+    # Test 1: Default behavior (no samesite specified)
+    response1 = HttpResponse()
+    response1.delete_cookie('test_cookie')
+    
+    print("=== Test 1: Default delete_cookie ===")
+    cookie_header = response1.cookies.output()
+    print(f"Cookie header: {cookie_header}")
+    
+    # Test 2: With samesite specified
+    response2 = HttpResponse()
+    response2.delete_cookie('test_cookie', samesite='Lax')
+    
+    print("\n=== Test 2: delete_cookie with samesite='Lax' ===")
+    cookie_header = response2.cookies.output()
+    print(f"Cookie header: {cookie_header}")
+    
+    # Test 3: With samesite=None
+    response3 = HttpResponse()
+    response3.delete_cookie('test_cookie', samesite=None)
+    
+    print("\n=== Test 3: delete_cookie with samesite=None ===")
+    cookie_header = response3.cookies.output()
+    print(f"Cookie header: {cookie_header}")
+    
+    # Check if samesite attribute is preserved when specified
+    if 'samesite=lax' in response2.cookies.output().lower():
+        print("✓ SUCCESS: samesite attribute is preserved when specified")
+        return True
+    else:
+        print("✗ FAILURE: samesite attribute is NOT preserved")
+        return False
+
+if __name__ == '__main__':
+    test_delete_cookie_issue()
\ No newline at end of file
diff --git a/test_messages_fix.py b/test_messages_fix.py
new file mode 100644
index 0000000000..a9a2074758
--- /dev/null
+++ b/test_messages_fix.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+"""
+Test that the messages system now properly preserves samesite when deleting cookies.
+"""
+
+from django.conf import settings
+
+# Configure settings first
+settings.configure(
+    SESSION_COOKIE_SAMESITE='Lax',
+    SESSION_COOKIE_SECURE=False,
+    SESSION_COOKIE_HTTPONLY=True,
+    SESSION_COOKIE_DOMAIN=None,
+    MESSAGE_TAGS={},
+)
+
+from django.http import HttpResponse
+from django.contrib.messages.storage.cookie import CookieStorage
+
+def test_messages_delete_cookie():
+    """Test that messages system preserves samesite when deleting cookies."""
+    # Create a mock response object
+    response = HttpResponse()
+    
+    # Create a mock request object
+    mock_request = type('MockRequest', (), {'COOKIES': {}})()
+    
+    # Create a cookie storage instance
+    storage = CookieStorage(mock_request)
+    
+    # Simulate the scenario where we have no messages to store (empty encoded_data)
+    # This should trigger delete_cookie
+    storage._update_cookie('', response)
+    
+    print("=== Messages system delete_cookie ===")
+    cookie_header = response.cookies.output()
+    print(f"Cookie header: {cookie_header}")
+    
+    # Check if samesite attribute is preserved
+    if 'samesite=lax' in cookie_header.lower():
+        print("✓ SUCCESS: messages system preserves samesite attribute")
+        return True
+    else:
+        print("✗ FAILURE: messages system does NOT preserve samesite attribute")
+        return False
+
+if __name__ == '__main__':
+    test_messages_delete_cookie()
\ No newline at end of file
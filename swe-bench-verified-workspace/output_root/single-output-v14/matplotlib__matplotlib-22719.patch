diff --git a/lib/matplotlib/category.py b/lib/matplotlib/category.py
index c823b68fd9..3b78440aed 100644
--- a/lib/matplotlib/category.py
+++ b/lib/matplotlib/category.py
@@ -54,10 +54,14 @@ class StrCategoryConverter(units.ConversionInterface):
         # dtype = object preserves numerical pass throughs
         values = np.atleast_1d(np.array(value, dtype=object))
         # pass through sequence of non binary numbers
-        with _api.suppress_matplotlib_deprecation_warning():
-            is_numlike = all(units.ConversionInterface.is_numlike(v)
-                             and not isinstance(v, (str, bytes))
-                             for v in values)
+        # Skip numlike check for empty arrays to avoid false deprecation warnings
+        if values.size == 0:
+            is_numlike = False
+        else:
+            with _api.suppress_matplotlib_deprecation_warning():
+                is_numlike = all(units.ConversionInterface.is_numlike(v)
+                                 and not isinstance(v, (str, bytes))
+                                 for v in values)
         if is_numlike:
             _api.warn_deprecated(
                 "3.5", message="Support for passing numbers through unit "
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e5349f912d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+import matplotlib.pyplot as plt
+import warnings
+
+# Capture warnings to see the exact message
+warnings.filterwarnings('error', category=DeprecationWarning)
+
+try:
+    f, ax = plt.subplots()
+    ax.xaxis.update_units(["a", "b"])
+    ax.plot([], [])
+    print("No error occurred")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..b32aa330fa
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,43 @@
+import matplotlib.pyplot as plt
+import warnings
+import numpy as np
+
+def test_case(description, x_data, y_data):
+    print(f"\nTesting: {description}")
+    try:
+        f, ax = plt.subplots()
+        ax.xaxis.update_units(["a", "b"])
+        line = ax.plot(x_data, y_data)
+        print(f"✓ Success - created {len(line)} line(s)")
+        plt.close(f)
+    except Exception as e:
+        print(f"✗ Error: {e}")
+        plt.close('all')
+
+# Test various empty data cases
+test_case("Empty lists", [], [])
+test_case("Empty numpy arrays", np.array([]), np.array([]))
+test_case("Empty list with non-empty list", [], [1, 2, 3])
+test_case("Non-empty list with empty list", [1, 2, 3], [])
+
+# Test normal cases to ensure we didn't break anything
+test_case("Normal categorical data", ["a", "b"], [1, 2])
+test_case("Mixed numeric and categorical", [1, 2], [1, 2])
+
+print("\nTesting with warnings as errors:")
+warnings.filterwarnings('error', category=DeprecationWarning)
+try:
+    f, ax = plt.subplots()
+    ax.xaxis.update_units(["a", "b"])
+    ax.plot([], [])
+    print("✓ No deprecation warning for empty data")
+    plt.close(f)
+except DeprecationWarning as e:
+    print(f"✗ Unexpected deprecation warning: {e}")
+    plt.close('all')
+except Exception as e:
+    print(f"✗ Other error: {e}")
+    plt.close('all')
+
+# Reset warnings
+warnings.resetwarnings()
\ No newline at end of file
diff --git a/test_debug_warnings.py b/test_debug_warnings.py
new file mode 100644
index 0000000000..307c61fcd4
--- /dev/null
+++ b/test_debug_warnings.py
@@ -0,0 +1,24 @@
+import matplotlib.pyplot as plt
+import warnings
+import numpy as np
+
+# Enable all warnings to see what's happening
+warnings.simplefilter("always")
+
+print("Testing with numeric data...")
+f, ax = plt.subplots()
+ax.xaxis.update_units(["a", "b", "c"])
+line = ax.plot([1, 2, 3], [1, 2, 3])
+plt.close(f)
+
+print("\nTesting with empty data...")
+f, ax = plt.subplots()
+ax.xaxis.update_units(["a", "b", "c"])
+line = ax.plot([], [])
+plt.close(f)
+
+print("\nTesting with categorical data...")
+f, ax = plt.subplots()
+ax.xaxis.update_units(["a", "b", "c"])
+line = ax.plot(["a", "b", "c"], [1, 2, 3])
+plt.close(f)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..06c619f73c
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,102 @@
+"""
+Test script to verify the fix for the GitHub issue:
+[Bug]: Confusing deprecation warning when empty data passed to axis with category units
+"""
+
+import matplotlib.pyplot as plt
+import warnings
+import numpy as np
+
+def test_original_issue():
+    """Test the exact code from the GitHub issue"""
+    print("Testing original issue code...")
+    
+    # Capture warnings to ensure no deprecation warnings
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        
+        f, ax = plt.subplots()
+        ax.xaxis.update_units(["a", "b"])
+        result = ax.plot([], [])
+        
+        # Check that no deprecation warnings were raised
+        deprecation_warnings = [warning for warning in w if issubclass(warning.category, DeprecationWarning)]
+        if deprecation_warnings:
+            print("✗ FAIL: Deprecation warnings still present:")
+            for warning in deprecation_warnings:
+                print(f"  {warning.message}")
+        else:
+            print("✓ PASS: No deprecation warnings for empty data")
+        
+        # Check that the plot was created successfully
+        if result and len(result) == 1:
+            print("✓ PASS: Empty plot created successfully")
+        else:
+            print("✗ FAIL: Empty plot not created correctly")
+        
+        plt.close(f)
+
+def test_ax_convert_xunits():
+    """Test the suggested workaround from the issue"""
+    print("\nTesting ax.convert_xunits([])...")
+    
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        
+        f, ax = plt.subplots()
+        ax.xaxis.update_units(["a", "b"])
+        
+        try:
+            result = ax.convert_xunits([])
+            print("✓ PASS: ax.convert_xunits([]) executed without error")
+            
+            # Check that no deprecation warnings were raised
+            deprecation_warnings = [warning for warning in w if issubclass(warning.category, DeprecationWarning)]
+            if deprecation_warnings:
+                print("✗ FAIL: Deprecation warnings still present for convert_xunits:")
+                for warning in deprecation_warnings:
+                    print(f"  {warning.message}")
+            else:
+                print("✓ PASS: No deprecation warnings for convert_xunits with empty data")
+                
+        except Exception as e:
+            print(f"✗ FAIL: Error in ax.convert_xunits([]): {e}")
+        
+        plt.close(f)
+
+def test_edge_cases():
+    """Test various edge cases with empty data"""
+    print("\nTesting edge cases...")
+    
+    test_cases = [
+        ("Empty list", []),
+        ("Empty numpy array", np.array([])),
+        ("Empty list with object dtype", np.array([], dtype=object)),
+    ]
+    
+    for name, empty_data in test_cases:
+        with warnings.catch_warnings(record=True) as w:
+            warnings.simplefilter("always")
+            
+            f, ax = plt.subplots()
+            ax.xaxis.update_units(["a", "b"])
+            
+            try:
+                result = ax.plot(empty_data, empty_data)
+                deprecation_warnings = [warning for warning in w if issubclass(warning.category, DeprecationWarning)]
+                
+                if deprecation_warnings:
+                    print(f"✗ FAIL {name}: Deprecation warnings present")
+                else:
+                    print(f"✓ PASS {name}: No deprecation warnings")
+                    
+            except Exception as e:
+                print(f"✗ FAIL {name}: Error: {e}")
+            
+            plt.close(f)
+
+if __name__ == "__main__":
+    test_original_issue()
+    test_ax_convert_xunits()
+    test_edge_cases()
+    print("\nTest completed!")
\ No newline at end of file
diff --git a/test_is_numlike.py b/test_is_numlike.py
new file mode 100644
index 0000000000..236a4effb7
--- /dev/null
+++ b/test_is_numlike.py
@@ -0,0 +1,24 @@
+import numpy as np
+from matplotlib import units
+
+# Test what is_numlike returns for empty array
+empty_array = np.array([], dtype=object)
+values = np.atleast_1d(empty_array)
+print(f"values: {values}")
+print(f"values shape: {values.shape}")
+print(f"values dtype: {values.dtype}")
+print(f"values size: {values.size}")
+
+if values.size > 0:
+    print(f"values contents: {values[0]}")
+else:
+    print("values is empty")
+
+# Test is_numlike on empty array
+if values.size > 0:
+    is_numlike = all(units.ConversionInterface.is_numlike(v)
+                     and not isinstance(v, (str, bytes))
+                     for v in values)
+    print(f"is_numlike: {is_numlike}")
+else:
+    print("Cannot test is_numlike on empty array")
\ No newline at end of file
diff --git a/test_normal_cases.py b/test_normal_cases.py
new file mode 100644
index 0000000000..31f948aead
--- /dev/null
+++ b/test_normal_cases.py
@@ -0,0 +1,59 @@
+import matplotlib.pyplot as plt
+import warnings
+import numpy as np
+
+def test_normal_cases():
+    """Test that normal categorical data still works correctly"""
+    print("Testing normal categorical data cases...")
+    
+    test_cases = [
+        ("Simple categories", ["a", "b", "c"], [1, 2, 3]),
+        ("Numeric strings", ["1", "2", "3"], [1, 2, 3]),
+        ("Mixed categories", ["apple", "banana", "cherry"], [10, 20, 30]),
+        ("Single category", ["a"], [1]),
+    ]
+    
+    for name, x_data, y_data in test_cases:
+        try:
+            f, ax = plt.subplots()
+            ax.xaxis.update_units(x_data)
+            line = ax.plot(x_data, y_data)
+            plt.close(f)
+            print(f"✓ PASS {name}: Normal categorical data works")
+        except Exception as e:
+            print(f"✗ FAIL {name}: {e}")
+            plt.close('all')
+
+def test_numeric_data():
+    """Test that numeric data still triggers the deprecation warning appropriately"""
+    print("\nTesting numeric data (should still show deprecation warning)...")
+    
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        
+        f, ax = plt.subplots()
+        ax.xaxis.update_units(["a", "b", "c"])
+        
+        # This should still trigger the deprecation warning
+        line = ax.plot([1, 2, 3], [1, 2, 3])
+        
+        # Check for the specific deprecation warning about passing numbers through unit converters
+        deprecation_warnings = [warning for warning in w 
+                               if issubclass(warning.category, DeprecationWarning)
+                               and "passing numbers through unit converters" in str(warning.message)]
+        if deprecation_warnings:
+            print("✓ PASS: Deprecation warnings correctly shown for numeric data")
+            for warning in deprecation_warnings:
+                print(f"  Warning: {warning.message}")
+        else:
+            print("✗ FAIL: No deprecation warnings for numeric data")
+            print("All warnings captured:")
+            for warning in w:
+                print(f"  {warning.category.__name__}: {warning.message}")
+        
+        plt.close(f)
+
+if __name__ == "__main__":
+    test_normal_cases()
+    test_numeric_data()
+    print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_simple_warning.py b/test_simple_warning.py
new file mode 100644
index 0000000000..7dce6b50ea
--- /dev/null
+++ b/test_simple_warning.py
@@ -0,0 +1,15 @@
+import warnings
+
+# Test if we can capture warnings at all
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    
+    # Generate a simple deprecation warning
+    warnings.warn("Test warning", DeprecationWarning)
+    
+    if w:
+        print("Warnings captured:")
+        for warning in w:
+            print(f"  {warning.category.__name__}: {warning.message}")
+    else:
+        print("No warnings captured - issue with warning capture")
\ No newline at end of file
diff --git a/test_targeted.py b/test_targeted.py
new file mode 100644
index 0000000000..3f3773b0a6
--- /dev/null
+++ b/test_targeted.py
@@ -0,0 +1,55 @@
+import matplotlib.pyplot as plt
+import warnings
+import numpy as np
+
+# Test the exact scenario from the GitHub issue
+print("=== Testing original issue scenario ===")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    
+    f, ax = plt.subplots()
+    ax.xaxis.update_units(["a", "b"])
+    ax.plot([], [])
+    plt.close(f)
+    
+    # Check for any warnings
+    if w:
+        print("Warnings found:")
+        for warning in w:
+            print(f"  {warning.category.__name__}: {warning.message}")
+    else:
+        print("No warnings found - this is good for empty data!")
+
+print("\n=== Testing numeric data scenario ===")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    
+    f, ax = plt.subplots()
+    ax.xaxis.update_units(["a", "b"])
+    ax.plot([1, 2], [1, 2])  # Numeric data
+    plt.close(f)
+    
+    # Check for any warnings
+    if w:
+        print("Warnings found:")
+        for warning in w:
+            print(f"  {warning.category.__name__}: {warning.message}")
+    else:
+        print("No warnings found for numeric data")
+
+print("\n=== Testing categorical data scenario ===")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    
+    f, ax = plt.subplots()
+    ax.xaxis.update_units(["a", "b"])
+    ax.plot(["a", "b"], [1, 2])  # Categorical data
+    plt.close(f)
+    
+    # Check for any warnings
+    if w:
+        print("Warnings found:")
+        for warning in w:
+            print(f"  {warning.category.__name__}: {warning.message}")
+    else:
+        print("No warnings found for categorical data")
\ No newline at end of file
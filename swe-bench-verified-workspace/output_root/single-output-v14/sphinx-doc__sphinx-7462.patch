diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..f5c5876b0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+"""Script to reproduce the IndexError: pop from empty list issue."""
+
+from typing import Tuple
+from sphinx.domains.python import _parse_annotation
+
+def foo() -> Tuple[()]:
+    """Sample text."""
+    return ()
+
+try:
+    # This should trigger the error
+    result = _parse_annotation("Tuple[()]")
+    print("Success:", result)
+except Exception as e:
+    print("Error:", type(e).__name__, str(e))
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a427d5493..978e3d8e0 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 3ca730e30..eff01bde4 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -100,7 +100,8 @@ def _parse_annotation(annotation: str) -> List[Node]:
             for elem in node.elts:
                 result.extend(unparse(elem))
                 result.append(addnodes.desc_sig_punctuation('', ', '))
-            result.pop()
+            if result:  # Only pop if the list is not empty
+                result.pop()
             result.append(addnodes.desc_sig_punctuation('', ']'))
             return result
         elif isinstance(node, ast.Module):
@@ -118,7 +119,8 @@ def _parse_annotation(annotation: str) -> List[Node]:
             for elem in node.elts:
                 result.extend(unparse(elem))
                 result.append(addnodes.desc_sig_punctuation('', ', '))
-            result.pop()
+            if result:  # Only pop if the list is not empty
+                result.pop()
             return result
         else:
             raise SyntaxError  # unsupported syntax
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..5fa8712eb
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+"""Comprehensive test for the fixed tuple and list parsing."""
+
+from sphinx.domains.python import _parse_annotation
+
+def test_empty_tuple():
+    """Test parsing empty tuple annotation."""
+    try:
+        result = _parse_annotation("Tuple[()]")
+        print("‚úì Empty tuple parsing succeeded:", result)
+        return True
+    except Exception as e:
+        print("‚úó Empty tuple parsing failed:", type(e).__name__, str(e))
+        return False
+
+def test_empty_list():
+    """Test parsing empty list annotation."""
+    try:
+        result = _parse_annotation("List[]")
+        print("‚úì Empty list parsing succeeded:", result)
+        return True
+    except Exception as e:
+        print("‚úó Empty list parsing failed:", type(e).__name__, str(e))
+        return False
+
+def test_non_empty_tuple():
+    """Test parsing non-empty tuple annotation."""
+    try:
+        result = _parse_annotation("Tuple[int, str]")
+        print("‚úì Non-empty tuple parsing succeeded:", result)
+        return True
+    except Exception as e:
+        print("‚úó Non-empty tuple parsing failed:", type(e).__name__, str(e))
+        return False
+
+def test_non_empty_list():
+    """Test parsing non-empty list annotation."""
+    try:
+        result = _parse_annotation("List[int]")
+        print("‚úì Non-empty list parsing succeeded:", result)
+        return True
+    except Exception as e:
+        print("‚úó Non-empty list parsing failed:", type(e).__name__, str(e))
+        return False
+
+if __name__ == "__main__":
+    print("Testing comprehensive annotation parsing...")
+    
+    success_count = 0
+    total_tests = 4
+    
+    success_count += test_empty_tuple()
+    success_count += test_empty_list()
+    success_count += test_non_empty_tuple()
+    success_count += test_non_empty_list()
+    
+    print(f"\nResults: {success_count}/{total_tests} tests passed")
+    
+    if success_count == total_tests:
+        print("üéâ All tests passed!")
+    else:
+        print("‚ùå Some tests failed!")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 000000000..7b6a094c6
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+"""Test to reproduce and verify the fix for the original GitHub issue."""
+
+from typing import Tuple
+from sphinx.domains.python import _parse_annotation
+
+def foo() -> Tuple[()]:
+    """Sample text."""
+    return ()
+
+def test_original_issue():
+    """Test the exact case from the GitHub issue."""
+    try:
+        # This is the exact annotation that caused the IndexError
+        result = _parse_annotation("Tuple[()]")
+        print("‚úì Original issue fixed! Parsing Tuple[()] succeeded:", result)
+        return True
+    except IndexError as e:
+        print("‚úó Original issue NOT fixed! IndexError still occurs:", str(e))
+        return False
+    except Exception as e:
+        print("‚úó Unexpected error:", type(e).__name__, str(e))
+        return False
+
+if __name__ == "__main__":
+    print("Testing the original GitHub issue...")
+    if test_original_issue():
+        print("üéâ The original issue has been successfully fixed!")
+    else:
+        print("‚ùå The original issue is still present!")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
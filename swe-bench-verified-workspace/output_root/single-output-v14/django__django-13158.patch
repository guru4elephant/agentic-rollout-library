diff --git a/debug_none.py b/debug_none.py
new file mode 100644
index 0000000000..756ab5883e
--- /dev/null
+++ b/debug_none.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python
+"""
+Debug script to understand the QuerySet.none() behavior.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+def debug_none_behavior():
+    print("Debugging QuerySet.none() behavior...")
+    
+    # Create a simple model
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'django.contrib.auth'
+    
+    # Test the core issue: what happens when we call none() on different query types
+    print("1. Creating different query types:")
+    
+    # Regular filter query
+    filter_query = TestModel.objects.filter(name='test1')
+    print(f"Filter query: {filter_query}")
+    
+    # OR query
+    or_query = TestModel.objects.filter(name='test1') | TestModel.objects.filter(name='test2')
+    print(f"OR query: {or_query}")
+    
+    # UNION query
+    union_query = TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2'))
+    print(f"UNION query: {union_query}")
+    
+    print("\n2. Calling none() on each query type:")
+    
+    # Test none() on filter query
+    filter_none = filter_query.none()
+    print(f"Filter none(): {filter_none}")
+    
+    # Test none() on OR query
+    or_none = or_query.none()
+    print(f"OR none(): {or_none}")
+    
+    # Test none() on UNION query
+    union_none = union_query.none()
+    print(f"UNION none(): {union_none}")
+    
+    print("\n3. Checking query attributes:")
+    print(f"Filter none query: {filter_none.query}")
+    print(f"OR none query: {or_none.query}")
+    print(f"UNION none query: {union_none.query}")
+    
+    print("\n4. Testing count() method (should all be 0):")
+    try:
+        print(f"Filter none count: {filter_none.count()}")
+    except Exception as e:
+        print(f"Filter none count error: {e}")
+    
+    try:
+        print(f"OR none count: {or_none.count()}")
+    except Exception as e:
+        print(f"OR none count error: {e}")
+    
+    try:
+        print(f"UNION none count: {union_none.count()}")
+    except Exception as e:
+        print(f"UNION none count error: {e}")
+
+if __name__ == '__main__':
+    debug_none_behavior()
\ No newline at end of file
diff --git a/focused_test.py b/focused_test.py
new file mode 100644
index 0000000000..0bf122514c
--- /dev/null
+++ b/focused_test.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python
+"""
+Focused test to reproduce the exact issue from GitHub.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+def test_union_issue():
+    print("Testing the exact UNION issue from GitHub...")
+    
+    # Create models as described in the issue
+    class Publication(models.Model):
+        pass
+        
+        class Meta:
+            app_label = 'django.contrib.auth'
+    
+    # Test the issue: when form is submitted empty, UNION query should return empty queryset
+    print("1. Testing OR query behavior:")
+    or_queryset = (Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5))
+    or_form = forms.ModelMultipleChoiceField(queryset=or_queryset, required=False)
+    
+    # Simulate empty form submission
+    or_cleaned = or_form.clean([])
+    print(f"OR query cleaned result: {or_cleaned}")
+    print(f"OR query cleaned type: {type(or_cleaned)}")
+    
+    print("\n2. Testing UNION query behavior:")
+    union_queryset = Publication.objects.filter(id__lt=2).union(Publication.objects.filter(id__gt=5))
+    union_form = forms.ModelMultipleChoiceField(queryset=union_queryset, required=False)
+    
+    # Simulate empty form submission
+    union_cleaned = union_form.clean([])
+    print(f"UNION query cleaned result type: {type(union_cleaned)}")
+    print(f"UNION query cleaned query: {union_cleaned.query}")
+    
+    print("\n3. Comparing the results:")
+    print(f"Are both results empty querysets? {or_cleaned.count() == 0 and union_cleaned.count() == 0}")
+    print(f"Are they the same object? {or_cleaned is union_cleaned}")
+    print(f"Are they equal? {or_cleaned == union_cleaned}")
+    
+    # The issue: union_cleaned should be an empty queryset, but might not be working correctly
+
+if __name__ == '__main__':
+    test_union_issue()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..03e48012e7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python
+"""
+Script to reproduce the issue with QuerySet.none() on combined queries.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+# Test the specific issue with QuerySet.none() behavior
+def test_queryset_none_behavior():
+    print("Testing QuerySet.none() behavior with different query types...")
+    
+    # Create a simple model for testing
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'django.contrib.auth'  # Use existing app to avoid registration issues
+    
+    # Test 1: OR query with none()
+    print("\n1. Testing OR query with none():")
+    or_query = (TestModel.objects.filter(name='test1') | TestModel.objects.filter(name='test2')).none()
+    try:
+        print(f"OR none() query: {or_query.query}")
+    except Exception as e:
+        print(f"OR none() query access failed: {e}")
+    print(f"OR none() result: {list(or_query)}")
+    
+    # Test 2: UNION query with none()
+    print("\n2. Testing UNION query with none():")
+    union_query = TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2')).none()
+    try:
+        print(f"UNION none() query: {union_query.query}")
+    except Exception as e:
+        print(f"UNION none() query access failed: {e}")
+    print(f"UNION none() result: {list(union_query)}")
+    
+    # Test 3: Check if they behave the same in ModelMultipleChoiceField
+    print("\n3. Testing in ModelMultipleChoiceField context:")
+    
+    class TestForm(forms.Form):
+        # Using OR query
+        field_or = forms.ModelMultipleChoiceField(
+            queryset=(TestModel.objects.filter(name='test1') | TestModel.objects.filter(name='test2')),
+            required=False
+        )
+        # Using UNION query  
+        field_union = forms.ModelMultipleChoiceField(
+            queryset=TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2')),
+            required=False
+        )
+    
+    form = TestForm(data={'field_or': [], 'field_union': []})
+    print(f"Form is_valid(): {form.is_valid()}")
+    
+    if form.is_valid():
+        print(f"OR field cleaned_data: {form.cleaned_data['field_or']}")
+        print(f"UNION field cleaned_data: {form.cleaned_data['field_union']}")
+        print(f"Are they equal? {form.cleaned_data['field_or'] == form.cleaned_data['field_union']}")
+
+if __name__ == '__main__':
+    test_queryset_none_behavior()
\ No newline at end of file
diff --git a/simple_debug.py b/simple_debug.py
new file mode 100644
index 0000000000..88fd57f415
--- /dev/null
+++ b/simple_debug.py
@@ -0,0 +1,107 @@
+#!/usr/bin/env python
+"""
+Simple debug script to understand the QuerySet.none() behavior without executing queries.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+def debug_none_behavior():
+    print("Debugging QuerySet.none() behavior...")
+    
+    # Create a simple model
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'django.contrib.auth'
+    
+    # Test the core issue: what happens when we call none() on different query types
+    print("1. Creating different query types:")
+    
+    # Regular filter query
+    filter_query = TestModel.objects.filter(name='test1')
+    print(f"Filter query type: {type(filter_query)}")
+    
+    # OR query
+    or_query = TestModel.objects.filter(name='test1') | TestModel.objects.filter(name='test2')
+    print(f"OR query type: {type(or_query)}")
+    
+    # UNION query
+    union_query = TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2'))
+    print(f"UNION query type: {type(union_query)}")
+    
+    print("\n2. Calling none() on each query type:")
+    
+    # Test none() on filter query
+    filter_none = filter_query.none()
+    print(f"Filter none() type: {type(filter_none)}")
+    
+    # Test none() on OR query
+    or_none = or_query.none()
+    print(f"OR none() type: {type(or_none)}")
+    
+    # Test none() on UNION query
+    union_none = union_query.none()
+    print(f"UNION none() type: {type(union_none)}")
+    
+    print("\n3. Checking query attributes:")
+    print(f"Filter none query class: {filter_none.query.__class__}")
+    print(f"OR none query class: {or_none.query.__class__}")
+    print(f"UNION none query class: {union_none.query.__class__}")
+    
+    print("\n4. Testing is_empty() method:")
+    print(f"Filter none is_empty(): {filter_none.query.is_empty()}")
+    print(f"OR none is_empty(): {or_none.query.is_empty()}")
+    print(f"UNION none is_empty(): {union_none.query.is_empty()}")
+    
+    print("\n5. Testing ModelMultipleChoiceField behavior:")
+    # Test the actual issue - what happens when we use these in forms
+    class TestForm(forms.Form):
+        field_or = forms.ModelMultipleChoiceField(
+            queryset=(TestModel.objects.filter(name='test1') | TestModel.objects.filter(name='test2')),
+            required=False
+        )
+        field_union = forms.ModelMultipleChoiceField(
+            queryset=TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2')),
+            required=False
+        )
+    
+    form = TestForm(data={'field_or': [], 'field_union': []})
+    print(f"Form is_valid(): {form.is_valid()}")
+    
+    if form.is_valid():
+        or_result = form.cleaned_data['field_or']
+        union_result = form.cleaned_data['field_union']
+        print(f"OR field result type: {type(or_result)}")
+        print(f"UNION field result type: {type(union_result)}")
+        print(f"Are they the same object? {or_result is union_result}")
+        print(f"Are they equal? {or_result == union_result}")
+
+if __name__ == '__main__':
+    debug_none_behavior()
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..cd7106a44b
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python
+"""
+Simple script to reproduce the QuerySet.none() issue with combined queries.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+def test_none_behavior():
+    print("Testing QuerySet.none() behavior...")
+    
+    # Create a simple model
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'django.contrib.auth'
+    
+    print("1. Testing OR query with none():")
+    or_query = (TestModel.objects.filter(name='test1') | TestModel.objects.filter(name='test2'))
+    or_none = or_query.none()
+    print(f"Original OR query: {or_query}")
+    print(f"OR query with none(): {or_none}")
+    print(f"OR none() result count: {or_none.count()}")
+    
+    print("\n2. Testing UNION query with none():")
+    union_query = TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2'))
+    union_none = union_query.none()
+    print(f"Original UNION query: {union_query}")
+    print(f"UNION query with none(): {union_none}")
+    print(f"UNION none() result count: {union_none.count()}")
+    
+    print("\n3. Testing in ModelMultipleChoiceField context:")
+    # Test the actual issue - what happens when we use these in forms
+    class TestForm(forms.Form):
+        field_or = forms.ModelMultipleChoiceField(
+            queryset=(TestModel.objects.filter(name='test1') | TestModel.objects.filter(name='test2')),
+            required=False
+        )
+        field_union = forms.ModelMultipleChoiceField(
+            queryset=TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2')),
+            required=False
+        )
+    
+    form = TestForm(data={'field_or': [], 'field_union': []})
+    print(f"Form is_valid(): {form.is_valid()}")
+    
+    if form.is_valid():
+        or_result = form.cleaned_data['field_or']
+        union_result = form.cleaned_data['field_union']
+        print(f"OR field result: {or_result} (type: {type(or_result)})")
+        print(f"UNION field result: {union_result} (type: {type(union_result)})")
+        print(f"Are they the same object? {or_result is union_result}")
+        print(f"Are they equal? {or_result == union_result}")
+
+if __name__ == '__main__':
+    test_none_behavior()
\ No newline at end of file
diff --git a/test_union_none.py b/test_union_none.py
new file mode 100644
index 0000000000..14d42143d2
--- /dev/null
+++ b/test_union_none.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python
+"""
+Test script to understand the specific issue with UNION queries and none().
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+def test_union_none():
+    print("Testing UNION query none() behavior...")
+    
+    # Create a simple model
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'django.contrib.auth'
+    
+    # Create the original UNION query
+    union_query = TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2'))
+    print(f"Original UNION query: {union_query}")
+    
+    # Call none() on the UNION query
+    union_none = union_query.none()
+    print(f"UNION query with none(): {union_none}")
+    
+    # Check if the none() call actually modified the query
+    print(f"Original query after none(): {union_query}")
+    print(f"None query: {union_none}")
+    
+    # Test the specific case from the issue
+    print("\nTesting ModelMultipleChoiceField with UNION query:")
+    
+    class TestForm(forms.Form):
+        publications = forms.ModelMultipleChoiceField(
+            queryset=TestModel.objects.filter(name='test1').union(TestModel.objects.filter(name='test2')),
+            required=False,
+        )
+    
+    # Simulate form submission with no selection
+    form = TestForm(data={'publications': []})
+    print(f"Form is_valid(): {form.is_valid()}")
+    
+    if form.is_valid():
+        result = form.cleaned_data['publications']
+        print(f"Cleaned data: {result}")
+        print(f"Cleaned data type: {type(result)}")
+        print(f"Cleaned data query: {result.query}")
+        
+        # Try to iterate over the result (this should be empty)
+        try:
+            items = list(result)
+            print(f"Result items: {items}")
+            print(f"Result count: {len(items)}")
+        except Exception as e:
+            print(f"Error iterating result: {e}")
+
+if __name__ == '__main__':
+    test_union_none()
\ No newline at end of file
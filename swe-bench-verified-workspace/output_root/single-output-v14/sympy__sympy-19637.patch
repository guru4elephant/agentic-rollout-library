diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d7aa49c3db
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,19 @@
+#!/usr/bin/env python3
+
+from sympy.core.sympify import kernS
+
+# Test case from the issue
+text = "(2*x)/(x-1)"
+try:
+    expr = kernS(text)
+    print(f"Success: {expr}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test another case that might trigger the issue
+text2 = "x + y"  # This doesn't have spaces or parentheses that would trigger the kern creation
+try:
+    expr2 = kernS(text2)
+    print(f"Success: {expr2}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py
index a3f1ce2851..731a944231 100644
--- a/sympy/core/sympify.py
+++ b/sympy/core/sympify.py
@@ -469,6 +469,7 @@ def kernS(s):
     from random import choice
     from sympy.core.symbol import Symbol
     hit = False
+    kern = None  # Initialize kern to avoid UnboundLocalError
     quoted = '"' in s or "'" in s
     if '(' in s and not quoted:
         if s.count('(') != s.count(")"):
@@ -513,7 +514,7 @@ def kernS(s):
             while kern in s:
                 kern += choice(string.ascii_letters + string.digits)
             s = s.replace(' ', kern)
-        hit = kern in s
+    hit = kern is not None and kern in s
 
     for i in range(2):
         try:
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..171c966866
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy.core.sympify import kernS
+
+test_cases = [
+    "(2*x)/(x-1)",      # Original issue case
+    "x + y",            # Simple case without parentheses
+    "2*(x + y)",        # Case that should use kern
+    "-(x + 1)",         # Another case that should use kern
+    "x**2 + y**2",      # Expression with exponents
+    "sin(x) + cos(y)",  # Expression with functions
+    "",                 # Empty string
+    "123",              # Just a number
+    "x",                # Just a variable
+]
+
+print("Testing kernS with various inputs:")
+for i, text in enumerate(test_cases, 1):
+    try:
+        expr = kernS(text)
+        print(f"{i}. '{text}' -> {expr} ✓")
+    except Exception as e:
+        print(f"{i}. '{text}' -> Error: {type(e).__name__}: {e} ✗")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..10c14ab4d9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+from sympy.core.sympify import kernS
+
+# Test edge cases that might trigger different code paths
+edge_cases = [
+    "()",           # Empty parentheses
+    "(x)",          # Single variable in parentheses
+    "((x))",        # Nested parentheses
+    "x*(y+z)",      # Multiplication with parentheses
+    "-x",           # Negative variable
+    "x + (y + z)",  # Parentheses within addition
+    "x - (y - z)",  # Parentheses within subtraction
+    "x/(y/z)",      # Division with parentheses
+    "x**(y**z)",    # Exponentiation with parentheses
+]
+
+print("Testing edge cases:")
+for i, case in enumerate(edge_cases, 1):
+    try:
+        result = kernS(case)
+        print(f"{i}. kernS('{case}') = {result} ✓")
+    except Exception as e:
+        print(f"{i}. kernS('{case}') -> Error: {type(e).__name__}: {e} ✗")
+
+# Test that the kern variable is properly handled
+print("\nTesting kern variable handling:")
+test_strings = [
+    "x _kern y",    # Contains _kern which might conflict
+    "x kern y",     # Contains "kern"
+    "x _ y",        # Contains underscore
+]
+
+for test_str in test_strings:
+    try:
+        result = kernS(test_str)
+        print(f"kernS('{test_str}') = {result} ✓")
+    except Exception as e:
+        print(f"kernS('{test_str}') -> Error: {type(e).__name__}: {e} ✗")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..11088f6857
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+# Test the exact case from the GitHub issue
+from sympy.core.sympify import kernS
+
+text = "(2*x)/(x-1)"
+try:
+    expr = kernS(text)
+    print(f"Success: kernS('{text}') = {expr}")
+    print(f"Type: {type(expr)}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test that it doesn't have the UnboundLocalError anymore
+print("\nTesting that kern is properly initialized:")
+test_cases = [
+    "x",           # No parentheses, no spaces
+    "x + y",       # Spaces but no parentheses (should not trigger kern creation)
+    "2*(x + y)",   # Should trigger kern creation
+    "-(x + 1)",    # Should trigger kern creation
+]
+
+for case in test_cases:
+    try:
+        result = kernS(case)
+        print(f"✓ kernS('{case}') = {result}")
+    except UnboundLocalError as e:
+        print(f"✗ UnboundLocalError in kernS('{case}'): {e}")
+    except Exception as e:
+        print(f"✗ Other error in kernS('{case}'): {type(e).__name__}: {e}")
\ No newline at end of file
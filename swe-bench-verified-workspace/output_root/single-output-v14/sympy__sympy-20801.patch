diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..449adcb848
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+from sympy import *
+
+print("Reproducing the issue...")
+print(f"S(0.0) == S.false: {S(0.0) == S.false}")
+print(f"S.false == S(0.0): {S.false == S(0.0)}")
+print(f"S(0) == S.false: {S(0) == S.false}")
+print(f"S.false == S(0): {S.false == S(0)}")
+
+# Let's also check the types
+print(f"\nTypes:")
+print(f"type(S(0.0)): {type(S(0.0))}")
+print(f"type(S.false): {type(S.false)}")
+print(f"type(S(0)): {type(S(0))}")
+
+# Check what S(0.0) actually evaluates to
+print(f"\nValues:")
+print(f"S(0.0): {S(0.0)}")
+print(f"S.false: {S.false}")
+print(f"S(0): {S(0)}")
\ No newline at end of file
diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 79f6a7d165..a2557d5251 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1386,10 +1386,10 @@ def __eq__(self, other):
             other = _sympify(other)
         except SympifyError:
             return NotImplemented
-        if not self:
-            return not other
         if isinstance(other, Boolean):
             return False
+        if not self:
+            return not other
         if other.is_NumberSymbol:
             if other.is_irrational:
                 return False
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..becd04a327
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+from sympy import *
+
+print("Testing edge cases...")
+
+# Test with other zero values
+print(f"S(0) == S.false: {S(0) == S.false}")
+print(f"S.false == S(0): {S.false == S(0)}")
+
+# Test with non-zero floats
+print(f"S(1.0) == S.false: {S(1.0) == S.false}")
+print(f"S.false == S(1.0): {S.false == S(1.0)}")
+
+# Test with S.true
+print(f"S(0.0) == S.true: {S(0.0) == S.true}")
+print(f"S.true == S(0.0): {S.true == S(0.0)}")
+print(f"S(1.0) == S.true: {S(1.0) == S.true}")
+print(f"S.true == S(1.0): {S.true == S(1.0)}")
+
+# Test with regular Python booleans
+print(f"S(0.0) == False: {S(0.0) == False}")
+print(f"False == S(0.0): {False == S(0.0)}")
+print(f"S(1.0) == True: {S(1.0) == True}")
+print(f"True == S(1.0): {True == S(1.0)}")
+
+# Test that normal float comparisons still work
+print(f"S(0.0) == S(0.0): {S(0.0) == S(0.0)}")
+print(f"S(1.0) == S(1.0): {S(1.0) == S(1.0)}")
+print(f"S(0.0) == S(1.0): {S(0.0) == S(1.0)}")
+
+# Test with other numeric types
+print(f"S(0.0) == 0: {S(0.0) == 0}")
+print(f"S(0.0) == 0.0: {S(0.0) == 0.0}")
\ No newline at end of file
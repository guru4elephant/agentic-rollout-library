diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bec20fc671
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+import os
+import sys
+import tempfile
+import django
+from django.conf import settings
+from django.db import connections, models
+from django.db.migrations import Migration, operations
+from django.db.migrations.state import ProjectState
+from django.test import TransactionTestCase
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+# Create a simple test model
+class TestModel(models.Model):
+    status = models.CharField(max_length=10)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create migration operations
+class TestMigration(Migration):
+    dependencies = []
+    operations = [
+        operations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.CharField(max_length=10)),
+            ],
+            options={},
+            bases=(models.Model,),
+        ),
+    ]
+
+class TestAlterFieldMigration(Migration):
+    dependencies = [('test', '0001_initial')]
+    operations = [
+        operations.AlterField(
+            model_name='testmodel',
+            name='status',
+            field=models.CharField(
+                max_length=10,
+                choices=[('active', 'Active'), ('inactive', 'Inactive')]
+            ),
+        ),
+    ]
+
+def test_migration_sql():
+    """Test that SQLite generates no SQL for choices-only AlterField"""
+    print("Testing SQL generation for AlterField with choices...")
+    
+    # Create initial state
+    initial_state = ProjectState()
+    initial_state.add_model(TestModel._meta)
+    
+    # Create migration state
+    migration = TestAlterFieldMigration('test', 'test')
+    
+    # Get SQL for the migration
+    connection = connections['default']
+    with connection.schema_editor() as schema_editor:
+        sql_statements = []
+        for operation in migration.operations:
+            if hasattr(operation, 'database_forwards'):
+                operation.database_forwards('test', schema_editor, initial_state, ProjectState())
+            sql_statements.extend(schema_editor.deferred_sql)
+    
+    print(f"Generated SQL statements: {len(sql_statements)}")
+    for i, sql in enumerate(sql_statements):
+        print(f"  {i+1}. {sql}")
+    
+    # The issue: SQLite should generate no SQL for choices-only changes
+    if len(sql_statements) == 0:
+        print("✓ SUCCESS: No SQL generated (correct behavior)")
+        return True
+    else:
+        print("✗ FAILURE: SQL generated (incorrect behavior)")
+        return False
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    success = test_migration_sql()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5f07a4208a..372178bdbc 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2002,36 +2002,37 @@ class ModelAdmin(BaseModelAdmin):
         if request.method == "POST" and cl.list_editable and "_save" in request.POST:
             if not self.has_change_permission(request):
                 raise PermissionDenied
-            FormSet = self.get_changelist_formset(request)
-            modified_objects = self._get_list_editable_queryset(
-                request, FormSet.get_default_prefix()
-            )
-            formset = cl.formset = FormSet(
-                request.POST, request.FILES, queryset=modified_objects
-            )
-            if formset.is_valid():
-                changecount = 0
-                for form in formset.forms:
-                    if form.has_changed():
-                        obj = self.save_form(request, form, change=True)
-                        self.save_model(request, obj, form, change=True)
-                        self.save_related(request, form, formsets=[], change=True)
-                        change_msg = self.construct_change_message(request, form, None)
-                        self.log_change(request, obj, change_msg)
-                        changecount += 1
-
-                if changecount:
-                    msg = ngettext(
-                        "%(count)s %(name)s was changed successfully.",
-                        "%(count)s %(name)s were changed successfully.",
-                        changecount,
-                    ) % {
-                        "count": changecount,
-                        "name": model_ngettext(self.opts, changecount),
-                    }
-                    self.message_user(request, msg, messages.SUCCESS)
+            with transaction.atomic(using=router.db_for_write(self.model)):
+                FormSet = self.get_changelist_formset(request)
+                modified_objects = self._get_list_editable_queryset(
+                    request, FormSet.get_default_prefix()
+                )
+                formset = cl.formset = FormSet(
+                    request.POST, request.FILES, queryset=modified_objects
+                )
+                if formset.is_valid():
+                    changecount = 0
+                    for form in formset.forms:
+                        if form.has_changed():
+                            obj = self.save_form(request, form, change=True)
+                            self.save_model(request, obj, form, change=True)
+                            self.save_related(request, form, formsets=[], change=True)
+                            change_msg = self.construct_change_message(request, form, None)
+                            self.log_change(request, obj, change_msg)
+                            changecount += 1
+
+                    if changecount:
+                        msg = ngettext(
+                            "%(count)s %(name)s was changed successfully.",
+                            "%(count)s %(name)s were changed successfully.",
+                            changecount,
+                        ) % {
+                            "count": changecount,
+                            "name": model_ngettext(self.opts, changecount),
+                        }
+                        self.message_user(request, msg, messages.SUCCESS)
 
-                return HttpResponseRedirect(request.get_full_path())
+                    return HttpResponseRedirect(request.get_full_path())
 
         # Handle GET -- construct a formset for display.
         elif cl.list_editable and self.has_change_permission(request):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..58179153c4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the changelist_view transaction issue.
+This script demonstrates that list_editable operations in Django admin
+are not wrapped in a transaction, which could lead to inconsistent states.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.admin import AdminSite
+from django.contrib.auth.models import User
+from django.test import RequestFactory
+from django.contrib.admin.options import ModelAdmin
+
+# Create a simple model admin for testing
+class TestModelAdmin(ModelAdmin):
+    list_editable = ['username']
+    
+    def __init__(self, model, admin_site):
+        super().__init__(model, admin_site)
+
+def test_changelist_view_transaction():
+    """Test that changelist_view handles list_editable operations without transaction"""
+    
+    print("Analyzing the changelist_view method in Django admin...")
+    print("The issue is that list_editable operations (lines 2002-2034 in options.py)")
+    print("are not wrapped in a transaction, which could lead to inconsistent database states")
+    print("if an error occurs during the operation.")
+    
+    print("\nLooking at the code pattern:")
+    print("1. changeform_view (line 1745) uses transaction.atomic")
+    print("2. delete_view (line 2102) uses transaction.atomic")  
+    print("3. changelist_view (list_editable section) does NOT use transaction.atomic")
+    
+    print("\nThis is the inconsistency that needs to be fixed.")
+
+if __name__ == '__main__':
+    test_changelist_view_transaction()
+    print("Reproduction script completed. The issue is that changelist_view")
+    print("does not wrap list_editable operations in a transaction.")
\ No newline at end of file
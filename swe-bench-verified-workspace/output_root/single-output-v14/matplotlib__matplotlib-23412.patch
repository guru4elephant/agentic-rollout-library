diff --git a/comprehensive_test.png b/comprehensive_test.png
new file mode 100644
index 0000000000..de14265582
Binary files /dev/null and b/comprehensive_test.png differ
diff --git a/edge_case_test.png b/edge_case_test.png
new file mode 100644
index 0000000000..4f292e8c9d
Binary files /dev/null and b/edge_case_test.png differ
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..313aa0705b
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,65 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+import numpy as np
+
+# Test various patch types with offset dash patterns
+fig, axes = plt.subplots(2, 3, figsize=(15, 10))
+
+# Rectangle
+ax = axes[0, 0]
+ax.set_title('Rectangle')
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='r', linewidth=4, ls=(5, (10, 10))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# Circle
+ax = axes[0, 1]
+ax.set_title('Circle')
+ax.add_patch(mpl.patches.Circle((0.5, 0.5), 0.3, edgecolor='b', linewidth=4, ls=(8, (5, 10))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# Ellipse
+ax = axes[0, 2]
+ax.set_title('Ellipse')
+ax.add_patch(mpl.patches.Ellipse((0.5, 0.5), 0.6, 0.4, edgecolor='g', linewidth=4, ls=(3, (15, 5))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# Polygon
+ax = axes[1, 0]
+ax.set_title('Polygon')
+polygon = mpl.patches.Polygon([(0.2, 0.2), (0.8, 0.2), (0.5, 0.8)], edgecolor='purple', linewidth=4, ls=(12, (8, 4)))
+ax.add_patch(polygon)
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# Wedge
+ax = axes[1, 1]
+ax.set_title('Wedge')
+ax.add_patch(mpl.patches.Wedge((0.5, 0.5), 0.3, 30, 270, edgecolor='orange', linewidth=4, ls=(6, (12, 6))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# FancyBboxPatch
+ax = axes[1, 2]
+ax.set_title('FancyBboxPatch')
+ax.add_patch(mpl.patches.FancyBboxPatch((0.2, 0.2), 0.6, 0.6, boxstyle="round,pad=0.1", 
+                                       edgecolor='brown', linewidth=4, ls=(9, (10, 5))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+plt.tight_layout()
+plt.savefig('edge_case_test.png')
+print("Edge case test saved as edge_case_test.png")
+
+# Test different offset values
+plt.figure(figsize=(10, 5))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='r', linewidth=4, ls=(0, (10, 10))))
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='b', linewidth=4, ls=(15, (10, 10))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+plt.title('Different offset values')
+plt.savefig('offset_test.png')
+print("Offset test saved as offset_test.png")
\ No newline at end of file
diff --git a/final_comparison.png b/final_comparison.png
new file mode 100644
index 0000000000..ac3acb4d73
Binary files /dev/null and b/final_comparison.png differ
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..0b875aba24
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,50 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+print("Testing various edge cases for offset dash patterns in patches...")
+
+# Test 1: Basic functionality - different offsets should produce different results
+fig, ax = plt.subplots(figsize=(8, 6))
+rect1 = mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='red', linewidth=4, ls=(0, (10, 10)))
+rect2 = mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='blue', linewidth=4, ls=(5, (10, 10)))
+ax.add_patch(rect1)
+ax.add_patch(rect2)
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+plt.savefig('test_basic_offsets.png')
+print("✓ Basic offset functionality test passed")
+
+# Test 2: Verify that the dash patterns are different
+if rect1._dash_pattern[0] != rect2._dash_pattern[0]:
+    print("✓ Dash offsets are different as expected")
+else:
+    print("✗ Dash offsets are the same - this indicates a problem")
+
+# Test 3: Test with various patch types
+patch_types = [
+    mpl.patches.Circle((0.5, 0.5), 0.3, edgecolor='green', linewidth=3, ls=(3, (8, 4))),
+    mpl.patches.Ellipse((0.5, 0.5), 0.6, 0.4, edgecolor='orange', linewidth=3, ls=(6, (12, 6))),
+    mpl.patches.Polygon([(0.3, 0.3), (0.7, 0.3), (0.5, 0.7)], edgecolor='purple', linewidth=3, ls=(9, (10, 5)))
+]
+
+for i, patch in enumerate(patch_types):
+    fig, ax = plt.subplots(figsize=(4, 4))
+    ax.add_patch(patch)
+    ax.set_xlim(0, 1)
+    ax.set_ylim(0, 1)
+    plt.savefig(f'test_patch_type_{i}.png')
+    print(f"✓ Patch type {i} with offset dashes works correctly")
+
+# Test 4: Test with different dash patterns and same offset
+fig, ax = plt.subplots(figsize=(8, 6))
+rect3 = mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='red', linewidth=4, ls=(5, (10, 10)))
+rect4 = mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='blue', linewidth=4, ls=(5, (5, 15)))
+ax.add_patch(rect3)
+ax.add_patch(rect4)
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+plt.savefig('test_same_offset_diff_pattern.png')
+print("✓ Same offset, different patterns test passed")
+
+print("\nAll tests completed successfully!")
+print("The fix correctly handles offset dash patterns in patch objects.")
\ No newline at end of file
diff --git a/github_issue_fixed.png b/github_issue_fixed.png
new file mode 100644
index 0000000000..5335f7ae64
Binary files /dev/null and b/github_issue_fixed.png differ
diff --git a/github_issue_test.py b/github_issue_test.py
new file mode 100644
index 0000000000..b75e231ba7
--- /dev/null
+++ b/github_issue_test.py
@@ -0,0 +1,14 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+# Exact reproduction from the GitHub issue
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('github_issue_fixed.png')
+
+print("GitHub issue test saved as github_issue_fixed.png")
+print("The offset should now work properly in patch objects!")
\ No newline at end of file
diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py
index e062249589..0c893aac3a 100644
--- a/lib/matplotlib/patches.py
+++ b/lib/matplotlib/patches.py
@@ -586,10 +586,7 @@ class Patch(artist.Artist):
         # docstring inherited
         if not self.get_visible():
             return
-        # Patch has traditionally ignored the dashoffset.
-        with cbook._setattr_cm(
-                 self, _dash_pattern=(0, self._dash_pattern[1])), \
-             self._bind_draw_path_function(renderer) as draw_path:
+        with self._bind_draw_path_function(renderer) as draw_path:
             path = self.get_path()
             transform = self.get_transform()
             tpath = transform.transform_path_non_affine(path)
diff --git a/line_test.png b/line_test.png
new file mode 100644
index 0000000000..aef6b5c17c
Binary files /dev/null and b/line_test.png differ
diff --git a/offset_test.png b/offset_test.png
new file mode 100644
index 0000000000..81c44e626e
Binary files /dev/null and b/offset_test.png differ
diff --git a/original_issue_test.png b/original_issue_test.png
new file mode 100644
index 0000000000..5335f7ae64
Binary files /dev/null and b/original_issue_test.png differ
diff --git a/patches_test.png b/patches_test.png
new file mode 100644
index 0000000000..5335f7ae64
Binary files /dev/null and b/patches_test.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6defaceb9c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+# Test with patches
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('patches_test.png')
+
+# Test with Line2D for comparison
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+import numpy as np
+x = np.linspace(0, np.pi*4, 100)
+y = np.sin(x+np.pi/2)
+plt.plot(x, y, ls=(0, (10, 10)), color='b', linewidth=4)
+plt.plot(x, y, ls=(10, (10, 10)), color='r', linewidth=4)
+plt.savefig('line_test.png')
+
+print("Test images saved: patches_test.png and line_test.png")
\ No newline at end of file
diff --git a/test_basic_offsets.png b/test_basic_offsets.png
new file mode 100644
index 0000000000..dbf4b93095
Binary files /dev/null and b/test_basic_offsets.png differ
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..443ee0a116
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,56 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+import numpy as np
+
+# Test various offset values with patches
+fig, axes = plt.subplots(2, 2, figsize=(10, 10))
+
+# Test 1: Different offsets with same dash pattern
+ax = axes[0, 0]
+ax.set_title('Different offsets, same dash pattern')
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='r', linewidth=4, ls=(0, (10, 10))))
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='b', linewidth=4, ls=(5, (10, 10))))
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='g', linewidth=4, ls=(10, (10, 10))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# Test 2: Same offset, different dash patterns
+ax = axes[0, 1]
+ax.set_title('Same offset, different dash patterns')
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='r', linewidth=4, ls=(5, (10, 5))))
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='b', linewidth=4, ls=(5, (5, 10))))
+ax.add_patch(mpl.patches.Rectangle((0.2, 0.2), 0.6, 0.6, edgecolor='g', linewidth=4, ls=(5, (5, 5, 10, 5))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# Test 3: Test with Ellipse patch
+ax = axes[1, 0]
+ax.set_title('Ellipse patch with offset')
+ax.add_patch(mpl.patches.Ellipse((0.5, 0.5), 0.6, 0.4, edgecolor='r', linewidth=4, ls=(0, (10, 10))))
+ax.add_patch(mpl.patches.Ellipse((0.5, 0.5), 0.6, 0.4, edgecolor='b', linewidth=4, ls=(8, (10, 10))))
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+# Test 4: Compare with Line2D
+ax = axes[1, 1]
+ax.set_title('Line2D for comparison')
+x = np.linspace(0.2, 0.8, 100)
+y = 0.5 + 0.3 * np.sin(2 * np.pi * x)
+ax.plot(x, y, ls=(0, (10, 10)), color='r', linewidth=4)
+ax.plot(x, y, ls=(8, (10, 10)), color='b', linewidth=4)
+ax.set_xlim(0, 1)
+ax.set_ylim(0, 1)
+
+plt.tight_layout()
+plt.savefig('comprehensive_test.png')
+print("Comprehensive test saved as comprehensive_test.png")
+
+# Also test the original issue reproduction
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('original_issue_test.png')
+print("Original issue test saved as original_issue_test.png")
\ No newline at end of file
diff --git a/test_patch_type_0.png b/test_patch_type_0.png
new file mode 100644
index 0000000000..b9755a8335
Binary files /dev/null and b/test_patch_type_0.png differ
diff --git a/test_patch_type_1.png b/test_patch_type_1.png
new file mode 100644
index 0000000000..5588347e2c
Binary files /dev/null and b/test_patch_type_1.png differ
diff --git a/test_patch_type_2.png b/test_patch_type_2.png
new file mode 100644
index 0000000000..0e5f399d76
Binary files /dev/null and b/test_patch_type_2.png differ
diff --git a/test_same_offset_diff_pattern.png b/test_same_offset_diff_pattern.png
new file mode 100644
index 0000000000..503db811f0
Binary files /dev/null and b/test_same_offset_diff_pattern.png differ
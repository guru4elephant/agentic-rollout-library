diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 2e97d9064b..67b6cb741e 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -248,12 +248,12 @@ class Command(BaseCommand):
                 else:
                     self.log("No changes detected")
         else:
-            if self.update:
+            if check_changes:
+                sys.exit(1)
+            elif self.update:
                 self.write_to_last_migration_files(changes)
             else:
                 self.write_migration_files(changes)
-            if check_changes:
-                sys.exit(1)
 
     def write_to_last_migration_files(self, changes):
         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6d7c084ddd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,113 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the makemigrations --check inconsistency issue.
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from django.core.management import execute_from_command_line
+
+def test_makemigrations_check():
+    """Test that makemigrations --check doesn't write migration files."""
+    
+    # Create a temporary directory for our test project
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Using temporary directory: {temp_dir}")
+        
+        # Create a simple Django project structure
+        os.makedirs(os.path.join(temp_dir, "test_project"))
+        os.makedirs(os.path.join(temp_dir, "test_app", "migrations"), exist_ok=True)
+        
+        # Create __init__.py files
+        with open(os.path.join(temp_dir, "test_app", "__init__.py"), "w") as f:
+            f.write("")
+        with open(os.path.join(temp_dir, "test_app", "migrations", "__init__.py"), "w") as f:
+            f.write("")
+            
+        # Create a simple model
+        with open(os.path.join(temp_dir, "test_app", "models.py"), "w") as f:
+            f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    created_at = models.DateTimeField(auto_now_add=True)
+""")
+            
+        # Create settings.py
+        with open(os.path.join(temp_dir, "test_project", "settings.py"), "w") as f:
+            f.write(f"""
+import os
+BASE_DIR = r'{temp_dir}'
+
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app',
+]
+
+DATABASES = {{
+    'default': {{
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }}
+}}
+""")
+            
+        # Create manage.py
+        with open(os.path.join(temp_dir, "manage.py"), "w") as f:
+            f.write("""#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+""")
+        
+        # Make manage.py executable
+        os.chmod(os.path.join(temp_dir, "manage.py"), 0o755)
+        
+        # Change to temp directory and run makemigrations --check
+        original_cwd = os.getcwd()
+        try:
+            os.chdir(temp_dir)
+            
+            print("=== Testing makemigrations --check behavior ===")
+            
+            # First, check if there are any migration files before running
+            migration_files_before = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files before: {migration_files_before}")
+            
+            # Run makemigrations --check
+            print("Running: python manage.py makemigrations test_app --check")
+            try:
+                execute_from_command_line(["manage.py", "makemigrations", "test_app", "--check"])
+            except SystemExit as e:
+                print(f"Exit code: {e.code}")
+                
+            # Check if any migration files were created
+            migration_files_after = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files after: {migration_files_after}")
+            
+            # Check if new files were created (excluding __init__.py)
+            new_files = [f for f in migration_files_after if f not in migration_files_before and f != "__init__.py"]
+            if new_files:
+                print(f"❌ ISSUE CONFIRMED: makemigrations --check created files: {new_files}")
+                return False
+            else:
+                print("✅ No migration files were created by --check")
+                return True
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    success = test_makemigrations_check()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue_simple.py b/reproduce_issue_simple.py
new file mode 100644
index 0000000000..b330a9bbc4
--- /dev/null
+++ b/reproduce_issue_simple.py
@@ -0,0 +1,121 @@
+#!/usr/bin/env python3
+"""
+Simple script to reproduce the makemigrations --check inconsistency issue.
+"""
+
+import os
+import sys
+import tempfile
+import subprocess
+
+def test_makemigrations_check():
+    """Test that makemigrations --check doesn't write migration files."""
+    
+    # Create a temporary directory for our test project
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Using temporary directory: {temp_dir}")
+        
+        # Create a simple Django project structure
+        os.makedirs(os.path.join(temp_dir, "test_project"))
+        os.makedirs(os.path.join(temp_dir, "test_app", "migrations"), exist_ok=True)
+        
+        # Create __init__.py files
+        with open(os.path.join(temp_dir, "test_app", "__init__.py"), "w") as f:
+            f.write("")
+        with open(os.path.join(temp_dir, "test_app", "migrations", "__init__.py"), "w") as f:
+            f.write("")
+            
+        # Create a simple model
+        with open(os.path.join(temp_dir, "test_app", "models.py"), "w") as f:
+            f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    created_at = models.DateTimeField(auto_now_add=True)
+""")
+            
+        # Create settings.py with all required settings
+        with open(os.path.join(temp_dir, "test_project", "settings.py"), "w") as f:
+            f.write(f"""
+import os
+BASE_DIR = r'{temp_dir}'
+
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app',
+]
+
+DATABASES = {{
+    'default': {{
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }}
+}}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+""")
+            
+        # Create manage.py
+        with open(os.path.join(temp_dir, "manage.py"), "w") as f:
+            f.write("""#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+""")
+        
+        # Make manage.py executable
+        os.chmod(os.path.join(temp_dir, "manage.py"), 0o755)
+        
+        # Change to temp directory and run makemigrations --check using subprocess
+        original_cwd = os.getcwd()
+        try:
+            os.chdir(temp_dir)
+            
+            print("=== Testing makemigrations --check behavior ===")
+            
+            # First, check if there are any migration files before running
+            migration_files_before = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files before: {migration_files_before}")
+            
+            # Run makemigrations --check using subprocess
+            print("Running: python manage.py makemigrations test_app --check")
+            result = subprocess.run([
+                sys.executable, "manage.py", "makemigrations", "test_app", "--check"
+            ], capture_output=True, text=True)
+            
+            print(f"Exit code: {result.returncode}")
+            if result.stderr:
+                print(f"Stderr: {result.stderr}")
+                
+            # Check if any migration files were created
+            migration_files_after = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files after: {migration_files_after}")
+            
+            # Check if new files were created (excluding __init__.py)
+            new_files = [f for f in migration_files_after if f not in migration_files_before and f != "__init__.py"]
+            if new_files:
+                print(f"❌ ISSUE CONFIRMED: makemigrations --check created files: {new_files}")
+                return False
+            else:
+                print("✅ No migration files were created by --check")
+                return True
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    success = test_makemigrations_check()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_check_dry_run.py b/test_check_dry_run.py
new file mode 100644
index 0000000000..9a3372ad73
--- /dev/null
+++ b/test_check_dry_run.py
@@ -0,0 +1,132 @@
+#!/usr/bin/env python3
+"""
+Test script to verify makemigrations --check --dry-run behavior.
+"""
+
+import os
+import sys
+import tempfile
+import subprocess
+
+def test_makemigrations_check_dry_run():
+    """Test that makemigrations --check --dry-run behaves correctly."""
+    
+    # Create a temporary directory for our test project
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Using temporary directory: {temp_dir}")
+        
+        # Create a simple Django project structure
+        os.makedirs(os.path.join(temp_dir, "test_project"))
+        os.makedirs(os.path.join(temp_dir, "test_app", "migrations"), exist_ok=True)
+        
+        # Create __init__.py files
+        with open(os.path.join(temp_dir, "test_app", "__init__.py"), "w") as f:
+            f.write("")
+        with open(os.path.join(temp_dir, "test_app", "migrations", "__init__.py"), "w") as f:
+            f.write("")
+            
+        # Create a simple model
+        with open(os.path.join(temp_dir, "test_app", "models.py"), "w") as f:
+            f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    created_at = models.DateTimeField(auto_now_add=True)
+""")
+            
+        # Create settings.py with all required settings
+        with open(os.path.join(temp_dir, "test_project", "settings.py"), "w") as f:
+            f.write(f"""
+import os
+BASE_DIR = r'{temp_dir}'
+
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app',
+]
+
+DATABASES = {{
+    'default': {{
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }}
+}}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+""")
+            
+        # Create manage.py
+        with open(os.path.join(temp_dir, "manage.py"), "w") as f:
+            f.write("""#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+""")
+        
+        # Make manage.py executable
+        os.chmod(os.path.join(temp_dir, "manage.py"), 0o755)
+        
+        # Change to temp directory
+        original_cwd = os.getcwd()
+        try:
+            os.chdir(temp_dir)
+            
+            print("=== Testing makemigrations --check --dry-run behavior ===")
+            
+            # Check migration files before
+            migration_files_before = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files before: {migration_files_before}")
+            
+            # Run makemigrations --check --dry-run
+            print("Running: python manage.py makemigrations test_app --check --dry-run")
+            result = subprocess.run([
+                sys.executable, "manage.py", "makemigrations", "test_app", "--check", "--dry-run"
+            ], capture_output=True, text=True)
+            
+            print(f"Exit code: {result.returncode}")
+            if result.stderr:
+                print(f"Stderr: {result.stderr}")
+                
+            # Check if any migration files were created
+            migration_files_after = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files after: {migration_files_after}")
+            
+            # Check if new migration files were created
+            new_migration_files = [
+                f for f in migration_files_after 
+                if f not in migration_files_before 
+                and f != "__pycache__"
+                and f.endswith('.py')
+                and not f.startswith('__')
+            ]
+            
+            if new_migration_files:
+                print(f"❌ ERROR: makemigrations --check --dry-run created files: {new_migration_files}")
+                return False
+            elif result.returncode == 1:
+                print("✅ SUCCESS: makemigrations --check --dry-run exited with 1 (changes needed, no files created)")
+                return True
+            else:
+                print(f"❌ ERROR: makemigrations --check --dry-run should exit with 1 when changes are needed, got {result.returncode}")
+                return False
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    success = test_makemigrations_check_dry_run()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..ca429e9366
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,129 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the makemigrations --check fix.
+"""
+
+import os
+import sys
+import tempfile
+import subprocess
+
+def test_makemigrations_check():
+    """Test that makemigrations --check doesn't write migration files."""
+    
+    # Create a temporary directory for our test project
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Using temporary directory: {temp_dir}")
+        
+        # Create a simple Django project structure
+        os.makedirs(os.path.join(temp_dir, "test_project"))
+        os.makedirs(os.path.join(temp_dir, "test_app", "migrations"), exist_ok=True)
+        
+        # Create __init__.py files
+        with open(os.path.join(temp_dir, "test_app", "__init__.py"), "w") as f:
+            f.write("")
+        with open(os.path.join(temp_dir, "test_app", "migrations", "__init__.py"), "w") as f:
+            f.write("")
+            
+        # Create a simple model
+        with open(os.path.join(temp_dir, "test_app", "models.py"), "w") as f:
+            f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    created_at = models.DateTimeField(auto_now_add=True)
+""")
+            
+        # Create settings.py with all required settings
+        with open(os.path.join(temp_dir, "test_project", "settings.py"), "w") as f:
+            f.write(f"""
+import os
+BASE_DIR = r'{temp_dir}'
+
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app',
+]
+
+DATABASES = {{
+    'default': {{
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }}
+}}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+""")
+            
+        # Create manage.py
+        with open(os.path.join(temp_dir, "manage.py"), "w") as f:
+            f.write("""#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+""")
+        
+        # Make manage.py executable
+        os.chmod(os.path.join(temp_dir, "manage.py"), 0o755)
+        
+        # Change to temp directory and run makemigrations --check using subprocess
+        original_cwd = os.getcwd()
+        try:
+            os.chdir(temp_dir)
+            
+            print("=== Testing makemigrations --check behavior ===")
+            
+            # First, check if there are any migration files before running
+            migration_files_before = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files before: {migration_files_before}")
+            
+            # Run makemigrations --check using subprocess
+            print("Running: python manage.py makemigrations test_app --check")
+            result = subprocess.run([
+                sys.executable, "manage.py", "makemigrations", "test_app", "--check"
+            ], capture_output=True, text=True)
+            
+            print(f"Exit code: {result.returncode}")
+            if result.stderr:
+                print(f"Stderr: {result.stderr}")
+                
+            # Check if any migration files were created
+            migration_files_after = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files after: {migration_files_after}")
+            
+            # Check if new migration files were created (ignore __pycache__)
+            new_migration_files = [
+                f for f in migration_files_after 
+                if f not in migration_files_before 
+                and f != "__pycache__"
+                and f.endswith('.py')
+                and not f.startswith('__')
+            ]
+            
+            if new_migration_files:
+                print(f"❌ ISSUE STILL EXISTS: makemigrations --check created migration files: {new_migration_files}")
+                return False
+            else:
+                print("✅ SUCCESS: No migration files were created by --check")
+                return True
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    success = test_makemigrations_check()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_no_changes.py b/test_no_changes.py
new file mode 100644
index 0000000000..e8e1d22ab3
--- /dev/null
+++ b/test_no_changes.py
@@ -0,0 +1,140 @@
+#!/usr/bin/env python3
+"""
+Test script to verify makemigrations --check behavior when there are no changes.
+"""
+
+import os
+import sys
+import tempfile
+import subprocess
+
+def test_makemigrations_no_changes():
+    """Test that makemigrations --check exits with 0 when no changes are needed."""
+    
+    # Create a temporary directory for our test project
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Using temporary directory: {temp_dir}")
+        
+        # Create a simple Django project structure
+        os.makedirs(os.path.join(temp_dir, "test_project"))
+        os.makedirs(os.path.join(temp_dir, "test_app", "migrations"), exist_ok=True)
+        
+        # Create __init__.py files
+        with open(os.path.join(temp_dir, "test_app", "__init__.py"), "w") as f:
+            f.write("")
+        with open(os.path.join(temp_dir, "test_app", "migrations", "__init__.py"), "w") as f:
+            f.write("")
+            
+        # Create a simple model
+        with open(os.path.join(temp_dir, "test_app", "models.py"), "w") as f:
+            f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    created_at = models.DateTimeField(auto_now_add=True)
+""")
+            
+        # Create settings.py with all required settings
+        with open(os.path.join(temp_dir, "test_project", "settings.py"), "w") as f:
+            f.write(f"""
+import os
+BASE_DIR = r'{temp_dir}'
+
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app',
+]
+
+DATABASES = {{
+    'default': {{
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }}
+}}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+""")
+            
+        # Create manage.py
+        with open(os.path.join(temp_dir, "manage.py"), "w") as f:
+            f.write("""#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+""")
+        
+        # Make manage.py executable
+        os.chmod(os.path.join(temp_dir, "manage.py"), 0o755)
+        
+        # Change to temp directory
+        original_cwd = os.getcwd()
+        try:
+            os.chdir(temp_dir)
+            
+            # First, create initial migration
+            print("=== Creating initial migration ===")
+            result1 = subprocess.run([
+                sys.executable, "manage.py", "makemigrations", "test_app"
+            ], capture_output=True, text=True)
+            print(f"Exit code: {result1.returncode}")
+            
+            # Now test --check when there are no changes
+            print("=== Testing makemigrations --check with no changes ===")
+            
+            # Check migration files before
+            migration_files_before = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files before: {migration_files_before}")
+            
+            # Run makemigrations --check
+            print("Running: python manage.py makemigrations test_app --check")
+            result2 = subprocess.run([
+                sys.executable, "manage.py", "makemigrations", "test_app", "--check"
+            ], capture_output=True, text=True)
+            
+            print(f"Exit code: {result2.returncode}")
+            if result2.stderr:
+                print(f"Stderr: {result2.stderr}")
+                
+            # Check if any migration files were created
+            migration_files_after = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files after: {migration_files_after}")
+            
+            # Check if new migration files were created
+            new_migration_files = [
+                f for f in migration_files_after 
+                if f not in migration_files_before 
+                and f != "__pycache__"
+                and f.endswith('.py')
+                and not f.startswith('__')
+            ]
+            
+            if new_migration_files:
+                print(f"❌ ERROR: makemigrations --check created files when no changes: {new_migration_files}")
+                return False
+            elif result2.returncode == 0:
+                print("✅ SUCCESS: makemigrations --check exited with 0 (no changes needed)")
+                return True
+            else:
+                print("❌ ERROR: makemigrations --check should exit with 0 when no changes are needed")
+                return False
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    success = test_makemigrations_no_changes()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_normal_behavior.py b/test_normal_behavior.py
new file mode 100644
index 0000000000..a150b98b2c
--- /dev/null
+++ b/test_normal_behavior.py
@@ -0,0 +1,129 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that normal makemigrations behavior still works.
+"""
+
+import os
+import sys
+import tempfile
+import subprocess
+
+def test_makemigrations_normal():
+    """Test that normal makemigrations (without --check) still creates files."""
+    
+    # Create a temporary directory for our test project
+    with tempfile.TemporaryDirectory() as temp_dir:
+        print(f"Using temporary directory: {temp_dir}")
+        
+        # Create a simple Django project structure
+        os.makedirs(os.path.join(temp_dir, "test_project"))
+        os.makedirs(os.path.join(temp_dir, "test_app", "migrations"), exist_ok=True)
+        
+        # Create __init__.py files
+        with open(os.path.join(temp_dir, "test_app", "__init__.py"), "w") as f:
+            f.write("")
+        with open(os.path.join(temp_dir, "test_app", "migrations", "__init__.py"), "w") as f:
+            f.write("")
+            
+        # Create a simple model
+        with open(os.path.join(temp_dir, "test_app", "models.py"), "w") as f:
+            f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    created_at = models.DateTimeField(auto_now_add=True)
+""")
+            
+        # Create settings.py with all required settings
+        with open(os.path.join(temp_dir, "test_project", "settings.py"), "w") as f:
+            f.write(f"""
+import os
+BASE_DIR = r'{temp_dir}'
+
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'test_app',
+]
+
+DATABASES = {{
+    'default': {{
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }}
+}}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+""")
+            
+        # Create manage.py
+        with open(os.path.join(temp_dir, "manage.py"), "w") as f:
+            f.write("""#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+""")
+        
+        # Make manage.py executable
+        os.chmod(os.path.join(temp_dir, "manage.py"), 0o755)
+        
+        # Change to temp directory and run normal makemigrations
+        original_cwd = os.getcwd()
+        try:
+            os.chdir(temp_dir)
+            
+            print("=== Testing normal makemigrations behavior ===")
+            
+            # First, check if there are any migration files before running
+            migration_files_before = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files before: {migration_files_before}")
+            
+            # Run normal makemigrations (without --check)
+            print("Running: python manage.py makemigrations test_app")
+            result = subprocess.run([
+                sys.executable, "manage.py", "makemigrations", "test_app"
+            ], capture_output=True, text=True)
+            
+            print(f"Exit code: {result.returncode}")
+            if result.stderr:
+                print(f"Stderr: {result.stderr}")
+                
+            # Check if any migration files were created
+            migration_files_after = os.listdir(os.path.join(temp_dir, "test_app", "migrations"))
+            print(f"Migration files after: {migration_files_after}")
+            
+            # Check if new migration files were created
+            new_migration_files = [
+                f for f in migration_files_after 
+                if f not in migration_files_before 
+                and f != "__pycache__"
+                and f.endswith('.py')
+                and not f.startswith('__')
+            ]
+            
+            if new_migration_files:
+                print(f"✅ SUCCESS: Normal makemigrations created migration files: {new_migration_files}")
+                return True
+            else:
+                print("❌ ERROR: Normal makemigrations should have created migration files")
+                return False
+                
+        finally:
+            os.chdir(original_cwd)
+
+if __name__ == "__main__":
+    success = test_makemigrations_normal()
+    sys.exit(0 if success else 1)
\ No newline at end of file
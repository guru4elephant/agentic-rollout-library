diff --git a/check_import_timing.py b/check_import_timing.py
new file mode 100644
index 0000000000..1c5c379d47
--- /dev/null
+++ b/check_import_timing.py
@@ -0,0 +1,29 @@
+import sys
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+print("Before any operations:")
+print(f"rcsetup in sys.modules: {'matplotlib.rcsetup' in sys.modules}")
+
+# Check if we can access _auto_backend_sentinel
+try:
+    import matplotlib.rcsetup
+    sentinel = matplotlib.rcsetup._auto_backend_sentinel
+    print(f"_auto_backend_sentinel available: True")
+except:
+    print(f"_auto_backend_sentinel available: False")
+
+with rc_context():
+    fig2 = plt.figure()
+
+print("After rc_context:")
+print(f"rcsetup in sys.modules: {'matplotlib.rcsetup' in sys.modules}")
+
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/debug_backend.py b/debug_backend.py
new file mode 100644
index 0000000000..b89d1c1d75
--- /dev/null
+++ b/debug_backend.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib.rcsetup
+
+# Check what the backend is initially
+print(f"Initial backend: {plt.rcParams['backend']}")
+print(f"Is auto sentinel: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+    print(f"Backend in rc_context: {plt.rcParams['backend']}")
+    print(f"Is auto sentinel in rc_context: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/debug_backend2.py b/debug_backend2.py
new file mode 100644
index 0000000000..c49e393f36
--- /dev/null
+++ b/debug_backend2.py
@@ -0,0 +1,27 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib.rcsetup
+
+# Check what the backend is initially
+print(f"Initial backend: {plt.rcParams['backend']!r}")
+print(f"Is auto sentinel: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+
+# Let's also check the rcParams object itself
+print(f"rcParams id: {id(plt.rcParams)}")
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    print(f"rcParams id inside rc_context: {id(plt.rcParams)}")
+    print(f"Backend in rc_context: {plt.rcParams['backend']!r}")
+    print(f"Is auto sentinel in rc_context: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+    fig2 = plt.figure()
+
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/debug_rc_context.py b/debug_rc_context.py
new file mode 100644
index 0000000000..766376869f
--- /dev/null
+++ b/debug_rc_context.py
@@ -0,0 +1,29 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib.rcsetup
+
+# Store original rcParams for comparison
+original_backend = plt.rcParams['backend']
+print(f"Original backend: {original_backend!r}")
+
+with rc_context():
+    print(f"Inside rc_context - backend: {plt.rcParams['backend']!r}")
+    print(f"Is auto sentinel: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+    fig2 = plt.figure()
+
+print(f"After rc_context - backend: {plt.rcParams['backend']!r}")
+print(f"Is auto sentinel: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+
+# Now let's see what happens when we access the backend
+print("Accessing rcParams['backend']...")
+backend_value = plt.rcParams['backend']
+print(f"Backend value: {backend_value!r}")
+
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/debug_rcparams.py b/debug_rcparams.py
new file mode 100644
index 0000000000..a47224cf5a
--- /dev/null
+++ b/debug_rcparams.py
@@ -0,0 +1,33 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# Monkey patch RcParams.__getitem__ to add debugging
+original_getitem = plt.rcParams.__getitem__
+
+def debug_getitem(self, key):
+    print(f"Accessing rcParams['{key}']")
+    if key == 'backend':
+        print(f"  Backend value: {dict.__getitem__(self, key)!r}")
+        import matplotlib.rcsetup
+        print(f"  Is auto sentinel: {dict.__getitem__(self, key) is matplotlib.rcsetup._auto_backend_sentinel}")
+    result = original_getitem(self, key)
+    print(f"  Result: {result!r}")
+    return result
+
+plt.rcParams.__getitem__ = debug_getitem
+
+with rc_context():
+    fig2 = plt.figure()
+
+print("Before get_backend():")
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(before)
+
+print("Calling get_backend():")
+get_backend()
+
+print("After get_backend():")
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(after)
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/debug_sentinel.py b/debug_sentinel.py
new file mode 100644
index 0000000000..e9cec7ea60
--- /dev/null
+++ b/debug_sentinel.py
@@ -0,0 +1,29 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+import matplotlib.rcsetup
+
+# Check if rcsetup is imported before we start
+print(f"rcsetup imported: {'rcsetup' in globals()}")
+print(f"_auto_backend_sentinel available: {'_auto_backend_sentinel' in dir(matplotlib.rcsetup)}")
+
+# Store original rcParams for comparison
+original_backend = plt.rcParams['backend']
+print(f"Original backend: {original_backend!r}")
+print(f"Is auto sentinel: {original_backend is matplotlib.rcsetup._auto_backend_sentinel}")
+
+with rc_context():
+    print(f"Inside rc_context - backend: {plt.rcParams['backend']!r}")
+    print(f"Is auto sentinel: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+    fig2 = plt.figure()
+
+print(f"After rc_context - backend: {plt.rcParams['backend']!r}")
+print(f"Is auto sentinel: {plt.rcParams['backend'] is matplotlib.rcsetup._auto_backend_sentinel}")
+
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"Before get_backend(): {before}")
+
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+print(f"After get_backend(): {after}")
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..73534571cc 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -672,7 +672,10 @@ class RcParams(MutableMapping, dict):
         # has been set up, but better be safe e.g. in presence of breakpoints.
         elif key == "backend" and self is globals().get("rcParams"):
             val = dict.__getitem__(self, key)
-            if val is rcsetup._auto_backend_sentinel:
+            # Only trigger backend switch if we're actually setting the backend,
+            # not when we're just querying its value
+            if (val is rcsetup._auto_backend_sentinel and 
+                not hasattr(self, '_just_querying_backend')):
                 from matplotlib import pyplot as plt
                 plt.switch_backend(rcsetup._auto_backend_sentinel)
 
@@ -1175,7 +1178,17 @@ def get_backend():
     --------
     matplotlib.use
     """
-    return rcParams['backend']
+    # Set flag to indicate we're just querying the backend, not setting it
+    rcParams._just_querying_backend = True
+    try:
+        result = rcParams['backend']
+        del rcParams._just_querying_backend
+        return result
+    except:
+        # Make sure to clean up the flag even if an exception occurs
+        if hasattr(rcParams, '_just_querying_backend'):
+            del rcParams._just_querying_backend
+        raise
 
 
 def interactive(b):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f56fa665fc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/test_reproduce.py b/test_reproduce.py
new file mode 100644
index 0000000000..f56fa665fc
--- /dev/null
+++ b/test_reproduce.py
@@ -0,0 +1,12 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..6d4bf567e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,138 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where instance variables incorrectly link 
+to other variables of the same name across different modules/classes.
+"""
+
+import tempfile
+import os
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Create a temporary directory for our test
+test_dir = tempfile.mkdtemp()
+print(f"Created test directory: {test_dir}")
+
+# Create source directory
+src_dir = os.path.join(test_dir, 'source')
+os.makedirs(src_dir)
+
+# Create build directory
+build_dir = os.path.join(test_dir, 'build')
+os.makedirs(build_dir)
+
+# Create conf.py
+conf_content = '''
+extensions = ['sphinx.ext.autodoc']
+master_doc = 'index'
+'''
+with open(os.path.join(src_dir, 'conf.py'), 'w') as f:
+    f.write(conf_content)
+
+# Create index.rst
+index_content = '''
+Test Documentation
+==================
+
+.. autoclass:: packageA.moduleA.ClassA
+   :members:
+   :undoc-members:
+
+.. autoattribute:: packageA.moduleA.ClassA.limit
+
+.. autoclass:: packageB.moduleB.ClassB  
+   :members:
+   :undoc-members:
+
+.. autoattribute:: packageB.moduleB.ClassB.limit
+'''
+with open(os.path.join(src_dir, 'index.rst'), 'w') as f:
+    f.write(index_content)
+
+# Create package structure
+packageA_dir = os.path.join(src_dir, 'packageA')
+os.makedirs(packageA_dir)
+packageB_dir = os.path.join(src_dir, 'packageB') 
+os.makedirs(packageB_dir)
+
+# Create __init__.py files
+with open(os.path.join(packageA_dir, '__init__.py'), 'w') as f:
+    f.write('')
+with open(os.path.join(packageB_dir, '__init__.py'), 'w') as f:
+    f.write('')
+
+# Create moduleA.py
+moduleA_content = '''
+class ClassA:
+    """Class A in package A."""
+    
+    limit = 100  # Class variable
+    
+    def method_a(self):
+        """Method A."""
+        pass
+'''
+with open(os.path.join(packageA_dir, 'moduleA.py'), 'w') as f:
+    f.write(moduleA_content)
+
+# Create moduleB.py  
+moduleB_content = '''
+class ClassB:
+    """Class B in package B."""
+    
+    limit = 500  # Class variable with same name
+    
+    def method_b(self):
+        """Method B."""
+        pass
+'''
+with open(os.path.join(packageB_dir, 'moduleB.py'), 'w') as f:
+    f.write(moduleB_content)
+
+print("Created test files")
+
+# Build the documentation
+with docutils_namespace():
+    # Add source directory to Python path so modules can be imported
+    import sys
+    sys.path.insert(0, src_dir)
+    
+    app = Sphinx(
+        srcdir=src_dir,
+        confdir=src_dir, 
+        outdir=build_dir,
+        doctreedir=os.path.join(build_dir, 'doctrees'),
+        buildername='html'
+    )
+    app.build()
+
+print("Build completed")
+
+# Check if the issue exists by examining the domain objects
+python_domain = app.env.get_domain('py')
+objects = python_domain.objects
+
+print("\nObjects in Python domain:")
+for obj_name, obj_entry in objects.items():
+    print(f"  {obj_name}: {obj_entry.objtype} in {obj_entry.docname}")
+    if 'limit' in obj_name:
+        print(f"  *** FOUND LIMIT OBJECT: {obj_name}: {obj_entry.objtype} in {obj_entry.docname}")
+
+# Test cross-referencing behavior
+print("\nTesting cross-referencing:")
+# Test resolving 'limit' from ClassA context
+matches = python_domain.find_obj(app.env, 'packageA.moduleA', 'ClassA', 'limit', 'attr', 1)
+print(f"Resolving 'limit' from ClassA context: {matches}")
+
+# Test resolving 'limit' from ClassB context  
+matches = python_domain.find_obj(app.env, 'packageB.moduleB', 'ClassB', 'limit', 'attr', 1)
+print(f"Resolving 'limit' from ClassB context: {matches}")
+
+# Test resolving 'limit' without context (fuzzy search)
+matches = python_domain.find_obj(app.env, None, None, 'limit', 'attr', 1)
+print(f"Resolving 'limit' without context (fuzzy): {matches}")
+
+# Clean up
+shutil.rmtree(test_dir)
+print(f"Cleaned up test directory: {test_dir}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a0c8ac102..2ef89ef1a 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/tox.ini b/tox.ini
index bdf4c2ad3..b12166264 100644
--- a/tox.ini
+++ b/tox.ini
@@ -26,7 +26,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
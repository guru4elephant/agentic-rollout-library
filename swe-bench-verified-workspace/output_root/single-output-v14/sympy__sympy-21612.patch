diff --git a/debug_frac.py b/debug_frac.py
new file mode 100644
index 0000000000..2a32133eba
--- /dev/null
+++ b/debug_frac.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+
+# Let's manually test what happens with the current parsing
+import sympy
+from sympy.parsing.latex._parse_latex_antlr import convert_expr
+
+# Mock the parse_latex function for testing
+def test_frac_parsing():
+    # Test what happens with a simple fraction
+    a, b, c = sympy.symbols('a b c')
+    
+    # Test case 1: Simple fraction
+    numerator = (a**3 + b)/c
+    denominator = 1/(c**2)
+    
+    print(f"Numerator: {numerator}")
+    print(f"Denominator: {denominator}")
+    print(f"Numerator type: {type(numerator)}")
+    print(f"Denominator type: {type(denominator)}")
+    
+    # Test the string representation
+    result1 = numerator / denominator
+    result2 = numerator * (denominator**(-1))
+    
+    print(f"numerator / denominator: {result1}")
+    print(f"numerator * (denominator**(-1)): {result2}")
+    
+    # Check if they are mathematically equivalent
+    print(f"Mathematically equivalent: {result1 == result2}")
+    
+    # The issue is in the string representation, not the mathematical evaluation
+    print(f"numerator / denominator str: {str(result1)}")
+    print(f"numerator * (denominator**(-1)) str: {str(result2)}")
+
+if __name__ == "__main__":
+    test_frac_parsing()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8cd96518ad
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy.parsing.latex import parse_latex
+
+# Test the problematic LaTeX expression
+latex_expr = "\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}"
+result = parse_latex(latex_expr)
+
+print(f"Input LaTeX: {latex_expr}")
+print(f"Parsed result: {result}")
+print(f"Expected: ((a**3 + b)/c)/(1/(c**2))")
+print(f"Got: {result}")
+
+# Let's also test what the expected expression evaluates to
+from sympy import symbols
+a, b, c = symbols('a b c')
+
+expected_expr = ((a**3 + b)/c)/(1/(c**2))
+print(f"\nExpected expression evaluates to: {expected_expr}")
+print(f"Actual expression evaluates to: {result}")
+
+# Check if they are equal
+print(f"\nAre they equal? {expected_expr == result}")
\ No newline at end of file
diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py
index 2e4a45ad20..9e0022c4f8 100644
--- a/sympy/parsing/latex/_parse_latex_antlr.py
+++ b/sympy/parsing/latex/_parse_latex_antlr.py
@@ -382,11 +382,27 @@ def convert_frac(frac):
 
     expr_top = convert_expr(frac.upper)
     expr_bot = convert_expr(frac.lower)
-    inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
-    if expr_top == 1:
-        return inverse_denom
+    
+    # If the denominator is a complex expression (fraction, sum, product, etc.),
+    # we need to wrap it in parentheses to maintain proper mathematical grouping
+    # Check if denominator is a fraction (Mul with Pow(-1)) or other complex expression
+    is_complex_denom = False
+    if isinstance(expr_bot, sympy.Mul):
+        # Check if it contains division (Pow with negative exponent)
+        if any(isinstance(arg, sympy.Pow) and arg.exp == -1 for arg in expr_bot.args):
+            is_complex_denom = True
+    elif isinstance(expr_bot, (sympy.Add, sympy.Pow)):
+        is_complex_denom = True
+    
+    if is_complex_denom:
+        # For complex denominators, use proper division to maintain grouping
+        return sympy.Mul(expr_top, sympy.Pow(expr_bot, -1, evaluate=False), evaluate=False)
     else:
-        return sympy.Mul(expr_top, inverse_denom, evaluate=False)
+        inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
+        if expr_top == 1:
+            return inverse_denom
+        else:
+            return sympy.Mul(expr_top, inverse_denom, evaluate=False)
 
 def convert_binom(binom):
     expr_n = convert_expr(binom.n)
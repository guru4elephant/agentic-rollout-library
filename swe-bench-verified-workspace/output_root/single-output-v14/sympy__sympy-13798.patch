diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a80d94f773
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols
+
+# Test the current behavior with valid mul_symbol values
+x, y = symbols('x y')
+expr = 3*x**2*y
+
+print("Testing with valid mul_symbol values:")
+print("None:", latex(expr, mul_symbol=None))
+print("ldot:", latex(expr, mul_symbol="ldot"))
+print("dot:", latex(expr, mul_symbol="dot"))
+print("times:", latex(expr, mul_symbol="times"))
+
+print("\nTesting with custom mul_symbol value (this should fail):")
+try:
+    result = latex(expr, mul_symbol=r"\, ")
+    print("Custom:", result)
+except Exception as e:
+    print("Error:", e)
+    print("Type:", type(e))
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index ad4d7d9613..3774f19b0f 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -156,11 +156,21 @@ def __init__(self, settings=None):
             "times": r" \times "
         }
 
-        self._settings['mul_symbol_latex'] = \
-            mul_symbol_table[self._settings['mul_symbol']]
+        mul_symbol = self._settings['mul_symbol']
+        
+        # If mul_symbol is one of the predefined values, use the corresponding LaTeX
+        # Otherwise, use the provided value directly
+        if mul_symbol in mul_symbol_table:
+            self._settings['mul_symbol_latex'] = mul_symbol_table[mul_symbol]
+        else:
+            self._settings['mul_symbol_latex'] = mul_symbol
 
-        self._settings['mul_symbol_latex_numbers'] = \
-            mul_symbol_table[self._settings['mul_symbol'] or 'dot']
+        # For numbers, use 'dot' as default if mul_symbol is None, otherwise use the same logic
+        numbers_mul_symbol = mul_symbol or 'dot'
+        if numbers_mul_symbol in mul_symbol_table:
+            self._settings['mul_symbol_latex_numbers'] = mul_symbol_table[numbers_mul_symbol]
+        else:
+            self._settings['mul_symbol_latex_numbers'] = numbers_mul_symbol
 
         self._delim_dict = {'(': ')', '[': ']'}
 
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..4d7f37348d
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols, Integral
+
+# Test various edge cases for mul_symbol
+x, y = symbols('x y')
+expr = 3*x**2*y
+
+print("Testing various mul_symbol values:")
+print("None:", latex(expr, mul_symbol=None))
+print("ldot:", latex(expr, mul_symbol="ldot"))
+print("dot:", latex(expr, mul_symbol="dot"))
+print("times:", latex(expr, mul_symbol="times"))
+
+# Test custom values
+print("\nTesting custom mul_symbol values:")
+print("Thin space:", latex(expr, mul_symbol=r"\, "))
+print("Asterisk:", latex(expr, mul_symbol="*"))
+print("Empty string:", latex(expr, mul_symbol=""))
+print("Custom symbol:", latex(expr, mul_symbol=r"\star "))
+
+# Test with numbers (should use dot as default when mul_symbol is None)
+print("\nTesting with numbers:")
+num_expr = 3 * 5 * x
+print("None (should use space):", latex(num_expr, mul_symbol=None))
+print("Custom (should use custom):", latex(num_expr, mul_symbol=r"\, "))
+
+# Test the integral example from the issue
+print("\nTesting integral example:")
+integral_expr = Integral(2*x**2*y, x)
+print("Default:", latex(integral_expr))
+print("With thin space:", latex(integral_expr, mul_symbol=r"\, "))
+
+# Test edge case: mul_symbol set to None explicitly
+print("\nTesting explicit None:")
+print(latex(expr, mul_symbol=None))
\ No newline at end of file
diff --git a/test_default.py b/test_default.py
new file mode 100644
index 0000000000..6eaf2b08c0
--- /dev/null
+++ b/test_default.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols
+
+# Test default behavior when mul_symbol is not provided
+x, y = symbols('x y')
+expr = 3*x**2*y
+
+print("Testing default behavior (no mul_symbol provided):")
+print(latex(expr))
+
+print("\nTesting explicit None:")
+print(latex(expr, mul_symbol=None))
+
+# They should be the same
+print("\nAre they the same?", latex(expr) == latex(expr, mul_symbol=None))
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..f13eab32ff
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols, Integral
+
+# Test the exact use case from the GitHub issue
+x, y = symbols('x y')
+expr = 3*x**2*y
+
+print("Testing the GitHub issue use case:")
+print("Desired output: '3 \\, x^{2} \\, y'")
+print("Actual output:", repr(latex(expr, mul_symbol=r"\, ")))
+print("Match:", latex(expr, mul_symbol=r"\, ") == '3\\, x^{2}\\, y')
+
+# Test the integral example from the issue
+print("\nTesting integral example:")
+integral_expr = Integral(2*x**2*y, x)
+print("Default (should have thin space for differential):", latex(integral_expr))
+print("With thin space multiplication:", latex(integral_expr, mul_symbol=r"\, "))
+
+# Verify that the thin space is used for differentials regardless of mul_symbol setting
+print("\nTesting that differential thin space is preserved:")
+print("With custom mul_symbol (differential should still have thin space):", latex(integral_expr, mul_symbol="*"))
\ No newline at end of file
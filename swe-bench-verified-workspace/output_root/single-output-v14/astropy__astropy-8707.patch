diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..5adafe07d3 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,12 +547,16 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
-        if it is not the length of a card image (80 columns).  If the card
+        Construct a `Card` object from a (raw) string or bytes. It will pad the
+        string if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
         """
 
+        # Convert bytes to string if needed
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
+
         card = cls()
         card._image = _pad(image)
         card._verified = False
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..bc86ec234a 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -334,8 +334,8 @@ class Header:
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -350,6 +350,12 @@ class Header:
 
         cards = []
 
+        # Convert bytes to string if needed
+        if isinstance(data, bytes):
+            data_str = data.decode('ascii')
+        else:
+            data_str = data
+
         # If the card separator contains characters that may validly appear in
         # a card, the only way to unambiguously distinguish between cards is to
         # require that they be Card.length long.  However, if the separator
@@ -361,16 +367,16 @@ class Header:
         idx = 0
         image = []
 
-        while idx < len(data):
+        while idx < len(data_str):
             if require_full_cardlength:
                 end_idx = idx + Card.length
             else:
                 try:
-                    end_idx = data.index(sep, idx)
+                    end_idx = data_str.index(sep, idx)
                 except ValueError:
-                    end_idx = len(data)
+                    end_idx = len(data_str)
 
-            next_image = data[idx:end_idx]
+            next_image = data_str[idx:end_idx]
             idx = end_idx + len(sep)
 
             if image:
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..6d78999e55
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+def test_original_issue():
+    """Test the exact issue reported in the GitHub issue"""
+    print("=== Testing Original GitHub Issue ===")
+    
+    # Test the exact scenario described in the issue
+    header_data = b"SIMPLE  =                    T / file does conform to FITS standard             "
+    
+    # This should now work without errors
+    try:
+        header = fits.Header.fromstring(header_data)
+        print("✓ Header.fromstring with bytes works")
+        print(f"  Result: {header}")
+    except Exception as e:
+        print(f"✗ Header.fromstring failed: {e}")
+        return False
+    
+    # Test Card.fromstring as well (mentioned in the issue)
+    try:
+        card = fits.Card.fromstring(header_data)
+        print("✓ Card.fromstring with bytes works")
+        print(f"  Result: {card}")
+    except Exception as e:
+        print(f"✗ Card.fromstring failed: {e}")
+        return False
+    
+    return True
+
+def test_backwards_compatibility():
+    """Test that existing string functionality still works"""
+    print("\n=== Testing Backwards Compatibility ===")
+    
+    # Test with regular strings (should still work)
+    header_data = "SIMPLE  =                    T / file does conform to FITS standard             "
+    
+    try:
+        header = fits.Header.fromstring(header_data)
+        print("✓ Header.fromstring with string still works")
+    except Exception as e:
+        print(f"✗ Header.fromstring with string failed: {e}")
+        return False
+    
+    try:
+        card = fits.Card.fromstring(header_data)
+        print("✓ Card.fromstring with string still works")
+    except Exception as e:
+        print(f"✗ Card.fromstring with string failed: {e}")
+        return False
+    
+    return True
+
+def test_equivalence():
+    """Test that string and bytes inputs produce equivalent results"""
+    print("\n=== Testing Equivalence ===")
+    
+    header_str = "SIMPLE  =                    T / file does conform to FITS standard             "
+    header_bytes = b"SIMPLE  =                    T / file does conform to FITS standard             "
+    
+    try:
+        header1 = fits.Header.fromstring(header_str)
+        header2 = fits.Header.fromstring(header_bytes)
+        
+        card1 = fits.Card.fromstring(header_str)
+        card2 = fits.Card.fromstring(header_bytes)
+        
+        # They should produce equivalent results
+        if str(header1) == str(header2) and str(card1) == str(card2):
+            print("✓ String and bytes inputs produce equivalent results")
+        else:
+            print("✗ String and bytes inputs produce different results")
+            return False
+            
+    except Exception as e:
+        print(f"✗ Equivalence test failed: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = True
+    success &= test_original_issue()
+    success &= test_backwards_compatibility()
+    success &= test_equivalence()
+    
+    if success:
+        print("\n🎉 All tests passed! The issue has been fixed.")
+    else:
+        print("\n❌ Some tests failed.")
+        exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..fb9e84683a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import sys
+
+# Test with regular string (should work)
+print("Testing with regular string:")
+try:
+    header_str = "SIMPLE  =                    T / file does conform to FITS standard             "
+    header = fits.Header.fromstring(header_str)
+    print("SUCCESS: String input works")
+    print(f"Header: {header}")
+except Exception as e:
+    print(f"ERROR with string: {e}")
+
+print("\nTesting with bytes (should fail currently):")
+# Test with bytes (should fail according to the issue)
+try:
+    header_bytes = b"SIMPLE  =                    T / file does conform to FITS standard             "
+    header = fits.Header.fromstring(header_bytes)
+    print("SUCCESS: Bytes input works")
+    print(f"Header: {header}")
+except Exception as e:
+    print(f"ERROR with bytes: {e}")
+    print(f"Error type: {type(e).__name__}")
+
+print("\nTesting Card.fromstring with bytes:")
+# Test Card.fromstring with bytes
+try:
+    card_bytes = b"SIMPLE  =                    T / file does conform to FITS standard             "
+    card = fits.Card.fromstring(card_bytes)
+    print("SUCCESS: Card.fromstring with bytes works")
+    print(f"Card: {card}")
+except Exception as e:
+    print(f"ERROR with Card.fromstring bytes: {e}")
+    print(f"Error type: {type(e).__name__}")
\ No newline at end of file
diff --git a/test_card_bytes.py b/test_card_bytes.py
new file mode 100644
index 0000000000..db955e5283
--- /dev/null
+++ b/test_card_bytes.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test Card.fromstring with bytes
+try:
+    card_bytes = b"SIMPLE  =                    T / file does conform to FITS standard             "
+    card = fits.Card.fromstring(card_bytes)
+    print("SUCCESS: Card.fromstring with bytes works")
+    print(f"Card: {card}")
+    print(f"Card type: {type(card)}")
+    print(f"Card._image type: {type(card._image)}")
+except Exception as e:
+    print(f"ERROR with Card.fromstring bytes: {e}")
+    print(f"Error type: {type(e).__name__}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..be0d508e91
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+def test_header_fromstring():
+    print("=== Testing Header.fromstring ===")
+    
+    # Test with regular string
+    print("1. Testing with string:")
+    header_str = "SIMPLE  =                    T / file does conform to FITS standard             "
+    header = fits.Header.fromstring(header_str)
+    print(f"   SUCCESS: {header}")
+    
+    # Test with bytes
+    print("2. Testing with bytes:")
+    header_bytes = b"SIMPLE  =                    T / file does conform to FITS standard             "
+    header = fits.Header.fromstring(header_bytes)
+    print(f"   SUCCESS: {header}")
+    
+    # Test with multi-card string
+    print("3. Testing with multi-card string:")
+    multi_str = "SIMPLE  =                    T / file does conform to FITS standard             BITPIX  =                    8 / number of bits per data pixel                  "
+    header = fits.Header.fromstring(multi_str)
+    print(f"   SUCCESS: {len(header)} cards")
+    
+    # Test with multi-card bytes
+    print("4. Testing with multi-card bytes:")
+    multi_bytes = b"SIMPLE  =                    T / file does conform to FITS standard             BITPIX  =                    8 / number of bits per data pixel                  "
+    header = fits.Header.fromstring(multi_bytes)
+    print(f"   SUCCESS: {len(header)} cards")
+    
+    # Test with separator
+    print("5. Testing with separator (newline):")
+    sep_str = "SIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                    8 / number of bits per data pixel\n"
+    header = fits.Header.fromstring(sep_str, sep='\n')
+    print(f"   SUCCESS: {len(header)} cards")
+    
+    # Test with separator and bytes
+    print("6. Testing with separator and bytes:")
+    sep_bytes = b"SIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                    8 / number of bits per data pixel\n"
+    header = fits.Header.fromstring(sep_bytes, sep='\n')
+    print(f"   SUCCESS: {len(header)} cards")
+
+def test_card_fromstring():
+    print("\n=== Testing Card.fromstring ===")
+    
+    # Test with regular string
+    print("1. Testing with string:")
+    card_str = "SIMPLE  =                    T / file does conform to FITS standard             "
+    card = fits.Card.fromstring(card_str)
+    print(f"   SUCCESS: {card}")
+    
+    # Test with bytes
+    print("2. Testing with bytes:")
+    card_bytes = b"SIMPLE  =                    T / file does conform to FITS standard             "
+    card = fits.Card.fromstring(card_bytes)
+    print(f"   SUCCESS: {card}")
+    
+    # Test with short string (should be padded)
+    print("3. Testing with short string:")
+    short_str = "SIMPLE  = T"
+    card = fits.Card.fromstring(short_str)
+    print(f"   SUCCESS: {len(card.image)} chars")
+    
+    # Test with short bytes (should be padded)
+    print("4. Testing with short bytes:")
+    short_bytes = b"SIMPLE  = T"
+    card = fits.Card.fromstring(short_bytes)
+    print(f"   SUCCESS: {len(card.image)} chars")
+
+if __name__ == "__main__":
+    test_header_fromstring()
+    test_card_fromstring()
+    print("\n=== All tests completed ===")
\ No newline at end of file
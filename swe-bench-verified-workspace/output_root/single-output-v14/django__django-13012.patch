diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index c1a76584f0..a8f8b427ca 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -866,6 +866,9 @@ class ExpressionWrapper(Expression):
     def as_sql(self, compiler, connection):
         return self.expression.as_sql(compiler, connection)
 
+    def get_group_by_cols(self, alias=None):
+        return self.expression.get_group_by_cols(alias)
+
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, self.expression)
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..22f30a8a26
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import ExpressionWrapper, Value, Sum, IntegerField
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    column_a = models.IntegerField()
+    column_b = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+def execQuery_broken(expr):
+    """This version should reproduce the issue"""
+    expr = ExpressionWrapper(expr, output_field=IntegerField())
+    return TestModel.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+
+def execQuery_working(expr):
+    """This version should work correctly"""
+    return TestModel.objects.annotate(expr_res=Value(3, output_field=IntegerField())).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+
+if __name__ == '__main__':
+    # Test the broken case
+    try:
+        print("Testing broken case (ExpressionWrapper with constant):")
+        queryset = execQuery_broken(Value(3))
+        sql = str(queryset.query)
+        print(f"Generated SQL: {sql}")
+        print("This should fail due to constant in GROUP BY")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    print("\n" + "="*50 + "\n")
+    
+    # Test the working case
+    try:
+        print("Testing working case (Value directly):")
+        queryset = execQuery_working(Value(3))
+        sql = str(queryset.query)
+        print(f"Generated SQL: {sql}")
+        print("This should work correctly")
+    except Exception as e:
+        print(f"Error: {e}")
\ No newline at end of file
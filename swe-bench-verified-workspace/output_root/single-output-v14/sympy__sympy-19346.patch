diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..b6d8e5b5bd
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y
+
+print("Testing the original issue examples:")
+print("srepr prints the element in list and tuple correctly.")
+print(">>> srepr([x,y])")
+print(srepr([x, y]))
+print(">>> srepr((x,y))") 
+print(srepr((x, y)))
+
+print("\nNow srepr also prints the elements in dict and set correctly!")
+print(">>> srepr({x, y})")
+print(srepr({x, y}))
+print(">>> srepr({x: y})")
+print(srepr({x: y}))
+
+print("\nVerifying that eval(srepr(expr)) == expr:")
+env = {}
+exec('from sympy import *', env)
+
+# Test all four cases
+test_cases = [
+    [x, y],
+    (x, y),
+    {x, y},
+    {x: y}
+]
+
+for i, expr in enumerate(test_cases):
+    result = eval(srepr(expr), env)
+    print(f"Case {i+1}: {expr.__class__.__name__} - {result == expr}")
+    if result != expr:
+        print(f"  Original: {expr}")
+        print(f"  Result: {result}")
+
+print("\nAll tests passed! The issue has been fixed.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..59829b6a11
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y
+
+# Test the current behavior
+print("Testing srepr with list:")
+print(srepr([x, y]))
+
+print("\nTesting srepr with tuple:")
+print(srepr((x, y)))
+
+print("\nTesting srepr with set:")
+print(srepr({x, y}))
+
+print("\nTesting srepr with dict:")
+print(srepr({x: y}))
+
+# Expected behavior should be similar to list and tuple
+print("\nExpected behavior for set should be:")
+print("set([Symbol('x'), Symbol('y')])")
+
+print("\nExpected behavior for dict should be:")
+print("{Symbol('x'): Symbol('y')}")
\ No newline at end of file
diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py
index c936a692c0..9a3e51c315 100644
--- a/sympy/printing/repr.py
+++ b/sympy/printing/repr.py
@@ -144,6 +144,17 @@ def _print_EmptySequence(self, expr):
     def _print_list(self, expr):
         return "[%s]" % self.reprify(expr, ", ")
 
+    def _print_dict(self, expr):
+        items = []
+        for key, value in expr.items():
+            items.append("%s: %s" % (self._print(key), self._print(value)))
+        return "{%s}" % ", ".join(items)
+
+    def _print_set(self, expr):
+        if len(expr) == 0:
+            return "set()"
+        return "set([%s])" % self.reprify(expr, ", ")
+
     def _print_MatrixBase(self, expr):
         # special case for some empty matrices
         if (expr.rows == 0) ^ (expr.cols == 0):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..fac8535cd9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from sympy import srepr
+from sympy.abc import x, y
+
+# Test edge cases
+print("Testing empty set:")
+print(srepr(set()))
+
+print("\nTesting empty dict:")
+print(srepr({}))
+
+print("\nTesting set with one element:")
+print(srepr({x}))
+
+print("\nTesting dict with one element:")
+print(srepr({x: y}))
+
+print("\nTesting set with multiple elements:")
+print(srepr({x, y, x + y}))
+
+print("\nTesting dict with multiple elements:")
+print(srepr({x: y, y: x, x + y: x - y}))
+
+print("\nTesting nested structures:")
+print(srepr([{x: y}, {x, y}]))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..bacc719d7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with private-members option.
+"""
+
+class TestClass:
+    """A test class with various members."""
+    
+    def public_method(self):
+        """A public method."""
+        pass
+    
+    def _private_method(self):
+        """A private method."""
+        pass
+    
+    def _another_private(self):
+        """Another private method."""
+        pass
+    
+    def __special_method__(self):
+        """A special method."""
+        pass
+
+if __name__ == "__main__":
+    print("Test class created with:")
+    print("- public_method (public)")
+    print("- _private_method (private)") 
+    print("- _another_private (private)")
+    print("- __special_method__ (special)")
+    print("\nThis script is for testing the current autodoc behavior.")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 8c3509c3b..eaa0a32f8 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -136,6 +136,19 @@ def merge_special_members_option(options: Dict) -> None:
             options['members'] = options['special-members']
 
 
+def merge_private_members_option(options: Dict) -> None:
+    """Merge :private-members: option to :members: option."""
+    if 'private-members' in options and options['private-members'] is not ALL:
+        if options.get('members') is ALL:
+            pass
+        elif options.get('members'):
+            for member in options['private-members']:
+                if member not in options['members']:
+                    options['members'].append(member)
+        else:
+            options['members'] = options['private-members']
+
+
 # Some useful event listener factories for autodoc-process-docstring.
 
 def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:
@@ -649,15 +662,25 @@ class Documenter:
             elif (namespace, membername) in attr_docs:
                 if want_all and isprivate:
                     # ignore members whose name starts with _ by default
-                    keep = self.options.private_members
+                    if self.options.private_members is ALL:
+                        keep = True
+                    elif self.options.private_members:
+                        keep = membername in self.options.private_members
+                    else:
+                        keep = False
                 else:
                     # keep documented attributes
                     keep = True
                 isattr = True
             elif want_all and isprivate:
                 # ignore members whose name starts with _ by default
-                keep = self.options.private_members and \
-                    (has_doc or self.options.undoc_members)
+                if self.options.private_members is ALL:
+                    keep = has_doc or self.options.undoc_members
+                elif self.options.private_members:
+                    keep = (membername in self.options.private_members) and \
+                        (has_doc or self.options.undoc_members)
+                else:
+                    keep = False
             else:
                 if self.options.members is ALL and is_filtered_inherited_member(membername):
                     keep = False
@@ -859,13 +882,14 @@ class ModuleDocumenter(Documenter):
         'show-inheritance': bool_option, 'synopsis': identity,
         'platform': identity, 'deprecated': bool_option,
         'member-order': member_order_option, 'exclude-members': members_set_option,
-        'private-members': bool_option, 'special-members': members_option,
+        'private-members': members_option, 'special-members': members_option,
         'imported-members': bool_option, 'ignore-module-all': bool_option
     }  # type: Dict[str, Callable]
 
     def __init__(self, *args: Any) -> None:
         super().__init__(*args)
         merge_special_members_option(self.options)
+        merge_private_members_option(self.options)
         self.__all__ = None
 
     @classmethod
@@ -1279,7 +1303,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
         'noindex': bool_option, 'inherited-members': inherited_members_option,
         'show-inheritance': bool_option, 'member-order': member_order_option,
         'exclude-members': members_set_option,
-        'private-members': bool_option, 'special-members': members_option,
+        'private-members': members_option, 'special-members': members_option,
     }  # type: Dict[str, Callable]
 
     _signature_class = None  # type: Any
@@ -1288,6 +1312,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
     def __init__(self, *args: Any) -> None:
         super().__init__(*args)
         merge_special_members_option(self.options)
+        merge_private_members_option(self.options)
 
     @classmethod
     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
diff --git a/test_private_members.py b/test_private_members.py
new file mode 100644
index 000000000..7f16dd56c
--- /dev/null
+++ b/test_private_members.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that private-members option works with specific member names.
+"""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.ext.autodoc import do_autodoc
+
+# Create a temporary test module
+test_module_content = '''
+"""
+Test module for private members.
+"""
+
+class TestClass:
+    """A test class with various members."""
+    
+    def public_method(self):
+        """A public method."""
+        pass
+    
+    def _private_method(self):
+        """A private method."""
+        pass
+    
+    def _another_private(self):
+        """Another private method."""
+        pass
+    
+    def __special_method__(self):
+        """A special method."""
+        pass
+'''
+
+def test_private_members():
+    # Create a temporary directory and module
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Write the test module
+        with open(os.path.join(tmpdir, 'test_module.py'), 'w') as f:
+            f.write(test_module_content)
+        
+        # Add the directory to Python path
+        import sys
+        sys.path.insert(0, tmpdir)
+        
+        # Create a minimal Sphinx app for testing
+        srcdir = os.path.join(tmpdir, 'src')
+        outdir = os.path.join(tmpdir, 'out')
+        os.makedirs(srcdir)
+        
+        conf_py = '''
+extensions = ['sphinx.ext.autodoc']
+'''
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_py)
+        
+        # Create Sphinx app
+        app = Sphinx(srcdir, srcdir, outdir, outdir, 'html')
+        
+        # Test 1: No private-members option (should not show private methods)
+        print("=== Test 1: No private-members option ===")
+        options = {"members": None}
+        result = do_autodoc(app, 'class', 'test_module.TestClass', options)
+        for line in result:
+            if 'method' in line:
+                print(line)
+        
+        print("\n=== Test 2: private-members: True (show all private methods) ===")
+        options = {"members": None, "private-members": True}
+        result = do_autodoc(app, 'class', 'test_module.TestClass', options)
+        for line in result:
+            if 'method' in line:
+                print(line)
+        
+        print("\n=== Test 3: private-members: _private_method (show specific private method) ===")
+        options = {"members": None, "private-members": "_private_method"}
+        result = do_autodoc(app, 'class', 'test_module.TestClass', options)
+        for line in result:
+            if 'method' in line:
+                print(line)
+        
+        print("\n=== Test 4: private-members: _private_method,_another_private (show multiple private methods) ===")
+        options = {"members": None, "private-members": "_private_method,_another_private"}
+        result = do_autodoc(app, 'class', 'test_module.TestClass', options)
+        for line in result:
+            if 'method' in line:
+                print(line)
+
+if __name__ == "__main__":
+    test_private_members()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index bddd822a6..34baee205 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
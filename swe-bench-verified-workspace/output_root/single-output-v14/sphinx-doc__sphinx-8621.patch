diff --git a/debug_reconstruction.py b/debug_reconstruction.py
new file mode 100644
index 000000000..03a29fb38
--- /dev/null
+++ b/debug_reconstruction.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+import re
+
+pattern = re.compile(r'(-|\+|\^|\s+)')
+
+test_cases = [
+    "-",
+    "+", 
+    "Shift-+"
+]
+
+for text in test_cases:
+    parts = pattern.split(text)
+    print(f"Text: '{text}'")
+    print(f"Parts: {parts}")
+    
+    # Apply the reconstruction logic
+    reconstructed_parts = []
+    i = 0
+    while i < len(parts):
+        if parts[i]:  # Non-empty key
+            reconstructed_parts.append(parts[i])
+            i += 1
+        else:
+            # Empty part, check if it's between two separator characters
+            if (i + 2 < len(parts) and 
+                parts[i] == '' and 
+                parts[i+1] in ('-', '+', '^') and 
+                parts[i+2] == ''):
+                # This is a separator character that should be treated as a keystroke
+                reconstructed_parts.append(parts[i+1])
+                i += 3
+            else:
+                # Regular separator
+                if i + 1 < len(parts):
+                    reconstructed_parts.append(parts[i+1])
+                i += 2
+    
+    print(f"Reconstructed: {reconstructed_parts}")
+    print()
\ No newline at end of file
diff --git a/debug_split.py b/debug_split.py
new file mode 100644
index 000000000..dfacf8a0c
--- /dev/null
+++ b/debug_split.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+import re
+
+pattern = re.compile(r'(-|\+|\^|\s+)')
+
+test_cases = [
+    "-",
+    "+", 
+    "Shift-+"
+]
+
+for text in test_cases:
+    parts = pattern.split(text)
+    print(f"Text: '{text}'")
+    print(f"Parts: {parts}")
+    print(f"Length: {len(parts)}")
+    print()
\ No newline at end of file
diff --git a/debug_tokens.py b/debug_tokens.py
new file mode 100644
index 000000000..f2a94664b
--- /dev/null
+++ b/debug_tokens.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+import re
+
+pattern = re.compile(r'(-|\+|\^|\s+)')
+
+test_cases = [
+    "-",
+    "+", 
+    "Shift-+"
+]
+
+for text in test_cases:
+    parts = pattern.split(text)
+    print(f"Text: '{text}'")
+    print(f"Parts: {parts}")
+    
+    # Apply the tokenization logic
+    tokens = []
+    i = 0
+    while i < len(parts):
+        if parts[i]:  # Non-empty key part
+            tokens.append(('key', parts[i]))
+            i += 1
+        else:
+            # Empty part indicates a separator follows
+            if i + 1 < len(parts):
+                separator = parts[i+1]
+                # Check if this separator is at the end or followed by empty parts
+                # If so, it's likely part of a keystroke, not a true separator
+                if (i + 3 < len(parts) and parts[i+2] == '' and 
+                    parts[i+3] in ('-', '+', '^')):
+                    # This separator is part of a compound keystroke
+                    tokens.append(('key', separator))
+                    i += 3  # Skip the separator and the following empty part
+                else:
+                    # This is a true separator
+                    tokens.append(('sep', separator))
+                    i += 2
+            else:
+                i += 1
+    
+    print(f"Tokens: {tokens}")
+    print()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..1830a8b97
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the kbd role issue described in the GitHub issue.
+"""
+
+from docutils.core import publish_doctree
+from docutils.parsers.rst import Parser
+from docutils.utils import new_document
+from docutils.frontend import OptionParser
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+import tempfile
+import os
+
+def test_kbd_role():
+    """Test the kbd role with problematic characters"""
+    
+    # Test cases from the issue
+    test_cases = [
+        ":kbd:`-`",
+        ":kbd:`+`", 
+        ":kbd:`Shift-+`"
+    ]
+    
+    # Create a temporary directory for Sphinx
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        os.makedirs(srcdir)
+        
+        # Create a minimal conf.py
+        conf_content = """
+project = 'Test'
+extensions = []
+"""
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create a test document
+        test_content = """
+Test Document
+=============
+
+{}
+""".format('\n\n'.join(test_cases))
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(test_content)
+        
+        # Build with Sphinx
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+            
+            # Read the output HTML
+            html_file = os.path.join(outdir, 'index.html')
+            if os.path.exists(html_file):
+                with open(html_file, 'r') as f:
+                    html_content = f.read()
+                    print("Generated HTML:")
+                    print(html_content)
+                    
+                    # Check for the problematic patterns
+                    if '<kbd class="kbd docutils literal notranslate"><kbd class="kbd docutils literal notranslate"></kbd>' in html_content:
+                        print("\n❌ BUG CONFIRMED: Empty kbd elements found!")
+                    else:
+                        print("\n✅ No empty kbd elements found - bug may be fixed")
+
+if __name__ == "__main__":
+    test_kbd_role()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py
index c91da57e9..4c1efc7ed 100644
--- a/sphinx/builders/html/transforms.py
+++ b/sphinx/builders/html/transforms.py
@@ -42,21 +42,48 @@ class KeyboardTransform(SphinxPostTransform):
     def run(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, classes=["kbd"])
         for node in self.document.traverse(matcher):  # type: nodes.literal
-            parts = self.pattern.split(node[-1].astext())
-            if len(parts) == 1:
+            text = node[-1].astext()
+            parts = self.pattern.split(text)
+            
+            # If the entire text consists only of separator characters,
+            # treat it as a single keystroke rather than splitting
+            if len(parts) == 1 or (len(parts) == 3 and parts[0] == '' and parts[2] == '' and text in ('-', '+', '^')):
                 continue
 
             node.pop()
-            while parts:
-                key = parts.pop(0)
-                node += nodes.literal('', key, classes=["kbd"])
-
-                try:
-                    # key separator (ex. -, +, ^)
-                    sep = parts.pop(0)
-                    node += nodes.Text(sep)
-                except IndexError:
-                    pass
+            
+            # Use a state machine approach to properly handle separator characters
+            # that are part of keystrokes vs. true separators
+            tokens = []
+            i = 0
+            while i < len(parts):
+                if parts[i]:  # Non-empty key part
+                    tokens.append(('key', parts[i]))
+                    i += 1
+                else:
+                    # Empty part indicates a separator follows
+                    if i + 1 < len(parts):
+                        separator = parts[i+1]
+                        # Check if this separator is at the end or followed by empty parts
+                        # If so, it's likely part of a keystroke, not a true separator
+                        if (i + 3 < len(parts) and parts[i+2] == '' and 
+                            parts[i+3] in ('-', '+', '^')):
+                            # This separator is part of a compound keystroke
+                            tokens.append(('key', separator))
+                            i += 3  # Skip the separator and the following empty part
+                        else:
+                            # This is a true separator
+                            tokens.append(('sep', separator))
+                            i += 2
+                    else:
+                        i += 1
+            
+            # Process the tokens
+            for token_type, token_value in tokens:
+                if token_type == 'key':
+                    node += nodes.literal('', token_value, classes=["kbd"])
+                else:
+                    node += nodes.Text(token_value)
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
diff --git a/tox.ini b/tox.ini
index 21a0faec3..be1a9127e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
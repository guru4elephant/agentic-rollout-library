diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 7dcc77b46c..cd0c0c9a83 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -43,7 +43,7 @@ language_code_re = _lazy_re_compile(
     re.IGNORECASE
 )
 
-language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_prefix_re = _lazy_re_compile(r'^/([a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?)(/|$)', re.IGNORECASE)
 
 
 @receiver(setting_changed)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c3d5394a65
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import RequestFactory
+from django.urls.resolvers import LocalePrefixPattern, URLResolver, URLPattern
+from django.urls import path
+from django.http import HttpResponse
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_I18N=True,
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en-us', "English"),
+        ('en-latn-us', "Latin English"),
+        ('en-Latn-US', "BCP 47 case format"),
+    ],
+    MIDDLEWARE=[
+        'django.middleware.locale.LocaleMiddleware',
+        'django.middleware.common.CommonMiddleware',
+    ],
+    ROOT_URLCONF='test_urls',
+)
+
+django.setup()
+
+def bangiah(request):
+    return HttpResponse('U!')
+
+# Create URL patterns with i18n_patterns
+from django.conf.urls.i18n import i18n_patterns
+
+urlpatterns = i18n_patterns(
+    path('', bangiah),
+)
+
+# Test the URL resolution
+def test_url_resolution():
+    from django.urls import get_resolver
+    from django.utils.translation import activate
+    
+    resolver = get_resolver(None)
+    
+    # Test cases from the issue
+    test_cases = [
+        ('en-us', '/en-us/', True),
+        ('en-latn-us', '/en-latn-us/', True),
+        ('en-Latn-US', '/en-Latn-US/', True),
+    ]
+    
+    print("Testing URL resolution with i18n_patterns:")
+    print("=" * 50)
+    
+    for lang_code, test_path, expected in test_cases:
+        # Set the language
+        activate(lang_code)
+        
+        # Test the resolution
+        try:
+            result = resolver.resolve(test_path)
+            match_success = result is not None
+            print(f"Language: {lang_code}")
+            print(f"Test path: {test_path}")
+            print(f"Expected match: {expected}")
+            print(f"Actual match: {match_success}")
+            if result:
+                print(f"Resolved view: {result.func}")
+        except Exception as e:
+            match_success = False
+            print(f"Language: {lang_code}")
+            print(f"Test path: {test_path}")
+            print(f"Expected match: {expected}")
+            print(f"Actual match: {match_success}")
+            print(f"Error: {e}")
+        
+        print("-" * 30)
+        
+        if match_success != expected:
+            print(f"❌ FAIL: Expected {expected}, got {match_success}")
+            return False
+        else:
+            print(f"✅ PASS")
+    
+    return True
+
+if __name__ == '__main__':
+    success = test_url_resolution()
+    if success:
+        print("\n🎉 All tests passed!")
+    else:
+        print("\n💥 Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..0a8881e22a
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.utils.translation.trans_real import get_language_from_path
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_I18N=True,
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en-us', "English"),
+        ('en-latn-us', "Latin English"),
+        ('en-Latn-US', "BCP 47 case format"),
+    ],
+)
+
+django.setup()
+
+# Test the get_language_from_path function
+def test_get_language_from_path():
+    test_cases = [
+        ('/en-us/', 'en-us'),
+        ('/en-latn-us/', 'en-latn-us'),
+        ('/en-Latn-US/', 'en-Latn-US'),
+        ('/en-latn/', 'en-latn'),
+        ('/en/', 'en'),
+        ('/invalid/', None),
+        ('/en-us/test/', 'en-us'),
+        ('/en-latn-us/test/', 'en-latn-us'),
+    ]
+    
+    print("Testing get_language_from_path function:")
+    print("=" * 50)
+    
+    all_passed = True
+    
+    for path, expected in test_cases:
+        result = get_language_from_path(path, strict=True)
+        status = "✓" if result == expected else "✗"
+        
+        print(f"{status} Path: '{path}'")
+        print(f"   Expected: {expected}")
+        print(f"   Got:      {result}")
+        
+        if result != expected:
+            all_passed = False
+            print("   ❌ FAIL")
+        else:
+            print("   ✅ PASS")
+        print()
+    
+    return all_passed
+
+if __name__ == '__main__':
+    success = test_get_language_from_path()
+    if success:
+        print("🎉 All tests passed!")
+        sys.exit(0)
+    else:
+        print("💥 Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_i18n_urls.py b/test_i18n_urls.py
new file mode 100644
index 0000000000..ab0f1d2bfa
--- /dev/null
+++ b/test_i18n_urls.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.urls.resolvers import LocalePrefixPattern
+from django.utils.translation import activate
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_I18N=True,
+    LANGUAGE_CODE='en-us',
+    LANGUAGES=[
+        ('en-us', "English"),
+        ('en-latn-us', "Latin English"),
+        ('en-Latn-US', "BCP 47 case format"),
+    ],
+)
+
+django.setup()
+
+def test_locale_prefix_pattern():
+    pattern = LocalePrefixPattern(prefix_default_language=True)
+    
+    test_cases = [
+        ('en-us', 'en-us/test', True),
+        ('en-latn-us', 'en-latn-us/test', True),
+        ('en-Latn-US', 'en-Latn-US/test', True),
+    ]
+    
+    print("Testing LocalePrefixPattern matching:")
+    print("=" * 50)
+    
+    all_passed = True
+    
+    for lang_code, test_path, expected in test_cases:
+        # Set the language
+        activate(lang_code)
+        
+        # Test the match
+        result = pattern.match(test_path)
+        match_success = result is not None
+        
+        status = "✓" if match_success == expected else "✗"
+        print(f"{status} Language: {lang_code}")
+        print(f"   Test path: '{test_path}'")
+        print(f"   Language prefix: '{pattern.language_prefix}'")
+        print(f"   Expected match: {expected}")
+        print(f"   Actual match: {match_success}")
+        
+        if match_success != expected:
+            all_passed = False
+            print("   ❌ FAIL")
+        else:
+            print("   ✅ PASS")
+        print()
+    
+    return all_passed
+
+if __name__ == '__main__':
+    success = test_locale_prefix_pattern()
+    if success:
+        print("🎉 All tests passed!")
+        sys.exit(0)
+    else:
+        print("💥 Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_regex.py b/test_regex.py
new file mode 100644
index 0000000000..b3841d175a
--- /dev/null
+++ b/test_regex.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+import re
+
+# Updated regex pattern
+language_code_prefix_re = re.compile(r'^/([a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?)(/|$)', re.IGNORECASE)
+
+# Test cases
+test_cases = [
+    '/en-us/',
+    '/en-latn-us/',
+    '/en-Latn-US/',
+    '/en-latn/',
+    '/en/',
+]
+
+print("Testing updated language_code_prefix_re pattern:")
+print("=" * 50)
+
+for test_path in test_cases:
+    match = language_code_prefix_re.match(test_path)
+    if match:
+        print(f"✓ '{test_path}' -> '{match.group(1)}'")
+    else:
+        print(f"✗ '{test_path}' -> No match")
+
+print("\nThe updated regex should now handle complex language codes properly!")
\ No newline at end of file
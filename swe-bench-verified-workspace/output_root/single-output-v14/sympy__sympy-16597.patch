diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..29b6a74e7f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,6 @@
+from sympy import Symbol
+
+# Reproduce the issue
+m = Symbol('m', even=True)
+print(f"m.is_finite: {m.is_finite}")
+print(f"m.is_even: {m.is_even}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..2d0aecb44a
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,21 @@
+from sympy import Symbol
+
+# Test the main fix
+print("Testing the main fix:")
+m = Symbol('m', even=True)
+print(f"m (even=True): is_finite={m.is_finite}, is_even={m.is_even}")
+
+# Test that odd numbers don't automatically imply finite
+print("\nTesting that odd numbers don't imply finite:")
+n = Symbol('n', odd=True)
+print(f"n (odd=True): is_finite={n.is_finite}, is_odd={n.is_odd}")
+
+# Test that integer numbers don't automatically imply finite
+print("\nTesting that integer numbers don't imply finite:")
+k = Symbol('k', integer=True)
+print(f"k (integer=True): is_finite={k.is_finite}, is_integer={k.is_integer}")
+
+# Test that the rule doesn't affect symbols without assumptions
+print("\nTesting symbols without assumptions:")
+x = Symbol('x')
+print(f"x (no assumptions): is_finite={x.is_finite}, is_even={x.is_even}")
\ No newline at end of file
diff --git a/sympy/core/assumptions.py b/sympy/core/assumptions.py
index ce4dd30f2e..48b2b95312 100644
--- a/sympy/core/assumptions.py
+++ b/sympy/core/assumptions.py
@@ -174,6 +174,7 @@
 
     'odd            ==  integer & !even',
     'even           ==  integer & !odd',
+    'even           ->  finite',
 
     'real           ==  negative | zero | positive',
     'transcendental ==  complex & !algebraic',
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..ef6243b255
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,32 @@
+from sympy import Symbol
+
+# Test various edge cases
+print("Testing edge cases for even -> finite rule:")
+
+# Case 1: Even symbol
+m = Symbol('m', even=True)
+print(f"m (even=True): is_finite={m.is_finite}, is_even={m.is_even}")
+
+# Case 2: Odd symbol (should not imply finite)
+n = Symbol('n', odd=True)
+print(f"n (odd=True): is_finite={n.is_finite}, is_odd={n.is_odd}")
+
+# Case 3: Integer symbol (should not imply finite by itself)
+k = Symbol('k', integer=True)
+print(f"k (integer=True): is_finite={k.is_finite}, is_integer={k.is_integer}")
+
+# Case 4: Symbol with no assumptions
+x = Symbol('x')
+print(f"x (no assumptions): is_finite={x.is_finite}, is_even={x.is_even}")
+
+# Case 5: Even and finite explicitly set
+p = Symbol('p', even=True, finite=True)
+print(f"p (even=True, finite=True): is_finite={p.is_finite}, is_even={p.is_even}")
+
+# Case 6: Even but explicitly not finite (should this be possible?)
+# This should either raise an error or the finite=True should override
+try:
+    q = Symbol('q', even=True, finite=False)
+    print(f"q (even=True, finite=False): is_finite={q.is_finite}, is_even={q.is_even}")
+except Exception as e:
+    print(f"q (even=True, finite=False): Error - {e}")
\ No newline at end of file
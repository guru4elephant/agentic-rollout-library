diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..926316fa60
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+v1 = units.Quantity('v1')
+SI.set_quantity_dimension(v1, units.velocity)
+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)
+
+a1 = units.Quantity('a1')
+SI.set_quantity_dimension(a1, units.acceleration)
+SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)
+
+t1 = units.Quantity('t1')
+SI.set_quantity_dimension(t1, units.time)
+SI.set_quantity_scale_factor(t1, 5 * units.second)
+
+expr1 = a1*t1 + v1
+result = SI._collect_factor_and_dimension(expr1)
+print("Result:", result)
\ No newline at end of file
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5705c821c2 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):
             for addend in expr.args[1:]:
                 addend_factor, addend_dim = \
                     self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):
                     raise ValueError(
                         'Dimension of "{}" is {}, '
                         'but it should be {}'.format(
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..88cfe9608f
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,72 @@
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+print("Testing comprehensive edge cases for equivalent dimensions...")
+
+# Test 1: Original issue - acceleration*time + velocity
+print("\n1. acceleration*time + velocity (should work)")
+v1 = units.Quantity('v1')
+SI.set_quantity_dimension(v1, units.velocity)
+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)
+
+a1 = units.Quantity('a1')
+SI.set_quantity_dimension(a1, units.acceleration)
+SI.set_quantity_scale_factor(a1, 3 * units.meter / units.second**2)
+
+t1 = units.Quantity('t1')
+SI.set_quantity_dimension(t1, units.time)
+SI.set_quantity_scale_factor(t1, 4 * units.second)
+
+expr = a1*t1 + v1
+result = SI._collect_factor_and_dimension(expr)
+print(f"Result: {result}")
+
+# Test 2: Multiple terms with equivalent dimensions
+print("\n2. Multiple terms with equivalent dimensions (should work)")
+v2 = units.Quantity('v2')
+SI.set_quantity_dimension(v2, units.velocity)
+SI.set_quantity_scale_factor(v2, 5 * units.meter / units.second)
+
+expr = a1*t1 + v1 + v2
+result = SI._collect_factor_and_dimension(expr)
+print(f"Result: {result}")
+
+# Test 3: Different equivalent dimension combinations
+print("\n3. Force*length + energy (should work)")
+f1 = units.Quantity('f1')
+SI.set_quantity_dimension(f1, units.force)
+SI.set_quantity_scale_factor(f1, 2 * units.newton)
+
+l1 = units.Quantity('l1')
+SI.set_quantity_dimension(l1, units.length)
+SI.set_quantity_scale_factor(l1, 3 * units.meter)
+
+e1 = units.Quantity('e1')
+SI.set_quantity_dimension(e1, units.energy)
+SI.set_quantity_scale_factor(e1, 4 * units.joule)
+
+expr = f1*l1 + e1
+result = SI._collect_factor_and_dimension(expr)
+print(f"Result: {result}")
+
+# Test 4: Still should fail for incompatible dimensions
+print("\n4. Length + time (should fail)")
+try:
+    expr = l1 + t1
+    result = SI._collect_factor_and_dimension(expr)
+    print(f"Unexpected success: {result}")
+except ValueError as e:
+    print(f"Expected error: {e}")
+
+# Test 5: Complex expression with equivalent dimensions
+print("\n5. Complex expression with equivalent dimensions (should work)")
+# Use velocity + velocity (definitely equivalent)
+v3 = units.Quantity('v3')
+SI.set_quantity_dimension(v3, units.velocity)
+SI.set_quantity_scale_factor(v3, 1 * units.meter / units.second)
+
+expr = a1*t1 + v1 + v3  # acceleration*time + velocity + velocity
+result = SI._collect_factor_and_dimension(expr)
+print(f"Result: {result}")
+
+print("\nAll comprehensive tests completed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..ad5c95db21
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,59 @@
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+# Test case 1: Original issue - acceleration*time + velocity
+print("Test 1: acceleration*time + velocity")
+v1 = units.Quantity('v1')
+SI.set_quantity_dimension(v1, units.velocity)
+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)
+
+a1 = units.Quantity('a1')
+SI.set_quantity_dimension(a1, units.acceleration)
+SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)
+
+t1 = units.Quantity('t1')
+SI.set_quantity_dimension(t1, units.time)
+SI.set_quantity_scale_factor(t1, 5 * units.second)
+
+expr1 = a1*t1 + v1
+result1 = SI._collect_factor_and_dimension(expr1)
+print("Result:", result1)
+
+# Test case 2: Force*length + energy (should work since both have same dimension)
+print("\nTest 2: force*length + energy")
+f1 = units.Quantity('f1')
+SI.set_quantity_dimension(f1, units.force)
+SI.set_quantity_scale_factor(f1, 10 * units.newton)
+
+l1 = units.Quantity('l1')
+SI.set_quantity_dimension(l1, units.length)
+SI.set_quantity_scale_factor(l1, 2 * units.meter)
+
+e1 = units.Quantity('e1')
+SI.set_quantity_dimension(e1, units.energy)
+SI.set_quantity_scale_factor(e1, 5 * units.joule)
+
+expr2 = f1*l1 + e1
+result2 = SI._collect_factor_and_dimension(expr2)
+print("Result:", result2)
+
+# Test case 3: Different dimensions (should still raise error)
+print("\nTest 3: length + time (should fail)")
+try:
+    expr3 = l1 + t1
+    result3 = SI._collect_factor_and_dimension(expr3)
+    print("Result:", result3)
+except ValueError as e:
+    print("Expected error:", e)
+
+# Test case 4: Multiple additions with equivalent dimensions
+print("\nTest 4: Multiple additions with equivalent dimensions")
+v2 = units.Quantity('v2')
+SI.set_quantity_dimension(v2, units.velocity)
+SI.set_quantity_scale_factor(v2, 3 * units.meter / units.second)
+
+expr4 = a1*t1 + v1 + v2
+result4 = SI._collect_factor_and_dimension(expr4)
+print("Result:", result4)
+
+print("\nAll tests completed!")
\ No newline at end of file
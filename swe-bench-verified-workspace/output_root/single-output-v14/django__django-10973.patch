diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..e2c8b67210 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -34,38 +34,19 @@ class DatabaseClient(BaseDatabaseClient):
             args += ['-p', str(port)]
         args += [dbname]
 
-        temp_pgpass = None
+        env = os.environ.copy()
+        if passwd:
+            # Set PGPASSWORD environment variable
+            env['PGPASSWORD'] = passwd
+
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
-            if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            subprocess.run(args, env=env)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
 
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5535838a79
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+"""
+Script to test the new PostgreSQL client implementation using subprocess.run and PGPASSWORD.
+"""
+
+import os
+import sys
+import subprocess
+from django.db.backends.postgresql.client import DatabaseClient
+
+def test_new_implementation():
+    """Test the new implementation with mock connection parameters"""
+    print("Testing new PostgreSQL client implementation...")
+    print("Using subprocess.run and PGPASSWORD environment variable")
+    
+    # Mock connection parameters
+    conn_params = {
+        'host': 'localhost',
+        'port': '5432',
+        'database': 'testdb',
+        'user': 'testuser',
+        'password': 'testpass'
+    }
+    
+    try:
+        # This should use the new implementation with PGPASSWORD
+        DatabaseClient.runshell_db(conn_params)
+        print("New implementation works")
+    except subprocess.CalledProcessError as e:
+        print(f"New implementation failed with CalledProcessError: {e}")
+        print("This is expected since we don't have a real PostgreSQL server running")
+        print("The process was called but failed to connect (which is normal)")
+    except FileNotFoundError as e:
+        print(f"New implementation failed with FileNotFoundError: {e}")
+        print("This means psql is not installed on the system")
+    except Exception as e:
+        print(f"New implementation failed with unexpected error: {e}")
+        print(f"Error type: {type(e).__name__}")
+
+def test_subprocess_run_availability():
+    """Verify that subprocess.run is available (Python 3.5+)"""
+    print("\nTesting subprocess.run availability...")
+    if hasattr(subprocess, 'run'):
+        print("✓ subprocess.run is available (Python 3.5+)")
+        return True
+    else:
+        print("✗ subprocess.run is not available")
+        return False
+
+if __name__ == "__main__":
+    # Add Django to path if needed
+    sys.path.insert(0, '.')
+    
+    # Set Django settings if required
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+    
+    if test_subprocess_run_availability():
+        test_new_implementation()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..e3bb5033c9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the new PostgreSQL client implementation.
+"""
+
+import os
+import sys
+import subprocess
+from django.db.backends.postgresql.client import DatabaseClient
+
+def test_no_password():
+    """Test with no password provided"""
+    print("Testing with no password...")
+    conn_params = {
+        'host': 'localhost',
+        'port': '5432',
+        'database': 'testdb',
+        'user': 'testuser',
+        'password': ''  # Empty password
+    }
+    
+    try:
+        DatabaseClient.runshell_db(conn_params)
+        print("✓ No password case handled correctly")
+    except subprocess.CalledProcessError:
+        print("✓ No password case handled correctly (process called but failed to connect)")
+    except FileNotFoundError:
+        print("✓ No password case handled correctly (psql not installed)")
+    except Exception as e:
+        print(f"✗ Unexpected error in no password case: {e}")
+
+def test_none_password():
+    """Test with None password"""
+    print("Testing with None password...")
+    conn_params = {
+        'host': 'localhost',
+        'port': '5432',
+        'database': 'testdb',
+        'user': 'testuser',
+        'password': None  # None password
+    }
+    
+    try:
+        DatabaseClient.runshell_db(conn_params)
+        print("✓ None password case handled correctly")
+    except subprocess.CalledProcessError:
+        print("✓ None password case handled correctly (process called but failed to connect)")
+    except FileNotFoundError:
+        print("✓ None password case handled correctly (psql not installed)")
+    except Exception as e:
+        print(f"✗ Unexpected error in None password case: {e}")
+
+def test_with_password():
+    """Test with actual password"""
+    print("Testing with actual password...")
+    conn_params = {
+        'host': 'localhost',
+        'port': '5432',
+        'database': 'testdb',
+        'user': 'testuser',
+        'password': 'mypassword123'  # Actual password
+    }
+    
+    try:
+        DatabaseClient.runshell_db(conn_params)
+        print("✓ Password case handled correctly")
+    except subprocess.CalledProcessError:
+        print("✓ Password case handled correctly (process called but failed to connect)")
+    except FileNotFoundError:
+        print("✓ Password case handled correctly (psql not installed)")
+    except Exception as e:
+        print(f"✗ Unexpected error in password case: {e}")
+
+def test_missing_params():
+    """Test with missing connection parameters"""
+    print("Testing with missing parameters...")
+    conn_params = {
+        'host': '',      # Empty host
+        'port': '',      # Empty port
+        'database': '',  # Empty database
+        'user': '',      # Empty user
+        'password': ''   # Empty password
+    }
+    
+    try:
+        DatabaseClient.runshell_db(conn_params)
+        print("✓ Missing parameters case handled correctly")
+    except subprocess.CalledProcessError:
+        print("✓ Missing parameters case handled correctly (process called but failed to connect)")
+    except FileNotFoundError:
+        print("✓ Missing parameters case handled correctly (psql not installed)")
+    except Exception as e:
+        print(f"✗ Unexpected error in missing parameters case: {e}")
+
+if __name__ == "__main__":
+    # Add Django to path if needed
+    sys.path.insert(0, '.')
+    
+    # Set Django settings if required
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+    
+    test_no_password()
+    test_none_password()
+    test_with_password()
+    test_missing_params()
\ No newline at end of file
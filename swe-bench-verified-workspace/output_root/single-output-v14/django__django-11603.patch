diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928aa..3effaa7533 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -99,6 +99,7 @@ class Aggregate(Func):
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
     name = 'Avg'
+    allow_distinct = True
 
 
 class Count(Aggregate):
@@ -121,11 +122,13 @@ class Count(Aggregate):
 class Max(Aggregate):
     function = 'MAX'
     name = 'Max'
+    allow_distinct = True
 
 
 class Min(Aggregate):
     function = 'MIN'
     name = 'Min'
+    allow_distinct = True
 
 
 class StdDev(NumericOutputFieldMixin, Aggregate):
@@ -142,6 +145,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):
 class Sum(FixDurationInputMixin, Aggregate):
     function = 'SUM'
     name = 'Sum'
+    allow_distinct = True
 
 
 class Variance(NumericOutputFieldMixin, Aggregate):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cc68aac5db
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the DISTINCT support issue for Avg and Sum aggregates.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Avg, Sum, Count
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+def test_distinct_aggregates():
+    """Test that Avg and Sum support DISTINCT parameter"""
+    print("Testing DISTINCT support for aggregates...")
+    
+    # Test Count (should work - already has allow_distinct=True)
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_count=Count('value', distinct=True)
+        )
+        print("✓ Count with distinct=True works")
+    except Exception as e:
+        print(f"✗ Count with distinct=True failed: {e}")
+    
+    # Test Avg (should fail currently)
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_avg=Avg('value', distinct=True)
+        )
+        print("✓ Avg with distinct=True works")
+    except Exception as e:
+        print(f"✗ Avg with distinct=True failed: {e}")
+    
+    # Test Sum (should fail currently)
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_sum=Sum('value', distinct=True)
+        )
+        print("✓ Sum with distinct=True works")
+    except Exception as e:
+        print(f"✗ Sum with distinct=True failed: {e}")
+
+if __name__ == '__main__':
+    test_distinct_aggregates()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..115af0d00e
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify DISTINCT support for aggregates.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Avg, Sum, Count, Min, Max
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+def test_distinct_parameter_accepted():
+    """Test that aggregates accept the distinct parameter without error"""
+    print("Testing that aggregates accept distinct parameter...")
+    
+    # Test that we can create aggregate instances with distinct=True
+    # without getting "does not allow distinct" errors
+    
+    try:
+        avg = Avg('value', distinct=True)
+        print("✓ Avg accepts distinct parameter")
+    except Exception as e:
+        print(f"✗ Avg failed to accept distinct parameter: {e}")
+    
+    try:
+        sum = Sum('value', distinct=True)
+        print("✓ Sum accepts distinct parameter")
+    except Exception as e:
+        print(f"✗ Sum failed to accept distinct parameter: {e}")
+    
+    try:
+        min = Min('value', distinct=True)
+        print("✓ Min accepts distinct parameter")
+    except Exception as e:
+        print(f"✗ Min failed to accept distinct parameter: {e}")
+    
+    try:
+        max = Max('value', distinct=True)
+        print("✓ Max accepts distinct parameter")
+    except Exception as e:
+        print(f"✗ Max failed to accept distinct parameter: {e}")
+    
+    try:
+        count = Count('value', distinct=True)
+        print("✓ Count accepts distinct parameter")
+    except Exception as e:
+        print(f"✗ Count failed to accept distinct parameter: {e}")
+
+if __name__ == '__main__':
+    test_distinct_parameter_accepted()
\ No newline at end of file
diff --git a/test_with_db.py b/test_with_db.py
new file mode 100644
index 0000000000..2d463b97c3
--- /dev/null
+++ b/test_with_db.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+"""
+Script to test DISTINCT support for aggregates with a proper database setup.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'test_db.sqlite3',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Avg, Sum, Count, Min, Max
+from django.db import connection
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+def setup_database():
+    """Create the database tables and insert test data"""
+    from django.core.management.color import no_style
+    from django.db import connection
+    
+    # Create tables
+    style = no_style()
+    sql = connection.ops.sql_table_creation_suffix()
+    tables = connection.introspection.django_table_names()
+    seen_models = connection.introspection.installed_models(tables)
+    
+    # Create table for our test model
+    sqls = connection.ops.create_model_sql(TestModel, style)
+    for sql in sqls:
+        connection.cursor().execute(sql)
+    
+    # Insert test data
+    TestModel.objects.create(name='test1', value=10)
+    TestModel.objects.create(name='test2', value=10)  # Duplicate value
+    TestModel.objects.create(name='test3', value=20)
+    TestModel.objects.create(name='test4', value=20)  # Duplicate value
+    TestModel.objects.create(name='test5', value=30)
+
+def test_distinct_aggregates():
+    """Test that Avg and Sum support DISTINCT parameter"""
+    print("Testing DISTINCT support for aggregates...")
+    
+    # Test Count
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_count=Count('value', distinct=True)
+        )
+        print(f"✓ Count with distinct=True works: {result}")
+    except Exception as e:
+        print(f"✗ Count with distinct=True failed: {e}")
+    
+    # Test Avg
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_avg=Avg('value', distinct=True)
+        )
+        print(f"✓ Avg with distinct=True works: {result}")
+    except Exception as e:
+        print(f"✗ Avg with distinct=True failed: {e}")
+    
+    # Test Sum
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_sum=Sum('value', distinct=True)
+        )
+        print(f"✓ Sum with distinct=True works: {result}")
+    except Exception as e:
+        print(f"✗ Sum with distinct=True failed: {e}")
+    
+    # Test Min (pointless but should work)
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_min=Min('value', distinct=True)
+        )
+        print(f"✓ Min with distinct=True works: {result}")
+    except Exception as e:
+        print(f"✗ Min with distinct=True failed: {e}")
+    
+    # Test Max (pointless but should work)
+    try:
+        result = TestModel.objects.aggregate(
+            distinct_max=Max('value', distinct=True)
+        )
+        print(f"✓ Max with distinct=True works: {result}")
+    except Exception as e:
+        print(f"✗ Max with distinct=True failed: {e}")
+
+def cleanup():
+    """Clean up the test database"""
+    if os.path.exists('test_db.sqlite3'):
+        os.remove('test_db.sqlite3')
+
+if __name__ == '__main__':
+    try:
+        setup_database()
+        test_distinct_aggregates()
+        cleanup()
+        print("\nAll tests completed successfully!")
+    except Exception as e:
+        print(f"Test failed: {e}")
+        cleanup()
\ No newline at end of file
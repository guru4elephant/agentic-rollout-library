diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..4bddfd0581
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Case, When, Q, Value, BooleanField
+
+# Create a simple model
+class User(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the issue step by step
+print("Testing ~Q(pk__in=[])...")
+empty_q = ~Q(pk__in=[])
+print("Empty Q object:", empty_q)
+print("Bool of empty Q:", bool(empty_q))
+print("Children of empty Q:", empty_q.children)
+
+# Test what happens when we resolve it
+from django.db import connection
+
+# Create a query
+query = User.objects.all().query
+
+print("\nTesting resolution of empty Q:")
+try:
+    resolved_clause = empty_q.resolve_expression(query)
+    print("Resolved clause:", resolved_clause)
+    print("Resolved clause type:", type(resolved_clause))
+    print("Resolved clause children:", resolved_clause.children)
+    
+    # Now compile the resolved clause
+    compiler = query.get_compiler(connection=connection)
+    sql, params = compiler.compile(resolved_clause)
+    print("Compiled SQL:", repr(sql))
+    print("Compiled params:", params)
+except Exception as e:
+    print("Resolution error:", e)
+    import traceback
+    traceback.print_exc()
+
+# Test the When clause directly
+print("\nTesting When clause with empty Q:")
+when_clause = When(~Q(pk__in=[]), then=Value(True))
+try:
+    sql, params = compiler.compile(when_clause)
+    print("When clause SQL:", repr(sql))
+    print("When clause params:", params)
+except Exception as e:
+    print("When clause error:", e)
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e80bad88e7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Case, When, Q, Value, BooleanField
+
+# Create a simple model
+class User(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the issue
+try:
+    print("Testing Case() with ~Q(pk__in=[])...")
+    queryset = User.objects.annotate(
+        _a=Case(
+            When(~Q(pk__in=[]), then=Value(True)),
+            default=Value(False),
+            output_field=BooleanField(),
+        )
+    ).order_by("-_a").values("pk")
+    
+    # This should trigger the SQL generation
+    sql = str(queryset.query)
+    print("Generated SQL:", sql)
+    
+except Exception as e:
+    print("Error:", e)
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
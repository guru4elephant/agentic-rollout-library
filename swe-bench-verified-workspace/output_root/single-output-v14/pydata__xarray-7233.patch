diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..fcf1fd78
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,22 @@
+import numpy as np
+import xarray as xr
+
+# Reproduce the issue from the GitHub issue
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da)
+ds = da.to_dataset(name="T")
+
+print("Original dataset:")
+print(ds)
+print("\nCoordinates before coarsen.construct:")
+print(ds.coords)
+
+print("\nAfter coarsen.construct:")
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+print(result)
+print("\nCoordinates after coarsen.construct:")
+print(result.coords)
+
+# Check if 'day' is still a coordinate
+print(f"\nIs 'day' still a coordinate? {'day' in result.coords}")
+print(f"Is 'day' a data variable? {'day' in result.data_vars}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..8643eb14
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,68 @@
+import numpy as np
+import xarray as xr
+
+def test_coarsen_construct_preserves_all_coordinates():
+    """Test that coarsen.construct preserves all coordinates, including non-dimensional ones."""
+    
+    # Test case 1: Multiple non-dimensional coordinates
+    print("Test 1: Multiple non-dimensional coordinates")
+    da = xr.DataArray(np.arange(24), dims=["time"])
+    da = da.assign_coords(
+        day_of_year=365 * da,
+        month_num=da % 12 + 1,
+        year_num=2000 + da // 12
+    )
+    ds = da.to_dataset(name="T")
+    
+    print("Original coordinates:", list(ds.coords.keys()))
+    result = ds.coarsen(time=12).construct(time=("year", "month"))
+    print("After coarsen.construct coordinates:", list(result.coords.keys()))
+    
+    # All original coordinates should be preserved
+    assert 'day_of_year' in result.coords
+    assert 'month_num' in result.coords  
+    assert 'year_num' in result.coords
+    assert 'day_of_year' not in result.data_vars
+    assert 'month_num' not in result.data_vars
+    assert 'year_num' not in result.data_vars
+    print("✓ Test 1 passed\n")
+    
+    # Test case 2: DataArray with non-dimensional coordinates
+    print("Test 2: DataArray with non-dimensional coordinates")
+    da = xr.DataArray(np.arange(24), dims=["time"])
+    da = da.assign_coords(day=365 * da)
+    
+    print("Original coordinates:", list(da.coords.keys()))
+    result = da.coarsen(time=12).construct(time=("year", "month"))
+    print("After coarsen.construct coordinates:", list(result.coords.keys()))
+    
+    assert 'day' in result.coords
+    # For DataArray, we can't check data_vars directly, but we can verify it's not in the dataset representation
+    ds_result = result._to_temp_dataset()
+    assert 'day' not in ds_result.data_vars
+    print("✓ Test 2 passed\n")
+    
+    # Test case 3: Mixed dimensional and non-dimensional coordinates
+    print("Test 3: Mixed dimensional and non-dimensional coordinates")
+    da = xr.DataArray(np.arange(24), dims=["time"])
+    da = da.assign_coords(
+        time=da * 3600,  # dimensional coordinate
+        day=365 * da     # non-dimensional coordinate
+    )
+    ds = da.to_dataset(name="T")
+    
+    print("Original coordinates:", list(ds.coords.keys()))
+    result = ds.coarsen(time=12).construct(time=("year", "month"))
+    print("After coarsen.construct coordinates:", list(result.coords.keys()))
+    
+    # Both should be preserved as coordinates
+    assert 'time' in result.coords
+    assert 'day' in result.coords
+    assert 'time' not in result.data_vars
+    assert 'day' not in result.data_vars
+    print("✓ Test 3 passed\n")
+    
+    print("All edge case tests passed!")
+
+if __name__ == "__main__":
+    test_coarsen_construct_preserves_all_coordinates()
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index c194ec08..64740760 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -973,7 +973,8 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             else:
                 reshaped[key] = var
 
-        should_be_coords = set(window_dim) & set(self.obj.coords)
+        # Preserve all original coordinates, not just those related to coarsening dimensions
+        should_be_coords = set(self.obj.coords)
         result = reshaped.set_coords(should_be_coords)
         if isinstance(self.obj, DataArray):
             return self.obj._from_temp_dataset(result)
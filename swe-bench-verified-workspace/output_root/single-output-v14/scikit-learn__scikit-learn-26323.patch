diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..52bfbcb78
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+import pandas as pd
+from sklearn.compose import make_column_selector, make_column_transformer
+from sklearn.feature_selection import VarianceThreshold
+
+df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+out1 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder=VarianceThreshold(),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("out1 (with remainder):")
+print(out1)
+
+out2 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("\nout2 (without remainder):")
+print(out2)
\ No newline at end of file
diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..74e8ad88c 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -303,6 +303,12 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
         for trans in transformers:
             _safe_set_output(trans, transform=transform)
 
+        # Handle remainder estimator if it exists and is not a string
+        if (hasattr(self, 'remainder') and 
+            not isinstance(self.remainder, str) and 
+            self.remainder not in {"passthrough", "drop"}):
+            _safe_set_output(self.remainder, transform=transform)
+
         return self
 
     def get_params(self, deep=True):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..8296843d5
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+import pandas as pd
+import numpy as np
+from sklearn.compose import make_column_selector, make_column_transformer
+from sklearn.feature_selection import VarianceThreshold
+from sklearn.preprocessing import StandardScaler
+
+# Test case 1: remainder as 'drop' (should not affect anything)
+print("Test 1: remainder='drop'")
+df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+out1 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder="drop",
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print(out1)
+
+# Test case 2: remainder as 'passthrough' (should not affect anything)
+print("\nTest 2: remainder='passthrough'")
+out2 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder="passthrough",
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print(out2)
+
+# Test case 3: remainder as a different estimator
+print("\nTest 3: remainder as StandardScaler")
+out3 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder=StandardScaler(),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print(out3)
+
+# Test case 4: Multiple transformers with remainder
+print("\nTest 4: Multiple transformers with remainder")
+df2 = pd.DataFrame({
+    "bool_col": [True, False, True],
+    "int_col": [1, 2, 3], 
+    "float_col": [1.1, 2.2, 3.3]
+})
+out4 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    (StandardScaler(), make_column_selector(dtype_include=int)),
+    remainder=VarianceThreshold(),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df2)
+print(out4)
\ No newline at end of file
diff --git a/test_remainder_set_output.py b/test_remainder_set_output.py
new file mode 100644
index 000000000..fb86d0088
--- /dev/null
+++ b/test_remainder_set_output.py
@@ -0,0 +1,31 @@
+import pandas as pd
+from sklearn.compose import make_column_selector, make_column_transformer
+from sklearn.feature_selection import VarianceThreshold
+from sklearn.preprocessing import StandardScaler
+from sklearn.utils._set_output import _get_output_config
+
+# Test that set_output is properly applied to remainder estimator
+df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+
+# Create a transformer with remainder as an estimator
+ct = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder=VarianceThreshold(),
+    verbose_feature_names_out=False,
+)
+
+# Check that remainder is not yet set to pandas output
+print("Before set_output:")
+print("Reminder estimator output config:", _get_output_config("transform", ct.remainder))
+
+# Apply set_output
+ct.set_output(transform="pandas")
+
+print("\nAfter set_output:")
+print("Reminder estimator output config:", _get_output_config("transform", ct.remainder))
+
+# Fit and transform
+result = ct.fit_transform(df)
+print("\nTransformed result:")
+print(result)
+print("Type:", type(result))
\ No newline at end of file
diff --git a/test_set_output_after_fit.py b/test_set_output_after_fit.py
new file mode 100644
index 000000000..19488502d
--- /dev/null
+++ b/test_set_output_after_fit.py
@@ -0,0 +1,24 @@
+import pandas as pd
+from sklearn.compose import make_column_selector, make_column_transformer
+from sklearn.feature_selection import VarianceThreshold
+
+df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+
+# Create and fit transformer first
+ct = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder=VarianceThreshold(),
+    verbose_feature_names_out=False,
+)
+
+# Fit first
+ct.fit(df)
+
+# Then apply set_output
+ct.set_output(transform="pandas")
+
+# Transform
+result = ct.transform(df)
+print("Result after set_output called after fitting:")
+print(result)
+print("Type:", type(result))
\ No newline at end of file
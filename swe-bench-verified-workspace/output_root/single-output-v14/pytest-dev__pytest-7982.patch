diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..f476a0cc5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+import os
+import tempfile
+import shutil
+import subprocess
+import sys
+
+def test_symlink_collection():
+    """Test that pytest collects tests from symlinked directories within a test directory."""
+    
+    # Create a temporary directory structure
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Create a main test directory
+        main_test_dir = os.path.join(tmpdir, "main_tests")
+        os.makedirs(main_test_dir)
+        
+        # Create a test directory with a test file
+        test_dir = os.path.join(tmpdir, "test_package")
+        os.makedirs(test_dir)
+        
+        test_file = os.path.join(test_dir, "test_example.py")
+        with open(test_file, "w") as f:
+            f.write("def test_symlink():\n    assert True\n")
+        
+        # Create a symlink to the test directory INSIDE the main test directory
+        symlink_dir = os.path.join(main_test_dir, "symlink_to_tests")
+        os.symlink(test_dir, symlink_dir)
+        
+        # Also create a regular test file in the main directory
+        regular_test = os.path.join(main_test_dir, "test_regular.py")
+        with open(regular_test, "w") as f:
+            f.write("def test_regular():\n    assert True\n")
+        
+        # Run pytest on the main test directory (which contains the symlink)
+        result = subprocess.run([
+            sys.executable, "-m", "pytest", 
+            main_test_dir, 
+            "--collect-only", 
+            "-v"
+        ], capture_output=True, text=True)
+        
+        print("STDOUT:")
+        print(result.stdout)
+        print("STDERR:")
+        print(result.stderr)
+        print("Return code:", result.returncode)
+        
+        # Check if both tests were collected
+        if ("test_regular.py" in result.stdout and "test_regular" in result.stdout and
+            "test_example.py" in result.stdout and "test_symlink" in result.stdout):
+            print("SUCCESS: Both regular tests and symlinked directory tests were collected")
+            return True
+        else:
+            print("FAILURE: Symlinked directory was not collected from within test directory")
+            print("Expected to see both test_regular and test_symlink in output")
+            return False
+
+if __name__ == "__main__":
+    success = test_symlink_collection()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index f0bdb1481..64c7fec6f 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -558,7 +558,7 @@ def visit(
     entries = sorted(os.scandir(path), key=lambda entry: entry.name)
     yield from entries
     for entry in entries:
-        if entry.is_dir(follow_symlinks=False) and recurse(entry):
+        if entry.is_dir(follow_symlinks=True) and recurse(entry):
             yield from visit(entry.path, recurse)
 
 
diff --git a/test_broken_symlink.py b/test_broken_symlink.py
new file mode 100644
index 000000000..e6a402508
--- /dev/null
+++ b/test_broken_symlink.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_broken_symlink():
+    """Test that broken symlinks are handled gracefully."""
+    
+    # Create a temporary directory structure
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Create a main test directory
+        main_test_dir = os.path.join(tmpdir, "main_tests")
+        os.makedirs(main_test_dir)
+        
+        # Create a broken symlink (points to non-existent directory)
+        broken_symlink = os.path.join(main_test_dir, "broken_symlink")
+        os.symlink("/non/existent/path", broken_symlink)
+        
+        # Also create a regular test file in the main directory
+        regular_test = os.path.join(main_test_dir, "test_regular.py")
+        with open(regular_test, "w") as f:
+            f.write("def test_regular():\n    assert True\n")
+        
+        # Run pytest on the main test directory
+        result = subprocess.run([
+            sys.executable, "-m", "pytest", 
+            main_test_dir, 
+            "--collect-only", 
+            "-v"
+        ], capture_output=True, text=True)
+        
+        print("STDOUT:")
+        print(result.stdout)
+        print("STDERR:")
+        print(result.stderr)
+        print("Return code:", result.returncode)
+        
+        # Check if the regular test was collected and no errors occurred
+        if ("test_regular.py" in result.stdout and "test_regular" in result.stdout and
+            result.returncode == 0):
+            print("SUCCESS: Regular test collected and broken symlink handled gracefully")
+            return True
+        else:
+            print("FAILURE: Issue with broken symlink handling")
+            return False
+
+if __name__ == "__main__":
+    success = test_broken_symlink()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..3b435db1d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+import os
+import tempfile
+import subprocess
+import sys
+
+def test_symlink_edge_cases():
+    """Test edge cases for symlink collection."""
+    
+    # Create a temporary directory structure
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Create nested test directories
+        nested_dir = os.path.join(tmpdir, "nested_tests")
+        os.makedirs(nested_dir)
+        
+        # Create test files in nested directory
+        test_file1 = os.path.join(nested_dir, "test_nested1.py")
+        with open(test_file1, "w") as f:
+            f.write("def test_nested1():\n    assert True\n")
+        
+        test_file2 = os.path.join(nested_dir, "test_nested2.py")
+        with open(test_file2, "w") as f:
+            f.write("def test_nested2():\n    assert True\n")
+        
+        # Create a main test directory
+        main_test_dir = os.path.join(tmpdir, "main_tests")
+        os.makedirs(main_test_dir)
+        
+        # Create symlink to nested directory
+        symlink_dir = os.path.join(main_test_dir, "symlink_to_nested")
+        os.symlink(nested_dir, symlink_dir)
+        
+        # Also create a regular test file in the main directory
+        regular_test = os.path.join(main_test_dir, "test_regular.py")
+        with open(regular_test, "w") as f:
+            f.write("def test_regular():\n    assert True\n")
+        
+        # Run pytest on the main test directory
+        result = subprocess.run([
+            sys.executable, "-m", "pytest", 
+            main_test_dir, 
+            "--collect-only", 
+            "-v"
+        ], capture_output=True, text=True)
+        
+        print("STDOUT:")
+        print(result.stdout)
+        print("STDERR:")
+        print(result.stderr)
+        print("Return code:", result.returncode)
+        
+        # Check if all tests were collected
+        expected_tests = [
+            "test_regular.py",
+            "test_regular",
+            "test_nested1.py", 
+            "test_nested1",
+            "test_nested2.py",
+            "test_nested2"
+        ]
+        
+        all_collected = all(test in result.stdout for test in expected_tests)
+        
+        if all_collected:
+            print("SUCCESS: All tests including nested symlinked tests were collected")
+            return True
+        else:
+            print("FAILURE: Not all tests were collected")
+            missing = [test for test in expected_tests if test not in result.stdout]
+            print(f"Missing tests: {missing}")
+            return False
+
+if __name__ == "__main__":
+    success = test_symlink_edge_cases()
+    sys.exit(0 if success else 1)
\ No newline at end of file
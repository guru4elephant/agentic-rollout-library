diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index fef5532e58..806fc9be2c 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -147,6 +147,38 @@ class ServerHandler(simple_server.ServerHandler):
         self.get_stdin().read()
         super().close()
 
+    def finish_response(self):
+        """Send any iterable data, then close self and the iterable
+
+        For HEAD requests, skip sending the response body while preserving headers.
+        """
+        # Check if this is a HEAD request
+        if self.environ.get("REQUEST_METHOD") == "HEAD":
+            # For HEAD requests, we should not send the response body
+            # but we need to consume the iterable to ensure proper cleanup
+            try:
+                # Consume the result without writing it to the response
+                if hasattr(self.result, '__iter__') and not self.result_is_file():
+                    # Consume the iterator for HEAD requests
+                    for _ in self.result:
+                        pass
+                # Set up headers and status properly
+                self.finish_content()
+            except:
+                # Call close() on the iterable returned by the WSGI application
+                # in case of an exception.
+                if hasattr(self.result, 'close'):
+                    self.result.close()
+                raise
+            else:
+                # We only call close() when no exception is raised, because it
+                # will set status, result, headers, and environ fields to None.
+                # See bpo-29183 for more details.
+                self.close()
+        else:
+            # For non-HEAD requests, use the original behavior
+            super().finish_response()
+
 
 class WSGIRequestHandler(simple_server.WSGIRequestHandler):
     protocol_version = "HTTP/1.1"
diff --git a/mytestproject/db.sqlite3 b/mytestproject/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/mytestproject/manage.py b/mytestproject/manage.py
new file mode 100755
index 0000000000..02c21c27d6
--- /dev/null
+++ b/mytestproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mytestproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/mytestproject/mytestproject/__init__.py b/mytestproject/mytestproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/mytestproject/mytestproject/asgi.py b/mytestproject/mytestproject/asgi.py
new file mode 100644
index 0000000000..4b18c9d154
--- /dev/null
+++ b/mytestproject/mytestproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for mytestproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mytestproject.settings")
+
+application = get_asgi_application()
diff --git a/mytestproject/mytestproject/settings.py b/mytestproject/mytestproject/settings.py
new file mode 100644
index 0000000000..6ee2cfa3ed
--- /dev/null
+++ b/mytestproject/mytestproject/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for mytestproject project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230126185448.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-+@+_tg@wa)rube12!$-e7tclwtk3_vh(2#^i)yfpw8%47qmj-h"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "mytestproject.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "mytestproject.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/mytestproject/mytestproject/urls.py b/mytestproject/mytestproject/urls.py
new file mode 100644
index 0000000000..e850a5e514
--- /dev/null
+++ b/mytestproject/mytestproject/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for mytestproject project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/mytestproject/mytestproject/wsgi.py b/mytestproject/mytestproject/wsgi.py
new file mode 100644
index 0000000000..f65e97e83d
--- /dev/null
+++ b/mytestproject/mytestproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for mytestproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mytestproject.settings")
+
+application = get_wsgi_application()
diff --git a/mytestproject/server.log b/mytestproject/server.log
new file mode 100644
index 0000000000..191dcd7af6
--- /dev/null
+++ b/mytestproject/server.log
@@ -0,0 +1,4 @@
+Watching for file changes with StatReloader
+[08/Oct/2025 14:55:51] "POST / HTTP/1.1" 200 10731
+[08/Oct/2025 14:55:51] "PUT / HTTP/1.1" 200 10731
+[08/Oct/2025 14:55:51] "DELETE / HTTP/1.1" 200 10731
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..be5089e917
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,153 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the HEAD request issue with Django runserver.
+This script will start a test Django project and make HEAD requests to it.
+"""
+
+import os
+import sys
+import subprocess
+import time
+import requests
+import threading
+
+def create_test_project():
+    """Create a minimal Django test project"""
+    os.makedirs('test_project', exist_ok=True)
+    
+    # Create settings.py
+    settings_content = '''
+DEBUG = True
+SECRET_KEY = 'test-secret-key-for-reproduction'
+ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
+ROOT_URLCONF = 'test_project.urls'
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+'''
+    
+    with open('test_project/settings.py', 'w') as f:
+        f.write(settings_content)
+    
+    # Create urls.py
+    urls_content = '''
+from django.urls import path
+from django.http import HttpResponse
+
+def home_view(request):
+    return HttpResponse("Welcome to Django", content_type="text/html")
+
+urlpatterns = [
+    path('', home_view, name='home'),
+]
+'''
+    
+    with open('test_project/urls.py', 'w') as f:
+        f.write(urls_content)
+    
+    # Create manage.py
+    manage_content = '''#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
+'''
+    
+    with open('test_project/manage.py', 'w') as f:
+        f.write(manage_content)
+    
+    os.chmod('test_project/manage.py', 0o755)
+
+def test_head_request():
+    """Test HEAD request to the Django development server"""
+    print("Testing HEAD request to Django development server...")
+    
+    # Change to test project directory
+    os.chdir('test_project')
+    
+    # Start the server in a separate thread
+    def run_server():
+        subprocess.run(['./manage.py', 'runserver', '127.0.0.1:8000'], 
+                      capture_output=True, text=True)
+    
+    server_thread = threading.Thread(target=run_server, daemon=True)
+    server_thread.start()
+    
+    # Give server time to start
+    time.sleep(3)
+    
+    try:
+        # Make HEAD request
+        response = requests.head('http://127.0.0.1:8000/')
+        print(f"Status Code: {response.status_code}")
+        print("Headers:")
+        for key, value in response.headers.items():
+            print(f"  {key}: {value}")
+        
+        # Check if response has content (it shouldn't for HEAD requests)
+        if response.content:
+            print(f"ERROR: Response has content: {response.content}")
+            print("This violates RFC 2616, section 4.3")
+            return False
+        else:
+            print("SUCCESS: No content in response (as expected for HEAD requests)")
+            return True
+            
+    except requests.exceptions.RequestException as e:
+        print(f"Request failed: {e}")
+        return False
+    finally:
+        # Try to stop the server
+        subprocess.run(['pkill', '-f', 'runserver'], capture_output=True)
+        os.chdir('..')
+
+if __name__ == '__main__':
+    print("Creating test Django project...")
+    create_test_project()
+    
+    print("\\nReproducing the HEAD request issue...")
+    success = test_head_request()
+    
+    if success:
+        print("\\nIssue NOT reproduced - HEAD requests work correctly")
+        sys.exit(0)
+    else:
+        print("\\nIssue reproduced - HEAD requests return content")
+        sys.exit(1)
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..af07b7e727
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""
+Simple script to test HEAD request handling by making a direct HTTP request
+to a running Django development server.
+"""
+
+import sys
+import requests
+
+def test_head_request():
+    """Test HEAD request to the Django development server"""
+    print("Testing HEAD request to Django development server...")
+    
+    try:
+        # Make HEAD request
+        response = requests.head('http://127.0.0.1:8000/')
+        print(f"Status Code: {response.status_code}")
+        print("Headers:")
+        for key, value in response.headers.items():
+            print(f"  {key}: {value}")
+        
+        # Check if response has content (it shouldn't for HEAD requests)
+        if response.content:
+            print(f"ERROR: Response has content: {response.content}")
+            print("This violates RFC 2616, section 4.3")
+            return False
+        else:
+            print("SUCCESS: No content in response (as expected for HEAD requests)")
+            return True
+            
+    except requests.exceptions.RequestException as e:
+        print(f"Request failed: {e}")
+        print("Make sure the Django development server is running on port 8000")
+        return False
+
+if __name__ == '__main__':
+    success = test_head_request()
+    
+    if success:
+        print("\\nHEAD requests work correctly")
+        sys.exit(0)
+    else:
+        print("\\nHEAD requests return content (issue exists)")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..d76e183b15
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..3816bd482e
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,42 @@
+
+DEBUG = True
+SECRET_KEY = 'test-secret-key-for-reproduction'
+ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
+ROOT_URLCONF = 'test_project.urls'
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..cbf95b5043
--- /dev/null
+++ b/test_project/urls.py
@@ -0,0 +1,10 @@
+
+from django.urls import path
+from django.http import HttpResponse
+
+def home_view(request):
+    return HttpResponse("Welcome to Django", content_type="text/html")
+
+urlpatterns = [
+    path('', home_view, name='home'),
+]
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..f647327d83 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -298,6 +298,8 @@ class BaseExpression:
         If all sources are None, then an error is raised higher up the stack in
         the output_field property.
         """
+        
+        
         sources_iter = (source for source in self.get_source_fields() if source is not None)
         for output_field in sources_iter:
             for source in sources_iter:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6b9c90216a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Value
+from django.db.models.fields import DurationField
+import datetime
+
+class Experiment(models.Model):
+    start = models.DateTimeField()
+    end = models.DateTimeField()
+
+    class Meta:
+        app_label = 'test'
+
+# Try to reproduce the issue
+try:
+    query = Experiment.objects.annotate(
+        delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())
+    )
+    # Try to actually execute the query to trigger expression resolution
+    print("Query SQL:", str(query.query))
+    print("SUCCESS: No error occurred")
+except Exception as e:
+    print(f"ERROR: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..024ca79200
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Value
+from django.db.models.fields import DurationField
+import datetime
+
+class Experiment(models.Model):
+    start = models.DateTimeField()
+    end = models.DateTimeField()
+    date_field = models.DateField()
+    time_field = models.TimeField()
+
+    class Meta:
+        app_label = 'test'
+
+def test_case(description, query_func):
+    print(f"\n=== {description} ===")
+    try:
+        query = query_func()
+        print("Query SQL:", str(query.query))
+        print("SUCCESS: No error occurred")
+        return True
+    except Exception as e:
+        print(f"ERROR: {e}")
+        return False
+
+# Test cases
+test_cases = [
+    (
+        "Original issue: DateTime subtraction with Duration addition",
+        lambda: Experiment.objects.annotate(
+            delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())
+        )
+    ),
+    (
+        "Simple DateTime subtraction",
+        lambda: Experiment.objects.annotate(
+            delta=F('end') - F('start')
+        )
+    ),
+    (
+        "Date subtraction",
+        lambda: Experiment.objects.annotate(
+            delta=F('date_field') - F('date_field')
+        )
+    ),
+    (
+        "Time subtraction",
+        lambda: Experiment.objects.annotate(
+            delta=F('time_field') - F('time_field')
+        )
+    ),
+    (
+        "Mixed types that should still fail",
+        lambda: Experiment.objects.annotate(
+            delta=F('end') + F('date_field')  # This should still fail
+        )
+    ),
+]
+
+all_passed = True
+for description, query_func in test_cases:
+    if not test_case(description, query_func):
+        all_passed = False
+
+print(f"\n=== Overall Result ===")
+if all_passed:
+    print("All test cases passed!")
+else:
+    print("Some test cases failed!")
\ No newline at end of file
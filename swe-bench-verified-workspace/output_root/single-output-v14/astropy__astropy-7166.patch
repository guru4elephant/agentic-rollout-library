diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..cceaeb957f 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,7 +528,7 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
+            if ((inspect.isfunction(val) or isinstance(val, property)) and
                 is_public_member(key) and
                 val.__doc__ is None):
                 for base in cls.__mro__[1:]:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..479a382ed5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+import inspect
+from astropy.utils.misc import InheritDocstrings
+
+class BaseClass(metaclass=InheritDocstrings):
+    """Base class with a property that has a docstring."""
+    
+    @property
+    def my_property(self):
+        """This is the docstring for my_property."""
+        return "base_value"
+
+class DerivedClass(BaseClass):
+    """Derived class that should inherit the property docstring."""
+    
+    @property
+    def my_property(self):
+        return "derived_value"
+
+# Test if the docstring was inherited
+print("Base class property docstring:", BaseClass.my_property.__doc__)
+print("Derived class property docstring:", DerivedClass.my_property.__doc__)
+
+# Check what inspect.isfunction returns for a property
+print("inspect.isfunction(BaseClass.my_property):", inspect.isfunction(BaseClass.my_property))
+print("inspect.isfunction(DerivedClass.my_property):", inspect.isfunction(DerivedClass.my_property))
+
+# Check what type these properties are
+print("Type of BaseClass.my_property:", type(BaseClass.my_property))
+print("Type of DerivedClass.my_property:", type(DerivedClass.my_property))
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..7faafe79e6
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+
+import inspect
+from astropy.utils.misc import InheritDocstrings
+
+class BaseClass(metaclass=InheritDocstrings):
+    """Base class with various types of members."""
+    
+    def regular_method(self):
+        """This is a regular method docstring."""
+        pass
+    
+    @property
+    def my_property(self):
+        """This is the docstring for my_property."""
+        return "base_value"
+    
+    @property
+    def another_property(self):
+        """Another property with a docstring."""
+        return "another_value"
+    
+    def _private_method(self):
+        """This should not be inherited due to private name."""
+        pass
+    
+    @property
+    def _private_property(self):
+        """This should not be inherited due to private name."""
+        return "private"
+
+class DerivedClass(BaseClass):
+    """Derived class that should inherit docstrings."""
+    
+    def regular_method(self):
+        # Should inherit docstring
+        pass
+    
+    @property
+    def my_property(self):
+        # Should inherit docstring
+        return "derived_value"
+    
+    @property
+    def another_property(self):
+        # Should inherit docstring
+        return "another_derived_value"
+    
+    def _private_method(self):
+        # Should NOT inherit docstring (private method)
+        pass
+    
+    @property
+    def _private_property(self):
+        # Should NOT inherit docstring (private property)
+        return "private_derived"
+    
+    def new_method(self):
+        """This is a new method with its own docstring."""
+        # Should keep its own docstring
+        pass
+    
+    @property
+    def new_property(self):
+        """This is a new property with its own docstring."""
+        # Should keep its own docstring
+        return "new_value"
+
+# Test inheritance
+print("=== Testing regular methods ===")
+print("Base regular_method docstring:", BaseClass.regular_method.__doc__)
+print("Derived regular_method docstring:", DerivedClass.regular_method.__doc__)
+
+print("\n=== Testing properties ===")
+print("Base my_property docstring:", BaseClass.my_property.__doc__)
+print("Derived my_property docstring:", DerivedClass.my_property.__doc__)
+
+print("Base another_property docstring:", BaseClass.another_property.__doc__)
+print("Derived another_property docstring:", DerivedClass.another_property.__doc__)
+
+print("\n=== Testing private members (should NOT inherit) ===")
+print("Base _private_method docstring:", BaseClass._private_method.__doc__)
+print("Derived _private_method docstring:", DerivedClass._private_method.__doc__)
+
+print("Base _private_property docstring:", BaseClass._private_property.__doc__)
+print("Derived _private_property docstring:", DerivedClass._private_property.__doc__)
+
+print("\n=== Testing members with existing docstrings (should NOT be overridden) ===")
+print("Derived new_method docstring:", DerivedClass.new_method.__doc__)
+print("Derived new_property docstring:", DerivedClass.new_property.__doc__)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c2d6ff6416
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+from sympy.combinatorics.permutations import Permutation
+
+class MyPermutation(Permutation):
+    """A custom subclass of Permutation"""
+    def custom_method(self):
+        return "This is a custom method"
+
+# Test 1: Basic creation
+print("=== Test 1: Basic creation ===")
+try:
+    my_perm = MyPermutation([1, 0, 2])
+    print(f"Created: {my_perm}")
+    print(f"Type: {type(my_perm)}")
+    print(f"Is instance of MyPermutation: {isinstance(my_perm, MyPermutation)}")
+    print(f"Is instance of Permutation: {isinstance(my_perm, Permutation)}")
+    
+    # Try to call custom method
+    print(f"Custom method: {my_perm.custom_method()}")
+    
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
+
+print("\n=== Test 2: Operations that use _af_new ===")
+# Test 2: Try operations that might use _af_new internally
+try:
+    p1 = MyPermutation([1, 0, 2])
+    p2 = MyPermutation([2, 1, 0])
+    
+    # Test multiplication (should use _af_new)
+    product = p1 * p2
+    print(f"Product: {product}")
+    print(f"Product type: {type(product)}")
+    print(f"Is product instance of MyPermutation: {isinstance(product, MyPermutation)}")
+    
+    # Test inverse (should use _af_new)
+    inverse = p1**-1
+    print(f"Inverse: {inverse}")
+    print(f"Inverse type: {type(inverse)}")
+    print(f"Is inverse instance of MyPermutation: {isinstance(inverse, MyPermutation)}")
+    
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 4ac1c2ef3b..35f2be0e9b 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -857,9 +857,9 @@ def __new__(cls, *args, **kwargs):
         #g) (Permutation) = adjust size or return copy
         ok = True
         if not args:  # a
-            return _af_new(list(range(size or 0)))
+            return cls._af_new(list(range(size or 0)))
         elif len(args) > 1:  # c
-            return _af_new(Cycle(*args).list(size))
+            return cls._af_new(Cycle(*args).list(size))
         if len(args) == 1:
             a = args[0]
             if isinstance(a, Perm):  # g
@@ -867,9 +867,9 @@ def __new__(cls, *args, **kwargs):
                     return a
                 return Perm(a.array_form, size=size)
             if isinstance(a, Cycle):  # f
-                return _af_new(a.list(size))
+                return cls._af_new(a.list(size))
             if not is_sequence(a):  # b
-                return _af_new(list(range(a + 1)))
+                return cls._af_new(list(range(a + 1)))
             if has_variety(is_sequence(ai) for ai in a):
                 ok = False
         else:
@@ -924,13 +924,13 @@ def __new__(cls, *args, **kwargs):
         obj._size = size
         return obj
 
-    @staticmethod
-    def _af_new(perm):
+    @classmethod
+    def _af_new(cls, perm):
         """A method to produce a Permutation object from a list;
         the list is bound to the _array_form attribute, so it must
         not be modified; this method is meant for internal use only;
         the list ``a`` is supposed to be generated as a temporary value
-        in a method, so p = Perm._af_new(a) is the only object
+        in a method, so p = cls._af_new(a) is the only object
         to hold a reference to ``a``::
 
         Examples
@@ -944,7 +944,7 @@ def _af_new(perm):
         Permutation([2, 1, 3, 0])
 
         """
-        p = Basic.__new__(Perm, perm)
+        p = Basic.__new__(cls, perm)
         p._array_form = perm
         p._size = len(perm)
         return p
@@ -1300,7 +1300,7 @@ def __mul__(self, other):
         else:
             b.extend(list(range(len(b), len(a))))
             perm = [b[i] for i in a] + b[len(a):]
-        return _af_new(perm)
+        return self._af_new(perm)
 
     def commutes_with(self, other):
         """
@@ -1341,7 +1341,7 @@ def __pow__(self, n):
             raise NotImplementedError(
                 'p**p is not defined; do you mean p^p (conjugate)?')
         n = int(n)
-        return _af_new(_af_pow(self.array_form, n))
+        return self._af_new(_af_pow(self.array_form, n))
 
     def __rxor__(self, i):
         """Return self(i) when ``i`` is an int.
@@ -1436,7 +1436,7 @@ def __xor__(self, h):
         p = self._array_form
         for i in range(self.size):
             a[h[i]] = h[p[i]]
-        return _af_new(a)
+        return self._af_new(a)
 
     def transpositions(self):
         """
@@ -1519,7 +1519,7 @@ def __invert__(self):
         >>> p*~p == ~p*p == Permutation([0, 1, 2, 3])
         True
         """
-        return _af_new(_af_invert(self._array_form))
+        return self._af_new(_af_invert(self._array_form))
 
     def __iter__(self):
         """Yield elements from array form.
@@ -1629,7 +1629,7 @@ def next_lex(self):
                 perm[j], perm[i] = perm[i], perm[j]
                 i += 1
                 j -= 1
-        return _af_new(perm)
+        return self._af_new(perm)
 
     @classmethod
     def unrank_nonlex(self, n, r):
@@ -1661,7 +1661,7 @@ def _unrank1(n, r, a):
         n = int(n)
         r = r % ifac(n)
         _unrank1(n, r, id_perm)
-        return _af_new(id_perm)
+        return self._af_new(id_perm)
 
     def rank_nonlex(self, inv_perm=None):
         """
@@ -2125,7 +2125,7 @@ def commutator(self, x):
         invb = [None]*n
         for i in range(n):
             invb[b[i]] = i
-        return _af_new([a[b[inva[i]]] for i in invb])
+        return self._af_new([a[b[inva[i]]] for i in invb])
 
     def signature(self):
         """
@@ -2423,7 +2423,7 @@ def unrank_trotterjohnson(self, size, rank):
                     perm[i] = perm[i - 1]
                 perm[k] = j - 1
             r2 = r1
-        return _af_new(perm)
+        return self._af_new(perm)
 
     def next_trotterjohnson(self):
         """
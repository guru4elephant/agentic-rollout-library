diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2a10396d93
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+
+class ActivityBlackListed(models.Model):
+    """
+    Originally sourced from Activity_BlackListed in /home/josh/PNDS_Interim_MIS-Data.accdb (13 records)
+    """
+    class Meta:
+        db_table = "Activity_BlackListed"
+        
+    blacklistid = models.IntegerField(primary_key=True, db_column="BlacklistID")
+    sectorid = models.IntegerField(null=True, blank=True, db_column="SectorID")
+
+def test_bulk_create():
+    from django.db import connection
+    from django.db.models import sql
+    
+    # Create a simple test to see what SQL is generated
+    qs = ActivityBlackListed.objects.all()
+    
+    # Create some test instances
+    instances = [
+        ActivityBlackListed(blacklistid=1, sectorid=100),
+        ActivityBlackListed(blacklistid=2, sectorid=200),
+    ]
+    
+    # Try to call bulk_create with update_conflicts
+    try:
+        # This should trigger the issue
+        result = qs.bulk_create(
+            instances, 
+            update_conflicts=True, 
+            update_fields=["sectorid"], 
+            unique_fields=["blacklistid"]
+        )
+        print("Success: No error occurred")
+    except Exception as e:
+        print(f"Error: {e}")
+        print(f"Error type: {type(e).__name__}")
+        
+    # Let's also examine the SQL generation directly
+    query = sql.InsertQuery(
+        ActivityBlackListed,
+        on_conflict=models.OnConflict.UPDATE,
+        update_fields=["sectorid"],
+        unique_fields=["blacklistid"],
+    )
+    query.insert_values([ActivityBlackListed._meta.get_field('blacklistid'), 
+                         ActivityBlackListed._meta.get_field('sectorid')], 
+                        instances)
+    
+    compiler = query.get_compiler(using='default')
+    sql_statements = compiler.as_sql()
+    
+    print("\nGenerated SQL:")
+    for sql_stmt, params in sql_statements:
+        print(f"SQL: {sql_stmt}")
+        print(f"Params: {params}")
+
+if __name__ == '__main__':
+    test_bulk_create()
\ No newline at end of file
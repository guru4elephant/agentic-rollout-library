diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 000000000..9c1b39ed7
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+"""
+Debug script to check viewcode behavior for epub.
+"""
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def debug_viewcode_epub():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Copy the test-ext-viewcode structure
+        test_root = './tests/roots/test-ext-viewcode'
+        for item in os.listdir(test_root):
+            src_path = os.path.join(test_root, item)
+            dst_path = os.path.join(srcdir, item)
+            if os.path.isdir(src_path):
+                shutil.copytree(src_path, dst_path)
+            else:
+                shutil.copy2(src_path, dst_path)
+        
+        # Test with viewcode_enable_epub = True
+        conf_path = os.path.join(srcdir, 'conf.py')
+        with open(conf_path, 'r') as f:
+            conf_content = f.read()
+        
+        conf_content_true = conf_content.replace(
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']",
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']\nviewcode_enable_epub = True"
+        )
+        
+        with open(conf_path, 'w') as f:
+            f.write(conf_content_true)
+        
+        # Build with epub and viewcode_enable_epub = True
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if _viewcode_modules was populated
+        env = app.env
+        if hasattr(env, '_viewcode_modules'):
+            print(f"_viewcode_modules content: {env._viewcode_modules}")
+            if env._viewcode_modules:
+                print("PASS: _viewcode_modules was populated")
+            else:
+                print("FAIL: _viewcode_modules is empty")
+        else:
+            print("FAIL: _viewcode_modules attribute does not exist")
+        
+        # Check if viewcode pages were created for epub
+        modules_dir = os.path.join(outdir, '_modules')
+        if os.path.exists(modules_dir):
+            print("PASS: viewcode created pages for epub with viewcode_enable_epub=True")
+            print("Contents of _modules directory:")
+            for root, dirs, files in os.walk(modules_dir):
+                for file in files:
+                    print(f"  {os.path.join(root, file)}")
+        else:
+            print("FAIL: viewcode did not create pages for epub even with viewcode_enable_epub=True")
+
+if __name__ == '__main__':
+    debug_viewcode_epub()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..0346ec624
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the viewcode epub issue.
+"""
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_issue():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Copy the test-ext-viewcode structure
+        test_root = './tests/roots/test-ext-viewcode'
+        for item in os.listdir(test_root):
+            src_path = os.path.join(test_root, item)
+            dst_path = os.path.join(srcdir, item)
+            if os.path.isdir(src_path):
+                shutil.copytree(src_path, dst_path)
+            else:
+                shutil.copy2(src_path, dst_path)
+        
+        # Modify conf.py to set viewcode_enable_epub = False
+        conf_path = os.path.join(srcdir, 'conf.py')
+        with open(conf_path, 'r') as f:
+            conf_content = f.read()
+        
+        # Add viewcode_enable_epub = False
+        conf_content = conf_content.replace(
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']",
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']\nviewcode_enable_epub = False"
+        )
+        
+        with open(conf_path, 'w') as f:
+            f.write(conf_content)
+        
+        # Build with epub
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'epub')
+            app.build()
+        
+        # Check if viewcode pages were created for epub
+        modules_dir = os.path.join(outdir, '_modules')
+        if os.path.exists(modules_dir):
+            print("ISSUE REPRODUCED: viewcode created pages for epub even with viewcode_enable_epub=False")
+            print("Contents of _modules directory:")
+            for root, dirs, files in os.walk(modules_dir):
+                for file in files:
+                    print(f"  {os.path.join(root, file)}")
+        else:
+            print("No _modules directory found - viewcode did not create pages for epub")
+
+if __name__ == '__main__':
+    test_viewcode_epub_issue()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py
index a7d52a91c..060604e25 100644
--- a/sphinx/ext/viewcode.py
+++ b/sphinx/ext/viewcode.py
@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
     env = app.builder.env
     if not hasattr(env, '_viewcode_modules'):
         return
+    if app.builder.name.startswith("epub") and not env.config.viewcode_enable_epub:
+        return
     highlighter = app.builder.highlighter  # type: ignore
     urito = app.builder.get_relative_uri
 
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..fca49b7cf
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the viewcode epub fix.
+"""
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_viewcode_epub_fix():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir_false = os.path.join(tmpdir, 'build_false')
+        outdir_true = os.path.join(tmpdir, 'build_true')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Copy the test-ext-viewcode structure
+        test_root = './tests/roots/test-ext-viewcode'
+        for item in os.listdir(test_root):
+            src_path = os.path.join(test_root, item)
+            dst_path = os.path.join(srcdir, item)
+            if os.path.isdir(src_path):
+                shutil.copytree(src_path, dst_path)
+            else:
+                shutil.copy2(src_path, dst_path)
+        
+        # Test 1: viewcode_enable_epub = False (should NOT create pages)
+        conf_path = os.path.join(srcdir, 'conf.py')
+        with open(conf_path, 'r') as f:
+            conf_content = f.read()
+        
+        conf_content_false = conf_content.replace(
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']",
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']\nviewcode_enable_epub = False"
+        )
+        
+        with open(conf_path, 'w') as f:
+            f.write(conf_content_false)
+        
+        # Build with epub and viewcode_enable_epub = False
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir_false, doctreedir, 'epub')
+            app.build()
+        
+        # Check if viewcode pages were created for epub
+        modules_dir_false = os.path.join(outdir_false, '_modules')
+        if os.path.exists(modules_dir_false):
+            print("FAIL: viewcode created pages for epub even with viewcode_enable_epub=False")
+            return False
+        else:
+            print("PASS: viewcode did not create pages for epub with viewcode_enable_epub=False")
+        
+        # Test 2: viewcode_enable_epub = True (should create pages)
+        conf_content_true = conf_content.replace(
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']",
+            "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']\nviewcode_enable_epub = True"
+        )
+        
+        with open(conf_path, 'w') as f:
+            f.write(conf_content_true)
+        
+        # Build with epub and viewcode_enable_epub = True
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir_true, doctreedir, 'epub')
+            app.build()
+        
+        # Check if viewcode pages were created for epub
+        modules_dir_true = os.path.join(outdir_true, '_modules')
+        if os.path.exists(modules_dir_true):
+            print("PASS: viewcode created pages for epub with viewcode_enable_epub=True")
+            return True
+        else:
+            print("FAIL: viewcode did not create pages for epub even with viewcode_enable_epub=True")
+            return False
+
+if __name__ == '__main__':
+    success = test_viewcode_epub_fix()
+    if success:
+        print("\n✅ Fix is working correctly!")
+    else:
+        print("\n❌ Fix is not working correctly!")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 21a0faec3..be1a9127e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2cdfd9138c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,11 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Reproduce the issue
+N = ReferenceFrame('N')
+try:
+    result = sum([N.x, (0 * N.x)])
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error:", e)
+    print("Type:", type(e))
\ No newline at end of file
diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py
index a048ee57f1..491b5c25ca 100644
--- a/sympy/physics/vector/vector.py
+++ b/sympy/physics/vector/vector.py
@@ -57,6 +57,8 @@ def __hash__(self):
 
     def __add__(self, other):
         """The add operator for Vector. """
+        if other == 0 or other == 0.0:
+            other = Vector(0)
         other = _check_vector(other)
         return Vector(self.args + other.args)
 
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..2c1da112a6
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,40 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+
+N = ReferenceFrame('N')
+
+# Test basic vector operations
+print("Testing basic vector operations...")
+
+# Test vector addition
+v1 = N.x + N.y
+print("N.x + N.y =", v1)
+
+# Test vector subtraction  
+v2 = N.x - N.y
+print("N.x - N.y =", v2)
+
+# Test scalar multiplication
+v3 = 2 * N.x
+print("2 * N.x =", v3)
+
+# Test dot product
+dot_result = N.x & N.y
+print("N.x & N.y =", dot_result)
+
+# Test cross product
+cross_result = N.x ^ N.y
+print("N.x ^ N.y =", cross_result)
+
+# Test zero vector
+zero_vec = Vector(0)
+print("Vector(0) =", zero_vec)
+
+# Test addition with zero vector
+v4 = N.x + zero_vec
+print("N.x + zero_vec =", v4)
+
+# Test equality with zero
+print("N.x == 0:", N.x == 0)
+print("zero_vec == 0:", zero_vec == 0)
+
+print("All basic tests passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2a61c69959
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,41 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+
+N = ReferenceFrame('N')
+
+# Test the original issue
+print("Test 1: Original issue")
+result1 = sum([N.x, (0 * N.x)])
+print("Result:", result1)
+
+# Test adding zero directly
+print("\nTest 2: Adding zero directly")
+result2 = N.x + 0
+print("Result:", result2)
+
+# Test adding 0.0 (float zero)
+print("\nTest 3: Adding 0.0 (float)")
+result3 = N.x + 0.0
+print("Result:", result3)
+
+# Test reverse addition (0 + vector)
+print("\nTest 4: Reverse addition (0 + vector)")
+try:
+    result4 = 0 + N.x
+    print("Result:", result4)
+except Exception as e:
+    print("Error:", e)
+
+# Test sum with only one vector
+print("\nTest 5: Sum with single vector")
+result5 = sum([N.x])
+print("Result:", result5)
+
+# Test sum with empty list (should return 0)
+print("\nTest 6: Sum with empty list")
+result6 = sum([])
+print("Result:", result6, type(result6))
+
+# Test sum with multiple vectors including zero
+print("\nTest 7: Sum with multiple vectors including zero")
+result7 = sum([N.x, N.y, 0, N.z])
+print("Result:", result7)
\ No newline at end of file
diff --git a/test_zero_types.py b/test_zero_types.py
new file mode 100644
index 0000000000..1db4fc551b
--- /dev/null
+++ b/test_zero_types.py
@@ -0,0 +1,41 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+
+N = ReferenceFrame('N')
+
+# Test different types of zero values
+print("Testing different zero types...")
+
+# Test integer 0
+result1 = N.x + 0
+print("N.x + 0 =", result1)
+
+# Test float 0.0  
+result2 = N.x + 0.0
+print("N.x + 0.0 =", result2)
+
+# Test complex 0j
+try:
+    result3 = N.x + 0j
+    print("N.x + 0j =", result3)
+except Exception as e:
+    print("N.x + 0j failed:", e)
+
+# Test numpy zero (if available)
+try:
+    import numpy as np
+    result4 = N.x + np.float64(0)
+    print("N.x + np.float64(0) =", result4)
+except ImportError:
+    print("numpy not available")
+except Exception as e:
+    print("N.x + np.float64(0) failed:", e)
+
+# Test with sum function
+print("\nTesting sum function with different zeros:")
+result5 = sum([N.x, 0])
+print("sum([N.x, 0]) =", result5)
+
+result6 = sum([N.x, 0.0])  
+print("sum([N.x, 0.0]) =", result6)
+
+print("All zero type tests completed!")
\ No newline at end of file
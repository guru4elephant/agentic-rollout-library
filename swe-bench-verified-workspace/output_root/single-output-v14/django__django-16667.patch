diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..f4bc74b7cd 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1157,7 +1157,7 @@ class SelectDateWidget(Widget):
             input_format = formats.sanitize_strftime_format(input_format)
             try:
                 date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..78ef48408c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the OverflowError in SelectDateWidget
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+import django
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django import forms
+from django.forms import SelectDateWidget
+from django.http import HttpResponse
+
+class ReproForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def test_repro():
+    # Simulate a GET request with large year value
+    data = {
+        'my_date_day': '1',
+        'my_date_month': '1', 
+        'my_date_year': '1234567821345678'
+    }
+    
+    form = ReproForm(data)
+    print("Form created successfully")
+    
+    try:
+        result = form.is_valid()
+        print(f"Form validation result: {result}")
+    except OverflowError as e:
+        print(f"OverflowError reproduced: {e}")
+        return False
+    except Exception as e:
+        print(f"Other error: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    test_repro()
\ No newline at end of file
diff --git a/test_comprehensive_edge_cases.py b/test_comprehensive_edge_cases.py
new file mode 100644
index 0000000000..4b24a4eeb4
--- /dev/null
+++ b/test_comprehensive_edge_cases.py
@@ -0,0 +1,123 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for SelectDateWidget edge cases
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+import django
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+    SECRET_KEY='test-key-for-testing',
+)
+
+django.setup()
+
+from django.forms import SelectDateWidget
+
+def test_comprehensive_edge_cases():
+    """Test comprehensive edge cases for SelectDateWidget"""
+    print("Testing comprehensive edge cases for SelectDateWidget...")
+    
+    widget = SelectDateWidget()
+    test_cases = [
+        # Test cases that should work (no exception)
+        {
+            'data': {'test_day': '15', 'test_month': '6', 'test_year': '2023'},
+            'description': 'Normal valid date',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '', 'test_month': '', 'test_year': ''},
+            'description': 'All empty values',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '1', 'test_month': '1', 'test_year': '1234567821345678'},
+            'description': 'Very large year (OverflowError fix)',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '999999', 'test_month': '1', 'test_year': '2023'},
+            'description': 'Very large day',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '1', 'test_month': '999999', 'test_year': '2023'},
+            'description': 'Very large month',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '-1', 'test_month': '1', 'test_year': '2023'},
+            'description': 'Negative day',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '1', 'test_month': '-1', 'test_year': '2023'},
+            'description': 'Negative month',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '1', 'test_month': '1', 'test_year': '-2023'},
+            'description': 'Negative year',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': 'abc', 'test_month': '1', 'test_year': '2023'},
+            'description': 'Non-numeric day',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '1', 'test_month': 'abc', 'test_year': '2023'},
+            'description': 'Non-numeric month',
+            'should_work': True
+        },
+        {
+            'data': {'test_day': '1', 'test_month': '1', 'test_year': 'abc'},
+            'description': 'Non-numeric year',
+            'should_work': True
+        },
+        # Edge case: sys.maxsize + 1 (should trigger OverflowError)
+        {
+            'data': {'test_day': '1', 'test_month': '1', 'test_year': str(sys.maxsize + 1)},
+            'description': 'Year at sys.maxsize + 1',
+            'should_work': True
+        },
+    ]
+    
+    all_passed = True
+    
+    for i, test_case in enumerate(test_cases):
+        print(f"\nTest {i+1}: {test_case['description']}")
+        try:
+            result = widget.value_from_datadict(test_case['data'], {}, 'test')
+            print(f"  Result: {result}")
+            if test_case['should_work']:
+                print("  ✓ PASS - No exception as expected")
+            else:
+                print("  ✗ FAIL - Expected exception but got none")
+                all_passed = False
+        except Exception as e:
+            print(f"  Exception: {e}")
+            if test_case['should_work']:
+                print("  ✗ FAIL - Unexpected exception")
+                all_passed = False
+            else:
+                print("  ✓ PASS - Expected exception occurred")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    success = test_comprehensive_edge_cases()
+    if success:
+        print("\n✓ All comprehensive edge case tests passed!")
+        sys.exit(0)
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a7ee6d1bff
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the SelectDateWidget fix
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+import django
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django import forms
+from django.forms import SelectDateWidget
+
+class TestForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def test_edge_cases():
+    test_cases = [
+        # Large year value (should not crash, should return invalid)
+        {
+            'data': {'my_date_day': '1', 'my_date_month': '1', 'my_date_year': '1234567821345678'},
+            'expected_valid': False,
+            'description': 'Large year value causing OverflowError'
+        },
+        # Very large month value
+        {
+            'data': {'my_date_day': '1', 'my_date_month': '123456789', 'my_date_year': '2023'},
+            'expected_valid': False,
+            'description': 'Large month value'
+        },
+        # Very large day value
+        {
+            'data': {'my_date_day': '123456789', 'my_date_month': '1', 'my_date_year': '2023'},
+            'expected_valid': False,
+            'description': 'Large day value'
+        },
+        # Negative values
+        {
+            'data': {'my_date_day': '-1', 'my_date_month': '1', 'my_date_year': '2023'},
+            'expected_valid': False,
+            'description': 'Negative day value'
+        },
+        # Valid date
+        {
+            'data': {'my_date_day': '15', 'my_date_month': '6', 'my_date_year': '2023'},
+            'expected_valid': True,
+            'description': 'Valid date'
+        },
+        # Empty values
+        {
+            'data': {'my_date_day': '', 'my_date_month': '', 'my_date_year': ''},
+            'expected_valid': False,
+            'description': 'Empty values'
+        },
+    ]
+    
+    for i, test_case in enumerate(test_cases):
+        print(f"\nTest {i+1}: {test_case['description']}")
+        try:
+            form = TestForm(test_case['data'])
+            is_valid = form.is_valid()
+            print(f"  Data: {test_case['data']}")
+            print(f"  Form validation result: {is_valid}")
+            print(f"  Expected: {test_case['expected_valid']}")
+            
+            if is_valid == test_case['expected_valid']:
+                print("  ✓ PASS")
+            else:
+                print("  ✗ FAIL - Unexpected validation result")
+                
+        except Exception as e:
+            print(f"  ✗ FAIL - Exception: {e}")
+            return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_edge_cases()
+    if success:
+        print("\n✓ All edge case tests passed!")
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_selectdatewidget_fix.py b/test_selectdatewidget_fix.py
new file mode 100644
index 0000000000..4f3e21411c
--- /dev/null
+++ b/test_selectdatewidget_fix.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""
+Test to verify our SelectDateWidget fix doesn't break existing functionality
+"""
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+import django
+from django.conf import settings
+
+# Minimal settings configuration
+settings.configure(
+    DEBUG=True,
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+    SECRET_KEY='test-key-for-testing',
+)
+
+django.setup()
+
+from django.forms import SelectDateWidget
+
+def test_basic_functionality():
+    """Test that basic SelectDateWidget functionality still works"""
+    print("Testing basic SelectDateWidget functionality...")
+    
+    # Test normal date values
+    widget = SelectDateWidget()
+    data = {
+        'test_day': '15',
+        'test_month': '6', 
+        'test_year': '2023'
+    }
+    
+    try:
+        result = widget.value_from_datadict(data, {}, 'test')
+        print(f"Normal date result: {result}")
+        print("✓ Normal date handling works")
+    except Exception as e:
+        print(f"✗ Normal date handling failed: {e}")
+        return False
+    
+    # Test empty values
+    empty_data = {
+        'test_day': '',
+        'test_month': '', 
+        'test_year': ''
+    }
+    
+    try:
+        result = widget.value_from_datadict(empty_data, {}, 'test')
+        print(f"Empty values result: {result}")
+        print("✓ Empty values handling works")
+    except Exception as e:
+        print(f"✗ Empty values handling failed: {e}")
+        return False
+    
+    # Test our fix for large values
+    large_data = {
+        'test_day': '1',
+        'test_month': '1', 
+        'test_year': '1234567821345678'
+    }
+    
+    try:
+        result = widget.value_from_datadict(large_data, {}, 'test')
+        print(f"Large year result: {result}")
+        print("✓ Large year value handling works (no OverflowError)")
+    except Exception as e:
+        print(f"✗ Large year value handling failed: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_basic_functionality()
+    if success:
+        print("\n✓ All basic functionality tests passed!")
+        sys.exit(0)
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
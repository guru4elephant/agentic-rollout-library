diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..0ca7c9e421
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,38 @@
+from sympy import exp, sin, cos, tan, log, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+# Create a dimensionless expression
+expr = units.second / (units.ohm * units.farad)
+
+# Test all common mathematical functions with dimensionless arguments
+functions_to_test = [
+    exp, sin, cos, tan, log, 
+    asin, acos, atan, 
+    sinh, cosh, tanh,
+    asinh, acosh, atanh
+]
+
+print("Testing mathematical functions with dimensionless arguments:")
+for func in functions_to_test:
+    try:
+        result = SI._collect_factor_and_dimension(func(expr))
+        print(f"{func.__name__}: {result}")
+        assert SI.get_dimension_system().is_dimensionless(result[1]), f"{func.__name__} should be dimensionless"
+    except Exception as e:
+        print(f"{func.__name__}: ERROR - {e}")
+
+print("\nTesting mathematical functions with dimensional arguments:")
+# Test with dimensional argument (should preserve original behavior)
+expr_dim = units.second  # has dimension time
+for func in functions_to_test:
+    try:
+        result = SI._collect_factor_and_dimension(func(expr_dim))
+        print(f"{func.__name__}: {result}")
+        # Should not be dimensionless since argument has dimension
+        if SI.get_dimension_system().is_dimensionless(result[1]):
+            print(f"  WARNING: {func.__name__} with dimensional argument returned dimensionless")
+    except Exception as e:
+        print(f"{func.__name__}: ERROR - {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1231c1b8cf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+from sympy import exp
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+expr = units.second / (units.ohm * units.farad)
+dim = SI._collect_factor_and_dimension(expr)[1]
+
+assert SI.get_dimension_system().is_dimensionless(dim)
+
+buggy_expr = 100 + exp(expr)
+result = SI._collect_factor_and_dimension(buggy_expr)
+print("Result:", result)
\ No newline at end of file
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..344eb0d87f 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -192,8 +192,13 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Function):
             fds = [self._collect_factor_and_dimension(
                 arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            # For mathematical functions, the result should be dimensionless
+            # if all arguments are dimensionless
+            if all(self.get_dimension_system().is_dimensionless(d[1]) for d in fds):
+                return expr.func(*(f[0] for f in fds)), Dimension(1)
+            else:
+                return (expr.func(*(f[0] for f in fds)),
+                        *(d[1] for d in fds))
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..729aaf7ec7
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+from sympy import exp, sin, cos, log, tan
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+# Test case 1: exp() with dimensionless argument
+expr1 = units.second / (units.ohm * units.farad)
+result1 = SI._collect_factor_and_dimension(exp(expr1))
+print("exp(dimensionless):", result1)
+assert SI.get_dimension_system().is_dimensionless(result1[1])
+
+# Test case 2: sin() with dimensionless argument  
+result2 = SI._collect_factor_and_dimension(sin(expr1))
+print("sin(dimensionless):", result2)
+assert SI.get_dimension_system().is_dimensionless(result2[1])
+
+# Test case 3: cos() with dimensionless argument
+result3 = SI._collect_factor_and_dimension(cos(expr1))
+print("cos(dimensionless):", result3)
+assert SI.get_dimension_system().is_dimensionless(result3[1])
+
+# Test case 4: log() with dimensionless argument
+result4 = SI._collect_factor_and_dimension(log(expr1))
+print("log(dimensionless):", result4)
+assert SI.get_dimension_system().is_dimensionless(result4[1])
+
+# Test case 5: Function with dimensional argument (should preserve original behavior)
+expr_dim = units.second  # dimensional argument
+result5 = SI._collect_factor_and_dimension(exp(expr_dim))
+print("exp(dimensional):", result5)
+# Should not be dimensionless since argument has dimension
+
+# Test case 6: Nested functions
+result6 = SI._collect_factor_and_dimension(exp(sin(expr1)))
+print("exp(sin(dimensionless)):", result6)
+assert SI.get_dimension_system().is_dimensionless(result6[1])
+
+print("All tests passed!")
\ No newline at end of file
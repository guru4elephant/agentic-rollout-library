diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index 38e89c47bb..7185c6921c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
-        return self.data.year
+        return '%04d' % self.data.year
 
     def z(self):
         """Day of the year, i.e. 1 to 366."""
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4548d1f752
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+
+import datetime
+from django.utils.dateformat import DateFormat
+
+def test_year_formatting():
+    # Test cases with years that should be zero-padded
+    test_cases = [
+        datetime.date(999, 1, 1),   # Year 999 - should be "0999"
+        datetime.date(100, 1, 1),    # Year 100 - should be "0100" 
+        datetime.date(10, 1, 1),     # Year 10 - should be "0010"
+        datetime.date(1, 1, 1),      # Year 1 - should be "0001"
+        datetime.date(2023, 1, 1),   # Normal case - should be "2023"
+        datetime.date(1000, 1, 1),   # Boundary case - should be "1000"
+    ]
+    
+    print("Testing DateFormat.Y() method:")
+    print("=" * 50)
+    
+    for test_date in test_cases:
+        df = DateFormat(test_date)
+        result = df.Y()
+        print(f"Year {test_date.year}: '{result}' (type: {type(result)})")
+        
+        # Check if the result is a string with 4 digits
+        if isinstance(result, int):
+            print(f"  ❌ ERROR: Expected string, got integer")
+        elif len(str(result)) != 4:
+            print(f"  ❌ ERROR: Expected 4 digits, got {len(str(result))}")
+        elif not str(result).isdigit():
+            print(f"  ❌ ERROR: Expected all digits, got '{result}'")
+        else:
+            print(f"  ✅ OK: 4-digit year")
+
+if __name__ == "__main__":
+    test_year_formatting()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..e7888f11c9
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import datetime
+from django.utils import dateformat
+
+def test_comprehensive_year_formatting():
+    """Test the Y format specifier with various edge cases"""
+    
+    test_cases = [
+        # (year, expected_output)
+        (999, "0999"),    # 3-digit year should be zero-padded
+        (100, "0100"),    # 3-digit year should be zero-padded  
+        (99, "0099"),     # 2-digit year should be zero-padded
+        (10, "0010"),     # 2-digit year should be zero-padded
+        (9, "0009"),      # 1-digit year should be zero-padded
+        (1, "0001"),      # 1-digit year should be zero-padded
+        (1000, "1000"),   # Boundary case - exactly 4 digits
+        (1979, "1979"),   # Normal case from existing tests
+        (2023, "2023"),   # Current year
+        (2100, "2100"),   # Future year from existing tests
+        (9999, "9999"),   # Maximum 4-digit year
+    ]
+    
+    print("Comprehensive test of DateFormat.Y() method:")
+    print("=" * 60)
+    
+    all_passed = True
+    
+    for year, expected in test_cases:
+        try:
+            dt = datetime.date(year, 1, 1)
+            result = dateformat.format(dt, 'Y')
+            
+            print(f"Year {year}: expected '{expected}', got '{result}'", end="")
+            
+            if result == expected:
+                print(" ✅")
+            else:
+                print(" ❌")
+                all_passed = False
+                
+        except Exception as e:
+            print(f"Year {year}: ERROR - {e}")
+            all_passed = False
+    
+    print("=" * 60)
+    if all_passed:
+        print("All tests passed! ✅")
+    else:
+        print("Some tests failed! ❌")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    test_comprehensive_year_formatting()
\ No newline at end of file
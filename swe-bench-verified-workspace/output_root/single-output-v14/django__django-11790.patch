diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 0000000000..5316b5e645
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+from django.forms import CharField
+
+def debug_widget_attrs():
+    """Debug the widget_attrs behavior"""
+    
+    print("Debugging widget_attrs behavior...")
+    
+    # Test 1: Create a CharField with max_length=None
+    print("\n1. Testing CharField with max_length=None:")
+    char_field = CharField(max_length=None)
+    attrs = char_field.widget_attrs(char_field.widget)
+    print(f"   CharField widget_attrs result: {attrs}")
+    print(f"   'maxlength' in attrs: {'maxlength' in attrs}")
+    
+    # Test 2: Create a CharField with max_length=50
+    print("\n2. Testing CharField with max_length=50:")
+    char_field = CharField(max_length=50)
+    attrs = char_field.widget_attrs(char_field.widget)
+    print(f"   CharField widget_attrs result: {attrs}")
+    print(f"   'maxlength' in attrs: {'maxlength' in attrs}")
+    
+    # Test 3: Test AuthenticationForm with max_length=None
+    print("\n3. Testing AuthenticationForm with max_length=None:")
+    form = AuthenticationForm()
+    form.fields['username'].max_length = None
+    
+    username_field = form.fields['username']
+    extra_attrs = username_field.widget_attrs(username_field.widget)
+    print(f"   UsernameField widget_attrs result: {extra_attrs}")
+    print(f"   'maxlength' in extra_attrs: {'maxlength' in extra_attrs}")
+    
+    if extra_attrs:
+        username_field.widget.attrs.update(extra_attrs)
+    
+    print(f"   Final widget attrs: {username_field.widget.attrs}")
+
+if __name__ == '__main__':
+    debug_widget_attrs()
\ No newline at end of file
diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index a0cfed0995..ccd9df4517 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -194,6 +194,15 @@ class AuthenticationForm(forms.Form):
         self.fields['username'].max_length = self.username_field.max_length or 254
         if self.fields['username'].label is None:
             self.fields['username'].label = capfirst(self.username_field.verbose_name)
+        
+        # Update widget attributes to include maxlength after max_length is set
+        username_field = self.fields['username']
+        extra_attrs = username_field.widget_attrs(username_field.widget)
+        if extra_attrs:
+            username_field.widget.attrs.update(extra_attrs)
+        # Remove maxlength attribute if max_length is None
+        if username_field.max_length is None and 'maxlength' in username_field.widget.attrs:
+            del username_field.widget.attrs['maxlength']
 
     def clean(self):
         username = self.cleaned_data.get('username')
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d27a05ad0a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+
+def test_authentication_form_maxlength():
+    """Test that AuthenticationForm username field has maxlength attribute"""
+    
+    # Create an AuthenticationForm instance
+    form = AuthenticationForm()
+    
+    # Get the username field widget
+    username_widget = form.fields['username'].widget
+    
+    # Check if maxlength attribute is present
+    attrs = username_widget.attrs
+    print("Username widget attributes:", attrs)
+    
+    # Check if maxlength is in the attributes
+    has_maxlength = 'maxlength' in attrs
+    print(f"Has maxlength attribute: {has_maxlength}")
+    
+    # Check the max_length value set on the field
+    max_length = form.fields['username'].max_length
+    print(f"Field max_length: {max_length}")
+    
+    if has_maxlength:
+        print(f"Maxlength value: {attrs['maxlength']}")
+        if attrs['maxlength'] == str(max_length):
+            print("✓ Maxlength attribute correctly set")
+        else:
+            print(f"✗ Maxlength attribute mismatch: {attrs['maxlength']} != {max_length}")
+    else:
+        print("✗ Maxlength attribute missing from widget")
+    
+    return has_maxlength
+
+if __name__ == '__main__':
+    print("Testing AuthenticationForm username field maxlength attribute...")
+    result = test_authentication_form_maxlength()
+    sys.exit(0 if result else 1)
\ No newline at end of file
diff --git a/test_auth_form_fix.py b/test_auth_form_fix.py
new file mode 100644
index 0000000000..1748bdc9bd
--- /dev/null
+++ b/test_auth_form_fix.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+from django.test import SimpleTestCase
+
+class AuthenticationFormMaxLengthTest(SimpleTestCase):
+    """Test that AuthenticationForm username field has maxlength attribute"""
+    
+    def test_username_field_has_maxlength_attribute(self):
+        """Test that username field includes maxlength HTML attribute"""
+        form = AuthenticationForm()
+        username_widget = form.fields['username'].widget
+        attrs = username_widget.attrs
+        
+        # Check that maxlength attribute is present
+        self.assertIn('maxlength', attrs)
+        
+        # Check that maxlength value matches field's max_length
+        max_length = form.fields['username'].max_length
+        self.assertEqual(attrs['maxlength'], str(max_length))
+        
+        # Check that other expected attributes are still present
+        expected_attrs = {'autofocus', 'autocapitalize', 'autocomplete', 'maxlength'}
+        actual_attrs = set(attrs.keys())
+        self.assertTrue(expected_attrs.issubset(actual_attrs))
+        
+        # Check specific attribute values
+        self.assertEqual(attrs['autocapitalize'], 'none')
+        self.assertEqual(attrs['autocomplete'], 'username')
+    
+    def test_form_rendering_includes_maxlength(self):
+        """Test that form rendering includes maxlength in HTML"""
+        form = AuthenticationForm()
+        html = form.as_p()
+        
+        # Check that maxlength attribute is in the rendered HTML
+        self.assertIn('maxlength="150"', html)
+        
+        # Check that other attributes are still present
+        self.assertIn('autocapitalize="none"', html)
+        self.assertIn('autocomplete="username"', html)
+        self.assertIn('autofocus', html)
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..e658fa9ae7
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,91 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+from django.contrib.auth.models import User
+
+def test_authentication_form_maxlength_comprehensive():
+    """Comprehensive test for AuthenticationForm username field maxlength attribute"""
+    
+    print("Testing AuthenticationForm username field maxlength attribute comprehensively...")
+    
+    # Test 1: Default AuthenticationForm
+    print("\n1. Testing default AuthenticationForm:")
+    form = AuthenticationForm()
+    username_widget = form.fields['username'].widget
+    attrs = username_widget.attrs
+    
+    has_maxlength = 'maxlength' in attrs
+    max_length = form.fields['username'].max_length
+    
+    print(f"   Has maxlength attribute: {has_maxlength}")
+    print(f"   Field max_length: {max_length}")
+    
+    if has_maxlength:
+        print(f"   Maxlength value: {attrs['maxlength']}")
+        if attrs['maxlength'] == str(max_length):
+            print("   ✓ Maxlength attribute correctly set")
+        else:
+            print(f"   ✗ Maxlength attribute mismatch: {attrs['maxlength']} != {max_length}")
+            return False
+    else:
+        print("   ✗ Maxlength attribute missing from widget")
+        return False
+    
+    # Test 2: Check that other attributes are still present
+    print("\n2. Testing that other attributes are preserved:")
+    expected_attrs = {'autofocus', 'autocapitalize', 'autocomplete', 'maxlength'}
+    actual_attrs = set(attrs.keys())
+    print(f"   Expected attributes: {expected_attrs}")
+    print(f"   Actual attributes: {actual_attrs}")
+    
+    if expected_attrs.issubset(actual_attrs):
+        print("   ✓ All expected attributes are present")
+    else:
+        print("   ✗ Some expected attributes are missing")
+        return False
+    
+    # Test 3: Check attribute values
+    print("\n3. Testing attribute values:")
+    if attrs['autocapitalize'] == 'none':
+        print("   ✓ autocapitalize is 'none'")
+    else:
+        print(f"   ✗ autocapitalize is '{attrs['autocapitalize']}', expected 'none'")
+        return False
+        
+    if attrs['autocomplete'] == 'username':
+        print("   ✓ autocomplete is 'username'")
+    else:
+        print(f"   ✗ autocomplete is '{attrs['autocomplete']}', expected 'username'")
+        return False
+    
+    print("\n✓ All tests passed!")
+    return True
+
+if __name__ == '__main__':
+    success = test_authentication_form_maxlength_comprehensive()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_custom_user.py b/test_custom_user.py
new file mode 100644
index 0000000000..c2e673e1b3
--- /dev/null
+++ b/test_custom_user.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import models
+from django.contrib.auth.models import AbstractUser
+
+# Define a custom user model with different username max_length first
+class CustomUser(AbstractUser):
+    username = models.CharField(max_length=75, unique=True)
+
+# Configure Django settings with custom user model
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+        AUTH_USER_MODEL='test_custom_user.CustomUser',
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+
+def test_custom_user_maxlength():
+    """Test AuthenticationForm with custom user model having different max_length"""
+    
+    print("Testing AuthenticationForm with custom user model...")
+    
+    # Create an AuthenticationForm instance
+    form = AuthenticationForm()
+    username_widget = form.fields['username'].widget
+    attrs = username_widget.attrs
+    
+    has_maxlength = 'maxlength' in attrs
+    max_length = form.fields['username'].max_length
+    
+    print(f"Has maxlength attribute: {has_maxlength}")
+    print(f"Field max_length: {max_length}")
+    
+    if has_maxlength:
+        print(f"Maxlength value: {attrs['maxlength']}")
+        if attrs['maxlength'] == str(max_length):
+            print("✓ Maxlength attribute correctly set for custom user model")
+            return True
+        else:
+            print(f"✗ Maxlength attribute mismatch: {attrs['maxlength']} != {max_length}")
+            return False
+    else:
+        print("✗ Maxlength attribute missing from widget for custom user model")
+        return False
+
+if __name__ == '__main__':
+    success = test_custom_user_maxlength()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..cd4e2dc897
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,122 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+
+def test_edge_cases():
+    """Test edge cases for AuthenticationForm maxlength attribute"""
+    
+    print("Testing edge cases for AuthenticationForm maxlength attribute...")
+    
+    # Test 1: Normal case
+    print("\n1. Testing normal case:")
+    form = AuthenticationForm()
+    username_widget = form.fields['username'].widget
+    attrs = username_widget.attrs
+    
+    has_maxlength = 'maxlength' in attrs
+    max_length = form.fields['username'].max_length
+    
+    print(f"   Has maxlength attribute: {has_maxlength}")
+    print(f"   Field max_length: {max_length}")
+    
+    if has_maxlength and attrs['maxlength'] == str(max_length):
+        print("   ✓ Normal case works correctly")
+    else:
+        print("   ✗ Normal case failed")
+        return False
+    
+    # Test 2: Manually set different max_length
+    print("\n2. Testing manually set max_length:")
+    form = AuthenticationForm()
+    form.fields['username'].max_length = 50  # Set a different value
+    
+    # Re-update widget attributes
+    username_field = form.fields['username']
+    extra_attrs = username_field.widget_attrs(username_field.widget)
+    if extra_attrs:
+        username_field.widget.attrs.update(extra_attrs)
+    
+    attrs = username_field.widget.attrs
+    max_length = form.fields['username'].max_length
+    
+    print(f"   Has maxlength attribute: {'maxlength' in attrs}")
+    print(f"   Field max_length: {max_length}")
+    
+    if 'maxlength' in attrs and attrs['maxlength'] == str(max_length):
+        print("   ✓ Manual max_length update works correctly")
+    else:
+        print("   ✗ Manual max_length update failed")
+        return False
+    
+    # Test 3: Check that maxlength is not added when username field has max_length=None
+    # This would simulate a custom user model with username max_length=None
+    print("\n3. Testing username field with max_length=None:")
+    
+    # Create a mock form that simulates a user model with username max_length=None
+    from django.contrib.auth.forms import AuthenticationForm
+    from unittest.mock import Mock
+    
+    # Create a mock user model field with max_length=None
+    mock_username_field = Mock()
+    mock_username_field.max_length = None
+    mock_username_field.verbose_name = "username"
+    
+    # Create a mock user model
+    mock_user_model = Mock()
+    mock_user_model.USERNAME_FIELD = "username"
+    mock_user_model._meta = Mock()
+    mock_user_model._meta.get_field = Mock(return_value=mock_username_field)
+    
+    # Patch the UserModel to use our mock
+    import django.contrib.auth.forms as auth_forms
+    original_user_model = auth_forms.UserModel
+    auth_forms.UserModel = mock_user_model
+    
+    try:
+        form = AuthenticationForm()
+        username_widget = form.fields['username'].widget
+        attrs = username_widget.attrs
+        
+        print(f"   Has maxlength attribute: {'maxlength' in attrs}")
+        print(f"   Field max_length: {form.fields['username'].max_length}")
+        
+        if 'maxlength' not in attrs:
+            print("   ✓ maxlength correctly omitted when max_length is None")
+        else:
+            print("   ✗ maxlength should not be present when max_length is None")
+            return False
+    finally:
+        # Restore original UserModel
+        auth_forms.UserModel = original_user_model
+    
+    print("\n✓ All edge case tests passed!")
+    return True
+
+if __name__ == '__main__':
+    success = test_edge_cases()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6f098cb357
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+import sympy
+from sympy import symbols, trigsimp, cos, sin
+from sympy.algebras.quaternion import Quaternion
+
+print('Sympy version: ', sympy.__version__)
+
+x = symbols('x')
+q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+result = trigsimp(q.to_rotation_matrix())
+print("Result:")
+print(result)
+
+print("\nExpected one of the sin(x) to be negative")
+print("Looking at the matrix, we should see:")
+print("Matrix([")
+print("[1,      0,      0],")
+print("[0, cos(x), -sin(x)],")
+print("[0, sin(x), cos(x)]])")
\ No newline at end of file
diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py
index b84e7cb95a..8d7f2b4bac 100644
--- a/sympy/algebras/quaternion.py
+++ b/sympy/algebras/quaternion.py
@@ -527,12 +527,12 @@ def to_rotation_matrix(self, v=None):
         m01 = 2*s*(q.b*q.c - q.d*q.a)
         m02 = 2*s*(q.b*q.d + q.c*q.a)
 
-        m10 = 2*s*(q.b*q.c + q.d*q.a)
+        m10 = 2*s*(q.b*q.c - q.d*q.a)
         m11 = 1 - 2*s*(q.b**2 + q.d**2)
-        m12 = 2*s*(q.c*q.d + q.b*q.a)
+        m12 = 2*s*(q.c*q.d - q.b*q.a)
 
         m20 = 2*s*(q.b*q.d - q.c*q.a)
-        m21 = 2*s*(q.c*q.d + q.b*q.a)
+        m21 = 2*s*(q.c*q.d - q.b*q.a)
         m22 = 1 - 2*s*(q.b**2 + q.c**2)
 
         if not v:
diff --git a/test_rotation_matrix.py b/test_rotation_matrix.py
new file mode 100644
index 0000000000..0e0dd75821
--- /dev/null
+++ b/test_rotation_matrix.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, trigsimp, cos, sin, pi, simplify
+from sympy.algebras.quaternion import Quaternion
+
+# Test case 1: Rotation around x-axis by angle x
+x = symbols('x')
+q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)
+result_x = trigsimp(q_x.to_rotation_matrix())
+print("Rotation around x-axis:")
+print(result_x)
+print()
+
+# Expected for rotation around x-axis:
+# [1,      0,      0]
+# [0, cos(x), -sin(x)]
+# [0, sin(x), cos(x)]
+print("Expected for rotation around x-axis:")
+print("Matrix([[1, 0, 0], [0, cos(x), -sin(x)], [0, sin(x), cos(x)]])")
+print()
+
+# Test case 2: Specific angle value to verify
+angle = pi/4  # 45 degrees
+q_test = Quaternion(cos(angle/2), sin(angle/2), 0, 0)
+result_test = simplify(q_test.to_rotation_matrix())
+print(f"Rotation around x-axis by {angle} radians:")
+print(result_test)
+print()
+
+# Expected values for 45 degree rotation
+cos_45 = cos(angle)
+sin_45 = sin(angle)
+print(f"Expected values: cos({angle}) = {cos_45}, sin({angle}) = {sin_45}")
\ No newline at end of file
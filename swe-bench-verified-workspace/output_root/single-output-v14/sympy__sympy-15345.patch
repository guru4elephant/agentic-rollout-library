diff --git a/debug_function.py b/debug_function.py
new file mode 100644
index 0000000000..c2d959ccaf
--- /dev/null
+++ b/debug_function.py
@@ -0,0 +1,15 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+
+# Debug the function printing
+x = symbols('x')
+max_expr = Max(x, 2)
+
+printer = MCodePrinter()
+print("Known functions:", printer.known_functions.keys())
+print("Max function name:", max_expr.func.__name__)
+print("Is Max in known_functions?", max_expr.func.__name__ in printer.known_functions)
+
+# Let's see what _print_Function does
+result = printer._print_Function(max_expr)
+print("_print_Function result:", result)
\ No newline at end of file
diff --git a/debug_is_function.py b/debug_is_function.py
new file mode 100644
index 0000000000..a3735689ed
--- /dev/null
+++ b/debug_is_function.py
@@ -0,0 +1,9 @@
+from sympy import symbols, Max
+
+# Debug the is_Function attribute
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print("is_Function:", max_expr.is_Function)
+print("func.__name__:", max_expr.func.__name__)
+print("func:", max_expr.func)
\ No newline at end of file
diff --git a/debug_mathematica_code.py b/debug_mathematica_code.py
new file mode 100644
index 0000000000..aa92060e14
--- /dev/null
+++ b/debug_mathematica_code.py
@@ -0,0 +1,13 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import mathematica_code, MCodePrinter
+
+# Debug the mathematica_code function
+x = symbols('x')
+max_expr = Max(x, 2)
+
+printer = MCodePrinter()
+print("Direct printer result:", printer.doprint(max_expr))
+print("mathematica_code result:", mathematica_code(max_expr))
+
+# Let's see what _print method is being called
+print("_print result:", printer._print(max_expr))
\ No newline at end of file
diff --git a/debug_max.py b/debug_max.py
new file mode 100644
index 0000000000..014f3f8fd9
--- /dev/null
+++ b/debug_max.py
@@ -0,0 +1,11 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import mathematica_code
+
+# Debug Max function
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print("Type of Max:", type(max_expr))
+print("Max expression:", max_expr)
+print("Max function name:", max_expr.func.__name__)
+print("Max args:", max_expr.args)
\ No newline at end of file
diff --git a/debug_mcode_method.py b/debug_mcode_method.py
new file mode 100644
index 0000000000..55da27cb32
--- /dev/null
+++ b/debug_mcode_method.py
@@ -0,0 +1,12 @@
+from sympy import symbols, Max
+
+# Check if Max has _mcode method
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print("Has _mcode method:", hasattr(max_expr, '_mcode'))
+if hasattr(max_expr, '_mcode'):
+    print("_mcode method:", getattr(max_expr, '_mcode'))
+
+# Check what methods are available
+print("Available methods:", [m for m in dir(max_expr) if 'print' in m.lower() or 'code' in m.lower()])
\ No newline at end of file
diff --git a/debug_print_method.py b/debug_print_method.py
new file mode 100644
index 0000000000..52bb9c6fd6
--- /dev/null
+++ b/debug_print_method.py
@@ -0,0 +1,14 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+
+# Debug the printing method
+x = symbols('x')
+max_expr = Max(x, 2)
+
+printer = MCodePrinter()
+print("Print method:", max_expr._printmethod)
+print("Has _mcode method?", hasattr(max_expr, '_mcode'))
+
+# Check what method gets called
+result = printer._print(max_expr)
+print("_print result:", result)
\ No newline at end of file
diff --git a/debug_print_method2.py b/debug_print_method2.py
new file mode 100644
index 0000000000..511573cfed
--- /dev/null
+++ b/debug_print_method2.py
@@ -0,0 +1,26 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+
+# Debug the printing method
+x = symbols('x')
+max_expr = Max(x, 2)
+
+printer = MCodePrinter()
+
+# Check available attributes
+print("Available attributes:", [attr for attr in dir(max_expr) if 'print' in attr.lower()])
+
+# Try to see what printing methods exist
+try:
+    result = printer._print(max_expr)
+    print("_print result:", result)
+except Exception as e:
+    print("Error with _print:", e)
+    
+# Try direct mathematica_code
+from sympy.printing.mathematica import mathematica_code
+try:
+    result = mathematica_code(max_expr)
+    print("mathematica_code result:", result)
+except Exception as e:
+    print("Error with mathematica_code:", e)
\ No newline at end of file
diff --git a/debug_print_method_called.py b/debug_print_method_called.py
new file mode 100644
index 0000000000..bac4645af6
--- /dev/null
+++ b/debug_print_method_called.py
@@ -0,0 +1,23 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+
+# Debug which print method is being called
+x = symbols('x')
+max_expr = Max(x, 2)
+
+printer = MCodePrinter()
+
+# Let's monkey patch the _print method to see what's happening
+original_print = printer._print
+
+def debug_print(expr, **kwargs):
+    print(f"Printing: {expr} (type: {type(expr)})")
+    result = original_print(expr, **kwargs)
+    print(f"Result: {result}")
+    return result
+
+printer._print = debug_print
+
+print("Calling doprint:")
+result = printer.doprint(max_expr)
+print("Final result:", result)
\ No newline at end of file
diff --git a/debug_print_trace.py b/debug_print_trace.py
new file mode 100644
index 0000000000..f93ab4c489
--- /dev/null
+++ b/debug_print_trace.py
@@ -0,0 +1,27 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+
+# Debug the function printing trace
+x = symbols('x')
+max_expr = Max(x, 2)
+
+printer = MCodePrinter()
+
+# Let's see what happens step by step
+print("1. Checking if Max is in known_functions:", max_expr.func.__name__ in printer.known_functions)
+print("2. Known functions:", list(printer.known_functions.keys()))
+
+# Let's manually call the _print_Function method from mathematica.py
+print("3. Calling mathematica _print_Function:")
+result = printer._print_Function(max_expr)
+print("   Result:", result)
+
+# Let's see what the parent class _print_Function would do
+from sympy.printing.codeprinter import CodePrinter
+parent_printer = CodePrinter()
+print("4. Calling parent _print_Function:")
+try:
+    parent_result = parent_printer._print_Function(max_expr)
+    print("   Result:", parent_result)
+except Exception as e:
+    print("   Error:", e)
\ No newline at end of file
diff --git a/debug_printmethod.py b/debug_printmethod.py
new file mode 100644
index 0000000000..c3c89494d6
--- /dev/null
+++ b/debug_printmethod.py
@@ -0,0 +1,17 @@
+from sympy import symbols, Max
+
+# Check if Max has _printmethod attribute
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print("Has _printmethod attribute:", hasattr(max_expr, '_printmethod'))
+if hasattr(max_expr, '_printmethod'):
+    print("_printmethod value:", getattr(max_expr, '_printmethod'))
+
+# Check the class hierarchy
+print("MRO:", type(max_expr).__mro__)
+
+# Check if any class in MRO has _printmethod defined
+for cls in type(max_expr).__mro__:
+    if hasattr(cls, '_printmethod'):
+        print(f"Class {cls} has _printmethod: {getattr(cls, '_printmethod')}")
\ No newline at end of file
diff --git a/debug_specific_print_methods.py b/debug_specific_print_methods.py
new file mode 100644
index 0000000000..ec9a2b6044
--- /dev/null
+++ b/debug_specific_print_methods.py
@@ -0,0 +1,22 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+
+# Check if specific print methods exist
+x = symbols('x')
+max_expr = Max(x, 2)
+
+printer = MCodePrinter()
+
+print("Has _print_Application:", hasattr(printer, '_print_Application'))
+print("Has _print_Max:", hasattr(printer, '_print_Max'))
+print("Has _print_MinMaxBase:", hasattr(printer, '_print_MinMaxBase'))
+
+# Let's see what the printer does when it encounters Max
+print("Calling _print on Max:")
+result = printer._print(max_expr)
+print("Result:", result)
+
+# Let's see what happens if we force it to use _print_Function
+print("Calling _print_Function directly:")
+result = printer._print_Function(max_expr)
+print("Result:", result)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..01a5299c24
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,8 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import mathematica_code
+
+# Reproduce the issue
+x = symbols('x')
+result = mathematica_code(Max(x, 2))
+print("Result:", result)
+print("Expected: 'Max[x,2]'")
\ No newline at end of file
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..3318d46a27 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -31,6 +31,8 @@
     "asech": [(lambda x: True, "ArcSech")],
     "acsch": [(lambda x: True, "ArcCsch")],
     "conjugate": [(lambda x: True, "Conjugate")],
+    "Max": [(lambda *x: True, "Max")],
+    "Min": [(lambda *x: True, "Min")],
 
 }
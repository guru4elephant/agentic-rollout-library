diff --git a/debug_case.py b/debug_case.py
new file mode 100644
index 0000000000..b75e851c4e
--- /dev/null
+++ b/debug_case.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.html import urlize
+import html
+
+# Debug the specific failing case
+test_input = 'site.com/?a=1&amp;'
+print(f"Input: {test_input}")
+
+# Let's manually trace what happens in the urlize function
+print(f"Contains '&': {'&' in test_input}")
+print(f"Contains ';': {';' in test_input}")
+
+# Check what html.unescape does
+unescaped = html.unescape(test_input)
+print(f"Unescaped: {unescaped}")
+
+# Check trailing punctuation stripping
+TRAILING_PUNCTUATION_CHARS = '.,:;!'
+stripped = unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
+print(f"Stripped: {stripped}")
+print(f"Chars to remove: {len(unescaped) - len(stripped)}")
+
+# Test the actual result
+result = urlize(test_input)
+print(f"Result: {result}")
\ No newline at end of file
diff --git a/debug_regression.py b/debug_regression.py
new file mode 100644
index 0000000000..01a8acb0de
--- /dev/null
+++ b/debug_regression.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.html import urlize
+import re
+
+# Debug the regression case
+test_input = 'site.com?q=test'
+print(f"Input: {test_input}")
+
+# Let's check what the regex patterns match
+simple_url_re = re.compile(r'^https?://\[?\w', re.IGNORECASE)
+simple_url_2_re = re.compile(
+    r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',
+    re.IGNORECASE
+)
+
+print(f"simple_url_re.match('{test_input}'): {simple_url_re.match(test_input)}")
+print(f"simple_url_2_re.match('{test_input}'): {simple_url_2_re.match(test_input)}")
+
+# Test the actual result
+result = urlize(test_input)
+print(f"Result: {result}")
\ No newline at end of file
diff --git a/django/utils/html.py b/django/utils/html.py
index 3bc02b8dd3..97899cb80f 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -283,8 +283,12 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
             middle_unescaped = html.unescape(middle)
             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
             if middle_unescaped != stripped:
-                trail = middle[len(stripped):] + trail
-                middle = middle[:len(stripped) - len(middle_unescaped)]
+                # Calculate the number of trailing characters to remove
+                # based on the unescaped version, but remove from the original
+                # escaped version to preserve HTML entities
+                chars_to_remove = len(middle_unescaped) - len(stripped)
+                trail = middle[-chars_to_remove:] + trail
+                middle = middle[:-chars_to_remove]
                 trimmed_something = True
         return lead, middle, trail
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..f9bca93fc7
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,97 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.html import urlize
+
+def test_original_issue():
+    """Test the exact issue reported in the GitHub issue"""
+    
+    # The exact case from the issue
+    test_input = 'Search for google.com/?q=1&lt! and see.'
+    result = urlize(test_input)
+    expected = 'Search for <a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>! and see.'
+    
+    print("=== Original Issue Test ===")
+    print(f"Input: {test_input}")
+    print(f"Output: {result}")
+    print(f"Expected: {expected}")
+    print(f"Fixed: {result == expected}")
+    
+    if result != expected:
+        print("❌ ISSUE NOT FIXED!")
+        return False
+    else:
+        print("✅ Issue fixed successfully!")
+        return True
+
+def test_regressions():
+    """Test that no regressions were introduced"""
+    
+    # Test cases that should work the same as before
+    test_cases = [
+        # Basic URLs
+        ('Visit google.com', 'Visit <a href="http://google.com">google.com</a>'),
+        ('Check example.org', 'Check <a href="http://example.org">example.org</a>'),
+        
+        # URLs with query parameters (note: query strings without paths are not detected by the current regex)
+        ('Search site.com/?q=test', 'Search <a href="http://site.com/?q=test">site.com/?q=test</a>'),
+        ('Go to example.com/path', 'Go to <a href="http://example.com/path">example.com/path</a>'),
+        
+        # URLs with punctuation
+        ('Visit google.com.', 'Visit <a href="http://google.com">google.com</a>.'),
+        ('Check example.com, please', 'Check <a href="http://example.com">example.com</a>, please'),
+        ('Test site.com!', 'Test <a href="http://site.com">site.com</a>!'),
+        
+        # URLs with wrapping punctuation
+        ('(google.com)', '(<a href="http://google.com">google.com</a>)'),
+        ('[example.org]', '[<a href="http://example.org">example.org</a>]'),
+        
+        # Email addresses
+        ('Contact me@example.com', 'Contact <a href="mailto:me@example.com">me@example.com</a>'),
+    ]
+    
+    print("\n=== Regression Tests ===")
+    all_passed = True
+    
+    for i, (test_input, expected) in enumerate(test_cases, 1):
+        result = urlize(test_input)
+        passed = result == expected
+        
+        if not passed:
+            print(f"{i}. ❌ FAILED: {test_input}")
+            print(f"   Expected: {expected}")
+            print(f"   Got:      {result}")
+        else:
+            print(f"{i}. ✅ PASSED: {test_input}")
+        
+        all_passed = all_passed and passed
+    
+    if all_passed:
+        print("✅ No regressions detected!")
+    else:
+        print("❌ Regressions detected!")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    issue_fixed = test_original_issue()
+    no_regressions = test_regressions()
+    
+    print(f"\n=== Final Result ===")
+    if issue_fixed and no_regressions:
+        print("✅ SUCCESS: Issue fixed with no regressions!")
+    else:
+        print("❌ FAILURE: Either issue not fixed or regressions introduced!")
+    
+    exit(0 if (issue_fixed and no_regressions) else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c8a3c2bbba
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from django.utils.html import urlize
+
+# Test case from the issue
+test_input = 'Search for google.com/?q=1&lt! and see.'
+result = urlize(test_input)
+print("Input:", test_input)
+print("Output:", result)
+print("Expected: 'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'")
+
+# Let's also test some edge cases
+test_cases = [
+    'Search for google.com/?q=1&lt! and see.',
+    'Visit example.com/?param=1&gt',
+    'Check out site.com/?a=1&amp;b=2',
+    'Test site.com/?q=1&lt;',
+    'Another test site.com/?q=1&gt;',
+]
+
+print("\nTesting various cases:")
+for i, test_input in enumerate(test_cases, 1):
+    result = urlize(test_input)
+    print(f"{i}. Input: {test_input}")
+    print(f"   Output: {result}")
+    print()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..d03e1dc3d0
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.html import urlize
+
+def test_edge_cases():
+    """Test edge cases for urlize with HTML entities"""
+    
+    # Test cases with various HTML entities and punctuation combinations
+    test_cases = [
+        # Basic cases
+        ('google.com/?q=1&lt!', '<a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>!'),
+        ('example.com/?p=1&gt.', '<a href="http://example.com/?p=1%3E">example.com/?p=1&gt</a>.'),
+        ('site.com/?a=1&amp;', '<a href="http://site.com/?a=1">site.com/?a=1&amp;</a>'),
+        
+        # Cases with multiple entities
+        ('test.com/?a=1&lt&amp;b=2', '<a href="http://test.com/?a=1%3C&amp;b=2">test.com/?a=1&lt&amp;b=2</a>'),
+        
+        # Cases with wrapping punctuation
+        ('(example.com/?q=1&lt)', '(<a href="http://example.com/?q=1%3C">example.com/?q=1&lt</a>)'),
+        ('[site.com/?p=1&gt]', '[<a href="http://site.com/?p=1%3E">site.com/?p=1&gt</a>]'),
+        
+        # Cases with no trailing punctuation (should remain unchanged)
+        ('google.com/?q=1&lt', '<a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>'),
+        ('example.com/?p=1&gt', '<a href="http://example.com/?p=1%3E">example.com/?p=1&gt</a>'),
+        
+        # Cases with mixed content
+        ('Text before google.com/?q=1&lt! and text after', 'Text before <a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>! and text after'),
+    ]
+    
+    print("Testing edge cases:")
+    all_passed = True
+    
+    for i, (test_input, expected) in enumerate(test_cases, 1):
+        result = urlize(test_input)
+        passed = result == expected
+        all_passed = all_passed and passed
+        
+        print(f"{i}. Input: {test_input}")
+        print(f"   Output: {result}")
+        print(f"   Expected: {expected}")
+        print(f"   Passed: {passed}")
+        
+        if not passed:
+            print(f"   ERROR: Expected '{expected}' but got '{result}'")
+        print()
+    
+    print(f"All edge case tests passed: {all_passed}")
+    return all_passed
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_tld.py b/test_tld.py
new file mode 100644
index 0000000000..3ec7fbc040
--- /dev/null
+++ b/test_tld.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.html import urlize
+import re
+
+# Test with proper TLDs
+test_cases = [
+    'site.com?q=test',
+    'example.org?p=1',
+    'google.com/search?q=test',
+    'test.net?param=value',
+]
+
+print("Testing URLs with proper TLDs:")
+for test_input in test_cases:
+    result = urlize(test_input)
+    print(f"Input: {test_input}")
+    print(f"Result: {result}")
+    print()
\ No newline at end of file
diff --git a/test_urlize_fix.py b/test_urlize_fix.py
new file mode 100644
index 0000000000..4a0b7d140d
--- /dev/null
+++ b/test_urlize_fix.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.html import urlize
+
+def test_urlize_html_entities():
+    """Test that urlize correctly handles HTML entities with trailing punctuation"""
+    
+    # Test case from the issue
+    test_input = 'Search for google.com/?q=1&lt! and see.'
+    result = urlize(test_input)
+    expected = 'Search for <a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>! and see.'
+    
+    print(f"Input: {test_input}")
+    print(f"Output: {result}")
+    print(f"Expected: {expected}")
+    print(f"Match: {result == expected}")
+    
+    # Additional test cases
+    test_cases = [
+        ('Visit example.com/?param=1&gt', 'Visit <a href="http://example.com/?param=1%3E">example.com/?param=1&gt</a>'),
+        ('Check out site.com/?a=1&amp;b=2', 'Check out <a href="http://site.com/?a=1&amp;b=2">site.com/?a=1&amp;b=2</a>'),
+        ('Test site.com/?q=1&lt;', 'Test <a href="http://site.com/?q=1%3C">site.com/?q=1&lt;</a>'),
+        ('Another test site.com/?q=1&gt;', 'Another test <a href="http://site.com/?q=1%3E">site.com/?q=1&gt;</a>'),
+    ]
+    
+    print("\nAdditional test cases:")
+    all_passed = True
+    for i, (test_input, expected) in enumerate(test_cases, 1):
+        result = urlize(test_input)
+        passed = result == expected
+        all_passed = all_passed and passed
+        print(f"{i}. Input: {test_input}")
+        print(f"   Output: {result}")
+        print(f"   Expected: {expected}")
+        print(f"   Passed: {passed}")
+        print()
+    
+    print(f"All tests passed: {all_passed}")
+    return all_passed
+
+if __name__ == "__main__":
+    test_urlize_html_entities()
\ No newline at end of file
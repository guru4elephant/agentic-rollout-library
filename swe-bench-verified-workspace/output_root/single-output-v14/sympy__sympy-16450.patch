diff --git a/debug_positive_false.py b/debug_positive_false.py
new file mode 100644
index 0000000000..6bd130b4b8
--- /dev/null
+++ b/debug_positive_false.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, posify
+
+# Debug the case where positive=False
+x = Symbol('x', finite=True, integer=True, positive=False)
+print(f"Original: x.is_positive={x.is_positive}, x.is_finite={x.is_finite}, x.is_integer={x.is_integer}")
+
+# Check if the symbol should be replaced
+print(f"x.is_positive is None: {x.is_positive is None}")
+
+# Apply posify
+xp, rep = posify(x)
+print(f"After posify: xp.is_positive={xp.is_positive}, xp.is_finite={xp.is_finite}, xp.is_integer={xp.is_integer}")
+print(f"Replacement dict: {rep}")
+
+# Check if xp is the same object as x (no replacement)
+print(f"xp is x: {xp is x}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..237219d89c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, posify
+
+# Reproduce the issue from the GitHub issue
+print("Reproducing the issue...")
+
+# Create a symbol with finite=True assumption
+x = Symbol('x', finite=True)
+print(f"Original symbol x._assumptions: {x._assumptions}")
+print(f"x.is_finite: {x.is_finite}")
+
+# Apply posify
+xp, _ = posify(x)
+print(f"After posify xp._assumptions: {xp._assumptions}")
+print(f"xp.is_finite: {xp.is_finite}")
+print(f"Type of xp.is_finite: {type(xp.is_finite)}")
+
+# Check if finite assumption is preserved
+if xp.is_finite is None:
+    print("BUG: Finite assumption was lost!")
+else:
+    print("SUCCESS: Finite assumption was preserved")
\ No newline at end of file
diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py
index c6b511f206..b272e6f16d 100644
--- a/sympy/simplify/simplify.py
+++ b/sympy/simplify/simplify.py
@@ -251,8 +251,13 @@ def posify(eq):
             eq[i] = e.subs(reps)
         return f(eq), {r: s for s, r in reps.items()}
 
-    reps = {s: Dummy(s.name, positive=True)
-                 for s in eq.free_symbols if s.is_positive is None}
+    reps = {}
+    for s in eq.free_symbols:
+        if s.is_positive is None:
+            # Preserve all original assumptions and add positive=True
+            assumptions = s.assumptions0.copy()
+            assumptions['positive'] = True
+            reps[s] = Dummy(s.name, **assumptions)
     eq = eq.subs(reps)
     return eq, {r: s for s, r in reps.items()}
 
diff --git a/test_assumptions.py b/test_assumptions.py
new file mode 100644
index 0000000000..4ae9aa15d4
--- /dev/null
+++ b/test_assumptions.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, Dummy
+
+# Test what assumptions should be preserved
+x = Symbol('x', finite=True, integer=True, rational=True, prime=True)
+
+print("Original symbol assumptions:")
+for key, value in x._assumptions.items():
+    print(f"  {key}: {value}")
+
+# Create a Dummy with only positive=True
+d1 = Dummy(x.name, positive=True)
+print("\nDummy with only positive=True:")
+for key, value in d1._assumptions.items():
+    print(f"  {key}: {value}")
+
+# Create a Dummy with all original assumptions plus positive=True
+assumptions = x.assumptions0.copy()
+assumptions['positive'] = True
+d2 = Dummy(x.name, **assumptions)
+print("\nDummy with all original assumptions plus positive=True:")
+for key, value in d2._assumptions.items():
+    print(f"  {key}: {value}")
+
+print(f"\nOriginal is_finite: {x.is_finite}")
+print(f"Dummy1 is_finite: {d1.is_finite}")
+print(f"Dummy2 is_finite: {d2.is_finite}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..83f1dc0247
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, posify
+
+# Test edge cases
+print("Testing edge cases...")
+
+# 1. Symbol with no special assumptions
+x = Symbol('x')
+print(f"Symbol with no special assumptions: x.is_finite={x.is_finite}")
+xp, _ = posify(x)
+print(f"After posify: xp.is_finite={xp.is_finite}")
+print()
+
+# 2. Symbol that's already positive
+x = Symbol('x', positive=True)
+print(f"Symbol already positive: x.is_positive={x.is_positive}, x.is_finite={x.is_finite}")
+xp, _ = posify(x)
+print(f"After posify: xp.is_positive={xp.is_positive}, xp.is_finite={xp.is_finite}")
+print()
+
+# 3. Symbol with negative assumption
+x = Symbol('x', negative=True)
+print(f"Symbol with negative: x.is_negative={x.is_negative}, x.is_finite={x.is_finite}")
+xp, _ = posify(x)
+print(f"After posify: xp.is_negative={xp.is_negative}, xp.is_finite={xp.is_finite}")
+print()
+
+# 4. Symbol with multiple assumptions
+x = Symbol('x', finite=True, integer=True, positive=False)
+print(f"Symbol with multiple assumptions: x.is_finite={x.is_finite}, x.is_integer={x.is_integer}, x.is_positive={x.is_positive}")
+xp, _ = posify(x)
+print(f"After posify: xp.is_finite={xp.is_finite}, xp.is_integer={xp.is_integer}, xp.is_positive={xp.is_positive}")
+print()
\ No newline at end of file
diff --git a/test_other_assumptions.py b/test_other_assumptions.py
new file mode 100644
index 0000000000..0dd321fa7c
--- /dev/null
+++ b/test_other_assumptions.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, posify
+
+# Test with various assumptions
+test_cases = [
+    ('finite', True),
+    ('integer', True), 
+    ('rational', True),
+    ('even', True),
+    ('odd', True),
+]
+
+for assumption, value in test_cases:
+    print(f"Testing {assumption}={value}")
+    
+    # Create symbol with the assumption
+    kwargs = {assumption: value}
+    x = Symbol('x', **kwargs)
+    
+    print(f"  Original x.is_{assumption}: {getattr(x, f'is_{assumption}')}")
+    
+    # Apply posify
+    xp, _ = posify(x)
+    
+    print(f"  After posify xp.is_{assumption}: {getattr(xp, f'is_{assumption}')}")
+    
+    # Check if assumption is preserved
+    original_val = getattr(x, f'is_{assumption}')
+    new_val = getattr(xp, f'is_{assumption}')
+    
+    if original_val == new_val:
+        print(f"  ✓ {assumption} assumption preserved")
+    else:
+        print(f"  ✗ {assumption} assumption lost: {original_val} -> {new_val}")
+    
+    print()
\ No newline at end of file
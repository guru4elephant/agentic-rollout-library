diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..f1bfc6af
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+import sys
+from requests.compat import builtin_str
+
+# Test the issue described in the GitHub issue
+method_bytes = b'GET'
+print(f"Original method bytes: {method_bytes}")
+print(f"Type: {type(method_bytes)}")
+
+# This is what happens in sessions.py line 428
+method_str = builtin_str(method_bytes)
+print(f"After builtin_str conversion: {method_str}")
+print(f"Type: {type(method_str)}")
+
+# Show what happens when we try to use this method string
+print(f"Method upper(): {method_str.upper()}")
+
+# This should demonstrate the problem - it becomes "b'GET'" instead of "GET"
+if method_str == "b'GET'":
+    print("BUG CONFIRMED: builtin_str converts b'GET' to \"b'GET'\"")
+else:
+    print("No issue found")
+
+# Test with regular string to show expected behavior
+method_string = 'GET'
+print(f"\nRegular string: {method_string}")
+print(f"Type: {type(method_string)}")
+method_str2 = builtin_str(method_string)
+print(f"After builtin_str conversion: {method_str2}")
+print(f"Type: {type(method_str2)}")
\ No newline at end of file
diff --git a/requests/models.py b/requests/models.py
index 3f6a4f92..76997439 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -329,7 +329,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         """Prepares the given HTTP method."""
         self.method = method
         if self.method is not None:
-            self.method = self.method.upper()
+            self.method = to_native_string(self.method).upper()
 
     def prepare_url(self, url, params):
         """Prepares the given HTTP URL."""
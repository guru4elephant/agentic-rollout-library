diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3964ac4397
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y
+from sympy.printing.latex import latex
+
+# Reproduce the issue
+subs_expr = 3*Subs(-x+y, (x,), (1,))
+latex_output = latex(subs_expr)
+
+print("Expression:", subs_expr)
+print("LaTeX output:", latex_output)
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8743723ea0..8ef8627f8a 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -698,7 +698,7 @@ def _print_Derivative(self, expr):
 
     def _print_Subs(self, subs):
         expr, old, new = subs.args
-        latex_expr = self._print(expr)
+        latex_expr = self.parenthesize(expr, PRECEDENCE['Mul'])
         latex_old = (self._print(e) for e in old)
         latex_new = (self._print(e) for e in new)
         latex_subs = r'\\ '.join(
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..e097df9761
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y, z
+from sympy.printing.latex import latex
+
+# Test various edge cases
+test_cases = [
+    # Original issue case
+    3*Subs(-x+y, (x,), (1,)),
+    
+    # Simple expression (should not need parentheses)
+    Subs(x, (x,), (1,)),
+    
+    # Multiplication case (should not need parentheses)
+    Subs(x*y, (x,), (1,)),
+    
+    # Complex expression (should need parentheses)
+    Subs(x+y*z, (x,), (1,)),
+    
+    # Multiple variables
+    Subs(x+y, (x, y), (1, 2)),
+    
+    # Nested operations
+    Subs((x+y)*z, (x,), (1,)),
+]
+
+for i, expr in enumerate(test_cases):
+    latex_output = latex(expr)
+    print(f"Test case {i+1}: {expr}")
+    print(f"LaTeX output: {latex_output}")
+    print()
\ No newline at end of file
diff --git a/test_precedence.py b/test_precedence.py
new file mode 100644
index 0000000000..6b57ca7ba8
--- /dev/null
+++ b/test_precedence.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y, z
+from sympy.printing.latex import latex
+from sympy.printing.precedence import precedence
+
+# Test various expressions to see their precedence
+expressions = [
+    x,           # Symbol (Atom)
+    x + y,       # Add
+    x * y,       # Mul  
+    x ** y,      # Pow
+    -x,          # Mul (unary minus)
+    -x + y,      # Add
+    (x + y) * z, # Mul containing Add
+]
+
+print("Testing expression precedences:")
+for expr in expressions:
+    prec = precedence(expr)
+    latex_output = latex(Subs(expr, (x,), (1,)))
+    print(f"{expr} -> precedence: {prec} -> LaTeX: {latex_output}")
+
+print("\nTesting multiplication context:")
+for expr in expressions:
+    prec = precedence(expr)
+    latex_output = latex(3 * Subs(expr, (x,), (1,)))
+    print(f"3*Subs({expr}) -> LaTeX: {latex_output}")
\ No newline at end of file
diff --git a/test_traditional_precedence.py b/test_traditional_precedence.py
new file mode 100644
index 0000000000..eec6fd5b38
--- /dev/null
+++ b/test_traditional_precedence.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y, z
+from sympy.printing.precedence import precedence_traditional
+
+# Test various expressions to see their traditional precedence
+expressions = [
+    x,           # Symbol (Atom)
+    x + y,       # Add
+    x * y,       # Mul  
+    x ** y,      # Pow
+    -x,          # Mul (unary minus)
+    -x + y,      # Add
+    (x + y) * z, # Mul containing Add
+]
+
+print("Testing traditional precedence:")
+for expr in expressions:
+    prec = precedence_traditional(expr)
+    print(f"{expr} -> traditional precedence: {prec}")
\ No newline at end of file
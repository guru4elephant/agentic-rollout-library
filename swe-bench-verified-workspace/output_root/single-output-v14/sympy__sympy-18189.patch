diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..1d0d043b6f
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, diophantine
+
+# Debug the issue step by step
+m, n = symbols('m n')
+
+print("Variables in equation:")
+eq = n**4 + m**4 - 2**4 - 3**4
+print(f"Equation: {eq}")
+print(f"Free symbols: {eq.free_symbols}")
+
+print("\nTesting default behavior (no syms):")
+result_default = diophantine(eq, permute=True)
+print(f"Result: {result_default}")
+print(f"Number of solutions: {len(result_default)}")
+
+print("\nTesting syms=(m, n):")
+result1 = diophantine(eq, syms=(m, n), permute=True)
+print(f"Result: {result1}")
+print(f"Number of solutions: {len(result1)}")
+
+print("\nTesting syms=(n, m):")
+result2 = diophantine(eq, syms=(n, m), permute=True)
+print(f"Result: {result2}")
+print(f"Number of solutions: {len(result2)}")
+
+# Check if the recursive call is missing permute
+print("\nTesting recursive call without permute:")
+result_no_permute = diophantine(eq)  # No permute parameter
+print(f"Result without permute: {result_no_permute}")
+print(f"Number of solutions without permute: {len(result_no_permute)}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..08ea050bc6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, diophantine
+
+# Reproduce the issue from the GitHub issue
+m, n = symbols('m n')
+
+# Test case 1: syms=(m, n), permute=True
+print("Testing syms=(m, n), permute=True:")
+result1 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True)
+print(f"Result: {result1}")
+print(f"Number of solutions: {len(result1)}")
+
+print("\nTesting syms=(n, m), permute=True:")
+# Test case 2: syms=(n, m), permute=True
+result2 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True)
+print(f"Result: {result2}")
+print(f"Number of solutions: {len(result2)}")
+
+# Check if results are different
+if result1 != result2:
+    print("\n❌ ISSUE REPRODUCED: Results are different depending on syms order!")
+    print(f"Difference: {result1.symmetric_difference(result2)}")
+else:
+    print("\n✅ Results are the same - issue might be fixed")
\ No newline at end of file
diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..b43f5c1dcf 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             if syms != var:
                 dict_sym_index = dict(zip(syms, range(len(syms))))
                 return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+                            for t in diophantine(eq, param, permute=permute)}
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..1ca9886ab5
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, diophantine
+
+# Test edge cases to ensure our fix is robust
+m, n, x, y = symbols('m n x y')
+
+print("Testing various edge cases:")
+
+# Test 1: Simple equation with different syms orders
+print("\n1. Simple equation x^2 + y^2 = 5:")
+eq1 = x**2 + y**2 - 5
+result1a = diophantine(eq1, syms=(x, y), permute=True)
+result1b = diophantine(eq1, syms=(y, x), permute=True)
+print(f"  syms=(x, y): {result1a}")
+print(f"  syms=(y, x): {result1b}")
+print(f"  Results match: {result1a == result1b}")
+
+# Test 2: Equation with more variables
+print("\n2. Equation with more variables x^2 + y^2 + z^2 = 14:")
+z = symbols('z')
+eq2 = x**2 + y**2 + z**2 - 14
+result2a = diophantine(eq2, syms=(x, y, z), permute=True)
+result2b = diophantine(eq2, syms=(z, x, y), permute=True)
+print(f"  syms=(x, y, z): {len(result2a)} solutions")
+print(f"  syms=(z, x, y): {len(result2b)} solutions")
+print(f"  Results match: {result2a == result2b}")
+
+# Test 3: Original issue equation with permute=False
+print("\n3. Original equation with permute=False:")
+eq3 = n**4 + m**4 - 2**4 - 3**4
+result3a = diophantine(eq3, syms=(m, n), permute=False)
+result3b = diophantine(eq3, syms=(n, m), permute=False)
+print(f"  syms=(m, n): {result3a}")
+print(f"  syms=(n, m): {result3b}")
+print(f"  Results match: {result3a == result3b}")
+
+# Test 4: Different variable orders should give same number of solutions
+print("\n4. Variable order consistency check:")
+all_orders = [
+    (m, n),
+    (n, m)
+]
+results = []
+for order in all_orders:
+    result = diophantine(eq3, syms=order, permute=True)
+    results.append(len(result))
+    print(f"  syms={order}: {len(result)} solutions")
+
+print(f"  All orders have same number of solutions: {len(set(results)) == 1}")
+
+print("\n✅ All edge case tests completed!")
\ No newline at end of file
diff --git a/test_subset_syms.py b/test_subset_syms.py
new file mode 100644
index 0000000000..146d6a4afb
--- /dev/null
+++ b/test_subset_syms.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, diophantine
+
+# Test case where syms is a subset of variables
+x, y, z = symbols('x y z')
+
+print("Testing subset syms parameter:")
+
+# Equation with 3 variables but only specifying 2 in syms
+eq = x**2 + y**2 + z**2 - 14
+print(f"Equation: {eq} = 0")
+
+# Test with different syms subsets
+result1 = diophantine(eq, syms=(x, y), permute=True)
+result2 = diophantine(eq, syms=(y, x), permute=True)
+
+print(f"syms=(x, y): {len(result1)} solutions")
+print(f"syms=(y, x): {len(result2)} solutions")
+print(f"Results have same number of solutions: {len(result1) == len(result2)}")
+
+# The solutions should be different in ordering but represent the same mathematical solutions
+print("\nThis is expected behavior since syms is a subset of variables")
\ No newline at end of file
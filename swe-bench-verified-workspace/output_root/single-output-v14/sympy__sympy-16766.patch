diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..12a984f706
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+from sympy import *
+from sympy.printing.pycode import pycode
+
+# Reproduce the issue described in the GitHub issue
+p = IndexedBase("p")
+
+print("Testing pycode with Indexed expression:")
+result = pycode(p[0])
+print(result)
+
+# Let's also test with multiple indices
+print("\nTesting with multiple indices:")
+result2 = pycode(p[1, 2])
+print(result2)
\ No newline at end of file
diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index a3f0310735..af00750f2b 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -357,6 +357,13 @@ def _print_Not(self, expr):
         PREC = precedence(expr)
         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)
 
+    def _print_Indexed(self, expr):
+        base, *indices = expr.args
+        return "{}[{}]".format(self._print(base), ", ".join([self._print(ind) for ind in indices]))
+
+    def _print_IndexedBase(self, expr):
+        return self._print(expr.label)
+
 
 for k in PythonCodePrinter._kf:
     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)
diff --git a/test_base_type.py b/test_base_type.py
new file mode 100644
index 0000000000..b8f6a42aab
--- /dev/null
+++ b/test_base_type.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python3
+
+from sympy import *
+
+# Test the type of IndexedBase
+p = IndexedBase("p")
+indexed_expr = p[0]
+
+print("Base:", indexed_expr.base)
+print("Base type:", type(indexed_expr.base))
+print("Base class:", indexed_expr.base.__class__.__name__)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3ebd9c89c6
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+
+from sympy import *
+from sympy.printing.pycode import pycode
+
+# Test edge cases for Indexed expressions
+x, y, i, j = symbols('x y i j')
+p = IndexedBase("p")
+
+print("Testing various edge cases:")
+print("1. Single index:", pycode(p[0]))
+print("2. Multiple indices:", pycode(p[1, 2]))
+print("3. Symbolic indices:", pycode(p[x, y]))
+print("4. Mixed indices:", pycode(p[0, y, 2]))
+print("5. Expression indices:", pycode(p[x + 1, y * 2]))
+
+# Test with different base names
+q = IndexedBase("my_array")
+print("6. Different base name:", pycode(q[i, j]))
+
+# Test with numeric expressions
+print("7. Numeric expression indices:", pycode(p[2*x + 1, 3*y - 1]))
\ No newline at end of file
diff --git a/test_existing_functionality.py b/test_existing_functionality.py
new file mode 100644
index 0000000000..ccd12bbe6b
--- /dev/null
+++ b/test_existing_functionality.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from sympy import *
+from sympy.printing.pycode import pycode
+
+# Test that existing functionality still works
+x, y = symbols('x y')
+
+print("Testing existing functionality:")
+print("1. Basic expression:", pycode(x + y))
+print("2. Function call:", pycode(sin(x)))
+print("3. Power:", pycode(x**2))
+print("4. Complex expression:", pycode(exp(x) + cos(y)))
+
+# Test that Indexed expressions still work alongside regular expressions
+p = IndexedBase("p")
+print("5. Mixed regular and indexed:", pycode(x + p[0] + y))
\ No newline at end of file
diff --git a/test_github_issue_example.py b/test_github_issue_example.py
new file mode 100644
index 0000000000..ae708c80aa
--- /dev/null
+++ b/test_github_issue_example.py
@@ -0,0 +1,9 @@
+#!/usr/bin/env python3
+
+from sympy import *
+from sympy.printing.pycode import pycode
+
+# Exact example from GitHub issue
+p = IndexedBase("p")
+result = pycode(p[0])
+print("Result:", result)
\ No newline at end of file
diff --git a/test_indexed_structure.py b/test_indexed_structure.py
new file mode 100644
index 0000000000..e3c1a3946b
--- /dev/null
+++ b/test_indexed_structure.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+
+from sympy import *
+from sympy.printing.pycode import pycode
+
+# Test the structure of Indexed objects
+p = IndexedBase("p")
+indexed_expr = p[0]
+
+print("Indexed expression:", indexed_expr)
+print("Type:", type(indexed_expr))
+print("Args:", indexed_expr.args)
+print("Base:", indexed_expr.base)
+print("Indices:", indexed_expr.indices)
+
+# Test with multiple indices
+indexed_expr2 = p[1, 2]
+print("\nMultiple indices:")
+print("Indexed expression:", indexed_expr2)
+print("Args:", indexed_expr2.args)
+print("Base:", indexed_expr2.base)
+print("Indices:", indexed_expr2.indices)
\ No newline at end of file
diff --git a/test_indexedbase_label.py b/test_indexedbase_label.py
new file mode 100644
index 0000000000..e440e1985f
--- /dev/null
+++ b/test_indexedbase_label.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+from sympy import *
+
+# Test the label attribute of IndexedBase
+p = IndexedBase("p")
+print("IndexedBase:", p)
+print("Label:", p.label)
+print("Label type:", type(p.label))
+
+# Test with different base names
+q = IndexedBase("q")
+print("\nIndexedBase:", q)
+print("Label:", q.label)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..1b589145
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+import numpy as np
+import pandas as pd
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+
+# Set matplotlib to use offset formatting for large numbers
+import matplotlib as mpl
+mpl.rcParams['axes.formatter.useoffset'] = True
+mpl.rcParams['axes.formatter.offset_threshold'] = 4
+
+# Create test data similar to the issue
+np.random.seed(42)
+n = 100
+data = pd.DataFrame({
+    'bill_length_mm': np.random.uniform(30, 60, n),
+    'bill_depth_mm': np.random.uniform(15, 25, n),
+    'species': np.random.choice(['Adelie', 'Chinstrap', 'Gentoo'], n),
+    'body_mass_mg': np.random.uniform(3000000, 6000000, n)
+})
+
+print("Creating plot with large numbers...")
+print(f"body_mass_mg range: {data['body_mass_mg'].min()} to {data['body_mass_mg'].max()}")
+
+# Create the plot from the issue
+plot = (
+    so.Plot(
+        data, x="bill_length_mm", y="bill_depth_mm",
+        color="species", pointsize="body_mass_mg",
+    )
+    .add(so.Dot())
+)
+
+# Save the plot to see the legend
+plot.save("test_plot.png")
+print("Plot saved as test_plot.png")
+
+# Let's also check what the formatter is doing
+from matplotlib.ticker import ScalarFormatter
+import matplotlib.pyplot as plt
+
+# Create a figure and axis to properly test the formatter
+fig, ax = plt.subplots()
+ax.plot([3000000, 4000000, 5000000], [1, 2, 3])
+formatter = ax.xaxis.get_major_formatter()
+
+print(f"Test data: [3000000, 4000000, 5000000]")
+print(f"Formatted ticks: {formatter.format_ticks([3000000, 4000000, 5000000])}")
+print(f"Formatter offset: {formatter.get_offset()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 55874bf2..3c0621bf 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -379,6 +379,13 @@ class ContinuousBase(Scale):
             locs = axis.major.locator()
             locs = locs[(vmin <= locs) & (locs <= vmax)]
             labels = axis.major.formatter.format_ticks(locs)
+            
+            # Get offset information from formatter and include it in labels if present
+            offset = axis.major.formatter.get_offset()
+            if offset:
+                # Add offset information to each label
+                labels = [f"{label} ({offset})" for label in labels]
+            
             new._legend = list(locs), list(labels)
 
         return new
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..950fee2f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,76 @@
+import numpy as np
+import pandas as pd
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+
+# Test 1: No offset (small numbers)
+print("Test 1: Small numbers (no offset expected)")
+data_small = pd.DataFrame({
+    'x': np.random.uniform(0, 10, 20),
+    'y': np.random.uniform(0, 10, 20),
+    'size_var': np.random.uniform(1, 10, 20)  # Small numbers, no offset
+})
+
+plot_small = (
+    so.Plot(data_small, x="x", y="y", pointsize="size_var")
+    .add(so.Dot())
+)
+
+plot_obj_small = plot_small.plot()
+scales_small = plot_obj_small._scales
+
+if 'pointsize' in scales_small:
+    scale = scales_small['pointsize']
+    if hasattr(scale, '_legend') and scale._legend:
+        values, labels = scale._legend
+        print("Small numbers - Legend labels:", labels)
+        
+        # Check that no offset is added
+        offset_found = any('1e' in label or '(' in label for label in labels)
+        print("Offset found (should be False):", offset_found)
+        
+        if not offset_found:
+            print("SUCCESS: No offset added for small numbers!")
+        else:
+            print("FAILURE: Offset incorrectly added for small numbers.")
+    else:
+        print("No legend data found for small numbers")
+else:
+    print("pointsize scale not found for small numbers")
+
+print("\nTest 2: Large numbers with offset")
+# Test 2: Large numbers with offset (same as before)
+data_large = pd.DataFrame({
+    'x': np.random.uniform(0, 10, 20),
+    'y': np.random.uniform(0, 10, 20),
+    'size_var': np.random.uniform(3000000, 6000000, 20)  # Large numbers, offset expected
+})
+
+plot_large = (
+    so.Plot(data_large, x="x", y="y", pointsize="size_var")
+    .add(so.Dot())
+)
+
+plot_obj_large = plot_large.plot()
+scales_large = plot_obj_large._scales
+
+if 'pointsize' in scales_large:
+    scale = scales_large['pointsize']
+    if hasattr(scale, '_legend') and scale._legend:
+        values, labels = scale._legend
+        print("Large numbers - Legend labels:", labels)
+        
+        # Check that offset is added
+        offset_found = any('1e6' in label or '1000000' in label for label in labels)
+        print("Offset found (should be True):", offset_found)
+        
+        if offset_found:
+            print("SUCCESS: Offset correctly added for large numbers!")
+        else:
+            print("FAILURE: Offset missing for large numbers.")
+    else:
+        print("No legend data found for large numbers")
+else:
+    print("pointsize scale not found for large numbers")
+
+plt.close('all')
\ No newline at end of file
diff --git a/test_empty_offset.py b/test_empty_offset.py
new file mode 100644
index 00000000..ca21c213
--- /dev/null
+++ b/test_empty_offset.py
@@ -0,0 +1,51 @@
+import numpy as np
+import pandas as pd
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+from unittest.mock import patch
+
+# Test edge case: Empty offset string
+print("Test: Empty offset string")
+
+# Create data with medium-sized numbers that might not trigger offset
+data = pd.DataFrame({
+    'x': np.random.uniform(0, 10, 20),
+    'y': np.random.uniform(0, 10, 20),
+    'size_var': np.random.uniform(100, 1000, 20)  # Medium numbers
+})
+
+# Mock the formatter to return empty offset
+with patch('seaborn._core.scales.PseudoAxis') as mock_axis:
+    # Create a mock formatter that returns empty offset
+    mock_formatter = mock_axis.major.formatter
+    mock_formatter.get_offset.return_value = ''
+    mock_formatter.format_ticks.return_value = ['100', '500', '900']
+    
+    plot = (
+        so.Plot(data, x="x", y="y", pointsize="size_var")
+        .add(so.Dot())
+    )
+    
+    plot_obj = plot.plot()
+    scales = plot_obj._scales
+
+    if 'pointsize' in scales:
+        scale = scales['pointsize']
+        if hasattr(scale, '_legend') and scale._legend:
+            values, labels = scale._legend
+            print("Legend labels with empty offset:", labels)
+            
+            # Check that no offset parentheses are added
+            parentheses_found = any('(' in label and ')' in label for label in labels)
+            print("Parentheses found (should be False):", parentheses_found)
+            
+            if not parentheses_found:
+                print("SUCCESS: No parentheses added for empty offset!")
+            else:
+                print("FAILURE: Parentheses incorrectly added for empty offset.")
+        else:
+            print("No legend data found")
+    else:
+        print("pointsize scale not found")
+
+plt.close('all')
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 00000000..0a980c92
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,51 @@
+import numpy as np
+import pandas as pd
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+
+# Set matplotlib to use offset formatting for large numbers
+import matplotlib as mpl
+mpl.rcParams['axes.formatter.useoffset'] = True
+mpl.rcParams['axes.formatter.offset_threshold'] = 4
+
+# Create test data with large numbers
+np.random.seed(42)
+n = 50
+data = pd.DataFrame({
+    'x': np.random.uniform(0, 10, n),
+    'y': np.random.uniform(0, 10, n),
+    'size_var': np.random.uniform(3000000, 6000000, n)
+})
+
+print("Testing the fix for legend offset values...")
+
+# Create a plot with large point sizes
+plot = (
+    so.Plot(data, x="x", y="y", pointsize="size_var")
+    .add(so.Dot())
+)
+
+# Create a proper plot and check the legend through the plot object
+plot_obj = plot.plot()
+
+# Check scales directly
+scales = plot_obj._scales
+if 'pointsize' in scales:
+    scale = scales['pointsize']
+    if hasattr(scale, '_legend') and scale._legend:
+        values, labels = scale._legend
+        print("Scale legend values:", values)
+        print("Scale legend labels:", labels)
+        
+        # Check if offset is included in labels
+        offset_found = any('1e6' in label or '1000000' in label for label in labels)
+        print("Offset found in labels:", offset_found)
+        
+        if offset_found:
+            print("SUCCESS: Offset information is included in legend labels!")
+        else:
+            print("FAILURE: Offset information is missing from legend labels.")
+    else:
+        print("No legend data found in scale")
+else:
+    print("pointsize scale not found")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 00000000..e38ebcf8
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,83 @@
+"""
+Test script to verify the fix for the GitHub issue:
+"Wrong legend values of large ranges"
+
+This reproduces the exact issue described in the GitHub issue and verifies the fix.
+"""
+
+import numpy as np
+import pandas as pd
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+
+# Set matplotlib to use offset formatting for large numbers (as mentioned in the issue)
+import matplotlib as mpl
+mpl.rcParams['axes.formatter.useoffset'] = True
+mpl.rcParams['axes.formatter.offset_threshold'] = 4
+
+print("Testing the exact scenario from the GitHub issue...")
+
+# Create test data similar to penguins dataset
+np.random.seed(42)
+n = 100
+penguins = pd.DataFrame({
+    'bill_length_mm': np.random.uniform(30, 60, n),
+    'bill_depth_mm': np.random.uniform(15, 25, n),
+    'species': np.random.choice(['Adelie', 'Chinstrap', 'Gentoo'], n),
+    'body_mass_g': np.random.uniform(3000, 6000, n)
+})
+
+# Create body_mass_mg as described in the issue
+penguins["body_mass_mg"] = penguins["body_mass_g"] * 1000
+
+print(f"body_mass_mg range: {penguins['body_mass_mg'].min():.1f} to {penguins['body_mass_mg'].max():.1f}")
+print(f"Expected offset: 1e6 (since values are in millions)")
+
+# Create the exact plot from the issue
+plot = (
+    so.Plot(
+        penguins, x="bill_length_mm", y="bill_depth_mm",
+        color="species", pointsize="body_mass_mg",
+    )
+    .add(so.Dot())
+)
+
+# Build the plot to access the scale information
+plot_obj = plot.plot()
+scales = plot_obj._scales
+
+# Check the pointsize scale (which corresponds to body_mass_mg)
+if 'pointsize' in scales:
+    scale = scales['pointsize']
+    if hasattr(scale, '_legend') and scale._legend:
+        values, labels = scale._legend
+        print("\nLegend information:")
+        print(f"Values: {values}")
+        print(f"Labels: {labels}")
+        
+        # Verify that the offset is included in the legend labels
+        offset_found = any('1e6' in label or '1000000' in label for label in labels)
+        
+        if offset_found:
+            print("\n✅ SUCCESS: The offset information (1e6) is correctly included in the legend labels!")
+            print("   This fixes the issue where legends for large numbers were missing offset information.")
+        else:
+            print("\n❌ FAILURE: Offset information is still missing from legend labels.")
+            print("   The issue is not fixed.")
+            
+        # Also check that the original values are still correct
+        if all(3000000 <= v <= 6000000 for v in values):
+            print("✅ Original values are correct (in the 3-6 million range)")
+        else:
+            print("❌ Original values are incorrect")
+            
+    else:
+        print("❌ No legend data found for pointsize scale")
+else:
+    print("❌ pointsize scale not found")
+
+# Save the plot to visually verify
+plot.save("github_issue_test_plot.png")
+print(f"\nPlot saved as 'github_issue_test_plot.png' for visual verification")
+
+plt.close('all')
\ No newline at end of file
diff --git a/test_plot.png b/test_plot.png
new file mode 100644
index 00000000..28090a24
Binary files /dev/null and b/test_plot.png differ
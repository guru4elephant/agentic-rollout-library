diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..4042667fb4
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+"""Comprehensive test for negative duration parsing."""
+
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import parse_duration, standard_duration_re
+import datetime
+
+def test_comprehensive():
+    """Test comprehensive negative duration parsing."""
+    
+    test_cases = [
+        # Test cases that should now match (previously failed due to lookahead)
+        ("-1:-30:00", "Should match and parse"),
+        ("-1:30:-00", "Should match and parse"), 
+        ("-1:-30:-00", "Should match and parse"),
+        ("1:-30:00", "Should match and parse"),
+        ("1:30:-00", "Should match and parse"),
+        
+        # Basic negative durations (should still work)
+        ("-1:30:00", "Should match and parse"),
+        ("-1:00:00", "Should match and parse"),
+        ("-0:30:00", "Should match and parse"),
+        ("-1:00", "Should match and parse"),
+        ("-2:15:30.500", "Should match and parse"),
+        
+        # Positive durations (should still work)
+        ("1:30:00", "Should match and parse"),
+        ("0:30:00", "Should match and parse"),
+        ("1:00", "Should match and parse"),
+        ("2:15:30.500", "Should match and parse"),
+    ]
+    
+    print("Comprehensive test of negative duration parsing:")
+    print("=" * 60)
+    
+    all_passed = True
+    
+    for duration_str, expected in test_cases:
+        try:
+            # First check if regex matches
+            match = standard_duration_re.match(duration_str)
+            if not match:
+                print(f"✗ '{duration_str}' -> NO REGEX MATCH")
+                all_passed = False
+                continue
+            
+            # Then parse the duration
+            result = parse_duration(duration_str)
+            
+            # For this test, we just want to verify that parsing succeeds
+            print(f"✓ '{duration_str}' -> {result}")
+                
+        except Exception as e:
+            print(f"✗ '{duration_str}' -> ERROR: {e}")
+            all_passed = False
+    
+    print("=" * 60)
+    if all_passed:
+        print("All tests PASSED!")
+    else:
+        print("Some tests FAILED!")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/debug_regex.py b/debug_regex.py
new file mode 100644
index 0000000000..d3efad19cc
--- /dev/null
+++ b/debug_regex.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+"""Debug script to see what the regex is capturing."""
+
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import standard_duration_re
+
+def debug_regex_matching():
+    """Debug what the regex captures for negative durations."""
+    
+    test_cases = [
+        "-1:30:00",
+        "-1:00:00", 
+        "-0:30:00",
+        "-1:00",
+        "-2:15:30.500",
+        "1:30:00",  # Positive for comparison
+    ]
+    
+    print("Regex pattern:", standard_duration_re.pattern)
+    print()
+    
+    for test_case in test_cases:
+        match = standard_duration_re.match(test_case)
+        if match:
+            groups = match.groupdict()
+            print(f"'{test_case}' -> {groups}")
+        else:
+            print(f"'{test_case}' -> NO MATCH")
+
+if __name__ == "__main__":
+    debug_regex_matching()
\ No newline at end of file
diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..a037758784 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -29,7 +29,7 @@ datetime_re = re.compile(
 standard_duration_re = re.compile(
     r'^'
     r'(?:(?P<days>-?\d+) (days?, )?)?'
-    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
+    r'((?:(?P<hours>-?\d+):)(?=-?\d+:-?\d+))?'
     r'(?:(?P<minutes>-?\d+):)?'
     r'(?P<seconds>-?\d+)'
     r'(?:\.(?P<microseconds>\d{1,6})\d{0,6})?'
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e42da0a9d1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+"""Script to reproduce the negative duration parsing issue."""
+
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import parse_duration
+
+def test_negative_durations():
+    """Test various negative duration formats."""
+    
+    # Test cases that should work but currently fail
+    test_cases = [
+        "-1:30:00",  # -1 hour, 30 minutes
+        "-1:00:00",  # -1 hour
+        "-0:30:00",  # -30 minutes
+        "-1:00",     # -1 minute, 0 seconds (edge case)
+        "-2:15:30.500",  # -2 hours, 15 minutes, 30.5 seconds
+    ]
+    
+    print("Testing negative durations (should work but currently fail):")
+    for test_case in test_cases:
+        try:
+            result = parse_duration(test_case)
+            print(f"✓ '{test_case}' -> {result}")
+        except Exception as e:
+            print(f"✗ '{test_case}' -> ERROR: {e}")
+    
+    print("\nTesting positive durations (should work):")
+    positive_cases = [
+        "1:30:00",   # 1 hour, 30 minutes
+        "0:30:00",   # 30 minutes
+        "1:00",      # 1 minute, 0 seconds
+        "2:15:30.500",  # 2 hours, 15 minutes, 30.5 seconds
+    ]
+    
+    for test_case in positive_cases:
+        try:
+            result = parse_duration(test_case)
+            print(f"✓ '{test_case}' -> {result}")
+        except Exception as e:
+            print(f"✗ '{test_case}' -> ERROR: {e}")
+
+if __name__ == "__main__":
+    test_negative_durations()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4b084ccd69
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+"""Test edge cases for negative duration parsing."""
+
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import standard_duration_re, parse_duration
+
+def test_edge_cases():
+    """Test edge cases that might fail."""
+    
+    # Cases that might fail due to the lookahead issue
+    edge_cases = [
+        "-1:-30:00",  # Negative minutes - should this work?
+        "-1:30:-00",  # Negative seconds - should this work?
+        "-1:-30:-00", # Both negative - should this work?
+        "1:-30:00",   # Positive hours, negative minutes
+        "1:30:-00",   # Positive hours, negative seconds
+    ]
+    
+    print("Testing edge cases:")
+    for test_case in edge_cases:
+        match = standard_duration_re.match(test_case)
+        if match:
+            groups = match.groupdict()
+            print(f"'{test_case}' -> MATCH: {groups}")
+            try:
+                result = parse_duration(test_case)
+                print(f"  Parsed as: {result}")
+            except Exception as e:
+                print(f"  Parse ERROR: {e}")
+        else:
+            print(f"'{test_case}' -> NO MATCH")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..5d31bbe49e
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+"""Test specifically for the GitHub issue: Fix parse_duration() for some negative durations"""
+
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import parse_duration, standard_duration_re
+
+def test_github_issue():
+    """Test the specific issue mentioned in the GitHub issue."""
+    
+    print("Testing the specific GitHub issue fix:")
+    print("=" * 50)
+    
+    # The issue mentioned that the lookahead (?=\d+:\d+) doesn't account for negative numbers
+    # and should be changed to (?=-?\d+:-?\d+)
+    
+    # Test cases that should now work with the fixed lookahead
+    test_cases = [
+        "-1:30:00",    # Negative hours with positive minutes/seconds
+        "-1:-30:00",   # Negative hours with negative minutes
+        "-1:30:-00",   # Negative hours with negative seconds
+        "-1:-30:-00",  # All negative components
+        "1:-30:00",    # Positive hours with negative minutes
+        "1:30:-00",    # Positive hours with negative seconds
+    ]
+    
+    all_passed = True
+    
+    for test_case in test_cases:
+        # Test regex matching
+        match = standard_duration_re.match(test_case)
+        if not match:
+            print(f"✗ '{test_case}' -> REGEX FAILED TO MATCH")
+            all_passed = False
+            continue
+        
+        # Test parsing
+        try:
+            result = parse_duration(test_case)
+            print(f"✓ '{test_case}' -> {result}")
+        except Exception as e:
+            print(f"✗ '{test_case}' -> PARSING ERROR: {e}")
+            all_passed = False
+    
+    print("=" * 50)
+    if all_passed:
+        print("GitHub issue FIXED! All negative duration formats now work correctly.")
+    else:
+        print("GitHub issue NOT FIXED! Some negative duration formats still fail.")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    test_github_issue()
\ No newline at end of file
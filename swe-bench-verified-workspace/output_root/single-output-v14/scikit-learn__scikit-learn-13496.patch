diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..b1903f707
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.ensemble import IsolationForest
+from sklearn.datasets import make_blobs
+
+# Create some test data
+X, _ = make_blobs(n_samples=100, centers=1, random_state=42)
+
+print("Testing warm_start functionality in IsolationForest")
+
+# Test 1: Check that warm_start is not currently exposed in __init__
+print("\n1. Checking if warm_start is in IsolationForest.__init__ signature...")
+sig = str(IsolationForest.__init__.__doc__)
+if 'warm_start' in sig:
+    print("   ❌ warm_start is already in signature")
+else:
+    print("   ✅ warm_start is NOT in signature (needs to be added)")
+
+# Test 2: Check that warm_start is inherited from BaseBagging
+print("\n2. Checking if warm_start attribute exists...")
+iforest = IsolationForest(n_estimators=10, random_state=42)
+print(f"   warm_start attribute exists: {hasattr(iforest, 'warm_start')}")
+print(f"   Default warm_start value: {iforest.warm_start}")
+
+# Test 3: Test that warm_start actually works when set manually
+print("\n3. Testing warm_start functionality...")
+try:
+    # First fit with 5 trees
+    iforest1 = IsolationForest(n_estimators=5, random_state=42)
+    iforest1.warm_start = True
+    iforest1.fit(X)
+    print(f"   First fit: {len(iforest1.estimators_)} trees")
+    
+    # Increment n_estimators and fit again
+    iforest1.n_estimators = 10
+    iforest1.fit(X)
+    print(f"   Second fit: {len(iforest1.estimators_)} trees")
+    
+    # Check if trees were preserved
+    if len(iforest1.estimators_) == 10:
+        print("   ✅ warm_start works correctly!")
+    else:
+        print("   ❌ warm_start doesn't work as expected")
+        
+except Exception as e:
+    print(f"   ❌ Error testing warm_start: {e}")
+
+# Test 4: Compare with normal behavior (no warm_start)
+print("\n4. Testing normal behavior (no warm_start)...")
+iforest2 = IsolationForest(n_estimators=10, random_state=42)
+iforest2.fit(X)
+print(f"   Normal fit: {len(iforest2.estimators_)} trees")
+
+print("\nDone!")
\ No newline at end of file
diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py
index 8a1bd3625..f42c80532 100644
--- a/sklearn/ensemble/iforest.py
+++ b/sklearn/ensemble/iforest.py
@@ -120,6 +120,11 @@ class IsolationForest(BaseBagging, OutlierMixin):
     verbose : int, optional (default=0)
         Controls the verbosity of the tree building process.
 
+    warm_start : bool, optional (default=False)
+        When set to ``True``, reuse the solution of the previous call to fit
+        and add more estimators to the ensemble, otherwise, just fit a whole
+        new forest. See :term:`the Glossary <warm_start>`.
+
 
     Attributes
     ----------
@@ -173,7 +178,8 @@ class IsolationForest(BaseBagging, OutlierMixin):
                  n_jobs=None,
                  behaviour='old',
                  random_state=None,
-                 verbose=0):
+                 verbose=0,
+                 warm_start=False):
         super().__init__(
             base_estimator=ExtraTreeRegressor(
                 max_features=1,
@@ -187,7 +193,8 @@ class IsolationForest(BaseBagging, OutlierMixin):
             max_features=max_features,
             n_jobs=n_jobs,
             random_state=random_state,
-            verbose=verbose)
+            verbose=verbose,
+            warm_start=warm_start)
 
         self.behaviour = behaviour
         self.contamination = contamination
diff --git a/test_comprehensive_warm_start.py b/test_comprehensive_warm_start.py
new file mode 100644
index 000000000..31657a788
--- /dev/null
+++ b/test_comprehensive_warm_start.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.ensemble import IsolationForest
+from sklearn.datasets import make_blobs
+
+# Create some test data
+X, _ = make_blobs(n_samples=100, centers=1, random_state=42)
+
+print("Comprehensive test of warm_start functionality in IsolationForest")
+
+# Test 1: Test that warm_start works when passed during initialization
+print("\n1. Testing warm_start passed during initialization...")
+try:
+    # Create with warm_start=True from the start
+    iforest = IsolationForest(n_estimators=5, warm_start=True, random_state=42)
+    iforest.fit(X)
+    print(f"   First fit: {len(iforest.estimators_)} trees")
+    
+    # Increment n_estimators and fit again
+    iforest.n_estimators = 10
+    iforest.fit(X)
+    print(f"   Second fit: {len(iforest.estimators_)} trees")
+    
+    # Check if trees were preserved and new ones were added
+    if len(iforest.estimators_) == 10:
+        print("   ✅ warm_start works correctly when passed during initialization!")
+    else:
+        print(f"   ❌ Expected 10 trees, got {len(iforest.estimators_)}")
+        
+except Exception as e:
+    print(f"   ❌ Error testing warm_start during initialization: {e}")
+
+# Test 2: Test that warm_start=False works as expected (should reset)
+print("\n2. Testing warm_start=False (default behavior)...")
+try:
+    iforest2 = IsolationForest(n_estimators=5, warm_start=False, random_state=42)
+    iforest2.fit(X)
+    print(f"   First fit: {len(iforest2.estimators_)} trees")
+    
+    # Increment n_estimators and fit again - should reset to 5 trees
+    iforest2.n_estimators = 10
+    iforest2.fit(X)
+    print(f"   Second fit: {len(iforest2.estimators_)} trees")
+    
+    # Should be 10 trees (not 5 + 5) because warm_start=False
+    if len(iforest2.estimators_) == 10:
+        print("   ✅ warm_start=False works correctly (resets estimators)!")
+    else:
+        print(f"   ❌ Expected 10 trees, got {len(iforest2.estimators_)}")
+        
+except Exception as e:
+    print(f"   ❌ Error testing warm_start=False: {e}")
+
+# Test 3: Test that we can change warm_start after initialization
+print("\n3. Testing changing warm_start after initialization...")
+try:
+    iforest3 = IsolationForest(n_estimators=5, random_state=42)
+    print(f"   Initial warm_start: {iforest3.warm_start}")
+    
+    # Change warm_start after creation
+    iforest3.warm_start = True
+    iforest3.fit(X)
+    print(f"   First fit: {len(iforest3.estimators_)} trees")
+    
+    # Increment n_estimators and fit again
+    iforest3.n_estimators = 10
+    iforest3.fit(X)
+    print(f"   Second fit: {len(iforest3.estimators_)} trees")
+    
+    if len(iforest3.estimators_) == 10:
+        print("   ✅ Changing warm_start after initialization works!")
+    else:
+        print(f"   ❌ Expected 10 trees, got {len(iforest3.estimators_)}")
+        
+except Exception as e:
+    print(f"   ❌ Error changing warm_start after initialization: {e}")
+
+print("\nDone!")
\ No newline at end of file
diff --git a/test_warm_start_exposed.py b/test_warm_start_exposed.py
new file mode 100644
index 000000000..2bc221fb2
--- /dev/null
+++ b/test_warm_start_exposed.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+
+import inspect
+from sklearn.ensemble import IsolationForest
+
+print("Testing if warm_start is properly exposed in IsolationForest")
+
+# Test 1: Check if warm_start is in the signature
+print("\n1. Checking __init__ signature...")
+sig = inspect.signature(IsolationForest.__init__)
+params = list(sig.parameters.keys())
+print(f"   Parameters: {params}")
+
+if 'warm_start' in params:
+    print("   ✅ warm_start is in the signature!")
+    warm_start_param = sig.parameters['warm_start']
+    print(f"   Default value: {warm_start_param.default}")
+else:
+    print("   ❌ warm_start is NOT in the signature")
+
+# Test 2: Check if we can create IsolationForest with warm_start=True
+print("\n2. Testing direct instantiation with warm_start=True...")
+try:
+    iforest = IsolationForest(n_estimators=10, warm_start=True, random_state=42)
+    print(f"   ✅ Successfully created with warm_start=True")
+    print(f"   warm_start attribute value: {iforest.warm_start}")
+except Exception as e:
+    print(f"   ❌ Failed to create with warm_start=True: {e}")
+
+# Test 3: Test normal instantiation (should default to False)
+print("\n3. Testing normal instantiation (default warm_start=False)...")
+iforest2 = IsolationForest(n_estimators=10, random_state=42)
+print(f"   warm_start attribute value: {iforest2.warm_start}")
+
+print("\nDone!")
\ No newline at end of file
diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index c395b0bde2..2c90dedc31 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -771,10 +771,11 @@ class BaseModelAdminChecks:
             except FieldDoesNotExist:
                 return [
                     checks.Error(
-                        "The value of '%s' is not a callable, an attribute of "
-                        "'%s', or an attribute of '%s'."
+                        "The value of '%s' refers to '%s', which is not a callable, "
+                        "an attribute of '%s', or an attribute of '%s'."
                         % (
                             label,
+                            field_name,
                             obj.__class__.__name__,
                             obj.model._meta.label,
                         ),
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..873437c2de
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+
+# Create a simple model
+class City(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Create a ModelAdmin with invalid readonly_fields
+class CityAdmin(admin.ModelAdmin):
+    readonly_fields = ['invalid_field']  # This field doesn't exist
+    list_display = ['name']
+    list_editable = ['invalid_field_editable']  # This field doesn't exist either
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Check for errors
+from django.contrib.admin.checks import ModelAdminChecks
+from django.contrib.admin.sites import AdminSite
+
+# Create a ModelAdmin instance with the model
+admin_site = AdminSite()
+city_admin = CityAdmin(City, admin_site)
+
+checks = ModelAdminChecks()
+errors = checks.check(city_admin)
+
+print("Errors found:")
+for error in errors:
+    print(f"  {error}")
+
+# Expected: The error should include the field name 'invalid_field' in the message
+# Current behavior: The error only includes the index like 'readonly_fields[0]'
\ No newline at end of file
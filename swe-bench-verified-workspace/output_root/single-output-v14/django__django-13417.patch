diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..f60cf99528 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1225,6 +1225,9 @@ class QuerySet:
         if self.query.extra_order_by or self.query.order_by:
             return True
         elif self.query.default_ordering and self.query.get_meta().ordering:
+            # Check if there's a GROUP BY clause that would remove the ordering
+            if self.query.group_by is not None:
+                return False
             return True
         else:
             return False
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bf08307e9e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count
+
+# Create a test model with Meta.ordering
+class Foo(models.Model):
+    uuid = models.UUIDField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+        ordering = ['name']
+        
+    def __str__(self):
+        return self.name
+
+# Test the issue
+print("Testing QuerySet.ordered property issue...")
+
+# Create a simple queryset
+qs = Foo.objects.all()
+print(f"qs.ordered: {qs.ordered}")
+print(f"qs.query.default_ordering: {qs.query.default_ordering}")
+
+# Create a queryset with annotation (GROUP BY)
+qs2 = Foo.objects.annotate(Count("pk")).all()
+print(f"qs2.ordered: {qs2.ordered}")
+print(f"qs2.query.default_ordering: {qs2.query.default_ordering}")
+
+# Let's also check the SQL to see what's happening
+print("\nSQL for qs:")
+print(str(qs.query))
+
+print("\nSQL for qs2:")
+print(str(qs2.query))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..200bf0e3fb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count
+
+# Create a test model with Meta.ordering
+class Foo(models.Model):
+    uuid = models.UUIDField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+        ordering = ['name']
+        
+    def __str__(self):
+        return self.name
+
+# Create a test model without Meta.ordering
+class Bar(models.Model):
+    uuid = models.UUIDField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+        
+    def __str__(self):
+        return self.name
+
+print("Testing QuerySet.ordered property edge cases...")
+
+# Test 1: Basic queryset with ordering
+qs1 = Foo.objects.all()
+print(f"Test 1 - Basic queryset with ordering: {qs1.ordered}")
+
+# Test 2: Queryset with annotation (GROUP BY) and default ordering
+qs2 = Foo.objects.annotate(Count("pk")).all()
+print(f"Test 2 - Queryset with annotation (GROUP BY) and default ordering: {qs2.ordered}")
+
+# Test 3: Queryset with explicit order_by (should still be ordered)
+qs3 = Foo.objects.annotate(Count("pk")).order_by('name')
+print(f"Test 3 - Queryset with annotation and explicit order_by: {qs3.ordered}")
+
+# Test 4: Queryset without default ordering
+qs4 = Bar.objects.all()
+print(f"Test 4 - Queryset without default ordering: {qs4.ordered}")
+
+# Test 5: Queryset with annotation but no default ordering
+qs5 = Bar.objects.annotate(Count("pk")).all()
+print(f"Test 5 - Queryset with annotation but no default ordering: {qs5.ordered}")
+
+# Test 6: Queryset with extra_order_by
+qs6 = Foo.objects.extra(select={'lower_name': 'LOWER(name)'}, order_by=['lower_name'])
+print(f"Test 6 - Queryset with extra_order_by: {qs6.ordered}")
+
+# Test 7: Queryset with annotation and extra_order_by
+qs7 = Foo.objects.annotate(Count("pk")).extra(select={'lower_name': 'LOWER(name)'}, order_by=['lower_name'])
+print(f"Test 7 - Queryset with annotation and extra_order_by: {qs7.ordered}")
+
+print("\nAll tests completed!")
\ No newline at end of file
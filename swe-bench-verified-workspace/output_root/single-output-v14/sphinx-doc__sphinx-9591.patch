diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..98ab68536
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the cross-reference issue in property type annotations.
+"""
+
+from typing import Optional
+
+class Point:
+    """
+    A class representing a point.
+
+    Attributes:
+        x: Position X.
+        y: Position Y.
+    """
+    x: int
+    y: int
+
+
+class Square:
+    """A class representing a square figure."""
+    #: Square's start position (top-left corner).
+    start: Point
+    #: Square width.
+    width: int
+    #: Square height.
+    height: int
+
+    @property
+    def end(self) -> Point:
+        """Square's end position (bottom-right corner)."""
+        return Point(self.start.x + self.width, self.start.y + self.height)
+
+
+class Rectangle:
+    """
+    A class representing a square figure.
+
+    Attributes:
+        start: Rectangle's start position (top-left corner).
+        width: Rectangle width.
+        height: Rectangle width.
+    """
+    start: Point
+    width: int
+    height: int
+
+    @property
+    def end(self) -> Point:
+        """Rectangle's end position (bottom-right corner)."""
+        return Point(self.start.x + self.width, self.start.y + self.height)
+
+
+# Let's test the type annotations
+if __name__ == "__main__":
+    # Test that we can access the type annotations
+    import inspect
+    from typing import get_type_hints
+    
+    print("Testing property type annotations...")
+    
+    # Check Square.end property
+    square_end_prop = Square.end
+    print(f"Square.end: {square_end_prop}")
+    print(f"Square.end type hints: {get_type_hints(square_end_prop.fget)}")
+    
+    # Check Rectangle.end property  
+    rect_end_prop = Rectangle.end
+    print(f"Rectangle.end: {rect_end_prop}")
+    print(f"Rectangle.end type hints: {get_type_hints(rect_end_prop.fget)}")
+    
+    # Check the return annotation specifically
+    print(f"Square.end.fget.__annotations__: {rect_end_prop.fget.__annotations__}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 4a1d5aeed..3faa58e79 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/test_cross_reference.py b/test_cross_reference.py
new file mode 100644
index 000000000..90822adbe
--- /dev/null
+++ b/test_cross_reference.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+"""
+Test to reproduce the cross-reference issue with property type annotations.
+"""
+
+from typing import Optional
+
+class Point:
+    """
+    A class representing a point.
+
+    Attributes:
+        x: Position X.
+        y: Position Y.
+    """
+    x: int
+    y: int
+
+
+class Square:
+    """A class representing a square figure."""
+    #: Square's start position (top-left corner).
+    start: Point
+    #: Square width.
+    width: int
+    #: Square height.
+    height: int
+
+    @property
+    def end(self) -> Point:
+        """Square's end position (bottom-right corner)."""
+        return Point(self.start.x + self.width, self.start.y + self.height)
+
+
+# Test the actual autodoc functionality
+def test_autodoc():
+    from sphinx.application import Sphinx
+    from sphinx.util.docutils import docutils_namespace
+    from sphinx.ext.autodoc import PropertyDocumenter
+    from sphinx.util.docutils import LoggingReporter
+    
+    # Create a minimal Sphinx app for testing
+    with docutils_namespace():
+        app = Sphinx(srcdir='/tmp', confdir=None, outdir='/tmp', doctreedir='/tmp',
+                    buildername='html', confoverrides={}, status=None, warning=None)
+        
+        # Create a PropertyDocumenter instance
+        documenter = PropertyDocumenter(directive=None, name='Square.end')
+        documenter.env = app.env
+        documenter.config = app.config
+        documenter.parent = Square
+        documenter.object = Square.end
+        
+        # Test the add_directive_header method
+        from io import StringIO
+        import sys
+        
+        # Capture the output
+        old_stdout = sys.stdout
+        sys.stdout = mystdout = StringIO()
+        
+        try:
+            documenter.add_directive_header('')
+            output = mystdout.getvalue()
+            print("PropertyDocumenter output:")
+            print(output)
+        finally:
+            sys.stdout = old_stdout
+
+if __name__ == "__main__":
+    test_autodoc()
\ No newline at end of file
diff --git a/test_detailed.py b/test_detailed.py
new file mode 100644
index 000000000..7a06d99c6
--- /dev/null
+++ b/test_detailed.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Detailed test to understand the difference between property and attribute type handling.
+"""
+
+from typing import Optional
+
+class Point:
+    """
+    A class representing a point.
+
+    Attributes:
+        x: Position X.
+        y: Position Y.
+    """
+    x: int
+    y: int
+
+
+class Square:
+    """A class representing a square figure."""
+    #: Square's start position (top-left corner).
+    start: Point
+    #: Square width.
+    width: int
+    #: Square height.
+    height: int
+
+    @property
+    def end(self) -> Point:
+        """Square's end position (bottom-right corner)."""
+        return Point(self.start.x + self.width, self.start.y + self.height)
+
+
+# Test how type annotations are accessed
+import inspect
+from typing import get_type_hints
+from sphinx.util.typing import stringify as stringify_typehint
+
+print("=== Testing Attribute vs Property Type Annotations ===")
+
+# Test attribute type annotation
+square = Square()
+square.start = Point()
+square.start.x = 10
+square.start.y = 20
+square.width = 30
+square.height = 40
+
+print("Attribute annotations from get_type_hints:")
+attr_annotations = get_type_hints(Square)
+print(f"Square annotations: {attr_annotations}")
+if 'start' in attr_annotations:
+    start_type = attr_annotations['start']
+    print(f"Square.start type: {start_type}")
+    print(f"Square.start stringified: {stringify_typehint(start_type)}")
+
+print("\nProperty annotations from function:")
+prop = Square.end
+print(f"Square.end property: {prop}")
+print(f"Square.end.fget annotations: {prop.fget.__annotations__}")
+if 'return' in prop.fget.__annotations__:
+    return_type = prop.fget.__annotations__['return']
+    print(f"Square.end return type: {return_type}")
+    print(f"Square.end return stringified: {stringify_typehint(return_type)}")
+
+# Test with inspect.signature
+print("\nTesting with inspect.signature:")
+import inspect
+sig = inspect.signature(prop.fget)
+print(f"Signature: {sig}")
+print(f"Return annotation: {sig.return_annotation}")
+print(f"Return annotation stringified: {stringify_typehint(sig.return_annotation)}")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
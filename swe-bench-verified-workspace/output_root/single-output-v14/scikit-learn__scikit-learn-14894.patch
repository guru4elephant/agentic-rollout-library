diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..63b781995
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+import numpy as np
+import scipy.sparse as sp
+from sklearn.svm import SVR
+
+# Create the test case from the issue
+x_train = np.array([[0, 1, 0, 0],
+                   [0, 0, 0, 1],
+                   [0, 0, 1, 0],
+                   [0, 0, 0, 1]])
+y_train = np.array([0.04, 0.04, 0.10, 0.16])
+
+model = SVR(C=316.227766017, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,
+            gamma=1.0, kernel='linear', max_iter=15000,
+            shrinking=True, tol=0.001, verbose=False)
+
+print("Testing with dense data...")
+# dense x_train should work
+model.fit(x_train, y_train)
+print("Dense data fit successful!")
+
+print("Testing with sparse data...")
+# convert to sparse
+xtrain_sparse = sp.csr_matrix(x_train)
+try:
+    model.fit(xtrain_sparse, y_train)
+    print("Sparse data fit successful!")
+except ZeroDivisionError as e:
+    print(f"ZeroDivisionError occurred: {e}")
+except Exception as e:
+    print(f"Other error occurred: {e}")
\ No newline at end of file
diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py
index 64cebe837..f2740120c 100644
--- a/sklearn/svm/base.py
+++ b/sklearn/svm/base.py
@@ -286,12 +286,16 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):
             n_class = 1
         n_SV = self.support_vectors_.shape[0]
 
-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)
-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,
-                                     dual_coef_indices.size / n_class)
-        self.dual_coef_ = sp.csr_matrix(
-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),
-            (n_class, n_SV))
+        # Handle the case when there are no support vectors or n_class is 0
+        if n_SV == 0 or n_class == 0:
+            self.dual_coef_ = sp.csr_matrix([])
+        else:
+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)
+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,
+                                         dual_coef_indices.size / n_class)
+            self.dual_coef_ = sp.csr_matrix(
+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),
+                (n_class, n_SV))
 
     def predict(self, X):
         """Perform regression on samples in X.
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..1f083fd42
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,79 @@
+import numpy as np
+import scipy.sparse as sp
+from sklearn.svm import SVR, SVC
+
+print("Testing comprehensive edge cases for sparse SVM...")
+
+# Test case 1: Regression with sparse data (original issue)
+print("\n1. Testing SVR with sparse data (original issue):")
+x_train = np.array([[0, 1, 0, 0],
+                   [0, 0, 0, 1],
+                   [0, 0, 1, 0],
+                   [0, 0, 0, 1]])
+y_train = np.array([0.04, 0.04, 0.10, 0.16])
+
+model = SVR(C=316.227766017, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,
+            gamma=1.0, kernel='linear', max_iter=15000,
+            shrinking=True, tol=0.001, verbose=False)
+
+xtrain_sparse = sp.csr_matrix(x_train)
+try:
+    model.fit(xtrain_sparse, y_train)
+    print("✓ SVR with sparse data works")
+    print(f"  support_vectors_.shape: {model.support_vectors_.shape}")
+    print(f"  dual_coef_.shape: {model.dual_coef_.shape}")
+    print(f"  dual_coef_: {model.dual_coef_.toarray()}")
+except Exception as e:
+    print(f"✗ Error: {e}")
+
+# Test case 2: Classification with sparse data and two classes
+print("\n2. Testing SVC with sparse data and two classes:")
+x_train_clf = np.array([[0, 1, 0, 0],
+                       [0, 0, 0, 1],
+                       [0, 0, 1, 0],
+                       [0, 0, 0, 1]])
+y_train_clf = np.array([0, 0, 1, 1])  # Two classes
+
+model_clf = SVC(C=316.227766017, cache_size=200, coef0=0.0, degree=3,
+                gamma=1.0, kernel='linear', max_iter=15000,
+                shrinking=True, tol=0.001, verbose=False)
+
+xtrain_sparse_clf = sp.csr_matrix(x_train_clf)
+try:
+    model_clf.fit(xtrain_sparse_clf, y_train_clf)
+    print("✓ SVC with sparse data and two classes works")
+    print(f"  support_vectors_.shape: {model_clf.support_vectors_.shape}")
+    print(f"  dual_coef_.shape: {model_clf.dual_coef_.shape}")
+    print(f"  classes_: {model_clf.classes_}")
+except Exception as e:
+    print(f"✗ Error: {e}")
+
+# Test case 3: Compare with dense version to ensure consistency
+print("\n3. Comparing sparse vs dense results:")
+model_dense = SVR(C=316.227766017, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,
+                  gamma=1.0, kernel='linear', max_iter=15000,
+                  shrinking=True, tol=0.001, verbose=False)
+
+try:
+    model_dense.fit(x_train, y_train)
+    print("✓ Dense version works")
+    print(f"  support_vectors_.shape: {model_dense.support_vectors_.shape}")
+    print(f"  dual_coef_.shape: {model_dense.dual_coef_.shape}")
+    
+    # Check if sparse and dense give same results
+    print(f"  Sparse and dense support vectors same shape: {model.support_vectors_.shape == model_dense.support_vectors_.shape}")
+    print(f"  Sparse and dense dual_coef same shape: {model.dual_coef_.shape == model_dense.dual_coef_.shape}")
+    
+except Exception as e:
+    print(f"✗ Error in dense version: {e}")
+
+# Test case 4: Test prediction works after fit
+print("\n4. Testing prediction after sparse fit:")
+try:
+    predictions = model.predict(xtrain_sparse)
+    print("✓ Prediction works after sparse fit")
+    print(f"  Predictions shape: {predictions.shape}")
+except Exception as e:
+    print(f"✗ Prediction error: {e}")
+
+print("\nAll comprehensive tests completed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..e601dfc32
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,66 @@
+import numpy as np
+import scipy.sparse as sp
+from sklearn.svm import SVR, SVC
+
+print("Testing edge cases for sparse SVM...")
+
+# Test case 1: Regression with sparse data (original issue)
+print("\n1. Testing SVR with sparse data (original issue):")
+x_train = np.array([[0, 1, 0, 0],
+                   [0, 0, 0, 1],
+                   [0, 0, 1, 0],
+                   [0, 0, 0, 1]])
+y_train = np.array([0.04, 0.04, 0.10, 0.16])
+
+model = SVR(C=316.227766017, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,
+            gamma=1.0, kernel='linear', max_iter=15000,
+            shrinking=True, tol=0.001, verbose=False)
+
+xtrain_sparse = sp.csr_matrix(x_train)
+try:
+    model.fit(xtrain_sparse, y_train)
+    print("✓ SVR with sparse data works")
+    print(f"  support_vectors_.shape: {model.support_vectors_.shape}")
+    print(f"  dual_coef_.shape: {model.dual_coef_.shape}")
+except Exception as e:
+    print(f"✗ Error: {e}")
+
+# Test case 2: Classification with sparse data and one class
+print("\n2. Testing SVC with sparse data and one class:")
+x_train_clf = np.array([[0, 1, 0, 0],
+                       [0, 0, 0, 1],
+                       [0, 0, 1, 0],
+                       [0, 0, 0, 1]])
+y_train_clf = np.array([1, 1, 1, 1])  # All same class
+
+model_clf = SVC(C=316.227766017, cache_size=200, coef0=0.0, degree=3,
+                gamma=1.0, kernel='linear', max_iter=15000,
+                shrinking=True, tol=0.001, verbose=False)
+
+xtrain_sparse_clf = sp.csr_matrix(x_train_clf)
+try:
+    model_clf.fit(xtrain_sparse_clf, y_train_clf)
+    print("✓ SVC with sparse data and one class works")
+    print(f"  support_vectors_.shape: {model_clf.support_vectors_.shape}")
+    print(f"  dual_coef_.shape: {model_clf.dual_coef_.shape}")
+    print(f"  classes_: {model_clf.classes_}")
+except Exception as e:
+    print(f"✗ Error: {e}")
+
+# Test case 3: Empty support vectors case
+print("\n3. Testing edge case with very small C (might result in no support vectors):")
+x_train_small = np.array([[1, 0], [0, 1]])
+y_train_small = np.array([0, 1])
+
+model_small = SVC(C=0.0001, kernel='linear')  # Very small C might result in no support vectors
+
+xtrain_small_sparse = sp.csr_matrix(x_train_small)
+try:
+    model_small.fit(xtrain_small_sparse, y_train_small)
+    print("✓ SVC with very small C works")
+    print(f"  support_vectors_.shape: {model_small.support_vectors_.shape}")
+    print(f"  dual_coef_.shape: {model_small.dual_coef_.shape}")
+except Exception as e:
+    print(f"✗ Error: {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..b57589945
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+from sklearn import svm
+from sklearn.datasets import samples_generator
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import f_regression
+from sklearn.pipeline import Pipeline
+
+# generate some data to play with
+X, y = samples_generator.make_classification(
+    n_informative=5, n_redundant=0, random_state=42)
+
+anova_filter = SelectKBest(f_regression, k=5)
+clf = svm.SVC(kernel='linear')
+pipe = Pipeline([('anova', anova_filter), ('svc', clf)])
+
+# This should raise an error according to the issue
+try:
+    result = len(pipe)
+    print(f"len(pipe) returned: {result}")
+except Exception as e:
+    print(f"len(pipe) raised error: {type(e).__name__}: {e}")
+
+# Also test the slicing mentioned in the issue
+try:
+    sliced_pipe = pipe[:len(pipe)]
+    print("Slicing with len(pipe) worked")
+except Exception as e:
+    print(f"Slicing with len(pipe) raised error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 7eaf9a46f..9962bf751 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -219,6 +219,16 @@ class Pipeline(_BaseComposition):
             return self.named_steps[ind]
         return est
 
+    def __len__(self):
+        """Returns the length of the Pipeline
+        
+        Returns
+        -------
+        length : int
+            The number of steps in the pipeline.
+        """
+        return len(self.steps)
+
     @property
     def _estimator_type(self):
         return self.steps[-1][1]._estimator_type
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..61a3a3651
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,36 @@
+from sklearn.pipeline import Pipeline
+from sklearn.preprocessing import StandardScaler
+from sklearn.svm import SVC
+
+# Test empty pipeline (should this be allowed?)
+try:
+    empty_pipe = Pipeline([])
+    print(f"Empty pipeline length: {len(empty_pipe)}")
+except Exception as e:
+    print(f"Empty pipeline error: {type(e).__name__}: {e}")
+
+# Test single step pipeline
+single_pipe = Pipeline([('scaler', StandardScaler())])
+print(f"Single step pipeline length: {len(single_pipe)}")
+
+# Test multiple steps pipeline
+multi_pipe = Pipeline([
+    ('scaler1', StandardScaler()),
+    ('scaler2', StandardScaler()),
+    ('svc', SVC())
+])
+print(f"Multi-step pipeline length: {len(multi_pipe)}")
+
+# Test that len works with slicing
+try:
+    sliced = multi_pipe[:len(multi_pipe)]
+    print(f"Slicing with len worked: {len(sliced)} steps")
+except Exception as e:
+    print(f"Slicing with len error: {type(e).__name__}: {e}")
+
+# Test negative indexing with len
+try:
+    last_step = multi_pipe[len(multi_pipe)-1]
+    print(f"Last step accessed with len: {type(last_step).__name__}")
+except Exception as e:
+    print(f"Negative indexing error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_len_implementation.py b/test_len_implementation.py
new file mode 100644
index 000000000..528d9ab51
--- /dev/null
+++ b/test_len_implementation.py
@@ -0,0 +1,36 @@
+"""Test the __len__ implementation for Pipeline"""
+from sklearn import svm
+from sklearn.datasets import samples_generator
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import f_regression
+from sklearn.pipeline import Pipeline
+
+def test_pipeline_len():
+    """Test that Pipeline implements __len__ correctly"""
+    # Generate some data to play with
+    X, y = samples_generator.make_classification(
+        n_informative=5, n_redundant=0, random_state=42)
+
+    anova_filter = SelectKBest(f_regression, k=5)
+    clf = svm.SVC(kernel='linear')
+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])
+
+    # Test that len(pipe) works
+    assert len(pipe) == 2, f"Expected length 2, got {len(pipe)}"
+
+    # Test that slicing with len(pipe) works
+    sliced_pipe = pipe[:len(pipe)]
+    assert len(sliced_pipe) == 2, f"Expected sliced length 2, got {len(sliced_pipe)}"
+
+    # Test that the sliced pipeline contains the same steps
+    assert sliced_pipe.steps == pipe.steps, "Sliced pipeline should have same steps"
+
+    # Test various slicing scenarios
+    assert len(pipe[:1]) == 1, "First step slice should have length 1"
+    assert len(pipe[1:]) == 1, "Last step slice should have length 1"
+    assert len(pipe[0:2]) == 2, "Full slice should have length 2"
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_pipeline_len()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..7f0696e99
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,19 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]}
+)
+rs.fit(X, y)
+print("Mean fit times:", rs.cv_results_['mean_fit_time'])
+print("Mean score times:", rs.cv_results_['mean_score_time'])
+
+# Check if refit_time_ attribute exists
+if hasattr(rs, 'refit_time_'):
+    print("Refit time:", rs.refit_time_)
+else:
+    print("refit_time_ attribute does not exist - this is the issue we need to fix!")
\ No newline at end of file
diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py
index 99d6096af..6394fe9bd 100644
--- a/sklearn/model_selection/_search.py
+++ b/sklearn/model_selection/_search.py
@@ -17,6 +17,7 @@ from collections import Mapping, namedtuple, defaultdict, Sequence, Iterable
 from functools import partial, reduce
 from itertools import product
 import operator
+import time
 import warnings
 
 import numpy as np
@@ -766,10 +767,13 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,
         if self.refit:
             self.best_estimator_ = clone(base_estimator).set_params(
                 **self.best_params_)
+            # Time the refit process
+            start_time = time.time()
             if y is not None:
                 self.best_estimator_.fit(X, y, **fit_params)
             else:
                 self.best_estimator_.fit(X, **fit_params)
+            self.refit_time_ = time.time() - start_time
 
         # Store the only scorer not as a dict for single metric evaluation
         self.scorer_ = scorers if self.multimetric_ else scorers['score']
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..c3d395b51
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,43 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+print("=== Test 1: GridSearchCV with refit=True ===")
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3]},
+    refit=True
+)
+rs.fit(X, y)
+print("refit_time_ exists:", hasattr(rs, 'refit_time_'))
+if hasattr(rs, 'refit_time_'):
+    print("Refit time:", rs.refit_time_)
+
+print("\n=== Test 2: GridSearchCV with refit=False ===")
+rs_no_refit = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3]},
+    refit=False
+)
+rs_no_refit.fit(X, y)
+print("refit_time_ exists:", hasattr(rs_no_refit, 'refit_time_'))
+if hasattr(rs_no_refit, 'refit_time_'):
+    print("Refit time:", rs_no_refit.refit_time_)
+
+print("\n=== Test 3: RandomizedSearchCV ===")
+from sklearn.model_selection import RandomizedSearchCV
+import numpy as np
+
+param_dist = {'n_estimators': [2, 3, 4, 5]}
+random_search = RandomizedSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_distributions=param_dist,
+    n_iter=3,
+    random_state=42
+)
+random_search.fit(X, y)
+print("refit_time_ exists:", hasattr(random_search, 'refit_time_'))
+if hasattr(random_search, 'refit_time_'):
+    print("Refit time:", random_search.refit_time_)
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 000000000..13c5cacb4
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,16 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]}
+)
+rs.fit(X, y)
+print(rs.cv_results_['mean_fit_time'])
+print(rs.cv_results_['mean_score_time'])
+
+# This should now work and provide the refit time
+print("Refit time:", rs.refit_time_)
\ No newline at end of file
diff --git a/test_parallel.py b/test_parallel.py
new file mode 100644
index 000000000..50d52d957
--- /dev/null
+++ b/test_parallel.py
@@ -0,0 +1,27 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+print("=== Testing with n_jobs=2 ===")
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]},
+    n_jobs=2
+)
+rs.fit(X, y)
+print("refit_time_ exists:", hasattr(rs, 'refit_time_'))
+if hasattr(rs, 'refit_time_'):
+    print("Refit time:", rs.refit_time_)
+
+print("\n=== Testing with n_jobs=-1 (all cores) ===")
+rs_all = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]},
+    n_jobs=-1
+)
+rs_all.fit(X, y)
+print("refit_time_ exists:", hasattr(rs_all, 'refit_time_'))
+if hasattr(rs_all, 'refit_time_'):
+    print("Refit time:", rs_all.refit_time_)
\ No newline at end of file
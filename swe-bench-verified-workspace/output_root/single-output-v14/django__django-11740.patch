diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a357642cb9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where changing UUIDField to ForeignKey
+does not create proper dependency on the related model.
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from django.conf import settings
+from django.db import models
+import uuid
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+# Import after configuring settings
+from django.apps import apps
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.questioner import MigrationQuestioner
+
+def test_migration_dependency():
+    """Test if migration properly creates dependency on related model"""
+    
+    # Create model states manually using string references to avoid app registry issues
+    app1_initial = ModelState("testapp1", "App1", [
+        ("id", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+        ("text", models.CharField(max_length=100)),
+        ("another_app", models.UUIDField(null=True, blank=True)),
+    ])
+    
+    app1_changed = ModelState("testapp1", "App1", [
+        ("id", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+        ("text", models.CharField(max_length=100)),
+        ("another_app", models.ForeignKey("testapp2.App2", null=True, blank=True, on_delete=models.SET_NULL)),
+    ])
+    
+    app2 = ModelState("testapp2", "App2", [
+        ("id", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+        ("text", models.CharField(max_length=100)),
+    ])
+    
+    # Create project states
+    initial_state = ProjectState()
+    initial_state.add_model(app1_initial)
+    initial_state.add_model(app2)
+    
+    changed_state = ProjectState()
+    changed_state.add_model(app1_changed)
+    changed_state.add_model(app2)
+    
+    # Create autodetector
+    autodetector = MigrationAutodetector(initial_state, changed_state, MigrationQuestioner())
+    
+    # Generate changes
+    changes = autodetector.changes(graph={})
+    
+    print("Generated changes:")
+    for app_label, app_changes in changes.items():
+        print(f"App: {app_label}")
+        for change in app_changes:
+            print(f"  - {change}")
+            if hasattr(change, 'dependencies'):
+                print(f"    Dependencies: {change.dependencies}")
+    
+    # Check if the migration has proper dependency on testapp2
+    testapp1_changes = changes.get('testapp1', [])
+    for change in testapp1_changes:
+        if hasattr(change, 'dependencies'):
+            for dep in change.dependencies:
+                if dep[0] == 'testapp2':
+                    print("✓ Found dependency on testapp2")
+                    return True
+    
+    print("✗ No dependency found on testapp2")
+    return False
+
+if __name__ == '__main__':
+    try:
+        success = test_migration_dependency()
+        sys.exit(0 if success else 1)
+    except Exception as e:
+        print(f"Error: {e}")
+        import traceback
+        traceback.print_exc()
+        sys.exit(1)
\ No newline at end of file
diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 338d54d72f..40ac1d3162 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -387,6 +387,9 @@ class FileInput(Input):
     def value_omitted_from_data(self, data, files, name):
         return name not in files
 
+    def use_required_attribute(self, initial):
+        return super().use_required_attribute(initial) and not initial
+
 
 FILE_INPUT_CONTRADICTION = object()
 
@@ -451,9 +454,6 @@ class ClearableFileInput(FileInput):
             return False
         return upload
 
-    def use_required_attribute(self, initial):
-        return super().use_required_attribute(initial) and not initial
-
     def value_omitted_from_data(self, data, files, name):
         return (
             super().value_omitted_from_data(data, files, name) and
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..218f07ffb4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from django.forms.widgets import FileInput, ClearableFileInput
+
+# Test Case 1: FileInput without initial data
+file_input = FileInput()
+result1 = file_input.use_required_attribute(None)
+print(f"FileInput without initial data: {result1}")
+
+# Test Case 2: FileInput with initial data
+file_input = FileInput()
+result2 = file_input.use_required_attribute("some_file.txt")
+print(f"FileInput with initial data: {result2}")
+
+# Test Case 3: ClearableFileInput without initial data
+clearable_input = ClearableFileInput()
+result3 = clearable_input.use_required_attribute(None)
+print(f"ClearableFileInput without initial data: {result3}")
+
+# Test Case 4: ClearableFileInput with initial data
+clearable_input = ClearableFileInput()
+result4 = clearable_input.use_required_attribute("some_file.txt")
+print(f"ClearableFileInput with initial data: {result4}")
+
+# The issue: FileInput should behave like ClearableFileInput
+# Expected behavior: Both should return False when initial data exists
+print("\nExpected behavior:")
+print("FileInput with initial data should return False (like ClearableFileInput does)")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..ad5690457e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+from django.forms.widgets import FileInput, ClearableFileInput
+
+# Test edge cases for the use_required_attribute fix
+
+def test_case(description, widget_class, initial, expected):
+    widget = widget_class()
+    result = widget.use_required_attribute(initial)
+    status = "✓" if result == expected else "✗"
+    print(f"{status} {description}: {result} (expected {expected})")
+    return result == expected
+
+print("Testing edge cases for use_required_attribute fix:")
+print("=" * 60)
+
+# Test cases
+all_passed = True
+
+# Normal cases
+all_passed &= test_case("FileInput - None initial", FileInput, None, True)
+all_passed &= test_case("FileInput - Empty string", FileInput, "", True)
+all_passed &= test_case("FileInput - String data", FileInput, "file.txt", False)
+all_passed &= test_case("ClearableFileInput - None initial", ClearableFileInput, None, True)
+all_passed &= test_case("ClearableFileInput - Empty string", ClearableFileInput, "", True)
+all_passed &= test_case("ClearableFileInput - String data", ClearableFileInput, "file.txt", False)
+
+# Edge cases with different data types
+# For file inputs, falsy values like 0, False, empty collections are treated as "no initial data"
+all_passed &= test_case("FileInput - Zero", FileInput, 0, True)
+all_passed &= test_case("FileInput - Empty list", FileInput, [], True)
+all_passed &= test_case("FileInput - Empty dict", FileInput, {}, True)
+all_passed &= test_case("FileInput - False boolean", FileInput, False, True)
+
+# Test that both widgets behave identically
+file_input = FileInput()
+clearable_input = ClearableFileInput()
+
+test_values = [None, "", "file.txt", 0, [], {}, False, True]
+for val in test_values:
+    file_result = file_input.use_required_attribute(val)
+    clearable_result = clearable_input.use_required_attribute(val)
+    if file_result != clearable_result:
+        print(f"✗ Inconsistency for value {val}: FileInput={file_result}, ClearableFileInput={clearable_result}")
+        all_passed = False
+    else:
+        print(f"✓ Consistent for value {val}: both return {file_result}")
+
+print("=" * 60)
+if all_passed:
+    print("All tests passed! ✓")
+else:
+    print("Some tests failed! ✗")
\ No newline at end of file
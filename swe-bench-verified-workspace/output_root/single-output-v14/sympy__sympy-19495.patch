diff --git a/debug_subs.py b/debug_subs.py
new file mode 100644
index 0000000000..9f61fee039
--- /dev/null
+++ b/debug_subs.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, S, Rational, imageset, Lambda, pi, asin, ConditionSet, Contains, Interval
+from sympy.solvers.solveset import solveset_real
+
+print("Debugging the substitution issue...")
+
+x, y, n = symbols('x y n')
+
+# Create the ImageSet
+imageset_result = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)
+print("ImageSet:", imageset_result)
+
+# Create the ConditionSet
+conditionset_result = ConditionSet(x, Contains(y, Interval(-1,1)), imageset_result)
+print("ConditionSet:", conditionset_result)
+
+# Let's see what happens when we substitute in the ImageSet first
+print("\nSubstituting in ImageSet first:")
+imageset_subs = imageset_result.subs(y, Rational(1,3))
+print("ImageSet.subs(y, 1/3):", imageset_subs)
+
+# Now let's see what happens when we substitute in the ConditionSet
+print("\nSubstituting in ConditionSet:")
+conditionset_subs = conditionset_result.subs(y, Rational(1,3))
+print("ConditionSet.subs(y, 1/3):", conditionset_subs)
+
+# Let's examine the components of the ConditionSet after substitution
+print("\nComponents after substitution:")
+print("  Bound variable:", conditionset_subs.sym)
+print("  Condition:", conditionset_subs.condition)
+print("  Base set:", conditionset_subs.base_set)
+
+# Let's also check what the original components were
+print("\nOriginal components:")
+print("  Bound variable:", conditionset_result.sym)
+print("  Condition:", conditionset_result.condition)
+print("  Base set:", conditionset_result.base_set)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..86cb955c48
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Abs, S, Rational, imageset, Lambda, pi, asin, ConditionSet, Contains, Interval
+from sympy.solvers.solveset import solveset_real
+
+print("Reproducing the issue with ConditionSet/ImageSet substitution...")
+
+# Test case 1: This works correctly
+print("\n1. Testing FiniteSet case (works correctly):")
+x, y, n = symbols('x y n')
+result1 = solveset_real(Abs(x) - y, x)
+print("solveset_real(Abs(x) - y, x) =", result1)
+
+result1_subs = result1.subs(y, Rational(1,3))
+print("_.subs(y, Rational(1,3)) =", result1_subs)
+
+# Test case 2: This shows the issue
+print("\n2. Testing ImageSet case (shows the issue):")
+imageset_result = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)
+print("imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers) =", imageset_result)
+
+conditionset_result = ConditionSet(x, Contains(y, Interval(-1,1)), imageset_result)
+print("ConditionSet(x, Contains(y, Interval(-1,1)), _) =", conditionset_result)
+
+# This should work but currently gives wrong result
+result2_subs = conditionset_result.subs(y, Rational(1,3))
+print("_.subs(y, Rational(1,3)) =", result2_subs)
+
+# Test case 3: These alternatives work correctly
+print("\n3. Testing alternatives that work:")
+result2_xreplace = conditionset_result.xreplace({y: Rational(1,3)})
+print("_.xreplace({y: Rational(1,3)}) =", result2_xreplace)
+
+result2_simultaneous = conditionset_result.subs({y: Rational(1,3)}, simultaneous=True)
+print("_.subs({y: Rational(1,3)}, simultaneous=True) =", result2_simultaneous)
+
+# Test case 4: Plain ImageSet substitution works correctly
+print("\n4. Testing plain ImageSet substitution (works correctly):")
+imageset_sub = imageset_result.subs(y, Rational(1,3))
+print("imageset.subs(y, Rational(1,3)) =", imageset_sub)
+
+imageset_sub2 = imageset_result.subs(y, symbols('z'))
+print("imageset.subs(y, z) =", imageset_sub2)
\ No newline at end of file
diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py
index 118eda6f77..c8c70929d9 100644
--- a/sympy/sets/conditionset.py
+++ b/sympy/sets/conditionset.py
@@ -243,7 +243,7 @@ def _eval_subs(self, old, new):
         cond = self.condition.subs(old, new)
         base = self.base_set.subs(old, new)
         if cond is S.true:
-            return ConditionSet(new, Contains(new, base), base)
+            return base
         return self.func(self.sym, cond, base)
 
     def dummy_eq(self, other, symbol=None):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..568541f363
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, S, Rational, imageset, Lambda, pi, asin, ConditionSet, Contains, Interval, sin, cos
+from sympy.solvers.solveset import solveset_real
+
+print("Testing edge cases for ConditionSet substitution fix...")
+
+x, y, z, n = symbols('x y z n')
+
+# Test case 1: Condition remains false after substitution
+print("\n1. Test case where condition remains false:")
+cond_set1 = ConditionSet(x, Contains(y, Interval(-2, -1)), imageset(Lambda(n, n + y), S.Integers))
+result1 = cond_set1.subs(y, Rational(1,3))
+print("Original:", cond_set1)
+print("After subs(y, 1/3):", result1)
+
+# Test case 2: Condition becomes true with different bound variable
+print("\n2. Test case with different bound variable:")
+cond_set2 = ConditionSet(z, Contains(y, Interval(-1,1)), imageset(Lambda(n, n + y), S.Integers))
+result2 = cond_set2.subs(y, Rational(1,3))
+print("Original:", cond_set2)
+print("After subs(y, 1/3):", result2)
+
+# Test case 3: Condition becomes true with FiniteSet base
+print("\n3. Test case with FiniteSet base:")
+cond_set3 = ConditionSet(x, Contains(y, Interval(-1,1)), {y, -y})
+result3 = cond_set3.subs(y, Rational(1,3))
+print("Original:", cond_set3)
+print("After subs(y, 1/3):", result3)
+
+# Test case 4: Condition remains complex after substitution
+print("\n4. Test case where condition remains complex:")
+cond_set4 = ConditionSet(x, Contains(y, Interval(-1,1)) & (x > 0), imageset(Lambda(n, n + y), S.Integers))
+result4 = cond_set4.subs(y, Rational(1,3))
+print("Original:", cond_set4)
+print("After subs(y, 1/3):", result4)
+
+# Test case 5: Substituting the bound variable itself
+print("\n5. Test case substituting bound variable:")
+cond_set5 = ConditionSet(x, Contains(x, Interval(-1,1)), imageset(Lambda(n, n + x), S.Integers))
+result5 = cond_set5.subs(x, y)
+print("Original:", cond_set5)
+print("After subs(x, y):", result5)
+
+# Test case 6: Multiple substitutions
+print("\n6. Test case with multiple substitutions:")
+cond_set6 = ConditionSet(x, Contains(y, Interval(-1,1)) & Contains(z, Interval(0,2)), imageset(Lambda(n, n + y + z), S.Integers))
+result6 = cond_set6.subs({y: Rational(1,3), z: 1})
+print("Original:", cond_set6)
+print("After subs({y: 1/3, z: 1}):", result6)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..a93ce67a43
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Abs, S, Rational, imageset, Lambda, pi, asin, ConditionSet, Contains, Interval, FiniteSet
+from sympy.solvers.solveset import solveset_real
+
+print("Testing the exact GitHub issue scenario...")
+
+x, y, n = symbols('x y n')
+
+# Test case from the GitHub issue
+print("\n1. Testing FiniteSet case (should work correctly):")
+result1 = solveset_real(Abs(x) - y, x)
+print("solveset_real(Abs(x) - y, x) =", result1)
+result1_subs = result1.subs(y, Rational(1,3))
+print("_.subs(y, Rational(1,3)) =", result1_subs)
+assert result1_subs == FiniteSet(-Rational(1,3), Rational(1,3)), "FiniteSet case failed"
+
+print("\n2. Testing ImageSet case (the main issue):")
+imageset_result = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)
+print("imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers) =", imageset_result)
+conditionset_result = ConditionSet(x, Contains(y, Interval(-1,1)), imageset_result)
+print("ConditionSet(x, Contains(y, Interval(-1,1)), _) =", conditionset_result)
+
+# This was the problematic case - should now work correctly
+result2_subs = conditionset_result.subs(y, Rational(1,3))
+print("_.subs(y, Rational(1,3)) =", result2_subs)
+expected_result = imageset(Lambda(n, 2*n*pi + asin(Rational(1,3))), S.Integers)
+assert result2_subs == expected_result, "ImageSet case failed"
+
+print("\n3. Testing alternatives that should still work:")
+result2_xreplace = conditionset_result.xreplace({y: Rational(1,3)})
+print("_.xreplace({y: Rational(1,3)}) =", result2_xreplace)
+assert result2_xreplace == expected_result, "xreplace case failed"
+
+result2_simultaneous = conditionset_result.subs({y: Rational(1,3)}, simultaneous=True)
+print("_.subs({y: Rational(1,3)}, simultaneous=True) =", result2_simultaneous)
+assert result2_simultaneous == expected_result, "simultaneous subs case failed"
+
+print("\n4. Testing plain ImageSet substitution (should still work correctly):")
+imageset_sub = imageset_result.subs(y, Rational(1,3))
+print("imageset.subs(y, Rational(1,3)) =", imageset_sub)
+assert imageset_sub == expected_result, "plain ImageSet subs case failed"
+
+imageset_sub2 = imageset_result.subs(y, symbols('z'))
+print("imageset.subs(y, z) =", imageset_sub2)
+expected_result2 = imageset(Lambda(n, 2*n*pi + asin(symbols('z'))), S.Integers)
+assert imageset_sub2 == expected_result2, "ImageSet subs with symbol case failed"
+
+print("\nAll tests passed! The GitHub issue has been fixed.")
\ No newline at end of file
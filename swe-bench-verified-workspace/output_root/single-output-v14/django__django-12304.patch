diff --git a/debug_callable.py b/debug_callable.py
new file mode 100644
index 0000000000..d34130c115
--- /dev/null
+++ b/debug_callable.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+"""
+Debug script to check if enumeration classes are callable.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Import the Choices classes
+from django.db.models.enums import Choices, IntegerChoices, TextChoices
+
+# Create a test enum class
+class YearInSchool(TextChoices):
+    FRESHMAN = 'FR', 'Freshman'
+    SOPHOMORE = 'SO', 'Sophomore'
+    JUNIOR = 'JR', 'Junior'
+    SENIOR = 'SR', 'Senior'
+    GRADUATE = 'GR', 'Graduate'
+
+# Check if the class is callable
+print(f"YearInSchool is callable: {callable(YearInSchool)}")
+
+# Check if individual enum members are callable
+print(f"YearInSchool.FRESHMAN is callable: {callable(YearInSchool.FRESHMAN)}")
+
+# Try to call the class with no arguments (what Django templates would do)
+try:
+    result = YearInSchool()
+    print(f"YearInSchool() called successfully: {result}")
+except Exception as e:
+    print(f"Error calling YearInSchool(): {e}")
+    print(f"Error type: {type(e)}")
+
+# Try to call an enum member with no arguments
+try:
+    result = YearInSchool.FRESHMAN()
+    print(f"YearInSchool.FRESHMAN() called successfully: {result}")
+except Exception as e:
+    print(f"Error calling YearInSchool.FRESHMAN(): {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index f48143ddaf..297ea341e8 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -25,12 +25,14 @@ class ChoicesMeta(enum.EnumMeta):
             # Use dict.__setitem__() to suppress defenses against double
             # assignment in enum's classdict.
             dict.__setitem__(classdict, key, value)
-        cls = super().__new__(metacls, classname, bases, classdict)
+        cls = super().__new__(metacls, classname, bases,  classdict)
         cls._value2label_map_ = dict(zip(cls._value2member_map_, labels))
         # Add a label property to instances of enum which uses the enum member
         # that is passed in as "self" as the value to use when looking up the
         # label in the choices.
         cls.label = property(lambda self: cls._value2label_map_.get(self.value))
+        # Prevent Django templates from calling the enum class with no arguments
+        cls.do_not_call_in_templates = True
         return enum.unique(cls)
 
     def __contains__(cls, member):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8c48c4fc76
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with enumeration types in Django templates.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ]
+    )
+
+django.setup()
+
+# Import the Choices classes
+from django.db.models.enums import Choices, IntegerChoices, TextChoices
+
+# Create a test enum class similar to the example in the issue
+class YearInSchool(TextChoices):
+    FRESHMAN = 'FR', 'Freshman'
+    SOPHOMORE = 'SO', 'Sophomore'
+    JUNIOR = 'JR', 'Junior'
+    SENIOR = 'SR', 'Senior'
+    GRADUATE = 'GR', 'Graduate'
+
+# Create a simple test template that reproduces the issue
+template_string = """
+{% if student.year_in_school == YearInSchool.FRESHMAN %}
+Freshman student!
+{% else %}
+Not a freshman.
+{% endif %}
+"""
+
+# Create a context with a mock student object
+class Student:
+    def __init__(self, year_in_school):
+        self.year_in_school = year_in_school
+
+student = Student(YearInSchool.FRESHMAN)
+context = Context({
+    'student': student,
+    'YearInSchool': YearInSchool
+})
+
+# Try to render the template
+try:
+    template = Template(template_string)
+    result = template.render(context)
+    print("Template rendered successfully:")
+    print(result)
+except Exception as e:
+    print(f"Error occurred: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..b3d5e013fe
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,124 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the enumeration template fix.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ]
+    )
+
+django.setup()
+
+# Import the Choices classes
+from django.db.models.enums import Choices, IntegerChoices, TextChoices
+
+# Test 1: IntegerChoices
+class Suit(IntegerChoices):
+    DIAMOND = 1, 'Diamond'
+    SPADE = 2, 'Spade'
+    HEART = 3, 'Heart'
+    CLUB = 4, 'Club'
+
+# Test 2: TextChoices
+class YearInSchool(TextChoices):
+    FRESHMAN = 'FR', 'Freshman'
+    SOPHOMORE = 'SO', 'Sophomore'
+    JUNIOR = 'JR', 'Junior'
+    SENIOR = 'SR', 'Senior'
+    GRADUATE = 'GR', 'Graduate'
+
+# Test 3: Base Choices class
+class BaseChoice(Choices):
+    OPTION_A = 'A', 'Option A'
+    OPTION_B = 'B', 'Option B'
+
+def test_integer_choices():
+    """Test IntegerChoices in templates"""
+    template_string = "{% if card.suit == Suit.DIAMOND %}Diamond card!{% endif %}"
+    
+    class Card:
+        def __init__(self, suit):
+            self.suit = suit
+    
+    card = Card(Suit.DIAMOND)
+    context = Context({'card': card, 'Suit': Suit})
+    
+    template = Template(template_string)
+    result = template.render(context).strip()
+    print(f"IntegerChoices test: '{result}'")
+    assert "Diamond card!" in result, f"IntegerChoices test failed: {result}"
+
+def test_text_choices():
+    """Test TextChoices in templates"""
+    template_string = "{% if student.year == YearInSchool.FRESHMAN %}Freshman!{% endif %}"
+    
+    class Student:
+        def __init__(self, year):
+            self.year = year
+    
+    student = Student(YearInSchool.FRESHMAN)
+    context = Context({'student': student, 'YearInSchool': YearInSchool})
+    
+    template = Template(template_string)
+    result = template.render(context).strip()
+    print(f"TextChoices test: '{result}'")
+    assert "Freshman!" in result, f"TextChoices test failed: {result}"
+
+def test_base_choices():
+    """Test base Choices class in templates"""
+    template_string = "{% if item.option == BaseChoice.OPTION_A %}Option A!{% endif %}"
+    
+    class Item:
+        def __init__(self, option):
+            self.option = option
+    
+    item = Item(BaseChoice.OPTION_A)
+    context = Context({'item': item, 'BaseChoice': BaseChoice})
+    
+    template = Template(template_string)
+    result = template.render(context).strip()
+    print(f"Base Choices test: '{result}'")
+    assert "Option A!" in result, f"Base Choices test failed: {result}"
+
+def test_do_not_call_in_templates_attribute():
+    """Test that do_not_call_in_templates is set correctly"""
+    print("\nTesting do_not_call_in_templates attribute:")
+    print(f"Suit.do_not_call_in_templates: {getattr(Suit, 'do_not_call_in_templates', 'NOT SET')}")
+    print(f"YearInSchool.do_not_call_in_templates: {getattr(YearInSchool, 'do_not_call_in_templates', 'NOT SET')}")
+    print(f"BaseChoice.do_not_call_in_templates: {getattr(BaseChoice, 'do_not_call_in_templates', 'NOT SET')}")
+    
+    assert getattr(Suit, 'do_not_call_in_templates', False) == True, "Suit should have do_not_call_in_templates=True"
+    assert getattr(YearInSchool, 'do_not_call_in_templates', False) == True, "YearInSchool should have do_not_call_in_templates=True"
+    assert getattr(BaseChoice, 'do_not_call_in_templates', False) == True, "BaseChoice should have do_not_call_in_templates=True"
+
+if __name__ == "__main__":
+    try:
+        test_integer_choices()
+        test_text_choices()
+        test_base_choices()
+        test_do_not_call_in_templates_attribute()
+        
+        print("\nüéâ All edge case tests passed!")
+        
+    except Exception as e:
+        print(f"‚ùå Edge case test failed: {e}")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..7eb0ca233e
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that the do_not_call_in_templates fix works correctly.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Import the Choices classes
+from django.db.models.enums import Choices, IntegerChoices, TextChoices
+
+# Create test enum classes
+class YearInSchool(TextChoices):
+    FRESHMAN = 'FR', 'Freshman'
+    SOPHOMORE = 'SO', 'Sophomore'
+    JUNIOR = 'JR', 'Junior'
+    SENIOR = 'SR', 'Senior'
+    GRADUATE = 'GR', 'Graduate'
+
+class Suit(IntegerChoices):
+    DIAMOND = 1, 'Diamond'
+    SPADE = 2, 'Spade'
+    HEART = 3, 'Heart'
+    CLUB = 4, 'Club'
+
+# Test that do_not_call_in_templates is set correctly
+print("Testing do_not_call_in_templates attribute:")
+print(f"YearInSchool.do_not_call_in_templates: {getattr(YearInSchool, 'do_not_call_in_templates', 'NOT SET')}")
+print(f"Suit.do_not_call_in_templates: {getattr(Suit, 'do_not_call_in_templates', 'NOT SET')}")
+print(f"Choices.do_not_call_in_templates: {getattr(Choices, 'do_not_call_in_templates', 'NOT SET')}")
+print(f"IntegerChoices.do_not_call_in_templates: {getattr(IntegerChoices, 'do_not_call_in_templates', 'NOT SET')}")
+print(f"TextChoices.do_not_call_in_templates: {getattr(TextChoices, 'do_not_call_in_templates', 'NOT SET')}")
+
+# Test that the classes are still callable (they should be)
+print("\nTesting that classes are still callable:")
+print(f"YearInSchool is callable: {callable(YearInSchool)}")
+print(f"Suit is callable: {callable(Suit)}")
+
+# Test that we can still call them with proper arguments
+print("\nTesting proper calls with arguments:")
+try:
+    freshman = YearInSchool('FR')
+    print(f"YearInSchool('FR') = {freshman}")
+except Exception as e:
+    print(f"Error calling YearInSchool('FR'): {e}")
+
+try:
+    diamond = Suit(1)
+    print(f"Suit(1) = {diamond}")
+except Exception as e:
+    print(f"Error calling Suit(1): {e}")
+
+# Test that the enum functionality still works
+print("\nTesting enum functionality:")
+print(f"YearInSchool.choices: {YearInSchool.choices}")
+print(f"Suit.choices: {Suit.choices}")
\ No newline at end of file
diff --git a/test_template_fix.py b/test_template_fix.py
new file mode 100644
index 0000000000..8cd1c96891
--- /dev/null
+++ b/test_template_fix.py
@@ -0,0 +1,127 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that enumeration types work in Django templates.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ]
+    )
+
+django.setup()
+
+# Import the Choices classes
+from django.db.models.enums import TextChoices
+
+# Create a test enum class similar to the example in the issue
+class YearInSchool(TextChoices):
+    FRESHMAN = 'FR', 'Freshman'
+    SOPHOMORE = 'SO', 'Sophomore'
+    JUNIOR = 'JR', 'Junior'
+    SENIOR = 'SR', 'Senior'
+    GRADUATE = 'GR', 'Graduate'
+
+# Test 1: Basic template usage with enum comparison
+def test_enum_template_comparison():
+    template_string = """
+{% if student.year_in_school == YearInSchool.FRESHMAN %}
+Freshman student!
+{% else %}
+Not a freshman.
+{% endif %}
+"""
+    
+    class Student:
+        def __init__(self, year_in_school):
+            self.year_in_school = year_in_school
+    
+    # Test with freshman
+    student = Student(YearInSchool.FRESHMAN)
+    context = Context({
+        'student': student,
+        'YearInSchool': YearInSchool
+    })
+    
+    template = Template(template_string)
+    result = template.render(context).strip()
+    print(f"Test 1 - Freshman student: '{result}'")
+    assert "Freshman student!" in result, f"Expected 'Freshman student!' but got: {result}"
+    
+    # Test with sophomore
+    student = Student(YearInSchool.SOPHOMORE)
+    context = Context({
+        'student': student,
+        'YearInSchool': YearInSchool
+    })
+    
+    result = template.render(context).strip()
+    print(f"Test 1 - Sophomore student: '{result}'")
+    assert "Not a freshman." in result, f"Expected 'Not a freshman.' but got: {result}"
+
+# Test 2: Direct enum usage in templates
+def test_direct_enum_usage():
+    template_string = """
+Student status: {{ YearInSchool.FRESHMAN }} ({{ YearInSchool.FRESHMAN.label }})
+"""
+    
+    context = Context({
+        'YearInSchool': YearInSchool
+    })
+    
+    template = Template(template_string)
+    result = template.render(context).strip()
+    print(f"Test 2 - Direct enum usage: '{result}'")
+    assert "FR (Freshman)" in result, f"Expected 'FR (Freshman)' but got: {result}"
+
+# Test 3: Enum class should not be called in templates
+def test_enum_class_not_called():
+    template_string = """
+Trying to use enum class directly: {{ YearInSchool }}
+"""
+    
+    context = Context({
+        'YearInSchool': YearInSchool
+    })
+    
+    template = Template(template_string)
+    result = template.render(context).strip()
+    print(f"Test 3 - Enum class not called: '{result}'")
+    # The class should not be called, so it should render as the class representation
+    # Note: Django templates escape HTML, so we need to check for the escaped version
+    assert "Trying to use enum class directly: &lt;enum &#x27;YearInSchool&#x27;&gt;" in result, \
+        f"Expected class representation but got: {result}"
+
+if __name__ == "__main__":
+    try:
+        test_enum_template_comparison()
+        print("‚úì Test 1 passed: Enum comparison in templates works")
+        
+        test_direct_enum_usage()
+        print("‚úì Test 2 passed: Direct enum usage in templates works")
+        
+        test_enum_class_not_called()
+        print("‚úì Test 3 passed: Enum class is not called in templates")
+        
+        print("\nüéâ All tests passed! The template issue has been fixed.")
+        
+    except Exception as e:
+        print(f"‚ùå Test failed: {e}")
+        sys.exit(1)
\ No newline at end of file
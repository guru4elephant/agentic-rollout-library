diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py
index 83a4f004aa..5cf482b9df 100644
--- a/astropy/io/ascii/qdp.py
+++ b/astropy/io/ascii/qdp.py
@@ -60,14 +60,14 @@ def _line_type(line, delimiter=None):
     ValueError: Unrecognized QDP line...
     """
     _decimal_re = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?"
-    _command_re = r"READ [TS]ERR(\s+[0-9]+)+"
+    _command_re = r"read [ts]err(\s+[0-9]+)+"
 
     sep = delimiter
     if delimiter is None:
         sep = r"\s+"
     _new_re = rf"NO({sep}NO)+"
     _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
-    _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
+    _type_re = rf"(?i)^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
     _line_type_re = re.compile(_type_re)
     line = line.strip()
     if not line:
diff --git a/debug_terr.py b/debug_terr.py
new file mode 100644
index 0000000000..d89348480c
--- /dev/null
+++ b/debug_terr.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+
+from astropy.io.ascii.qdp import _get_lines_from_file, _get_type_from_list_of_lines, _line_type
+
+# Test TERR command parsing
+content = """read terr 1 2
+1 0.5 1 0.5
+"""
+
+lines = _get_lines_from_file(content)
+contents, ncol = _get_type_from_list_of_lines(lines)
+
+print("Line types:")
+for line, content_type in zip(lines, contents):
+    print(f"  {line}: {content_type}")
+
+# Test the line type function directly
+print("\nTesting _line_type directly:")
+test_lines = ["read terr 1 2", "READ TERR 1 2", "Read Terr 1 2"]
+for line in test_lines:
+    result = _line_type(line)
+    print(f"  {line}: {result}")
\ No newline at end of file
diff --git a/debug_terr_detailed.py b/debug_terr_detailed.py
new file mode 100644
index 0000000000..1e7e954f07
--- /dev/null
+++ b/debug_terr_detailed.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+
+from astropy.io.ascii.qdp import _get_tables_from_qdp_file, _interpret_err_lines
+
+# Test case that should work
+content_working = """read terr 1
+1 0.5 0.3 1.0
+"""
+
+# Test case that might fail  
+content_failing = """read terr 1 2
+1 0.5 1 0.5
+"""
+
+print("Testing working case:")
+try:
+    tables = _get_tables_from_qdp_file(content_working)
+    print("✓ Working case succeeded")
+    print(f"Number of tables: {len(tables)}")
+    if tables:
+        print(f"First table shape: {tables[0].shape}")
+        print(f"First table columns: {tables[0].colnames}")
+except Exception as e:
+    print(f"✗ Working case failed: {e}")
+
+print("\nTesting failing case:")
+try:
+    tables = _get_tables_from_qdp_file(content_failing)
+    print("✓ Failing case succeeded")
+    print(f"Number of tables: {len(tables)}")
+    if tables:
+        print(f"First table shape: {tables[0].shape}")
+        print(f"First table columns: {tables[0].colnames}")
+except Exception as e:
+    print(f"✗ Failing case failed: {e}")
+    import traceback
+    traceback.print_exc()
+
+# Test the _interpret_err_lines function directly
+print("\nTesting _interpret_err_lines directly:")
+err_specs = {'terr': [1, 2]}  # This is what would be created from "read terr 1 2"
+ncols = 4  # This is what we have from the data "1 0.5 1 0.5" (4 columns)
+
+try:
+    colnames = _interpret_err_lines(err_specs, ncols)
+    print(f"✓ _interpret_err_lines succeeded: {colnames}")
+except Exception as e:
+    print(f"✗ _interpret_err_lines failed: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/debug_terr_issue.py b/debug_terr_issue.py
new file mode 100644
index 0000000000..6b33878502
--- /dev/null
+++ b/debug_terr_issue.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from astropy.io.ascii.qdp import _get_lines_from_file, _get_type_from_list_of_lines
+
+# Test TERR command parsing
+content = """read terr 1 2
+1 0.5 1 0.5
+"""
+
+lines = _get_lines_from_file(content)
+contents, ncol = _get_type_from_list_of_lines(lines)
+
+print("Line types and ncol:")
+for line, content_type in zip(lines, contents):
+    print(f"  {line}: {content_type}")
+print(f"ncol: {ncol}")
+
+# Let's also test what happens when we manually parse the command
+print("\nManual command parsing:")
+command_line = "read terr 1 2"
+command = command_line.strip().split()
+print(f"Command parts: {command}")
+print(f"Command type: {command[1].lower()}")
+print(f"Column numbers: {[int(c) for c in command[2:]]}")
+
+# Test with different case variations
+test_cases = ["read terr 1 2", "READ TERR 1 2", "Read Terr 1 2"]
+for test_case in test_cases:
+    command = test_case.strip().split()
+    print(f"\n{test_case}:")
+    print(f"  Command type: {command[1].lower()}")
+    print(f"  Column numbers: {[int(c) for c in command[2:]]}")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 287a356a08..f2ee6c47cc 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..377dfd5699
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+# Create test QDP file with lowercase commands
+test_qdp_content = """read serr 1 2 
+1 0.5 1 0.5
+"""
+
+with open('test.qdp', 'w') as f:
+    f.write(test_qdp_content)
+
+# Try to read it with astropy
+from astropy.table import Table
+
+try:
+    table = Table.read('test.qdp', format='ascii.qdp')
+    print("Success! Table loaded:")
+    print(table)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Also test with uppercase to make sure it still works
+test_qdp_upper = """READ SERR 1 2 
+1 0.5 1 0.5
+"""
+
+with open('test_upper.qdp', 'w') as f:
+    f.write(test_qdp_upper)
+
+try:
+    table = Table.read('test_upper.qdp', format='ascii.qdp')
+    print("Success with uppercase! Table loaded:")
+    print(table)
+except Exception as e:
+    print(f"Error with uppercase: {e}")
\ No newline at end of file
diff --git a/test.qdp b/test.qdp
new file mode 100644
index 0000000000..5479bdc81d
--- /dev/null
+++ b/test.qdp
@@ -0,0 +1,2 @@
+read serr 1 2 
+1 0.5 1 0.5
diff --git a/test_case_0.qdp b/test_case_0.qdp
new file mode 100644
index 0000000000..b5750561d5
--- /dev/null
+++ b/test_case_0.qdp
@@ -0,0 +1,2 @@
+read serr 1 2
+1 0.5 1 0.5
diff --git a/test_case_1.qdp b/test_case_1.qdp
new file mode 100644
index 0000000000..ddaaf09f56
--- /dev/null
+++ b/test_case_1.qdp
@@ -0,0 +1,2 @@
+READ SERR 1 2
+1 0.5 1 0.5
diff --git a/test_case_2.qdp b/test_case_2.qdp
new file mode 100644
index 0000000000..827a8ed964
--- /dev/null
+++ b/test_case_2.qdp
@@ -0,0 +1,2 @@
+Read Serr 1 2
+1 0.5 1 0.5
diff --git a/test_case_3.qdp b/test_case_3.qdp
new file mode 100644
index 0000000000..bd1168429e
--- /dev/null
+++ b/test_case_3.qdp
@@ -0,0 +1,2 @@
+ReAd SeRr 1 2
+1 0.5 1 0.5
diff --git a/test_case_4.qdp b/test_case_4.qdp
new file mode 100644
index 0000000000..301a0a976f
--- /dev/null
+++ b/test_case_4.qdp
@@ -0,0 +1,2 @@
+read terr 1
+1 0.1 0.2 2.0
diff --git a/test_case_5.qdp b/test_case_5.qdp
new file mode 100644
index 0000000000..fb7de87da4
--- /dev/null
+++ b/test_case_5.qdp
@@ -0,0 +1,2 @@
+READ TERR 1
+1 0.1 0.2 2.0
diff --git a/test_case_6.qdp b/test_case_6.qdp
new file mode 100644
index 0000000000..5abe2faaa3
--- /dev/null
+++ b/test_case_6.qdp
@@ -0,0 +1,2 @@
+Read Terr 1
+1 0.1 0.2 2.0
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..c93c11b7c9
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+
+from astropy.table import Table
+
+# Test all case variations for the original issue
+test_cases = [
+    ("read serr 1 2", "lowercase serr"),
+    ("READ SERR 1 2", "uppercase serr"), 
+    ("Read Serr 1 2", "mixed case serr"),
+    ("ReAd SeRr 1 2", "alternating case serr"),
+    ("read terr 1", "lowercase terr"),
+    ("READ TERR 1", "uppercase terr"),
+    ("Read Terr 1", "mixed case terr"),
+]
+
+print("Testing case variations:")
+for i, (command, description) in enumerate(test_cases):
+    filename = f"test_case_{i}.qdp"
+    
+    # Use appropriate data format based on command type
+    if "terr" in command.lower():
+        # For TERR commands, we need data with proper structure
+        content = f"""{command}
+1 0.1 0.2 2.0
+"""
+    else:
+        # For SERR commands, use the original format
+        content = f"""{command}
+1 0.5 1 0.5
+"""
+    
+    with open(filename, 'w') as f:
+        f.write(content)
+    
+    try:
+        table = Table.read(filename, format='ascii.qdp')
+        print(f"✓ {description}: Success")
+        print(f"  Columns: {table.colnames}")
+    except Exception as e:
+        print(f"✗ {description}: Error - {e}")
+
+# Test the exact example from the GitHub issue
+print("\nTesting exact GitHub issue example:")
+content_github = """read serr 1 2 
+1 0.5 1 0.5
+"""
+
+with open('test_github.qdp', 'w') as f:
+    f.write(content_github)
+
+try:
+    table = Table.read('test_github.qdp', format='ascii.qdp')
+    print("✓ GitHub issue example: Success")
+    print(f"  Table: {table}")
+except Exception as e:
+    print(f"✗ GitHub issue example: Error - {e}")
+
+# Test that invalid commands still fail appropriately
+print("\nTesting invalid commands:")
+content_invalid = """invalid command 1 2
+1 0.5 1 0.5
+"""
+
+with open('test_invalid.qdp', 'w') as f:
+    f.write(content_invalid)
+
+try:
+    table = Table.read('test_invalid.qdp', format='ascii.qdp')
+    print("✗ Invalid command: Should have failed but didn't")
+except Exception as e:
+    print(f"✓ Invalid command: Correctly failed - {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..dc6155bee9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+from astropy.table import Table
+
+# Test various case combinations
+test_cases = [
+    ("read serr 1 2", "lowercase"),
+    ("READ SERR 1 2", "uppercase"), 
+    ("Read Serr 1 2", "mixed case"),
+    ("ReAd SeRr 1 2", "alternating case"),
+    ("read terr 1 2", "lowercase terr"),
+    ("READ TERR 1 2", "uppercase terr"),
+]
+
+for i, (command, description) in enumerate(test_cases):
+    filename = f"test_case_{i}.qdp"
+    content = f"""{command}
+1 0.5 1 0.5
+"""
+    
+    with open(filename, 'w') as f:
+        f.write(content)
+    
+    try:
+        table = Table.read(filename, format='ascii.qdp')
+        print(f"✓ {description}: Success")
+    except Exception as e:
+        print(f"✗ {description}: Error - {e}")
+
+# Test invalid command to make sure we didn't break error handling
+invalid_content = """invalid command 1 2
+1 0.5 1 0.5
+"""
+
+with open('test_invalid.qdp', 'w') as f:
+    f.write(invalid_content)
+
+try:
+    table = Table.read('test_invalid.qdp', format='ascii.qdp')
+    print("✗ Invalid command: Should have failed but didn't")
+except Exception as e:
+    print(f"✓ Invalid command: Correctly failed - {e}")
\ No newline at end of file
diff --git a/test_github.qdp b/test_github.qdp
new file mode 100644
index 0000000000..5479bdc81d
--- /dev/null
+++ b/test_github.qdp
@@ -0,0 +1,2 @@
+read serr 1 2 
+1 0.5 1 0.5
diff --git a/test_invalid.qdp b/test_invalid.qdp
new file mode 100644
index 0000000000..399bf4847a
--- /dev/null
+++ b/test_invalid.qdp
@@ -0,0 +1,2 @@
+invalid command 1 2
+1 0.5 1 0.5
diff --git a/test_original.qdp b/test_original.qdp
new file mode 100644
index 0000000000..5479bdc81d
--- /dev/null
+++ b/test_original.qdp
@@ -0,0 +1,2 @@
+read serr 1 2 
+1 0.5 1 0.5
diff --git a/test_upper.qdp b/test_upper.qdp
new file mode 100644
index 0000000000..773228a946
--- /dev/null
+++ b/test_upper.qdp
@@ -0,0 +1,2 @@
+READ SERR 1 2 
+1 0.5 1 0.5
diff --git a/test_valid1.qdp b/test_valid1.qdp
new file mode 100644
index 0000000000..301a0a976f
--- /dev/null
+++ b/test_valid1.qdp
@@ -0,0 +1,2 @@
+read terr 1
+1 0.1 0.2 2.0
diff --git a/test_valid2.qdp b/test_valid2.qdp
new file mode 100644
index 0000000000..301a0a976f
--- /dev/null
+++ b/test_valid2.qdp
@@ -0,0 +1,2 @@
+read terr 1
+1 0.1 0.2 2.0
diff --git a/test_valid3.qdp b/test_valid3.qdp
new file mode 100644
index 0000000000..69c9ef81ba
--- /dev/null
+++ b/test_valid3.qdp
@@ -0,0 +1,2 @@
+read terr 1 2
+1 0.1 0.2 2.0 0.3 0.4
diff --git a/test_valid_cases.py b/test_valid_cases.py
new file mode 100644
index 0000000000..db3491add1
--- /dev/null
+++ b/test_valid_cases.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+from astropy.table import Table
+
+# Test valid case: read terr 1 (two-sided errors on column 1 only)
+content1 = """read terr 1
+1 0.1 0.2 2.0
+"""
+
+with open('test_valid1.qdp', 'w') as f:
+    f.write(content1)
+
+try:
+    table = Table.read('test_valid1.qdp', format='ascii.qdp')
+    print("✓ Valid case 1 (read terr 1): Success")
+    print(f"  Columns: {table.colnames}")
+except Exception as e:
+    print(f"✗ Valid case 1 failed: {e}")
+
+# Test valid case: read terr 1 with proper data structure
+# This should have: col1, col1_perr, col1_nerr, col2 (4 columns)
+content2 = """read terr 1
+1 0.1 0.2 2.0
+"""
+
+with open('test_valid2.qdp', 'w') as f:
+    f.write(content2)
+
+try:
+    table = Table.read('test_valid2.qdp', format='ascii.qdp')
+    print("✓ Valid case 2 (read terr 1 with 4 columns): Success")
+    print(f"  Columns: {table.colnames}")
+except Exception as e:
+    print(f"✗ Valid case 2 failed: {e}")
+
+# Test valid case: read terr 1 2 with proper data structure
+# This should have: col1, col1_perr, col1_nerr, col2, col2_perr, col2_nerr (6 columns)
+content3 = """read terr 1 2
+1 0.1 0.2 2.0 0.3 0.4
+"""
+
+with open('test_valid3.qdp', 'w') as f:
+    f.write(content3)
+
+try:
+    table = Table.read('test_valid3.qdp', format='ascii.qdp')
+    print("✓ Valid case 3 (read terr 1 2 with 6 columns): Success")
+    print(f"  Columns: {table.colnames}")
+except Exception as e:
+    print(f"✗ Valid case 3 failed: {e}")
+
+# Test the original issue: read serr 1 2 (should work)
+content_original = """read serr 1 2 
+1 0.5 1 0.5
+"""
+
+with open('test_original.qdp', 'w') as f:
+    f.write(content_original)
+
+try:
+    table = Table.read('test_original.qdp', format='ascii.qdp')
+    print("✓ Original issue (read serr 1 2): Success")
+    print(f"  Columns: {table.colnames}")
+except Exception as e:
+    print(f"✗ Original issue failed: {e}")
\ No newline at end of file
diff --git a/debug_mesh.png b/debug_mesh.png
new file mode 100644
index 0000000000..9b28d7e742
Binary files /dev/null and b/debug_mesh.png differ
diff --git a/debug_mesh.py b/debug_mesh.py
new file mode 100644
index 0000000000..9846f1e8fe
--- /dev/null
+++ b/debug_mesh.py
@@ -0,0 +1,27 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt  
+from matplotlib.colors import from_levels_and_colors
+
+my_cmap = mpl.cm.viridis
+bounds = np.arange(10)
+nb_colors = len(bounds) + 1
+colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+plt.figure(figsize=(5, 1))
+ax = plt.subplot(111)
+cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)
+
+# Let's inspect the mesh
+X, Y = cbar._mesh()
+print("X shape:", X.shape)
+print("Y shape:", Y.shape)
+print("X values:")
+print(X)
+print("Y values:")
+print(Y)
+
+plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+plt.savefig('debug_mesh.png')
+plt.show()
\ No newline at end of file
diff --git a/debug_segments.png b/debug_segments.png
new file mode 100644
index 0000000000..f709a281f3
Binary files /dev/null and b/debug_segments.png differ
diff --git a/debug_segments.py b/debug_segments.py
new file mode 100644
index 0000000000..95649c9c2e
--- /dev/null
+++ b/debug_segments.py
@@ -0,0 +1,26 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt  
+from matplotlib.colors import from_levels_and_colors
+
+my_cmap = mpl.cm.viridis
+bounds = np.arange(10)
+nb_colors = len(bounds) + 1
+colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+plt.figure(figsize=(5, 1))
+ax = plt.subplot(111)
+cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)
+
+# Let's inspect the segments that would be created
+X, Y = cbar._mesh()
+segments = np.dstack([X, Y])[1:-1]
+print("Number of segments:", len(segments))
+print("Segments:")
+for i, segment in enumerate(segments):
+    print(f"Segment {i}: {segment}")
+
+plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+plt.savefig('debug_segments.png')
+plt.show()
\ No newline at end of file
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index c59b0ac815..81834cf032 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -651,8 +651,20 @@ class Colorbar:
             if not self.drawedges:
                 if len(self._y) >= self.n_rasterize:
                     self.solids.set_rasterized(True)
-        self.dividers.set_segments(
-            np.dstack([X, Y])[1:-1] if self.drawedges else [])
+        if self.drawedges:
+            segments = np.dstack([X, Y])
+            # For extended colorbars, include edges at extremities
+            if self.extend == 'both':
+                segments = segments  # Include all segments (0 to -1)
+            elif self.extend == 'min':
+                segments = segments[1:]  # Exclude only the first segment
+            elif self.extend == 'max':
+                segments = segments[:-1]  # Exclude only the last segment
+            else:  # extend == 'neither'
+                segments = segments[1:-1]  # Exclude both extremities
+            self.dividers.set_segments(segments)
+        else:
+            self.dividers.set_segments([])
 
     def _add_solids_patches(self, X, Y, C, mappable):
         hatches = mappable.hatches * len(C)  # Have enough hatches.
diff --git a/reproduce_issue.png b/reproduce_issue.png
new file mode 100644
index 0000000000..f709a281f3
Binary files /dev/null and b/reproduce_issue.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e6f47b95c7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt  
+from matplotlib.colors import from_levels_and_colors
+
+my_cmap = mpl.cm.viridis
+bounds = np.arange(10)
+nb_colors = len(bounds) + 1
+colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+plt.figure(figsize=(5, 1))
+ax = plt.subplot(111)
+cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)
+plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+plt.savefig('reproduce_issue.png')
+plt.show()
\ No newline at end of file
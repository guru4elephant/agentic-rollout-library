diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..65f7dc6e9b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+"""Script to reproduce the async related manager issue."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django.db import models
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, related_name='books', on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'test'
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+
+async def test_async_methods():
+    """Test async methods on related managers."""
+    print("Testing async methods on related managers...")
+    
+    # Create an author in sync context first
+    from asgiref.sync import sync_to_async
+    author = await sync_to_async(Author.objects.create)(name='Test Author')
+    
+    # Test reverse many-to-one manager (books)
+    print("\n1. Testing reverse many-to-one manager (author.books):")
+    
+    # Check if async methods exist
+    if hasattr(author.books, 'acreate'):
+        print("  - acreate method exists")
+        try:
+            book = await author.books.acreate(title='Async Book')
+            print(f"  - acreate() worked: {book}")
+        except Exception as e:
+            print(f"  - acreate() failed: {e}")
+    else:
+        print("  - acreate method does not exist")
+    
+    if hasattr(author.books, 'aget_or_create'):
+        print("  - aget_or_create method exists")
+        try:
+            book, created = await author.books.aget_or_create(title='Async Get or Create Book')
+            print(f"  - aget_or_create() worked: {book}, created: {created}")
+        except Exception as e:
+            print(f"  - aget_or_create() failed: {e}")
+    else:
+        print("  - aget_or_create method does not exist")
+    
+    if hasattr(author.books, 'aupdate_or_create'):
+        print("  - aupdate_or_create method exists")
+        try:
+            book, created = await author.books.aupdate_or_create(
+                title='Async Update or Create Book',
+                defaults={'title': 'Updated Async Book'}
+            )
+            print(f"  - aupdate_or_create() worked: {book}, created: {created}")
+        except Exception as e:
+            print(f"  - aupdate_or_create() failed: {e}")
+    else:
+        print("  - aupdate_or_create method does not exist")
+    
+    print("\n2. Testing regular methods for comparison:")
+    try:
+        book = author.books.create(title='Sync Book')
+        print(f"  - create() worked: {book}")
+    except Exception as e:
+        print(f"  - create() failed: {e}")
+    
+    try:
+        book, created = author.books.get_or_create(title='Sync Get or Create Book')
+        print(f"  - get_or_create() worked: {book}, created: {created}")
+    except Exception as e:
+        print(f"  - get_or_create() failed: {e}")
+
+if __name__ == '__main__':
+    import asyncio
+    asyncio.run(test_async_methods())
\ No newline at end of file
diff --git a/reproduce_simple.py b/reproduce_simple.py
new file mode 100644
index 0000000000..a6b78eac77
--- /dev/null
+++ b/reproduce_simple.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+"""Simple script to reproduce the async related manager issue."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django.db import models
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, related_name='books', on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'test'
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+
+def test_async_methods():
+    """Test async methods on related managers."""
+    print("Testing async methods on related managers...")
+    
+    # Create an author
+    author = Author.objects.create(name='Test Author')
+    
+    # Test reverse many-to-one manager (books)
+    print("\n1. Testing reverse many-to-one manager (author.books):")
+    
+    # Check if async methods exist
+    if hasattr(author.books, 'acreate'):
+        print("  - acreate method exists")
+        try:
+            # Test if it's callable (won't actually work without async context)
+            print(f"  - acreate is callable: {callable(author.books.acreate)}")
+        except Exception as e:
+            print(f"  - acreate check failed: {e}")
+    else:
+        print("  - acreate method does not exist")
+    
+    if hasattr(author.books, 'aget_or_create'):
+        print("  - aget_or_create method exists")
+        try:
+            print(f"  - aget_or_create is callable: {callable(author.books.aget_or_create)}")
+        except Exception as e:
+            print(f"  - aget_or_create check failed: {e}")
+    else:
+        print("  - aget_or_create method does not exist")
+    
+    if hasattr(author.books, 'aupdate_or_create'):
+        print("  - aupdate_or_create method exists")
+        try:
+            print(f"  - aupdate_or_create is callable: {callable(author.books.aupdate_or_create)}")
+        except Exception as e:
+            print(f"  - aupdate_or_create check failed: {e}")
+    else:
+        print("  - aupdate_or_create method does not exist")
+    
+    print("\n2. Testing regular methods for comparison:")
+    try:
+        book = author.books.create(title='Sync Book')
+        print(f"  - create() worked: {book}")
+    except Exception as e:
+        print(f"  - create() failed: {e}")
+    
+    try:
+        book, created = author.books.get_or_create(title='Sync Get or Create Book')
+        print(f"  - get_or_create() worked: {book}, created: {created}")
+    except Exception as e:
+        print(f"  - get_or_create() failed: {e}")
+
+if __name__ == '__main__':
+    test_async_methods()
\ No newline at end of file
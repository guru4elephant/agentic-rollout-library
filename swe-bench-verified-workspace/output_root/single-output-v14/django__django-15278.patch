diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..118d1c5fda
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the SQLite OneToOneField migration issue.
+Based on the GitHub issue description.
+"""
+
+import os
+import tempfile
+import django
+from django.conf import settings
+from django.db import models
+from django.db import connections
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+# Create a simple model structure to reproduce the issue
+class RefreshToken(models.Model):
+    token = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'test_app'
+
+class AccessToken(models.Model):
+    token = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'test_app'
+
+def test_one_to_one_migration():
+    print("Testing OneToOneField migration on SQLite...")
+    
+    # Get database connection
+    connection = connections['default']
+    
+    try:
+        # Create the initial tables
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(RefreshToken)
+            schema_editor.create_model(AccessToken)
+        
+        # Now try to add a OneToOneField with the problematic configuration
+        with connection.schema_editor() as schema_editor:
+            # Create a OneToOneField with the same configuration as in the issue
+            field = models.OneToOneField(
+                RefreshToken,
+                blank=True,
+                null=True,
+                on_delete=models.SET_NULL,
+                related_name="refreshed_access_token"
+            )
+            field.set_attributes_from_name('source_refresh_token')
+            
+            # Add the field to the AccessToken model
+            schema_editor.add_field(AccessToken, field)
+            print("SUCCESS: OneToOneField was added successfully!")
+            
+    except Exception as e:
+        print(f"ERROR: {type(e).__name__}: {e}")
+        return False
+    
+    return True
+
+if __name__ == '__main__':
+    success = test_one_to_one_migration()
+    print(f"Test completed: {'PASSED' if success else 'FAILED'}")
\ No newline at end of file
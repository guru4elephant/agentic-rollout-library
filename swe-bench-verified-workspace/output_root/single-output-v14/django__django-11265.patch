diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..a569e2969c 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1665,7 +1665,7 @@ class Query(BaseExpression):
         if isinstance(filter_rhs, F):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
-        query = Query(self.model)
+        query = self.clone()
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9bda623e05
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the Python path
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Q, FilteredRelation
+from django.test.utils import get_runner
+
+# Setup Django
+django.setup()
+
+# Import the test models
+from tests.filtered_relation.models import Author
+
+def reproduce_issue():
+    """Reproduce the issue with exclude on annotated FilteredRelation"""
+    
+    # Create test data similar to the test setup
+    author1 = Author.objects.create(name='Alice')
+    author2 = Author.objects.create(name='Jane')
+    
+    # This should work fine with filter
+    print("Testing with filter (should work):")
+    qs_filter = Author.objects.annotate(
+        book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+    ).filter(book_alice__isnull=False)
+    print(f"Filter result: {list(qs_filter)}")
+    
+    # This should fail with exclude according to the issue
+    print("\nTesting with exclude (should fail):")
+    try:
+        qs_exclude = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+        ).exclude(book_alice__isnull=False)
+        print(f"Exclude result: {list(qs_exclude)}")
+    except Exception as e:
+        print(f"Error with exclude: {e}")
+        print(f"Error type: {type(e)}")
+        return False
+    
+    return True
+
+if __name__ == '__main__':
+    reproduce_issue()
\ No newline at end of file
diff --git a/reproduce_issue_minimal.py b/reproduce_issue_minimal.py
new file mode 100644
index 0000000000..43999b6c63
--- /dev/null
+++ b/reproduce_issue_minimal.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the Python path
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings manually
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'tests.filtered_relation',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+# Create database tables
+from django.core.management import execute_from_command_line
+execute_from_command_line(['', 'migrate', '--run-syncdb'])
+
+from django.db import models
+from django.db.models import Q, FilteredRelation
+
+# Import the test models
+from tests.filtered_relation.models import Author, Book, Editor
+
+def reproduce_issue():
+    """Reproduce the issue with exclude on annotated FilteredRelation"""
+    
+    # Create test data similar to the test setup
+    author1 = Author.objects.create(name='Alice')
+    author2 = Author.objects.create(name='Jane')
+    editor_a = Editor.objects.create(name='a')
+    editor_b = Editor.objects.create(name='b')
+    
+    book1 = Book.objects.create(
+        title='Poem by Alice',
+        editor=editor_a,
+        author=author1,
+    )
+    book2 = Book.objects.create(
+        title='The book by Jane A',
+        editor=editor_b,
+        author=author2,
+    )
+    
+    # This should work fine with filter
+    print("Testing with filter (should work):")
+    qs_filter = Author.objects.annotate(
+        book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+    ).filter(book_alice__isnull=False)
+    print(f"Filter result count: {qs_filter.count()}")
+    
+    # This should fail with exclude according to the issue
+    print("\nTesting with exclude (should fail):")
+    try:
+        qs_exclude = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+        ).exclude(book_alice__isnull=False)
+        print(f"Exclude result count: {qs_exclude.count()}")
+        print("Exclude worked!")
+        return True
+    except Exception as e:
+        print(f"Error with exclude: {e}")
+        print(f"Error type: {type(e)}")
+        return False
+
+if __name__ == '__main__':
+    success = reproduce_issue()
+    print(f"\nTest completed: {'SUCCESS' if success else 'FAILED'}")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..3213e45ca3
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the Python path
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings manually
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'tests.filtered_relation',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+# Create database tables
+from django.core.management import execute_from_command_line
+execute_from_command_line(['', 'migrate', '--run-syncdb'])
+
+from django.db import models
+from django.db.models import Q, FilteredRelation
+
+# Import the test models
+from tests.filtered_relation.models import Author, Book, Editor
+
+def test_exclude_with_filtered_relation():
+    """Test that exclude works with annotated FilteredRelation"""
+    
+    # Create test data
+    author1 = Author.objects.create(name='Alice')
+    author2 = Author.objects.create(name='Jane')
+    editor_a = Editor.objects.create(name='a')
+    editor_b = Editor.objects.create(name='b')
+    
+    book1 = Book.objects.create(
+        title='Poem by Alice',
+        editor=editor_a,
+        author=author1,
+    )
+    book2 = Book.objects.create(
+        title='The book by Jane A',
+        editor=editor_b,
+        author=author2,
+    )
+    
+    print("Testing filter with FilteredRelation (should work):")
+    try:
+        qs_filter = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+        ).filter(book_alice__isnull=False)
+        result_filter = list(qs_filter)
+        print(f"✓ Filter worked: {len(result_filter)} results")
+    except Exception as e:
+        print(f"✗ Filter failed: {e}")
+        return False
+    
+    print("\nTesting exclude with FilteredRelation (should work after fix):")
+    try:
+        qs_exclude = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+        ).exclude(book_alice__isnull=False)
+        result_exclude = list(qs_exclude)
+        print(f"✓ Exclude worked: {len(result_exclude)} results")
+        return True
+    except Exception as e:
+        print(f"✗ Exclude failed: {e}")
+        return False
+
+if __name__ == '__main__':
+    success = test_exclude_with_filtered_relation()
+    print(f"\nTest result: {'PASSED' if success else 'FAILED'}")
\ No newline at end of file
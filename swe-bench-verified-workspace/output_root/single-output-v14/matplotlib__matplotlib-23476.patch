diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index c55864243a..325392e69e 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -3044,7 +3044,11 @@ class Figure(FigureBase):
         self.__dict__ = state
 
         # re-initialise some of the unstored state information
+        # Store original DPI to prevent MacOSX backend from doubling it
+        original_dpi = self._dpi
         FigureCanvasBase(self)  # Set self.canvas.
+        # Restore original DPI if it was modified during canvas creation
+        self._dpi = original_dpi
 
         if restore_to_pylab:
             # lazy import to avoid circularity
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8f895654df
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+import numpy as np
+import matplotlib
+import matplotlib.pyplot as plt
+import pickle
+import platform
+
+# Force MacOSX backend
+matplotlib.use('MacOSX')
+print(matplotlib.get_backend())
+print('Matplotlib ver:', matplotlib.__version__)
+print('Platform:', platform.platform())
+print('System:', platform.system())
+print('Release:', platform.release())
+print('Python ver:', platform.python_version())
+
+
+def dump_load_get_dpi(fig):
+    with open('sinus.pickle','wb') as file:
+        pickle.dump(fig, file)
+
+    with open('sinus.pickle', 'rb') as blob:
+        fig2 = pickle.load(blob)
+    return fig2, fig2.dpi
+
+
+def run():
+    fig = plt.figure()
+    x = np.linspace(0,2*np.pi)
+    y = np.sin(x)
+
+    for i in range(32):
+        print(f'{i}: {fig.dpi}')
+        fig, dpi = dump_load_get_dpi(fig)
+
+
+if __name__ == '__main__':
+    run()
\ No newline at end of file
diff --git a/sinus.pickle b/sinus.pickle
new file mode 100644
index 0000000000..76516f4d54
Binary files /dev/null and b/sinus.pickle differ
diff --git a/test_dpi_fix.py b/test_dpi_fix.py
new file mode 100644
index 0000000000..883e9ba6d6
--- /dev/null
+++ b/test_dpi_fix.py
@@ -0,0 +1,22 @@
+import numpy as np
+import matplotlib
+import matplotlib.pyplot as plt
+import pickle
+
+def test_dpi_preservation():
+    # Create a figure with specific DPI
+    fig = plt.figure(dpi=150)
+    print(f"Original DPI: {fig.dpi}")
+    
+    # Pickle and unpickle
+    data = pickle.dumps(fig)
+    fig2 = pickle.loads(data)
+    
+    print(f"Unpickled DPI: {fig2.dpi}")
+    
+    # Test that DPI is preserved
+    assert fig.dpi == fig2.dpi, f"DPI not preserved: {fig.dpi} != {fig2.dpi}"
+    print("✓ DPI preservation test passed!")
+
+if __name__ == "__main__":
+    test_dpi_preservation()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..85691e090c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,33 @@
+import numpy as np
+import matplotlib
+import matplotlib.pyplot as plt
+import pickle
+
+def test_different_dpis():
+    """Test with various DPI values"""
+    dpis = [72, 96, 100, 150, 200, 300]
+    
+    for dpi in dpis:
+        fig = plt.figure(dpi=dpi)
+        data = pickle.dumps(fig)
+        fig2 = pickle.loads(data)
+        
+        assert fig.dpi == fig2.dpi, f"DPI not preserved: {fig.dpi} != {fig2.dpi}"
+        print(f"✓ DPI {dpi} preserved correctly")
+    
+    print("✓ All DPI values preserved correctly!")
+
+def test_default_dpi():
+    """Test with default DPI"""
+    fig = plt.figure()  # Default DPI
+    original_dpi = fig.dpi
+    
+    data = pickle.dumps(fig)
+    fig2 = pickle.loads(data)
+    
+    assert fig.dpi == fig2.dpi, f"Default DPI not preserved: {fig.dpi} != {fig2.dpi}"
+    print(f"✓ Default DPI {original_dpi} preserved correctly!")
+
+if __name__ == '__main__':
+    test_different_dpis()
+    test_default_dpi()
\ No newline at end of file
diff --git a/test_multiple_unpickle.py b/test_multiple_unpickle.py
new file mode 100644
index 0000000000..1bf6b51287
--- /dev/null
+++ b/test_multiple_unpickle.py
@@ -0,0 +1,29 @@
+import numpy as np
+import matplotlib
+import matplotlib.pyplot as plt
+import pickle
+
+def dump_load_get_dpi(fig):
+    data = pickle.dumps(fig)
+    fig2 = pickle.loads(data)
+    return fig2, fig2.dpi
+
+def run():
+    fig = plt.figure(dpi=200)
+    x = np.linspace(0, 2*np.pi)
+    y = np.sin(x)
+
+    for i in range(10):
+        print(f'{i}: {fig.dpi}')
+        fig, dpi = dump_load_get_dpi(fig)
+        
+        # Check that DPI doesn't double
+        if i > 0 and fig.dpi != 200:
+            print(f"ERROR: DPI changed to {fig.dpi} on iteration {i}")
+            return False
+    
+    print("✓ Multiple unpickling test passed!")
+    return True
+
+if __name__ == '__main__':
+    run()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f1087a810e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Reproduce the issue described in the GitHub issue
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+max_degrees = 3
+min_degrees = 3
+
+print("Testing itermonomials with max_degrees=3, min_degrees=3:")
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), 
+                   key=monomial_key('grlex', states))
+print(monomials)
+print(f"Number of monomials: {len(monomials)}")
+
+# Expected: should include monomials like x1*x2**2, x2*x3**2, etc.
+# Let's also test with higher max_degrees to see if the issue persists
+print("\nTesting with max_degrees=4, min_degrees=3:")
+monomials2 = sorted(sp.itermonomials(states, 4, min_degrees=3), 
+                   key=monomial_key('grlex', states))
+print(monomials2)
+print(f"Number of monomials: {len(monomials2)}")
+
+# Let's also test without min_degrees to see the expected behavior
+print("\nTesting with max_degrees=3, no min_degrees (should show all monomials up to degree 3):")
+monomials3 = sorted(sp.itermonomials(states, 3), 
+                   key=monomial_key('grlex', states))
+print(monomials3)
+print(f"Number of monomials: {len(monomials3)}")
\ No newline at end of file
diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..d2cd3451e5 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_comm.append(Mul(*item))
             yield from set(monomials_list_comm)
         else:
@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_non_comm.append(Mul(*item))
             yield from set(monomials_list_non_comm)
     else:
diff --git a/test_comprehensive_fix.py b/test_comprehensive_fix.py
new file mode 100644
index 0000000000..32ec3c45e4
--- /dev/null
+++ b/test_comprehensive_fix.py
@@ -0,0 +1,79 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+def test_original_issue():
+    """Test the original issue from GitHub"""
+    print("=== Testing Original Issue ===")
+    x1, x2, x3 = sp.symbols('x1, x2, x3')
+    states = [x1, x2, x3]
+    max_degrees = 3
+    min_degrees = 3
+    
+    monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), 
+                       key=monomial_key('grlex', states))
+    print("Monomials:", monomials)
+    print("Number of monomials:", len(monomials))
+    
+    # Should include all degree 3 monomials, not just pure powers
+    expected_monomials = [
+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,
+        x2**3, x2**2*x3, x2*x3**2, x3**3
+    ]
+    
+    assert len(monomials) == 10, f"Expected 10 monomials, got {len(monomials)}"
+    assert set(monomials) == set(expected_monomials), f"Monomials don't match expected set"
+    print("âœ“ Original issue fixed!")
+
+def test_various_cases():
+    """Test various cases to ensure the fix works correctly"""
+    print("\n=== Testing Various Cases ===")
+    x, y = sp.symbols('x y')
+    
+    # Test 1: min_degrees = max_degrees = 1
+    monomials = sorted(sp.itermonomials([x, y], 1, min_degrees=1), 
+                       key=monomial_key('grlex', [x, y]))
+    expected = [x, y]
+    assert set(monomials) == set(expected), f"Case 1 failed: {monomials} != {expected}"
+    print("âœ“ Case 1 passed")
+    
+    # Test 2: min_degrees = 1, max_degrees = 2
+    monomials = sorted(sp.itermonomials([x, y], 2, min_degrees=1), 
+                       key=monomial_key('grlex', [x, y]))
+    expected = [x, y, x**2, x*y, y**2]
+    assert set(monomials) == set(expected), f"Case 2 failed: {monomials} != {expected}"
+    print("âœ“ Case 2 passed")
+    
+    # Test 3: min_degrees = 2, max_degrees = 3
+    monomials = sorted(sp.itermonomials([x, y], 3, min_degrees=2), 
+                       key=monomial_key('grlex', [x, y]))
+    expected = [x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3]
+    assert set(monomials) == set(expected), f"Case 3 failed: {monomials} != {expected}"
+    print("âœ“ Case 3 passed")
+
+def test_edge_cases():
+    """Test edge cases"""
+    print("\n=== Testing Edge Cases ===")
+    x, y = sp.symbols('x y')
+    
+    # Test 1: min_degrees = 0 (should include all monomials up to max_degrees)
+    monomials = sorted(sp.itermonomials([x, y], 2, min_degrees=0), 
+                       key=monomial_key('grlex', [x, y]))
+    expected = [1, x, y, x**2, x*y, y**2]
+    assert set(monomials) == set(expected), f"Edge case 1 failed: {monomials} != {expected}"
+    print("âœ“ Edge case 1 passed")
+    
+    # Test 2: min_degrees > max_degrees (should return empty)
+    monomials = list(sp.itermonomials([x, y], 2, min_degrees=3))
+    assert len(monomials) == 0, f"Edge case 2 failed: Expected empty, got {monomials}"
+    print("âœ“ Edge case 2 passed")
+    
+    # Test 3: min_degrees = max_degrees = 0
+    monomials = list(sp.itermonomials([x, y], 0, min_degrees=0))
+    assert monomials == [1], f"Edge case 3 failed: Expected [1], got {monomials}"
+    print("âœ“ Edge case 3 passed")
+
+if __name__ == "__main__":
+    test_original_issue()
+    test_various_cases()
+    test_edge_cases()
+    print("\nðŸŽ‰ All tests passed! The fix is working correctly.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..7f001f6235
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,28 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Test edge cases to ensure the fix doesn't break anything
+x, y = sp.symbols('x y')
+
+print("Testing edge case: min_degrees = 0")
+monomials = sorted(sp.itermonomials([x, y], 2, min_degrees=0), 
+                   key=monomial_key('grlex', [x, y]))
+print(monomials)
+print(f"Number of monomials: {len(monomials)}")
+
+print("\nTesting edge case: min_degrees = max_degrees = 0")
+monomials = sorted(sp.itermonomials([x, y], 0, min_degrees=0), 
+                   key=monomial_key('grlex', [x, y]))
+print(monomials)
+print(f"Number of monomials: {len(monomials)}")
+
+print("\nTesting edge case: min_degrees > max_degrees (should return empty)")
+monomials = list(sp.itermonomials([x, y], 2, min_degrees=3))
+print(monomials)
+print(f"Number of monomials: {len(monomials)}")
+
+print("\nTesting with non-commutative variables")
+a, b = sp.symbols('a b', commutative=False)
+monomials = list(sp.itermonomials([a, b, x], 2, min_degrees=1))
+print(f"Number of monomials: {len(monomials)}")
+print("First few monomials:", monomials[:5])
\ No newline at end of file
diff --git a/test_github_example.py b/test_github_example.py
new file mode 100644
index 0000000000..c9d048b81f
--- /dev/null
+++ b/test_github_example.py
@@ -0,0 +1,22 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Exact code from the GitHub issue
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+max_degrees = 3
+min_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), 
+                   key=monomial_key('grlex', states))
+print(monomials)
+
+# The issue stated it should return more than just [x3**3, x2**3, x1**3]
+# Now it should return all degree 3 monomials
+print(f"\nNumber of monomials: {len(monomials)}")
+print("Expected to include monomials like x1*x2**2, x2*x3**2, etc.")
+
+# Verify we have the expected monomials
+expected_count = 10  # For 3 variables, there are 10 degree 3 monomials
+assert len(monomials) == expected_count, f"Expected {expected_count} monomials, got {len(monomials)}"
+
+print("\nâœ… GitHub issue example now works correctly!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d9f1f22cac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from sympy import ring, ZZ, symbols
+
+print("Testing the issue with PolyElement.as_expr() not accepting symbols...")
+
+# Create the ring and polynomial as in the issue
+R, x, y, z = ring("x,y,z", ZZ)
+f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+print(f"Original polynomial: {f}")
+print(f"Type: {type(f)}")
+
+# Try to use different symbols
+U, V, W = symbols("u,v,w")
+print(f"\nAttempting to use symbols: {U}, {V}, {W}")
+
+try:
+    result = f.as_expr(U, V, W)
+    print(f"Result with custom symbols: {result}")
+    print("Issue: The symbols were ignored - it should use u,v,w instead of x,y,z")
+except Exception as e:
+    print(f"Error occurred: {e}")
+
+# Test with correct number of symbols (using regular symbols)
+try:
+    X, Y, Z = symbols("x,y,z")
+    result = f.as_expr(X, Y, Z)
+    print(f"\nResult with original symbols: {result}")
+except Exception as e:
+    print(f"Error with original symbols: {e}")
+
+# Test with wrong number of symbols
+try:
+    result = f.as_expr(U, V)  # Only 2 symbols instead of 3
+    print(f"Result with wrong number of symbols: {result}")
+except Exception as e:
+    print(f"Error with wrong number of symbols (expected): {e}")
\ No newline at end of file
diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py
index 12bd2fc920..4f81743552 100644
--- a/sympy/polys/rings.py
+++ b/sympy/polys/rings.py
@@ -616,8 +616,9 @@ def set_ring(self, new_ring):
             return new_ring.from_dict(self, self.ring.domain)
 
     def as_expr(self, *symbols):
-        if symbols and len(symbols) != self.ring.ngens:
-            raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
+        if symbols:
+            if len(symbols) != self.ring.ngens:
+                raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
         else:
             symbols = self.ring.symbols
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..91ab8c307d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+from sympy import ring, ZZ, symbols
+
+print("Testing edge cases for PolyElement.as_expr()...")
+
+# Test 1: No symbols provided (should use ring symbols)
+R, x, y, z = ring("x,y,z", ZZ)
+f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+try:
+    result = f.as_expr()
+    print(f"Test 1 - No symbols provided: {result}")
+except Exception as e:
+    print(f"Test 1 - Error: {e}")
+
+# Test 2: Wrong number of symbols (should raise error)
+U, V = symbols("u,v")
+try:
+    result = f.as_expr(U, V)  # Only 2 symbols instead of 3
+    print(f"Test 2 - Wrong number of symbols: {result}")
+except Exception as e:
+    print(f"Test 2 - Error (expected): {e}")
+
+# Test 3: Single variable polynomial
+R_single, x_single = ring("x", ZZ)
+f_single = 3*x_single**2 + 2*x_single + 1
+U_single = symbols("u")
+
+try:
+    result = f_single.as_expr(U_single)
+    print(f"Test 3 - Single variable with custom symbol: {result}")
+except Exception as e:
+    print(f"Test 3 - Error: {e}")
+
+# Test 4: Empty polynomial (constant)
+R_empty, = ring("", ZZ)
+f_empty = R_empty(5)
+try:
+    result = f_empty.as_expr()
+    print(f"Test 4 - Constant polynomial: {result}")
+except Exception as e:
+    print(f"Test 4 - Error: {e}")
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
diff --git a/django/utils/timesince.py b/django/utils/timesince.py
index 701c49bab9..18bbe04490 100644
--- a/django/utils/timesince.py
+++ b/django/utils/timesince.py
@@ -97,6 +97,8 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
             d.hour,
             d.minute,
             d.second,
+            0,  # microseconds
+            d.tzinfo,  # timezone info
         )
     else:
         pivot = d
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4737dac5ef
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+    SECRET_KEY='test-secret-key'
+)
+
+django.setup()
+
+import datetime
+from django.utils import timezone
+from django.utils.timesince import timesince
+
+# Test the issue described in the GitHub issue
+print("Testing timesince() with USE_TZ=True and >1 month interval...")
+
+try:
+    now = timezone.now()
+    d = now - datetime.timedelta(days=31)
+    result = timesince(d)
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+    print("This confirms the issue exists!")
+
+# Let's also test with a naive datetime to see the difference
+print("\nTesting with naive datetime (should work):")
+try:
+    naive_now = datetime.datetime.now()
+    naive_d = naive_now - datetime.timedelta(days=31)
+    result = timesince(naive_d)
+    print(f"Success: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..09c91c09aa
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings for testing
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+settings.configure(
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+django.setup()
+
+from django.test.utils import get_runner
+
+TestRunner = get_runner(settings)
+test_runner = TestRunner()
+failures = test_runner.run_tests(['tests.utils_tests.test_timesince'])
+
+if failures:
+    print(f"Tests failed: {failures}")
+else:
+    print("All tests passed!")
\ No newline at end of file
diff --git a/test_backward_compatibility.py b/test_backward_compatibility.py
new file mode 100644
index 0000000000..65ba281504
--- /dev/null
+++ b/test_backward_compatibility.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    USE_TZ=False,  # Test without timezone support first
+    SECRET_KEY='test-secret-key'
+)
+
+django.setup()
+
+import datetime
+from django.utils.timesince import timesince
+
+def test_backward_compatibility():
+    """Test that our fix doesn't break existing functionality"""
+    print("Testing backward compatibility...")
+    
+    # Test the original examples from the test file
+    t = datetime.datetime(2007, 8, 14, 13, 46, 0)
+    
+    # Test equal datetimes
+    try:
+        result = timesince(t, t)
+        assert result == "0\xa0minutes", f"Expected '0 minutes', got '{result}'"
+        print("‚úì Equal datetimes test passed")
+    except Exception as e:
+        print(f"‚úó Equal datetimes test failed: {e}")
+        return False
+    
+    # Test various time intervals
+    test_cases = [
+        (datetime.timedelta(minutes=1), "1\xa0minute"),
+        (datetime.timedelta(hours=1), "1\xa0hour"),
+        (datetime.timedelta(days=1), "1\xa0day"),
+        (datetime.timedelta(days=7), "1\xa0week"),
+        (datetime.timedelta(days=31), "1\xa0month"),
+        (datetime.timedelta(days=366), "1\xa0year"),
+    ]
+    
+    for delta, expected in test_cases:
+        try:
+            result = timesince(t, t + delta)
+            assert result == expected, f"Expected '{expected}', got '{result}' for {delta}"
+            print(f"‚úì {delta} test passed: {result}")
+        except Exception as e:
+            print(f"‚úó {delta} test failed: {e}")
+            return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_backward_compatibility()
+    if success:
+        print("\nüéâ All backward compatibility tests passed!")
+    else:
+        print("\n‚ùå Some backward compatibility tests failed.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a716b82420
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+    SECRET_KEY='test-secret-key'
+)
+
+django.setup()
+
+import datetime
+from django.utils import timezone
+from django.utils.timesince import timesince
+
+def test_edge_cases():
+    """Test edge cases for the timesince fix"""
+    print("Testing edge cases for timesince() fix...")
+    
+    # Test case 1: Naive datetime (tzinfo should be None)
+    naive_dt = datetime.datetime.now()
+    print(f"Naive datetime tzinfo: {naive_dt.tzinfo}")
+    
+    # Test case 2: Timezone-aware datetime
+    aware_dt = timezone.now()
+    print(f"Aware datetime tzinfo: {aware_dt.tzinfo}")
+    
+    # Test case 3: Make sure our fix handles None tzinfo correctly
+    now = timezone.now()
+    
+    # Test with naive datetime (should work)
+    naive_past = datetime.datetime.now() - datetime.timedelta(days=31)
+    try:
+        result = timesince(naive_past)
+        print(f"‚úì Naive datetime >1 month: {result}")
+    except Exception as e:
+        print(f"‚úó Naive datetime >1 month failed: {type(e).__name__}: {e}")
+        return False
+    
+    # Test with aware datetime (should work)
+    aware_past = now - datetime.timedelta(days=31)
+    try:
+        result = timesince(aware_past)
+        print(f"‚úì Aware datetime >1 month: {result}")
+    except Exception as e:
+        print(f"‚úó Aware datetime >1 month failed: {type(e).__name__}: {e}")
+        return False
+    
+    # Test case 4: Very long time ago
+    very_old = now - datetime.timedelta(days=365 * 2)  # 2 years
+    try:
+        result = timesince(very_old)
+        print(f"‚úì Very old datetime: {result}")
+    except Exception as e:
+        print(f"‚úó Very old datetime failed: {type(e).__name__}: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_edge_cases()
+    if success:
+        print("\nüéâ All edge case tests passed!")
+    else:
+        print("\n‚ùå Some edge case tests failed.")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..0cb67cb7c3
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+    SECRET_KEY='test-secret-key'
+)
+
+django.setup()
+
+import datetime
+from django.utils import timezone
+from django.utils.timesince import timesince
+
+def test_timesince_with_timezone():
+    """Test the specific case mentioned in the GitHub issue"""
+    print("Testing timesince() with USE_TZ=True and >1 month interval...")
+    
+    # Test case 1: Timezone-aware datetime (should work with our fix)
+    now = timezone.now()
+    d = now - datetime.timedelta(days=31)
+    try:
+        result = timesince(d)
+        print(f"‚úì Timezone-aware datetime: {result}")
+    except Exception as e:
+        print(f"‚úó Timezone-aware datetime failed: {type(e).__name__}: {e}")
+        return False
+    
+    # Test case 2: Naive datetime (should continue to work)
+    naive_now = datetime.datetime.now()
+    naive_d = naive_now - datetime.timedelta(days=31)
+    try:
+        result = timesince(naive_d)
+        print(f"‚úì Naive datetime: {result}")
+    except Exception as e:
+        print(f"‚úó Naive datetime failed: {type(e).__name__}: {e}")
+        return False
+    
+    # Test case 3: Edge case - exactly 1 month
+    d_exact_month = now - datetime.timedelta(days=30)
+    try:
+        result = timesince(d_exact_month)
+        print(f"‚úì Exactly 1 month: {result}")
+    except Exception as e:
+        print(f"‚úó Exactly 1 month failed: {type(e).__name__}: {e}")
+        return False
+    
+    # Test case 4: More than 1 month
+    d_more_than_month = now - datetime.timedelta(days=60)
+    try:
+        result = timesince(d_more_than_month)
+        print(f"‚úì More than 1 month: {result}")
+    except Exception as e:
+        print(f"‚úó More than 1 month failed: {type(e).__name__}: {e}")
+        return False
+    
+    # Test case 5: Less than 1 month (should not trigger the pivot creation)
+    d_less_than_month = now - datetime.timedelta(days=15)
+    try:
+        result = timesince(d_less_than_month)
+        print(f"‚úì Less than 1 month: {result}")
+    except Exception as e:
+        print(f"‚úó Less than 1 month failed: {type(e).__name__}: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_timesince_with_timezone()
+    if success:
+        print("\nüéâ All tests passed! The fix is working correctly.")
+    else:
+        print("\n‚ùå Some tests failed. Please check the implementation.")
\ No newline at end of file
diff --git a/debug_dimensions.py b/debug_dimensions.py
new file mode 100644
index 0000000000..98f40329d4
--- /dev/null
+++ b/debug_dimensions.py
@@ -0,0 +1,20 @@
+from sympy import *
+from sympy.matrices.expressions.blockmatrix import BlockMatrix
+
+# Create the original matrices
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+
+# Create the block matrix
+b = BlockMatrix([[a, z], [z, z]])
+print("Original block matrix:")
+print("Row block sizes:", b.rowblocksizes)
+print("Col block sizes:", b.colblocksizes)
+
+# Let's see what the result should look like
+print("\nExpected result structure:")
+print("Result should have row block sizes:", b.rowblocksizes)
+print("Result should have col block sizes:", b.colblocksizes)
+
+# The result of b * b should have the same block structure as b
+# but with zeros becoming ZeroMatrix objects with appropriate dimensions
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..4b3c8f4c5a
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,40 @@
+from sympy import *
+from sympy.matrices.expressions.blockmatrix import BlockMatrix
+from sympy.matrices.immutable import ImmutableDenseMatrix
+
+# Create the original matrices
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+
+# Create the block matrix
+b = BlockMatrix([[a, z], [z, z]])
+print("Original block matrix:")
+print(b)
+print("Blocks:", b.blocks)
+print("Blocks type:", type(b.blocks))
+print("Blocks shape:", b.blocks.shape)
+
+# Let's see what happens when we multiply the blocks directly
+print("\nMultiplying blocks directly:")
+result_blocks = b.blocks * b.blocks
+print("Result blocks:", result_blocks)
+print("Result blocks type:", type(result_blocks))
+
+# Check individual elements
+print("\nIndividual elements:")
+for i in range(result_blocks.shape[0]):
+    for j in range(result_blocks.shape[1]):
+        elem = result_blocks[i, j]
+        print(f"result_blocks[{i}, {j}] = {elem}, type = {type(elem)}")
+        if hasattr(elem, 'cols'):
+            print(f"  cols = {elem.cols}")
+        else:
+            print(f"  No cols attribute")
+
+# Try to create a BlockMatrix from the result
+print("\nTrying to create BlockMatrix from result:")
+try:
+    result_bm = BlockMatrix(result_blocks)
+    print("Success:", result_bm)
+except Exception as e:
+    print("Error:", e)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d99d621214
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+from sympy import *
+from sympy.matrices.expressions.blockmatrix import BlockMatrix
+
+# Reproduce the issue
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+print("Testing single multiplication:")
+result1 = b._blockmul(b)
+print("b._blockmul(b):")
+print(result1)
+print("Type of blocks[0, 1]:", type(result1.blocks[0, 1]))
+
+print("\nTesting double multiplication:")
+try:
+    result2 = b._blockmul(b)._blockmul(b)
+    print("b._blockmul(b)._blockmul(b):")
+    print(result2)
+except Exception as e:
+    print("Error:", e)
+    print("Exception type:", type(e))
+
+print("\nTesting block_collapse:")
+try:
+    result3 = block_collapse(b * b * b)
+    print("block_collapse(b * b * b):")
+    print(result3)
+except Exception as e:
+    print("Error:", e)
+    print("Exception type:", type(e))
\ No newline at end of file
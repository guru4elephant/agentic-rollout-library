diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 88c9ca9f28..ddacd66b51 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -542,11 +542,7 @@ class Field(RegisterLookupMixin):
         return NotImplemented
 
     def __hash__(self):
-        return hash((
-            self.creation_counter,
-            self.model._meta.app_label if hasattr(self, 'model') else None,
-            self.model._meta.model_name if hasattr(self, 'model') else None,
-        ))
+        return hash((self.creation_counter,))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d4df4f1cc5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Testing Field.__hash__() immutability...")
+
+# Reproduce the issue from the GitHub issue
+f = models.CharField(max_length=200)
+d = {f: 1}
+print(f"Field hash before assignment: {hash(f)}")
+print(f"Field in dict before assignment: {f in d}")
+
+class Book(models.Model):
+    title = f
+    
+    class Meta:
+        app_label = 'test'
+
+print(f"Field hash after assignment: {hash(f)}")
+print(f"Field in dict after assignment: {f in d}")
+
+try:
+    assert f in d
+    print("‚úÖ Test passed: Field is still in dict after assignment")
+except AssertionError:
+    print("‚ùå Test failed: Field is no longer in dict after assignment")
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_additional_fields.py b/test_additional_fields.py
new file mode 100644
index 0000000000..fc3c5cfbfa
--- /dev/null
+++ b/test_additional_fields.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+def test_field_hash_immutability(field, field_name):
+    print(f"\nTesting {field_name} Field.__hash__() immutability...")
+    
+    d = {field: 1}
+    initial_hash = hash(field)
+    print(f"{field_name} hash before assignment: {initial_hash}")
+    print(f"{field_name} in dict before assignment: {field in d}")
+
+    class TestModel(models.Model):
+        test_field = field
+        
+        class Meta:
+            app_label = 'test'
+
+    final_hash = hash(field)
+    print(f"{field_name} hash after assignment: {final_hash}")
+    print(f"{field_name} in dict after assignment: {field in d}")
+
+    try:
+        assert field in d
+        assert initial_hash == final_hash
+        print(f"‚úÖ {field_name} test passed: Hash is immutable and field remains in dict")
+        return True
+    except AssertionError:
+        print(f"‚ùå {field_name} test failed")
+        return False
+
+# Test various field types
+test_results = []
+test_results.append(test_field_hash_immutability(models.CharField(max_length=200), "CharField"))
+test_results.append(test_field_hash_immutability(models.IntegerField(), "IntegerField"))
+test_results.append(test_field_hash_immutability(models.BooleanField(), "BooleanField"))
+test_results.append(test_field_hash_immutability(models.DateTimeField(), "DateTimeField"))
+
+if all(test_results):
+    print("\nüéâ All tests passed!")
+    sys.exit(0)
+else:
+    print("\n‚ùå Some tests failed!")
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..521460399f
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+# Test basic field functionality
+print("Testing basic field functionality...")
+
+# Create a simple model
+class Book(models.Model):
+    title = models.CharField(max_length=200)
+    pages = models.IntegerField()
+    is_published = models.BooleanField(default=False)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test that fields work correctly
+book = Book(title="Test Book", pages=100, is_published=True)
+print(f"Book title: {book.title}")
+print(f"Book pages: {book.pages}")
+print(f"Book is_published: {book.is_published}")
+
+# Test that hash is still working correctly for field instances
+title_field = Book._meta.get_field('title')
+pages_field = Book._meta.get_field('pages')
+is_published_field = Book._meta.get_field('is_published')
+
+print(f"Title field hash: {hash(title_field)}")
+print(f"Pages field hash: {hash(pages_field)}")
+print(f"Is published field hash: {hash(is_published_field)}")
+
+# Test that different fields have different hashes (they should)
+print(f"Different fields have different hashes: {hash(title_field) != hash(pages_field)}")
+
+print("‚úÖ Basic functionality test passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..ec22888919
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Testing edge cases for Field.__hash__()...")
+
+# Test 1: Same field instance should have same hash
+field1 = models.CharField(max_length=100)
+hash1 = hash(field1)
+hash2 = hash(field1)
+print(f"Same field instance hash consistency: {hash1 == hash2}")
+
+# Test 2: Different field instances should generally have different hashes
+field2 = models.CharField(max_length=100)
+field3 = models.IntegerField()
+print(f"Different CharField instances have different hashes: {hash(field1) != hash(field2)}")
+print(f"Different field types have different hashes: {hash(field1) != hash(field3)}")
+
+# Test 3: Field in dictionary before and after model assignment
+field_dict = {field1: "value1", field2: "value2", field3: "value3"}
+print(f"All fields in dict before model assignment: {all(f in field_dict for f in [field1, field2, field3])}")
+
+class TestModel(models.Model):
+    field1_ref = field1
+    field2_ref = field2
+    field3_ref = field3
+    
+    class Meta:
+        app_label = 'test'
+
+print(f"All fields in dict after model assignment: {all(f in field_dict for f in [field1, field2, field3])}")
+
+# Test 4: Verify that equal fields (by value) are handled correctly
+# This is more complex since field equality might involve more than just creation_counter
+field4 = models.CharField(max_length=100)
+field5 = models.CharField(max_length=100)
+print(f"Different CharField instances with same parameters: {field4 == field5}")
+
+print("‚úÖ Edge case tests completed!")
\ No newline at end of file
diff --git a/test_final_validation.py b/test_final_validation.py
new file mode 100644
index 0000000000..7c98df36ba
--- /dev/null
+++ b/test_final_validation.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Final validation test: Hash immutability + proper equality...")
+
+# Create fields and test hash immutability
+field1 = models.CharField(max_length=100)
+field2 = models.CharField(max_length=100)  # Different instance, same type
+
+initial_hash1 = hash(field1)
+initial_hash2 = hash(field2)
+
+print(f"Field1 initial hash: {initial_hash1}")
+print(f"Field2 initial hash: {initial_hash2}")
+print(f"Fields are equal: {field1 == field2}")
+print(f"Fields have same hash: {hash(field1) == hash(field2)}")
+
+# Assign fields to model classes
+class Book(models.Model):
+    title = field1
+    
+    class Meta:
+        app_label = 'test'
+
+class Author(models.Model):
+    name = field2
+    
+    class Meta:
+        app_label = 'test'
+
+final_hash1 = hash(field1)
+final_hash2 = hash(field2)
+
+print(f"Field1 final hash: {final_hash1}")
+print(f"Field2 final hash: {final_hash2}")
+print(f"Field1 hash unchanged: {initial_hash1 == final_hash1}")
+print(f"Field2 hash unchanged: {initial_hash2 == final_hash2}")
+print(f"Fields are still equal: {field1 == field2}")
+
+# Test dictionary behavior
+field_dict = {field1: "book_field", field2: "author_field"}
+print(f"Field1 in dict: {field1 in field_dict}")
+print(f"Field2 in dict: {field2 in field_dict}")
+print(f"Correct values retrieved: {field_dict[field1] == 'book_field' and field_dict[field2] == 'author_field'}")
+
+print("‚úÖ Final validation test passed!")
\ No newline at end of file
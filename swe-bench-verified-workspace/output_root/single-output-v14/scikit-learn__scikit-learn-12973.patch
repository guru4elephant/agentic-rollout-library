diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..86ae9fc44
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the LassoLarsIC copy_X issue.
+The issue is that the fit method has its own copy_X parameter that
+overrides the constructor's copy_X setting.
+"""
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+def test_copy_x_issue():
+    print("Testing LassoLarsIC copy_X behavior...")
+    
+    # Create some sample data
+    X = np.array([[1, 2], [3, 4], [5, 6]], dtype=np.float64)
+    y = np.array([1, 2, 3], dtype=np.float64)
+    
+    # Test 1: Set copy_X=False in constructor, don't specify in fit
+    print("\n1. Testing: LassoLarsIC(copy_X=False).fit(X, y)")
+    model1 = LassoLarsIC(copy_X=False)
+    print(f"   Constructor copy_X: {model1.copy_X}")
+    
+    # The issue: fit method has copy_X=True by default, which overrides constructor
+    model1.fit(X, y)
+    print("   Fit completed - but we can't easily observe the internal behavior")
+    
+    # Test 2: Set copy_X=False in constructor - this should work consistently now
+    print("\n2. Testing: LassoLarsIC(copy_X=False).fit(X, y)")
+    model2 = LassoLarsIC(copy_X=False)
+    model2.fit(X, y)
+    print("   Fit completed - should use copy_X=False consistently")
+    
+    # Test 3: The problematic case - should no longer be possible
+    print("\n3. Testing that fit method no longer accepts copy_X parameter")
+    try:
+        model3 = LassoLarsIC(copy_X=False)
+        model3.fit(X, y, copy_X=True)  # This should raise an error now
+        print("   ERROR: fit method still accepts copy_X parameter!")
+    except TypeError as e:
+        print(f"   GOOD: fit method correctly rejects copy_X parameter: {e}")
+    
+    print("\nThe issue was that the fit method's copy_X parameter")
+    print("could silently override the constructor's copy_X setting,")
+    print("leading to inconsistent behavior. This has been fixed.")
+
+if __name__ == "__main__":
+    test_copy_x_issue()
\ No newline at end of file
diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..3d8e003a8 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):
         self.eps = eps
         self.fit_path = True
 
-    def fit(self, X, y, copy_X=True):
+    def fit(self, X, y):
         """Fit the model using X, y as training data.
 
         Parameters
@@ -1490,9 +1490,6 @@ class LassoLarsIC(LassoLars):
         y : array-like, shape (n_samples,)
             target values. Will be cast to X's dtype if necessary
 
-        copy_X : boolean, optional, default True
-            If ``True``, X will be copied; else, it may be overwritten.
-
         Returns
         -------
         self : object
@@ -1507,7 +1504,7 @@ class LassoLarsIC(LassoLars):
         Gram = self.precompute
 
         alphas_, active_, coef_path_, self.n_iter_ = lars_path(
-            X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0,
+            X, y, Gram=Gram, copy_X=self.copy_X, copy_Gram=True, alpha_min=0.0,
             method='lasso', verbose=self.verbose, max_iter=max_iter,
             eps=self.eps, return_n_iter=True, positive=self.positive)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..ef1af476c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for LassoLarsIC copy_X fix.
+"""
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+def test_edge_cases():
+    print("Testing LassoLarsIC edge cases...")
+    
+    # Create some sample data
+    X = np.array([[1, 2], [3, 4], [5, 6]], dtype=np.float64)
+    y = np.array([1, 2, 3], dtype=np.float64)
+    
+    # Test 1: Default constructor (should use copy_X=True)
+    print("\n1. Testing default constructor: LassoLarsIC()")
+    model1 = LassoLarsIC()
+    print(f"   Default copy_X: {model1.copy_X}")
+    model1.fit(X, y)
+    print("   Fit completed successfully")
+    
+    # Test 2: Explicit copy_X=True
+    print("\n2. Testing: LassoLarsIC(copy_X=True)")
+    model2 = LassoLarsIC(copy_X=True)
+    print(f"   Constructor copy_X: {model2.copy_X}")
+    model2.fit(X, y)
+    print("   Fit completed successfully")
+    
+    # Test 3: Explicit copy_X=False
+    print("\n3. Testing: LassoLarsIC(copy_X=False)")
+    model3 = LassoLarsIC(copy_X=False)
+    print(f"   Constructor copy_X: {model3.copy_X}")
+    model3.fit(X, y)
+    print("   Fit completed successfully")
+    
+    # Test 4: Verify that fit method signature is correct
+    print("\n4. Testing fit method signature")
+    import inspect
+    sig = inspect.signature(LassoLarsIC.fit)
+    print(f"   Fit method parameters: {list(sig.parameters.keys())}")
+    
+    # Should only have self, X and y parameters, no copy_X
+    expected_params = ['self', 'X', 'y']
+    actual_params = list(sig.parameters.keys())
+    if actual_params == expected_params:
+        print("   GOOD: Fit method has correct signature")
+    else:
+        print(f"   ERROR: Expected {expected_params}, got {actual_params}")
+    
+    print("\nEdge case testing completed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..095dab39f
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the LassoLarsIC copy_X fix.
+The fix should ensure that the constructor's copy_X setting is used consistently.
+"""
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+def test_copy_x_fix():
+    print("Testing LassoLarsIC copy_X fix...")
+    
+    # Create some sample data
+    X = np.array([[1, 2], [3, 4], [5, 6]], dtype=np.float64)
+    y = np.array([1, 2, 3], dtype=np.float64)
+    
+    # Test 1: Set copy_X=False in constructor
+    print("\n1. Testing: LassoLarsIC(copy_X=False).fit(X, y)")
+    model1 = LassoLarsIC(copy_X=False)
+    print(f"   Constructor copy_X: {model1.copy_X}")
+    
+    # This should now use copy_X=False consistently
+    model1.fit(X, y)
+    print("   Fit completed successfully - should use copy_X=False consistently")
+    
+    # Test 2: Set copy_X=True in constructor
+    print("\n2. Testing: LassoLarsIC(copy_X=True).fit(X, y)")
+    model2 = LassoLarsIC(copy_X=True)
+    print(f"   Constructor copy_X: {model2.copy_X}")
+    
+    # This should now use copy_X=True consistently
+    model2.fit(X, y)
+    print("   Fit completed successfully - should use copy_X=True consistently")
+    
+    # Test 3: Verify that the fit method no longer accepts copy_X parameter
+    print("\n3. Testing that fit method no longer accepts copy_X parameter")
+    try:
+        model3 = LassoLarsIC(copy_X=False)
+        model3.fit(X, y, copy_X=True)  # This should raise an error
+        print("   ERROR: fit method still accepts copy_X parameter!")
+    except TypeError as e:
+        print(f"   GOOD: fit method correctly rejects copy_X parameter: {e}")
+    
+    print("\nFix verification completed!")
+
+if __name__ == "__main__":
+    test_copy_x_fix()
\ No newline at end of file
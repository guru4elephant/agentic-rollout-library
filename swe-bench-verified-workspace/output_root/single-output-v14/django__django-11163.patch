diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..5edbbd376f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 0000000000..7ecf157eb1
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,112 @@
+#!/usr/bin/env python3
+"""Final comprehensive test for the model_to_dict fix"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()
+    active = models.BooleanField(default=True)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create instance
+instance = TestModel(name='test', description='test description', active=True)
+instance.id = 1
+
+print("=== Comprehensive model_to_dict Test ===")
+
+# Test 1: No fields parameter (should return all fields)
+result1 = model_to_dict(instance)
+print(f"1. No fields parameter: {sorted(result1.keys())}")
+
+# Test 2: fields=None (should return all fields)
+result2 = model_to_dict(instance, fields=None)
+print(f"2. fields=None: {sorted(result2.keys())}")
+
+# Test 3: fields=[] (should return empty dict)
+result3 = model_to_dict(instance, fields=[])
+print(f"3. fields=[]: {result3}")
+
+# Test 4: Specific fields
+result4 = model_to_dict(instance, fields=['name'])
+print(f"4. fields=['name']: {result4}")
+
+# Test 5: Multiple fields
+result5 = model_to_dict(instance, fields=['name', 'active'])
+print(f"5. fields=['name', 'active']: {result5}")
+
+# Test 6: Non-existent field
+result6 = model_to_dict(instance, fields=['nonexistent'])
+print(f"6. fields=['nonexistent']: {result6}")
+
+# Verify results
+all_passed = True
+
+# Test 1 & 2 should be identical
+if result1 == result2:
+    print("‚úì PASS: No fields and fields=None behave identically")
+else:
+    print("‚úó FAIL: No fields and fields=None should behave identically")
+    all_passed = False
+
+# Test 3 should be empty dict
+if result3 == {}:
+    print("‚úì PASS: fields=[] returns empty dict")
+else:
+    print("‚úó FAIL: fields=[] should return empty dict")
+    all_passed = False
+
+# Test 4 should only contain 'name'
+if result4 == {'name': 'test'}:
+    print("‚úì PASS: fields=['name'] returns only name field")
+else:
+    print("‚úó FAIL: fields=['name'] should return only name field")
+    all_passed = False
+
+# Test 5 should contain 'name' and 'active'
+if result5 == {'name': 'test', 'active': True}:
+    print("‚úì PASS: fields=['name', 'active'] returns both fields")
+else:
+    print("‚úó FAIL: fields=['name', 'active'] should return both fields")
+    all_passed = False
+
+# Test 6 should be empty dict
+if result6 == {}:
+    print("‚úì PASS: fields=['nonexistent'] returns empty dict")
+else:
+    print("‚úó FAIL: fields=['nonexistent'] should return empty dict")
+    all_passed = False
+
+if all_passed:
+    print("\nüéâ ALL TESTS PASSED! The fix is working correctly.")
+else:
+    print("\n‚ùå SOME TESTS FAILED!")
+    sys.exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a3d116160c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""Reproduce the model_to_dict issue with empty fields list"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create an instance
+instance = TestModel(name='test', description='test description')
+
+# Test with empty fields list
+result = model_to_dict(instance, fields=[])
+print(f"Result with fields=[]: {result}")
+
+# Test with None fields (should return all fields)
+result_none = model_to_dict(instance, fields=None)
+print(f"Result with fields=None: {result_none}")
+
+# Test with specific fields
+result_specific = model_to_dict(instance, fields=['name'])
+print(f"Result with fields=['name']: {result_specific}")
+
+# The issue: fields=[] should return empty dict, but returns all fields
+expected_empty = {}
+if result == expected_empty:
+    print("‚úì PASS: fields=[] returns empty dict")
+else:
+    print("‚úó FAIL: fields=[] should return empty dict but returned:", result)
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..323eeb94ca
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""Test edge cases for model_to_dict fix"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create an instance
+instance = TestModel(name='test', description='test description')
+
+# Test cases
+test_cases = [
+    # (fields_param, expected_keys, description)
+    (None, ['id', 'name', 'description'], "fields=None should return all fields"),
+    ([], [], "fields=[] should return empty dict"),
+    (['name'], ['name'], "fields=['name'] should return only name field"),
+    (['name', 'description'], ['name', 'description'], "fields=['name', 'description'] should return both fields"),
+    (['nonexistent'], [], "fields=['nonexistent'] should return empty dict"),
+]
+
+all_passed = True
+
+for fields_param, expected_keys, description in test_cases:
+    result = model_to_dict(instance, fields=fields_param)
+    actual_keys = list(result.keys())
+    
+    if set(actual_keys) == set(expected_keys):
+        print(f"‚úì PASS: {description}")
+        print(f"  Result: {result}")
+    else:
+        print(f"‚úó FAIL: {description}")
+        print(f"  Expected keys: {expected_keys}")
+        print(f"  Actual keys: {actual_keys}")
+        print(f"  Result: {result}")
+        all_passed = False
+    print()
+
+if all_passed:
+    print("All edge case tests passed!")
+else:
+    print("Some tests failed!")
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_existing_functionality.py b/test_existing_functionality.py
new file mode 100644
index 0000000000..84cd260be4
--- /dev/null
+++ b/test_existing_functionality.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""Test that existing model_to_dict functionality still works after the fix"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create test models similar to those in Django tests
+class Writer(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class BetterWriter(Writer):
+    score = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Test basic functionality (similar to existing tests)
+# Create instance without saving to database
+bw = BetterWriter(name='Joe Better', score=10)
+bw.id = 1  # Set ID manually to avoid database operations
+
+# Test without fields parameter (should return all fields)
+result = model_to_dict(bw)
+expected_fields = ['id', 'name', 'score', 'writer_ptr']
+actual_fields = sorted(result.keys())
+
+print(f"Testing model_to_dict without fields parameter:")
+print(f"Expected fields: {expected_fields}")
+print(f"Actual fields: {actual_fields}")
+print(f"Result: {result}")
+
+if actual_fields == expected_fields:
+    print("‚úì PASS: Basic functionality works")
+else:
+    print("‚úó FAIL: Basic functionality broken")
+    sys.exit(1)
+
+# Test that the new empty fields behavior works
+empty_result = model_to_dict(bw, fields=[])
+print(f"\nTesting model_to_dict with fields=[]:")
+print(f"Expected: {{}}")
+print(f"Actual: {empty_result}")
+
+if empty_result == {}:
+    print("‚úì PASS: Empty fields list returns empty dict")
+else:
+    print("‚úó FAIL: Empty fields list should return empty dict")
+    sys.exit(1)
+
+print("\nAll existing functionality tests passed!")
\ No newline at end of file
diff --git a/test_none_case.py b/test_none_case.py
new file mode 100644
index 0000000000..ca478fcbf9
--- /dev/null
+++ b/test_none_case.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+"""Test that fields=None behavior is preserved after the fix"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create instance
+instance = TestModel(name='test', description='test description')
+instance.id = 1
+
+# Test with fields=None (should return all fields)
+result_none = model_to_dict(instance, fields=None)
+print(f"Result with fields=None: {result_none}")
+
+# Test without fields parameter (should return all fields)
+result_no_param = model_to_dict(instance)
+print(f"Result without fields parameter: {result_no_param}")
+
+# Both should be the same
+if result_none == result_no_param:
+    print("‚úì PASS: fields=None and no parameter behave the same")
+else:
+    print("‚úó FAIL: fields=None and no parameter should behave the same")
+    sys.exit(1)
+
+print("All None case tests passed!")
\ No newline at end of file
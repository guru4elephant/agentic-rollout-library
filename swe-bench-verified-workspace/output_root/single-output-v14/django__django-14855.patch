diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..ba8c3463a0 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,7 +209,11 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0cde49e020
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,122 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with wrong URL generation in custom Admin Site
+for readonly ForeignKey fields.
+"""
+
+import os
+import sys
+from django.conf import settings
+
+# Configure minimal Django settings FIRST
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        ROOT_URLCONF=__name__,
+    )
+
+# Now import Django modules
+from django.contrib import admin
+from django.contrib.admin.sites import AdminSite
+from django.contrib.auth.models import User
+from django.db import models
+from django.urls import reverse
+from django.http import HttpRequest
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        ROOT_URLCONF=__name__,
+    )
+
+# Create a custom admin site
+class CustomAdminSite(AdminSite):
+    name = 'custom-admin'
+    site_url = '/custom-admin/'
+
+custom_admin_site = CustomAdminSite(name='custom-admin')
+
+# Create a simple model with ForeignKey
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create a ModelAdmin for the Book model
+class BookAdmin(admin.ModelAdmin):
+    readonly_fields = ['author']
+
+# Register the model with both default and custom admin sites
+admin.site.register(Book, BookAdmin)
+custom_admin_site.register(Book, BookAdmin)
+
+# URL patterns
+urlpatterns = []
+
+def test_url_generation():
+    """Test that get_admin_url generates correct URLs for custom admin sites"""
+    from django.contrib.admin.helpers import AdminReadonlyField
+    from django.forms import ModelForm
+    
+    # Create a test user
+    user = User(username='testuser', id=1)
+    
+    # Create a form instance
+    class BookForm(ModelForm):
+        class Meta:
+            model = Book
+            fields = '__all__'
+    
+    form = BookForm(instance=Book(title='Test Book', author=user))
+    
+    # Create AdminReadonlyField instance
+    readonly_field = AdminReadonlyField(
+        form=form,
+        field='author',
+        is_first=True,
+        model_admin=BookAdmin(Book, custom_admin_site)
+    )
+    
+    # Test get_admin_url method
+    remote_field = Book._meta.get_field('author').remote_field
+    url_html = readonly_field.get_admin_url(remote_field, user)
+    
+    print("Generated URL HTML:", url_html)
+    
+    # Check if the URL contains the custom admin prefix
+    if 'custom-admin' in url_html:
+        print("SUCCESS: URL contains 'custom-admin'")
+        return True
+    else:
+        print("FAILURE: URL does not contain 'custom-admin'")
+        return False
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    success = test_url_generation()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue_clean.py b/reproduce_issue_clean.py
new file mode 100644
index 0000000000..91f7cc6701
--- /dev/null
+++ b/reproduce_issue_clean.py
@@ -0,0 +1,123 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with wrong URL generation in custom Admin Site
+for readonly ForeignKey fields.
+"""
+
+import os
+import sys
+from django.conf import settings
+
+# Configure minimal Django settings FIRST
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        ROOT_URLCONF=__name__,
+    )
+
+# Now setup Django first
+import django
+django.setup()
+
+# Then import Django modules
+from django.contrib import admin
+from django.contrib.admin.sites import AdminSite
+from django.contrib.auth.models import User
+from django.db import models
+from django.urls import reverse
+from django.http import HttpRequest
+
+# Create a custom admin site
+class CustomAdminSite(AdminSite):
+    name = 'custom-admin'
+    site_url = '/custom-admin/'
+
+custom_admin_site = CustomAdminSite(name='custom-admin')
+
+# Create a simple model with ForeignKey
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create a ModelAdmin for the Book model
+class BookAdmin(admin.ModelAdmin):
+    readonly_fields = ['author']
+
+# Register the model with both default and custom admin sites
+admin.site.register(Book, BookAdmin)
+custom_admin_site.register(Book, BookAdmin)
+
+# Also register the User model with the custom admin site
+from django.contrib.auth.admin import UserAdmin
+custom_admin_site.register(User, UserAdmin)
+
+# URL patterns
+from django.urls import path, include
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('custom-admin/', custom_admin_site.urls),
+]
+
+def test_url_generation():
+    """Test that get_admin_url generates correct URLs for custom admin sites"""
+    from django.contrib.admin.helpers import AdminReadonlyField
+    from django.forms import ModelForm
+    
+    # Create a test user
+    user = User(username='testuser', id=1)
+    
+    # Create a form instance
+    class BookForm(ModelForm):
+        class Meta:
+            model = Book
+            fields = '__all__'
+    
+    form = BookForm(instance=Book(title='Test Book', author=user))
+    
+    # Create AdminReadonlyField instance
+    readonly_field = AdminReadonlyField(
+        form=form,
+        field='author',
+        is_first=True,
+        model_admin=BookAdmin(Book, custom_admin_site)
+    )
+    
+    # Test get_admin_url method
+    remote_field = Book._meta.get_field('author').remote_field
+    try:
+        url_html = readonly_field.get_admin_url(remote_field, user)
+        print("Generated URL HTML:", url_html)
+        
+        # Check if the URL contains the custom admin prefix
+        if 'custom-admin' in url_html:
+            print("SUCCESS: URL contains 'custom-admin'")
+            return True
+        else:
+            print("FAILURE: URL does not contain 'custom-admin'")
+            return False
+    except Exception as e:
+        print("Exception occurred:", e)
+        return False
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    success = test_url_generation()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..3c63332d52
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,97 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify the fix doesn't break basic functionality
+"""
+
+import os
+import sys
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        ROOT_URLCONF=__name__,
+    )
+
+# Setup Django
+import django
+django.setup()
+
+from django.contrib import admin
+from django.contrib.admin.sites import AdminSite
+from django.contrib.auth.models import User
+from django.db import models
+from django.urls import path, include
+
+# Create a simple model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    related = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create admin site and register models
+admin_site = AdminSite(name='test-admin')
+admin_site.register(TestModel)
+admin_site.register(User)
+
+# URL patterns
+urlpatterns = [
+    path('admin/', admin_site.urls),
+]
+
+def test_basic_functionality():
+    """Test that get_admin_url still works for basic cases"""
+    from django.contrib.admin.helpers import AdminReadonlyField
+    from django.forms import ModelForm
+    
+    # Create test objects
+    user = User(username='testuser', id=1)
+    
+    # Create form instance
+    class TestForm(ModelForm):
+        class Meta:
+            model = TestModel
+            fields = '__all__'
+    
+    form = TestForm(instance=TestModel(name='test', related=user))
+    
+    # Create AdminReadonlyField instance
+    readonly_field = AdminReadonlyField(
+        form=form,
+        field='related',
+        is_first=True,
+        model_admin=admin_site._registry[TestModel]
+    )
+    
+    # Test get_admin_url method
+    remote_field = TestModel._meta.get_field('related').remote_field
+    url_html = readonly_field.get_admin_url(remote_field, user)
+    
+    print("Generated URL HTML:", url_html)
+    
+    # Should contain a proper URL
+    if 'href=' in url_html and 'testuser' in url_html:
+        print("SUCCESS: Basic functionality works")
+        return True
+    else:
+        print("FAILURE: Basic functionality broken")
+        return False
+
+if __name__ == '__main__':
+    success = test_basic_functionality()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..e2a3dd29
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+import xarray as xr
+
+ds = xr.Dataset({'a': 0})
+da = xr.DataArray(1, name='b')
+
+print("Testing top-level merge() function:")
+expected = xr.merge([ds, da])  # works fine
+print(expected)
+
+print("\nTesting ds.merge() method:")
+try:
+    actual = ds.merge(da)  # should fail according to the issue
+    print("Success!")
+    print(actual)
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 00000000..34721057
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,56 @@
+import xarray as xr
+import numpy as np
+
+def test_merge_dataarray_into_dataset():
+    print("=== Testing comprehensive merge scenarios ===")
+    
+    # Test 1: Basic case (from the issue)
+    print("\n1. Basic case:")
+    ds = xr.Dataset({'a': 0})
+    da = xr.DataArray(1, name='b')
+    
+    result1 = xr.merge([ds, da])
+    result2 = ds.merge(da)
+    
+    print(f"Top-level merge result: {result1}")
+    print(f"Dataset method result: {result2}")
+    print(f"Results equal: {result1.equals(result2)}")
+    
+    # Test 2: DataArray with coordinates
+    print("\n2. DataArray with coordinates:")
+    da_with_coords = xr.DataArray(
+        [1, 2, 3],
+        dims=['x'],
+        coords={'x': [0, 1, 2]},
+        name='c'
+    )
+    
+    result3 = xr.merge([ds, da_with_coords])
+    result4 = ds.merge(da_with_coords)
+    
+    print(f"Top-level merge result: {result3}")
+    print(f"Dataset method result: {result4}")
+    print(f"Results equal: {result3.equals(result4)}")
+    
+    # Test 3: Multiple DataArrays
+    print("\n3. Multiple DataArrays (method chaining):")
+    da3 = xr.DataArray(4, name='d')
+    result5 = ds.merge(da).merge(da3)
+    print(f"Chained merge result: {result5}")
+    
+    # Test 4: Regular dict should still work
+    print("\n4. Regular dict (should still work):")
+    dict_data = {'e': 5}
+    result6 = ds.merge(dict_data)
+    print(f"Dict merge result: {result6}")
+    
+    # Test 5: Overwrite vars functionality
+    print("\n5. Overwrite vars functionality:")
+    ds_with_b = xr.Dataset({'a': 0, 'b': 999})
+    result7 = ds_with_b.merge(da, overwrite_vars='b')
+    print(f"Overwrite result: {result7}")
+    
+    print("\n=== All tests completed ===")
+
+if __name__ == "__main__":
+    test_merge_dataarray_into_dataset()
\ No newline at end of file
diff --git a/xarray/core/merge.py b/xarray/core/merge.py
index 10c7804d..7a6a947e 100644
--- a/xarray/core/merge.py
+++ b/xarray/core/merge.py
@@ -808,6 +808,12 @@ def dataset_merge_method(
     # we are locked into supporting overwrite_vars for the Dataset.merge
     # method due for backwards compatibility
     # TODO: consider deprecating it?
+    
+    from .dataarray import DataArray
+    
+    # Convert DataArray to Dataset to handle it properly
+    if isinstance(other, DataArray):
+        other = other.to_dataset()
 
     if isinstance(overwrite_vars, Iterable) and not isinstance(overwrite_vars, str):
         overwrite_vars = set(overwrite_vars)
diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index d9fb088350..8bb7e2ea6f 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -51,6 +51,10 @@ class Command(BaseCommand):
             '--noreload', action='store_false', dest='use_reloader',
             help='Tells Django to NOT use the auto-reloader.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true', dest='skip_checks',
+            help='Tells Django to skip system checks.',
+        )
 
     def execute(self, *args, **options):
         if options['no_color']:
@@ -114,11 +118,12 @@ class Command(BaseCommand):
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
 
-        self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
-        # Need to check migrations here, so can't use the
-        # requires_migrations_check attribute.
-        self.check_migrations()
+        if not options.get('skip_checks', False):
+            self.stdout.write("Performing system checks...\n\n")
+            self.check(display_num_errors=True)
+            # Need to check migrations here, so can't use the
+            # requires_migrations_check attribute.
+            self.check_migrations()
         now = datetime.now().strftime('%B %d, %Y - %X')
         self.stdout.write(now)
         self.stdout.write((
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f1a8e868cc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the current behavior of runserver command
+and test the --skip-checks option implementation.
+"""
+
+import os
+import sys
+import tempfile
+import subprocess
+from django.core.management import execute_from_command_line
+
+def test_runserver_help():
+    """Test that runserver command shows help with available options"""
+    print("=== Testing runserver help ===")
+    try:
+        # Set up minimal Django environment
+        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+        
+        # Create minimal settings
+        with open('test_settings.py', 'w') as f:
+            f.write("""
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+INSTALLED_APPS = ['django.contrib.staticfiles']
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+ALLOWED_HOSTS = ['localhost']
+""")
+        
+        # Test help command
+        sys.argv = ['manage.py', 'runserver', '--help']
+        execute_from_command_line(sys.argv)
+        
+    except SystemExit as e:
+        print(f"Command exited with code: {e.code}")
+    except Exception as e:
+        print(f"Error: {e}")
+    finally:
+        # Clean up
+        if os.path.exists('test_settings.py'):
+            os.remove('test_settings.py')
+
+def test_skip_checks_option():
+    """Test that --skip-checks option is available and works"""
+    print("\n=== Testing --skip-checks option ===")
+    try:
+        # Set up minimal Django environment
+        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+        
+        # Create minimal settings
+        with open('test_settings.py', 'w') as f:
+            f.write("""
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+INSTALLED_APPS = ['django.contrib.staticfiles']
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+ALLOWED_HOSTS = ['localhost']
+""")
+        
+        # Test with --skip-checks option (should not perform system checks)
+        print("Testing with --skip-checks option...")
+        sys.argv = ['manage.py', 'runserver', '--skip-checks', '--help']
+        execute_from_command_line(sys.argv)
+        
+    except SystemExit as e:
+        print(f"Command exited with code: {e.code}")
+    except Exception as e:
+        print(f"Error: {e}")
+    finally:
+        # Clean up
+        if os.path.exists('test_settings.py'):
+            os.remove('test_settings.py')
+
+if __name__ == '__main__':
+    test_runserver_help()
+    test_skip_checks_option()
\ No newline at end of file
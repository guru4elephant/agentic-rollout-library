diff --git a/edge_cases_output.png b/edge_cases_output.png
new file mode 100644
index 0000000000..a4b5fe1aae
Binary files /dev/null and b/edge_cases_output.png differ
diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index 44ab024698..aaa2e3089a 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -360,7 +360,7 @@ class Legend(Artist):
         """
         # local import only to avoid circularity
         from matplotlib.axes import Axes
-        from matplotlib.figure import Figure
+        from matplotlib.figure import Figure, FigureBase
 
         super().__init__()
 
@@ -434,11 +434,11 @@ class Legend(Artist):
             self.isaxes = True
             self.axes = parent
             self.set_figure(parent.figure)
-        elif isinstance(parent, Figure):
+        elif isinstance(parent, FigureBase):
             self.isaxes = False
             self.set_figure(parent)
         else:
-            raise TypeError("Legend needs either Axes or Figure as parent")
+            raise TypeError("Legend needs either Axes or FigureBase as parent")
         self.parent = parent
 
         self._loc_used_default = loc is None
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dbd24e812f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+import matplotlib.pyplot as plt
+
+subfig = plt.figure().subfigures()
+ax = subfig.subplots()
+ax.plot([0, 1, 2], [0, 1, 2], label="test")
+legend = subfig.legend()
+print(f"Legend created successfully: {legend}")
+plt.savefig('test_output.png')
+print("Figure saved as test_output.png")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..b9cfbe5b11
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+
+print("Testing edge cases for legend functionality...")
+
+# Test 1: Regular Figure legend (should still work)
+print("\n1. Testing regular Figure legend...")
+fig = plt.figure()
+ax1 = fig.add_subplot(121)
+ax1.plot([0, 1, 2], [0, 1, 0], label="line1")
+fig.legend()
+print("‚úì Figure legend works")
+
+# Test 2: Axes legend (should still work)
+print("\n2. Testing Axes legend...")
+fig2 = plt.figure()
+ax2 = fig2.add_subplot(111)
+ax2.plot([0, 1, 2], [0, 1, 0], label="line2")
+ax2.legend()
+print("‚úì Axes legend works")
+
+# Test 3: SubFigure legend (our fix)
+print("\n3. Testing SubFigure legend...")
+fig3 = plt.figure()
+subfig = fig3.subfigures()
+ax3 = subfig.subplots()
+ax3.plot([0, 1, 2], [0, 1, 0], label="line3")
+subfig.legend()
+print("‚úì SubFigure legend works")
+
+# Test 4: Multiple SubFigures with legends
+print("\n4. Testing multiple SubFigures with legends...")
+fig4 = plt.figure()
+subfigs = fig4.subfigures(1, 2)
+for i, sf in enumerate(subfigs):
+    ax = sf.subplots()
+    ax.plot([0, 1, 2], [i, i+1, i+2], label=f"subfig_{i}")
+    sf.legend()
+print("‚úì Multiple SubFigure legends work")
+
+print("\nAll tests passed! ‚úì")
+plt.savefig('edge_cases_output.png')
+print("Edge cases figure saved as edge_cases_output.png")
\ No newline at end of file
diff --git a/test_output.png b/test_output.png
new file mode 100644
index 0000000000..a96db3ab31
Binary files /dev/null and b/test_output.png differ
diff --git a/test_subfigure_legend_fix.py b/test_subfigure_legend_fix.py
new file mode 100644
index 0000000000..25d5e76045
--- /dev/null
+++ b/test_subfigure_legend_fix.py
@@ -0,0 +1,63 @@
+"""
+Test to verify that the SubFigure legend fix works correctly.
+This test reproduces the exact issue reported in the GitHub issue.
+"""
+import matplotlib.pyplot as plt
+import sys
+
+def test_subfigure_legend():
+    """Test that SubFigure.legend() works without raising TypeError."""
+    print("Testing SubFigure legend functionality...")
+    
+    # This is the exact code from the GitHub issue
+    subfig = plt.figure().subfigures()
+    ax = subfig.subplots()
+    ax.plot([0, 1, 2], [0, 1, 2], label="test")
+    
+    try:
+        legend = subfig.legend()
+        print("‚úì SubFigure.legend() executed successfully")
+        print(f"‚úì Legend object created: {type(legend).__name__}")
+        return True
+    except TypeError as e:
+        print(f"‚úó TypeError still occurs: {e}")
+        return False
+    except Exception as e:
+        print(f"‚úó Unexpected error: {e}")
+        return False
+
+def test_legend_properties():
+    """Test that the legend has the correct properties."""
+    print("\nTesting legend properties...")
+    
+    subfig = plt.figure().subfigures()
+    ax = subfig.subplots()
+    ax.plot([0, 1, 2], [0, 1, 2], label="test")
+    
+    legend = subfig.legend()
+    
+    # Check that legend properties are set correctly
+    if hasattr(legend, 'isaxes') and legend.isaxes == False:
+        print("‚úì Legend.isaxes is correctly set to False for SubFigure")
+    else:
+        print("‚úó Legend.isaxes not set correctly")
+        return False
+        
+    if hasattr(legend, 'figure') and legend.figure == subfig:
+        print("‚úì Legend.figure is correctly set to the SubFigure")
+    else:
+        print("‚úó Legend.figure not set correctly")
+        return False
+        
+    return True
+
+if __name__ == "__main__":
+    success1 = test_subfigure_legend()
+    success2 = test_legend_properties()
+    
+    if success1 and success2:
+        print("\nüéâ All tests passed! The SubFigure legend fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("\n‚ùå Some tests failed.")
+        sys.exit(1)
\ No newline at end of file
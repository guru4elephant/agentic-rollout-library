diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..a037758784 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -29,7 +29,7 @@ datetime_re = re.compile(
 standard_duration_re = re.compile(
     r'^'
     r'(?:(?P<days>-?\d+) (days?, )?)?'
-    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
+    r'((?:(?P<hours>-?\d+):)(?=-?\d+:-?\d+))?'
     r'(?:(?P<minutes>-?\d+):)?'
     r'(?P<seconds>-?\d+)'
     r'(?:\.(?P<microseconds>\d{1,6})\d{0,6})?'
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..97742213f3
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import parse_duration
+from datetime import timedelta
+
+def comprehensive_test():
+    """Comprehensive test to verify the fix works correctly"""
+    
+    test_cases = [
+        # Original positive cases (should still work)
+        ("1 12:34:56", timedelta(days=1, hours=12, minutes=34, seconds=56)),
+        ("12:34:56", timedelta(hours=12, minutes=34, seconds=56)),
+        ("12:34:56.123456", timedelta(hours=12, minutes=34, seconds=56, microseconds=123456)),
+        ("15:30", timedelta(minutes=15, seconds=30)),
+        ("30", timedelta(seconds=30)),
+        
+        # Negative cases that should now work (the main issue)
+        ("-1 12:34:56", timedelta(days=-1, hours=12, minutes=34, seconds=56)),
+        ("12:-34:56", timedelta(hours=12, minutes=-34, seconds=56)),  # This becomes 11:26:56
+        ("12:34:-56", timedelta(hours=12, minutes=34, seconds=-56)),  # This becomes 12:33:04
+        ("-12:34:56", timedelta(hours=-12, minutes=34, seconds=56)),  # This becomes -1 day + 12:34:56
+        ("-1 12:-34:56", timedelta(days=-1, hours=12, minutes=-34, seconds=56)),
+        ("-1 12:34:-56", timedelta(days=-1, hours=12, minutes=34, seconds=-56)),
+        
+        # Edge cases
+        ("-0 00:00:00", timedelta(0)),
+        ("-1:00:00", timedelta(hours=-1)),
+        ("00:-1:00", timedelta(minutes=-1)),
+        ("00:00:-1", timedelta(seconds=-1)),
+        ("-1:-1:-1", timedelta(hours=-1, minutes=-1, seconds=-1)),
+    ]
+    
+    print("Comprehensive test of parse_duration() fix:")
+    print("=" * 60)
+    
+    all_passed = True
+    
+    for duration_str, expected in test_cases:
+        try:
+            result = parse_duration(duration_str)
+            if result == expected:
+                print(f"✓ '{duration_str}' -> {result} (CORRECT)")
+            else:
+                print(f"✗ '{duration_str}' -> {result} (EXPECTED: {expected})")
+                all_passed = False
+        except Exception as e:
+            print(f"✗ '{duration_str}' -> ERROR: {e}")
+            all_passed = False
+    
+    print("\n" + "=" * 60)
+    if all_passed:
+        print("✅ ALL TESTS PASSED! The fix is working correctly.")
+    else:
+        print("❌ SOME TESTS FAILED! Please check the implementation.")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    comprehensive_test()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9031472587
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import parse_duration
+
+def test_negative_durations():
+    """Test negative durations to reproduce the issue"""
+    
+    # Test cases that should work but currently fail
+    test_cases = [
+        "-1 12:34:56",    # Negative days with time
+        "12:-34:56",      # Negative hours
+        "12:34:-56",      # Negative seconds
+        "-12:34:56",      # Negative hours (full negative time)
+        "-1 12:-34:56",   # Negative days with negative hours
+        "-1 12:34:-56",   # Negative days with negative seconds
+    ]
+    
+    print("Testing negative durations (should fail with current implementation):")
+    print("=" * 60)
+    
+    for test_case in test_cases:
+        try:
+            result = parse_duration(test_case)
+            print(f"✓ '{test_case}' -> {result}")
+        except Exception as e:
+            print(f"✗ '{test_case}' -> ERROR: {e}")
+    
+    print("\nTesting positive durations (should work):")
+    print("=" * 60)
+    
+    # Test cases that should work
+    positive_cases = [
+        "1 12:34:56",
+        "12:34:56",
+        "12:34:56.123456",
+    ]
+    
+    for test_case in positive_cases:
+        try:
+            result = parse_duration(test_case)
+            print(f"✓ '{test_case}' -> {result}")
+        except Exception as e:
+            print(f"✗ '{test_case}' -> ERROR: {e}")
+
+if __name__ == "__main__":
+    test_negative_durations()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6dab21ca2d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+sys.path.insert(0, '.')
+
+from django.utils.dateparse import parse_duration
+
+def test_edge_cases():
+    """Test edge cases for negative durations"""
+    
+    edge_cases = [
+        # Various negative combinations
+        "-0 00:00:00",      # Zero with negative sign
+        "-1:00:00",         # Negative hours only
+        "00:-1:00",         # Negative minutes only  
+        "00:00:-1",         # Negative seconds only
+        "-1:-1:-1",         # All negative components
+        "-1 00:00:00",      # Negative days only
+        "-1 -1:-1:-1",      # Negative days with all negative time components
+        
+        # Mixed positive/negative
+        "1 -1:00:00",       # Positive days, negative hours
+        "-1 1:00:00",       # Negative days, positive hours
+        
+        # Decimal cases
+        "00:00:-1.5",       # Negative seconds with microseconds
+        "-1:00:00.123",     # Negative hours with microseconds
+    ]
+    
+    print("Testing edge cases for negative durations:")
+    print("=" * 60)
+    
+    for test_case in edge_cases:
+        try:
+            result = parse_duration(test_case)
+            print(f"✓ '{test_case}' -> {result}")
+        except Exception as e:
+            print(f"✗ '{test_case}' -> ERROR: {e}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/debug_orderby.py b/debug_orderby.py
new file mode 100644
index 0000000000..9d698550ce
--- /dev/null
+++ b/debug_orderby.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.functions import Random
+from django.db.models.expressions import OrderBy
+
+def debug_orderby():
+    # Test OrderBy with Random
+    order_by_random = OrderBy(Random())
+    print("OrderBy(Random()):")
+    print("  get_source_expressions():", order_by_random.get_source_expressions())
+    print("  get_group_by_cols():", order_by_random.get_group_by_cols())
+    print()
+    
+    # Check what type of objects are in source expressions
+    for exp in order_by_random.get_source_expressions():
+        print("  Source expression type:", type(exp))
+        print("  Source expression:", exp)
+        print("  isinstance(exp, Random):", isinstance(exp, Random))
+
+if __name__ == '__main__':
+    debug_orderby()
\ No newline at end of file
diff --git a/debug_random.py b/debug_random.py
new file mode 100644
index 0000000000..e51fef8a38
--- /dev/null
+++ b/debug_random.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.functions import Random
+
+# Test the Random function behavior
+random_func = Random()
+print("Random function:", random_func)
+print("get_group_by_cols():", random_func.get_group_by_cols())
+print("get_source_expressions():", random_func.get_source_expressions())
+
+# Check the MRO to see inheritance
+print("MRO:", [cls.__name__ for cls in random_func.__class__.__mro__])
+
+# Check if any class in the MRO overrides get_group_by_cols
+for cls in random_func.__class__.__mro__:
+    if hasattr(cls, 'get_group_by_cols'):
+        print(f"Class {cls.__name__} has get_group_by_cols: {cls.get_group_by_cols}")
+
+# Check contains_aggregate property
+print("contains_aggregate:", random_func.contains_aggregate)
\ No newline at end of file
diff --git a/debug_source_expr.py b/debug_source_expr.py
new file mode 100644
index 0000000000..3e9bd3b8c4
--- /dev/null
+++ b/debug_source_expr.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.functions import Random
+from django.db.models.expressions import OrderBy
+
+def debug_expressions():
+    # Test Random expression
+    random_expr = Random()
+    print("Random expression:")
+    print("  get_source_expressions():", random_expr.get_source_expressions())
+    print("  get_group_by_cols():", random_expr.get_group_by_cols())
+    print()
+    
+    # Test OrderBy with Random
+    order_by_random = OrderBy(Random())
+    print("OrderBy(Random()):")
+    print("  get_source_expressions():", order_by_random.get_source_expressions())
+    print("  get_group_by_cols():", order_by_random.get_group_by_cols())
+    print()
+
+if __name__ == '__main__':
+    debug_expressions()
\ No newline at end of file
diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 304e112225..3e4db6ffcd 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -145,6 +145,9 @@ class Random(NumericOutputFieldMixin, Func):
     function = 'RANDOM'
     arity = 0
 
+    def get_group_by_cols(self, alias=None):
+        return []
+
     def as_mysql(self, compiler, connection, **extra_context):
         return super().as_sql(compiler, connection, function='RAND', **extra_context)
 
@@ -152,7 +155,7 @@ class Random(NumericOutputFieldMixin, Func):
         return super().as_sql(compiler, connection, function='DBMS_RANDOM.VALUE', **extra_context)
 
     def as_sqlite(self, compiler, connection, **extra_context):
-        return super().as_sql(compiler, connection, function='RAND', **extra_context)
+        return super().as_sql(compiler, connection,  function='RAND', **extra_context)
 
 
 class Round(Transform):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f1f5b9ff2c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count
+
+# Define the models from the issue
+class Thing(models.Model):
+    class Meta:
+        app_label = 'test'
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE, related_name='related')
+    
+    class Meta:
+        app_label = 'test'
+
+def test_issue():
+    # Create the database tables
+    from django.db import connection
+    
+    with connection.cursor() as cursor:
+        # Create Thing table
+        cursor.execute('''
+            CREATE TABLE test_thing (
+                id INTEGER PRIMARY KEY AUTOINCREMENT
+            )
+        ''')
+        # Create Related table
+        cursor.execute('''
+            CREATE TABLE test_related (
+                id INTEGER PRIMARY KEY AUTOINCREMENT,
+                thing_id INTEGER NOT NULL,
+                FOREIGN KEY (thing_id) REFERENCES test_thing (id)
+            )
+        ''')
+    
+    # Create test data
+    t = Thing.objects.create()
+    rs = [Related.objects.create(thing=t) for _ in range(2)]
+    
+    print("Testing expected behavior with order_by('rc'):")
+    qs1 = Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc')
+    print("Query:", qs1.query)
+    print("Result:", list(qs1))
+    
+    print("\nTesting expected behavior with order_by('related'):")
+    qs2 = Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc')
+    print("Query:", qs2.query)
+    print("Result:", list(qs2))
+    
+    print("\nTesting broken behavior with order_by('?'):")
+    qs3 = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')
+    print("Query:", qs3.query)
+    print("Result:", list(qs3))
+    
+    # The issue: order_by('?') should not break the aggregation
+    # Expected result: [{'id': 1, 'rc': 2}]
+    # Actual result: [{'id': 1, 'rc': 1}, {'id': 1, 'rc': 1}]
+    
+    if len(list(qs3)) == 1 and list(qs3)[0]['rc'] == 2:
+        print("\n✅ Issue is FIXED!")
+        return True
+    else:
+        print("\n❌ Issue is NOT fixed!")
+        return False
+
+if __name__ == '__main__':
+    success = test_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..c20057d7e5
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count
+
+# Define the models from the issue
+class Thing(models.Model):
+    class Meta:
+        app_label = 'test'
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE, related_name='related')
+    
+    class Meta:
+        app_label = 'test'
+
+def test_issue():
+    # Create the database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Thing)
+        schema_editor.create_model(Related)
+    
+    # Create test data
+    t = Thing.objects.create()
+    Related.objects.create(thing=t)
+    Related.objects.create(thing=t)
+    
+    print("Testing expected behavior with order_by('rc'):")
+    qs1 = Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc')
+    print("Query:", qs1.query)
+    print("Result:", list(qs1))
+    
+    print("\nTesting expected behavior with order_by('related'):")
+    qs2 = Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc')
+    print("Query:", qs2.query)
+    print("Result:", list(qs2))
+    
+    print("\nTesting broken behavior with order_by('?'):")
+    qs3 = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')
+    print("Query:", qs3.query)
+    print("Result:", list(qs3))
+    
+    # The issue: order_by('?') should not break the aggregation
+    # Expected result: [{'id': 1, 'rc': 2}]
+    # Actual result: [{'id': 1, 'rc': 1}, {'id': 1, 'rc': 1}]
+    
+    if len(list(qs3)) == 1 and list(qs3)[0]['rc'] == 2:
+        print("\n✅ Issue is FIXED!")
+        return True
+    else:
+        print("\n❌ Issue is NOT fixed!")
+        return False
+
+if __name__ == '__main__':
+    success = test_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..86bfc067a9
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.functions import Random
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.sql.query import Query
+from django.db import connection
+
+def test_get_group_by():
+    # Create a simple query
+    query = Query(None)
+    
+    # Create a compiler instance
+    compiler = SQLCompiler(query, connection, 'default')
+    
+    # Mock order_by with a Random expression
+    from django.db.models.expressions import OrderBy
+    random_order = OrderBy(Random())
+    order_by = [(random_order, ('RANDOM()', [], False))]
+    
+    # Mock select
+    select = []
+    
+    # Test the get_group_by method
+    group_by = compiler.get_group_by(select, order_by)
+    
+    print("Group by expressions:", group_by)
+    
+    # Check if RANDOM() is incorrectly included in group_by
+    random_in_group_by = False
+    for expr in group_by:
+        if 'RANDOM' in str(expr):
+            random_in_group_by = True
+            break
+    
+    if random_in_group_by:
+        print("❌ Issue NOT fixed: RANDOM() is still included in GROUP BY")
+        return False
+    else:
+        print("✅ Issue FIXED: RANDOM() is not in GROUP BY")
+        return True
+
+if __name__ == '__main__':
+    success = test_get_group_by()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..83b932a7ce
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.functions import Random
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.sql.query import Query
+from django.db import connection
+from django.db.models.expressions import F, OrderBy
+
+def test_edge_cases():
+    # Create a simple query
+    query = Query(None)
+    
+    # Create a compiler instance
+    compiler = SQLCompiler(query, connection, 'default')
+    
+    # Test 1: Only Random in order_by (should NOT be in group_by)
+    random_order = OrderBy(Random())
+    order_by1 = [(random_order, ('RANDOM()', [], False))]
+    select = []
+    
+    group_by1 = compiler.get_group_by(select, order_by1)
+    print("Test 1 - Only Random in order_by:")
+    print("Group by expressions:", group_by1)
+    random_in_group_by = any('RANDOM' in str(expr) for expr in group_by1)
+    print("Random in group_by:", random_in_group_by)
+    print("✅ PASS" if not random_in_group_by else "❌ FAIL")
+    print()
+    
+    # Test 2: Normal field in order_by (should be in group_by)
+    from django.db.models.expressions import Col
+    field_order = OrderBy(F('some_field'))
+    order_by2 = [(field_order, ('some_field', [], False))]
+    
+    group_by2 = compiler.get_group_by(select, order_by2)
+    print("Test 2 - Normal field in order_by:")
+    print("Group by expressions:", group_by2)
+    field_in_group_by = len(group_by2) > 0
+    print("Field in group_by:", field_in_group_by)
+    print("✅ PASS" if field_in_group_by else "❌ FAIL")
+    print()
+    
+    # Test 3: Mixed Random and normal field in order_by
+    order_by3 = [(field_order, ('some_field', [], False)), (random_order, ('RANDOM()', [], False))]
+    group_by3 = compiler.get_group_by(select, order_by3)
+    print("Test 3 - Mixed Random and field in order_by:")
+    print("Group by expressions:", group_by3)
+    random_in_group_by3 = any('RANDOM' in str(expr) for expr in group_by3)
+    field_in_group_by3 = len(group_by3) > 0
+    print("Random in group_by:", random_in_group_by3)
+    print("Field in group_by:", field_in_group_by3)
+    print("✅ PASS" if (not random_in_group_by3 and field_in_group_by3) else "❌ FAIL")
+    
+    return not random_in_group_by and field_in_group_by and (not random_in_group_by3 and field_in_group_by3)
+
+if __name__ == '__main__':
+    success = test_edge_cases()
+    print("\nOverall result:", "✅ ALL TESTS PASSED" if success else "❌ SOME TESTS FAILED")
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..d6496d8b4c
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count
+from django.db.models.functions import Random
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.sql.query import Query
+from django.db import connection
+
+def test_fix():
+    # Create a simple query to test the group by issue
+    query = Query(models.Model)
+    query.add_annotation(Count('id'), 'rc')
+    
+    # Add order_by('?') to trigger the issue
+    query.order_by = [('?', False)]
+    
+    compiler = SQLCompiler(query, connection, 'default')
+    compiler.setup_query()
+    
+    # Get order_by and group_by
+    order_by = compiler.get_order_by()
+    select = compiler.select
+    group_by = compiler.get_group_by(select, order_by)
+    
+    print("Order by expressions:", order_by)
+    print("Group by expressions:", group_by)
+    
+    # Check if RANDOM() is incorrectly included in group_by
+    random_in_group_by = False
+    for expr in group_by:
+        if 'RANDOM' in str(expr):
+            random_in_group_by = True
+            break
+    
+    if random_in_group_by:
+        print("❌ Issue NOT fixed: RANDOM() is still included in GROUP BY")
+        return False
+    else:
+        print("✅ Issue FIXED: RANDOM() is not in GROUP BY")
+        return True
+
+if __name__ == '__main__':
+    success = test_fix()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_group_by_direct.py b/test_group_by_direct.py
new file mode 100644
index 0000000000..7f5cd5081e
--- /dev/null
+++ b/test_group_by_direct.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.sql.query import Query
+from django.db.models.functions import Random
+from django.db import connection
+
+def test_group_by_direct():
+    # Create a simple query
+    query = Query(None)
+    
+    # Create a compiler instance
+    compiler = SQLCompiler(query, connection, 'default')
+    
+    # Create order_by with Random
+    from django.db.models.expressions import OrderBy
+    random_order = OrderBy(Random())
+    order_by = [(random_order, ('RANDOM()', [], False))]
+    
+    # Mock select
+    select = []
+    
+    # Test the get_group_by method
+    group_by = compiler.get_group_by(select, order_by)
+    
+    print("Group by expressions:", group_by)
+    
+    # Check if RANDOM() is incorrectly included in group_by
+    random_in_group_by = False
+    for expr in group_by:
+        if 'RANDOM' in str(expr):
+            random_in_group_by = True
+            break
+    
+    if random_in_group_by:
+        print("❌ Issue NOT fixed: RANDOM() is still included in GROUP BY")
+        return False
+    else:
+        print("✅ Issue FIXED: RANDOM() is not in GROUP BY")
+        return True
+
+if __name__ == '__main__':
+    success = test_group_by_direct()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_order_by_types.py b/test_order_by_types.py
new file mode 100644
index 0000000000..75667702d2
--- /dev/null
+++ b/test_order_by_types.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.functions import Random
+from django.db.models.expressions import OrderBy, F
+
+def test_order_by_types():
+    # Test different types of order_by expressions
+    print("Testing OrderBy(Random()):")
+    order_by_random = OrderBy(Random())
+    print("  get_source_expressions():", order_by_random.get_source_expressions())
+    print("  get_group_by_cols():", order_by_random.get_group_by_cols())
+    print()
+    
+    print("Testing OrderBy(F('some_field')):")
+    order_by_field = OrderBy(F('some_field'))
+    print("  get_source_expressions():", order_by_field.get_source_expressions())
+    print("  get_group_by_cols():", order_by_field.get_group_by_cols())
+    print()
+    
+    print("Testing F('some_field'):")
+    field_expr = F('some_field')
+    print("  get_group_by_cols():", field_expr.get_group_by_cols())
+    print()
+
+if __name__ == '__main__':
+    test_order_by_types()
\ No newline at end of file
diff --git a/test_real_scenario.py b/test_real_scenario.py
new file mode 100644
index 0000000000..c5ad29a592
--- /dev/null
+++ b/test_real_scenario.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count
+
+# Define the models from the issue
+class Thing(models.Model):
+    class Meta:
+        app_label = 'test'
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE, related_name='related')
+    
+    class Meta:
+        app_label = 'test'
+
+def test_real_scenario():
+    # Create the database tables using Django's schema editor
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Thing)
+        schema_editor.create_model(Related)
+    
+    # Create test data
+    t = Thing.objects.create()
+    Related.objects.create(thing=t)
+    Related.objects.create(thing=t)
+    
+    print("Testing expected behavior with order_by('rc'):")
+    qs1 = Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc')
+    print("Query:", qs1.query)
+    print("Result:", list(qs1))
+    
+    print("\nTesting broken behavior with order_by('?'):")
+    qs3 = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')
+    print("Query:", qs3.query)
+    print("Result:", list(qs3))
+    
+    # The issue: order_by('?') should not break the aggregation
+    # Expected result: [{'id': 1, 'rc': 2}]
+    # Actual result: [{'id': 1, 'rc': 1}, {'id': 1, 'rc': 1}]
+    
+    if len(list(qs3)) == 1 and list(qs3)[0]['rc'] == 2:
+        print("\n✅ Issue is FIXED!")
+        return True
+    else:
+        print("\n❌ Issue is NOT fixed!")
+        return False
+
+if __name__ == '__main__':
+    success = test_real_scenario()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_sql_compilation.py b/test_sql_compilation.py
new file mode 100644
index 0000000000..6dd43bb2e8
--- /dev/null
+++ b/test_sql_compilation.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.sql.query import Query
+from django.db.models import Count
+from django.db.models.functions import Random
+from django.db import connection
+
+def test_sql_compilation():
+    # Create a query that simulates the issue
+    query = Query(None)
+    
+    # Add an annotation
+    from django.db.models.expressions import Col
+    query.add_annotation(Count(Col('id')), 'rc')
+    
+    # Add order_by('?') 
+    from django.db.models.expressions import OrderBy
+    query.order_by = [OrderBy(Random())]
+    
+    compiler = SQLCompiler(query, connection, 'default')
+    compiler.setup_query()
+    
+    # Get the SQL to see if RANDOM() is in GROUP BY
+    sql, params = compiler.as_sql()
+    print("Generated SQL:")
+    print(sql)
+    print("Params:", params)
+    
+    # Check if RANDOM() is in the GROUP BY clause
+    if 'GROUP BY' in sql and 'RANDOM()' in sql:
+        print("❌ Issue NOT fixed: RANDOM() is in GROUP BY")
+        return False
+    else:
+        print("✅ Issue FIXED: RANDOM() is not in GROUP BY")
+        return True
+
+if __name__ == '__main__':
+    success = test_sql_compilation()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_sql_compiler.py b/test_sql_compiler.py
new file mode 100644
index 0000000000..b49fff0cc5
--- /dev/null
+++ b/test_sql_compiler.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.sql.compiler import SQLCompiler
+from django.db.models.sql.query import Query
+from django.db.models import Count
+from django.db import connection
+from django.db import models
+
+def test_group_by_issue():
+    # Create a simple query to test the group by issue
+    query = Query(models.Model)
+    query.add_annotation(Count('id'), 'rc')
+    
+    # Add order_by('?') to trigger the issue
+    query.order_by = [('?', False)]
+    
+    compiler = SQLCompiler(query, connection, 'default')
+    compiler.setup_query()
+    
+    # Get order_by and group_by
+    order_by = compiler.get_order_by()
+    select = compiler.select
+    group_by = compiler.get_group_by(select, order_by)
+    
+    print("Order by expressions:", order_by)
+    print("Group by expressions:", group_by)
+    
+    # Check if RANDOM() is incorrectly included in group_by
+    for expr in group_by:
+        if 'RANDOM' in str(expr):
+            print("❌ Issue found: RANDOM() is incorrectly included in GROUP BY")
+            return False
+    
+    print("✅ No issue found: RANDOM() is not in GROUP BY")
+    return True
+
+if __name__ == '__main__':
+    success = test_group_by_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
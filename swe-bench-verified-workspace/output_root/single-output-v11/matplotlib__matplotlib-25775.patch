diff --git a/backend_antialiasing_test.png b/backend_antialiasing_test.png
new file mode 100644
index 0000000000..6db323fccb
Binary files /dev/null and b/backend_antialiasing_test.png differ
diff --git a/comprehensive_test.png b/comprehensive_test.png
new file mode 100644
index 0000000000..23e5d09869
Binary files /dev/null and b/comprehensive_test.png differ
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..7da3453a01
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test for Text antialiasing implementation.
+"""
+
+import matplotlib as mpl
+import matplotlib.pyplot as plt
+from matplotlib.text import Text, Annotation
+
+def test_comprehensive():
+    """Comprehensive test of all antialiasing functionality."""
+    print("Running comprehensive antialiasing test...")
+    
+    # Test 1: Basic Text functionality
+    print("\n1. Testing basic Text functionality:")
+    text = Text(0.5, 0.5, "Test Text")
+    assert hasattr(text, 'get_antialiased'), "Text should have get_antialiased"
+    assert hasattr(text, 'set_antialiased'), "Text should have set_antialiased"
+    assert text.get_antialiased() == mpl.rcParams['text.antialiased'], "Default should match rcParams"
+    print("   ✓ Basic Text methods work")
+    
+    # Test 2: Setting values
+    print("\n2. Testing value setting:")
+    text.set_antialiased(False)
+    assert text.get_antialiased() == False, "Should be able to set to False"
+    text.set_antialiased(True)
+    assert text.get_antialiased() == True, "Should be able to set to True"
+    print("   ✓ Value setting works")
+    
+    # Test 3: Constructor parameter
+    print("\n3. Testing constructor parameter:")
+    text_false = Text(0.5, 0.5, "Test", antialiased=False)
+    assert text_false.get_antialiased() == False, "Constructor should accept antialiased=False"
+    text_true = Text(0.5, 0.5, "Test", antialiased=True)
+    assert text_true.get_antialiased() == True, "Constructor should accept antialiased=True"
+    print("   ✓ Constructor parameter works")
+    
+    # Test 4: Annotation inheritance
+    print("\n4. Testing Annotation inheritance:")
+    ann = Annotation("Test", (0.5, 0.5), xycoords='data')
+    assert hasattr(ann, 'get_antialiased'), "Annotation should inherit get_antialiased"
+    assert hasattr(ann, 'set_antialiased'), "Annotation should inherit set_antialiased"
+    assert ann.get_antialiased() == mpl.rcParams['text.antialiased'], "Annotation default should match rcParams"
+    ann.set_antialiased(False)
+    assert ann.get_antialiased() == False, "Annotation should be able to set antialiased"
+    print("   ✓ Annotation inheritance works")
+    
+    # Test 5: update_from method
+    print("\n5. Testing update_from method:")
+    source = Text(0.5, 0.5, "Source", antialiased=True)
+    target = Text(0.5, 0.5, "Target", antialiased=False)
+    target.update_from(source)
+    assert target.get_antialiased() == True, "update_from should copy antialiased state"
+    print("   ✓ update_from method works")
+    
+    # Test 6: Backend rendering
+    print("\n6. Testing backend rendering:")
+    fig, ax = plt.subplots(figsize=(6, 4))
+    text1 = ax.text(0.25, 0.5, "AA=True", antialiased=True, fontsize=14, ha='center')
+    text2 = ax.text(0.75, 0.5, "AA=False", antialiased=False, fontsize=14, ha='center')
+    assert text1.get_antialiased() == True, "First text should be antialiased"
+    assert text2.get_antialiased() == False, "Second text should not be antialiased"
+    plt.savefig('comprehensive_test.png', dpi=150, bbox_inches='tight')
+    plt.close(fig)
+    print("   ✓ Backend rendering works")
+    
+    print("\n✅ All comprehensive tests passed!")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..4e9f4e3eed 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -115,6 +115,7 @@ class Text(Artist):
                  wrap=False,
                  transform_rotates_text=False,
                  parse_math=None,    # defaults to rcParams['text.parse_math']
+                 antialiased=None,    # defaults to rcParams['text.antialiased']
                  **kwargs
                  ):
         """
@@ -149,6 +150,7 @@ class Text(Artist):
             transform_rotates_text=transform_rotates_text,
             linespacing=linespacing,
             rotation_mode=rotation_mode,
+            antialiased=antialiased,
         )
         self.update(kwargs)
 
@@ -167,6 +169,7 @@ class Text(Artist):
         transform_rotates_text=False,
         linespacing=None,
         rotation_mode=None,
+        antialiased=None,
     ):
         self.set_text(text)
         self.set_color(
@@ -187,6 +190,10 @@ class Text(Artist):
             linespacing = 1.2  # Maybe use rcParam later.
         self.set_linespacing(linespacing)
         self.set_rotation_mode(rotation_mode)
+        self._antialiased = None  # Initialize before setting
+        if antialiased is None:
+            antialiased = mpl.rcParams['text.antialiased']
+        self.set_antialiased(antialiased)
 
     def update(self, kwargs):
         # docstring inherited
@@ -322,6 +329,7 @@ class Text(Artist):
         self._transform_rotates_text = other._transform_rotates_text
         self._picker = other._picker
         self._linespacing = other._linespacing
+        self._antialiased = other._antialiased
         self.stale = True
 
     def _get_layout(self, renderer):
@@ -737,6 +745,7 @@ class Text(Artist):
             gc.set_foreground(self.get_color())
             gc.set_alpha(self.get_alpha())
             gc.set_url(self._url)
+            gc.set_antialiased(self.get_antialiased())
             self._set_gc_clip(gc)
 
             angle = self.get_rotation()
@@ -774,6 +783,22 @@ class Text(Artist):
         """Return the color of the text."""
         return self._color
 
+    def get_antialiased(self):
+        """Return whether antialiased rendering is used."""
+        return self._antialiased
+
+    def set_antialiased(self, b):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        b : bool
+        """
+        if self._antialiased != b:
+            self.stale = True
+        self._antialiased = b
+
     def get_fontproperties(self):
         """Return the `.font_manager.FontProperties`."""
         return self._fontproperties
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e168851d71
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with Text objects not having get/set_antialiased methods.
+"""
+
+import matplotlib as mpl
+import matplotlib.pyplot as plt
+from matplotlib.text import Text
+
+def test_current_behavior():
+    """Test current behavior of Text objects regarding antialiasing."""
+    print("Testing current Text object behavior...")
+    
+    # Create a Text object
+    text = Text(0.5, 0.5, "Test Text")
+    
+    # Check if get_antialiased method exists
+    has_get_aa = hasattr(text, 'get_antialiased')
+    has_set_aa = hasattr(text, 'set_antialiased')
+    
+    print(f"Text has get_antialiased: {has_get_aa}")
+    print(f"Text has set_antialiased: {has_set_aa}")
+    
+    if has_get_aa:
+        current_aa = text.get_antialiased()
+        print(f"Current antialiased state: {current_aa}")
+    
+    # Test with other artists for comparison
+    from matplotlib.lines import Line2D
+    line = Line2D([0, 1], [0, 1])
+    print(f"Line2D has get_antialiased: {hasattr(line, 'get_antialiased')}")
+    print(f"Line2D has set_antialiased: {hasattr(line, 'set_antialiased')}")
+    
+    if hasattr(line, 'get_antialiased'):
+        line_aa = line.get_antialiased()
+        print(f"Line2D antialiased state: {line_aa}")
+
+def test_backend_behavior():
+    """Test how backends currently handle text antialiasing."""
+    print("\nTesting backend behavior...")
+    
+    # Check the current rcParam value
+    rc_aa = mpl.rcParams['text.antialiased']
+    print(f"rcParams['text.antialiased']: {rc_aa}")
+    
+    # Create a figure and test drawing
+    fig, ax = plt.subplots(figsize=(6, 4))
+    text = ax.text(0.5, 0.5, "Test Text", fontsize=20)
+    
+    # Try to access antialiasing state if possible
+    try:
+        if hasattr(text, '_antialiased'):
+            print(f"Text._antialiased: {text._antialiased}")
+        else:
+            print("Text object has no _antialiased attribute")
+    except Exception as e:
+        print(f"Error accessing antialiased state: {e}")
+    
+    plt.close(fig)
+
+if __name__ == "__main__":
+    test_current_behavior()
+    test_backend_behavior()
\ No newline at end of file
diff --git a/test_antialiasing.png b/test_antialiasing.png
new file mode 100644
index 0000000000..340d914050
Binary files /dev/null and b/test_antialiasing.png differ
diff --git a/test_antialiasing.py b/test_antialiasing.py
new file mode 100644
index 0000000000..256e0d2e69
--- /dev/null
+++ b/test_antialiasing.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that Text antialiasing works correctly.
+"""
+
+import matplotlib as mpl
+import matplotlib.pyplot as plt
+from matplotlib.text import Text
+
+def test_antialiasing_functionality():
+    """Test that get/set_antialiased methods work correctly."""
+    print("Testing antialiasing functionality...")
+    
+    # Create a Text object
+    text = Text(0.5, 0.5, "Test Text")
+    
+    # Test default value
+    default_aa = text.get_antialiased()
+    print(f"Default antialiased: {default_aa}")
+    assert default_aa == mpl.rcParams['text.antialiased'], "Default should match rcParams"
+    
+    # Test setting to False
+    text.set_antialiased(False)
+    assert text.get_antialiased() == False, "Should be able to set to False"
+    print("Set to False: OK")
+    
+    # Test setting to True
+    text.set_antialiased(True)
+    assert text.get_antialiased() == True, "Should be able to set to True"
+    print("Set to True: OK")
+    
+    # Test constructor with antialiased parameter
+    text_false = Text(0.5, 0.5, "Test Text", antialiased=False)
+    assert text_false.get_antialiased() == False, "Constructor should accept antialiased parameter"
+    print("Constructor with antialiased=False: OK")
+    
+    text_true = Text(0.5, 0.5, "Test Text", antialiased=True)
+    assert text_true.get_antialiased() == True, "Constructor should accept antialiased parameter"
+    print("Constructor with antialiased=True: OK")
+
+def test_graphics_context():
+    """Test that antialiasing methods work correctly."""
+    print("\nTesting GraphicsContext integration...")
+    
+    # Create a Text object with antialiasing disabled
+    text = Text(0.5, 0.5, "Test Text", antialiased=False)
+    
+    # Test that the methods exist and work
+    assert hasattr(text, 'get_antialiased'), "Text should have get_antialiased method"
+    assert hasattr(text, 'set_antialiased'), "Text should have set_antialiased method"
+    
+    # Test that the antialiased state is stored correctly
+    assert text.get_antialiased() == False, "Should be able to get antialiased state"
+    text.set_antialiased(True)
+    assert text.get_antialiased() == True, "Should be able to set antialiased state"
+    
+    print("GraphicsContext integration: Methods work correctly")
+
+def test_backend_compatibility():
+    """Test that the changes work with different backends."""
+    print("\nTesting backend compatibility...")
+    
+    # Test that the antialiased attribute is accessible
+    text = Text(0.5, 0.5, "Test Text")
+    
+    # Test that we can access the attribute directly (for testing purposes)
+    assert hasattr(text, '_antialiased'), "Text should have _antialiased attribute"
+    print("_antialiased attribute: OK")
+    
+    # Test that the attribute is properly initialized
+    assert text._antialiased is not None, "_antialiased should be initialized"
+    print("_antialiased initialization: OK")
+
+if __name__ == "__main__":
+    test_antialiasing_functionality()
+    test_graphics_context()
+    test_backend_compatibility()
+    print("\nAll tests passed! ✅")
\ No newline at end of file
diff --git a/test_backend_integration.py b/test_backend_integration.py
new file mode 100644
index 0000000000..e72602b3a5
--- /dev/null
+++ b/test_backend_integration.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""
+Test script to verify backend integration works correctly.
+"""
+
+import matplotlib as mpl
+import matplotlib.pyplot as plt
+from matplotlib.text import Text
+
+def test_backend_antialiasing():
+    """Test that backends respect the antialiased setting."""
+    print("Testing backend antialiasing integration...")
+    
+    # Create a figure with text objects having different antialiasing settings
+    fig, ax = plt.subplots(figsize=(8, 4))
+    
+    # Regular text with default antialiasing (should be True)
+    text1 = ax.text(0.25, 0.5, "Default AA", fontsize=16, ha='center')
+    
+    # Text with explicit antialiasing=True
+    text2 = ax.text(0.5, 0.5, "AA=True", fontsize=16, ha='center', antialiased=True)
+    
+    # Text with explicit antialiasing=False  
+    text3 = ax.text(0.75, 0.5, "AA=False", fontsize=16, ha='center', antialiased=False)
+    
+    # Verify the properties are set correctly
+    assert text1.get_antialiased() == mpl.rcParams['text.antialiased'], "Default should match rcParams"
+    assert text2.get_antialiased() == True, "Explicit True should be True"
+    assert text3.get_antialiased() == False, "Explicit False should be False"
+    
+    print("Antialiasing properties set correctly:")
+    print(f"  Default: {text1.get_antialiased()}")
+    print(f"  Explicit True: {text2.get_antialiased()}")
+    print(f"  Explicit False: {text3.get_antialiased()}")
+    
+    # Save the figure to verify rendering
+    plt.savefig('backend_antialiasing_test.png', dpi=150, bbox_inches='tight')
+    plt.close(fig)
+    
+    print("Figure saved as 'backend_antialiasing_test.png'")
+    print("Backend integration test passed! ✅")
+
+if __name__ == "__main__":
+    test_backend_antialiasing()
\ No newline at end of file
diff --git a/test_rendering.py b/test_rendering.py
new file mode 100644
index 0000000000..b973ca3cea
--- /dev/null
+++ b/test_rendering.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that Text antialiasing affects rendering.
+"""
+
+import matplotlib as mpl
+import matplotlib.pyplot as plt
+from matplotlib.text import Text
+import numpy as np
+
+def test_rendering_with_antialiasing():
+    """Test that antialiasing setting affects the rendering."""
+    print("Testing rendering with different antialiasing settings...")
+    
+    # Create a figure
+    fig, ax = plt.subplots(figsize=(8, 6))
+    
+    # Create text objects with different antialiasing settings
+    text_aa_true = Text(0.3, 0.5, "Antialiased: True", antialiased=True, 
+                       fontsize=20, ha='center')
+    text_aa_false = Text(0.7, 0.5, "Antialiased: False", antialiased=False,
+                        fontsize=20, ha='center')
+    
+    # Add them to the axes
+    ax.add_artist(text_aa_true)
+    ax.add_artist(text_aa_false)
+    
+    # Set axis limits and remove ticks
+    ax.set_xlim(0, 1)
+    ax.set_ylim(0, 1)
+    ax.set_xticks([])
+    ax.set_yticks([])
+    
+    # Save the figure to see the difference
+    plt.savefig('test_antialiasing.png', dpi=150, bbox_inches='tight')
+    plt.close(fig)
+    
+    print("Figure saved as 'test_antialiasing.png'")
+    print("Check the image to see if antialiasing makes a visual difference")
+    
+    # Verify that the properties are set correctly
+    assert text_aa_true.get_antialiased() == True, "First text should be antialiased"
+    assert text_aa_false.get_antialiased() == False, "Second text should not be antialiased"
+    print("Antialiasing properties set correctly")
+
+def test_update_from():
+    """Test that update_from method works with antialiasing."""
+    print("\nTesting update_from method...")
+    
+    # Create source and target text objects
+    source = Text(0.5, 0.5, "Source", antialiased=True)
+    target = Text(0.5, 0.5, "Target", antialiased=False)
+    
+    # Verify initial states
+    assert source.get_antialiased() == True, "Source should be antialiased"
+    assert target.get_antialiased() == False, "Target should not be antialiased"
+    
+    # Update target from source
+    target.update_from(source)
+    
+    # Target should now have source's antialiased state
+    assert target.get_antialiased() == True, "Target should inherit source's antialiased state"
+    print("update_from method works correctly")
+
+if __name__ == "__main__":
+    test_rendering_with_antialiasing()
+    test_update_from()
+    print("\nAll rendering tests passed! ✅")
\ No newline at end of file
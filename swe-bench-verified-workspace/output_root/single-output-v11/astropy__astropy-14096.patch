diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0d..8f9162670e 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -872,6 +872,15 @@ class SkyCoord(ShapedLikeNDArray):
         to, based on the alias attr in the primary transform graph.
         """
         if "_sky_coord_frame" in self.__dict__:
+            # Check if the attribute is a property defined in a subclass
+            # If so, let normal attribute access handle it to get proper error messages
+            if (len(self.__class__.__mro__) > 1 and  # Check if this is a subclass
+                hasattr(self.__class__, attr) and 
+                isinstance(getattr(self.__class__, attr), property)):
+                # This will let Python's normal attribute access handle the property,
+                # which will properly raise AttributeError for missing attributes within the property
+                return super().__getattribute__(attr)
+            
             if self._is_name(attr):
                 return self  # Should this be a deepcopy of self?
 
diff --git a/pyproject.toml b/pyproject.toml
index 486d6b9b3b..1c5f74f3a1 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1e6b4be2ac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+import astropy.coordinates as coord
+
+
+class custom_coord(coord.SkyCoord):
+    @property
+    def prop(self):
+        return self.random_attr
+
+
+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
+try:
+    result = c.prop
+    print("No error occurred - this is unexpected!")
+except AttributeError as e:
+    print(f"Error message: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..837bef86a9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,55 @@
+import astropy.coordinates as coord
+import astropy.units as u
+
+
+# Test 1: Normal SkyCoord functionality
+print("Test 1: Normal SkyCoord functionality")
+c1 = coord.SkyCoord('00h42m30s', '+41d12m00s', frame='icrs')
+print(f"RA: {c1.ra}")
+print(f"Dec: {c1.dec}")
+print("✓ Normal functionality works\n")
+
+# Test 2: Properties in base SkyCoord class
+print("Test 2: Properties in base SkyCoord class")
+class test_coord_base(coord.SkyCoord):
+    @property
+    def test_prop(self):
+        return self.ra  # This should work
+
+c2 = test_coord_base('00h42m30s', '+41d12m00s', frame='icrs')
+print(f"Test property: {c2.test_prop}")
+print("✓ Properties in base class work\n")
+
+# Test 3: Non-property attributes in subclasses
+print("Test 3: Non-property attributes in subclasses")
+class test_coord_attr(coord.SkyCoord):
+    def test_method(self):
+        return self.ra  # This should work
+
+c3 = test_coord_attr('00h42m30s', '+41d12m00s', frame='icrs')
+print(f"Test method: {c3.test_method()}")
+print("✓ Non-property attributes work\n")
+
+# Test 4: Original issue - property accessing non-existent attribute
+print("Test 4: Original issue")
+class test_coord_prop(coord.SkyCoord):
+    @property
+    def prop(self):
+        return self.non_existent_attr
+
+c4 = test_coord_prop('00h42m30s', '+41d12m00s', frame='icrs')
+try:
+    result = c4.prop
+    print("No error occurred - this is unexpected!")
+except AttributeError as e:
+    print(f"Error message: {e}")
+    print("✓ Original issue is fixed - correct error message\n")
+
+# Test 5: Direct access to non-existent attribute
+print("Test 5: Direct access to non-existent attribute")
+try:
+    result = c4.non_existent_attr
+    print("No error occurred - this is unexpected!")
+except AttributeError as e:
+    print(f"Error message: {e}")
+    print("✓ Direct access to non-existent attribute works correctly\n")
\ No newline at end of file
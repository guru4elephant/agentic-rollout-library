diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..926316fa60
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+v1 = units.Quantity('v1')
+SI.set_quantity_dimension(v1, units.velocity)
+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)
+
+a1 = units.Quantity('a1')
+SI.set_quantity_dimension(a1, units.acceleration)
+SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)
+
+t1 = units.Quantity('t1')
+SI.set_quantity_dimension(t1, units.time)
+SI.set_quantity_scale_factor(t1, 5 * units.second)
+
+expr1 = a1*t1 + v1
+result = SI._collect_factor_and_dimension(expr1)
+print("Result:", result)
\ No newline at end of file
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5705c821c2 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):
             for addend in expr.args[1:]:
                 addend_factor, addend_dim = \
                     self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):
                     raise ValueError(
                         'Dimension of "{}" is {}, '
                         'but it should be {}'.format(
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f59dfa9eb9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,57 @@
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+# Test case 1: Original issue - addition of equivalent dimensions
+print("Test 1: Original issue")
+v1 = units.Quantity('v1')
+SI.set_quantity_dimension(v1, units.velocity)
+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)
+
+a1 = units.Quantity('a1')
+SI.set_quantity_dimension(a1, units.acceleration)
+SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)
+
+t1 = units.Quantity('t1')
+SI.set_quantity_dimension(t1, units.time)
+SI.set_quantity_scale_factor(t1, 5 * units.second)
+
+expr1 = a1*t1 + v1
+result1 = SI._collect_factor_and_dimension(expr1)
+print("Result:", result1)
+
+# Test case 2: Addition of same dimensions (should work as before)
+print("\nTest 2: Same dimensions")
+v2 = units.Quantity('v2')
+SI.set_quantity_dimension(v2, units.velocity)
+SI.set_quantity_scale_factor(v2, 3 * units.meter / units.second)
+
+expr2 = v1 + v2
+result2 = SI._collect_factor_and_dimension(expr2)
+print("Result:", result2)
+
+# Test case 3: Addition of incompatible dimensions (should still raise error)
+print("\nTest 3: Incompatible dimensions")
+m1 = units.Quantity('m1')
+SI.set_quantity_dimension(m1, units.mass)
+SI.set_quantity_scale_factor(m1, 10 * units.kilogram)
+
+try:
+    expr3 = v1 + m1
+    result3 = SI._collect_factor_and_dimension(expr3)
+    print("Result:", result3)
+except ValueError as e:
+    print("Error (expected):", e)
+
+# Test case 4: Multiple additions with equivalent dimensions
+print("\nTest 4: Multiple additions")
+a2 = units.Quantity('a2')
+SI.set_quantity_dimension(a2, units.acceleration)
+SI.set_quantity_scale_factor(a2, 2 * units.meter / units.second**2)
+
+t2 = units.Quantity('t2')
+SI.set_quantity_dimension(t2, units.time)
+SI.set_quantity_scale_factor(t2, 3 * units.second)
+
+expr4 = a1*t1 + v1 + a2*t2
+result4 = SI._collect_factor_and_dimension(expr4)
+print("Result:", result4)
\ No newline at end of file
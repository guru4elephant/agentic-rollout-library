diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..0a4ddf2107 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,16 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            if converter:
+                try:
+                    arrays.append(converter(input_))
+                except (ValueError, TypeError):
+                    # If conversion fails due to incompatible input type,
+                    # return NotImplemented to allow other __array_ufunc__ methods
+                    # to handle the operation
+                    return NotImplemented
+            else:
+                arrays.append(input_)
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/pyproject.toml b/pyproject.toml
index 486d6b9b3b..1c5f74f3a1 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..506c69101f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+
+# Test case 1: This should work
+print("Test case 1: DuckArray + Quantity (same units)")
+try:
+    result1 = DuckArray(1 * u.mm) + (1 * u.m)
+    print(f"Success: {result1}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 2: This should work
+print("\nTest case 2: Quantity + DuckArray (same units)")
+try:
+    result2 = (1 * u.mm) + DuckArray(1 * u.mm)
+    print(f"Success: {result2}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 3: This should work but currently fails
+print("\nTest case 3: Quantity + DuckArray (different units)")
+try:
+    result3 = (1 * u.m) + DuckArray(1 * u.mm)
+    print(f"Success: {result3}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..f64cfaf908
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,110 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+
+# Test various operations with different units
+print("Testing various operations with DuckArray and Quantity:")
+
+# Addition
+print("\n1. Addition tests:")
+try:
+    result = DuckArray(1 * u.mm) + (1 * u.m)
+    print(f"  DuckArray(1mm) + 1m = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+try:
+    result = (1 * u.m) + DuckArray(1 * u.mm)
+    print(f"  1m + DuckArray(1mm) = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Subtraction
+print("\n2. Subtraction tests:")
+try:
+    result = DuckArray(5 * u.m) - (2 * u.m)
+    print(f"  DuckArray(5m) - 2m = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+try:
+    result = (5 * u.m) - DuckArray(2 * u.m)
+    print(f"  5m - DuckArray(2m) = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Multiplication
+print("\n3. Multiplication tests:")
+try:
+    result = DuckArray(2 * u.m) * (3 * u.s)
+    print(f"  DuckArray(2m) * 3s = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+try:
+    result = (2 * u.m) * DuckArray(3 * u.s)
+    print(f"  2m * DuckArray(3s) = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Division
+print("\n4. Division tests:")
+try:
+    result = DuckArray(6 * u.m) / (2 * u.s)
+    print(f"  DuckArray(6m) / 2s = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+try:
+    result = (6 * u.m) / DuckArray(2 * u.s)
+    print(f"  6m / DuckArray(2s) = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Test with dimensionless quantities
+print("\n5. Dimensionless tests:")
+try:
+    result = DuckArray(2 * u.dimensionless_unscaled) + 3
+    print(f"  DuckArray(2) + 3 = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+try:
+    result = 3 + DuckArray(2 * u.dimensionless_unscaled)
+    print(f"  3 + DuckArray(2) = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Test incompatible operations (should still work with NotImplemented)
+print("\n6. Incompatible operations (should return NotImplemented):")
+
+class IncompatibleDuckArray:
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        return NotImplemented
+
+try:
+    result = DuckArray(1 * u.m) + IncompatibleDuckArray()
+    print(f"  DuckArray + IncompatibleDuckArray = {result}")
+except Exception as e:
+    print(f"  Error (expected): {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c47b6ff613
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,71 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+
+# Test edge cases
+print("Testing edge cases:")
+
+# Test with non-array objects that should still work
+print("\n1. Regular numpy arrays:")
+try:
+    result = DuckArray(1 * u.m) + np.array([1, 2, 3])
+    print(f"  DuckArray + numpy array = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Test with scalars
+print("\n2. Scalar values:")
+try:
+    result = DuckArray(1 * u.m) + 5.0
+    print(f"  DuckArray + scalar = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Test with incompatible types (should return NotImplemented)
+print("\n3. Incompatible types:")
+class IncompatibleType:
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        return NotImplemented
+
+try:
+    result = DuckArray(1 * u.m) + IncompatibleType()
+    print(f"  DuckArray + IncompatibleType = {result}")
+except Exception as e:
+    print(f"  Error (expected): {type(e).__name__}: {e}")
+
+# Test that regular Quantity operations still work
+print("\n4. Regular Quantity operations:")
+try:
+    result = (1 * u.m) + (2 * u.cm)
+    print(f"  Quantity + Quantity = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
+
+# Test that DuckArray operations still work
+print("\n5. DuckArray operations:")
+try:
+    result = DuckArray(1 * u.m) + DuckArray(2 * u.cm)
+    print(f"  DuckArray + DuckArray = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
\ No newline at end of file
diff --git a/test_error_propagation.py b/test_error_propagation.py
new file mode 100644
index 0000000000..51a5ed73dd
--- /dev/null
+++ b/test_error_propagation.py
@@ -0,0 +1,51 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+
+# Test that legitimate errors still propagate
+print("Testing that legitimate errors still propagate:")
+
+# Test with incompatible units (should still raise UnitConversionError)
+print("\n1. Incompatible units:")
+try:
+    result = DuckArray(1 * u.m) + (1 * u.kg)
+    print(f"  DuckArray(1m) + 1kg = {result}")
+except Exception as e:
+    print(f"  Error (expected): {type(e).__name__}: {e}")
+
+# Test with regular incompatible units (should still raise UnitConversionError)
+print("\n2. Regular incompatible units:")
+try:
+    result = (1 * u.m) + (1 * u.kg)
+    print(f"  1m + 1kg = {result}")
+except Exception as e:
+    print(f"  Error (expected): {type(e).__name__}: {e}")
+
+# Test that our fix doesn't interfere with normal operations
+print("\n3. Normal operations:")
+try:
+    result = DuckArray(1 * u.m) + DuckArray(2 * u.m)
+    print(f"  DuckArray(1m) + DuckArray(2m) = {result}")
+except Exception as e:
+    print(f"  Error: {e}")
\ No newline at end of file
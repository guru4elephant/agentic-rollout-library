diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 5369eadbde..46fb698522 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -5014,7 +5014,7 @@ default: :rc:`scatter.edgecolors`
             if mincnt is None:
                 mincnt = 0
             accum = np.array(
-                [reduce_C_function(acc) if len(acc) > mincnt else np.nan
+                [reduce_C_function(acc) if len(acc) >= mincnt else np.nan
                  for Cs_at_i in [Cs_at_i1, Cs_at_i2]
                  for acc in Cs_at_i[1:]],  # [1:] drops out-of-range points.
                 float)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..25d24ba052
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,89 @@
+from matplotlib import pyplot
+import numpy as np
+
+np.random.seed(42)
+
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+#Z = (X ** 2 + Y ** 2)
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]  # doc: "Order of scalars is (left, right, bottom, top)"
+gridsize = (7, 7)  # doc: "int or (int, int), optional, default is 100"
+
+# #### no mincnt specified, no C argument
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")  # for contrast
+# shows a plot where all gridpoints are shown, even when the values are zero
+print("Case 1: No mincnt, no C - should show all gridpoints")
+
+# #### mincnt=1 specified, no C argument
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    mincnt=1,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# *all makes sense, so far*
+# shows only a plot where gridpoints containing at least one datum are shown
+print("Case 2: mincnt=1, no C - should show gridpoints with >=1 datum")
+
+# #### no mincnt specified, C argument specified
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# shows only a plot where gridpoints containing at least one datum are shown
+print("Case 3: No mincnt, with C - should show gridpoints with >=1 datum")
+
+# #### mincnt=1 specified, C argument specified
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    mincnt=1,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# hmm, unexpected...
+# shows only a plot where gridpoints containing at least **two** data points are shown(!!!)
+print("Case 4: mincnt=1, with C - should show gridpoints with >=1 datum (but currently shows >=2)")
+
+# #### mincnt=0 specified, C argument specified
+fig, ax = pyplot.subplots(1, 1)
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    mincnt=0,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+# shows only a plot where gridpoints containing at least one datum are shown
+print("Case 5: mincnt=0, with C - should show gridpoints with >=0 datum")
+
+pyplot.show()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..72264a9a61
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,40 @@
+from matplotlib import pyplot as plt
+import numpy as np
+
+np.random.seed(42)
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=20).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]
+gridsize = (7, 7)
+
+# Test edge cases with mincnt
+test_cases = [
+    ("mincnt=0 with C", 0),
+    ("mincnt=1 with C", 1), 
+    ("mincnt=2 with C", 2),
+    ("mincnt=5 with C", 5),
+]
+
+print("Testing edge cases for mincnt with C parameter:")
+for desc, mincnt_val in test_cases:
+    fig, ax = plt.subplots(1, 1)
+    h = ax.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=mincnt_val, 
+                  extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+    ax.set_facecolor("green")
+    count = len(h.get_offsets())
+    print(f"{desc}: {count} hexagons shown")
+    plt.close(fig)
+
+# Test the same cases without C for comparison
+print("\nTesting same cases without C parameter:")
+for desc, mincnt_val in test_cases:
+    fig, ax = plt.subplots(1, 1)
+    h = ax.hexbin(X, Y, mincnt=mincnt_val, 
+                  extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+    ax.set_facecolor("green")
+    count = len(h.get_offsets())
+    print(f"{desc}: {count} hexagons shown")
+    plt.close(fig)
+
+print("\nAll edge cases completed successfully!")
\ No newline at end of file
diff --git a/test_mincnt_fix.py b/test_mincnt_fix.py
new file mode 100644
index 0000000000..8127cbb1e1
--- /dev/null
+++ b/test_mincnt_fix.py
@@ -0,0 +1,38 @@
+from matplotlib import pyplot as plt
+import numpy as np
+
+np.random.seed(42)
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]
+gridsize = (7, 7)
+
+# Test case 1: mincnt=1 without C
+fig1, ax1 = plt.subplots(1, 1)
+h1 = ax1.hexbin(X, Y, mincnt=1, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+ax1.set_facecolor("green")
+count1 = len(h1.get_offsets())
+print(f"Case 1 (mincnt=1, no C): {count1} hexagons shown")
+
+# Test case 2: mincnt=1 with C
+fig2, ax2 = plt.subplots(1, 1)
+h2 = ax2.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=1, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+ax2.set_facecolor("green")
+count2 = len(h2.get_offsets())
+print(f"Case 2 (mincnt=1, with C): {count2} hexagons shown")
+
+# Test case 3: mincnt=0 with C (should show all)
+fig3, ax3 = plt.subplots(1, 1)
+h3 = ax3.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=0, extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+ax3.set_facecolor("green")
+count3 = len(h3.get_offsets())
+print(f"Case 3 (mincnt=0, with C): {count3} hexagons shown")
+
+# The key test: cases 1 and 2 should now show the same number of hexagons
+if count1 == count2:
+    print("SUCCESS: mincnt behavior is now consistent between cases with and without C parameter!")
+else:
+    print(f"FAILURE: Inconsistent behavior. Case 1: {count1}, Case 2: {count2}")
+
+plt.show()
\ No newline at end of file
diff --git a/test_mincnt_zero.py b/test_mincnt_zero.py
new file mode 100644
index 0000000000..776855641b
--- /dev/null
+++ b/test_mincnt_zero.py
@@ -0,0 +1,41 @@
+from matplotlib import pyplot as plt
+import numpy as np
+
+np.random.seed(42)
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]
+gridsize = (7, 7)
+
+# Test mincnt=0 with C parameter
+fig1, ax1 = plt.subplots(1, 1)
+h1 = ax1.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=0, 
+                extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+ax1.set_facecolor("green")
+count1 = len(h1.get_offsets())
+print(f"mincnt=0 with C: {count1} hexagons shown")
+
+# Test mincnt=None with C parameter (should be equivalent to mincnt=0)
+fig2, ax2 = plt.subplots(1, 1)
+h2 = ax2.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=None, 
+                extent=extent, gridsize=gridsize, linewidth=0.0, cmap='Blues')
+ax2.set_facecolor("green")
+count2 = len(h2.get_offsets())
+print(f"mincnt=None with C: {count2} hexagons shown")
+
+# Test mincnt=0 without C parameter
+fig3, ax3 = plt.subplots(1, 1)
+h3 = ax3.hexbin(X, Y, mincnt=0, 
+                extent=extent, gridsize=gridsize,  linewidth=0.0, cmap='Blues')
+ax3.set_facecolor("green")
+count3 = len(h3.get_offsets())
+print(f"mincnt=0 without C: {count3} hexagons shown")
+
+# All should show the same number of hexagons (all gridpoints)
+if count1 == count2 == count3:
+    print("SUCCESS: mincnt=0 and mincnt=None show consistent behavior!")
+else:
+    print(f"FAILURE: Inconsistent behavior. Counts: {count1}, {count2}, {count3}")
+
+plt.show()
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..1f1139d81
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,35 @@
+import pandas as pd
+from sklearn.base import BaseEstimator, TransformerMixin
+from sklearn import set_config
+from sklearn.pipeline import make_union
+
+# Exact reproduction of the original issue
+index = pd.date_range(start="2020-01-01", end="2020-01-05", inclusive="left", freq="H")
+data = pd.DataFrame(index=index, data=[10] * len(index), columns=["value"])
+data["date"] = index.date
+
+
+class MyTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None):
+        return self
+
+    def transform(self, X):
+        return X["value"].groupby(X["date"]).sum()
+
+
+print("Testing the exact original issue...")
+
+# This works (as expected)
+set_config(transform_output="default")
+result_default = make_union(MyTransformer()).fit_transform(data)
+print(f"Default output - Result shape: {result_default.shape}")
+print(f"Default output - Result type: {type(result_default)}")
+
+# This should now work (was failing before)
+set_config(transform_output="pandas")
+result_pandas = make_union(MyTransformer()).fit_transform(data)
+print(f"Pandas output - Result shape: {result_pandas.shape}")
+print(f"Pandas output - Result type: {type(result_pandas)}")
+print(f"Pandas output - Result:\n{result_pandas}")
+
+print("\nâœ… Issue fixed! Both default and pandas output modes work correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..29d6c46ad
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,39 @@
+import pandas as pd
+from sklearn.base import BaseEstimator, TransformerMixin
+from sklearn import set_config
+from sklearn.pipeline import make_union
+
+index = pd.date_range(start="2020-01-01", end="2020-01-05", inclusive="left", freq="H")
+data = pd.DataFrame(index=index, data=[10] * len(index), columns=["value"])
+data["date"] = index.date
+
+
+class MyTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X: pd.DataFrame, y=None, **kwargs):
+        return self
+
+    def transform(self, X: pd.DataFrame, y=None):
+        return X["value"].groupby(X["date"]).sum()
+
+
+# This works.
+print("Testing with default output:")
+set_config(transform_output="default")
+result_default = make_union(MyTransformer()).fit_transform(data)
+print(f"Result shape: {result_default.shape}")
+print(f"Result type: {type(result_default)}")
+print(f"Result: {result_default}")
+print()
+
+# This does not work.
+print("Testing with pandas output:")
+set_config(transform_output="pandas")
+try:
+    result_pandas = make_union(MyTransformer()).fit_transform(data)
+    print(f"Result shape: {result_pandas.shape}")
+    print(f"Result type: {type(result_pandas)}")
+    print(f"Result: {result_pandas}")
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..1027a2ea0 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -55,7 +55,7 @@ def _wrap_in_pandas_container(
     if isinstance(data_to_wrap, pd.DataFrame):
         if columns is not None:
             data_to_wrap.columns = columns
-        if index is not None:
+        if index is not None and len(data_to_wrap) == len(index):
             data_to_wrap.index = index
         return data_to_wrap
 
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..33f7f2812
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,72 @@
+import pandas as pd
+import numpy as np
+from sklearn.base import BaseEstimator, TransformerMixin
+from sklearn import set_config
+from sklearn.pipeline import make_union
+from sklearn.preprocessing import StandardScaler
+
+# Test case 1: Aggregation transformer (changes number of rows)
+index = pd.date_range(start="2020-01-01", end="2020-01-05", inclusive="left", freq="H")
+data = pd.DataFrame(index=index, data=[10] * len(index), columns=["value"])
+data["date"] = index.date
+
+class AggregationTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None):
+        return self
+    
+    def transform(self, X):
+        return X["value"].groupby(X["date"]).sum()
+
+# Test case 2: Regular transformer (same number of rows)
+class SimpleTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None):
+        return self
+    
+    def transform(self, X):
+        return X[["value"]]
+
+# Test case 3: FeatureUnion with both types of transformers
+print("Test 1: Aggregation transformer only")
+set_config(transform_output="pandas")
+union1 = make_union(AggregationTransformer())
+result1 = union1.fit_transform(data)
+print(f"Result shape: {result1.shape}")
+print(f"Result type: {type(result1)}")
+print(f"Result:\n{result1}")
+print()
+
+print("Test 2: Simple transformer only")
+union2 = make_union(SimpleTransformer())
+result2 = union2.fit_transform(data)
+print(f"Result shape: {result2.shape}")
+print(f"Result type: {type(result2)}")
+print(f"Result:\n{result2.head()}")
+print()
+
+print("Test 3: Mixed transformers")
+union3 = make_union(AggregationTransformer(), SimpleTransformer())
+result3 = union3.fit_transform(data)
+print(f"Result shape: {result3.shape}")
+print(f"Result type: {type(result3)}")
+print(f"Result:\n{result3}")
+print()
+
+# Test case 4: With StandardScaler (should work normally)
+print("Test 4: With StandardScaler")
+# Create numerical data only for StandardScaler
+data_numeric = data[["value"]].copy()
+union4 = make_union(StandardScaler())
+result4 = union4.fit_transform(data_numeric)
+print(f"Result shape: {result4.shape}")
+print(f"Result type: {type(result4)}")
+print(f"Result:\n{result4.head()}")
+print()
+
+# Test case 5: Empty result case
+print("Test 5: Empty transformer case")
+from sklearn.pipeline import FeatureUnion
+empty_union = FeatureUnion([('drop', 'drop')])
+result5 = empty_union.fit_transform(data)
+print(f"Result shape: {result5.shape}")
+print(f"Result type: {type(result5)}")
+print(f"Result:\n{result5}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..95e9ed5a7
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,75 @@
+import pandas as pd
+import numpy as np
+from sklearn.base import BaseEstimator, TransformerMixin
+from sklearn import set_config
+from sklearn.pipeline import make_union
+
+# Test edge case 1: Empty DataFrame result
+class EmptyTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None):
+        return self
+    
+    def transform(self, X):
+        return pd.DataFrame(index=[])
+
+# Test edge case 2: Single row result
+class SingleRowTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None):
+        return self
+    
+    def transform(self, X):
+        return pd.DataFrame([999], columns=['single'])
+
+# Test edge case 3: Same length but different index
+class SameLengthTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None):
+        return self
+    
+    def transform(self, X):
+        # Return DataFrame with same length but different index
+        return pd.DataFrame([1, 2, 3], index=['a', 'b', 'c'])
+
+# Create test data
+data = pd.DataFrame({'value': [1, 2, 3]}, index=[0, 1, 2])
+
+print("Test 1: Empty DataFrame result")
+set_config(transform_output="pandas")
+try:
+    result1 = make_union(EmptyTransformer()).fit_transform(data)
+    print(f"Result shape: {result1.shape}")
+    print(f"Result type: {type(result1)}")
+    print(f"Result:\n{result1}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+print("Test 2: Single row result")
+try:
+    result2 = make_union(SingleRowTransformer()).fit_transform(data)
+    print(f"Result shape: {result2.shape}")
+    print(f"Result type: {type(result2)}")
+    print(f"Result:\n{result2}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+print("Test 3: Same length but different index")
+try:
+    result3 = make_union(SameLengthTransformer()).fit_transform(data)
+    print(f"Result shape: {result3.shape}")
+    print(f"Result type: {type(result3)}")
+    print(f"Result:\n{result3}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+# Test edge case 4: Mixed lengths in FeatureUnion
+print("Test 4: Mixed lengths in FeatureUnion")
+try:
+    union = make_union(SingleRowTransformer(), SameLengthTransformer())
+    result4 = union.fit_transform(data)
+    print(f"Result shape: {result4.shape}")
+    print(f"Result type: {type(result4)}")
+    print(f"Result:\n{result4}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
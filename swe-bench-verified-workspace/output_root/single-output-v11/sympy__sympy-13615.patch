diff --git a/debug_complement.py b/debug_complement.py
new file mode 100644
index 0000000000..d7a8bfb847
--- /dev/null
+++ b/debug_complement.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Debug the complement behavior
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print("a =", a)
+print("S.Reals =", S.Reals)
+print("a.complement(S.Reals) =", a.complement(S.Reals))
+print("b =", b)
+print("Complement(a, b) =", Complement(a, b))
\ No newline at end of file
diff --git a/debug_complement_reduce.py b/debug_complement_reduce.py
new file mode 100644
index 0000000000..e6492dd56a
--- /dev/null
+++ b/debug_complement_reduce.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Debug the Complement.reduce behavior
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print("a =", a)
+print("b =", b)
+print("b._complement(a) =", b._complement(a))
+print("Complement.reduce(a, b) =", Complement.reduce(a, b))
\ No newline at end of file
diff --git a/debug_empty_interval.py b/debug_empty_interval.py
new file mode 100644
index 0000000000..3945142084
--- /dev/null
+++ b/debug_empty_interval.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Debug the empty interval case
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(5, 5)  # Empty interval
+
+print("a =", a)
+print("b =", b)
+print("b.is_empty =", b.is_empty)
+print("a._complement(b) =", a._complement(b))
+print("Complement(a, b) =", Complement(a, b))
\ No newline at end of file
diff --git a/debug_empty_interval2.py b/debug_empty_interval2.py
new file mode 100644
index 0000000000..e905b8807d
--- /dev/null
+++ b/debug_empty_interval2.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S, EmptySet
+
+# Debug the empty interval case
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(5, 5, left_open=True)  # Truly empty interval
+c = EmptySet
+
+print("a =", a)
+print("b =", b)
+print("b.is_empty =", b.is_empty)
+print("c =", c)
+print("c.is_empty =", c.is_empty)
+print("a._complement(b) =", a._complement(b))
+print("Complement(a, b) =", Complement(a, b))
+print("Complement(a, c) =", Complement(a, c))
\ No newline at end of file
diff --git a/debug_finiteset_complement.py b/debug_finiteset_complement.py
new file mode 100644
index 0000000000..75198b9b91
--- /dev/null
+++ b/debug_finiteset_complement.py
@@ -0,0 +1,12 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Debug the FiniteSet._complement behavior
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print("a =", a)
+print("b =", b)
+print("a._complement(b) =", a._complement(b))
\ No newline at end of file
diff --git a/debug_intersection.py b/debug_intersection.py
new file mode 100644
index 0000000000..1e3e360fa8
--- /dev/null
+++ b/debug_intersection.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S, Intersection
+
+# Debug the intersection behavior
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+complement_reals = a.complement(S.Reals)
+print("a.complement(S.Reals) =", complement_reals)
+print("b =", b)
+print("Intersection(b, complement_reals) =", Intersection(b, complement_reals))
\ No newline at end of file
diff --git a/debug_set_complement.py b/debug_set_complement.py
new file mode 100644
index 0000000000..7613a96eda
--- /dev/null
+++ b/debug_set_complement.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+from sympy.sets.sets import Set
+
+# Debug the Set._complement behavior from Interval
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print("a =", a)
+print("b =", b)
+print("Set._complement(b, a) =", Set._complement(b, a))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..72c9ad2c0a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols
+
+# Reproduce the issue described in the GitHub issue
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+
+print("Input:")
+print(f"a = {a}")
+print(f"b = {b}")
+print(f"Complement(a, b) = {result}")
+print()
+print("Expected output: {x, y} \\ [-10,10]")
+print(f"Actual output: {result}")
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..862a0d3a40 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1725,7 +1725,7 @@ def reduce(A, B):
         if isinstance(B, Union):
             return Intersection(s.complement(A) for s in B.args)
 
-        result = B._complement(A)
+        result = A._complement(B)
         if result != None:
             return result
         else:
@@ -1933,15 +1933,31 @@ def _intersect(self, other):
     def _complement(self, other):
         if isinstance(other, Interval):
             nums = sorted(m for m in self.args if m.is_number)
-            if other == S.Reals and nums != []:
+            if nums != []:
                 syms = [m for m in self.args if m.is_Symbol]
-                # Reals cannot contain elements other than numbers and symbols.
-
-                intervals = []  # Build up a list of intervals between the elements
-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]
-                for a, b in zip(nums[:-1], nums[1:]):
-                    intervals.append(Interval(a, b, True, True))  # both open
-                intervals.append(Interval(nums[-1], S.Infinity, True, True))
+                # Build up a list of intervals between the elements
+                intervals = []
+                
+                # For general intervals, we need to intersect with the given interval
+                if other == S.Reals:
+                    intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]
+                    for a, b in zip(nums[:-1], nums[1:]):
+                        intervals.append(Interval(a, b, True, True))  # both open
+                    intervals.append(Interval(nums[-1], S.Infinity, True, True))
+                else:
+                    # For finite intervals, we need to consider the boundaries
+                    if nums[0] > other.start:
+                        intervals.append(Interval(other.start, nums[0], other.left_open, True))
+                    for a, b in zip(nums[:-1], nums[1:]):
+                        intervals.append(Interval(a, b, True, True))  # both open
+                    if nums[-1] < other.end:
+                        intervals.append(Interval(nums[-1], other.end, True, other.right_open))
+                
+                # Intersect each interval with the original interval to handle open/closed endpoints
+                intervals = [Interval(max(i.start, other.start), min(i.end, other.end),
+                            i.left_open or (i.start == other.start and other.left_open),
+                            i.right_open or (i.end == other.end and other.right_open))
+                            for i in intervals if i.start < i.end]
 
                 if syms != []:
                     return Complement(Union(intervals, evaluate=False),
@@ -1949,7 +1965,12 @@ def _complement(self, other):
                 else:
                     return Union(intervals, evaluate=False)
             elif nums == []:
-                return None
+                # If there are no numbers, just return the symbols
+                syms = [m for m in self.args if m.is_Symbol]
+                if syms != []:
+                    return FiniteSet(*syms)
+                else:
+                    return None
 
         elif isinstance(other, FiniteSet):
             unk = []
diff --git a/test_correct_complement.py b/test_correct_complement.py
new file mode 100644
index 0000000000..020a858418
--- /dev/null
+++ b/test_correct_complement.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Test the correct complement direction
+x, y = symbols('x y')
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print("a =", a)
+print("b =", b)
+print("a._complement(b) =", a._complement(b))
+print("This should be the correct result for Complement(a, b)")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3fd718144c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Test edge cases for the Complement fix
+x, y = symbols('x y')
+
+print("=== Test Case 1: Original Issue ===")
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+print(f"Complement({a}, {b}) = {result}")
+print()
+
+print("=== Test Case 2: Only symbols ===")
+a2 = FiniteSet(x, y)
+b2 = Interval(-10, 10)
+result2 = Complement(a2, b2)
+print(f"Complement({a2}, {b2}) = {result2}")
+print()
+
+print("=== Test Case 3: Only numbers ===")
+a3 = FiniteSet(1, 2, 3)
+b3 = Interval(-10, 10)
+result3 = Complement(a3, b3)
+print(f"Complement({a3}, {b3}) = {result3}")
+print()
+
+print("=== Test Case 4: Empty interval ===")
+a4 = FiniteSet(x, y, 2)
+b4 = Interval(5, 5)  # Empty interval
+result4 = Complement(a4, b4)
+print(f"Complement({a4}, {b4}) = {result4}")
+print()
+
+print("=== Test Case 5: Infinite interval ===")
+a5 = FiniteSet(x, y, 2)
+b5 = S.Reals
+result5 = Complement(a5, b5)
+print(f"Complement({a5}, {b5}) = {result5}")
\ No newline at end of file
diff --git a/test_main_functionality.py b/test_main_functionality.py
new file mode 100644
index 0000000000..68bcc48909
--- /dev/null
+++ b/test_main_functionality.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, Interval, Complement, symbols, S
+
+# Test the main functionality
+x, y = symbols('x y')
+
+print("=== Original Issue Test ===")
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+result = Complement(a, b)
+print(f"Complement({a}, {b}) = {result}")
+print(f"Expected: {x, y} \\ [-10,10]")
+expected_str = f"{x, y} \\\\ [-10,10]"
+print(f"Match: {str(result) == expected_str}")
+print()
+
+print("=== Only Symbols Test ===")
+a2 = FiniteSet(x, y)
+b2 = Interval(-10, 10)
+result2 = Complement(a2, b2)
+print(f"Complement({a2}, {b2}) = {result2}")
+print(f"Expected: {x, y}")
+print(f"Match: {result2 == a2}")
+print()
+
+print("=== Only Numbers Test ===")
+a3 = FiniteSet(1, 2, 3)
+b3 = Interval(-10, 10)
+result3 = Complement(a3, b3)
+print(f"Complement({a3}, {b3}) = {result3}")
+print(f"Expected: EmptySet()")
+print(f"Match: {result3 == S.EmptySet}")
+print()
+
+print("=== Infinite Interval Test ===")
+a5 = FiniteSet(x, y, 2)
+b5 = S.Reals
+result5 = Complement(a5, b5)
+print(f"Complement({a5}, {b5}) = {result5}")
+print(f"Expected: Union(Interval.open(-oo, 2), Interval.open(2, oo)) \\ {x, y}")
+print()
\ No newline at end of file
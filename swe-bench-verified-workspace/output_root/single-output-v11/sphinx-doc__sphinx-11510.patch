diff --git a/conf.py b/conf.py
new file mode 100644
index 000000000..de4440537
--- /dev/null
+++ b/conf.py
@@ -0,0 +1,8 @@
+import sys
+import os
+
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = [
+        'my-extension'
+]
diff --git a/index.rst b/index.rst
new file mode 100644
index 000000000..f2dec1395
--- /dev/null
+++ b/index.rst
@@ -0,0 +1,6 @@
+This is a test
+==============
+
+.. include:: something-to-include.rst
+
+&REPLACE_ME;
diff --git a/my-extension.py b/my-extension.py
new file mode 100644
index 000000000..b5c5c1e7b
--- /dev/null
+++ b/my-extension.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sphinx.application import Sphinx
+
+
+__version__ = '1.0'
+
+
+def subst_vars_replace(app: Sphinx, docname, source):
+    result = source[0]
+    result = result.replace("&REPLACE_ME;", "REPLACED")
+    source[0] = result
+
+
+def setup(app: Sphinx):
+
+    app.connect('source-read', subst_vars_replace)
+
+    return dict(
+        version=__version__,
+        parallel_read_safe=True,
+        parallel_write_safe=True
+    )
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..f2dc82eec
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+def create_test_files():
+    """Create the test files described in the GitHub issue"""
+    
+    # Create conf.py
+    conf_content = '''import sys
+import os
+
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = [
+        'my-extension'
+]
+'''
+    with open('conf.py', 'w') as f:
+        f.write(conf_content)
+    
+    # Create index.rst
+    index_content = '''This is a test
+==============
+
+.. include:: something-to-include.rst
+
+&REPLACE_ME;
+'''
+    with open('index.rst', 'w') as f:
+        f.write(index_content)
+    
+    # Create something-to-include.rst
+    include_content = '''Testing
+=======
+
+&REPLACE_ME;
+'''
+    with open('something-to-include.rst', 'w') as f:
+        f.write(include_content)
+    
+    # Create my-extension.py
+    extension_content = '''#!/usr/bin/env python3
+
+from sphinx.application import Sphinx
+
+
+__version__ = '1.0'
+
+
+def subst_vars_replace(app: Sphinx, docname, source):
+    result = source[0]
+    result = result.replace("&REPLACE_ME;", "REPLACED")
+    source[0] = result
+
+
+def setup(app: Sphinx):
+
+    app.connect('source-read', subst_vars_replace)
+
+    return dict(
+        version=__version__,
+        parallel_read_safe=True,
+        parallel_write_safe=True
+    )
+'''
+    with open('my-extension.py', 'w') as f:
+        f.write(extension_content)
+
+def run_sphinx_build():
+    """Run sphinx-build and check the output"""
+    # Run sphinx-build
+    os.system('sphinx-build . build')
+    
+    # Check if REPLACE_ME exists in HTML files
+    result = os.system('grep -Rq REPLACE_ME build/*.html')
+    if result == 0:
+        print("BAD: REPLACE_ME found in HTML files")
+        return False
+    else:
+        print("GOOD: REPLACE_ME not found in HTML files")
+        return True
+
+def main():
+    # Create test files
+    create_test_files()
+    
+    # Run sphinx build
+    success = run_sphinx_build()
+    
+    if not success:
+        print("Issue reproduced successfully!")
+        # Show the content of the HTML file to verify the issue
+        os.system('grep -n "REPLACE_ME\|REPLACED" build/index.html')
+    else:
+        print("Issue not reproduced - might already be fixed")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/something-to-include.rst b/something-to-include.rst
new file mode 100644
index 000000000..e63253568
--- /dev/null
+++ b/something-to-include.rst
@@ -0,0 +1,4 @@
+Testing
+=======
+
+&REPLACE_ME;
diff --git a/tox.ini b/tox.ini
index a3dc56211..c76147de3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
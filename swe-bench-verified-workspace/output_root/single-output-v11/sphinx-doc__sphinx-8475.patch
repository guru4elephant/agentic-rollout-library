diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..f0c03cda9
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""
+Final test to demonstrate the fix for TooManyRedirects issue.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from requests.exceptions import TooManyRedirects, HTTPError
+
+def demonstrate_fix():
+    """Demonstrate that the fix handles TooManyRedirects correctly"""
+    
+    print("=== Testing the fix for TooManyRedirects issue ===")
+    print()
+    
+    # Simulate the original issue: HEAD request raises TooManyRedirects
+    print("1. Simulating HEAD request that raises TooManyRedirects...")
+    try:
+        # This would previously cause the link to be marked as broken
+        raise TooManyRedirects("Too many redirects")
+    except HTTPError:
+        # This was the original behavior - only HTTPError was caught
+        print("   OLD: Only HTTPError caught - would fall back to GET")
+    except TooManyRedirects:
+        # This is the new behavior - TooManyRedirects is caught
+        print("   NEW: TooManyRedirects caught - would fall back to GET")
+    except Exception as e:
+        print(f"   ERROR: Unexpected exception: {e}")
+    
+    print()
+    
+    # Test the fixed exception handling
+    print("2. Testing the fixed exception handling...")
+    try:
+        raise TooManyRedirects("Too many redirects")
+    except (HTTPError, TooManyRedirects):
+        print("   ✓ Both HTTPError and TooManyRedirects are caught!")
+        print("   ✓ Will fall back to GET request")
+    except Exception as e:
+        print(f"   ✗ Unexpected exception: {e}")
+    
+    print()
+    print("=== Fix Summary ===")
+    print("✓ Added 'TooManyRedirects' to the import statement")
+    print("✓ Modified except clause to catch both HTTPError and TooManyRedirects")
+    print("✓ Updated comment to reflect the new behavior")
+    print("✓ URLs with infinite redirect loops in HEAD requests will now fall back to GET")
+    print("✓ This fixes the issue where links like https://idr.openmicroscopy.org/webclient/?show=well-119093")
+    print("  were incorrectly marked as broken")
+
+if __name__ == "__main__":
+    demonstrate_fix()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..19a099b20
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,91 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the TooManyRedirects issue with linkchecker.
+"""
+
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+from sphinx.builders.linkcheck import CheckExternalLinksBuilder
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+from unittest.mock import Mock
+from requests.exceptions import TooManyRedirects
+
+# Create a minimal mock application for testing
+def test_too_many_redirects():
+    """Test that TooManyRedirects exception triggers GET fallback"""
+    
+    # Mock the necessary components
+    app = Mock()
+    app.config = Mock()
+    app.config.linkcheck_ignore = []
+    app.config.linkcheck_anchors_ignore = []
+    app.config.linkcheck_auth = []
+    app.config.linkcheck_workers = 1
+    app.config.linkcheck_timeout = None
+    app.config.linkcheck_request_headers = {}
+    app.config.linkcheck_anchors = True
+    
+    # Create builder instance
+    builder = CheckExternalLinksBuilder(app)
+    builder.outdir = '/tmp/linkcheck_test'
+    os.makedirs(builder.outdir, exist_ok=True)
+    builder.init()
+    
+    # Test the check_uri function directly
+    # We'll simulate a HEAD request that raises TooManyRedirects
+    # and should fall back to GET
+    
+    # Mock the requests module to raise TooManyRedirects on HEAD
+    original_head = None
+    original_get = None
+    
+    def mock_head_raises_too_many_redirects(*args, **kwargs):
+        raise TooManyRedirects("Too many redirects")
+    
+    def mock_get_succeeds(*args, **kwargs):
+        # Create a mock successful response
+        response = Mock()
+        response.url = "https://example.com/final"
+        response.status_code = 200
+        response.history = []
+        return response
+    
+    try:
+        # Replace the requests methods temporarily
+        import sphinx.util.requests as sphinx_requests
+        original_head = sphinx_requests.head
+        original_get = sphinx_requests.get
+        sphinx_requests.head = mock_head_raises_too_many_redirects
+        sphinx_requests.get = mock_get_succeeds
+        
+        # Test the check_uri function
+        uri = "https://example.com"
+        result = builder.check_uri(uri)
+        print(f"Result for {uri}: {result}")
+        
+    except TooManyRedirects as e:
+        print(f"ERROR: TooManyRedirects was not handled properly: {e}")
+        return False
+    except Exception as e:
+        print(f"ERROR: Unexpected exception: {e}")
+        return False
+    finally:
+        # Restore original methods
+        if original_head:
+            sphinx_requests.head = original_head
+        if original_get:
+            sphinx_requests.get = original_get
+    
+    return True
+
+if __name__ == "__main__":
+    print("Testing TooManyRedirects handling in linkchecker...")
+    success = test_too_many_redirects()
+    if success:
+        print("Test completed successfully!")
+    else:
+        print("Test failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index ca08a6d4a..21cb67b8f 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 000000000..96dde3eba
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+"""
+Simple script to reproduce the TooManyRedirects issue.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from requests.exceptions import TooManyRedirects, HTTPError
+
+# Simulate the current linkcheck logic
+def simulate_current_linkcheck():
+    """Simulate the current linkcheck logic"""
+    try:
+        # This simulates the HEAD request that raises TooManyRedirects
+        print("Simulating HEAD request that raises TooManyRedirects...")
+        raise TooManyRedirects("Too many redirects")
+        
+    except HTTPError:
+        print("HTTPError caught - would fall back to GET")
+        # This is the current fallback logic
+        print("Simulating GET request...")
+        return "working"
+    except Exception as err:
+        print(f"Exception caught: {type(err).__name__} - {err}")
+        print("This would return 'broken' status")
+        return "broken"
+
+if __name__ == "__main__":
+    print("Testing current linkcheck behavior with TooManyRedirects...")
+    result = simulate_current_linkcheck()
+    print(f"Result: {result}")
+    
+    if result == "broken":
+        print("ISSUE CONFIRMED: TooManyRedirects causes link to be marked as broken")
+        print("This should fall back to GET request instead")
+    else:
+        print("Issue not reproduced")
\ No newline at end of file
diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 1dc0337c3..99afca45c 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -20,7 +20,7 @@ from urllib.parse import unquote, urlparse
 
 from docutils import nodes
 from docutils.nodes import Node
-from requests.exceptions import HTTPError
+from requests.exceptions import HTTPError, TooManyRedirects
 
 from sphinx.application import Sphinx
 from sphinx.builders import Builder
@@ -172,9 +172,9 @@ class CheckExternalLinksBuilder(Builder):
                                                  config=self.app.config, auth=auth_info,
                                                  **kwargs)
                         response.raise_for_status()
-                    except HTTPError:
+                    except (HTTPError, TooManyRedirects):
                         # retry with GET request if that fails, some servers
-                        # don't like HEAD requests.
+                        # don't like HEAD requests or have too many redirects with HEAD.
                         response = requests.get(req_url, stream=True, config=self.app.config,
                                                 auth=auth_info, **kwargs)
                         response.raise_for_status()
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..6964ef61e
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the TooManyRedirects fix.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from requests.exceptions import TooManyRedirects, HTTPError
+
+# Simulate the fixed linkcheck logic
+def simulate_fixed_linkcheck():
+    """Simulate the fixed linkcheck logic"""
+    try:
+        # This simulates the HEAD request that raises TooManyRedirects
+        print("Simulating HEAD request that raises TooManyRedirects...")
+        raise TooManyRedirects("Too many redirects")
+        
+    except (HTTPError, TooManyRedirects):
+        print("HTTPError or TooManyRedirects caught - will fall back to GET")
+        # This is the fixed fallback logic
+        print("Simulating GET request...")
+        return "working"
+    except Exception as err:
+        print(f"Unexpected exception caught: {type(err).__name__} - {err}")
+        return "broken"
+
+if __name__ == "__main__":
+    print("Testing fixed linkcheck behavior with TooManyRedirects...")
+    result = simulate_fixed_linkcheck()
+    print(f"Result: {result}")
+    
+    if result == "working":
+        print("SUCCESS: TooManyRedirects now triggers GET fallback!")
+    else:
+        print("FAILED: Issue not fixed")
\ No newline at end of file
diff --git a/test_simple_redirects.py b/test_simple_redirects.py
new file mode 100644
index 000000000..be114b73a
--- /dev/null
+++ b/test_simple_redirects.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify TooManyRedirects handling
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from requests.exceptions import TooManyRedirects, HTTPError
+
+def test_exception_handling():
+    """Test that both HTTPError and TooManyRedirects are caught"""
+    
+    # Test 1: HTTPError should be caught
+    try:
+        raise HTTPError("HTTP Error")
+    except (HTTPError, TooManyRedirects):
+        print("✓ HTTPError correctly caught")
+    except Exception:
+        print("✗ HTTPError not caught properly")
+    
+    # Test 2: TooManyRedirects should be caught  
+    try:
+        raise TooManyRedirects("Too many redirects")
+    except (HTTPError, TooManyRedirects):
+        print("✓ TooManyRedirects correctly caught")
+    except Exception:
+        print("✗ TooManyRedirects not caught properly")
+    
+    # Test 3: Other exceptions should not be caught
+    try:
+        raise ValueError("Some other error")
+    except (HTTPError, TooManyRedirects):
+        print("✗ ValueError incorrectly caught")
+    except ValueError:
+        print("✓ ValueError correctly not caught by our except clause")
+
+if __name__ == "__main__":
+    print("Testing exception handling logic...")
+    test_exception_handling()
+    print("Test completed!")
\ No newline at end of file
diff --git a/test_too_many_redirects.py b/test_too_many_redirects.py
new file mode 100644
index 000000000..b270d22cb
--- /dev/null
+++ b/test_too_many_redirects.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Test script to specifically test the TooManyRedirects fix.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from unittest.mock import Mock, patch
+from requests.exceptions import TooManyRedirects
+from sphinx.builders.linkcheck import CheckExternalLinksBuilder
+
+def test_too_many_redirects_fallback():
+    """Test that TooManyRedirects triggers GET fallback"""
+    
+    # Mock the application and config
+    app = Mock()
+    app.config = Mock()
+    app.config.linkcheck_ignore = []
+    app.config.linkcheck_anchors_ignore = []
+    app.config.linkcheck_auth = []
+    app.config.linkcheck_workers = 1
+    app.config.linkcheck_timeout = None
+    app.config.linkcheck_request_headers = {}
+    app.config.linkcheck_anchors = False
+    
+    # Create builder instance with minimal setup
+    builder = CheckExternalLinksBuilder(app)
+    builder.outdir = '/tmp/linkcheck_test'
+    builder.good = set()
+    builder.broken = {}
+    builder.redirected = {}
+    
+    # Mock the requests.head to raise TooManyRedirects
+    # and requests.get to return a successful response
+    def mock_head(*args, **kwargs):
+        raise TooManyRedirects("Too many redirects")
+    
+    def mock_get(*args, **kwargs):
+        response = Mock()
+        response.url = "https://example.com/final"
+        response.status_code = 200
+        response.history = []
+        return response
+    
+    # Patch the requests methods
+    with patch('sphinx.util.requests.head', mock_head), \
+         patch('sphinx.util.requests.get', mock_get):
+        
+        # Test the check_uri function
+        result = builder.check_uri("https://example.com")
+        print(f"Result: {result}")
+        
+        # Should return 'working' status since GET succeeds
+        assert result[0] == 'working', f"Expected 'working', got {result[0]}"
+        print("SUCCESS: TooManyRedirects correctly triggers GET fallback!")
+
+if __name__ == "__main__":
+    print("Testing TooManyRedirects fallback mechanism...")
+    test_too_many_redirects_fallback()
+    print("Test completed successfully!")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
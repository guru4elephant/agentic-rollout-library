diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..88c9ca9f28 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,8 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..55366009f1
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value, CharField
+from django.core.exceptions import ValidationError
+
+def final_test():
+    print("Final comprehensive test...")
+    
+    # Test 1: Original issue - Value with string should not have MaxLengthValidator
+    print("\n1. Original issue test:")
+    x = Value('test')
+    y = x._resolve_output_field()
+    print(f"   Validators count: {len(y.validators)}")
+    print(f"   Validators: {y.validators}")
+    print(f"   Max length: {y.max_length}")
+    
+    # Test 2: Performance improvement
+    print("\n2. Performance test:")
+    import timeit
+    time = timeit.timeit(lambda: x._resolve_output_field(), number=10000)
+    print(f"   Time per call: {time/10000 * 1e6:.2f} µs")
+    
+    # Test 3: Normal CharField with max_length should still work
+    print("\n3. Normal CharField with max_length:")
+    cf = CharField(max_length=100)
+    print(f"   Validators count: {len(cf.validators)}")
+    print(f"   Validator type: {type(cf.validators[0]) if cf.validators else 'None'}")
+    
+    # Test 4: CharField without max_length should not have validators
+    print("\n4. CharField without max_length:")
+    cf_no_max = CharField()
+    print(f"   Validators count: {len(cf_no_max.validators)}")
+    
+    # Test 5: Edge case - CharField with max_length=None explicitly
+    print("\n5. CharField with explicit max_length=None:")
+    cf_explicit_none = CharField(max_length=None)
+    print(f"   Validators count: {len(cf_explicit_none.validators)}")
+    
+    # Test 6: Verify clean method works for all cases
+    print("\n6. Clean method tests:")
+    try:
+        result = y.clean('hello', model_instance=None)
+        print(f"   Value field clean: '{result}'")
+    except Exception as e:
+        print(f"   Value field error: {e}")
+    
+    try:
+        result = cf.clean('hello', model_instance=None)
+        print(f"   Normal CharField clean: '{result}'")
+    except Exception as e:
+        print(f"   Normal CharField error: {e}")
+    
+    try:
+        result = cf_no_max.clean('hello', model_instance=None)
+        print(f"   No max_length CharField clean: '{result}'")
+    except Exception as e:
+        print(f"   No max_length CharField error: {e}")
+    
+    print("\nAll tests completed successfully!")
+
+if __name__ == "__main__":
+    final_test()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..940392aa92
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value
+
+def test_issue():
+    print("Testing the issue with Value._resolve_output_field()...")
+    
+    # Create a Value instance with a string
+    x = Value('test')
+    
+    # Call _resolve_output_field to get the CharField
+    y = x._resolve_output_field()
+    
+    print(f"CharField validators: {y.validators}")
+    print(f"CharField max_length: {y.max_length}")
+    
+    # Try to clean a value with the field
+    try:
+        result = y.clean('1', model_instance=None)
+        print(f"Clean result: {result}")
+    except Exception as e:
+        print(f"Error during clean: {e}")
+        print(f"Error type: {type(e)}")
+    
+    # Test timing
+    import timeit
+    time = timeit.timeit(lambda: x._resolve_output_field(), number=10000)
+    print(f"Time for 10000 calls: {time:.4f} seconds")
+    print(f"Time per call: {time/10000 * 1e6:.2f} µs")
+
+if __name__ == "__main__":
+    test_issue()
\ No newline at end of file
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..6a48ae37b3
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import CharField
+
+def test_basic_charfield():
+    print("Testing basic CharField functionality...")
+    
+    # Test 1: CharField with max_length
+    print("\n1. CharField with max_length:")
+    cf1 = CharField(max_length=100)
+    print(f"   max_length: {cf1.max_length}")
+    print(f"   validators: {len(cf1.validators)} validators")
+    if cf1.validators:
+        print(f"   validator type: {type(cf1.validators[0])}")
+    
+    # Test 2: CharField without max_length
+    print("\n2. CharField without max_length:")
+    cf2 = CharField()
+    print(f"   max_length: {cf2.max_length}")
+    print(f"   validators: {len(cf2.validators)} validators")
+    
+    # Test 3: Check that validators work correctly
+    print("\n3. Testing validator functionality:")
+    try:
+        result = cf1.clean("test_string", model_instance=None)
+        print(f"   Validator passed: {result}")
+    except Exception as e:
+        print(f"   Validator error: {e}")
+    
+    try:
+        result = cf2.clean("test_string", model_instance=None)
+        print(f"   No validator passed: {result}")
+    except Exception as e:
+        print(f"   No validator error: {e}")
+    
+    print("\nAll tests passed!")
+
+if __name__ == "__main__":
+    test_basic_charfield()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..b144dde32d
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value, CharField
+from django.core import validators
+
+def test_comprehensive():
+    print("Testing comprehensive CharField behavior...")
+    
+    # Test 1: Value with string (the original issue)
+    print("\n1. Testing Value with string:")
+    x = Value('test')
+    y = x._resolve_output_field()
+    print(f"   Validators: {y.validators}")
+    print(f"   Max length: {y.max_length}")
+    try:
+        result = y.clean('1', model_instance=None)
+        print(f"   Clean result: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 2: Normal CharField with max_length
+    print("\n2. Testing normal CharField with max_length:")
+    char_field = CharField(max_length=100)
+    print(f"   Validators: {char_field.validators}")
+    print(f"   Max length: {char_field.max_length}")
+    try:
+        result = char_field.clean('test', model_instance=None)
+        print(f"   Clean result: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 3: CharField without max_length (should not have validator)
+    print("\n3. Testing CharField without max_length:")
+    char_field_no_max = CharField()
+    print(f"   Validators: {char_field_no_max.validators}")
+    print(f"   Max length: {char_field_no_max.max_length}")
+    try:
+        result = char_field_no_max.clean('test', model_instance=None)
+        print(f"   Clean result: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 4: Verify validator types
+    print("\n4. Validator types:")
+    if char_field.validators:
+        print(f"   With max_length validator type: {type(char_field.validators[0])}")
+    if char_field_no_max.validators:
+        print(f"   Without max_length validators: {char_field_no_max.validators}")
+    else:
+        print(f"   Without max_length: No validators")
+    
+    # Test 5: Performance comparison
+    print("\n5. Performance test:")
+    import timeit
+    time_value = timeit.timeit(lambda: Value('test')._resolve_output_field(), number=10000)
+    print(f"   Value._resolve_output_field() time: {time_value/10000 * 1e6:.2f} µs")
+    
+    time_charfield = timeit.timeit(lambda: CharField(), number=10000)
+    print(f"   CharField() instantiation time: {time_charfield/10000 * 1e6:.2f} µs")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..489020f3b8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value, CharField
+from django.core.exceptions import ValidationError
+
+def test_edge_cases():
+    print("Testing edge cases...")
+    
+    # Test 1: Value with empty string
+    print("\n1. Value with empty string:")
+    x = Value('')
+    y = x._resolve_output_field()
+    print(f"   Validators: {len(y.validators)}")
+    try:
+        result = y.clean('', model_instance=None)
+        print(f"   Clean result: '{result}'")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 2: Value with long string
+    print("\n2. Value with long string:")
+    x = Value('a' * 1000)
+    y = x._resolve_output_field()
+    print(f"   Validators: {len(y.validators)}")
+    try:
+        result = y.clean('test', model_instance=None)
+        print(f"   Clean result: '{result}'")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 3: CharField with max_length=0 (edge case)
+    print("\n3. CharField with max_length=0:")
+    try:
+        cf = CharField(max_length=0)
+        print(f"   Validators: {len(cf.validators)}")
+    except Exception as e:
+        print(f"   Error creating CharField: {e}")
+    
+    # Test 4: CharField with explicit max_length=None
+    print("\n4. CharField with explicit max_length=None:")
+    cf = CharField(max_length=None)
+    print(f"   max_length: {cf.max_length}")
+    print(f"   validators: {len(cf.validators)}")
+    
+    # Test 5: Performance comparison with different string lengths
+    print("\n5. Performance comparison:")
+    import timeit
+    
+    short_str = Value('a')
+    long_str = Value('a' * 1000)
+    
+    time_short = timeit.timeit(lambda: short_str._resolve_output_field(), number=10000)
+    time_long = timeit.timeit(lambda: long_str._resolve_output_field(), number=10000)
+    
+    print(f"   Short string time: {time_short/10000 * 1e6:.2f} µs")
+    print(f"   Long string time: {time_long/10000 * 1e6:.2f} µs")
+    
+    print("\nAll edge case tests completed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
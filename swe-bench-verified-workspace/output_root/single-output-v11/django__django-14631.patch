diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..ca65c7ec2b 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -1,6 +1,7 @@
 import datetime
 import re
 
+from django.core.exceptions import ValidationError
 from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
@@ -219,6 +220,27 @@ class BoundField:
             data = data.replace(microsecond=0)
         return data
 
+    def _did_change(self):
+        """
+        Return whether the field's data differs from initial.
+        """
+        if self.field.show_hidden_initial:
+            # Special handling for hidden initial fields
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                # Always assume data has changed if validation fails.
+                return True
+        else:
+            initial_value = self.initial
+        
+        data_value = self.form._field_data_value(self.field, self.html_name)
+        return self.field.has_changed(initial_value, data_value)
+
     def build_widget_attrs(self, attrs, widget=None):
         widget = widget or self.field.widget
         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..06b7313d75 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -147,6 +147,11 @@ class BaseForm:
         for name in self.fields:
             yield self[name]
 
+    def _bound_items(self):
+        """Return an iterator of (name, BoundField) pairs."""
+        for name in self.fields:
+            yield name, self[name]
+
     def __getitem__(self, name):
         """Return a BoundField with the given name."""
         try:
@@ -388,13 +393,14 @@ class BaseForm:
 
     def _clean_fields(self):
         for name, field in self.fields.items():
+            bf = self[name]
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial
             else:
                 value = self._field_data_value(field, self.add_prefix(name))
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
+                    initial = bf.initial
                     value = field.clean(value, initial)
                 else:
                     value = field.clean(value)
@@ -436,27 +442,7 @@ class BaseForm:
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name, bf in self._bound_items() if bf._did_change()]
 
     @property
     def media(self):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2bc1c92f11
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,110 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+import django
+from django.conf import settings
+settings.configure(USE_I18N=False)
+django.setup()
+
+from django import forms
+from datetime import datetime
+
+class TestForm(forms.Form):
+    date_field = forms.DateTimeField()
+    
+    def clean_date_field(self):
+        # Custom cleaning method
+        return self.cleaned_data['date_field']
+
+def test_clean_fields_consistency():
+    """Test that _clean_fields() and BoundField.initial return consistent values"""
+    
+    # Create a form with a callable initial value
+    initial_date = datetime(2023, 1, 1, 12, 0, 0)
+    form = TestForm(initial={'date_field': lambda: initial_date})
+    
+    print("Testing _clean_fields() vs BoundField.initial consistency")
+    print(f"Form initial: {form.initial}")
+    
+    # Access via BoundField
+    bound_field_initial = form['date_field'].initial
+    print(f"BoundField initial: {bound_field_initial}")
+    
+    # Access via _clean_fields logic (simulated)
+    field = form.fields['date_field']
+    simulated_initial = form.get_initial_for_field(field, 'date_field')
+    print(f"Simulated _clean_fields initial: {simulated_initial}")
+    
+    # Check if they match
+    if bound_field_initial == simulated_initial:
+        print("✓ Values are consistent")
+        return True
+    else:
+        print("✗ Values are inconsistent!")
+        print(f"  BoundField: {bound_field_initial}")
+        print(f"  Simulated: {simulated_initial}")
+        return False
+
+def test_changed_data_via_boundfield():
+    """Test that changed_data can be implemented via BoundField"""
+    
+    form = TestForm(data={'date_field': '2023-01-01 12:00:00'}, 
+                   initial={'date_field': datetime(2023, 1, 1, 12, 0, 0)})
+    
+    print("\nTesting changed_data implementation")
+    print(f"Form is bound: {form.is_bound}")
+    print(f"Form data: {form.data}")
+    
+    # Current changed_data implementation
+    current_changed = form.changed_data
+    print(f"Current changed_data: {current_changed}")
+    
+    # Simulate proposed BoundField-based implementation
+    proposed_changed = []
+    for name in form.fields:
+        bf = form[name]
+        # Simulate bf._did_change() method
+        field = form.fields[name]
+        data_value = form._field_data_value(field, form.add_prefix(name))
+        
+        if not field.show_hidden_initial:
+            initial_value = bf.initial
+        else:
+            initial_prefixed_name = form.add_initial_prefix(name)
+            hidden_widget = field.hidden_widget()
+            try:
+                initial_value = field.to_python(
+                    form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                proposed_changed.append(name)
+                continue
+        
+        if field.has_changed(initial_value, data_value):
+            proposed_changed.append(name)
+    
+    print(f"Proposed changed_data: {proposed_changed}")
+    
+    if current_changed == proposed_changed:
+        print("✓ changed_data implementations match")
+        return True
+    else:
+        print("✗ changed_data implementations differ!")
+        return False
+
+if __name__ == "__main__":
+    from django.core.exceptions import ValidationError
+    
+    print("=" * 50)
+    success1 = test_clean_fields_consistency()
+    success2 = test_changed_data_via_boundfield()
+    
+    print("=" * 50)
+    if success1 and success2:
+        print("All tests passed!")
+    else:
+        print("Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_disabled_field.py b/test_disabled_field.py
new file mode 100644
index 0000000000..df44fa1935
--- /dev/null
+++ b/test_disabled_field.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+import django
+from django.conf import settings
+settings.configure(USE_I18N=False)
+django.setup()
+
+from django import forms
+from datetime import datetime
+
+def test_disabled_field_with_callable_initial():
+    """Test the specific scenario from test_datetime_clean_initial_callable_disabled"""
+    
+    now = datetime(2006, 10, 25, 14, 30, 45, 123456)
+    
+    class DateTimeForm(forms.Form):
+        dt = forms.DateTimeField(initial=lambda: now, disabled=True)
+    
+    form = DateTimeForm({})
+    
+    print("Testing disabled field with callable initial")
+    print(f"Form errors: {form.errors}")
+    print(f"Form cleaned_data: {form.cleaned_data}")
+    
+    # The key issue: _clean_fields() now uses BoundField.initial for consistency
+    print(f"BoundField initial: {form['dt'].initial}")
+    
+    # Since _clean_fields() now uses BoundField.initial, they should be consistent
+    bound_field_initial = form['dt'].initial
+    
+    # Check if _clean_fields() would use the same value
+    # (The form.cleaned_data shows the result of _clean_fields())
+    cleaned_data_value = form.cleaned_data['dt']
+    print(f"Cleaned data value: {cleaned_data_value}")
+    
+    # Check if they are consistent
+    if bound_field_initial == cleaned_data_value:
+        print("✓ Values are consistent")
+        return True
+    else:
+        print("✗ Values are inconsistent!")
+        print(f"  BoundField: {form['dt'].initial}")
+        print(f"  Simulated: {simulated_initial}")
+        return False
+
+if __name__ == "__main__":
+    print("=" * 50)
+    success = test_disabled_field_with_callable_initial()
+    
+    print("=" * 50)
+    if success:
+        print("Test passed!")
+    else:
+        print("Test failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_specific_issue.py b/test_specific_issue.py
new file mode 100644
index 0000000000..990848c1a8
--- /dev/null
+++ b/test_specific_issue.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+import django
+from django.conf import settings
+settings.configure(USE_I18N=False)
+django.setup()
+
+from django import forms
+from datetime import datetime
+
+class TestForm(forms.Form):
+    date_field = forms.DateTimeField()
+
+def test_clean_fields_vs_boundfield():
+    """Test the specific issue mentioned in GitHub issue"""
+    
+    # Create a form with a callable initial value
+    def dynamic_initial():
+        return datetime(2023, 1, 1, 12, 0, 0)
+    
+    form = TestForm(initial={'date_field': dynamic_initial})
+    
+    print("Testing _clean_fields() vs BoundField.initial with callable initial")
+    
+    # Access via BoundField - this should call the callable
+    bound_field_initial_1 = form['date_field'].initial
+    print(f"BoundField initial (first call): {bound_field_initial_1}")
+    
+    # Access via BoundField again - should be cached and return same value
+    bound_field_initial_2 = form['date_field'].initial
+    print(f"BoundField initial (second call): {bound_field_initial_2}")
+    
+    # Access via _clean_fields logic (simulated)
+    field = form.fields['date_field']
+    simulated_initial = form.get_initial_for_field(field, 'date_field')
+    print(f"Simulated _clean_fields initial: {simulated_initial}")
+    
+    # The issue: BoundField uses cached_property while _clean_fields doesn't
+    # This means they might get different values if the callable returns different values
+    
+    if bound_field_initial_1 == bound_field_initial_2 == simulated_initial:
+        print("✓ Values are consistent")
+        return True
+    else:
+        print("✗ Values are inconsistent!")
+        print(f"  BoundField first: {bound_field_initial_1}")
+        print(f"  BoundField second: {bound_field_initial_2}")
+        print(f"  Simulated: {simulated_initial}")
+        return False
+
+if __name__ == "__main__":
+    print("=" * 50)
+    success = test_clean_fields_vs_boundfield()
+    
+    print("=" * 50)
+    if success:
+        print("Test passed!")
+    else:
+        print("Test failed!")
+        sys.exit(1)
\ No newline at end of file
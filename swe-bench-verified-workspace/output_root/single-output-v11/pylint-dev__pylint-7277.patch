diff --git a/pylint/__init__.py b/pylint/__init__.py
index 9f3dd74e6..ca146b1b0 100644
--- a/pylint/__init__.py
+++ b/pylint/__init__.py
@@ -86,7 +86,7 @@ def modify_sys_path() -> None:
     stdlib or pylint's own modules.
     CPython issue: https://bugs.python.org/issue33053
 
-    - Remove the first entry. This will always be either "" or the working directory
+    - Remove the first entry if it is "", "." or the current working directory
     - Remove the working directory from the second and third entries
       if PYTHONPATH includes a ":" at the beginning or the end.
       https://github.com/PyCQA/pylint/issues/3636
@@ -96,9 +96,10 @@ def modify_sys_path() -> None:
       if pylint is installed in an editable configuration (as the last item).
       https://github.com/PyCQA/pylint/issues/4161
     """
-    sys.path.pop(0)
-    env_pythonpath = os.environ.get("PYTHONPATH", "")
     cwd = os.getcwd()
+    if sys.path and sys.path[0] in ("", ".", cwd):
+        sys.path.pop(0)
+    env_pythonpath = os.environ.get("PYTHONPATH", "")
     if env_pythonpath.startswith(":") and env_pythonpath not in (f":{cwd}", ":."):
         sys.path.pop(0)
     elif env_pythonpath.endswith(":") and env_pythonpath not in (f"{cwd}:", ".:"):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..591712b48
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+import sys
+import runpy
+
+# Add a custom path to sys.path (simulating what the pylint extension does)
+sys.path.insert(0, "/some/custom/path")
+print(f"sys.path before runpy: {sys.path}")
+
+try:
+    # Run pylint using runpy (this should trigger the issue)
+    runpy.run_module('pylint', run_name="__main__", alter_sys=True)
+except SystemExit as e:
+    print(f"Pylint exited with code: {e.code}")
+except Exception as e:
+    print(f"Error occurred: {e}")
+    import traceback
+    traceback.print_exc()
+
+print(f"sys.path after runpy: {sys.path}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..189415f1f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,47 @@
+import sys
+import runpy
+import os
+
+def test_case(name, initial_path):
+    """Test a specific case"""
+    print(f"\n=== Testing {name} ===")
+    # Save original sys.path
+    original_path = sys.path.copy()
+    
+    # Set up the test case
+    sys.path = initial_path.copy()
+    print(f"sys.path before: {sys.path}")
+    
+    try:
+        # Run pylint using runpy
+        runpy.run_module('pylint', run_name="__main__", alter_sys=True)
+    except SystemExit as e:
+        print(f"Pylint exited with code: {e.code}")
+    except Exception as e:
+        print(f"Error occurred: {e}")
+    
+    print(f"sys.path after: {sys.path}")
+    
+    # Restore original sys.path
+    sys.path = original_path
+
+# Test case 1: First item is "" (empty string)
+test_case("Empty string first", ["", "/testbed", "/workspace"])
+
+# Test case 2: First item is "."
+test_case("Dot first", [".", "/testbed", "/workspace"])
+
+# Test case 3: First item is current working directory
+test_case("CWD first", [os.getcwd(), "/testbed", "/workspace"])
+
+# Test case 4: First item is custom path (should NOT be removed)
+test_case("Custom path first", ["/some/custom/path", "/testbed", "/workspace"])
+
+# Test case 5: Empty sys.path
+test_case("Empty sys.path", [])
+
+# Test case 6: Single item that should be removed
+test_case("Single item to remove", [os.getcwd()])
+
+# Test case 7: Single item that should NOT be removed
+test_case("Single item to keep", ["/some/custom/path"])
\ No newline at end of file
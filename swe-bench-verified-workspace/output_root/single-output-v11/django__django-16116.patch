diff --git a/django/contrib/auth/migrations/0013_auto_20251008_0923.py b/django/contrib/auth/migrations/0013_auto_20251008_0923.py
new file mode 100644
index 0000000000..975a45b6f2
--- /dev/null
+++ b/django/contrib/auth/migrations/0013_auto_20251008_0923.py
@@ -0,0 +1,12 @@
+# Generated by Django 4.2.dev20220928072610 on 2025-10-08 09:23
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("auth", "0012_alter_user_first_name_max_length"),
+    ]
+
+    operations = []
diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 2e97d9064b..f257e947ba 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -248,12 +248,12 @@ class Command(BaseCommand):
                 else:
                     self.log("No changes detected")
         else:
+            if check_changes:
+                sys.exit(1)
             if self.update:
                 self.write_to_last_migration_files(changes)
             else:
                 self.write_migration_files(changes)
-            if check_changes:
-                sys.exit(1)
 
     def write_to_last_migration_files(self, changes):
         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6acbb2e61d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,118 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the makemigrations --check inconsistency issue.
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from django.core.management import execute_from_command_line
+
+def test_makemigrations_check():
+    """Test that makemigrations --check behaves consistently with other commands"""
+    
+    # Create a temporary directory for our test project
+    temp_dir = tempfile.mkdtemp()
+    print(f"Created temporary directory: {temp_dir}")
+    
+    try:
+        # Create a simple Django project structure
+        os.makedirs(os.path.join(temp_dir, 'test_project'))
+        os.makedirs(os.path.join(temp_dir, 'test_app'))
+        
+        # Create settings.py
+        settings_content = '''
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = ['test_app']
+SECRET_KEY = 'test-key'
+'''
+        with open(os.path.join(temp_dir, 'test_project', 'settings.py'), 'w') as f:
+            f.write(settings_content)
+        
+        # Create __init__.py files
+        with open(os.path.join(temp_dir, 'test_project', '__init__.py'), 'w') as f:
+            f.write('')
+        with open(os.path.join(temp_dir, 'test_app', '__init__.py'), 'w') as f:
+            f.write('')
+        
+        # Create models.py with a simple model
+        models_content = '''
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+'''
+        with open(os.path.join(temp_dir, 'test_app', 'models.py'), 'w') as f:
+            f.write(models_content)
+        
+        # Create apps.py
+        apps_content = '''
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'test_app'
+'''
+        with open(os.path.join(temp_dir, 'test_app', 'apps.py'), 'w') as f:
+            f.write(apps_content)
+        
+        # Change to the temporary directory
+        original_cwd = os.getcwd()
+        os.chdir(temp_dir)
+        
+        # Set Django settings module
+        os.environ['DJANGO_SETTINGS_MODULE'] = 'test_project.settings'
+        
+        print("Testing makemigrations --check behavior...")
+        
+        # First run: should exit with 0 (no changes needed)
+        print("\n1. Running makemigrations --check (no changes expected):")
+        try:
+            execute_from_command_line(['manage.py', 'makemigrations', '--check'])
+            print("Exit code: 0 (no changes needed)")
+        except SystemExit as e:
+            print(f"Exit code: {e.code}")
+        
+        # Make a change to the model
+        models_content_updated = '''
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    new_field = models.IntegerField(default=0)
+'''
+        with open(os.path.join(temp_dir, 'test_app', 'models.py'), 'w') as f:
+            f.write(models_content_updated)
+        
+        # Second run: should exit with 1 (changes needed)
+        print("\n2. Running makemigrations --check (changes expected):")
+        try:
+            execute_from_command_line(['manage.py', 'makemigrations', '--check'])
+            print("Exit code: 0 (no changes needed)")
+        except SystemExit as e:
+            print(f"Exit code: {e.code}")
+        
+        # Check if migration files were created (they shouldn't be with --check)
+        migrations_dir = os.path.join(temp_dir, 'test_app', 'migrations')
+        if os.path.exists(migrations_dir):
+            migration_files = os.listdir(migrations_dir)
+            print(f"\nMigration files created: {len(migration_files)}")
+            for file in migration_files:
+                print(f"  - {file}")
+        else:
+            print("\nNo migrations directory created (correct behavior)")
+        
+    finally:
+        # Clean up
+        os.chdir(original_cwd)
+        shutil.rmtree(temp_dir)
+        print(f"\nCleaned up temporary directory: {temp_dir}")
+
+if __name__ == '__main__':
+    test_makemigrations_check()
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..d459de7fa7
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+"""
+Simple script to reproduce the makemigrations --check inconsistency issue.
+"""
+
+import os
+import sys
+import subprocess
+
+def test_makemigrations_check():
+    """Test that makemigrations --check behaves consistently with other commands"""
+    
+    print("Testing makemigrations --check behavior...")
+    
+    # First run: should exit with 0 (no changes needed)
+    print("\n1. Running makemigrations --check (no changes expected):")
+    try:
+        result = subprocess.run([
+            sys.executable, '-m', 'django', 'makemigrations', 
+            '--check', '--dry-run'
+        ], capture_output=True, text=True, cwd='/testbed')
+        print(f"Exit code: {result.returncode}")
+        if result.stdout:
+            print(f"Stdout: {result.stdout}")
+        if result.stderr:
+            print(f"Stderr: {result.stderr}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Second run: without dry-run to see if files are created
+    print("\n2. Running makemigrations --check without dry-run:")
+    try:
+        result = subprocess.run([
+            sys.executable, '-m', 'django', 'makemigrations', 
+            '--check'
+        ], capture_output=True, text=True, cwd='/testbed')
+        print(f"Exit code: {result.returncode}")
+        if result.stdout:
+            print(f"Stdout: {result.stdout}")
+        if result.stderr:
+            print(f"Stderr: {result.stderr}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Check if any migration files were created in test apps
+    print("\n3. Checking if migration files were created:")
+    for app_name in ['auth', 'contenttypes']:  # Common Django apps
+        migrations_dir = f'/testbed/django/contrib/{app_name}/migrations'
+        if os.path.exists(migrations_dir):
+            files = os.listdir(migrations_dir)
+            print(f"{app_name}: {len(files)} migration files")
+        else:
+            print(f"{app_name}: no migrations directory")
+
+if __name__ == '__main__':
+    test_makemigrations_check()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..0228567165
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,98 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test script to verify the makemigrations --check fix.
+"""
+
+import os
+import tempfile
+import shutil
+from django.core.management import call_command
+from django.conf import settings
+from django.apps import apps
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-key-for-testing',
+    )
+
+def test_makemigrations_check_comprehensive():
+    """Comprehensive test for makemigrations --check behavior"""
+    
+    # Initialize Django
+    apps.populate(settings.INSTALLED_APPS)
+    
+    print("Testing makemigrations --check comprehensive behavior...")
+    
+    # Create a temporary directory to monitor for file creation
+    temp_dir = tempfile.mkdtemp()
+    original_cwd = os.getcwd()
+    
+    try:
+        os.chdir(temp_dir)
+        print(f"Working in temporary directory: {temp_dir}")
+        
+        # Test 1: Run makemigrations --check with no changes (should exit 0)
+        print("\n1. Testing makemigrations --check with no changes...")
+        exit_status_1 = None
+        try:
+            call_command("makemigrations", "--check", verbosity=0)
+            exit_status_1 = 0
+            print("✓ No SystemExit raised (exit status 0)")
+        except SystemExit as e:
+            exit_status_1 = e.code
+            print(f"✗ Unexpected SystemExit with code {e.code}")
+        
+        # Test 2: Check that no migration files were created
+        print("\n2. Checking that no migration files were created...")
+        files_created = os.listdir(temp_dir)
+        if files_created:
+            print(f"✗ Files were created: {files_created}")
+            return False
+        else:
+            print("✓ No files created (correct behavior)")
+        
+        # Test 3: Compare with migrate --check behavior (should be similar)
+        print("\n3. Testing migrate --check for comparison...")
+        exit_status_2 = None
+        try:
+            call_command("migrate", "--check", verbosity=0)
+            exit_status_2 = 0
+            print("✓ No SystemExit raised (exit status 0)")
+        except SystemExit as e:
+            exit_status_2 = e.code
+            print(f"✓ SystemExit with code {e.code} (expected for unapplied migrations)")
+        
+        print(f"\nComparison:")
+        print(f"  makemigrations --check exit status: {exit_status_1}")
+        print(f"  migrate --check exit status: {exit_status_2}")
+        
+        # Both should behave similarly (either both exit 0 or both exit 1)
+        if exit_status_1 == exit_status_2:
+            print("✓ Both commands behave consistently")
+            return True
+        else:
+            print("✗ Commands behave inconsistently")
+            return False
+        
+    except Exception as e:
+        print(f"✗ Error during test: {e}")
+        return False
+    finally:
+        os.chdir(original_cwd)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    success = test_makemigrations_check_comprehensive()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..a70f876f26
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the makemigrations --check fix.
+"""
+
+import os
+import tempfile
+import shutil
+from django.core.management import call_command
+from django.conf import settings
+from django.apps import apps
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-key-for-testing',
+    )
+
+def test_makemigrations_check_fix():
+    """Test that makemigrations --check no longer creates files"""
+    
+    # Initialize Django
+    apps.populate(settings.INSTALLED_APPS)
+    
+    print("Testing makemigrations --check fix...")
+    
+    # Create a temporary directory to monitor for file creation
+    temp_dir = tempfile.mkdtemp()
+    original_cwd = os.getcwd()
+    
+    try:
+        os.chdir(temp_dir)
+        print(f"Working in temporary directory: {temp_dir}")
+        
+        # Test 1: Run makemigrations --check and see if it exits properly
+        print("\n1. Testing makemigrations --check with no changes...")
+        try:
+            call_command("makemigrations", "--check", verbosity=0)
+            print("✓ No SystemExit raised (no changes needed)")
+        except SystemExit as e:
+            print(f"✗ Unexpected SystemExit with code {e.code}")
+            return False
+        
+        # Test 2: Check that no migration files were created
+        print("\n2. Checking that no migration files were created...")
+        files_created = os.listdir(temp_dir)
+        if files_created:
+            print(f"✗ Files were created: {files_created}")
+            return False
+        else:
+            print("✓ No files created (correct behavior)")
+        
+        print("\n✓ Fix appears to be working correctly!")
+        return True
+        
+    except Exception as e:
+        print(f"✗ Error during test: {e}")
+        return False
+    finally:
+        os.chdir(original_cwd)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    success = test_makemigrations_check_fix()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_simple.py b/test_simple.py
new file mode 100644
index 0000000000..57535b810c
--- /dev/null
+++ b/test_simple.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+"""
+Simple test script to verify the makemigrations --check fix.
+"""
+
+import os
+import tempfile
+import shutil
+from django.core.management import call_command
+from django.conf import settings
+from django.apps import apps
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-key-for-testing',
+    )
+
+def test_makemigrations_check_simple():
+    """Simple test for makemigrations --check behavior"""
+    
+    # Initialize Django
+    apps.populate(settings.INSTALLED_APPS)
+    
+    print("Testing makemigrations --check behavior...")
+    
+    # Create a temporary directory to monitor for file creation
+    temp_dir = tempfile.mkdtemp()
+    original_cwd = os.getcwd()
+    
+    try:
+        os.chdir(temp_dir)
+        print(f"Working in temporary directory: {temp_dir}")
+        
+        # Test 1: Run makemigrations --check (should not create files)
+        print("\n1. Running makemigrations --check...")
+        exit_status = None
+        try:
+            call_command("makemigrations", "--check", verbosity=0)
+            exit_status = 0
+            print("✓ No SystemExit raised (no changes needed)")
+        except SystemExit as e:
+            exit_status = e.code
+            print(f"✓ SystemExit with code {e.code} (changes needed)")
+        
+        # Test 2: Check that no migration files were created
+        print("\n2. Checking that no migration files were created...")
+        files_created = os.listdir(temp_dir)
+        if files_created:
+            print(f"✗ Files were created: {files_created}")
+            return False
+        else:
+            print("✓ No files created (correct behavior)")
+        
+        # Test 3: Run without --check to verify it would create files
+        print("\n3. Running makemigrations without --check...")
+        try:
+            call_command("makemigrations", verbosity=0)
+            print("✓ makemigrations completed")
+        except SystemExit as e:
+            print(f"✗ SystemExit with code {e.code}")
+            return False
+        
+        # Check if files were created this time
+        files_created_after = os.listdir(temp_dir)
+        if files_created_after:
+            print(f"✓ Files created without --check: {files_created_after}")
+            return True
+        else:
+            print("✗ No files created even without --check")
+            return False
+        
+    except Exception as e:
+        print(f"✗ Error during test: {e}")
+        return False
+    finally:
+        os.chdir(original_cwd)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    success = test_makemigrations_check_simple()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_with_changes.py b/test_with_changes.py
new file mode 100644
index 0000000000..540bab2c34
--- /dev/null
+++ b/test_with_changes.py
@@ -0,0 +1,121 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the makemigrations --check fix with actual model changes.
+"""
+
+import os
+import tempfile
+import shutil
+from django.core.management import call_command
+from django.conf import settings
+from django.apps import apps
+
+def test_makemigrations_check_with_changes():
+    """Test makemigrations --check behavior when model changes exist"""
+    
+    # Create a temporary app with a model that will be changed
+    temp_dir = tempfile.mkdtemp()
+    original_cwd = os.getcwd()
+    
+    try:
+        os.chdir(temp_dir)
+        
+        # Create a simple Django app structure
+        os.makedirs('test_app')
+        with open('test_app/__init__.py', 'w') as f:
+            f.write('')
+        
+        # Create apps.py
+        apps_content = '''
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'test_app'
+'''
+        with open('test_app/apps.py', 'w') as f:
+            f.write(apps_content)
+        
+        # Create models.py with a simple model
+        models_content = '''
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+'''
+        with open('test_app/models.py', 'w') as f:
+            f.write(models_content)
+        
+        # Configure Django settings
+        settings.configure(
+            DEBUG=True,
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=['test_app'],
+            SECRET_KEY='test-key-for-testing',
+        )
+        
+        # Initialize Django
+        apps.populate(settings.INSTALLED_APPS)
+        
+        print("Testing makemigrations --check with model changes...")
+        
+        # Test 1: Run makemigrations --check with changes (should exit 1)
+        print("\n1. Testing makemigrations --check with model changes...")
+        exit_status_1 = None
+        try:
+            call_command("makemigrations", "--check", "test_app", verbosity=0)
+            exit_status_1 = 0
+            print("✗ No SystemExit raised (should have exited with status 1)")
+        except SystemExit as e:
+            exit_status_1 = e.code
+            print(f"✓ SystemExit with code {e.code} (expected for model changes)")
+        
+        # Test 2: Check that no migration files were created
+        print("\n2. Checking that no migration files were created...")
+        files_created = []
+        migrations_dir = os.path.join(temp_dir, 'test_app', 'migrations')
+        if os.path.exists(migrations_dir):
+            files_created = os.listdir(migrations_dir)
+        
+        if files_created:
+            print(f"✗ Files were created: {files_created}")
+            return False
+        else:
+            print("✓ No files created (correct behavior)")
+        
+        # Test 3: Run without --check to verify changes are actually detected
+        print("\n3. Verifying changes are detected without --check...")
+        try:
+            call_command("makemigrations", "test_app", verbosity=0)
+            print("✓ Changes detected and migration created")
+        except Exception as e:
+            print(f"✗ Error creating migration: {e}")
+            return False
+        
+        # Check that migration files were created this time
+        files_created_after = []
+        if os.path.exists(migrations_dir):
+            files_created_after = os.listdir(migrations_dir)
+        
+        if files_created_after:
+            print(f"✓ Migration files created: {files_created_after}")
+            return exit_status_1 == 1  # Should have exited with 1 earlier
+        else:
+            print("✗ No migration files created (should have been created)")
+            return False
+        
+    except Exception as e:
+        print(f"✗ Error during test: {e}")
+        return False
+    finally:
+        os.chdir(original_cwd)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    success = test_makemigrations_check_with_changes()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928aa..3effaa7533 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -99,6 +99,7 @@ class Aggregate(Func):
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
     name = 'Avg'
+    allow_distinct = True
 
 
 class Count(Aggregate):
@@ -121,11 +122,13 @@ class Count(Aggregate):
 class Max(Aggregate):
     function = 'MAX'
     name = 'Max'
+    allow_distinct = True
 
 
 class Min(Aggregate):
     function = 'MIN'
     name = 'Min'
+    allow_distinct = True
 
 
 class StdDev(NumericOutputFieldMixin, Aggregate):
@@ -142,6 +145,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):
 class Sum(FixDurationInputMixin, Aggregate):
     function = 'SUM'
     name = 'Sum'
+    allow_distinct = True
 
 
 class Variance(NumericOutputFieldMixin, Aggregate):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..67ba8078b3
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,108 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test for DISTINCT support in aggregates.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Avg, Sum, Count, Min, Max
+from django.db.models import F
+
+def test_aggregate_distinct():
+    """Test DISTINCT support for all aggregates."""
+    
+    print("=== Testing DISTINCT Support for Aggregates ===")
+    
+    # Test all aggregates with distinct=True
+    aggregates = [
+        ('Avg', Avg),
+        ('Sum', Sum), 
+        ('Min', Min),
+        ('Max', Max),
+        ('Count', Count)
+    ]
+    
+    for name, agg_class in aggregates:
+        try:
+            # Test distinct=True
+            agg_distinct = agg_class(F('test_field'), distinct=True)
+            print(f"✓ {name} with distinct=True created successfully")
+            
+            # Test distinct=False
+            agg_normal = agg_class(F('test_field'), distinct=False)
+            print(f"✓ {name} with distinct=False created successfully")
+            
+            # Test default (distinct=False)
+            agg_default = agg_class(F('test_field'))
+            print(f"✓ {name} with default distinct created successfully")
+            
+            # Verify attributes
+            assert agg_distinct.distinct == True, f"{name} distinct should be True"
+            assert agg_normal.distinct == False, f"{name} normal distinct should be False"
+            assert agg_default.distinct == False, f"{name} default distinct should be False"
+            assert agg_distinct.allow_distinct == True, f"{name} should allow distinct"
+            
+        except Exception as e:
+            print(f"✗ {name} test failed: {e}")
+            return False
+    
+    print("\n=== Testing Edge Cases ===")
+    
+    # Test that distinct parameter is properly validated
+    try:
+        # This should work (all aggregates now allow distinct)
+        for agg_class in [Avg, Sum, Min, Max, Count]:
+            agg = agg_class(F('test_field'), distinct=True)
+        
+        print("✓ All aggregates accept distinct=True parameter")
+        
+    except Exception as e:
+        print(f"✗ Distinct parameter validation failed: {e}")
+        return False
+    
+    # Test that the template context is set correctly
+    try:
+        avg_distinct = Avg(F('test_field'), distinct=True)
+        avg_normal = Avg(F('test_field'), distinct=False)
+        
+        # Simulate the as_sql context setting
+        distinct_context = 'DISTINCT ' if avg_distinct.distinct else ''
+        normal_context = 'DISTINCT ' if avg_normal.distinct else ''
+        
+        assert distinct_context == 'DISTINCT ', "Distinct context should be 'DISTINCT '"
+        assert normal_context == '', "Normal context should be empty"
+        
+        print("✓ Template context setup correctly")
+        
+    except Exception as e:
+        print(f"✗ Template context test failed: {e}")
+        return False
+    
+    print("\n=== All Tests Passed! ===")
+    return True
+
+if __name__ == "__main__":
+    success = test_aggregate_distinct()
+    if not success:
+        exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7dbb843b4d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the DISTINCT support issue for Avg and Sum aggregates.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Avg, Sum, Count, Min, Max
+
+# Test the DISTINCT parameter validation (no database operations needed)
+print("Testing DISTINCT parameter validation...")
+
+# Test that we can create aggregates with distinct=True without raising TypeError
+try:
+    avg_distinct = Avg('value', distinct=True)
+    print("✓ Avg with distinct=True created successfully")
+except Exception as e:
+    print("✗ Avg with distinct=True failed:", e)
+
+try:
+    sum_distinct = Sum('value', distinct=True)
+    print("✓ Sum with distinct=True created successfully")
+except Exception as e:
+    print("✗ Sum with distinct=True failed:", e)
+
+try:
+    min_distinct = Min('value', distinct=True)
+    print("✓ Min with distinct=True created successfully")
+except Exception as e:
+    print("✗ Min with distinct=True failed:", e)
+
+try:
+    max_distinct = Max('value', distinct=True)
+    print("✓ Max with distinct=True created successfully")
+except Exception as e:
+    print("✗ Max with distinct=True failed:", e)
+
+try:
+    count_distinct = Count('value', distinct=True)
+    print("✓ Count with distinct=True created successfully")
+except Exception as e:
+    print("✗ Count with distinct=True failed:", e)
+
+# Test that distinct=False still works
+try:
+    avg_normal = Avg('value', distinct=False)
+    print("✓ Avg with distinct=False created successfully")
+except Exception as e:
+    print("✗ Avg with distinct=False failed:", e)
+
+# Test that the distinct attribute is set correctly
+print("\nTesting distinct attribute values:")
+print(f"Avg distinct: {avg_distinct.distinct}")
+print(f"Sum distinct: {sum_distinct.distinct}")
+print(f"Min distinct: {min_distinct.distinct}")
+print(f"Max distinct: {max_distinct.distinct}")
+print(f"Count distinct: {count_distinct.distinct}")
+print(f"Avg normal distinct: {avg_normal.distinct}")
+
+# Test that allow_distinct attribute is set correctly
+print("\nTesting allow_distinct attribute values:")
+print(f"Avg allow_distinct: {avg_distinct.allow_distinct}")
+print(f"Sum allow_distinct: {sum_distinct.allow_distinct}")
+print(f"Min allow_distinct: {min_distinct.allow_distinct}")
+print(f"Max allow_distinct: {max_distinct.allow_distinct}")
+print(f"Count allow_distinct: {count_distinct.allow_distinct}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..1cd8a596c6
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+"""
+Simple test for DISTINCT support in aggregates.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Avg, Sum, Count, Min, Max
+from django.db.models import F
+
+print("Testing basic DISTINCT functionality...")
+
+# Test that we can create aggregates with distinct=True
+try:
+    avg_distinct = Avg(F('value'), distinct=True)
+    print("✓ Avg with distinct=True created successfully")
+except Exception as e:
+    print("✗ Avg with distinct=True failed:", e)
+
+try:
+    sum_distinct = Sum(F('value'), distinct=True)
+    print("✓ Sum with distinct=True created successfully")
+except Exception as e:
+    print("✗ Sum with distinct=True failed:", e)
+
+try:
+    min_distinct = Min(F('value'), distinct=True)
+    print("✓ Min with distinct=True created successfully")
+except Exception as e:
+    print("✗ Min with distinct=True failed:", e)
+
+try:
+    max_distinct = Max(F('value'), distinct=True)
+    print("✓ Max with distinct=True created successfully")
+except Exception as e:
+    print("✗ Max with distinct=True failed:", e)
+
+try:
+    count_distinct = Count(F('value'), distinct=True)
+    print("✓ Count with distinct=True created successfully")
+except Exception as e:
+    print("✗ Count with distinct=True failed:", e)
+
+# Test that distinct=False still works
+try:
+    avg_normal = Avg(F('value'), distinct=False)
+    print("✓ Avg with distinct=False created successfully")
+except Exception as e:
+    print("✗ Avg with distinct=False failed:", e)
+
+# Test default behavior (distinct=False)
+try:
+    avg_default = Avg(F('value'))
+    print("✓ Avg with default distinct created successfully")
+    print(f"  Default distinct value: {avg_default.distinct}")
+except Exception as e:
+    print("✗ Avg with default distinct failed:", e)
+
+# Test that the distinct attribute is set correctly
+print("\nTesting distinct attribute values:")
+print(f"Avg distinct: {avg_distinct.distinct}")
+print(f"Sum distinct: {sum_distinct.distinct}")
+print(f"Min distinct: {min_distinct.distinct}")
+print(f"Max distinct: {max_distinct.distinct}")
+print(f"Count distinct: {count_distinct.distinct}")
+print(f"Avg normal distinct: {avg_normal.distinct}")
+print(f"Avg default distinct: {avg_default.distinct}")
+
+# Test that allow_distinct attribute is set correctly
+print("\nTesting allow_distinct attribute values:")
+print(f"Avg allow_distinct: {avg_distinct.allow_distinct}")
+print(f"Sum allow_distinct: {sum_distinct.allow_distinct}")
+print(f"Min allow_distinct: {min_distinct.allow_distinct}")
+print(f"Max allow_distinct: {max_distinct.allow_distinct}")
+print(f"Count allow_distinct: {count_distinct.allow_distinct}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..625c6f85eb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for DISTINCT support in aggregates.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Avg, Sum, Count, Min, Max
+
+print("Testing edge cases...")
+
+# Test 1: Default behavior (distinct=False)
+try:
+    avg_default = Avg('value')
+    print("✓ Avg with default distinct created successfully")
+    print(f"  Default distinct value: {avg_default.distinct}")
+except Exception as e:
+    print("✗ Avg with default distinct failed:", e)
+
+# Test 2: Explicit distinct=False
+try:
+    sum_false = Sum('value', distinct=False)
+    print("✓ Sum with distinct=False created successfully")
+    print(f"  Explicit distinct=False value: {sum_false.distinct}")
+except Exception as e:
+    print("✗ Sum with distinct=False failed:", e)
+
+# Test 3: Verify template rendering includes distinct
+from django.db.models.sql.compiler import SQLCompiler
+from django.db import connection
+
+# Create a simple compiler for testing
+from django.db.models.sql.query import Query
+query = Query(None)
+compiler = query.get_compiler(using='default')
+
+try:
+    avg_distinct = Avg('value', distinct=True)
+    sql, params = avg_distinct.as_sql(compiler, connection)
+    print("✓ Avg SQL generation with distinct works")
+    print(f"  SQL: {sql}")
+    print(f"  Params: {params}")
+except Exception as e:
+    print("✗ Avg SQL generation with distinct failed:", e)
+
+try:
+    sum_distinct = Sum('value', distinct=True)
+    sql, params = sum_distinct.as_sql(compiler, connection)
+    print("✓ Sum SQL generation with distinct works")
+    print(f"  SQL: {sql}")
+    print(f"  Params: {params}")
+except Exception as e:
+    print("✗ Sum SQL generation with distinct failed:", e)
+
+# Test 4: Verify normal aggregates still work
+try:
+    avg_normal = Avg('value', distinct=False)
+    sql, params = avg_normal.as_sql(compiler, connection)
+    print("✓ Avg SQL generation without distinct works")
+    print(f"  SQL: {sql}")
+    print(f"  Params: {params}")
+except Exception as e:
+    print("✗ Avg SQL generation without distinct failed:", e)
\ No newline at end of file
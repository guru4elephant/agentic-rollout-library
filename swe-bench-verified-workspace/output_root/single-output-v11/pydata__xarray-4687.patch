diff --git a/debug_comparison.py b/debug_comparison.py
new file mode 100644
index 00000000..3969ad68
--- /dev/null
+++ b/debug_comparison.py
@@ -0,0 +1,25 @@
+import numpy as np
+import xarray as xr
+
+# Test what happens during comparison operations
+print("=== Debug comparison operations ===")
+data = xr.DataArray(np.ones([10,10], dtype=np.int8))
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+
+print("Original attributes:", data.attrs)
+
+# Create a comparison
+comparison = data == 1
+print("Comparison type:", type(comparison))
+print("Comparison attributes:", comparison.attrs)
+
+# Check if the comparison has any reference to the original data
+print("Has _variable:", hasattr(comparison, '_variable'))
+if hasattr(comparison, '_variable'):
+    print("Variable attributes:", getattr(comparison._variable, '_attrs', {}))
+    
+# Check if the comparison has any other references
+print("Has _data:", hasattr(comparison, '_data'))
+print("Has _name:", hasattr(comparison, '_name'))
+print("Has _attrs:", hasattr(comparison, '_attrs'))
\ No newline at end of file
diff --git a/debug_condition.py b/debug_condition.py
new file mode 100644
index 00000000..c52269ed
--- /dev/null
+++ b/debug_condition.py
@@ -0,0 +1,27 @@
+import numpy as np
+import xarray as xr
+
+# Test case 1: Original issue
+print("=== Test case 1: Original issue ===")
+data = xr.DataArray(np.ones([10,10], dtype=np.int8))
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+
+print("Original attributes:", data.attrs)
+print("Original dtype:", data.dtype)
+
+# Create condition
+cond = data == 1
+print("Condition type:", type(cond))
+print("Condition attributes:", cond.attrs)
+print("Has _name:", hasattr(cond, '_name'))
+print("Has _attrs:", hasattr(cond, '_attrs'))
+print("Has _variable:", hasattr(cond, '_variable'))
+
+if hasattr(cond, '_variable'):
+    print("Variable attributes:", getattr(cond._variable, '_attrs', {}))
+    print("Variable type:", type(cond._variable))
+    
+    # Check if variable has original data reference
+    if hasattr(cond._variable, '_data'):
+        print("Variable data type:", type(cond._variable._data))
\ No newline at end of file
diff --git a/debug_names.py b/debug_names.py
new file mode 100644
index 00000000..02c9d43b
--- /dev/null
+++ b/debug_names.py
@@ -0,0 +1,31 @@
+import numpy as np
+import xarray as xr
+
+# Test case 1: Original issue
+print("=== Test case 1: Original issue ===")
+data = xr.DataArray(np.ones([10,10], dtype=np.int8))
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+
+print("Original name:", getattr(data, '_name', 'No name'))
+print("Original attributes:", data.attrs)
+
+# Create condition
+cond = data == 1
+print("Condition name:", getattr(cond, '_name', 'No name'))
+print("Condition attributes:", cond.attrs)
+
+# Test case 2: Simpler case
+print("\n=== Test case 2: Simpler case ===")
+da = xr.DataArray(1)
+da.attrs['foo'] = 'bar'
+print("Original name:", getattr(da, '_name', 'No name'))
+print("Original attributes:", da.attrs)
+
+cond2 = da == 0
+print("Condition name:", getattr(cond2, '_name', 'No name'))
+print("Condition attributes:", cond2.attrs)
+
+y2 = da
+print("Y name:", getattr(y2, '_name', 'No name'))
+print("Y attributes:", y2.attrs)
\ No newline at end of file
diff --git a/debug_where.py b/debug_where.py
new file mode 100644
index 00000000..d245379d
--- /dev/null
+++ b/debug_where.py
@@ -0,0 +1,44 @@
+import numpy as np
+import xarray as xr
+
+# Test case 1: Original issue
+print("=== Test case 1: Original issue ===")
+data = xr.DataArray(np.ones([10,10], dtype=np.int8))
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+
+print("Original attributes:", data.attrs)
+print("Original dtype:", data.dtype)
+
+# Let's see what arguments are passed to where
+cond = data == 1
+x = 5
+y = 0
+
+print("Condition type:", type(cond))
+print("Condition attributes:", getattr(cond, 'attrs', 'No attrs'))
+print("X type:", type(x))
+print("Y type:", type(y))
+
+data2 = xr.where(cond, x, y)
+print("After xr.where attributes:", data2.attrs)
+print("After xr.where dtype:", data2.dtype)
+
+# Test case 2: Simpler case from second issue
+print("\n=== Test case 2: Simpler case ===")
+da = xr.DataArray(1)
+da.attrs['foo'] = 'bar'
+print("Original attributes:", da.attrs)
+
+cond2 = da == 0
+x2 = -1
+y2 = da
+
+print("Condition type:", type(cond2))
+print("Condition attributes:", getattr(cond2, 'attrs', 'No attrs'))
+print("X type:", type(x2))
+print("Y type:", type(y2))
+print("Y attributes:", getattr(y2, 'attrs', 'No attrs'))
+
+result = xr.where(cond2, x2, y2)
+print("After xr.where attributes:", result.attrs)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..061e5873
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+import numpy as np
+import xarray as xr
+
+# Test case 1: Original issue
+print("=== Test case 1: Original issue ===")
+data = xr.DataArray(np.ones([10,10], dtype=np.int8))
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+
+print("Original attributes:", data.attrs)
+print("Original dtype:", data.dtype)
+
+data2 = xr.where(data == 1, 5, 0)
+print("After xr.where attributes:", data2.attrs)
+print("After xr.where dtype:", data2.dtype)
+
+# Test case 2: Simpler case from second issue
+print("\n=== Test case 2: Simpler case ===")
+da = xr.DataArray(1)
+da.attrs['foo'] = 'bar'
+print("Original attributes:", da.attrs)
+
+result = xr.where(da==0, -1, da)
+print("After xr.where attributes:", result.attrs)
\ No newline at end of file
diff --git a/test_dataarray_where.py b/test_dataarray_where.py
new file mode 100644
index 00000000..d4828d01
--- /dev/null
+++ b/test_dataarray_where.py
@@ -0,0 +1,25 @@
+import numpy as np
+import xarray as xr
+
+# Test DataArray.where method
+print("=== Test DataArray.where method ===")
+data = xr.DataArray(np.ones([10,10], dtype=np.int8))
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+
+print("Original attributes:", data.attrs)
+print("Original dtype:", data.dtype)
+
+# Use DataArray.where method
+data2 = data.where(data == 1, 5)
+print("After data.where attributes:", data2.attrs)
+print("After data.where dtype:", data2.dtype)
+
+# Test case 2: Simpler case
+print("\n=== Test case 2: DataArray.where ===")
+da = xr.DataArray(1)
+da.attrs['foo'] = 'bar'
+print("Original attributes:", da.attrs)
+
+result = da.where(da==0, -1)
+print("After da.where attributes:", result.attrs)
\ No newline at end of file
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 9fe93c88..e224a08b 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1809,7 +1809,7 @@ def where(cond, x, y):
         equivalent methods
     """
     # alignment for three arguments is complicated, so don't support it yet
-    return apply_ufunc(
+    result = apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
@@ -1817,7 +1817,18 @@ def where(cond, x, y):
         join="exact",
         dataset_join="exact",
         dask="allowed",
+        keep_attrs=False,  # We'll handle attributes manually
     )
+    
+    # Preserve attributes from the first DataArray argument that has them
+    # This follows the same logic as DataArray.where method
+    from .dataarray import DataArray
+    for arg in [x, y, cond]:
+        if isinstance(arg, DataArray) and arg.attrs:
+            result.attrs = dict(arg.attrs)
+            break
+    
+    return result
 
 
 def polyval(coord, coeffs, degree_dim="degree"):
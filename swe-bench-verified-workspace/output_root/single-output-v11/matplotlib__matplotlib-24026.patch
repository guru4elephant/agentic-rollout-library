diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py
index c580043eeb..f1ee64f8fa 100644
--- a/lib/matplotlib/stackplot.py
+++ b/lib/matplotlib/stackplot.py
@@ -6,6 +6,7 @@ https://stackoverflow.com/q/2225995/
 (https://stackoverflow.com/users/66549/doug)
 """
 
+import itertools
 import numpy as np
 
 from matplotlib import _api
@@ -69,8 +70,11 @@ def stackplot(axes, x, *args,
     y = np.row_stack(args)
 
     labels = iter(labels)
+    # Create an iterator for colors if provided, otherwise use default cycle
     if colors is not None:
-        axes.set_prop_cycle(color=colors)
+        color_iter = itertools.cycle(colors)
+    else:
+        color_iter = None
 
     # Assume data passed has not been 'stacked', so stack it here.
     # We'll need a float buffer for the upcoming calculations.
@@ -108,7 +112,10 @@ def stackplot(axes, x, *args,
         stack += first_line
 
     # Color between x = 0 and the first array.
-    color = axes._get_lines.get_next_color()
+    if color_iter is not None:
+        color = next(color_iter)
+    else:
+        color = axes._get_lines.get_next_color()
     coll = axes.fill_between(x, first_line, stack[0, :],
                              facecolor=color, label=next(labels, None),
                              **kwargs)
@@ -117,7 +124,10 @@ def stackplot(axes, x, *args,
 
     # Color between array i-1 and array i
     for i in range(len(y) - 1):
-        color = axes._get_lines.get_next_color()
+        if color_iter is not None:
+            color = next(color_iter)
+        else:
+            color = axes._get_lines.get_next_color()
         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],
                                    facecolor=color, label=next(labels, None),
                                    **kwargs))
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..46cd489f2e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,10 @@
+import matplotlib.pyplot as plt
+from matplotlib.patches import Rectangle
+import numpy
+
+my_data = numpy.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+fig, ax = plt.subplots()
+ax.plot([1, 3], [1, 3], color='C0')
+ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])
+plt.show()
\ No newline at end of file
diff --git a/synchronized_colors_test.png b/synchronized_colors_test.png
new file mode 100644
index 0000000000..b9391c35db
Binary files /dev/null and b/synchronized_colors_test.png differ
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..cb11cc1470
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Test 1: Original issue - using cycle references
+print("Test 1: Using cycle references")
+fig, ax = plt.subplots()
+my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])
+plt.close()
+
+# Test 2: Regular color names
+print("Test 2: Using regular color names")
+fig, ax = plt.subplots()
+ax.stackplot([1, 2, 3], my_data, colors=['red', 'green', 'blue'])
+plt.close()
+
+# Test 3: Hex colors
+print("Test 3: Using hex colors")
+fig, ax = plt.subplots()
+ax.stackplot([1, 2, 3], my_data, colors=['#FF0000', '#00FF00', '#0000FF'])
+plt.close()
+
+# Test 4: No colors specified (should use default cycle)
+print("Test 4: No colors specified")
+fig, ax = plt.subplots()
+ax.stackplot([1, 2, 3], my_data)
+plt.close()
+
+# Test 5: Mixed color formats
+print("Test 5: Mixed color formats")
+fig, ax = plt.subplots()
+ax.stackplot([1, 2, 3], my_data, colors=['C0', 'red', '#00FF00'])
+plt.close()
+
+# Test 6: More data series than colors (should cycle through colors)
+print("Test 6: More data series than colors")
+fig, ax = plt.subplots()
+my_more_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2], [2, 3, 4]])
+ax.stackplot([1, 2, 3], my_more_data, colors=['C0', 'C1'])
+plt.close()
+
+print("All tests passed!")
\ No newline at end of file
diff --git a/test_synchronized_colors.py b/test_synchronized_colors.py
new file mode 100644
index 0000000000..3bba556355
--- /dev/null
+++ b/test_synchronized_colors.py
@@ -0,0 +1,31 @@
+import matplotlib.pyplot as plt
+from matplotlib.patches import Rectangle
+import numpy as np
+
+# Test the original use case from the issue
+# User wants to keep colors synchronized across plot types
+fig, ax = plt.subplots()
+
+# Create some test data
+x = [1, 2, 3]
+my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+# Use C0 for the first plot
+ax.plot([1, 3], [1, 3], color='C0', label='Line (C0)')
+
+# Use C1 for the rectangle
+ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1', label='Rectangle (C1)'))
+
+# Use C2, C3, C4 for the stackplot - this should work now!
+stack = ax.stackplot(x, my_data, colors=['C2', 'C3', 'C4'])
+
+# Add labels to stackplot
+for i, coll in enumerate(stack):
+    coll.set_label(f'Stack {i} (C{i+2})')
+
+ax.legend()
+plt.title('Synchronized colors across plot types')
+plt.savefig('synchronized_colors_test.png', dpi=100, bbox_inches='tight')
+plt.close()
+
+print("Test completed successfully! Colors are synchronized across plot types.")
\ No newline at end of file
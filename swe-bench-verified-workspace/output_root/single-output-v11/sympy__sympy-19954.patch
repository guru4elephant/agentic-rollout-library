diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..edebd6439b
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,31 @@
+from sympy.combinatorics import DihedralGroup, SymmetricGroup, CyclicGroup, AlternatingGroup
+
+# Test various groups and primes that might trigger the minimal_blocks logic
+test_cases = [
+    # Original issue cases
+    (DihedralGroup(18), 2),
+    (DihedralGroup(2*25), 2),
+    
+    # Additional cases that might stress the minimal_blocks logic
+    (DihedralGroup(12), 2),
+    (DihedralGroup(12), 3),
+    (DihedralGroup(20), 2),
+    (DihedralGroup(20), 5),
+    (SymmetricGroup(5), 2),
+    (SymmetricGroup(5), 5),
+    (AlternatingGroup(5), 2),
+    (AlternatingGroup(5), 5),
+    (CyclicGroup(30), 2),
+    (CyclicGroup(30), 3),
+    (CyclicGroup(30), 5),
+]
+
+print("Running comprehensive tests...")
+for i, (group, prime) in enumerate(test_cases):
+    try:
+        sylow = group.sylow_subgroup(p=prime)
+        print(f"Test {i+1}: PASS - {group} with p={prime} -> Sylow order: {sylow.order()}")
+    except Exception as e:
+        print(f"Test {i+1}: FAIL - {group} with p={prime} -> {e}")
+
+print("\nAll comprehensive tests completed!")
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..5557796fab
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,35 @@
+from sympy.combinatorics import DihedralGroup, CyclicGroup
+
+# Test both original issue cases
+print("Testing original issue cases:")
+try:
+    G = DihedralGroup(18)
+    S2 = G.sylow_subgroup(p=2)
+    print(f"✓ DihedralGroup(18) with p=2: Sylow order = {S2.order()}")
+except Exception as e:
+    print(f"✗ DihedralGroup(18) with p=2: {e}")
+
+try:
+    G = DihedralGroup(2*25)
+    S2 = G.sylow_subgroup(p=2)
+    print(f"✓ DihedralGroup(50) with p=2: Sylow order = {S2.order()}")
+except Exception as e:
+    print(f"✗ DihedralGroup(50) with p=2: {e}")
+
+# Test cases that might trigger the _p_elements_group function
+print("\nTesting _p_elements_group cases:")
+try:
+    G = CyclicGroup(4)
+    sylow = G.sylow_subgroup(p=2)
+    print(f"✓ CyclicGroup(4) with p=2: Sylow order = {sylow.order()}")
+except Exception as e:
+    print(f"✗ CyclicGroup(4) with p=2: {e}")
+
+try:
+    G = CyclicGroup(9)
+    sylow = G.sylow_subgroup(p=3)
+    print(f"✓ CyclicGroup(9) with p=3: Sylow order = {sylow.order()}")
+except Exception as e:
+    print(f"✗ CyclicGroup(9) with p=3: {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8ef0673846
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,7 @@
+from sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation
+
+G = DihedralGroup(18)
+
+S2 = G.sylow_subgroup(p=2)
+
+print("Test completed successfully!")
\ No newline at end of file
diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..8697a9d8e2 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2194,18 +2194,21 @@ def _number_blocks(blocks):
                 # check if the system is minimal with
                 # respect to the already discovere ones
                 minimal = True
-                to_remove = []
+                to_remove_indices = []
+                to_remove_reps = []
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
                         # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
-                        to_remove.append(rep_blocks[i])
+                        to_remove_indices.append(i)
+                        to_remove_reps.append(r)
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
                         minimal = False
                         break
-                # remove non-minimal representative blocks
-                rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                # remove non-minimal blocks and representative blocks
+                for i in sorted(to_remove_indices, reverse=True):
+                    del num_blocks[i], blocks[i]
+                rep_blocks = [r for r in rep_blocks if r not in to_remove_reps]
 
                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
@@ -4124,7 +4127,8 @@ def _p_elements_group(G, p):
         gens = sorted(gens, key=lambda x: x.order(), reverse=True)
         gens_p = [g**(g.order()/p) for g in gens]
         gens_r = []
-        for i in range(len(gens)):
+        i = 0
+        while i < len(gens):
             x = gens[i]
             x_order = x.order()
             # x_p has order p
@@ -4135,6 +4139,7 @@ def _p_elements_group(G, p):
                 P = PermutationGroup(G.identity)
             if x**(x_order/p) not in P:
                 gens_r.append(x**(x_order/p))
+                i += 1
             else:
                 # replace x by an element of order (x.order()/p)
                 # so that gens still generates G
@@ -4150,6 +4155,7 @@ def _p_elements_group(G, p):
                     j += 1
                 gens = gens[:j] + [x] + gens[j:]
                 gens_p = gens_p[:j] + [x] + gens_p[j:]
+                # Don't increment i since we want to process the new element at position i
         return PermutationGroup(gens_r)
 
     def _sylow_alt_sym(self, p):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..d67d6d944f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,22 @@
+from sympy.combinatorics import DihedralGroup, SymmetricGroup, CyclicGroup
+
+# Test with different group sizes and primes
+test_cases = [
+    (DihedralGroup(6), 2),
+    (DihedralGroup(6), 3),
+    (DihedralGroup(10), 2),
+    (DihedralGroup(10), 5),
+    (SymmetricGroup(4), 2),
+    (SymmetricGroup(4), 3),
+    (CyclicGroup(12), 2),
+    (CyclicGroup(12), 3),
+]
+
+for group, prime in test_cases:
+    try:
+        sylow = group.sylow_subgroup(p=prime)
+        print(f"Success: {group} with p={prime} -> Sylow subgroup order: {sylow.order()}")
+    except Exception as e:
+        print(f"Error: {group} with p={prime} -> {e}")
+
+print("All edge case tests completed!")
\ No newline at end of file
diff --git a/test_p_elements.py b/test_p_elements.py
new file mode 100644
index 0000000000..b801113272
--- /dev/null
+++ b/test_p_elements.py
@@ -0,0 +1,19 @@
+from sympy.combinatorics import CyclicGroup
+from sympy.combinatorics.perm_groups import PermutationGroup
+
+# Test the _p_elements_group function that was also fixed
+G = CyclicGroup(4)  # This is a 2-group
+try:
+    # This should trigger the _p_elements_group function
+    sylow = G.sylow_subgroup(p=2)
+    print(f"Success: CyclicGroup(4) with p=2 -> Sylow subgroup order: {sylow.order()}")
+except Exception as e:
+    print(f"Error: CyclicGroup(4) with p=2 -> {e}")
+
+# Test with a larger cyclic group
+G = CyclicGroup(8)  # This is also a 2-group
+try:
+    sylow = G.sylow_subgroup(p=2)
+    print(f"Success: CyclicGroup(8) with p=2 -> Sylow subgroup order: {sylow.order()}")
+except Exception as e:
+    print(f"Error: CyclicGroup(8) with p=2 -> {e}")
\ No newline at end of file
diff --git a/test_second_case.py b/test_second_case.py
new file mode 100644
index 0000000000..71851df592
--- /dev/null
+++ b/test_second_case.py
@@ -0,0 +1,7 @@
+from sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation
+
+G = DihedralGroup(2*25)
+
+S2 = G.sylow_subgroup(p=2)
+
+print("Second test completed successfully!")
\ No newline at end of file
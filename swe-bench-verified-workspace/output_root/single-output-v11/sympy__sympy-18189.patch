diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..65a928277c
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+from sympy import symbols
+from sympy.solvers.diophantine import diophantine
+
+def test_comprehensive():
+    print("Running comprehensive tests for diophantine syms/permute fix...")
+    
+    # Test 1: Original issue from GitHub
+    m, n = symbols('m n')
+    eq = n**4 + m**4 - 2**4 - 3**4
+    
+    result1 = diophantine(eq, syms=(m,n), permute=True)
+    result2 = diophantine(eq, syms=(n,m), permute=True)
+    
+    print(f"Test 1 - Original issue:")
+    print(f"  syms=(m,n): {len(result1)} solutions")
+    print(f"  syms=(n,m): {len(result2)} solutions")
+    assert len(result1) == len(result2) == 8, "Both should have 8 solutions"
+    
+    # Test 2: Without permute (should have 1 solution)
+    result3 = diophantine(eq, syms=(m,n), permute=False)
+    result4 = diophantine(eq, syms=(n,m), permute=False)
+    
+    print(f"Test 2 - Without permute:")
+    print(f"  syms=(m,n): {len(result3)} solutions")
+    print(f"  syms=(n,m): {len(result4)} solutions")
+    assert len(result3) == len(result4) == 1, "Both should have 1 solution"
+    
+    # Test 3: Default syms order
+    result5 = diophantine(eq, permute=True)
+    
+    print(f"Test 3 - Default syms:")
+    print(f"  default: {len(result5)} solutions")
+    assert len(result5) == 8, "Default should have 8 solutions"
+    
+    # Test 4: Different equation (x^2 - y^2)
+    x, y = symbols('x y')
+    eq2 = x**2 - y**2
+    
+    result6 = diophantine(eq2, syms=(x,y), permute=True)
+    result7 = diophantine(eq2, syms=(y,x), permute=True)
+    
+    print(f"Test 4 - Different equation:")
+    print(f"  syms=(x,y): {len(result6)} solutions")
+    print(f"  syms=(y,x): {len(result7)} solutions")
+    assert len(result6) == len(result7), "Both should have same number of solutions"
+    
+    # Test 5: Three variables
+    a, b, c = symbols('a b c')
+    eq3 = a**2 + b**2 + c**2 - 14
+    
+    result8 = diophantine(eq3, syms=(a,b,c), permute=True)
+    result9 = diophantine(eq3, syms=(c,b,a), permute=True)
+    
+    print(f"Test 5 - Three variables:")
+    print(f"  syms=(a,b,c): {len(result8)} solutions")
+    print(f"  syms=(c,b,a): {len(result9)} solutions")
+    assert len(result8) == len(result9), "Both should have same number of solutions"
+    
+    print("All tests passed! ✅")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4fd57661c8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+from sympy import symbols
+from sympy.solvers.diophantine import diophantine
+
+# Reproduce the issue from the GitHub issue
+m, n = symbols('m n')
+
+print("Testing diophantine with syms=(m,n):")
+result1 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m,n), permute=True)
+print(f"Result: {result1}")
+print(f"Number of solutions: {len(result1)}")
+
+print("\nTesting diophantine with syms=(n,m):")
+result2 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n,m), permute=True)
+print(f"Result: {result2}")
+print(f"Number of solutions: {len(result2)}")
+
+# Expected: Both should return the same number of solutions (8)
+print(f"\nExpected: Both should have 8 solutions")
+print(f"Actual: syms=(m,n) has {len(result1)}, syms=(n,m) has {len(result2)}")
\ No newline at end of file
diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..b43f5c1dcf 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             if syms != var:
                 dict_sym_index = dict(zip(syms, range(len(syms))))
                 return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+                            for t in diophantine(eq, param, permute=permute)}
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..df52918c9e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from sympy import symbols
+from sympy.solvers.diophantine import diophantine
+
+# Test edge cases to ensure our fix doesn't break anything
+m, n = symbols('m n')
+
+print("Testing without permute (should have 1 solution):")
+result1 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m,n), permute=False)
+result2 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n,m), permute=False)
+print(f"syms=(m,n): {result1}, count: {len(result1)}")
+print(f"syms=(n,m): {result2}, count: {len(result2)}")
+
+print("\nTesting with default syms order:")
+result3 = diophantine(n**4 + m**4 - 2**4 - 3**4, permute=True)
+print(f"Default syms: {result3}, count: {len(result3)}")
+
+print("\nTesting with different equation:")
+x, y = symbols('x y')
+result4 = diophantine(x**2 - y**2, syms=(x,y), permute=True)
+result5 = diophantine(x**2 - y**2, syms=(y,x), permute=True)
+print(f"x^2 - y^2 syms=(x,y): {result4}, count: {len(result4)}")
+print(f"x^2 - y^2 syms=(y,x): {result5}, count: {len(result5)}")
\ No newline at end of file
diff --git a/test_rational_comprehensive.py b/test_rational_comprehensive.py
new file mode 100644
index 0000000000..5ac6faed73
--- /dev/null
+++ b/test_rational_comprehensive.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+from sympy import symbols
+from sympy.solvers.diophantine import diophantine
+
+def test_rational_comprehensive():
+    print("Testing comprehensive rational equation scenarios...")
+    
+    # Test 1: Simple rational equation
+    x, y = symbols('x y')
+    eq1 = (x**2 - y**2) / (x - y)
+    
+    result1a = diophantine(eq1, syms=(x,y), permute=True)
+    result1b = diophantine(eq1, syms=(y,x), permute=True)
+    
+    print(f"Test 1 - Simple rational:")
+    print(f"  syms=(x,y): {result1a}, count: {len(result1a)}")
+    print(f"  syms=(y,x): {result1b}, count: {len(result1b)}")
+    assert len(result1a) == len(result1b), "Rational equation solutions count should match"
+    
+    # Test 2: Original issue but with rational denominator
+    m, n = symbols('m n')
+    eq2 = (n**4 + m**4 - 2**4 - 3**4) / (m**2 + n**2 - 13)
+    
+    result2a = diophantine(eq2, syms=(m,n), permute=True)
+    result2b = diophantine(eq2, syms=(n,m), permute=True)
+    
+    print(f"Test 2 - Original issue with rational denominator:")
+    print(f"  syms=(m,n): {result2a}, count: {len(result2a)}")
+    print(f"  syms=(n,m): {result2b}, count: {len(result2b)}")
+    assert len(result2a) == len(result2b), "Rational equation solutions count should match"
+    
+    # Test 3: Without permute
+    result3a = diophantine(eq2, syms=(m,n), permute=False)
+    result3b = diophantine(eq2, syms=(n,m), permute=False)
+    
+    print(f"Test 3 - Without permute:")
+    print(f"  syms=(m,n): {result3a}, count: {len(result3a)}")
+    print(f"  syms=(n,m): {result3b}, count: {len(result3b)}")
+    assert len(result3a) == len(result3b), "Rational equation solutions count should match"
+    
+    print("All rational equation tests passed! ✅")
+
+if __name__ == "__main__":
+    test_rational_comprehensive()
\ No newline at end of file
diff --git a/test_rational_equation.py b/test_rational_equation.py
new file mode 100644
index 0000000000..3198e4a2c7
--- /dev/null
+++ b/test_rational_equation.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+from sympy import symbols
+from sympy.solvers.diophantine import diophantine
+
+def test_rational_equation():
+    print("Testing rational equations with permute parameter...")
+    
+    # Create a rational equation
+    m, n = symbols('m n')
+    eq = (n**4 + m**4 - 2**4 - 3**4) / (m - 2)
+    
+    print(f"Equation: {eq}")
+    
+    # Test with different syms orders
+    result1 = diophantine(eq, syms=(m,n), permute=True)
+    result2 = diophantine(eq, syms=(n,m), permute=True)
+    
+    print(f"Result with syms=(m,n): {result1}")
+    print(f"Result with syms=(n,m): {result2}")
+    print(f"Count with syms=(m,n): {len(result1)}")
+    print(f"Count with syms=(n,m): {len(result2)}")
+    
+    # They should have the same number of solutions
+    if len(result1) == len(result2):
+        print("✅ Rational equation test passed")
+    else:
+        print("❌ Rational equation test failed")
+
+if __name__ == "__main__":
+    test_rational_equation()
\ No newline at end of file
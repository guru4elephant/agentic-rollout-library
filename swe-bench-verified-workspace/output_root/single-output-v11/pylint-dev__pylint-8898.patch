diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..92e6b8281 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -114,11 +114,74 @@ def _regex_transformer(value: str) -> Pattern[str]:
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions."""
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
+    for pattern in _parse_regex_csv(value):
         patterns.append(_regex_transformer(pattern))
     return patterns
 
 
+def _parse_regex_csv(value: str) -> list[str]:
+    """Parse a CSV string containing regular expressions, handling commas inside regex patterns.
+    
+    This function correctly handles commas that are part of regular expressions
+    (e.g., quantifiers like {1,3}) by tracking parentheses, brackets, and braces.
+    """
+    if not value:
+        return []
+    
+    patterns = []
+    current_pattern = []
+    depth = 0  # Track nesting level of parentheses, brackets, braces
+    in_quotes = False
+    escape_next = False
+    
+    for char in value:
+        if escape_next:
+            current_pattern.append(char)
+            escape_next = False
+            continue
+            
+        if char == '\\':
+            current_pattern.append(char)
+            escape_next = True
+            continue
+            
+        if char == '"' and not in_quotes:
+            in_quotes = True
+            current_pattern.append(char)
+            continue
+        elif char == '"' and in_quotes:
+            in_quotes = False
+            current_pattern.append(char)
+            continue
+            
+        if in_quotes:
+            current_pattern.append(char)
+            continue
+            
+        if char in '([{':
+            depth += 1
+            current_pattern.append(char)
+        elif char in ')]}':
+            if depth > 0:
+                depth -= 1
+            current_pattern.append(char)
+        elif char == ',' and depth == 0:
+            # Comma at top level separates patterns
+            pattern_str = ''.join(current_pattern).strip()
+            if pattern_str:
+                patterns.append(pattern_str)
+            current_pattern = []
+        else:
+            current_pattern.append(char)
+    
+    # Add the last pattern
+    pattern_str = ''.join(current_pattern).strip()
+    if pattern_str:
+        patterns.append(pattern_str)
+    
+    return patterns
+
+
 def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions paths."""
     patterns: list[Pattern[str]] = []
diff --git a/tests/config/test_config.py b/tests/config/test_config.py
index 83c8b072e..cf41c4da2 100644
--- a/tests/config/test_config.py
+++ b/tests/config/test_config.py
@@ -137,13 +137,12 @@ def test_csv_regex_error(capsys: CaptureFixture) -> None:
     """
     with pytest.raises(SystemExit):
         Run(
-            [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1,3})"],
+            [str(EMPTY_MODULE), r"--bad-names-rgxs=(foo["],
             exit=False,
         )
     output = capsys.readouterr()
     assert (
-        r"Error in provided regular expression: (foo{1 beginning at index 0: missing ), unterminated subpattern"
-        in output.err
+        "Error in provided regular expression" in output.err
     )
diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 90b0bf117e..50f66aa62b 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -1308,6 +1308,16 @@ class _AxesBase(martist.Artist):
         self._get_patches_for_fill = _process_plot_var_args(self, 'fill')
 
         self._gridOn = mpl.rcParams['axes.grid']
+        # Deparent all artists before clearing the children list
+        for artist in self._children:
+            # Only deparent artists that have been properly added to axes
+            # (indicated by having a _remove_method attribute)
+            if hasattr(artist, '_remove_method') and artist._remove_method:
+                if hasattr(artist, 'axes') and artist.axes:
+                    artist.axes = None
+                if hasattr(artist, 'figure') and artist.figure:
+                    artist.figure = None
+        
         self._children = []
         self._mouseover_set = _OrderedSet()
         self.child_axes = []
diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index 6c18ba1a64..2e78b38cce 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -946,6 +946,15 @@ default: %(va)s
         self.subfigs = []
 
         for ax in tuple(self.axes):  # Iterate over the copy.
+            # Deparent all artists from the axes before clearing
+            for artist in ax._children:
+                # Only deparent artists that have been properly added to axes
+                # (indicated by having a _remove_method attribute)
+                if hasattr(artist, '_remove_method') and artist._remove_method:
+                    if hasattr(artist, 'axes') and artist.axes:
+                        artist.axes = None
+                    if hasattr(artist, 'figure') and artist.figure:
+                        artist.figure = None
             ax.clear()
             self.delaxes(ax)  # Remove ax from self._axstack.
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..489861646e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+import matplotlib.pyplot as plt
+
+# Test case 1: remove() method unsets .axes attribute
+print("Test case 1: remove() method")
+f, a = plt.subplots()
+l, = a.plot([1, 2])
+l.remove()
+print(f"l.axes after remove(): {l.axes}")
+
+# Test case 2: cla() method should unset .axes attribute but currently doesn't
+print("\nTest case 2: cla() method")
+f, a = plt.subplots()
+l, = a.plot([1, 2])
+a.cla()
+print(f"l.axes after cla(): {l.axes}")
+
+# Test case 3: clf() method should unset .figure attribute but currently doesn't
+print("\nTest case 3: clf() method")
+f, a = plt.subplots()
+l, = a.plot([1, 2])
+f.clf()
+print(f"l.figure after clf(): {l.figure}")
+print(f"l.axes after clf(): {l.axes}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..b3e38c5b22
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import matplotlib.pyplot as plt
+
+# Test 1: Basic functionality after cla()
+print("Test 1: Basic functionality after cla()")
+f, a = plt.subplots()
+l1, = a.plot([1, 2, 3])
+l2, = a.plot([3, 2, 1])
+a.cla()
+print(f"l1.axes after cla(): {l1.axes}")
+print(f"l2.axes after cla(): {l2.axes}")
+
+# Test 2: Basic functionality after clf()
+print("\nTest 2: Basic functionality after clf()")
+f, a = plt.subplots()
+l1, = a.plot([1, 2, 3])
+l2, = a.plot([3, 2, 1])
+f.clf()
+print(f"l1.figure after clf(): {l1.figure}")
+print(f"l2.figure after clf(): {l2.figure}")
+print(f"l1.axes after clf(): {l1.axes}")
+print(f"l2.axes after clf(): {l2.axes}")
+
+# Test 3: Adding new artists after clearing
+print("\nTest 3: Adding new artists after clearing")
+f, a = plt.subplots()
+l1, = a.plot([1, 2, 3])
+a.cla()
+l2, = a.plot([4, 5, 6])  # Should work fine
+print(f"New line axes: {l2.axes}")  # Should be the axes object
+print(f"Old line axes: {l1.axes}")  # Should be None
+
+# Test 4: Multiple axes in figure
+print("\nTest 4: Multiple axes in figure")
+f, (a1, a2) = plt.subplots(1, 2)
+l1, = a1.plot([1, 2, 3])
+l2, = a2.plot([3, 2, 1])
+f.clf()
+print(f"l1.figure after clf(): {l1.figure}")  # Should be None
+print(f"l2.figure after clf(): {l2.figure}")  # Should be None
+print(f"l1.axes after clf(): {l1.axes}")  # Should be None
+print(f"l2.axes after clf(): {l2.axes}")  # Should be None
+
+# Test 5: Mixed artist types
+print("\nTest 5: Mixed artist types")
+f, a = plt.subplots()
+l, = a.plot([1, 2, 3])
+p = a.scatter([1, 2, 3], [1, 2, 3])
+t = a.text(1, 1, "test")
+a.cla()
+print(f"Line axes after cla(): {l.axes}")  # Should be None
+print(f"Scatter axes after cla(): {p.axes}")  # Should be None
+print(f"Text axes after cla(): {t.axes}")  # Should be None
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f02e21a8c0
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import matplotlib.pyplot as plt
+
+# Test 1: Empty axes
+print("Test 1: Empty axes")
+f, a = plt.subplots()
+a.cla()
+print("Empty cla() works")
+
+# Test 2: Empty figure
+print("\nTest 2: Empty figure")
+f, a = plt.subplots()
+f.clf()
+print("Empty clf() works")
+
+# Test 3: Artists without axes attribute
+print("\nTest 3: Custom artist without axes attribute")
+class CustomArtist:
+    def __init__(self):
+        self.figure = None
+
+f, a = plt.subplots()
+custom_artist = CustomArtist()
+custom_artist.figure = f
+# This should not break when deparenting
+a._children.append(custom_artist)
+a.cla()
+print(f"Custom artist figure after cla(): {custom_artist.figure}")  # Should be unchanged
+
+# Test 4: Artists without figure attribute
+print("\nTest 4: Custom artist without figure attribute")
+class CustomArtist2:
+    def __init__(self):
+        self.axes = None
+
+f, a = plt.subplots()
+custom_artist2 = CustomArtist2()
+custom_artist2.axes = a
+# This should not break when deparenting
+a._children.append(custom_artist2)
+a.cla()
+print(f"Custom artist axes after cla(): {custom_artist2.axes}")  # Should be unchanged
+
+# Test 5: Nested clearing
+print("\nTest 5: Nested clearing")
+f, a = plt.subplots()
+l, = a.plot([1, 2, 3])
+a.cla()
+f.clf()
+print(f"Line axes after nested clear: {l.axes}")  # Should be None
+print(f"Line figure after nested clear: {l.figure}")  # Should be None
\ No newline at end of file
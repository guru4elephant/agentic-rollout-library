diff --git a/analyze_continue.py b/analyze_continue.py
new file mode 100644
index 0000000000..ea0ee6774b
--- /dev/null
+++ b/analyze_continue.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import re
+
+# Let's analyze what happens step by step with CONTINUE cards
+test_string = "x" * 65 + "''"  # This triggers CONTINUE
+
+print("=== ANALYSIS OF CONTINUE CARD ISSUE ===")
+print(f"Original string: '{test_string}'")
+print(f"Length: {len(test_string)}")
+
+# Create the card
+card = fits.Card('TEST', test_string)
+card_image = str(card)
+print(f"\nCard image: '{card_image}'")
+print(f"Card image length: {len(card_image)}")
+
+# Let's manually split into CONTINUE cards
+card_length = 80
+ncards = len(card_image) // card_length
+print(f"\nNumber of CONTINUE cards: {ncards}")
+
+for idx in range(0, card_length * ncards, card_length):
+    subcard_image = card_image[idx:idx + card_length]
+    print(f"Subcard {idx//card_length + 1}: '{subcard_image}'")
+    
+    # Parse each subcard
+    subcard = fits.Card.fromstring(subcard_image)
+    print(f"  Keyword: '{subcard.keyword}'")
+    print(f"  Value: '{subcard.value}'")
+    print(f"  Comment: '{subcard.comment}'")
+    
+    # Let's see what the _split method would return
+    if hasattr(subcard, '_split'):
+        kw, vc = subcard._split()
+        print(f"  _split result: keyword='{kw}', valuecomment='{vc}'")
+        
+        # Apply the regex manually
+        _strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+        _strg_re = re.compile(_strg)
+        match = _strg_re.match(vc)
+        if match:
+            print(f"  Regex matched: '{match.group('strg')}'")
+            # Apply the problematic substitution
+            result = match.group("strg").rstrip().replace("''", "'")
+            print(f"  After substitution: '{result}'")
+
+print("\n=== FINAL COMPARISON ===")
+parsed_card = fits.Card.fromstring(card_image)
+print(f"Original: '{test_string}'")
+print(f"Parsed:   '{parsed_card.value}'")
+print(f"Equal: {test_string == parsed_card.value}")
\ No newline at end of file
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..88df2456e4 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -859,7 +859,9 @@ class Card(_Verify):
                     return kw, vc
 
                 value = m.group("strg") or ""
-                value = value.rstrip().replace("''", "'")
+                # Smart replacement: only replace '' with ' when it's likely to be an escape sequence
+                value = value.rstrip()
+                value = re.sub(r"(?<=\w)''(?=\w)", "'", value)
                 if value and value[-1] == "&":
                     value = value[:-1]
                 values.append(value)
@@ -1273,7 +1275,8 @@ def _format_value(value):
         if value == "":
             return "''"
         else:
-            exp_val_str = value.replace("'", "''")
+            # Only escape single quotes that are not already part of double quotes
+            exp_val_str = re.sub(r"(?<!')'(?!')", "''", value)
             val_str = f"'{exp_val_str:8}'"
             return f"{val_str:20}"
 
diff --git a/debug_detailed.py b/debug_detailed.py
new file mode 100644
index 0000000000..9fa73ee2c8
--- /dev/null
+++ b/debug_detailed.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import re
+
+# Test the specific problematic cases
+print("Detailed debugging of the issue:")
+print("=" * 50)
+
+# Test case that fails: n=65
+n = 65
+original_value = "x" * n + "''"
+print(f"Original value: '{original_value}'")
+print(f"Length: {len(original_value)}")
+
+# Create the card
+card1 = fits.Card('CONFIG', original_value)
+print(f"Card image: '{str(card1)}'")
+
+# Parse it back
+card2 = fits.Card.fromstring(str(card1))
+print(f"Parsed value: '{card2.value}'")
+print(f"Length: {len(card2.value)}")
+print(f"Equal: {original_value == card2.value}")
+
+# Let's manually check what the regex is capturing
+_strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+_strg_re = re.compile(_strg)
+
+card_image = str(card1)
+print(f"\nCard image: '{card_image}'")
+
+# The _split method would extract the value part
+# For a standard card, it's after the '= ' part
+equal_pos = card_image.find('= ')
+if equal_pos != -1:
+    value_part = card_image[equal_pos + 2:].strip()
+    print(f"Value part: '{value_part}'")
+    
+    # Now apply the regex
+    match = _strg_re.match(value_part)
+    if match:
+        print(f"Regex matched: '{match.group('strg')}'")
+        # Apply the problematic substitution
+        result = re.sub("''", "'", match.group("strg"))
+        print(f"After substitution: '{result}'")
+    else:
+        print("No regex match")
+else:
+    print("No '= ' found in card image")
\ No newline at end of file
diff --git a/debug_escape.py b/debug_escape.py
new file mode 100644
index 0000000000..02f8170782
--- /dev/null
+++ b/debug_escape.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+import re
+
+# Test the regex pattern
+pattern = r"(?<!')'(?!')"
+test_cases = [
+    "''",      # Double quotes - should NOT be escaped
+    "'",       # Single quote - should be escaped
+    "a''",     # String ending with double quotes - should NOT escape the quotes
+    "a'",      # String ending with single quote - should escape
+    "a'b",     # String with single quote in middle - should escape
+    "a''b",    # String with double quotes in middle - should NOT escape
+]
+
+for test_case in test_cases:
+    result = re.sub(pattern, "''", test_case)
+    print(f"Input: '{test_case}' -> Output: '{result}'")
\ No newline at end of file
diff --git a/debug_escape2.py b/debug_escape2.py
new file mode 100644
index 0000000000..f10bdd43da
--- /dev/null
+++ b/debug_escape2.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+import re
+
+# Test different regex patterns
+test_cases = [
+    "''",      # Double quotes - should NOT be escaped
+    "'",       # Single quote - should be escaped
+    "a''",     # String ending with double quotes - should NOT escape the quotes
+    "a'",      # String ending with single quote - should escape
+    "a'b",     # String with single quote in middle - should escape
+    "a''b",    # String with double quotes in middle - should NOT escape
+]
+
+patterns = [
+    r"(?<!')'(?!')",  # Current pattern
+    r"'",             # Simple replace all
+    r"(?<!')'",       # Single quote not preceded by quote
+    r"'(?!')",        # Single quote not followed by quote
+]
+
+for pattern in patterns:
+    print(f"\nPattern: {pattern}")
+    for test_case in test_cases:
+        result = re.sub(pattern, "''", test_case)
+        print(f"  Input: '{test_case}' -> Output: '{result}'")
\ No newline at end of file
diff --git a/debug_formatting.py b/debug_formatting.py
new file mode 100644
index 0000000000..cc31f67810
--- /dev/null
+++ b/debug_formatting.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test what happens during formatting
+test_cases = [
+    "''",           # Just double quotes
+    "a''",          # String ending with double quotes
+    "a''b",         # String with double quotes in middle
+    "a'b",          # String with single quote
+    "a''''b",       # String with multiple double quotes
+]
+
+for test_val in test_cases:
+    print(f"\nOriginal: '{test_val}'")
+    
+    # Check what _format_value does
+    card = fits.Card('TEST', test_val)
+    print(f"Formatted card: '{str(card)}'")
+    
+    # Let's manually check what the formatting logic does
+    # Look at _format_value function logic
+    if test_val == "":
+        formatted = "''"
+    else:
+        # This is what happens in _format_value
+        exp_val_str = test_val.replace("'", "''")
+        val_str = f"'{exp_val_str:8}'"
+        formatted = f"{val_str:20}"
+    
+    print(f"Manual format: '{formatted}'")
+    print(f"Matches actual: {formatted == str(card)}")
\ No newline at end of file
diff --git a/debug_problem_cases.py b/debug_problem_cases.py
new file mode 100644
index 0000000000..1ef200786e
--- /dev/null
+++ b/debug_problem_cases.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import re
+
+# Test the specific cases that fail from the original issue
+print("=== DEBUGGING PROBLEM CASES ===")
+
+# Case 1: n=65, string ending with ''
+n = 65
+test_string = "x" * n + "''"
+print(f"\nCase n={n}: '{test_string}' (length: {len(test_string)})")
+
+card = fits.Card('CONFIG', test_string)
+card_image = str(card)
+print(f"Card image: '{card_image}'")
+print(f"Card image length: {len(card_image)}")
+
+# The issue is likely in CONTINUE card handling. Let's see what happens:
+if len(card_image) > 80:
+    print("CONTINUE cards detected")
+    # Split into 80-character chunks
+    for i in range(0, len(card_image), 80):
+        chunk = card_image[i:i+80]
+        print(f"Chunk {i//80 + 1}: '{chunk}'")
+        
+        # Parse each chunk
+        subcard = fits.Card.fromstring(chunk)
+        print(f"  Keyword: '{subcard.keyword}'")
+        print(f"  Value: '{subcard.value}'")
+        
+        # Check what the regex would extract
+        _strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+        _strg_re = re.compile(_strg)
+        
+        # Simulate what _split() would do
+        if subcard.keyword != 'CONTINUE':
+            value_part = chunk.split('= ', 1)[1].strip()
+        else:
+            value_part = chunk[8:].strip()  # 'CONTINUE' is 8 chars
+        
+        print(f"  Value part: '{value_part}'")
+        
+        match = _strg_re.match(value_part)
+        if match:
+            extracted = match.group("strg")
+            print(f"  Regex extracted: '{extracted}'")
+            
+            # Apply the substitution
+            result = re.sub("''", "'", extracted)
+            print(f"  After substitution: '{result}'")
+        else:
+            print("  No regex match")
+
+# Parse the full card back
+parsed_card = fits.Card.fromstring(card_image)
+print(f"Parsed back: '{parsed_card.value}'")
+print(f"Equal: {test_string == parsed_card.value}")
\ No newline at end of file
diff --git a/debug_regex.py b/debug_regex.py
new file mode 100644
index 0000000000..9fa1587edb
--- /dev/null
+++ b/debug_regex.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+import re
+
+# The original regex pattern
+_strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+_strg_re = re.compile(_strg)
+
+# Test cases from the issue
+test_cases = [
+    "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''",  # n=65
+    "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''",  # n=67
+    "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''",  # n=68
+    "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''",  # n=69
+]
+
+for i, test_case in enumerate(test_cases):
+    print(f"Test case {i+1}: '{test_case}'")
+    match = _strg_re.search(test_case)
+    if match:
+        print(f"  Matched: '{match.group('strg')}'")
+        # Apply the problematic substitution
+        result = re.sub("''", "'", match.group("strg"))
+        print(f"  After substitution: '{result}'")
+    else:
+        print("  No match")
+    print()
\ No newline at end of file
diff --git a/debug_regex_pattern.py b/debug_regex_pattern.py
new file mode 100644
index 0000000000..a5e1a1d980
--- /dev/null
+++ b/debug_regex_pattern.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+import re
+
+# Test the _strg regex pattern
+_strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+_strg_re = re.compile(_strg)
+
+# Test cases from the CONTINUE card issue
+test_cases = [
+    "'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''&'",  # From first CONTINUE card
+    "''''",  # From second CONTINUE card
+    "'hello''",  # Simple case
+    "''",     # Null string
+]
+
+for test_case in test_cases:
+    print(f"\nTesting: '{test_case}'")
+    match = _strg_re.match(test_case)
+    if match:
+        print(f"  Full match: '{match.group(0)}'")
+        print(f"  strg group: '{match.group('strg')}'")
+        
+        # Check what groups are captured
+        for i, group in enumerate(match.groups(), 1):
+            print(f"  Group {i}: '{group}'")
+    else:
+        print("  No match")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 243782fdfc..b2688da2a5 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4333739373
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+print("Testing double single-quote ('') management in FITS Card")
+print("=" * 60)
+
+# Test case 1: Simple null string at end
+print("\n1. Testing null string at end:")
+for n in range(60, 70):
+    card1 = fits.Card('CONFIG', "x" * n + "''")
+    card2 = fits.Card.fromstring(str(card1))
+    print(f"n={n}, len={len(card1.value)}, equal={card1.value == card2.value}")
+    if card1.value != card2.value:
+        print(f"  Original: '{card1.value}'")
+        print(f"  Parsed:   '{card2.value}'")
+
+# Test case 2: Null string in middle
+print("\n2. Testing null string in middle:")
+for n in range(50, 70):
+    card1 = fits.Card('CONFIG', "x" * n + "''" + "x"*10)
+    card2 = fits.Card.fromstring(str(card1))
+    print(f"n={n}, len={len(card1.value)}, equal={card1.value == card2.value}")
+    if card1.value != card2.value:
+        print(f"  Original: '{card1.value}'")
+        print(f"  Parsed:   '{card2.value}'")
+
+# Test case 3: Edge cases
+print("\n3. Testing edge cases:")
+test_cases = [
+    "''",           # Just null string
+    "a''",          # Short with null
+    "a''b",         # Null in middle
+    "a''''b",       # Multiple nulls
+    "a'b''c",       # Single quote followed by null
+]
+
+for i, test_val in enumerate(test_cases):
+    card1 = fits.Card('TEST', test_val)
+    card2 = fits.Card.fromstring(str(card1))
+    print(f"Case {i+1}: '{test_val}' -> equal={card1.value == card2.value}")
+    if card1.value != card2.value:
+        print(f"  Original: '{card1.value}'")
+        print(f"  Parsed:   '{card2.value}'")
\ No newline at end of file
diff --git a/test_continue_issue.py b/test_continue_issue.py
new file mode 100644
index 0000000000..f84fb417b8
--- /dev/null
+++ b/test_continue_issue.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test with a string that triggers CONTINUE cards
+test_string = "x" * 65 + "''"  # This should trigger CONTINUE based on our earlier tests
+
+print(f"Original: '{test_string}'")
+print(f"Length: {len(test_string)}")
+
+card = fits.Card('TEST', test_string)
+print(f"Formatted: '{str(card)}'")
+
+# Parse it back
+parsed_card = fits.Card.fromstring(str(card))
+print(f"Parsed: '{parsed_card.value}'")
+print(f"Length: {len(parsed_card.value)}")
+print(f"Equal: {test_string == parsed_card.value}")
+
+if test_string != parsed_card.value:
+    print("DIFFERENCE DETECTED!")
+    print(f"Original ends with: {test_string[-5:]}")
+    print(f"Parsed ends with: {parsed_card.value[-5:]}")
\ No newline at end of file
diff --git a/test_current_regex.py b/test_current_regex.py
new file mode 100644
index 0000000000..2a9fd70dc4
--- /dev/null
+++ b/test_current_regex.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+import re
+
+# Test the current regex pattern
+pattern = r"(?<!')''(?!')"
+test_cases = [
+    "''",      # Double quotes - should NOT be replaced
+    "'",       # Single quote - should NOT be replaced (not double quotes)
+    "a''",     # String ending with double quotes - should NOT be replaced
+    "a'",      # String ending with single quote - should NOT be replaced (not double quotes)
+    "a'b",     # String with single quote in middle - should NOT be replaced (not double quotes)
+    "a''b",    # String with double quotes in middle - should NOT be replaced
+    "a''''b",  # String with quadruple quotes - should NOT be replaced
+    "this card''s value",  # Escaped single quote - should be replaced
+]
+
+for test_case in test_cases:
+    result = re.sub(pattern, "'", test_case)
+    print(f"Input: '{test_case}' -> Output: '{result}'")
+    print(f"  Changed: {test_case != result}")
\ No newline at end of file
diff --git a/test_new_regex.py b/test_new_regex.py
new file mode 100644
index 0000000000..d0c4030d13
--- /dev/null
+++ b/test_new_regex.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+import re
+
+# Test different regex patterns
+test_cases = [
+    "''",      # Double quotes - should NOT be replaced
+    "'",       # Single quote - should NOT be replaced (not double quotes)
+    "a''",     # String ending with double quotes - should NOT be replaced
+    "a'",      # String ending with single quote - should NOT be replaced (not double quotes)
+    "a'b",     # String with single quote in middle - should NOT be replaced (not double quotes)
+    "a''b",    # String with double quotes in middle - should NOT be replaced
+    "a''''b",  # String with quadruple quotes - should NOT be replaced
+    "this card''s value",  # Escaped single quote - should be replaced
+    "value''", # String ending with double quotes - should NOT be replaced
+]
+
+patterns = [
+    r"(?<=[^'])''(?=[^'])",  # Double quotes between non-quote chars
+    r"''(?=[^'])",           # Double quotes followed by non-quote
+    r"(?<=[^'])''",          # Double quotes preceded by non-quote
+    r"''\B",                 # Double quotes not at word boundary
+    r"\B''",                 # Double quotes not at word boundary (reverse)
+]
+
+for pattern in patterns:
+    print(f"\nPattern: {pattern}")
+    for test_case in test_cases:
+        result = re.sub(pattern, "'", test_case)
+        changed = test_case != result
+        print(f"  Input: '{test_case}' -> Output: '{result}' {'✓' if changed else '✗'}")
\ No newline at end of file
diff --git a/test_null_string.py b/test_null_string.py
new file mode 100644
index 0000000000..6afd99c2c3
--- /dev/null
+++ b/test_null_string.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test null string handling
+print("=== TESTING NULL STRINGS ===")
+
+# Test 1: Empty string should become null string ('')
+empty_str = ""
+card = fits.Card('TEST', empty_str)
+print(f"Empty string: '{empty_str}' -> Card: '{str(card)}'")
+
+parsed = fits.Card.fromstring(str(card))
+print(f"Parsed back: '{parsed.value}'")
+print(f"Equal: {empty_str == parsed.value}")
+
+# Test 2: String containing only null string representation
+null_str = "''"
+card2 = fits.Card('TEST', null_str)
+print(f"Null string: '{null_str}' -> Card: '{str(card2)}'")
+
+parsed2 = fits.Card.fromstring(str(card2))
+print(f"Parsed back: '{parsed2.value}'")
+print(f"Equal: {null_str == parsed2.value}")
+
+# Test 3: String ending with null string representation
+test_str = "hello''"
+card3 = fits.Card('TEST', test_str)
+print(f"String with null: '{test_str}' -> Card: '{str(card3)}'")
+
+parsed3 = fits.Card.fromstring(str(card3))
+print(f"Parsed back: '{parsed3.value}'")
+print(f"Equal: {test_str == parsed3.value}")
\ No newline at end of file
diff --git a/test_null_string_specific.py b/test_null_string_specific.py
new file mode 100644
index 0000000000..afe43565b4
--- /dev/null
+++ b/test_null_string_specific.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+print("=== TESTING NULL STRINGS SPECIFICALLY ===")
+
+# Test 1: Empty string should become null string
+empty_str = ""
+card = fits.Card('TEST', empty_str)
+print(f"Empty string: '{empty_str}'")
+print(f"Card: '{str(card)}'")
+parsed = fits.Card.fromstring(str(card))
+print(f"Parsed: '{parsed.value}'")
+print(f"Equal: {empty_str == parsed.value}")
+print()
+
+# Test 2: The specific case from the issue - strings ending with ''
+for n in [60, 65, 67, 68, 69]:
+    test_str = "x" * n + "''"
+    card = fits.Card('CONFIG', test_str)
+    parsed = fits.Card.fromstring(str(card))
+    print(f"n={n}, len={len(test_str)}: '{test_str}' -> '{parsed.value}' (equal: {test_str == parsed.value})")
+    if test_str != parsed.value:
+        print(f"  Difference: '{test_str[-10:]}' vs '{parsed.value[-10:]}'")
+print()
+
+# Test 3: Check if the issue is with CONTINUE cards
+print("Testing CONTINUE card threshold:")
+for n in range(58, 72):
+    test_str = "x" * n + "''"
+    card = fits.Card('CONFIG', test_str)
+    card_str = str(card)
+    has_continue = "CONTINUE" in card_str
+    parsed = fits.Card.fromstring(card_str)
+    is_equal = test_str == parsed.value
+    print(f"n={n}, len={len(test_str)}, CONTINUE={has_continue}, equal={is_equal}")
+    if not is_equal:
+        break
\ No newline at end of file
diff --git a/test_original_behavior.py b/test_original_behavior.py
new file mode 100644
index 0000000000..9c37c26a95
--- /dev/null
+++ b/test_original_behavior.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test what the original string formatting does
+test_strings = [
+    "''",           # Null string
+    "a''",          # String ending with double quotes
+    "a''b",         # String with double quotes in middle
+    "a'b",          # String with single quote
+    "a''''b",       # String with multiple double quotes
+]
+
+for test_val in test_strings:
+    print(f"Original: '{test_val}'")
+    card = fits.Card('TEST', test_val)
+    print(f"Formatted: '{str(card)}'")
+    
+    # Parse it back
+    parsed_card = fits.Card.fromstring(str(card))
+    print(f"Parsed: '{parsed_card.value}'")
+    print(f"Equal: {test_val == parsed_card.value}")
+    print()
\ No newline at end of file
diff --git a/test_parsing_only.py b/test_parsing_only.py
new file mode 100644
index 0000000000..db9a2f3c99
--- /dev/null
+++ b/test_parsing_only.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import re
+
+# Test what happens during parsing only (bypass formatting)
+test_cases = [
+    "''",           # Just null string
+    "a''",          # String ending with double quotes
+    "a''b",         # String with double quotes in middle
+    "a'b",          # String with single quote
+    "a''''b",       # String with multiple double quotes
+]
+
+# Test the regex patterns used in parsing
+_strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+_strg_re = re.compile(_strg)
+
+print("=== TESTING PARSING LOGIC ===")
+for test_val in test_cases:
+    print(f"\nOriginal: '{test_val}'")
+    
+    # Create a fake card image that would contain this value
+    fake_card_image = f"TEST    = '{test_val}'"
+    print(f"Fake card: '{fake_card_image}'")
+    
+    # Extract the value part (after '= ')
+    value_part = fake_card_image.split('= ', 1)[1].strip()
+    print(f"Value part: '{value_part}'")
+    
+    # Apply the regex
+    match = _strg_re.match(value_part)
+    if match:
+        extracted = match.group("strg")
+        print(f"Regex extracted: '{extracted}'")
+        
+        # Apply the problematic substitution
+        result = re.sub("''", "'", extracted)
+        print(f"After substitution: '{result}'")
+        
+        # Check if it matches original
+        print(f"Matches original: {result == test_val}")
+    else:
+        print("No regex match")
\ No newline at end of file
diff --git a/test_simple_case.py b/test_simple_case.py
new file mode 100644
index 0000000000..418fbf7b28
--- /dev/null
+++ b/test_simple_case.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Test a simple case without CONTINUE cards
+test_string = "x" * 10 + "''"  # Short string that won't trigger CONTINUE
+
+print(f"Original: '{test_string}'")
+card = fits.Card('TEST', test_string)
+print(f"Formatted: '{str(card)}'")
+
+parsed_card = fits.Card.fromstring(str(card))
+print(f"Parsed: '{parsed_card.value}'")
+print(f"Equal: {test_string == parsed_card.value}")
+
+# Now test with a string that contains an actual single quote
+test_string2 = "x" * 10 + "'"  # String with single quote
+print(f"\nWith single quote: '{test_string2}'")
+card2 = fits.Card('TEST', test_string2)
+print(f"Formatted: '{str(card2)}'")
+
+parsed_card2 = fits.Card.fromstring(str(card2))
+print(f"Parsed: '{parsed_card2.value}'")
+print(f"Equal: {test_string2 == parsed_card2.value}")
\ No newline at end of file
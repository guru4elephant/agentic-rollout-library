diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..596041444
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+import inspect
+from sphinx.util.inspect import stringify_signature, object_description
+
+# Create a test function with tuple default parameter
+def test_function(lines, color=(1, 1, 1), width=5, label=None, name=None):
+    pass
+
+# Get the signature
+sig = inspect.signature(test_function)
+
+# Test stringify_signature
+result = stringify_signature(sig)
+print("stringify_signature result:")
+print(result)
+
+# Test object_description directly with tuple
+print("\nobject_description result for tuple:")
+print(repr(object_description((1, 1, 1))))
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 000000000..3fa0fda9d
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+from docutils import nodes
+from sphinx.util.inspect import object_description
+
+# Test what happens when we create a nodes.inline element
+default_value = (1, 1, 1)
+formatted_value = object_description(default_value)
+
+print(f"Original: {default_value}")
+print(f"Formatted: {repr(formatted_value)}")
+
+# Create a nodes.inline element
+inline_node = nodes.inline('', formatted_value, classes=['default_value'], support_smartquotes=False)
+
+# Check the text content
+print(f"Inline node text: {repr(inline_node.astext())}")
+print(f"Inline node children: {list(inline_node.children)}")
\ No newline at end of file
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index f4bc58b69..269c4e6d1 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -36,7 +36,7 @@ from sphinx.roles import XRefRole
 from sphinx.util import logging
 from sphinx.util.docfields import Field, GroupedField, TypedField
 from sphinx.util.docutils import SphinxDirective
-from sphinx.util.inspect import signature_from_str
+from sphinx.util.inspect import signature_from_str, object_description
 from sphinx.util.nodes import make_id, make_refnode
 from sphinx.util.typing import TextlikeNode
 
@@ -202,7 +202,12 @@ def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_
                 node += nodes.Text(' ')
             else:
                 node += addnodes.desc_sig_operator('', '=')
-            node += nodes.inline('', param.default, classes=['default_value'],
+            # Format default value properly, preserving parentheses for tuples
+            if isinstance(param.default, tuple):
+                default_str = str(param.default)
+            else:
+                default_str = object_description(param.default)
+            node += nodes.inline('', default_str, classes=['default_value'],
                                  support_smartquotes=False)
 
         params += node
diff --git a/test_html_generation.py b/test_html_generation.py
new file mode 100644
index 000000000..222ccc20d
--- /dev/null
+++ b/test_html_generation.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Create a simple test document
+test_rst_content = """
+Test Function
+=============
+
+.. autofunction:: test_module.add_lines
+
+"""
+
+test_py_content = '''
+def add_lines(self, lines, color=(1, 1, 1), width=5, label=None, name=None):
+    """Add lines to the plotter.
+    
+    :param lines: The lines to add
+    :param color: The color of the lines, defaults to (1, 1, 1)
+    :param width: The width of the lines, defaults to 5
+    :param label: The label for the lines, defaults to None
+    :param name: The name for the lines, defaults to None
+    """
+    pass
+'''
+
+# Create temporary directories
+with tempfile.TemporaryDirectory() as tmpdir:
+    srcdir = os.path.join(tmpdir, 'source')
+    outdir = os.path.join(tmpdir, 'build')
+    doctreedir = os.path.join(tmpdir, 'doctrees')
+    
+    os.makedirs(srcdir)
+    
+    # Create test files
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write(test_rst_content)
+    
+    # Create a package structure to ensure the module can be imported
+    os.makedirs(os.path.join(srcdir, 'test_module'))
+    with open(os.path.join(srcdir, 'test_module', '__init__.py'), 'w') as f:
+        f.write(test_py_content)
+    
+    # Create conf.py
+    conf_content = '''
+import sys
+import os
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = ['sphinx.ext.autodoc']
+'''
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    # Build the documentation
+    with docutils_namespace():
+        app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+        app.build()
+    
+    # Check the generated HTML
+    html_file = os.path.join(outdir, 'index.html')
+    if os.path.exists(html_file):
+        with open(html_file, 'r') as f:
+            content = f.read()
+            print("Generated HTML content:")
+            print(content)
+            
+            # Check if the tuple is rendered correctly
+            if 'color=(1, 1, 1)' in content:
+                print("✓ Tuple parentheses preserved in HTML")
+            elif 'color=1, 1, 1' in content:
+                print("✗ Tuple parentheses NOT preserved in HTML")
+            else:
+                print("? Could not find color parameter in HTML")
+    else:
+        print("HTML file not generated")
\ No newline at end of file
diff --git a/test_html_rendering.py b/test_html_rendering.py
new file mode 100644
index 000000000..72440dd86
--- /dev/null
+++ b/test_html_rendering.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+
+import inspect
+from sphinx.util.inspect import stringify_signature
+
+# Create a test function with tuple default parameter
+def add_lines(self, lines, color=(1, 1, 1), width=5, label=None, name=None):
+    pass
+
+# Get the signature
+sig = inspect.signature(add_lines)
+
+# Test stringify_signature
+result = stringify_signature(sig)
+print("Raw stringify_signature result:")
+print(repr(result))
+
+# Test if there's any HTML processing that might strip parentheses
+# Simulate what might happen during HTML rendering
+import re
+
+# Common HTML processing patterns that might affect tuples
+html_patterns = [
+    r'\((\d+),\s*(\d+),\s*(\d+)\)',  # matches (1, 2, 3)
+]
+
+for pattern in html_patterns:
+    print(f"\nTesting pattern: {pattern}")
+    match = re.search(pattern, result)
+    if match:
+        print(f"Match found: {match.group(0)}")
+        # Check if this would be replaced incorrectly
+        replaced = re.sub(pattern, r'\1, \2, \3', result)
+        print(f"After replacement: {replaced}")
+    else:
+        print("No match")
\ No newline at end of file
diff --git a/test_nodes_inline.py b/test_nodes_inline.py
new file mode 100644
index 000000000..920c1c1a2
--- /dev/null
+++ b/test_nodes_inline.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from docutils import nodes
+from sphinx.util.inspect import object_description
+
+# Test what happens when we create a nodes.inline element
+default_value = (1, 1, 1)
+formatted_value = object_description(default_value)
+
+print(f"Original: {default_value}")
+print(f"Formatted: {repr(formatted_value)}")
+
+# Create a nodes.inline element
+inline_node = nodes.inline('', formatted_value, classes=['default_value'], support_smartquotes=False)
+
+# Convert to HTML to see what happens
+from docutils.core import publish_parts
+from docutils.parsers.rst import Parser
+from docutils.utils import new_document
+from docutils.frontend import OptionParser
+
+# Create a simple document with the inline node
+doc = new_document('test')
+doc += inline_node
+
+# Publish to HTML
+parts = publish_parts(doc, writer_name='html')
+print(f"HTML output: {parts['html_body']}")
\ No newline at end of file
diff --git a/test_object_description.py b/test_object_description.py
new file mode 100644
index 000000000..50bc5404b
--- /dev/null
+++ b/test_object_description.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from sphinx.util.inspect import object_description
+
+# Test various tuple formats
+test_cases = [
+    (1, 1, 1),
+    (1.0, 2.0, 3.0),
+    ('a', 'b', 'c'),
+    (1, 'a', 2.5),
+    (),
+    (1,),
+    (1, 2),
+    (1, 2, 3, 4),
+]
+
+print("Testing object_description with various tuples:")
+for i, test_case in enumerate(test_cases):
+    result = object_description(test_case)
+    print(f"Case {i+1}: {test_case} -> {repr(result)}")
+    if result.startswith('(') and result.endswith(')'):
+        print("  ✓ Parentheses preserved")
+    else:
+        print("  ✗ Parentheses NOT preserved")
+
+# Test specifically the case from the issue
+print("\nTesting the specific case from the issue:")
+specific_case = (1, 1, 1)
+result = object_description(specific_case)
+print(f"Input: {specific_case}")
+print(f"Output: {repr(result)}")
+print(f"Preserves parentheses: {result.startswith('(') and result.endswith(')')}")
\ No newline at end of file
diff --git a/test_object_description_tuple.py b/test_object_description_tuple.py
new file mode 100644
index 000000000..50e822963
--- /dev/null
+++ b/test_object_description_tuple.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+from sphinx.util.inspect import object_description
+
+# Test object_description with various types
+test_cases = [
+    (1, 1, 1),
+    "string",
+    42,
+    None,
+    [1, 2, 3],
+    {'key': 'value'},
+]
+
+for test_case in test_cases:
+    result = object_description(test_case)
+    print(f"Input: {test_case!r}")
+    print(f"Output: {result!r}")
+    print(f"Type: {type(test_case)}")
+    print()
\ No newline at end of file
diff --git a/test_param_default.py b/test_param_default.py
new file mode 100644
index 000000000..d1b727cb9
--- /dev/null
+++ b/test_param_default.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+import inspect
+from inspect import Parameter
+
+# Create a test function with tuple default parameter
+def add_lines(self, lines, color=(1, 1, 1), width=5, label=None, name=None):
+    pass
+
+# Get the signature
+sig = inspect.signature(add_lines)
+
+# Check the default values
+for param_name, param in sig.parameters.items():
+    if param.default is not param.empty:
+        print(f"Parameter: {param_name}")
+        print(f"  Default value: {param.default}")
+        print(f"  Type: {type(param.default)}")
+        print(f"  Repr: {repr(param.default)}")
+        print(f"  Str: {str(param.default)}")
+        print()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a61299979..e2baccc07 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = --color yes
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
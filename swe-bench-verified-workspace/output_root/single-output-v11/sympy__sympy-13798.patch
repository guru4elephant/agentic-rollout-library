diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..79b07e4e66
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols
+
+# Test the current behavior with the four allowed mul_symbol values
+x, y = symbols('x y')
+expr = 3*x**2*y
+
+print("Testing current allowed mul_symbol values:")
+for mul_symbol in [None, "ldot", "dot", "times"]:
+    result = latex(expr, mul_symbol=mul_symbol)
+    print(f"mul_symbol={mul_symbol}: {result}")
+
+print("\nTesting with custom mul_symbol (this should fail):")
+try:
+    result = latex(expr, mul_symbol=r"\, ")
+    print(f"mul_symbol='\, ': {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nTesting with thin space (what the user wants):")
+try:
+    result = latex(expr, mul_symbol=r"\, ")
+    print(f"mul_symbol='\, ': {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index ad4d7d9613..332e7cbe85 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -156,11 +156,21 @@ def __init__(self, settings=None):
             "times": r" \times "
         }
 
-        self._settings['mul_symbol_latex'] = \
-            mul_symbol_table[self._settings['mul_symbol']]
+        # If mul_symbol is one of the predefined values, use the corresponding LaTeX
+        # Otherwise, use the value directly as the multiplication symbol
+        mul_symbol = self._settings['mul_symbol']
+        if mul_symbol in mul_symbol_table:
+            self._settings['mul_symbol_latex'] = mul_symbol_table[mul_symbol]
+        else:
+            self._settings['mul_symbol_latex'] = mul_symbol
 
-        self._settings['mul_symbol_latex_numbers'] = \
-            mul_symbol_table[self._settings['mul_symbol'] or 'dot']
+        # For numbers, use 'dot' as default if mul_symbol is None, but allow custom values
+        if mul_symbol is None:
+            self._settings['mul_symbol_latex_numbers'] = mul_symbol_table['dot']
+        elif mul_symbol in mul_symbol_table:
+            self._settings['mul_symbol_latex_numbers'] = mul_symbol_table[mul_symbol]
+        else:
+            self._settings['mul_symbol_latex_numbers'] = mul_symbol
 
         self._delim_dict = {'(': ')', '[': ']'}
 
@@ -2155,10 +2165,12 @@ def latex(expr, **settings):
     \frac{1}{2 \pi} \int r\, dr
 
     mul_symbol: The symbol to use for multiplication. Can be one of None,
-    "ldot", "dot", or "times".
+    "ldot", "dot", "times", or any custom LaTeX string.
 
     >>> print(latex((2*tau)**sin(Rational(7,2)), mul_symbol="times"))
     \left(2 \times \tau\right)^{\sin{\left (\frac{7}{2} \right )}}
+    >>> print(latex((2*tau)**sin(Rational(7,2)), mul_symbol=r"\, "))
+    \left(2\, \tau\right)^{\sin{\left (\frac{7}{2} \right )}}
 
     inv_trig_style: How inverse trig functions should be displayed. Can be one
     of "abbreviated", "full", or "power". Defaults to "abbreviated".
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..3b506dbd01
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols, sin, Rational
+
+def test_mul_symbol_functionality():
+    """Test that mul_symbol works with both predefined and custom values"""
+    
+    x, y = symbols('x y')
+    expr = 3*x**2*y
+    
+    print("Testing comprehensive mul_symbol functionality:")
+    
+    # Test predefined values
+    predefined_values = [None, "ldot", "dot", "times"]
+    expected_results = [
+        "3 x^{2} y",
+        r"3 \,.\, x^{2} \,.\, y", 
+        r"3 \cdot x^{2} \cdot y",
+        r"3 \times x^{2} \times y"
+    ]
+    
+    for i, mul_symbol in enumerate(predefined_values):
+        result = latex(expr, mul_symbol=mul_symbol)
+        expected = expected_results[i]
+        print(f"mul_symbol={mul_symbol}: {result}")
+        assert result == expected, f"Expected {expected}, got {result}"
+    
+    # Test custom values
+    custom_tests = [
+        (r"\,", r"3\,x^{2}\,y"),  # thin space
+        (r"\:", r"3\:x^{2}\:y"),  # medium space
+        ("", "3x^{2}y"),           # empty string (no space)
+        (r"\quad", r"3\quadx^{2}\quady"),  # quad space (no additional spaces)
+    ]
+    
+    for mul_symbol, expected in custom_tests:
+        result = latex(expr, mul_symbol=mul_symbol)
+        print(f"mul_symbol='{mul_symbol}': {result}")
+        assert result == expected, f"Expected {expected}, got {result}"
+    
+    # Test with numbers (should use mul_symbol_latex_numbers)
+    # Use a Float to test number formatting
+    from sympy import Float
+    expr_with_numbers = Float(1.5e20) * x
+    number_tests = [
+        (None, r"1.5 \cdot 10^{20} \cdot x"),  # None should use 'dot' for numbers
+        ("dot", r"1.5 \cdot 10^{20} \cdot x"),
+        (r"\,", r"1.5\, 10^{20}\, x"),
+        ("times", r"1.5 \times 10^{20} \times x"),
+    ]
+    
+    for mul_symbol, expected in number_tests:
+        result = latex(expr_with_numbers, mul_symbol=mul_symbol)
+        print(f"mul_symbol='{mul_symbol}' with numbers: {result}")
+        assert result == expected, f"Expected {expected}, got {result}"
+    
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_mul_symbol_functionality()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..80563c6058
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols
+
+x, y = symbols('x y')
+expr = 3*x**2*y
+
+print("Testing edge cases for mul_symbol:")
+
+# Test empty string
+try:
+    result = latex(expr, mul_symbol="")
+    print(f"mul_symbol='': {result}")
+except Exception as e:
+    print(f"Error with empty string: {e}")
+
+# Test various custom symbols
+custom_symbols = [
+    r"\,",      # thin space (what the user wanted)
+    r"\:",      # medium space
+    r"\;",      # thick space
+    r"\!",      # negative thin space
+    r"*",       # asterisk
+    r"",        # empty (no space)
+    r"\quad",   # quad space
+    r"\qquad",  # double quad space
+]
+
+for symbol in custom_symbols:
+    try:
+        result = latex(expr, mul_symbol=symbol)
+        print(f"mul_symbol='{symbol}': {result}")
+    except Exception as e:
+        print(f"Error with '{symbol}': {e}")
+
+# Test that predefined values still work
+print("\nTesting predefined values still work:")
+for mul_symbol in [None, "ldot", "dot", "times"]:
+    result = latex(expr, mul_symbol=mul_symbol)
+    print(f"mul_symbol={mul_symbol}: {result}")
+
+# Test with numbers (should use mul_symbol_latex_numbers)
+print("\nTesting with numbers:")
+expr_with_numbers = 3*x*2*y
+for mul_symbol in [None, "dot", r"\,", "times"]:
+    result = latex(expr_with_numbers, mul_symbol=mul_symbol)
+    print(f"mul_symbol={mul_symbol}: {result}")
\ No newline at end of file
diff --git a/test_final.py b/test_final.py
new file mode 100644
index 0000000000..1c8b9c3b65
--- /dev/null
+++ b/test_final.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols
+
+def test_mul_symbol_functionality():
+    """Test that mul_symbol works with both predefined and custom values"""
+    
+    x, y = symbols('x y')
+    expr = 3*x**2*y
+    
+    print("Testing mul_symbol functionality:")
+    
+    # Test predefined values (should still work)
+    predefined_values = [None, "ldot", "dot", "times"]
+    expected_results = [
+        "3 x^{2} y",
+        r"3 \,.\, x^{2} \,.\, y", 
+        r"3 \cdot x^{2} \cdot y",
+        r"3 \times x^{2} \times y"
+    ]
+    
+    for i, mul_symbol in enumerate(predefined_values):
+        result = latex(expr, mul_symbol=mul_symbol)
+        expected = expected_results[i]
+        print(f"mul_symbol={mul_symbol}: {result}")
+        assert result == expected, f"Expected {expected}, got {result}"
+    
+    # Test custom values (the main feature requested)
+    custom_tests = [
+        (r"\,", r"3\,x^{2}\,y"),  # thin space (what the user wanted)
+        (r"\:", r"3\:x^{2}\:y"),  # medium space
+        (r"\quad", r"3\quadx^{2}\quady"),  # quad space
+    ]
+    
+    for mul_symbol, expected in custom_tests:
+        result = latex(expr, mul_symbol=mul_symbol)
+        print(f"mul_symbol='{mul_symbol}': {result}")
+        assert result == expected, f"Expected {expected}, got {result}"
+    
+    # Test the specific example from the issue
+    result = latex(3*x**2*y, mul_symbol=r"\, ")
+    expected = r"3\, x^{2}\, y"
+    print(f"mul_symbol='\, ' (issue example): {result}")
+    
+    print("All basic mul_symbol tests passed!")
+
+if __name__ == "__main__":
+    test_mul_symbol_functionality()
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..8b46bde37c
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from sympy import latex, symbols, Integral
+
+def test_github_issue():
+    """Test the specific example from the GitHub issue"""
+    
+    x, y = symbols('x y')
+    
+    # Test the specific example from the issue
+    print("Testing GitHub issue example:")
+    result = latex(3*x**2*y, mul_symbol=r"\, ")
+    expected = r"3\, x^{2}\, y"  # This is what the user wanted
+    print(f"latex(3*x**2*y, mul_symbol=r'\, '): {result}")
+    print(f"Expected: {expected}")
+    
+    # Also test the integral example mentioned
+    print("\nTesting integral example (should show thin space):")
+    integral_result = latex(Integral(2*x**2*y, x))
+    print(f"latex(Integral(2*x**2*y, x)): {integral_result}")
+    
+    # The integral should show a thin space between y and dx
+    assert r"y\," in integral_result, "Integral should have thin space between y and dx"
+    
+    print("GitHub issue test passed!")
+
+if __name__ == "__main__":
+    test_github_issue()
\ No newline at end of file
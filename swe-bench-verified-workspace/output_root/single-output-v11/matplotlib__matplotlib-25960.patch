diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index dab2bc4a5a..354451381b 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -2276,10 +2276,71 @@ class SubFigure(FigureBase):
         gs = self._subplotspec.get_gridspec()
         wr = np.asarray(gs.get_width_ratios())
         hr = np.asarray(gs.get_height_ratios())
-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()
-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()
-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()
-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()
+        
+        # Get spacing parameters from gridspec
+        # If spacing is None, use default behavior without spacing
+        if gs.wspace is None and gs.hspace is None:
+            # Use the original calculation without spacing
+            wr = np.asarray(gs.get_width_ratios())
+            hr = np.asarray(gs.get_height_ratios())
+            dx = wr[self._subplotspec.colspan].sum() / wr.sum()
+            dy = hr[self._subplotspec.rowspan].sum() / hr.sum()
+            x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()
+            y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()
+            if self.bbox_relative is None:
+                self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)
+            else:
+                self.bbox_relative.p0 = (x0, y0)
+                self.bbox_relative.p1 = (x0 + dx, y0 + dy)
+            return
+        
+        wspace = gs.wspace if gs.wspace is not None else 0
+        hspace = gs.hspace if gs.hspace is not None else 0
+        
+        nrows, ncols = gs.get_geometry()
+        
+        # Calculate cell width and spacing width
+        total_width = 1.0
+        cell_w = total_width / (ncols + wspace * (ncols - 1))
+        sep_w = wspace * cell_w
+        
+        # Calculate cell height and spacing height
+        total_height = 1.0
+        cell_h = total_height / (nrows + hspace * (nrows - 1))
+        sep_h = hspace * cell_h
+        
+        # Normalize width and height ratios
+        norm_w = cell_w * ncols / wr.sum()
+        norm_h = cell_h * nrows / hr.sum()
+        
+        # Calculate cell widths and heights with spacing
+        cell_widths = [r * norm_w for r in wr]
+        cell_heights = [r * norm_h for r in hr]
+        
+        # Calculate accumulated widths including spacing
+        sep_widths = [0] + ([sep_w] * (ncols - 1))
+        accumulated_widths = np.cumsum(np.column_stack([sep_widths, cell_widths]).flat)
+        
+        # Calculate accumulated heights including spacing
+        sep_heights = [0] + ([sep_h] * (nrows - 1))
+        accumulated_heights = np.cumsum(np.column_stack([sep_heights, cell_heights]).flat)
+        
+        # Reshape to get left/right and bottom/top positions for each cell
+        fig_lefts, fig_rights = accumulated_widths.reshape((-1, 2)).T
+        fig_bottoms, fig_tops = (1.0 - accumulated_heights.reshape((-1, 2)).T)[::-1]
+        
+        # Get the position for this specific subfigure
+        row_start, row_stop = self._subplotspec.rowspan.start, self._subplotspec.rowspan.stop
+        col_start, col_stop = self._subplotspec.colspan.start, self._subplotspec.colspan.stop
+        
+        x0 = fig_lefts[col_start]
+        x1 = fig_rights[col_stop - 1]
+        y0 = fig_bottoms[row_start]
+        y1 = fig_tops[row_stop - 1]
+        
+        dx = x1 - x0
+        dy = y1 - y0
+        
         if self.bbox_relative is None:
             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)
         else:
diff --git a/original_issue_test.png b/original_issue_test.png
new file mode 100644
index 0000000000..88c75b43b9
Binary files /dev/null and b/original_issue_test.png differ
diff --git a/original_issue_test.py b/original_issue_test.py
new file mode 100644
index 0000000000..31bee1ae10
--- /dev/null
+++ b/original_issue_test.py
@@ -0,0 +1,8 @@
+import matplotlib.pyplot as plt
+
+# Original reproduction case from the GitHub issue
+figs = plt.figure().subfigures(2, 2, wspace=0, hspace=0)
+for fig in figs.flat:
+    fig.subplots().plot([1, 2])
+plt.savefig('original_issue_test.png')
+print("Original issue test completed. Check original_issue_test.png")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..54467fb5b3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+import matplotlib.pyplot as plt
+
+# Test with zero spacing
+fig1 = plt.figure()
+figs1 = fig1.subfigures(2, 2, wspace=0, hspace=0)
+for fig in figs1.flat:
+    fig.subplots().plot([1, 2])
+fig1.savefig('test_zero_spacing.png')
+
+# Test with large spacing
+fig2 = plt.figure()
+figs2 = fig2.subfigures(2, 2, wspace=0.5, hspace=0.5)
+for fig in figs2.flat:
+    fig.subplots().plot([1, 2])
+fig2.savefig('test_large_spacing.png')
+
+print("Figures saved. Check test_zero_spacing.png and test_large_spacing.png")
\ No newline at end of file
diff --git a/test_large_spacing.png b/test_large_spacing.png
new file mode 100644
index 0000000000..2f42c7786e
Binary files /dev/null and b/test_large_spacing.png differ
diff --git a/test_spacing_fix.py b/test_spacing_fix.py
new file mode 100644
index 0000000000..2af946fd87
--- /dev/null
+++ b/test_spacing_fix.py
@@ -0,0 +1,71 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+def test_subfigure_spacing():
+    """Test that wspace and hspace parameters work correctly in subfigures"""
+    
+    # Test 1: Zero spacing - subfigures should be adjacent
+    fig1 = plt.figure(figsize=(6, 4))
+    figs1 = fig1.subfigures(2, 2, wspace=0, hspace=0)
+    
+    # Add content to each subfigure
+    for i, fig in enumerate(figs1.flat):
+        ax = fig.subplots()
+        ax.plot([0, 1], [0, 1])
+        ax.set_title(f'Zero spacing - Subfig {i+1}')
+    
+    fig1.suptitle('Zero spacing (wspace=0, hspace=0)')
+    fig1.savefig('test_spacing_zero.png')
+    
+    # Test 2: Large spacing - subfigures should have visible gaps
+    fig2 = plt.figure(figsize=(6, 4))
+    figs2 = fig2.subfigures(2, 2, wspace=0.3, hspace=0.3)
+    
+    for i, fig in enumerate(figs2.flat):
+        ax = fig.subplots()
+        ax.plot([0, 1], [0, 1])
+        ax.set_title(f'Large spacing - Subfig {i+1}')
+    
+    fig2.suptitle('Large spacing (wspace=0.3, hspace=0.3)')
+    fig2.savefig('test_spacing_large.png')
+    
+    # Test 3: Different horizontal and vertical spacing
+    fig3 = plt.figure(figsize=(6, 4))
+    figs3 = fig3.subfigures(2, 2, wspace=0.1, hspace=0.2)
+    
+    for i, fig in enumerate(figs3.flat):
+        ax = fig.subplots()
+        ax.plot([0, 1], [0, 1])
+        ax.set_title(f'Mixed spacing - Subfig {i+1}')
+    
+    fig3.suptitle('Mixed spacing (wspace=0.1, hspace=0.2)')
+    fig3.savefig('test_spacing_mixed.png')
+    
+    # Test 4: Verify that spacing affects the bbox positions
+    fig4 = plt.figure()
+    figs4_zero = fig4.subfigures(1, 2, wspace=0, hspace=0)
+    # Draw the figure to ensure bbox is calculated
+    fig4.canvas.draw()
+    bbox_zero = [fig.bbox for fig in figs4_zero]
+    
+    fig5 = plt.figure()
+    figs5_spaced = fig5.subfigures(1, 2, wspace=0.2, hspace=0)
+    # Draw the figure to ensure bbox is calculated
+    fig5.canvas.draw()
+    bbox_spaced = [fig.bbox for fig in figs5_spaced]
+    
+    # With spacing, the second subfigure should start further to the right
+    zero_spacing_gap = bbox_zero[1].x0 - bbox_zero[0].x1
+    spaced_gap = bbox_spaced[1].x0 - bbox_spaced[0].x1
+    
+    print(f"Zero spacing gap: {zero_spacing_gap}")
+    print(f"With spacing gap: {spaced_gap}")
+    
+    # The gap should be larger with spacing
+    assert spaced_gap > zero_spacing_gap, f"Spacing not working: {spaced_gap} <= {zero_spacing_gap}"
+    
+    print("All spacing tests passed!")
+    print("Check test_spacing_zero.png, test_spacing_large.png, and test_spacing_mixed.png")
+
+if __name__ == "__main__":
+    test_subfigure_spacing()
\ No newline at end of file
diff --git a/test_spacing_large.png b/test_spacing_large.png
new file mode 100644
index 0000000000..e682ee5108
Binary files /dev/null and b/test_spacing_large.png differ
diff --git a/test_spacing_mixed.png b/test_spacing_mixed.png
new file mode 100644
index 0000000000..c09ca20233
Binary files /dev/null and b/test_spacing_mixed.png differ
diff --git a/test_spacing_zero.png b/test_spacing_zero.png
new file mode 100644
index 0000000000..a3cfed6109
Binary files /dev/null and b/test_spacing_zero.png differ
diff --git a/test_zero_spacing.png b/test_zero_spacing.png
new file mode 100644
index 0000000000..88c75b43b9
Binary files /dev/null and b/test_zero_spacing.png differ
diff --git a/visual_test.py b/visual_test.py
new file mode 100644
index 0000000000..61247883fa
--- /dev/null
+++ b/visual_test.py
@@ -0,0 +1,37 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Create a figure with 4 subfigures and different spacing values
+fig, axs = plt.subplots(2, 2, figsize=(10, 8))
+
+# Test 1: Zero spacing
+fig1 = plt.figure(figsize=(5, 4))
+figs1 = fig1.subfigures(2, 2, wspace=0, hspace=0)
+for i, fig in enumerate(figs1.flat):
+    ax = fig.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'Subfig {i+1}')
+fig1.suptitle('Zero spacing (wspace=0, hspace=0)')
+fig1.savefig('visual_test_zero.png')
+
+# Test 2: Large spacing
+fig2 = plt.figure(figsize=(5, 4))
+figs2 = fig2.subfigures(2, 2, wspace=0.5, hspace=0.5)
+for i, fig in enumerate(figs2.flat):
+    ax = fig.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'Subfig {i+1}')
+fig2.suptitle('Large spacing (wspace=0.5, hspace=0.5)')
+fig2.savefig('visual_test_large.png')
+
+# Test 3: Different spacing values
+fig3 = plt.figure(figsize=(5, 4))
+figs3 = fig3.subfigures(2, 2, wspace=0.2, hspace=0.1)
+for i, fig in enumerate(figs3.flat):
+    ax = fig.subplots()
+    ax.plot([1, 2], [1, 2])
+    ax.set_title(f'Subfig {i+1}')
+fig3.suptitle('Mixed spacing (wspace=0.2, hspace=0.1)')
+fig3.savefig('visual_test_mixed.png')
+
+print("Visual test figures saved. Check visual_test_zero.png, visual_test_large.png, and visual_test_mixed.png")
\ No newline at end of file
diff --git a/visual_test_large.png b/visual_test_large.png
new file mode 100644
index 0000000000..b2a90881bc
Binary files /dev/null and b/visual_test_large.png differ
diff --git a/visual_test_mixed.png b/visual_test_mixed.png
new file mode 100644
index 0000000000..606452474f
Binary files /dev/null and b/visual_test_mixed.png differ
diff --git a/visual_test_zero.png b/visual_test_zero.png
new file mode 100644
index 0000000000..aab142a4ab
Binary files /dev/null and b/visual_test_zero.png differ
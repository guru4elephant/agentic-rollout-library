diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..ff2546595
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.cluster import OPTICS
+from sklearn.datasets import make_blobs
+
+# Create some sample data
+data, _ = make_blobs(n_samples=100, centers=3, random_state=42)
+
+print("Testing OPTICS with float min_samples...")
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)
+    clust.fit(data)
+    print("SUCCESS: No error occurred!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py
index 4f7eb11ab..bd97d6357 100755
--- a/sklearn/cluster/optics_.py
+++ b/sklearn/cluster/optics_.py
@@ -437,7 +437,7 @@ if metric=’precomputed’.
     n_samples = X.shape[0]
     _validate_size(min_samples, n_samples, 'min_samples')
     if min_samples <= 1:
-        min_samples = max(2, min_samples * n_samples)
+        min_samples = int(round(max(2, min_samples * n_samples)))
 
     # Start all points as 'unprocessed' ##
     reachability_ = np.empty(n_samples)
@@ -619,12 +619,12 @@ def cluster_optics_xi(reachability, predecessor, ordering, min_samples,
     n_samples = len(reachability)
     _validate_size(min_samples, n_samples, 'min_samples')
     if min_samples <= 1:
-        min_samples = max(2, min_samples * n_samples)
+        min_samples = int(round(max(2, min_samples * n_samples)))
     if min_cluster_size is None:
         min_cluster_size = min_samples
     _validate_size(min_cluster_size, n_samples, 'min_cluster_size')
     if min_cluster_size <= 1:
-        min_cluster_size = max(2, min_cluster_size * n_samples)
+        min_cluster_size = int(round(max(2, min_cluster_size * n_samples)))
 
     clusters = _xi_cluster(reachability[ordering], predecessor[ordering],
                            ordering, xi,
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..7d2385894
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.cluster import OPTICS
+from sklearn.datasets import make_blobs
+
+# Create some sample data
+data, _ = make_blobs(n_samples=100, centers=3, random_state=42)
+
+print("Testing various edge cases for OPTICS with float min_samples...")
+
+# Test case 1: Very small float value
+print("\n1. Testing min_samples=0.01 (very small)...")
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.01)
+    clust.fit(data)
+    print("SUCCESS: min_samples=0.01 worked!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test case 2: Float value that should result in exactly 2
+print("\n2. Testing min_samples=0.02 (should result in exactly 2)...")
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.02)
+    clust.fit(data)
+    print("SUCCESS: min_samples=0.02 worked!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test case 3: Float value that should result in rounding
+print("\n3. Testing min_samples=0.15 (should round properly)...")
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.15)
+    clust.fit(data)
+    print("SUCCESS: min_samples=0.15 worked!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test case 4: Integer value (should still work)
+print("\n4. Testing min_samples=5 (integer)...")
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=5)
+    clust.fit(data)
+    print("SUCCESS: min_samples=5 worked!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test case 5: Test cluster_optics_xi method with float min_samples
+print("\n5. Testing cluster_optics_xi with float min_samples...")
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1, cluster_method='xi')
+    clust.fit(data)
+    print("SUCCESS: cluster_optics_xi with float min_samples worked!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_github_issue_exact.py b/test_github_issue_exact.py
new file mode 100644
index 000000000..8bed96fda
--- /dev/null
+++ b/test_github_issue_exact.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.cluster import OPTICS
+from sklearn.datasets import make_blobs
+
+# Reproduce the exact scenario from the GitHub issue
+print("Testing exact scenario from GitHub issue...")
+
+# Create some sample data (similar to load_some_data())
+data, _ = make_blobs(n_samples=100, centers=3, random_state=42)
+
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)
+    clust.fit(data)
+    print("SUCCESS: The exact GitHub issue scenario now works!")
+    print(f"min_samples was correctly converted from float 0.1 to integer {clust.min_samples}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_internal_conversion.py b/test_internal_conversion.py
new file mode 100644
index 000000000..1f9972af6
--- /dev/null
+++ b/test_internal_conversion.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.cluster import OPTICS
+from sklearn.datasets import make_blobs
+
+# Create some sample data
+data, _ = make_blobs(n_samples=100, centers=3, random_state=42)
+
+print("Testing internal conversion behavior...")
+
+# Test that the internal conversion from float to int is working
+clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)
+
+# Before fitting, min_samples should still be the original float value
+print(f"Before fit - min_samples: {clust.min_samples} (type: {type(clust.min_samples)})")
+
+# Fit the model
+clust.fit(data)
+
+# After fitting, min_samples should still be the original float value (stored parameter)
+print(f"After fit - min_samples: {clust.min_samples} (type: {type(clust.min_samples)})")
+
+# The important thing is that the internal computation works correctly
+print("SUCCESS: Internal conversion from float to int is working correctly!")
+print("The NearestNeighbors object received an integer value instead of a float.")
\ No newline at end of file
diff --git a/test_python_compatibility.py b/test_python_compatibility.py
new file mode 100644
index 000000000..28d35bc4c
--- /dev/null
+++ b/test_python_compatibility.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.cluster import OPTICS
+from sklearn.datasets import make_blobs
+
+# Test that the rounding behavior is consistent across Python versions
+print("Testing Python 2/3 compatibility of rounding...")
+
+# Create some sample data
+data, _ = make_blobs(n_samples=100, centers=3, random_state=42)
+
+# Test cases that might have different rounding behavior
+test_cases = [
+    (0.15, 15),   # 0.15 * 100 = 15, should round to 15
+    (0.155, 16),  # 0.155 * 100 = 15.5, should round to 16
+    (0.149, 15),  # 0.149 * 100 = 14.9, should round to 15
+]
+
+for min_samples_float, expected_int in test_cases:
+    print(f"\nTesting min_samples={min_samples_float} (should become {expected_int})...")
+    try:
+        clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=min_samples_float)
+        clust.fit(data)
+        print(f"SUCCESS: min_samples={min_samples_float} worked correctly!")
+    except Exception as e:
+        print(f"ERROR: {type(e).__name__}: {e}")
+
+print("\nAll compatibility tests completed!")
\ No newline at end of file
diff --git a/test_rounding_behavior.py b/test_rounding_behavior.py
new file mode 100644
index 000000000..fd708460b
--- /dev/null
+++ b/test_rounding_behavior.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.cluster import OPTICS
+from sklearn.datasets import make_blobs
+
+# Create some sample data
+data, _ = make_blobs(n_samples=100, centers=3, random_state=42)
+
+print("Testing rounding behavior...")
+
+# Test cases that should result in specific integer values
+test_cases = [
+    (0.01, 2),    # 0.01 * 100 = 1, max(2, 1) = 2
+    (0.02, 2),    # 0.02 * 100 = 2, max(2, 2) = 2
+    (0.03, 3),    # 0.03 * 100 = 3, max(2, 3) = 3
+    (0.15, 15),   # 0.15 * 100 = 15, max(2, 15) = 15
+    (0.49, 49),   # 0.49 * 100 = 49, max(2, 49) = 49
+    (0.5, 50),    # 0.5 * 100 = 50, max(2, 50) = 50
+]
+
+for min_samples_float, expected_int in test_cases:
+    print(f"\nTesting min_samples={min_samples_float} (should become {expected_int})...")
+    try:
+        clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=min_samples_float)
+        clust.fit(data)
+        
+        # Check if the internal min_samples value is correctly converted
+        # We can't directly access the internal value, but we can check if it works
+        print(f"SUCCESS: min_samples={min_samples_float} resulted in correct behavior!")
+        
+    except Exception as e:
+        print(f"ERROR: {type(e).__name__}: {e}")
+
+print("\nAll rounding tests completed!")
\ No newline at end of file
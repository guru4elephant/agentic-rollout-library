diff --git a/django/utils/timesince.py b/django/utils/timesince.py
index 701c49bab9..f052116849 100644
--- a/django/utils/timesince.py
+++ b/django/utils/timesince.py
@@ -97,6 +97,8 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
             d.hour,
             d.minute,
             d.second,
+            d.microsecond,
+            d.tzinfo,
         )
     else:
         pivot = d
diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 0000000000..f6cbe9a90a
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the timesince fix handles all scenarios.
+"""
+
+import datetime
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[],
+        DATABASES={}
+    )
+
+django.setup()
+
+from django.utils import timezone
+from django.utils.timesince import timesince
+
+def test_comprehensive_scenarios():
+    """Test comprehensive scenarios for timesince()."""
+    print("Testing comprehensive scenarios...")
+    
+    now = timezone.now()
+    
+    # Test 1: Original issue - timezone-aware datetime with >1 month interval
+    print("\n1. Testing original issue scenario...")
+    d1 = now - datetime.timedelta(days=31)
+    result1 = timesince(d1)
+    print(f"   Result: {result1}")
+    assert "month" in result1
+    
+    # Test 2: Timezone-aware datetime with exactly 1 month
+    print("\n2. Testing exactly 1 month...")
+    d2 = now - datetime.timedelta(days=30)
+    result2 = timesince(d2)
+    print(f"   Result: {result2}")
+    assert "month" in result2
+    
+    # Test 3: Timezone-aware datetime with multiple months
+    print("\n3. Testing multiple months...")
+    d3 = now - datetime.timedelta(days=93)
+    result3 = timesince(d3)
+    print(f"   Result: {result3}")
+    assert "month" in result3
+    
+    # Test 4: Naive datetime with >1 month interval (should work)
+    print("\n4. Testing naive datetime...")
+    naive_d = datetime.datetime.now() - datetime.timedelta(days=31)
+    result4 = timesince(naive_d)
+    print(f"   Result: {result4}")
+    
+    # Test 5: Edge case - leap year calculation
+    print("\n5. Testing leap year scenario...")
+    # Create a specific date around February to test leap year handling
+    test_date = datetime.datetime(2024, 2, 15, tzinfo=datetime.timezone.utc)
+    d5 = test_date - datetime.timedelta(days=31)
+    result5 = timesince(d5, now=test_date)
+    print(f"   Result: {result5}")
+    
+    # Test 6: Verify no TypeError is raised
+    print("\n6. Testing that no TypeError is raised...")
+    try:
+        d6 = now - datetime.timedelta(days=35)
+        result6 = timesince(d6)
+        print(f"   Result: {result6}")
+        print("   ✓ No TypeError raised")
+    except TypeError as e:
+        print(f"   ✗ TypeError raised: {e}")
+        raise
+    
+    print("\nAll comprehensive tests passed!")
+
+if __name__ == "__main__":
+    test_comprehensive_scenarios()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0dd0bc1c52
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the timesince() TypeError with USE_TZ=True and >1 month interval.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.utils import timezone
+from django.utils.timesince import timesince
+import datetime
+
+def test_timesince_issue():
+    """Test the timesince issue with USE_TZ=True and >1 month interval."""
+    print("Testing timesince() with USE_TZ=True and >1 month interval...")
+    
+    try:
+        now = timezone.now()
+        print(f"Current time (aware): {now}")
+        print(f"Timezone info: {now.tzinfo}")
+        
+        # Create a datetime that's 31 days in the past
+        d = now - datetime.timedelta(days=31)
+        print(f"Past time (aware): {d}")
+        print(f"Timezone info: {d.tzinfo}")
+        
+        # This should trigger the TypeError
+        result = timesince(d)
+        print(f"timesince result: {result}")
+        
+    except Exception as e:
+        print(f"Error occurred: {type(e).__name__}: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_timesince_issue()
+    if success:
+        print("Test passed - no error occurred")
+    else:
+        print("Test failed - error reproduced")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..2374eb3a7e
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify our fix works with the existing test structure.
+"""
+
+import datetime
+from django.test import TestCase
+from django.test.utils import requires_tz_support
+from django.utils import timezone
+from django.utils.timesince import timesince
+from django.test.utils import override_settings
+
+
+class TestTimesinceFix(TestCase):
+    """Test the timesince fix for timezone-aware datetimes."""
+    
+    @requires_tz_support
+    @override_settings(USE_TZ=True)
+    def test_long_interval_with_tz(self):
+        """Test that timesince works with long intervals and timezone-aware datetimes."""
+        now = timezone.now()
+        d = now - datetime.timedelta(days=31)
+        result = timesince(d)
+        # Should not raise TypeError and should return a reasonable result
+        self.assertIn("month", result)
+        print(f"Test passed: {result}")
+
+if __name__ == "__main__":
+    import os
+    import django
+    from django.conf import settings
+    
+    # Configure Django settings
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+    
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            USE_TZ=True,
+            SECRET_KEY='test-secret-key',
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+            ],
+        )
+    
+    django.setup()
+    
+    # Run the test
+    test = TestTimesinceFix()
+    test.test_long_interval_with_tz()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f0edfc32eb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+"""
+Script to test edge cases for the timesince() fix.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.utils import timezone
+from django.utils.timesince import timesince
+import datetime
+
+def test_edge_cases():
+    """Test various edge cases for timesince()."""
+    print("Testing edge cases for timesince()...")
+    
+    now = timezone.now()
+    
+    # Test case 1: Exactly 1 month
+    print("\n1. Testing exactly 1 month...")
+    d1 = now - datetime.timedelta(days=31)
+    try:
+        result1 = timesince(d1)
+        print(f"   Result: {result1}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test case 2: More than 1 month
+    print("\n2. Testing more than 1 month...")
+    d2 = now - datetime.timedelta(days=62)
+    try:
+        result2 = timesince(d2)
+        print(f"   Result: {result2}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test case 3: Less than 1 month (should work regardless)
+    print("\n3. Testing less than 1 month...")
+    d3 = now - datetime.timedelta(days=15)
+    try:
+        result3 = timesince(d3)
+        print(f"   Result: {result3}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test case 4: Naive datetime (should still work)
+    print("\n4. Testing naive datetime...")
+    naive_d = datetime.datetime.now()
+    try:
+        result4 = timesince(naive_d)
+        print(f"   Result: {result4}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test case 5: Different timezone
+    print("\n5. Testing different timezone...")
+    try:
+        import pytz
+        est_timezone = pytz.timezone('US/Eastern')
+        d5 = now.astimezone(est_timezone) - datetime.timedelta(days=31)
+        result5 = timesince(d5)
+        print(f"   Result: {result5}")
+    except ImportError:
+        print("   pytz not available, skipping timezone test")
+    except Exception as e:
+        print(f"   Error: {e}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_timesince_only.py b/test_timesince_only.py
new file mode 100644
index 0000000000..4e09e8278c
--- /dev/null
+++ b/test_timesince_only.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+"""
+Test only the timesince functionality without database dependencies.
+"""
+
+import datetime
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings without database
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[],
+        DATABASES={}
+    )
+
+django.setup()
+
+from django.utils import timezone
+from django.utils.timesince import timesince
+
+def test_timesince_functionality():
+    """Test the core timesince functionality."""
+    print("Testing timesince functionality...")
+    
+    # Test 1: Basic functionality with timezone-aware datetime
+    now = timezone.now()
+    d = now - datetime.timedelta(days=31)
+    result = timesince(d)
+    print(f"Test 1 - 1 month ago: {result}")
+    assert "month" in result
+    
+    # Test 2: Less than 1 month
+    d2 = now - datetime.timedelta(days=15)
+    result2 = timesince(d2)
+    print(f"Test 2 - 15 days ago: {result2}")
+    assert "day" in result2 or "week" in result2
+    
+    # Test 3: More than 1 month
+    d3 = now - datetime.timedelta(days=62)
+    result3 = timesince(d3)
+    print(f"Test 3 - 62 days ago: {result3}")
+    assert "month" in result3
+    
+    # Test 4: Naive datetime (should still work)
+    naive_d = datetime.datetime.now()
+    result4 = timesince(naive_d)
+    print(f"Test 4 - Naive datetime: {result4}")
+    
+    # Test 5: Edge case - exactly at threshold
+    d5 = now - datetime.timedelta(days=30)
+    result5 = timesince(d5)
+    print(f"Test 5 - 30 days ago: {result5}")
+    
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_timesince_functionality()
\ No newline at end of file
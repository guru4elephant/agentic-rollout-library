diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7e1c7e7c41
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+import sympy
+from sympy import symbols, trigsimp, cos, sin
+from sympy.algebras.quaternion import Quaternion
+
+print('Sympy version: ', sympy.__version__)
+
+x = symbols('x')
+q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+result = trigsimp(q.to_rotation_matrix())
+print("Result:")
+print(result)
+
+# Expected result should have -sin(x) in (1,2) position and sin(x) in (2,1) position
+expected_result = sympy.Matrix([
+    [1,      0,      0],
+    [0, cos(x), -sin(x)],
+    [0, sin(x), cos(x)]
+])
+
+print("\nExpected result:")
+print(expected_result)
+
+print("\nAre results equal?")
+print(result.equals(expected_result))
\ No newline at end of file
diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py
index b84e7cb95a..7eae8d73d0 100644
--- a/sympy/algebras/quaternion.py
+++ b/sympy/algebras/quaternion.py
@@ -529,7 +529,7 @@ def to_rotation_matrix(self, v=None):
 
         m10 = 2*s*(q.b*q.c + q.d*q.a)
         m11 = 1 - 2*s*(q.b**2 + q.d**2)
-        m12 = 2*s*(q.c*q.d + q.b*q.a)
+        m12 = 2*s*(q.c*q.d - q.b*q.a)
 
         m20 = 2*s*(q.b*q.d - q.c*q.a)
         m21 = 2*s*(q.c*q.d + q.b*q.a)
diff --git a/test_original_behavior.py b/test_original_behavior.py
new file mode 100644
index 0000000000..710d2008b0
--- /dev/null
+++ b/test_original_behavior.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, trigsimp, cos, sin
+from sympy.algebras.quaternion import Quaternion
+
+x = symbols('x')
+
+# Test the specific case from the GitHub issue
+print("Testing the GitHub issue case:")
+q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+result = trigsimp(q.to_rotation_matrix())
+print("Result:")
+print(result)
+
+# Let's also test a simple numeric case to see the pattern
+print("\nTesting numeric case (rotation around x-axis by 90 degrees):")
+import math
+q_num = Quaternion(math.cos(math.pi/4), math.sin(math.pi/4), 0, 0)  # 90 degree rotation around x
+result_num = q_num.to_rotation_matrix()
+print("Result:")
+print(result_num)
+
+# What should a 90 degree rotation around x-axis look like?
+# It should be:
+# [1,  0,  0]
+# [0,  0, -1] 
+# [0,  1,  0]
+print("\nExpected for 90 degree rotation around x:")
+print("[[1, 0, 0], [0, 0, -1], [0, 1, 0]]")
\ No newline at end of file
diff --git a/test_rotation_axis.py b/test_rotation_axis.py
new file mode 100644
index 0000000000..02d872fc87
--- /dev/null
+++ b/test_rotation_axis.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, trigsimp, cos, sin
+from sympy.algebras.quaternion import Quaternion
+
+x = symbols('x')
+
+# Test case from the test file (rotation around z-axis)
+print("Rotation around z-axis:")
+q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))
+result_z = trigsimp(q_z.to_rotation_matrix())
+print(result_z)
+
+print("\nRotation around x-axis (our case):")
+q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)
+result_x = trigsimp(q_x.to_rotation_matrix())
+print(result_x)
+
+print("\nWhat should rotation around x-axis look like?")
+# For rotation around x-axis by angle x, the matrix should be:
+# [1, 0, 0]
+# [0, cos(x), -sin(x)] 
+# [0, sin(x), cos(x)]
+expected_x = [
+    [1, 0, 0],
+    [0, cos(x), -sin(x)],
+    [0, sin(x), cos(x)]
+]
+print(expected_x)
\ No newline at end of file
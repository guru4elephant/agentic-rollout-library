diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..2b402b3c42 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1025,7 +1025,13 @@ class MultiValueField(Field):
             if not value or not [v for v in value if v not in self.empty_values]:
                 if self.required:
                     raise ValidationError(self.error_messages['required'], code='required')
+                elif not self.require_all_fields:
+                    # Continue to validate individual fields even when all values are empty
+                    # This handles the case where require_all_fields=False
+                    pass
                 else:
+                    # Return early if all fields are empty and the MultiValueField is not required
+                    # This allows empty values for optional MultiValueFields
                     return self.compress([])
         else:
             raise ValidationError(self.error_messages['invalid'], code='invalid')
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c56b171d47
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+"""Script to reproduce the MultiValueField issue."""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+        INSTALLED_APPS=[],
+    )
+
+django.setup()
+
+from django.forms import (
+    Form,
+    CharField,
+    MultiValueField,
+    MultiWidget,
+)
+
+class MF(MultiValueField):
+    widget = MultiWidget
+    
+    def __init__(self):
+        fields = [
+            CharField(required=False),
+            CharField(required=True),
+        ]
+        widget = self.widget(widgets=[
+            f.widget
+            for f in fields
+        ], attrs={})
+        super(MF, self).__init__(
+            fields=fields,
+            widget=widget,
+            require_all_fields=False,
+            required=False,
+        )
+    
+    def compress(self, value):
+        return []
+
+class F(Form):
+    mf = MF()
+
+def test_case_1():
+    """Test case 1: Both sub-fields empty - should return False but returns True"""
+    print("Test case 1: Both sub-fields empty")
+    f = F({
+        'mf_0': '',
+        'mf_1': '',
+    })
+    result = f.is_valid()
+    print(f"Form is_valid(): {result}")
+    print(f"Expected: False, Got: {result}")
+    print(f"Test passes: {result == False}")
+    return result
+
+def test_case_2():
+    """Test case 2: First sub-field filled, second empty - should return False and does"""
+    print("\nTest case 2: First sub-field filled, second empty")
+    f = F({
+        'mf_0': 'xxx',
+        'mf_1': '',
+    })
+    result = f.is_valid()
+    print(f"Form is_valid(): {result}")
+    print(f"Expected: False, Got: {result}")
+    print(f"Test passes: {result == False}")
+    return result
+
+def test_case_3():
+    """Test case 3: Both sub-fields filled - should return True"""
+    print("\nTest case 3: Both sub-fields filled")
+    f = F({
+        'mf_0': 'xxx',
+        'mf_1': 'yyy',
+    })
+    result = f.is_valid()
+    print(f"Form is_valid(): {result}")
+    print(f"Expected: True, Got: {result}")
+    print(f"Test passes: {result == True}")
+    return result
+
+if __name__ == '__main__':
+    print("Reproducing MultiValueField issue...")
+    
+    result1 = test_case_1()
+    result2 = test_case_2()
+    result3 = test_case_3()
+    
+    print(f"\nSummary:")
+    print(f"Test case 1 (both empty): {'PASS' if result1 == False else 'FAIL'}")
+    print(f"Test case 2 (first filled): {'PASS' if result2 == False else 'FAIL'}")
+    print(f"Test case 3 (both filled): {'PASS' if result3 == True else 'FAIL'}")
+    
+    # The issue is that test case 1 should return False but returns True
+    if result1 == True:
+        print("\nISSUE CONFIRMED: MultiValueField ignores required sub-field when all values are empty")
+        sys.exit(1)
+    else:
+        print("\nISSUE NOT REPRODUCED: MultiValueField behaves correctly")
+        sys.exit(0)
\ No newline at end of file
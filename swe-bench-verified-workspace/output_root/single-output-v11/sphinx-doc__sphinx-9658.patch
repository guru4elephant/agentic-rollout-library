diff --git a/debug_mock.py b/debug_mock.py
new file mode 100644
index 000000000..f8c79de0f
--- /dev/null
+++ b/debug_mock.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand mocked object attributes.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass, ismock
+
+# Create a mocked torch.nn.Module
+mock_module = _make_subclass('Module', 'torch.nn')()
+
+print("Mock object attributes:")
+print(f"dir(mock_module): {dir(mock_module)}")
+print(f"type(mock_module): {type(mock_module)}")
+print(f"type(mock_module).__name__: {type(mock_module).__name__}")
+print(f"type(mock_module).__qualname__: {getattr(type(mock_module), '__qualname__', 'N/A')}")
+print(f"type(mock_module).__module__: {type(mock_module).__module__}")
+
+# Check what happens when we access __qualname__ on the instance
+print(f"mock_module.__qualname__: {getattr(mock_module, '__qualname__', 'N/A')}")
+
+# Check what happens when we access __name__ on the instance
+print(f"mock_module.__name__: {getattr(mock_module, '__name__', 'N/A')}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..3daf46a63
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with mocked base classes not being correctly documented.
+"""
+
+import sys
+import os
+sys.path.insert(0, '.')
+
+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass, ismock
+from sphinx.util.typing import restify
+
+# Create a mocked torch.nn.Module
+mock_module = _make_subclass('Module', 'torch.nn')()
+
+# Check if it's mocked
+print(f"Is mock_module mocked? {ismock(mock_module)}")
+print(f"mock_module.__display_name__: {mock_module.__display_name__}")
+
+# Test restify on the mocked module
+result = restify(mock_module)
+print(f"restify(mock_module): {result}")
+
+# Create a class that inherits from the mocked module
+class DeepKernel(mock_module):
+    pass
+
+# Get the base classes
+bases = DeepKernel.__bases__
+print(f"DeepKernel bases: {bases}")
+
+# Test restify on the base class
+for base in bases:
+    print(f"restify(base): {restify(base)}")
+    print(f"base.__module__: {base.__module__}")
+    print(f"base.__name__: {base.__name__}")
+    print(f"base.__qualname__: {getattr(base, '__qualname__', 'N/A')}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 2b4504101..d865b8b37 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 87707d48f..3fd7d5624 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -107,8 +107,16 @@ def is_system_TypeVar(typ: Any) -> bool:
 def restify(cls: Optional[Type]) -> str:
     """Convert python class to a reST reference."""
     from sphinx.util import inspect  # lazy loading
+    from sphinx.ext.autodoc.mock import ismock  # lazy loading
 
     try:
+        # Handle mocked objects first
+        if ismock(cls):
+            if hasattr(cls, '__display_name__'):
+                return ':py:class:`%s`' % cls.__display_name__
+            else:
+                # Fallback for mocked objects without display name
+                return ':py:class:`%s.%s`' % (cls.__module__, getattr(cls, '__name__', 'Unknown'))
         if cls is None or cls is NoneType:
             return ':py:obj:`None`'
         elif cls is Ellipsis:
@@ -150,6 +158,15 @@ def restify(cls: Optional[Type]) -> str:
 def _restify_py37(cls: Optional[Type]) -> str:
     """Convert python class to a reST reference."""
     from sphinx.util import inspect  # lazy loading
+    from sphinx.ext.autodoc.mock import ismock  # lazy loading
+
+    # Handle mocked objects first
+    if ismock(cls):
+        if hasattr(cls, '__display_name__'):
+            return ':py:class:`%s`' % cls.__display_name__
+        else:
+            # Fallback for mocked objects without display name
+            return ':py:class:`%s.%s`' % (cls.__module__, getattr(cls, '__name__', 'Unknown'))
 
     if (inspect.isgenericalias(cls) and
             cls.__module__ == 'typing' and cls.__origin__ is Union):
@@ -207,6 +224,16 @@ def _restify_py37(cls: Optional[Type]) -> str:
 
 
 def _restify_py36(cls: Optional[Type]) -> str:
+    from sphinx.ext.autodoc.mock import ismock  # lazy loading
+
+    # Handle mocked objects first
+    if ismock(cls):
+        if hasattr(cls, '__display_name__'):
+            return ':py:class:`%s`' % cls.__display_name__
+        else:
+            # Fallback for mocked objects without display name
+            return ':py:class:`%s.%s`' % (cls.__module__, getattr(cls, '__name__', 'Unknown'))
+
     module = getattr(cls, '__module__', None)
     if module == 'typing':
         if getattr(cls, '_name', None):
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..c03b1a2c5
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for mocked object handling in restify function.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass, ismock
+from sphinx.util.typing import restify
+
+# Test 1: Basic mocked object
+print("=== Test 1: Basic mocked object ===")
+mock_module = _make_subclass('Module', 'torch.nn')()
+print(f"Is mock_module mocked? {ismock(mock_module)}")
+print(f"mock_module.__display_name__: {mock_module.__display_name__}")
+print(f"restify(mock_module): {restify(mock_module)}")
+
+# Test 2: Mocked object without display name (edge case)
+print("\n=== Test 2: Mocked object without display name ===")
+class MockWithoutDisplay(_MockObject):
+    pass
+
+mock_no_display = MockWithoutDisplay()
+print(f"Is mock_no_display mocked? {ismock(mock_no_display)}")
+print(f"Has __display_name__: {hasattr(mock_no_display, '__display_name__')}")
+print(f"restify(mock_no_display): {restify(mock_no_display)}")
+
+# Test 3: Mocked object with custom module and name
+print("\n=== Test 3: Mocked object with custom module and name ===")
+mock_custom = _make_subclass('CustomClass', 'custom.module')()
+print(f"Is mock_custom mocked? {ismock(mock_custom)}")
+print(f"mock_custom.__display_name__: {mock_custom.__display_name__}")
+print(f"restify(mock_custom): {restify(mock_custom)}")
+
+# Test 4: Non-mocked object (should work as before)
+print("\n=== Test 4: Non-mocked object ===")
+class NormalClass:
+    pass
+
+print(f"Is NormalClass mocked? {ismock(NormalClass)}")
+print(f"restify(NormalClass): {restify(NormalClass)}")
+
+# Test 5: Inheritance with mocked base
+print("\n=== Test 5: Inheritance with mocked base ===")
+class DerivedClass(mock_module):
+    pass
+
+bases = DerivedClass.__bases__
+print(f"DerivedClass bases: {bases}")
+for base in bases:
+    print(f"restify(base): {restify(base)}")
+
+# Test 6: Multiple inheritance with mocked bases
+print("\n=== Test 6: Multiple inheritance with mocked bases ===")
+mock_another = _make_subclass('AnotherClass', 'another.module')()
+class MultiDerived(mock_module, mock_another):
+    pass
+
+bases = MultiDerived.__bases__
+print(f"MultiDerived bases: {bases}")
+for base in bases:
+    print(f"restify(base): {restify(base)}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..d18e3698f
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+"""
+Test case that reproduces the exact issue from GitHub:
+Classes that inherit mocked classes should show correct base class names in documentation.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.ext.autodoc.mock import _make_subclass
+from sphinx.util.typing import restify
+
+# Reproduce the exact scenario from the GitHub issue
+# Mock torch.nn.Module
+torch_nn_module = _make_subclass('Module', 'torch.nn')()
+
+# Create a class that inherits from the mocked module (like DeepKernel)
+class DeepKernel(torch_nn_module):
+    """A deep kernel class that inherits from torch.nn.Module."""
+    pass
+
+# Get the base classes as Sphinx autodoc would
+bases = DeepKernel.__bases__
+print("DeepKernel base classes:")
+for base in bases:
+    print(f"  Base: {base}")
+    print(f"  Base type: {type(base)}")
+    print(f"  Base module: {base.__module__}")
+    print(f"  Base name: {base.__name__}")
+    print(f"  Base qualname: {getattr(base, '__qualname__', 'N/A')}")
+    print(f"  Base display_name: {getattr(base, '__display_name__', 'N/A')}")
+    
+    # This is what Sphinx autodoc calls to generate the "Bases:" section
+    restified = restify(base)
+    print(f"  restify(base): {restified}")
+    print()
+
+# The expected result should be ":py:class:`torch.nn.Module`"
+# instead of ":py:class:`torch.nn.`" (which was the bug)
+expected = ":py:class:`torch.nn.Module`"
+actual = restify(bases[0])
+
+print(f"Expected: {expected}")
+print(f"Actual: {actual}")
+print(f"Test passed: {expected == actual}")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index b6a67fd85..483f2df92 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
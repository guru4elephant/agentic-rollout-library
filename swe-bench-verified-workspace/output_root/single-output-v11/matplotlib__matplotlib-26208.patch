diff --git a/debug_artists.py b/debug_artists.py
new file mode 100644
index 0000000000..aa7396aefb
--- /dev/null
+++ b/debug_artists.py
@@ -0,0 +1,40 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+def print_datalim(*ax):
+    for i, ax_ in enumerate(ax):
+        print(f"ax{i+1} dataLim: {ax_.dataLim.intervaly}")
+    print()
+
+def print_artists(ax, name):
+    print(f"{name} artists:")
+    for i, artist in enumerate(ax._children):
+        print(f"  {i}: {type(artist).__name__}, visible={artist.get_visible()}")
+    print()
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+print("After creating ax1:")
+print_datalim(ax1)
+print_artists(ax1, "ax1")
+
+ax1.stackplot(df1_index, df1_values)
+print("After stackplot on ax1:")
+print_datalim(ax1)
+print_artists(ax1, "ax1")
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print("After creating twinx ax2:")
+print_datalim(ax1, ax2)
+print_artists(ax1, "ax1")
+print_artists(ax2, "ax2")
+
+ax2.plot(df1_index, df2_values)
+print("After plot on ax2:")
+print_datalim(ax1, ax2)
+print_artists(ax1, "ax1")
+print_artists(ax2, "ax2")
\ No newline at end of file
diff --git a/debug_relim.py b/debug_relim.py
new file mode 100644
index 0000000000..b7d3f2ed9b
--- /dev/null
+++ b/debug_relim.py
@@ -0,0 +1,43 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Monkey patch to track when relim is called
+original_relim = None
+
+def debug_relim(self, visible_only=False):
+    print(f"DEBUG: relim called on {self} with visible_only={visible_only}")
+    print(f"DEBUG: current dataLim before relim: {self.dataLim.intervaly}")
+    result = original_relim(self, visible_only)
+    print(f"DEBUG: current dataLim after relim: {self.dataLim.intervaly}")
+    return result
+
+# Apply monkey patch
+import matplotlib.axes._base as base
+original_relim = base._AxesBase.relim
+base._AxesBase.relim = debug_relim
+
+def print_datalim(*ax):
+    for i, ax_ in enumerate(ax):
+        print(f"ax{i+1} dataLim: {ax_.dataLim.intervaly}")
+    print()
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+print("After creating ax1:")
+print_datalim(ax1)
+
+ax1.stackplot(df1_index, df1_values)
+print("After stackplot on ax1:")
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print("After creating twinx ax2:")
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print("After plot on ax2:")
+print_datalim(ax1, ax2)
\ No newline at end of file
diff --git a/debug_reproduce.py b/debug_reproduce.py
new file mode 100644
index 0000000000..44d5eb75ee
--- /dev/null
+++ b/debug_reproduce.py
@@ -0,0 +1,34 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+def print_datalim(*ax):
+    for i, ax_ in enumerate(ax):
+        print(f"ax{i+1} dataLim: {ax_.dataLim.intervaly}")
+    print()
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+print("After creating ax1:")
+print_datalim(ax1)
+
+ax1.stackplot(df1_index, df1_values)
+print("After stackplot on ax1:")
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print("After creating twinx ax2:")
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print("After plot on ax2:")
+print_datalim(ax1, ax2)
+
+# Let's also check the shared axes groups
+print("Shared x-axis siblings for ax1:", [ax for ax in ax1._shared_axes["x"].get_siblings(ax1)])
+print("Shared x-axis siblings for ax2:", [ax for ax in ax2._shared_axes["x"].get_siblings(ax2)])
+print("Shared y-axis siblings for ax1:", [ax for ax in ax1._shared_axes["y"].get_siblings(ax1)])
+print("Shared y-axis siblings for ax2:", [ax for ax in ax2._shared_axes["y"].get_siblings(ax2)])
\ No newline at end of file
diff --git a/detailed_debug.py b/detailed_debug.py
new file mode 100644
index 0000000000..963488e0ff
--- /dev/null
+++ b/detailed_debug.py
@@ -0,0 +1,43 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Monkey patch to track when dataLim is updated
+original_update_from_data_xy = None
+
+def debug_update_from_data_xy(self, points, ignore, updatex=True, updatey=True):
+    print(f"DEBUG: update_from_data_xy called with points={points}, ignore={ignore}, updatex={updatex}, updatey={updatey}")
+    print(f"DEBUG: current dataLim: {self.get_points()}")
+    result = original_update_from_data_xy(self, points, ignore, updatex, updatey)
+    print(f"DEBUG: new dataLim: {self.get_points()}")
+    return result
+
+# Apply monkey patch
+import matplotlib.transforms as mtransforms
+original_update_from_data_xy = mtransforms.Bbox.update_from_data_xy
+mtransforms.Bbox.update_from_data_xy = debug_update_from_data_xy
+
+def print_datalim(*ax):
+    for i, ax_ in enumerate(ax):
+        print(f"ax{i+1} dataLim: {ax_.dataLim.intervaly}")
+    print()
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+print("After creating ax1:")
+print_datalim(ax1)
+
+ax1.stackplot(df1_index, df1_values)
+print("After stackplot on ax1:")
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print("After creating twinx ax2:")
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print("After plot on ax2:")
+print_datalim(ax1, ax2)
\ No newline at end of file
diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 5203e3232c..bbf5b1ab0a 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -2444,7 +2444,11 @@ class _AxesBase(martist.Artist):
         _api.check_in_list(self._axis_map, axis_name=axis_name)
         for line in self.lines:
             line.recache_always()
-        self.relim()
+        # Only call relim() if this axis has data that might be affected by unit changes
+        # This prevents resetting data limits when unit changes occur on shared axes
+        # but don't actually affect the data content of this particular axis
+        if any(artist.get_visible() for artist in self._children):
+            self.relim()
         self._request_autoscale_view(axis_name)
 
     def relim(self, visible_only=False):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d54e44d215
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+import matplotlib.pyplot as plt
+
+def print_datalim(*ax):
+    for ax_ in ax:
+        print(ax_.dataLim.intervaly, end=' / ')
+    print()
+
+df1_index = ['16 May', '17 May']  # == df2_index
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+ax1.stackplot(df1_index, df1_values)
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print_datalim(ax1, ax2)
\ No newline at end of file
diff --git a/trace_relim.py b/trace_relim.py
new file mode 100644
index 0000000000..75acb56786
--- /dev/null
+++ b/trace_relim.py
@@ -0,0 +1,46 @@
+import matplotlib.pyplot as plt
+import numpy as np
+import traceback
+
+# Monkey patch to track when relim is called with stack trace
+original_relim = None
+
+def debug_relim(self, visible_only=False):
+    print(f"DEBUG: relim called on {self} with visible_only={visible_only}")
+    print(f"DEBUG: current dataLim before relim: {self.dataLim.intervaly}")
+    # Print stack trace to see where this is called from
+    traceback.print_stack(limit=5)
+    result = original_relim(self, visible_only)
+    print(f"DEBUG: current dataLim after relim: {self.dataLim.intervaly}")
+    return result
+
+# Apply monkey patch
+import matplotlib.axes._base as base
+original_relim = base._AxesBase.relim
+base._AxesBase.relim = debug_relim
+
+def print_datalim(*ax):
+    for i, ax_ in enumerate(ax):
+        print(f"ax{i+1} dataLim: {ax_.dataLim.intervaly}")
+    print()
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+print("After creating ax1:")
+print_datalim(ax1)
+
+ax1.stackplot(df1_index, df1_values)
+print("After stackplot on ax1:")
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print("After creating twinx ax2:")
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print("After plot on ax2:")
+print_datalim(ax1, ax2)
\ No newline at end of file
diff --git a/debug_col_suffixes.py b/debug_col_suffixes.py
new file mode 100644
index 0000000000..21c504411c
--- /dev/null
+++ b/debug_col_suffixes.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock the quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+print("=== Debugging col_suffixes values ===")
+
+# Test case 1: Basic ascending order (empty col_suffix)
+print("Test 1 - Basic ascending order:")
+columns1 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=[''])
+print("col_suffixes:", columns1.col_suffixes)
+print("opclasses:", columns1.opclasses)
+result1 = str(columns1)
+print(f"Result: '{result1}'")
+
+# Test case 2: Descending order
+print("\nTest 2 - Descending order:")
+columns2 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[' DESC'], opclasses=[''])
+print("col_suffixes:", columns2.col_suffixes)
+print("opclasses:", columns2.opclasses)
+result2 = str(columns2)
+print(f"Result: '{result2}'")
+
+# Test case 3: Opclasses with ascending order (empty col_suffix)
+print("\nTest 3 - Opclasses with ascending order:")
+columns3 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=['text_pattern_ops'])
+print("col_suffixes:", columns3.col_suffixes)
+print("opclasses:", columns3.opclasses)
+result3 = str(columns3)
+print(f"Result: '{result3}'")
+
+# Test case 4: Opclasses with descending order
+print("\nTest 4 - Opclasses with descending order:")
+columns4 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[' DESC'], opclasses=['text_pattern_ops'])
+print("col_suffixes:", columns4.col_suffixes)
+print("opclasses:", columns4.opclasses)
+result4 = str(columns4)
+print(f"Result: '{result4}'")
\ No newline at end of file
diff --git a/debug_col_suffixes_detailed.py b/debug_col_suffixes_detailed.py
new file mode 100644
index 0000000000..bf45020a6c
--- /dev/null
+++ b/debug_col_suffixes_detailed.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock the quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+print("=== Debugging col_suffixes values in detail ===")
+
+# Test case 1: Basic ascending order (empty col_suffix)
+print("Test 1 - Basic ascending order:")
+columns1 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=[''])
+print("col_suffixes:", columns1.col_suffixes)
+print("col_suffixes[0]:", repr(columns1.col_suffixes[0]))
+print("len(col_suffixes[0]):", len(columns1.col_suffixes[0]))
+print("opclasses:", columns1.opclasses)
+result1 = str(columns1)
+print(f"Result: '{result1}'")
+
+# Test case 2: Descending order
+print("\nTest 2 - Descending order:")
+columns2 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=[''])
+print("col_suffixes:", columns2.col_suffixes)
+print("col_suffixes[0]:", repr(columns2.col_suffixes[0]))
+print("len(col_suffixes[0]):", len(columns2.col_suffixes[0]))
+print("opclasses:", columns2.opclasses)
+result2 = str(columns2)
+print(f"Result: '{result2}'")
+
+# Test case 3: Opclasses with ascending order (empty col_suffix)
+print("\nTest 3 - Opclasses with ascending order:")
+columns3 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=['text_pattern_ops'])
+print("col_suffixes:", columns3.col_suffixes)
+print("col_suffixes[0]:", repr(columns3.col_suffixes[0]))
+print("len(col_suffixes[0]):", len(columns3.col_suffixes[0]))
+print("opclasses:", columns3.opclasses)
+result3 = str(columns3)
+print(f"Result: '{result3}'")
+
+# Test case 4: Opclasses with descending order
+print("\nTest 4 - Opclasses with descending order:")
+columns4 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=['text_pattern_ops'])
+print("col_suffixes:", columns4.col_suffixes)
+print("col_suffixes[0]:", repr(columns4.col_suffixes[0]))
+print("len(col_suffixes[0]):", len(columns4.col_suffixes[0]))
+print("opclasses:", columns4.opclasses)
+result4 = str(columns4)
+print(f"Result: '{result4}'")
\ No newline at end of file
diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 44e49806f8..eb7c1f887d 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -112,9 +112,12 @@ class IndexColumns(Columns):
         def col_str(column, idx):
             # Index.__init__() guarantees that self.opclasses is the same
             # length as self.columns.
-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
+            col = self.quote_name(column)
+            if self.opclasses[idx]:
+                col = '{} {}'.format(col, self.opclasses[idx])
             try:
-                col = '{} {}'.format(col, self.col_suffixes[idx])
+                if self.col_suffixes[idx]:
+                    col = '{} {}'.format(col, self.col_suffixes[idx])
             except IndexError:
                 pass
             return col
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..19e993291d
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+"""
+Final verification that the GitHub issue is completely resolved.
+This script demonstrates that all the issues mentioned in the GitHub issue are fixed.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.backends.ddl_references import IndexColumns
+
+def quote_name(name):
+    return f'"{name}"'
+
+print("=" * 60)
+print("FINAL VERIFICATION: GitHub Issue #XXXXX")
+print("Use proper whitespace in CREATE INDEX statements")
+print("=" * 60)
+
+# Test the exact scenarios from the GitHub issue description
+print("\n1. ORIGINAL ISSUE: Index with descending order")
+print("   Expected: CREATE INDEX \"idx\" ON \"schema_author\" (\"name\" DESC)")
+index1 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=[''])
+result1 = str(index1)
+print(f"   Generated: CREATE INDEX \"idx\" ON \"schema_author\" ({result1})")
+print("   ✓ CORRECT:", result1 == '"name" DESC')
+
+print("\n2. MAIN ISSUE: Index with opclasses but no explicit ordering")
+print("   Expected: CREATE INDEX \"idx\" ON \"schema_author\" (\"name\" text_pattern_ops)")
+index2 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=['text_pattern_ops'])
+result2 = str(index2)
+print(f"   Generated: CREATE INDEX \"idx\" ON \"schema_author\" ({result2})")
+print(f"   ✓ CORRECT: {result2 == '"name" text_pattern_ops'}")
+
+print("\n3. Index with opclasses and descending order")
+print("   Expected: CREATE INDEX \"idx\" ON \"schema_author\" (\"name\" text_pattern_ops DESC)")
+index3 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=['text_pattern_ops'])
+result3 = str(index3)
+print(f"   Generated: CREATE INDEX \"idx\" ON \"schema_author\" ({result3})")
+print(f"   ✓ CORRECT: {result3 == '"name" text_pattern_ops DESC'}")
+
+print("\n" + "=" * 60)
+print("ADDITIONAL TEST CASES")
+print("=" * 60)
+
+# Test multiple columns
+print("\n4. Multiple columns with mixed orders")
+index4 = IndexColumns('schema_author', ['name', 'age'], quote_name, 
+                     col_suffixes=['', 'DESC'], opclasses=['', ''])
+result4 = str(index4)
+print(f"   Generated: CREATE INDEX \"idx\" ON \"schema_author\" ({result4})")
+print(f"   ✓ CORRECT: {result4 == '"name", "age" DESC'}")
+
+print("\n5. Multiple columns with opclasses")
+index5 = IndexColumns('schema_author', ['name', 'age'], quote_name, 
+                     col_suffixes=['', 'DESC'], opclasses=['text_pattern_ops', ''])
+result5 = str(index5)
+print(f"   Generated: CREATE INDEX \"idx\" ON \"schema_author\" ({result5})")
+print(f"   ✓ CORRECT: {result5 == '"name" text_pattern_ops, "age" DESC'}")
+
+print("\n" + "=" * 60)
+print("SUMMARY")
+print("=" * 60)
+all_tests_passed = all([
+    result1 == '"name" DESC',
+    result2 == '"name" text_pattern_ops',
+    result3 == '"name" text_pattern_ops DESC',
+    result4 == '"name", "age" DESC',
+    result5 == '"name" text_pattern_ops, "age" DESC'
+])
+
+if all_tests_passed:
+    print("🎉 ALL TESTS PASSED! The GitHub issue has been completely resolved.")
+    print("✅ No extra whitespace in CREATE INDEX statements")
+    print("✅ Proper formatting for all combinations of opclasses and ordering")
+else:
+    print("❌ Some tests failed. The issue is not completely resolved.")
+
+print("=" * 60)
\ No newline at end of file
diff --git a/reproduce_github_issue.py b/reproduce_github_issue.py
new file mode 100644
index 0000000000..c67b4c4b37
--- /dev/null
+++ b/reproduce_github_issue.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Index
+
+# Create a simple model for testing
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the exact scenarios from the GitHub issue
+print("=== Reproducing GitHub Issue Scenarios ===")
+
+# Test case 1: Index with descending order (should generate proper SQL)
+print("\nTest Case 1: Index with descending order")
+index1 = Index(fields=['-name'], name='idx_desc')
+print("Index:", index1)
+print("fields_orders:", index1.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index1.fields_orders])
+
+# Test case 2: Index with opclasses but no explicit ordering (should NOT have extra space)
+print("\nTest Case 2: Index with opclasses but no explicit ordering")
+index2 = Index(fields=['name'], name='idx_opclass', opclasses=['text_pattern_ops'])
+print("Index:", index2)
+print("fields_orders:", index2.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index2.fields_orders])
+
+# Test case 3: Index with opclasses and descending order (should work correctly)
+print("\nTest Case 3: Index with opclasses and descending order")
+index3 = Index(fields=['-name'], name='idx_opclass_desc', opclasses=['text_pattern_ops'])
+print("Index:", index3)
+print("fields_orders:", index3.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index3.fields_orders])
+
+# Now test the actual SQL generation using the ddl_references module
+print("\n=== Testing SQL Generation ===")
+from django.db.backends.ddl_references import IndexColumns
+
+def quote_name(name):
+    return f'"{name}"'
+
+# Test case 1: Descending order
+print("\nTest Case 1 SQL Generation:")
+columns1 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=[''])
+sql1 = str(columns1)
+print(f"Generated: {sql1}")
+print(f"Expected: '\"name\" DESC'")
+print("Correct:", sql1 == '"name" DESC')
+
+# Test case 2: Opclasses with ascending order (this was the main issue)
+print("\nTest Case 2 SQL Generation:")
+columns2 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=['text_pattern_ops'])
+sql2 = str(columns2)
+print(f"Generated: {sql2}")
+print(f"Expected: '\"name\" text_pattern_ops'")
+print("Correct:", sql2 == '"name" text_pattern_ops')
+
+# Test case 3: Opclasses with descending order
+print("\nTest Case 3 SQL Generation:")
+columns3 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=['text_pattern_ops'])
+sql3 = str(columns3)
+print(f"Generated: {sql3}")
+print(f"Expected: '\"name\" text_pattern_ops DESC'")
+print("Correct:", sql3 == '"name" text_pattern_ops DESC')
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..be66a3fa7e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Index
+
+# Test case 1: Index with descending order
+print("=== Test Case 1: Index with descending order ===")
+index1 = Index(fields=['-name'], name='idx_desc')
+print("Index fields_orders:", index1.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index1.fields_orders])
+
+# Test case 2: Index with ascending order
+print("\n=== Test Case 2: Index with ascending order ===")
+index2 = Index(fields=['name'], name='idx_asc')
+print("Index fields_orders:", index2.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index2.fields_orders])
+
+# Test case 3: Index with opclasses but no explicit ordering
+print("\n=== Test Case 3: Index with opclasses but no explicit ordering ===")
+index3 = Index(fields=['name'], name='idx_opclass', opclasses=['text_pattern_ops'])
+print("Index fields_orders:", index3.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index3.fields_orders])
+
+# Test case 4: Index with opclasses and descending order
+print("\n=== Test Case 4: Index with opclasses and descending order ===")
+index4 = Index(fields=['-name'], name='idx_opclass_desc', opclasses=['text_pattern_ops'])
+print("Index fields_orders:", index4.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index4.fields_orders])
+
+# Now let's examine the ddl_references.py code more closely
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock the quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+# Test the IndexColumns behavior
+print("\n=== Testing IndexColumns behavior ===")
+
+# Case 1: Ascending order (empty col_suffixes)
+print("Case 1 - Ascending order:")
+columns1 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=[''])
+print("Result:", str(columns1))
+
+# Case 2: Descending order
+print("Case 2 - Descending order:")
+columns2 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[' DESC'], opclasses=[''])
+print("Result:", str(columns2))
+
+# Case 3: Opclasses with ascending order (empty col_suffixes)
+print("Case 3 - Opclasses with ascending order:")
+columns3 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=['text_pattern_ops'])
+print("Result:", str(columns3))
+
+# Case 4: Opclasses with descending order
+print("Case 4 - Opclasses with descending order:")
+columns4 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[' DESC'], opclasses=['text_pattern_ops'])
+print("Result:", str(columns4))
\ No newline at end of file
diff --git a/test_detailed.py b/test_detailed.py
new file mode 100644
index 0000000000..9503cf65dc
--- /dev/null
+++ b/test_detailed.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Index
+
+# Test the actual Index behavior
+print("=== Testing actual Index behavior ===")
+
+# Test case 1: Index with descending order
+print("Test 1 - Index with descending order:")
+index1 = Index(fields=['-name'], name='idx_desc')
+print("fields_orders:", index1.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index1.fields_orders])
+
+# Test case 2: Index with ascending order
+print("\nTest 2 - Index with ascending order:")
+index2 = Index(fields=['name'], name='idx_asc')
+print("fields_orders:", index2.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index2.fields_orders])
+
+# Test case 3: Index with opclasses but no explicit ordering
+print("\nTest 3 - Index with opclasses but no explicit ordering:")
+index3 = Index(fields=['name'], name='idx_opclass', opclasses=['text_pattern_ops'])
+print("fields_orders:", index3.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index3.fields_orders])
+
+# Test case 4: Index with opclasses and descending order
+print("\nTest 4 - Index with opclasses and descending order:")
+index4 = Index(fields=['-name'], name='idx_opclass_desc', opclasses=['text_pattern_ops'])
+print("fields_orders:", index4.fields_orders)
+print("col_suffixes would be:", [order[1] for order in index4.fields_orders])
\ No newline at end of file
diff --git a/test_index_columns.py b/test_index_columns.py
new file mode 100644
index 0000000000..66686e9142
--- /dev/null
+++ b/test_index_columns.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock the quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+print("=== Testing IndexColumns with various scenarios ===")
+
+# Test case 1: Basic ascending order (empty col_suffix)
+print("Test 1 - Basic ascending order:")
+columns1 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=[''])
+result1 = str(columns1)
+print(f"Result: '{result1}'")
+print(f"Expected: '\"name\"'")
+print("Match:", result1 == '"name"')
+
+# Test case 2: Descending order
+print("\nTest 2 - Descending order:")
+columns2 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=[''])
+result2 = str(columns2)
+print(f"Result: '{result2}'")
+print(f"Expected: '\"name\" DESC'")
+print("Match:", result2 == '"name" DESC')
+
+# Test case 3: Opclasses with ascending order (empty col_suffix)
+print("\nTest 3 - Opclasses with ascending order:")
+columns3 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=[''], opclasses=['text_pattern_ops'])
+result3 = str(columns3)
+print(f"Result: '{result3}'")
+print(f"Expected: '\"name\" text_pattern_ops'")
+print("Match:", result3 == '"name" text_pattern_ops')
+
+# Test case 4: Opclasses with descending order
+print("\nTest 4 - Opclasses with descending order:")
+columns4 = IndexColumns('schema_author', ['name'], quote_name, col_suffixes=['DESC'], opclasses=['text_pattern_ops'])
+result4 = str(columns4)
+print(f"Result: '{result4}'")
+print(f"Expected: '\"name\" text_pattern_ops DESC'")
+print("Match:", result4 == '"name" text_pattern_ops DESC')
+
+# Test case 5: Multiple columns
+print("\nTest 5 - Multiple columns with mixed orders:")
+columns5 = IndexColumns('schema_author', ['name', 'age'], quote_name, 
+                       col_suffixes=['', 'DESC'], opclasses=['', ''])
+result5 = str(columns5)
+print(f"Result: '{result5}'")
+print(f"Expected: '\"name\", \"age\" DESC'")
+print("Match:", result5 == '"name", "age" DESC')
+
+# Test case 6: Multiple columns with opclasses
+print("\nTest 6 - Multiple columns with opclasses:")
+columns6 = IndexColumns('schema_author', ['name', 'age'], quote_name, 
+                       col_suffixes=['', 'DESC'], opclasses=['text_pattern_ops', ''])
+result6 = str(columns6)
+print(f"Result: '{result6}'")
+print(f"Expected: '\"name\" text_pattern_ops, \"age\" DESC'")
+print("Match:", result6 == '"name" text_pattern_ops, "age" DESC')
\ No newline at end of file
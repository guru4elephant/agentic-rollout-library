diff --git a/debug_as_set_logic.py b/debug_as_set_logic.py
new file mode 100644
index 0000000000..ee8c3ed51d
--- /dev/null
+++ b/debug_as_set_logic.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin, S
+from sympy.calculus.util import periodicity
+from sympy.core.relational import Relational
+from sympy.utilities.misc import filldedent
+
+n = symbols('n', real=True)
+expr = Eq(n * cos(n) - 3 * sin(n), 0)
+
+print("Expression:", expr)
+
+# Mimic the as_set logic
+free = expr.free_symbols
+if len(free) == 1:
+    x = free.pop()
+    reps = {}
+    for r in expr.atoms(Relational):
+        print(f"Checking relational: {r}")
+        print(f"Periodicity: {periodicity(r, x)}")
+        print(f"Periodicity not in (0, None): {periodicity(r, x) not in (0, None)}")
+        
+        if periodicity(r, x) not in (0, None):
+            print("Entering periodic branch")
+            s = r._eval_as_set()
+            print(f"_eval_as_set result: {s}")
+            if s in (S.EmptySet, S.UniversalSet, S.Reals):
+                reps[r] = s.as_relational(x)
+                continue
+            raise NotImplementedError(filldedent('''
+                as_set is not implemented for relationals
+                with periodic solutions
+                '''))
+    
+    print("Final reps:", reps)
+    print("Calling self.subs(reps)._eval_as_set()")
+    try:
+        result = expr.subs(reps)._eval_as_set()
+        print("Result:", result)
+    except Exception as e:
+        print("Error:", type(e).__name__, ":", str(e))
+else:
+    raise NotImplementedError("Sorry, as_set has not yet been"
+                              " implemented for multivariate"
+                              " expressions")
\ No newline at end of file
diff --git a/debug_cos_sin.py b/debug_cos_sin.py
new file mode 100644
index 0000000000..2b8a95a3a7
--- /dev/null
+++ b/debug_cos_sin.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin
+from sympy.solvers.inequalities import solve_univariate_inequality
+
+n = symbols('n', real=True)
+expr = Eq(cos(n), sin(n))
+
+print("Expression:", expr)
+
+try:
+    result = solve_univariate_inequality(expr, n, relational=False)
+    print("solve_univariate_inequality result:", result)
+except Exception as e:
+    print("solve_univariate_inequality error:", type(e).__name__, ":", str(e))
+
+# Test what happens when we substitute r with r
+reps = {expr: expr}
+substituted = expr.subs(reps)
+print("After substitution:", substituted)
+try:
+    result = substituted._eval_as_set()
+    print("_eval_as_set result:", result)
+except Exception as e:
+    print("_eval_as_set error:", type(e).__name__, ":", str(e))
\ No newline at end of file
diff --git a/debug_detailed.py b/debug_detailed.py
new file mode 100644
index 0000000000..9931cce524
--- /dev/null
+++ b/debug_detailed.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin
+from sympy.calculus.util import periodicity
+from sympy.core.relational import Relational
+
+n = symbols('n', real=True)
+expr = Eq(n * cos(n) - 3 * sin(n), 0)
+
+print("Expression:", expr)
+print("Periodicity:", periodicity(expr, n))
+print("Periodicity in (0, None):", periodicity(expr, n) in (0, None))
+
+# Check what atoms(Relational) returns
+print("Relational atoms:", list(expr.atoms(Relational)))
+
+# Check periodicity for each relational atom
+for r in expr.atoms(Relational):
+    print(f"Relational: {r}")
+    print(f"Periodicity: {periodicity(r, n)}")
+    print(f"Periodicity in (0, None): {periodicity(r, n) in (0, None)}")
\ No newline at end of file
diff --git a/debug_eval_as_set.py b/debug_eval_as_set.py
new file mode 100644
index 0000000000..e72e42d5f9
--- /dev/null
+++ b/debug_eval_as_set.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin
+from sympy.solvers.inequalities import solve_univariate_inequality
+
+n = symbols('n', real=True)
+expr = Eq(n * cos(n) - 3 * sin(n), 0)
+
+print("Expression:", expr)
+try:
+    result = solve_univariate_inequality(expr, n, relational=False)
+    print("solve_univariate_inequality result:", result)
+except Exception as e:
+    print("solve_univariate_inequality error:", type(e).__name__, ":", str(e))
\ No newline at end of file
diff --git a/debug_expr_types.py b/debug_expr_types.py
new file mode 100644
index 0000000000..44525d8326
--- /dev/null
+++ b/debug_expr_types.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, sin, Eq
+from sympy.core.relational import Equality
+
+x = symbols('x', real=True)
+
+# Test equation
+expr_eq = Eq(sin(x), 1)
+print("Equation:", expr_eq)
+print("Type:", type(expr_eq))
+print("Is Equality:", isinstance(expr_eq, Equality))
+
+# Test inequality  
+expr_ineq = (sin(x) < 1)
+print("Inequality:", expr_ineq)
+print("Type:", type(expr_ineq))
+print("Is Equality:", isinstance(expr_ineq, Equality))
+
+# Test original problematic case
+expr_orig = Eq(x * sin(x), 3 * sin(x))
+print("Original case:", expr_orig)
+print("Type:", type(expr_orig))
+print("Is Equality:", isinstance(expr_orig, Equality))
\ No newline at end of file
diff --git a/debug_inequality.py b/debug_inequality.py
new file mode 100644
index 0000000000..6de7e69210
--- /dev/null
+++ b/debug_inequality.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, sin, S, FiniteSet
+from sympy.calculus.util import periodicity
+from sympy.core.relational import Relational
+
+x = symbols('x', real=True)
+expr = (sin(x) < 1)
+
+print('Expression:', expr)
+print('Periodicity:', periodicity(expr, x))
+print('Periodicity in (0, None):', periodicity(expr, x) in (0, None))
+print('Periodicity not in (0, None):', periodicity(expr, x) not in (0, None))
+
+# Check what atoms(Relational) returns
+print('Relational atoms:', list(expr.atoms(Relational)))
+
+# Check periodicity for each relational atom
+for r in expr.atoms(Relational):
+    print(f'Relational: {r}')
+    print(f'Periodicity: {periodicity(r, x)}')
+    print(f'Periodicity not in (0, None): {periodicity(r, x) not in (0, None)}')
+    
+    if periodicity(r, x) not in (0, None):
+        print('Entering periodic branch')
+        try:
+            s = r._eval_as_set()
+            print(f'_eval_as_set result: {s}')
+            print(f'Result type: {type(s)}')
+            print(f'Is FiniteSet: {isinstance(s, FiniteSet)}')
+            print(f'In (S.EmptySet, S.UniversalSet, S.Reals): {s in (S.EmptySet, S.UniversalSet, S.Reals)}')
+            
+            # Check the condition
+            condition = s in (S.EmptySet, S.UniversalSet, S.Reals) or isinstance(s, FiniteSet)
+            print(f'Condition met: {condition}')
+            
+            if condition:
+                print('Would continue')
+            else:
+                print('Would raise NotImplementedError')
+                
+        except Exception as e:
+            print(f'_eval_as_set error: {type(e).__name__}: {e}')
\ No newline at end of file
diff --git a/debug_periodicity.py b/debug_periodicity.py
new file mode 100644
index 0000000000..e68bd69deb
--- /dev/null
+++ b/debug_periodicity.py
@@ -0,0 +1,19 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin
+from sympy.calculus.util import periodicity
+
+n = symbols('n', real=True)
+expr = Eq(n * cos(n) - 3 * sin(n), 0)
+
+print("Expression:", expr)
+print("Periodicity:", periodicity(expr, n))
+
+# Let's also check what solveset returns
+from sympy.solvers.solveset import solveset
+try:
+    result = solveset(expr, n)
+    print("solveset result:", result)
+    print("Type:", type(result))
+except Exception as e:
+    print("solveset error:", e)
\ No newline at end of file
diff --git a/debug_periodicity2.py b/debug_periodicity2.py
new file mode 100644
index 0000000000..632dbe8f77
--- /dev/null
+++ b/debug_periodicity2.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin
+from sympy.calculus.util import periodicity
+
+n = symbols('n', real=True)
+expr = Eq(cos(n), sin(n))
+
+print("Expression:", expr)
+print("Periodicity:", periodicity(expr, n))
+print("Periodicity in (0, None):", periodicity(expr, n) in (0, None))
\ No newline at end of file
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..bd366aeae5
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin, ConditionSet, Reals
+
+# Reproduce the exact issue from GitHub
+n = symbols('n', real=True)
+expr = Eq(n * cos(n) - 3 * sin(n), 0)
+
+print("Original issue reproduction:")
+print("Expression:", expr)
+
+# Test as_set() method - this should return ConditionSet instead of raising NotImplementedError
+try:
+    result = expr.as_set()
+    print("as_set() result:", result)
+    print("Is ConditionSet:", isinstance(result, ConditionSet))
+    
+    # Verify it matches the expected result from the issue
+    expected = ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)
+    print("Matches expected result:", result == expected)
+except Exception as e:
+    print("Error:", type(e).__name__, ":", str(e))
+
+# Test that solveset still works correctly
+from sympy.solvers.solveset import solveset
+try:
+    result = solveset(expr, n)
+    print("solveset result:", result)
+    print("Is ConditionSet:", isinstance(result, ConditionSet))
+except Exception as e:
+    print("solveset error:", type(e).__name__, ":", str(e))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ca9327a83d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin
+from sympy.solvers.solveset import solveset
+
+# Reproduce the issue
+n = symbols('n', real=True)
+expr = Eq(n * cos(n) - 3 * sin(n), 0)
+
+print("Trying to solve:", expr)
+try:
+    result = solveset(expr, n)
+    print("Result:", result)
+except Exception as e:
+    print("Error:", type(e).__name__, ":", str(e))
+
+# Test as_set() method
+print("\nTrying as_set():")
+try:
+    result_set = expr.as_set()
+    print("as_set() result:", result_set)
+except Exception as e:
+    print("as_set() Error:", type(e).__name__, ":", str(e))
\ No newline at end of file
diff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py
index c3664a1055..e80e16bce8 100644
--- a/sympy/logic/boolalg.py
+++ b/sympy/logic/boolalg.py
@@ -142,21 +142,40 @@ def as_set(self):
         """
         from sympy.calculus.util import periodicity
         from sympy.core.relational import Relational
+        from sympy.solvers.solveset import solveset
+        from sympy.sets import ConditionSet, Reals, FiniteSet
         free = self.free_symbols
         if len(free) == 1:
             x = free.pop()
             reps = {}
             for r in self.atoms(Relational):
                 if periodicity(r, x) not in (0, None):
-                    s = r._eval_as_set()
-                    if s in (S.EmptySet, S.UniversalSet, S.Reals):
-                        reps[r] = s.as_relational(x)
-                        continue
-                    raise NotImplementedError(filldedent('''
-                        as_set is not implemented for relationals
-                        with periodic solutions
-                        '''))
-            return self.subs(reps)._eval_as_set()
+                    try:
+                        s = r._eval_as_set()
+                        # Allow FiniteSet results for periodic equations that can be solved
+                        if s in (S.EmptySet, S.UniversalSet, S.Reals) or isinstance(s, FiniteSet):
+                            reps[r] = s.as_relational(x)
+                            continue
+                        raise NotImplementedError(filldedent('''
+                            as_set is not implemented for relationals
+                            with periodic solutions
+                            '''))
+                    except NotImplementedError:
+                        # For periodic equations that cannot be solved by _eval_as_set,
+                        # keep the original expression to be handled by the fallback
+                        from sympy.core.relational import Equality
+                        if isinstance(r, Equality):
+                            reps[r] = r
+                        else:
+                            raise
+            try:
+                return self.subs(reps)._eval_as_set()
+            except NotImplementedError:
+                # Fall back to solveset for equations that cannot be handled by solve_univariate_inequality
+                from sympy.core.relational import Equality
+                if isinstance(self, Equality):
+                    return ConditionSet(x, self, Reals)
+                raise
         else:
             raise NotImplementedError("Sorry, as_set has not yet been"
                                       " implemented for multivariate"
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6bd708d4ab
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin, ConditionSet, Reals, FiniteSet, Interval
+
+n = symbols('n', real=True)
+
+# Test 1: Simple equation that should still work
+expr1 = Eq(n, 5)
+result1 = expr1.as_set()
+print("Simple equation:", result1)
+print("Expected: FiniteSet(5)")
+print("Matches:", result1 == FiniteSet(5))
+
+# Test 2: Inequality that should still work  
+expr2 = Eq(n, 0)  # n == 0
+result2 = expr2.as_set()
+print("n == 0:", result2)
+print("Expected: FiniteSet(0)")
+print("Matches:", result2 == FiniteSet(0))
+
+# Test 3: The original problematic case
+expr3 = Eq(n * cos(n) - 3 * sin(n), 0)
+result3 = expr3.as_set()
+print("Trigonometric equation:", result3)
+print("Expected: ConditionSet")
+print("Is ConditionSet:", isinstance(result3, ConditionSet))
+
+# Test 4: Another complex equation
+expr4 = Eq(cos(n), sin(n))
+result4 = expr4.as_set()
+print("cos(n) == sin(n):", result4)
+print("Expected: ConditionSet")
+print("Is ConditionSet:", isinstance(result4, ConditionSet))
\ No newline at end of file
diff --git a/test_more_cases.py b/test_more_cases.py
new file mode 100644
index 0000000000..a7cd8b0b0a
--- /dev/null
+++ b/test_more_cases.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin, ConditionSet, Reals, FiniteSet
+
+n = symbols('n', real=True)
+
+# Test cases that should work with solve_univariate_inequality
+expr1 = Eq(cos(n), 0)
+result1 = expr1.as_set()
+print("cos(n) == 0:", result1)
+print("Is FiniteSet:", isinstance(result1, FiniteSet))
+
+expr2 = Eq(sin(n), 0)  
+result2 = expr2.as_set()
+print("sin(n) == 0:", result2)
+print("Is FiniteSet:", isinstance(result2, FiniteSet))
+
+# Test cases that should fall back to ConditionSet
+expr3 = Eq(n * cos(n), sin(n))
+result3 = expr3.as_set()
+print("n*cos(n) == sin(n):", result3)
+print("Is ConditionSet:", isinstance(result3, ConditionSet))
+
+expr4 = Eq(n**2 * cos(n), 3 * sin(n))
+result4 = expr4.as_set()
+print("n^2*cos(n) == 3*sin(n):", result4)
+print("Is ConditionSet:", isinstance(result4, ConditionSet))
+
+# Original problematic case
+expr5 = Eq(n * cos(n) - 3 * sin(n), 0)
+result5 = expr5.as_set()
+print("n*cos(n) - 3*sin(n) == 0:", result5)
+print("Is ConditionSet:", isinstance(result5, ConditionSet))
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..e20640c52f
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Eq, cos, sin, ConditionSet, Reals
+
+n = symbols('n', real=True)
+expr = Eq(n * cos(n) - 3 * sin(n), 0)
+
+# Test the expected result from the issue
+expected = ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)
+print("Expected result:", expected)
+
+# Test the actual result
+actual = expr.as_set()
+print("Actual result:", actual)
+
+# Check if they match
+print("Results match:", expected == actual)
\ No newline at end of file
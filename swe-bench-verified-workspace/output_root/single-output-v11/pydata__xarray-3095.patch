diff --git a/final_test.py b/final_test.py
new file mode 100644
index 00000000..dd1dbfa8
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+import xarray
+import copy
+
+print("Testing all scenarios from the GitHub issue...")
+
+# Create the exact dataset from the issue
+ds = xarray.Dataset(
+    coords={'x': ['foo'], 'y': ('x', ['bar'])},
+    data_vars={'z': ('x', ['baz'])}
+)
+
+print("\n1. Original dataset:")
+print(ds)
+
+print("\n2. Testing ds.copy() (shallow copy):")
+ds_shallow = ds.copy()
+print(ds_shallow)
+print(f"x dtype preserved: {ds_shallow.coords['x'].dtype == '<U3'}")
+
+print("\n3. Testing ds.copy(deep=True):")
+ds_deep = ds.copy(deep=True)
+print(ds_deep)
+print(f"x dtype preserved: {ds_deep.coords['x'].dtype == '<U3'}")
+
+print("\n4. Testing ds.z.copy() (shallow copy):")
+da_shallow = ds.z.copy()
+print(da_shallow)
+print(f"x dtype preserved: {da_shallow.coords['x'].dtype == '<U3'}")
+
+print("\n5. Testing ds.z.copy(deep=True):")
+da_deep = ds.z.copy(deep=True)
+print(da_deep)
+print(f"x dtype preserved: {da_deep.coords['x'].dtype == '<U3'}")
+
+print("\n6. Testing copy.copy(ds):")
+ds_copy_copy = copy.copy(ds)
+print(f"x dtype preserved: {ds_copy_copy.coords['x'].dtype == '<U3'}")
+
+print("\n7. Testing copy.deepcopy(ds):")
+ds_deepcopy = copy.deepcopy(ds)
+print(f"x dtype preserved: {ds_deepcopy.coords['x'].dtype == '<U3'}")
+
+print("\n8. Testing copy.copy(ds.z):")
+da_copy_copy = copy.copy(ds.z)
+print(f"x dtype preserved: {da_copy_copy.coords['x'].dtype == '<U3'}")
+
+print("\n9. Testing copy.deepcopy(ds.z):")
+da_deepcopy = copy.deepcopy(ds.z)
+print(f"x dtype preserved: {da_deepcopy.coords['x'].dtype == '<U3'}")
+
+# Verify all dtypes are preserved
+all_tests_passed = (
+    ds_shallow.coords['x'].dtype == '<U3' and
+    ds_deep.coords['x'].dtype == '<U3' and
+    da_shallow.coords['x'].dtype == '<U3' and
+    da_deep.coords['x'].dtype == '<U3' and
+    ds_copy_copy.coords['x'].dtype == '<U3' and
+    ds_deepcopy.coords['x'].dtype == '<U3' and
+    da_copy_copy.coords['x'].dtype == '<U3' and
+    da_deepcopy.coords['x'].dtype == '<U3'
+)
+
+print(f"\nAll tests passed: {all_tests_passed}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..9c44f7e1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+import xarray
+
+# Create the dataset as described in the issue
+ds = xarray.Dataset(
+    coords={'x': ['foo'], 'y': ('x', ['bar'])},
+    data_vars={'z': ('x', ['baz'])}
+)
+
+print("Original dataset:")
+print(ds)
+print("\nOriginal dataset dtypes:")
+print(f"x coord dtype: {ds.coords['x'].dtype}")
+print(f"y coord dtype: {ds.coords['y'].dtype}")
+print(f"z data dtype: {ds['z'].dtype}")
+
+# Test copy with deep=True
+ds_copy = ds.copy(deep=True)
+print("\nAfter copy(deep=True):")
+print(ds_copy)
+print("\nCopy dataset dtypes:")
+print(f"x coord dtype: {ds_copy.coords['x'].dtype}")
+print(f"y coord dtype: {ds_copy.coords['y'].dtype}")
+print(f"z data dtype: {ds_copy['z'].dtype}")
+
+# Test DataArray copy
+da_copy = ds.z.copy(deep=True)
+print("\nAfter DataArray copy(deep=True):")
+print(da_copy)
+print(f"x coord dtype: {da_copy.coords['x'].dtype}")
+
+# Test shallow copy
+ds_shallow = ds.copy(deep=False)
+print("\nAfter copy(deep=False):")
+print(ds_shallow)
+print(f"x coord dtype: {ds_shallow.coords['x'].dtype}")
\ No newline at end of file
diff --git a/test_copy_functions.py b/test_copy_functions.py
new file mode 100644
index 00000000..2cb0245b
--- /dev/null
+++ b/test_copy_functions.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+import xarray
+import copy
+
+# Create the dataset as described in the issue
+ds = xarray.Dataset(
+    coords={'x': ['foo'], 'y': ('x', ['bar'])},
+    data_vars={'z': ('x', ['baz'])}
+)
+
+print("Original dataset:")
+print(ds)
+print(f"x coord dtype: {ds.coords['x'].dtype}")
+
+# Test copy.copy()
+ds_copy = copy.copy(ds)
+print("\nAfter copy.copy():")
+print(f"x coord dtype: {ds_copy.coords['x'].dtype}")
+
+# Test copy.deepcopy()
+ds_deepcopy = copy.deepcopy(ds)
+print("\nAfter copy.deepcopy():")
+print(f"x coord dtype: {ds_deepcopy.coords['x'].dtype}")
+
+# Test DataArray copy.copy()
+da_copy = copy.copy(ds.z)
+print("\nAfter DataArray copy.copy():")
+print(f"x coord dtype: {da_copy.coords['x'].dtype}")
+
+# Test DataArray copy.deepcopy()
+da_deepcopy = copy.deepcopy(ds.z)
+print("\nAfter DataArray copy.deepcopy():")
+print(f"x coord dtype: {da_deepcopy.coords['x'].dtype}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..c934062f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+import xarray
+import numpy as np
+
+# Test with different dtypes
+print("Testing with different dtypes:")
+
+# Test with integer coordinates
+ds_int = xarray.Dataset(coords={'x': [1, 2, 3]})
+ds_int_copy = ds_int.copy(deep=True)
+print(f"Integer coords: original={ds_int.coords['x'].dtype}, copy={ds_int_copy.coords['x'].dtype}")
+
+# Test with float coordinates  
+ds_float = xarray.Dataset(coords={'x': [1.1, 2.2, 3.3]})
+ds_float_copy = ds_float.copy(deep=True)
+print(f"Float coords: original={ds_float.coords['x'].dtype}, copy={ds_float_copy.coords['x'].dtype}")
+
+# Test with boolean coordinates
+ds_bool = xarray.Dataset(coords={'x': [True, False]})
+ds_bool_copy = ds_bool.copy(deep=True)
+print(f"Boolean coords: original={ds_bool.coords['x'].dtype}, copy={ds_bool_copy.coords['x'].dtype}")
+
+# Test with mixed unicode lengths
+ds_mixed = xarray.Dataset(coords={'x': ['a', 'bb', 'ccc']})
+ds_mixed_copy = ds_mixed.copy(deep=True)
+print(f"Mixed unicode: original={ds_mixed.coords['x'].dtype}, copy={ds_mixed_copy.coords['x'].dtype}")
+
+# Test with non-coordinate variables (should not be affected)
+ds_non_coord = xarray.Dataset(data_vars={'data': ('x', ['foo', 'bar'])})
+ds_non_coord_copy = ds_non_coord.copy(deep=True)
+print(f"Non-coord data: original={ds_non_coord['data'].dtype}, copy={ds_non_coord_copy['data'].dtype}")
+
+# Test shallow copy (should not be affected)
+ds_shallow = ds_mixed.copy(deep=False)
+print(f"Shallow copy: original={ds_mixed.coords['x'].dtype}, copy={ds_shallow.coords['x'].dtype}")
\ No newline at end of file
diff --git a/test_numpy_behavior.py b/test_numpy_behavior.py
new file mode 100644
index 00000000..69edc9d2
--- /dev/null
+++ b/test_numpy_behavior.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+import numpy as np
+
+# Test numpy behavior with unicode arrays
+unicode_array = np.array(['foo'], dtype='<U3')
+print(f"Original array dtype: {unicode_array.dtype}")
+
+# Test what happens when we call np.array() on it
+new_array = np.array(unicode_array)
+print(f"After np.array() dtype: {new_array.dtype}")
+
+# Test what happens when we call np.asarray() on it
+new_array2 = np.asarray(unicode_array)
+print(f"After np.asarray() dtype: {new_array2.dtype}")
+
+# Test with explicit copy
+new_array3 = np.array(unicode_array, copy=True)
+print(f"After np.array(copy=True) dtype: {new_array3.dtype}")
\ No newline at end of file
diff --git a/test_pandas_index.py b/test_pandas_index.py
new file mode 100644
index 00000000..326a31ec
--- /dev/null
+++ b/test_pandas_index.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+import numpy as np
+import pandas as pd
+
+# Test with pandas Index (which is what IndexVariable uses)
+unicode_index = pd.Index(['foo'], dtype='<U3')
+print(f"Original index dtype: {unicode_index.dtype}")
+
+# Test what happens when we convert to numpy array
+numpy_array = np.array(unicode_index)
+print(f"After np.array() dtype: {numpy_array.dtype}")
+
+# Test what happens when we call .values on pandas Index
+index_values = unicode_index.values
+print(f"Index.values dtype: {index_values.dtype}")
+
+# Test what happens when we copy the index
+index_copy = unicode_index.copy(deep=True)
+print(f"Index.copy(deep=True) dtype: {index_copy.dtype}")
+
+# Test what happens when we create a new array from the values
+new_array_from_values = np.array(index_values)
+print(f"np.array(index_values) dtype: {new_array_from_values.dtype}")
\ No newline at end of file
diff --git a/test_pandas_index_adapter.py b/test_pandas_index_adapter.py
new file mode 100644
index 00000000..093fc4c4
--- /dev/null
+++ b/test_pandas_index_adapter.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+import xarray
+import numpy as np
+import pandas as pd
+
+# Create the dataset as described in the issue
+ds = xarray.Dataset(
+    coords={'x': ['foo'], 'y': ('x', ['bar'])},
+    data_vars={'z': ('x', ['baz'])}
+)
+
+# Examine the PandasIndexAdapter
+x_variable = ds.coords['x'].variable
+print(f"x variable _data type: {type(x_variable._data)}")
+print(f"x variable _data.array type: {type(x_variable._data.array)}")
+print(f"x variable _data.array dtype: {x_variable._data.array.dtype}")
+
+# Test what happens when we copy the pandas Index
+original_index = x_variable._data.array
+copied_index = original_index.copy(deep=True)
+print(f"\nOriginal index dtype: {original_index.dtype}")
+print(f"Copied index dtype: {copied_index.dtype}")
+
+# Test what happens when we create a new PandasIndexAdapter from the copied index
+from xarray.core.indexing import PandasIndexAdapter
+new_adapter = PandasIndexAdapter(copied_index)
+print(f"New adapter dtype: {new_adapter.dtype}")
\ No newline at end of file
diff --git a/test_variable_types.py b/test_variable_types.py
new file mode 100644
index 00000000..8405fa12
--- /dev/null
+++ b/test_variable_types.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+import xarray
+import numpy as np
+
+# Create the dataset as described in the issue
+ds = xarray.Dataset(
+    coords={'x': ['foo'], 'y': ('x', ['bar'])},
+    data_vars={'z': ('x', ['baz'])}
+)
+
+print("Variable types:")
+print(f"x coord variable type: {type(ds.coords['x'].variable)}")
+print(f"y coord variable type: {type(ds.coords['y'].variable)}")
+print(f"z data variable type: {type(ds['z'].variable)}")
+
+# Test copy on each variable
+print("\nTesting variable copy(deep=True):")
+x_var_copy = ds.coords['x'].variable.copy(deep=True)
+print(f"x coord copy dtype: {x_var_copy.dtype}")
+
+y_var_copy = ds.coords['y'].variable.copy(deep=True)
+print(f"y coord copy dtype: {y_var_copy.dtype}")
+
+z_var_copy = ds['z'].variable.copy(deep=True)
+print(f"z data copy dtype: {z_var_copy.dtype}")
\ No newline at end of file
diff --git a/test_xarray_debug.py b/test_xarray_debug.py
new file mode 100644
index 00000000..7bd36db3
--- /dev/null
+++ b/test_xarray_debug.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+import xarray
+import numpy as np
+
+# Create the dataset as described in the issue
+ds = xarray.Dataset(
+    coords={'x': ['foo'], 'y': ('x', ['bar'])},
+    data_vars={'z': ('x', ['baz'])}
+)
+
+print("Original dataset:")
+print(ds)
+print("\nOriginal dataset dtypes:")
+print(f"x coord dtype: {ds.coords['x'].dtype}")
+print(f"y coord dtype: {ds.coords['y'].dtype}")
+print(f"z data dtype: {ds['z'].dtype}")
+
+# Let's examine the underlying data
+print(f"\nUnderlying data types:")
+print(f"x coord data type: {type(ds.coords['x'].data)}")
+print(f"x coord data dtype: {ds.coords['x'].data.dtype}")
+print(f"y coord data type: {type(ds.coords['y'].data)}")
+print(f"y coord data dtype: {ds.coords['y'].data.dtype}")
+print(f"z data type: {type(ds['z'].data)}")
+print(f"z data dtype: {ds['z'].data.dtype}")
+
+# Test what happens when we call np.array on the x coordinate data
+x_data = ds.coords['x'].data
+x_numpy = np.array(x_data)
+print(f"\nAfter np.array(x coord data): dtype = {x_numpy.dtype}")
+
+# Test what happens when we call np.array on the y coordinate data
+y_data = ds.coords['y'].data
+y_numpy = np.array(y_data)
+print(f"After np.array(y coord data): dtype = {y_numpy.dtype}")
+
+# Test what happens when we call np.array on the z data
+z_data = ds['z'].data
+z_numpy = np.array(z_data)
+print(f"After np.array(z data): dtype = {z_numpy.dtype}")
\ No newline at end of file
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 379be8f5..16e4743c 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -1947,7 +1947,7 @@ class IndexVariable(Variable):
                 # point, which doesn't have a copy method, so make a deep copy
                 # of the underlying `pandas.MultiIndex` and create a new
                 # `PandasIndexAdapter` instance with it.
-                data = PandasIndexAdapter(self._data.array.copy(deep=True))
+                data = PandasIndexAdapter(self._data.array.copy(deep=True), dtype=self.dtype)
             else:
                 data = self._data
         else:
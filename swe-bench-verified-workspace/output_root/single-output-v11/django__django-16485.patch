diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..a5afda00cb
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,57 @@
+from decimal import Decimal, ROUND_HALF_UP, Context
+from django.template.defaultfilters import floatformat
+
+def debug_floatformat(value, p):
+    """Debug version to trace the floatformat calculation"""
+    print(f"\nDebugging floatformat({value!r}, {p})")
+    
+    # Convert input to Decimal
+    try:
+        input_val = str(value)
+        d = Decimal(input_val)
+        print(f"Decimal value: {d}")
+        print(f"Decimal as_tuple: {d.as_tuple()}")
+    except Exception as e:
+        print(f"Error converting to Decimal: {e}")
+        return
+    
+    # Calculate m
+    try:
+        m = int(d) - d
+        print(f"m = int(d) - d = {int(d)} - {d} = {m}")
+    except Exception as e:
+        print(f"Error calculating m: {e}")
+        return
+    
+    # Check if we should return early
+    if not m and p < 0:
+        print("Early return: not m and p < 0")
+        return
+    
+    # Calculate precision
+    exp = Decimal(1).scaleb(-abs(p))
+    print(f"exp = Decimal(1).scaleb(-abs({p})) = {exp}")
+    
+    tupl = d.as_tuple()
+    units = len(tupl[1])
+    print(f"units (len of digits) = {units}")
+    
+    units += -tupl[2] if m else tupl[2]
+    print(f"units after adjustment = {units}")
+    
+    prec = abs(p) + units + 1
+    print(f"prec = abs({p}) + {units} + 1 = {prec}")
+    
+    # This is where the error occurs
+    try:
+        rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))
+        print(f"Successfully quantized: {rounded_d}")
+    except Exception as e:
+        print(f"Error in quantize: {e}")
+        print(f"Context(prec={prec}) is invalid")
+
+# Test the problematic cases
+debug_floatformat('0.00', 0)
+debug_floatformat(Decimal('0.00'), 0)
+debug_floatformat('0.000', 0)
+debug_floatformat(Decimal('0.000'), 0)
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..a92ea95e4f 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -184,6 +184,9 @@ def floatformat(text, arg=-1):
     units = len(tupl[1])
     units += -tupl[2] if m else tupl[2]
     prec = abs(p) + units + 1
+    # Ensure precision is at least 1 to avoid Decimal context error
+    if prec < 1:
+        prec = 1
 
     # Avoid conversion to scientific notation by accessing `sign`, `digits`,
     # and `exponent` from Decimal.as_tuple() directly.
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..d79e8b1219
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,38 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+from decimal import Decimal
+from django.template.defaultfilters import floatformat
+
+print("Final verification - testing the exact GitHub issue cases:")
+
+# These were the exact cases that caused ValueError in the issue
+try:
+    result1 = floatformat('0.00', 0)
+    print(f"✓ floatformat('0.00', 0) = {result1!r} (was ValueError)")
+except ValueError as e:
+    print(f"✗ Still getting ValueError: {e}")
+
+try:
+    result2 = floatformat(Decimal('0.00'), 0)
+    print(f"✓ floatformat(Decimal('0.00'), 0) = {result2!r} (was ValueError)")
+except ValueError as e:
+    print(f"✗ Still getting ValueError: {e}")
+
+print("\nThe issue has been fixed! No more ValueError exceptions.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9971ab1c89
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+from decimal import Decimal
+from django.template.defaultfilters import floatformat
+
+# Test the issue described in the GitHub issue
+print("Testing floatformat with '0.00' and precision 0...")
+
+try:
+    result1 = floatformat('0.00', 0)
+    print(f"floatformat('0.00', 0) = {result1}")
+except Exception as e:
+    print(f"Error with string '0.00': {type(e).__name__}: {e}")
+
+try:
+    result2 = floatformat(Decimal('0.00'), 0)
+    print(f"floatformat(Decimal('0.00'), 0) = {result2}")
+except Exception as e:
+    print(f"Error with Decimal('0.00'): {type(e).__name__}: {e}")
+
+# Test some edge cases
+print("\nTesting edge cases...")
+
+test_cases = [
+    ('0.00', 0),
+    ('0.000', 0),
+    ('0.0', 0),
+    ('0', 0),
+    (Decimal('0.00'), 0),
+    (Decimal('0.000'), 0),
+    (Decimal('0.0'), 0),
+    (Decimal('0'), 0),
+]
+
+for value, precision in test_cases:
+    try:
+        result = floatformat(value, precision)
+        print(f"floatformat({value!r}, {precision}) = {result!r}")
+    except Exception as e:
+        print(f"Error with {value!r}, {precision}: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..d92b390787
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,55 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        TEST_RUNNER='django.test.runner.DiscoverRunner',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+# Now we can import and run the specific test
+from django.test import TestCase
+from decimal import Decimal
+from django.template.defaultfilters import floatformat
+
+class FloatformatTest(TestCase):
+    def test_zero_precision_with_zero_values(self):
+        """Test the specific issue reported: floatformat with 0 precision on zero values"""
+        # These should not raise ValueError anymore
+        self.assertEqual(floatformat('0.00', 0), '0')
+        self.assertEqual(floatformat(Decimal('0.00'), 0), '0')
+        
+        # Test other edge cases
+        self.assertEqual(floatformat('0.000', 0), '0')
+        self.assertEqual(floatformat(Decimal('0.000'), 0), '0')
+        self.assertEqual(floatformat('0.0', 0), '0')
+        self.assertEqual(floatformat(Decimal('0.0'), 0), '0')
+        self.assertEqual(floatformat('0', 0), '0')
+        self.assertEqual(floatformat(Decimal('0'), 0), '0')
+    
+    def test_positive_precision_still_works(self):
+        """Ensure we didn't break normal functionality"""
+        self.assertEqual(floatformat('123.456', 2), '123.46')
+        self.assertEqual(floatformat('1.23456', 3), '1.235')
+        self.assertEqual(floatformat('0.123', 1), '0.1')
+    
+    def test_negative_precision_still_works(self):
+        """Test negative precision cases"""
+        self.assertEqual(floatformat('123.456', -2), '123.46')
+        self.assertEqual(floatformat('123.400', -2), '123.4')
+        self.assertEqual(floatformat('123.000', -2), '123')
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..8dd91c1aa5
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,60 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+from decimal import Decimal
+from django.template.defaultfilters import floatformat
+
+def test_case(description, value, precision, expected):
+    try:
+        result = floatformat(value, precision)
+        if result == expected:
+            print(f"✓ {description}: {result!r} == {expected!r}")
+            return True
+        else:
+            print(f"✗ {description}: {result!r} != {expected!r}")
+            return False
+    except Exception as e:
+        print(f"✗ {description}: Error - {type(e).__name__}: {e}")
+        return False
+
+print("Testing the original issue...")
+success = True
+
+# Test the original issue
+success &= test_case("floatformat('0.00', 0)", '0.00', 0, '0')
+success &= test_case("floatformat(Decimal('0.00'), 0)", Decimal('0.00'), 0, '0')
+
+# Test edge cases
+success &= test_case("floatformat('0.000', 0)", '0.000', 0, '0')
+success &= test_case("floatformat(Decimal('0.000'), 0)", Decimal('0.000'), 0, '0')
+success &= test_case("floatformat('0.0', 0)", '0.0', 0, '0')
+success &= test_case("floatformat(Decimal('0.0'), 0)", Decimal('0.0'), 0, '0')
+success &= test_case("floatformat('0', 0)", '0', 0, '0')
+success &= test_case("floatformat(Decimal('0'), 0)", Decimal('0'), 0, '0')
+
+# Test that normal functionality still works
+success &= test_case("floatformat('123.456', 2)", '123.456', 2, '123.46')
+success &= test_case("floatformat('1.23456', 3)", '1.23456', 3, '1.235')
+success &= test_case("floatformat('0.123', 1)", '0.123', 1, '0.1')
+
+# Test negative precision (should still work)
+success &= test_case("floatformat('123.456', -2)", '123.456', -2, '123.46')
+success &= test_case("floatformat('123.000', -2)", '123.000', -2, '123')
+
+print(f"\nOverall result: {'SUCCESS' if success else 'FAILURE'}")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..b85740ff45
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,64 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+from decimal import Decimal
+from django.template.defaultfilters import floatformat
+
+print("Testing floatformat with '0.00' and precision 0...")
+
+try:
+    result1 = floatformat('0.00', 0)
+    print(f"✓ floatformat('0.00', 0) = {result1!r}")
+except Exception as e:
+    print(f"✗ Error with string '0.00': {type(e).__name__}: {e}")
+
+try:
+    result2 = floatformat(Decimal('0.00'), 0)
+    print(f"✓ floatformat(Decimal('0.00'), 0) = {result2!r}")
+except Exception as e:
+    print(f"✗ Error with Decimal('0.00'): {type(e).__name__}: {e}")
+
+# Test some edge cases
+print("\nTesting edge cases...")
+
+test_cases = [
+    ('0.00', 0),
+    ('0.000', 0),
+    ('0.0', 0),
+    ('0', 0),
+    (Decimal('0.00'), 0),
+    (Decimal('0.000'), 0),
+    (Decimal('0.0'), 0),
+    (Decimal('0'), 0),
+]
+
+for value, precision in test_cases:
+    try:
+        result = floatformat(value, precision)
+        print(f"✓ floatformat({value!r}, {precision}) = {result!r}")
+    except Exception as e:
+        print(f"✗ Error with {value!r}, {precision}: {type(e).__name__}: {e}")
+
+# Test with positive precision to ensure we didn't break anything
+print("\nTesting with positive precision...")
+try:
+    result = floatformat('123.456', 2)
+    print(f"✓ floatformat('123.456', 2) = {result!r}")
+except Exception as e:
+    print(f"✗ Error with positive precision: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..374072268c 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -582,7 +582,13 @@ class ModelAdmin(BaseModelAdmin):
 
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        # Use get_inlines() hook if available
+        if hasattr(self, 'get_inlines'):
+            inline_classes = self.get_inlines(request, obj)
+        else:
+            inline_classes = self.inlines
+        
+        for inline_class in inline_classes:
             inline = inline_class(self.model, self.admin_site)
             if request:
                 if not (inline.has_view_or_change_permission(request, obj) or
diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 0000000000..21be02ea13
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,168 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the get_inlines() hook implementation.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from datetime import date
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+class Review(models.Model):
+    content = models.TextField()
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create inline admins
+class BookInline(admin.TabularInline):
+    model = Book
+
+class ReviewInline(admin.TabularInline):
+    model = Review
+
+# Mock request and user for testing
+class MockRequest:
+    pass
+
+class MockSuperUser:
+    def has_perm(self, perm):
+        return True
+
+request = MockRequest()
+request.user = MockSuperUser()
+
+def test_comprehensive():
+    print("=== Comprehensive test of get_inlines() hook ===")
+    
+    # Test 1: ModelAdmin without get_inlines method (backward compatibility)
+    class AuthorAdminDefault(admin.ModelAdmin):
+        inlines = [BookInline]
+    
+    admin_default = AuthorAdminDefault(Author, admin.site)
+    author = Author(name="Test Author")
+    
+    # Test get_inline_instances
+    instances = admin_default.get_inline_instances(request, author)
+    print(f"Default admin inline instances: {len(instances)}")
+    
+    # Test get_formsets_with_inlines
+    formsets = list(admin_default.get_formsets_with_inlines(request, author))
+    print(f"Default admin formsets: {len(formsets)}")
+    
+    # Test 2: ModelAdmin with get_inlines returning empty list
+    class AuthorAdminEmpty(admin.ModelAdmin):
+        inlines = [BookInline]
+        
+        def get_inlines(self, request, obj=None):
+            return []
+    
+    admin_empty = AuthorAdminEmpty(Author, admin.site)
+    
+    # Test get_inline_instances
+    instances = admin_empty.get_inline_instances(request, author)
+    print(f"Empty admin inline instances: {len(instances)}")
+    
+    # Test get_formsets_with_inlines
+    formsets = list(admin_empty.get_formsets_with_inlines(request, author))
+    print(f"Empty admin formsets: {len(formsets)}")
+    
+    # Test 3: ModelAdmin with dynamic inlines based on request/object
+    class AuthorAdminDynamic(admin.ModelAdmin):
+        inlines = [BookInline]
+        
+        def get_inlines(self, request, obj=None):
+            # Example: Different inlines based on author name
+            if obj and obj.name == "Special Author":
+                return []  # No inlines for special authors
+            elif obj and obj.name == "Review Author":
+                return [ReviewInline]  # Only reviews for review authors
+            # Example: Different inlines based on request (could check permissions, etc.)
+            elif request and hasattr(request, 'special_mode') and request.special_mode:
+                return [ReviewInline]  # Special mode shows only reviews
+            return self.inlines  # Default behavior
+    
+    admin_dynamic = AuthorAdminDynamic(Author, admin.site)
+    
+    # Test with regular author
+    regular_author = Author(name="Regular Author")
+    instances = admin_dynamic.get_inline_instances(request, regular_author)
+    print(f"Dynamic admin (regular) inline instances: {len(instances)}")
+    formsets = list(admin_dynamic.get_formsets_with_inlines(request, regular_author))
+    print(f"Dynamic admin (regular) formsets: {len(formsets)}")
+    
+    # Test with special author
+    special_author = Author(name="Special Author")
+    instances = admin_dynamic.get_inline_instances(request, special_author)
+    print(f"Dynamic admin (special) inline instances: {len(instances)}")
+    formsets = list(admin_dynamic.get_formsets_with_inlines(request, special_author))
+    print(f"Dynamic admin (special) formsets: {len(formsets)}")
+    
+    # Test with review author
+    review_author = Author(name="Review Author")
+    instances = admin_dynamic.get_inline_instances(request, review_author)
+    print(f"Dynamic admin (review) inline instances: {len(instances)}")
+    formsets = list(admin_dynamic.get_formsets_with_inlines(request, review_author))
+    print(f"Dynamic admin (review) formsets: {len(formsets)}")
+    if formsets:
+        formset, inline = formsets[0]
+        print(f"Dynamic admin (review) inline class: {inline.__class__.__name__}")
+    
+    # Test with request-based logic
+    special_request = MockRequest()
+    special_request.user = MockSuperUser()
+    special_request.special_mode = True
+    
+    instances = admin_dynamic.get_inline_instances(special_request, regular_author)
+    print(f"Dynamic admin (request-based) inline instances: {len(instances)}")
+    formsets = list(admin_dynamic.get_formsets_with_inlines(special_request, regular_author))
+    print(f"Dynamic admin (request-based) formsets: {len(formsets)}")
+    if formsets:
+        formset, inline = formsets[0]
+        print(f"Dynamic admin (request-based) inline class: {inline.__class__.__name__}")
+    
+    print("All comprehensive tests passed!")
+    print("The get_inlines() hook implementation is working correctly!")
+
+if __name__ == '__main__':
+    test_comprehensive()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8fb97d9a3f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,91 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue and test the get_inlines() hook implementation.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from django.http import HttpRequest
+from django.contrib.auth.models import User
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create inline admin
+class BookInline(admin.TabularInline):
+    model = Book
+
+# Create ModelAdmin with custom get_inlines method
+class AuthorAdmin(admin.ModelAdmin):
+    inlines = [BookInline]
+    
+    def get_inlines(self, request, obj=None):
+        """Custom get_inlines hook implementation"""
+        print(f"get_inlines called with request={request}, obj={obj}")
+        # Example: return different inlines based on request or object
+        if obj and obj.name == "Special Author":
+            return []  # No inlines for special authors
+        return self.inlines
+
+# Test the current behavior
+def test_current_behavior():
+    print("=== Testing current behavior ===")
+    
+    # Create ModelAdmin instance
+    author_admin = AuthorAdmin(Author, admin.site)
+    
+    # Test get_inline_instances method - pass None request to skip permission checks
+    print("Testing get_inline_instances without object:")
+    instances = author_admin.get_inline_instances(None)
+    print(f"Number of inline instances: {len(instances)}")
+    
+    print("Testing get_inline_instances with object:")
+    author = Author(name="Test Author")
+    instances = author_admin.get_inline_instances(None, author)
+    print(f"Number of inline instances: {len(instances)}")
+    
+    # Test get_inline_instances with special author (should use get_inlines hook)
+    print("Testing get_inline_instances with special author:")
+    special_author = Author(name="Special Author")
+    instances = author_admin.get_inline_instances(None, special_author)
+    print(f"Number of inline instances: {len(instances)}")
+
+if __name__ == '__main__':
+    test_current_behavior()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2df06747e7
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,121 @@
+#!/usr/bin/env python3
+"""
+Script to test edge cases for the get_inlines() hook implementation.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+class Review(models.Model):
+    content = models.TextField()
+    book = models.ForeignKey(Book, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create inline admins
+class BookInline(admin.TabularInline):
+    model = Book
+
+class ReviewInline(admin.TabularInline):
+    model = Review
+
+# Test ModelAdmin without get_inlines method (should use default behavior)
+class AuthorAdminDefault(admin.ModelAdmin):
+    inlines = [BookInline]
+
+# Test ModelAdmin with get_inlines method returning empty list
+class AuthorAdminEmpty(admin.ModelAdmin):
+    inlines = [BookInline]
+    
+    def get_inlines(self, request, obj=None):
+        return []
+
+# Test ModelAdmin with get_inlines method returning different inlines
+class AuthorAdminDynamic(admin.ModelAdmin):
+    inlines = [BookInline]
+    
+    def get_inlines(self, request, obj=None):
+        if obj and obj.name == "Special Author":
+            return []  # No inlines for special authors
+        elif obj and obj.name == "Review Author":
+            return [ReviewInline]  # Only reviews for review authors
+        return self.inlines  # Default behavior
+
+def test_edge_cases():
+    print("=== Testing edge cases ===")
+    
+    # Test 1: ModelAdmin without get_inlines method
+    print("Test 1: ModelAdmin without get_inlines method")
+    admin_default = AuthorAdminDefault(Author, admin.site)
+    instances = admin_default.get_inline_instances(None)
+    print(f"Number of inline instances: {len(instances)}")
+    
+    # Test 2: ModelAdmin with get_inlines returning empty list
+    print("Test 2: ModelAdmin with get_inlines returning empty list")
+    admin_empty = AuthorAdminEmpty(Author, admin.site)
+    instances = admin_empty.get_inline_instances(None)
+    print(f"Number of inline instances: {len(instances)}")
+    
+    # Test 3: ModelAdmin with dynamic inlines based on object
+    print("Test 3: ModelAdmin with dynamic inlines")
+    admin_dynamic = AuthorAdminDynamic(Author, admin.site)
+    
+    # Test with regular author
+    regular_author = Author(name="Regular Author")
+    instances = admin_dynamic.get_inline_instances(None, regular_author)
+    print(f"Regular author inline instances: {len(instances)}")
+    
+    # Test with special author
+    special_author = Author(name="Special Author")
+    instances = admin_dynamic.get_inline_instances(None, special_author)
+    print(f"Special author inline instances: {len(instances)}")
+    
+    # Test with review author
+    review_author = Author(name="Review Author")
+    instances = admin_dynamic.get_inline_instances(None, review_author)
+    print(f"Review author inline instances: {len(instances)}")
+    print(f"Review author inline class: {instances[0].__class__.__name__ if instances else 'None'}")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_existing_functionality.py b/test_existing_functionality.py
new file mode 100644
index 0000000000..e5d1f63767
--- /dev/null
+++ b/test_existing_functionality.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+"""
+Script to test that existing functionality still works after our changes.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from datetime import date
+
+# Create test models similar to the existing tests
+class Band(models.Model):
+    name = models.CharField(max_length=100)
+    bio = models.TextField()
+    sign_date = models.DateField()
+    
+    class Meta:
+        app_label = 'test'
+
+class Concert(models.Model):
+    main_band = models.ForeignKey(Band, on_delete=models.CASCADE)
+    opening_band = models.ForeignKey(Band, on_delete=models.CASCADE, related_name='+')
+    day = models.PositiveSmallIntegerField()
+    transport = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create inline admin
+class ConcertInline(admin.TabularInline):
+    model = Concert
+    fk_name = 'main_band'
+
+# Mock request and user for testing
+class MockRequest:
+    pass
+
+class MockSuperUser:
+    def has_perm(self, perm):
+        return True
+
+request = MockRequest()
+request.user = MockSuperUser()
+
+def test_existing_functionality():
+    print("=== Testing existing functionality ===")
+    
+    # Test 1: Basic ModelAdmin with inlines
+    class BandAdmin(admin.ModelAdmin):
+        inlines = [ConcertInline]
+    
+    band = Band(name='The Doors', bio='', sign_date=date(1965, 1, 1))
+    ma = BandAdmin(Band, admin.site)
+    
+    # Test get_inline_instances without object
+    inline_instances = ma.get_inline_instances(request)
+    print(f"Number of inline instances without object: {len(inline_instances)}")
+    
+    # Test get_inline_instances with object
+    inline_instances = ma.get_inline_instances(request, band)
+    print(f"Number of inline instances with object: {len(inline_instances)}")
+    
+    # Test 2: ModelAdmin without inlines
+    class BandAdminNoInlines(admin.ModelAdmin):
+        inlines = []
+    
+    ma_no_inlines = BandAdminNoInlines(Band, admin.site)
+    inline_instances = ma_no_inlines.get_inline_instances(request)
+    print(f"Number of inline instances (no inlines): {len(inline_instances)}")
+    
+    print("All existing functionality tests passed!")
+
+if __name__ == '__main__':
+    test_existing_functionality()
\ No newline at end of file
diff --git a/test_formsets_with_inlines.py b/test_formsets_with_inlines.py
new file mode 100644
index 0000000000..9f3f0542ed
--- /dev/null
+++ b/test_formsets_with_inlines.py
@@ -0,0 +1,120 @@
+#!/usr/bin/env python3
+"""
+Script to test that get_formsets_with_inlines works correctly with the new get_inlines() hook.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from datetime import date
+
+# Create test models
+class Band(models.Model):
+    name = models.CharField(max_length=100)
+    bio = models.TextField()
+    sign_date = models.DateField()
+    
+    class Meta:
+        app_label = 'test'
+
+class Concert(models.Model):
+    main_band = models.ForeignKey(Band, on_delete=models.CASCADE)
+    opening_band = models.ForeignKey(Band, on_delete=models.CASCADE, related_name='+')
+    day = models.PositiveSmallIntegerField()
+    transport = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Review(models.Model):
+    content = models.TextField()
+    band = models.ForeignKey(Band, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test'
+
+# Create inline admins
+class ConcertInline(admin.TabularInline):
+    model = Concert
+    fk_name = 'main_band'
+
+class ReviewInline(admin.TabularInline):
+    model = Review
+
+# Mock request and user for testing
+class MockRequest:
+    pass
+
+class MockSuperUser:
+    def has_perm(self, perm):
+        return True
+
+request = MockRequest()
+request.user = MockSuperUser()
+
+def test_formsets_with_inlines():
+    print("=== Testing get_formsets_with_inlines with get_inlines() hook ===")
+    
+    # Test ModelAdmin with dynamic inlines based on object
+    class BandAdminDynamic(admin.ModelAdmin):
+        inlines = [ConcertInline]
+        
+        def get_inlines(self, request, obj=None):
+            if obj and obj.name == "Special Band":
+                return []  # No inlines for special bands
+            elif obj and obj.name == "Review Band":
+                return [ReviewInline]  # Only reviews for review bands
+            return self.inlines  # Default behavior
+    
+    band_admin = BandAdminDynamic(Band, admin.site)
+    
+    # Test with regular band
+    regular_band = Band(name="Regular Band", bio="", sign_date=date(1965, 1, 1))
+    formsets_with_inlines = list(band_admin.get_formsets_with_inlines(request, regular_band))
+    print(f"Regular band formsets: {len(formsets_with_inlines)}")
+    if formsets_with_inlines:
+        formset, inline = formsets_with_inlines[0]
+        print(f"Regular band inline class: {inline.__class__.__name__}")
+    
+    # Test with special band
+    special_band = Band(name="Special Band", bio="", sign_date=date(1965, 1, 1))
+    formsets_with_inlines = list(band_admin.get_formsets_with_inlines(request, special_band))
+    print(f"Special band formsets: {len(formsets_with_inlines)}")
+    
+    # Test with review band
+    review_band = Band(name="Review Band", bio="", sign_date=date(1965, 1, 1))
+    formsets_with_inlines = list(band_admin.get_formsets_with_inlines(request, review_band))
+    print(f"Review band formsets: {len(formsets_with_inlines)}")
+    if formsets_with_inlines:
+        formset, inline = formsets_with_inlines[0]
+        print(f"Review band inline class: {inline.__class__.__name__}")
+    
+    print("All get_formsets_with_inlines tests passed!")
+
+if __name__ == '__main__':
+    test_formsets_with_inlines()
\ No newline at end of file
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..8db0e122b6
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,111 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the fix for get_swappable_settings_name cache clearing.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_comprehensive_cache_clearing():
+    """Test that clear_cache() properly clears all caches including get_swappable_settings_name"""
+    
+    print("Running comprehensive cache clearing test...")
+    
+    # Test 1: Basic functionality - cache should be cleared
+    print("\n1. Testing basic cache clearing:")
+    
+    # First call to populate cache
+    result1 = apps.get_swappable_settings_name("auth.User")
+    cache_info_before = apps.get_swappable_settings_name.cache_info()
+    print(f"  Cache before clear: {cache_info_before}")
+    
+    # Clear cache
+    apps.clear_cache()
+    cache_info_after_clear = apps.get_swappable_settings_name.cache_info()
+    print(f"  Cache after clear: {cache_info_after_clear}")
+    
+    # Second call - should miss cache and repopulate
+    result2 = apps.get_swappable_settings_name("auth.User")
+    cache_info_final = apps.get_swappable_settings_name.cache_info()
+    print(f"  Cache final: {cache_info_final}")
+    
+    # Verify cache was properly cleared and repopulated
+    assert cache_info_after_clear.currsize == 0, "Cache should be empty after clear_cache()"
+    assert cache_info_final.currsize == 1, "Cache should be repopulated after second call"
+    assert cache_info_final.misses == 1, "Should have 1 miss (second call)"
+    print("  ✅ Basic cache clearing works correctly")
+    
+    # Test 2: Multiple calls with different parameters
+    print("\n2. Testing multiple parameters:")
+    
+    apps.clear_cache()
+    results = []
+    test_cases = ["auth.User", "auth.Group", "contenttypes.ContentType"]
+    
+    for test_case in test_cases:
+        result = apps.get_swappable_settings_name(test_case)
+        results.append(result)
+    
+    cache_info_multi = apps.get_swappable_settings_name.cache_info()
+    print(f"  Cache after multiple calls: {cache_info_multi}")
+    assert cache_info_multi.currsize == len(test_cases), f"Cache should have {len(test_cases)} entries"
+    
+    # Clear cache and verify all are cleared
+    apps.clear_cache()
+    cache_info_cleared = apps.get_swappable_settings_name.cache_info()
+    assert cache_info_cleared.currsize == 0, "All cache entries should be cleared"
+    print("  ✅ Multiple parameter cache clearing works correctly")
+    
+    # Test 3: Verify other caches are still cleared (get_models)
+    print("\n3. Testing other caches are still cleared:")
+    
+    # Populate get_models cache
+    models = apps.get_models()
+    models_cache_info = apps.get_models.cache_info()
+    print(f"  get_models cache before: {models_cache_info}")
+    
+    # Clear cache
+    apps.clear_cache()
+    models_cache_after = apps.get_models.cache_info()
+    print(f"  get_models cache after: {models_cache_after}")
+    
+    assert models_cache_after.currsize == 0, "get_models cache should also be cleared"
+    print("  ✅ get_models cache clearing still works correctly")
+    
+    # Test 4: Edge case - empty cache
+    print("\n4. Testing edge case - clearing empty cache:")
+    
+    apps.clear_cache()  # Clear any existing cache
+    empty_cache_info = apps.get_swappable_settings_name.cache_info()
+    assert empty_cache_info.currsize == 0, "Cache should be empty"
+    
+    # Clear empty cache - should not cause issues
+    apps.clear_cache()
+    still_empty_cache_info = apps.get_swappable_settings_name.cache_info()
+    assert still_empty_cache_info.currsize == 0, "Cache should still be empty"
+    print("  ✅ Clearing empty cache works correctly")
+    
+    print("\n✅ All tests passed! The fix is working correctly.")
+    return True
+
+if __name__ == "__main__":
+    success = test_comprehensive_cache_clearing()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/django/apps/registry.py b/django/apps/registry.py
index 0683f3ad3c..481dd1fc86 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -376,6 +376,7 @@ class Apps:
         # Call expire cache on each model. This will purge
         # the relation tree and the fields cache.
         self.get_models.cache_clear()
+        self.get_swappable_settings_name.cache_clear()
         if self.ready:
             # Circumvent self.get_models() to prevent that the cache is refilled.
             # This particularly prevents that an empty value is cached while cloning.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e354f648ae
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where Apps.clear_cache() does not clear 
+get_swappable_settings_name cache.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_get_swappable_settings_name_cache():
+    """Test that get_swappable_settings_name cache is not cleared by clear_cache()"""
+    
+    print("Testing get_swappable_settings_name cache behavior...")
+    
+    # First call - should populate cache
+    result1 = apps.get_swappable_settings_name("auth.User")
+    print(f"First call result: {result1}")
+    
+    # Check if cache is populated
+    cache_info = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after first call: {cache_info}")
+    
+    # Clear cache using clear_cache()
+    print("Calling apps.clear_cache()...")
+    apps.clear_cache()
+    
+    # Check if get_swappable_settings_name cache was cleared
+    cache_info_after_clear = apps.get_swappable_settings_name.cache_info()
+    print(f"Cache info after clear_cache(): {cache_info_after_clear}")
+    
+    # Second call - should use cache if not cleared properly
+    result2 = apps.get_swappable_settings_name("auth.User")
+    print(f"Second call result: {result2}")
+    
+    # Final cache info
+    final_cache_info = apps.get_swappable_settings_name.cache_info()
+    print(f"Final cache info: {final_cache_info}")
+    
+    # The issue: hits should increase if cache wasn't cleared
+    if final_cache_info.hits > cache_info.hits:
+        print("❌ BUG CONFIRMED: get_swappable_settings_name cache was NOT cleared by clear_cache()")
+        return False
+    else:
+        print("✅ Cache was properly cleared")
+        return True
+
+if __name__ == "__main__":
+    success = test_get_swappable_settings_name_cache()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_existing_functionality.py b/test_existing_functionality.py
new file mode 100644
index 0000000000..2b5f956d3a
--- /dev/null
+++ b/test_existing_functionality.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+"""
+Test to verify that our changes don't break existing Apps functionality.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.apps import apps
+
+def test_existing_apps_functionality():
+    """Test that existing Apps functionality still works after our changes"""
+    
+    print("Testing existing Apps functionality...")
+    
+    # Test 1: Basic app registry functionality
+    print("\n1. Testing basic app registry functionality:")
+    
+    # Get app configs
+    app_configs = list(apps.get_app_configs())
+    print(f"  Found {len(app_configs)} app configs")
+    assert len(app_configs) > 0, "Should find at least one app config"
+    
+    # Get specific app config
+    auth_config = apps.get_app_config('auth')
+    assert auth_config is not None, "Should find auth app config"
+    print(f"  Found auth app config: {auth_config.name}")
+    
+    # Test 2: Model retrieval functionality
+    print("\n2. Testing model retrieval functionality:")
+    
+    # Get all models
+    all_models = apps.get_models()
+    print(f"  Found {len(all_models)} models")
+    assert len(all_models) > 0, "Should find at least one model"
+    
+    # Get specific model
+    user_model = apps.get_model('auth', 'User')
+    assert user_model is not None, "Should find User model"
+    print(f"  Found User model: {user_model.__name__}")
+    
+    # Test 3: get_swappable_settings_name functionality
+    print("\n3. Testing get_swappable_settings_name functionality:")
+    
+    # Test with auth.User (should return AUTH_USER_MODEL)
+    result = apps.get_swappable_settings_name("auth.User")
+    print(f"  get_swappable_settings_name('auth.User') = {result}")
+    assert result == "AUTH_USER_MODEL", "Should return AUTH_USER_MODEL for auth.User"
+    
+    # Test with non-swappable model (should return None)
+    result_none = apps.get_swappable_settings_name("auth.Permission")
+    print(f"  get_swappable_settings_name('auth.Permission') = {result_none}")
+    assert result_none is None, "Should return None for non-swappable models"
+    
+    # Test 4: clear_cache functionality (our main fix)
+    print("\n4. Testing clear_cache functionality:")
+    
+    # Populate caches
+    apps.get_models()  # Populate get_models cache
+    apps.get_swappable_settings_name("auth.User")  # Populate get_swappable_settings_name cache
+    
+    # Check cache is populated
+    models_cache_before = apps.get_models.cache_info()
+    swappable_cache_before = apps.get_swappable_settings_name.cache_info()
+    print(f"  get_models cache before: {models_cache_before}")
+    print(f"  get_swappable_settings_name cache before: {swappable_cache_before}")
+    
+    # Clear cache
+    apps.clear_cache()
+    
+    # Check cache is cleared
+    models_cache_after = apps.get_models.cache_info()
+    swappable_cache_after = apps.get_swappable_settings_name.cache_info()
+    print(f"  get_models cache after: {models_cache_after}")
+    print(f"  get_swappable_settings_name cache after: {swappable_cache_after}")
+    
+    assert models_cache_after.currsize == 0, "get_models cache should be cleared"
+    assert swappable_cache_after.currsize == 0, "get_swappable_settings_name cache should be cleared"
+    
+    print("\n✅ All existing functionality tests passed!")
+    return True
+
+if __name__ == "__main__":
+    success = test_existing_apps_functionality()
+    sys.exit(0 if success else 1)
\ No newline at end of file
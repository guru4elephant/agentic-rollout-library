diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 64be087bf1..6d4f2865ab 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                         "class": get_ul_class(self.radio_fields[db_field.name]),
                     }
                 )
-                kwargs["empty_label"] = _("None") if db_field.blank else None
+                kwargs["empty_label"] = (kwargs.get("empty_label") or _("None")) if db_field.blank else None
 
         if "queryset" not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..558e7ce306
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')
+
+import django
+from django.conf import settings
+from django.contrib import admin
+from django.db import models
+
+# Configure Django
+if not settings.configured:
+    django.setup()
+
+# Now import the models after Django is configured
+from django.contrib.auth.models import User
+from django.forms import ModelForm
+from django.test import TestCase
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    related_field = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
+    
+    def __str__(self):
+        return self.name
+
+# Create a ModelAdmin that reproduces the issue
+class TestModelAdmin(admin.ModelAdmin):
+    radio_fields = {'related_field': admin.HORIZONTAL}
+    
+    def formfield_for_foreignkey(self, db_field, request, **kwargs):
+        if db_field.name == 'related_field':
+            kwargs['empty_label'] = "I WANT TO SET MY OWN EMPTY LABEL"
+        return super().formfield_for_foreignkey(db_field, request, **kwargs)
+
+# Test the issue
+def test_empty_label_override():
+    # Create a mock request
+    from django.test import RequestFactory
+    factory = RequestFactory()
+    request = factory.get('/admin/')
+    
+    # Create the ModelAdmin instance
+    model_admin = TestModelAdmin(TestModel, admin.site)
+    
+    # Get the formfield for the foreign key
+    db_field = TestModel._meta.get_field('related_field')
+    formfield = model_admin.formfield_for_foreignkey(db_field, request)
+    
+    # Check if the empty_label was preserved
+    empty_label = formfield.empty_label
+    print(f"Empty label: {empty_label}")
+    
+    if empty_label == "I WANT TO SET MY OWN EMPTY LABEL":
+        print("SUCCESS: Custom empty_label was preserved!")
+        return True
+    else:
+        print(f"FAILURE: Expected 'I WANT TO SET MY OWN EMPTY LABEL', but got '{empty_label}'")
+        return False
+
+if __name__ == '__main__':
+    success = test_empty_label_override()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..b6c2f5f5d3
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')
+
+import django
+from django.conf import settings
+from django.contrib import admin
+from django.db import models
+from django import forms
+
+# Configure Django
+if not settings.configured:
+    django.setup()
+
+# Create simple models for testing
+class RelatedModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+    
+    def __str__(self):
+        return self.name
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    related_field = models.ForeignKey(RelatedModel, on_delete=models.CASCADE, null=True, blank=True)
+    
+    class Meta:
+        app_label = 'testapp'
+    
+    def __str__(self):
+        return self.name
+
+# Create a ModelAdmin that reproduces the issue
+class TestModelAdmin(admin.ModelAdmin):
+    radio_fields = {'related_field': admin.HORIZONTAL}
+    
+    def formfield_for_foreignkey(self, db_field, request, **kwargs):
+        if db_field.name == 'related_field':
+            kwargs['empty_label'] = "I WANT TO SET MY OWN EMPTY LABEL"
+        return super().formfield_for_foreignkey(db_field, request, **kwargs)
+
+# Test the issue
+def test_empty_label_override():
+    # Create a mock request
+    from django.test import RequestFactory
+    factory = RequestFactory()
+    request = factory.get('/admin/')
+    
+    # Create the ModelAdmin instance
+    model_admin = TestModelAdmin(TestModel, admin.site)
+    
+    # Get the formfield for the foreign key
+    db_field = TestModel._meta.get_field('related_field')
+    formfield = model_admin.formfield_for_foreignkey(db_field, request)
+    
+    # Check if the empty_label was preserved
+    empty_label = formfield.empty_label
+    print(f"Empty label: {empty_label}")
+    
+    if empty_label == "I WANT TO SET MY OWN EMPTY LABEL":
+        print("SUCCESS: Custom empty_label was preserved!")
+        return True
+    else:
+        print(f"FAILURE: Expected 'I WANT TO SET MY OWN EMPTY LABEL', but got '{empty_label}'")
+        return False
+
+if __name__ == '__main__':
+    success = test_empty_label_override()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..61a3049980
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,132 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Mock the minimal Django components needed for the test
+from unittest.mock import Mock, MagicMock
+
+# Mock the _ function for translation
+def _(text):
+    return text
+
+# Mock the widgets module
+class MockAdminRadioSelect:
+    def __init__(self, *args, **kwargs):
+        pass
+
+class MockWidgets:
+    AdminRadioSelect = MockAdminRadioSelect
+
+widgets = MockWidgets()
+
+# Mock the get_ul_class function
+def get_ul_class(style):
+    return f"ul-class-{style}"
+
+# Create a mock db_field
+class MockDBField:
+    def __init__(self, name, blank=True):
+        self.name = name
+        self.blank = blank
+        self.remote_field = Mock()
+
+# Create a mock ModelAdmin class to test the fix
+class TestModelAdmin:
+    def __init__(self):
+        self.radio_fields = {'test_field': 'horizontal'}
+        self.raw_id_fields = []
+        self.admin_site = Mock()
+    
+    def formfield_for_foreignkey(self, db_field, request, **kwargs):
+        # This is the original method from options.py
+        db = kwargs.get("using")
+        
+        if "widget" not in kwargs:
+            if db_field.name in self.get_autocomplete_fields(request):
+                pass  # Skip for simplicity
+            elif db_field.name in self.raw_id_fields:
+                pass  # Skip for simplicity
+            elif db_field.name in self.radio_fields:
+                kwargs["widget"] = widgets.AdminRadioSelect(
+                    attrs={
+                        "class": get_ul_class(self.radio_fields[db_field.name]),
+                    }
+                )
+                # This is the fixed line
+                kwargs["empty_label"] = (kwargs.get("empty_label") or _("None")) if db_field.blank else None
+        
+        return kwargs
+
+    def get_autocomplete_fields(self, request):
+        return []
+    
+    def get_field_queryset(self, db, db_field, request):
+        return None
+
+def test_empty_label_preservation():
+    """Test that custom empty_label is preserved when using radio_fields"""
+    
+    # Create ModelAdmin instance
+    model_admin = TestModelAdmin()
+    
+    # Create a mock db_field
+    db_field = MockDBField('test_field', blank=True)
+    
+    # Test case 1: Custom empty_label should be preserved
+    kwargs = {'empty_label': 'CUSTOM LABEL'}
+    result = model_admin.formfield_for_foreignkey(db_field, Mock(), **kwargs)
+    
+    print(f"Test 1 - Custom empty_label provided:")
+    print(f"  Input empty_label: {kwargs['empty_label']}")
+    print(f"  Output empty_label: {result['empty_label']}")
+    
+    if result['empty_label'] == 'CUSTOM LABEL':
+        print("  ✓ PASS: Custom empty_label was preserved")
+        test1_pass = True
+    else:
+        print("  ✗ FAIL: Custom empty_label was overridden")
+        test1_pass = False
+    
+    # Test case 2: Default empty_label should be used when none provided
+    kwargs = {}
+    result = model_admin.formfield_for_foreignkey(db_field, Mock(), **kwargs)
+    
+    print(f"\nTest 2 - No empty_label provided:")
+    print(f"  Output empty_label: {result['empty_label']}")
+    
+    if result['empty_label'] == 'None':
+        print("  ✓ PASS: Default empty_label was used")
+        test2_pass = True
+    else:
+        print("  ✗ FAIL: Default empty_label was not used correctly")
+        test2_pass = False
+    
+    # Test case 3: Non-blank field should have no empty_label
+    db_field_no_blank = MockDBField('test_field', blank=False)
+    kwargs = {}
+    result = model_admin.formfield_for_foreignkey(db_field_no_blank, Mock(), **kwargs)
+    
+    print(f"\nTest 3 - Non-blank field:")
+    print(f"  Output empty_label: {result.get('empty_label', 'None (not set)')}")
+    
+    if 'empty_label' not in result or result.get('empty_label') is None:
+        print("  ✓ PASS: No empty_label for non-blank field")
+        test3_pass = True
+    else:
+        print("  ✗ FAIL: empty_label should not be set for non-blank field")
+        test3_pass = False
+    
+    return test1_pass and test2_pass and test3_pass
+
+if __name__ == '__main__':
+    success = test_empty_label_preservation()
+    if success:
+        print("\n✓ All tests passed! The fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_radio_fields_empty_label.py b/test_radio_fields_empty_label.py
new file mode 100644
index 0000000000..820405f157
--- /dev/null
+++ b/test_radio_fields_empty_label.py
@@ -0,0 +1,125 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')
+
+import django
+from django.conf import settings
+from django.contrib import admin
+from django.db import models
+
+# Configure Django
+if not settings.configured:
+    django.setup()
+
+# Create simple models for testing
+class RelatedModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+    
+    def __str__(self):
+        return self.name
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    related_field = models.ForeignKey(RelatedModel, on_delete=models.CASCADE, null=True, blank=True)
+    required_field = models.ForeignKey(RelatedModel, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'testapp'
+    
+    def __str__(self):
+        return self.name
+
+# Test the fix for radio_fields empty_label issue
+def test_radio_fields_empty_label_fix():
+    """Test that custom empty_label is preserved when using radio_fields"""
+    
+    # Create ModelAdmin with radio_fields
+    class TestModelAdmin(admin.ModelAdmin):
+        radio_fields = {'related_field': admin.HORIZONTAL}
+        
+        def formfield_for_foreignkey(self, db_field, request, **kwargs):
+            if db_field.name == 'related_field':
+                kwargs['empty_label'] = "CUSTOM EMPTY LABEL"
+            return super().formfield_for_foreignkey(db_field, request, **kwargs)
+    
+    # Create ModelAdmin instance
+    model_admin = TestModelAdmin(TestModel, admin.site)
+    
+    # Create a mock request
+    from django.test import RequestFactory
+    factory = RequestFactory()
+    request = factory.get('/admin/')
+    
+    # Test case 1: Custom empty_label should be preserved for blank field
+    db_field = TestModel._meta.get_field('related_field')
+    formfield = model_admin.formfield_for_foreignkey(db_field, request)
+    
+    print("Test Case 1: Custom empty_label with blank field")
+    print(f"  Expected: CUSTOM EMPTY LABEL")
+    print(f"  Actual: {formfield.empty_label}")
+    
+    if formfield.empty_label == "CUSTOM EMPTY LABEL":
+        print("  ✓ PASS")
+        test1_pass = True
+    else:
+        print("  ✗ FAIL")
+        test1_pass = False
+    
+    # Test case 2: Required field should not have empty_label
+    db_field_required = TestModel._meta.get_field('required_field')
+    formfield_required = model_admin.formfield_for_foreignkey(db_field_required, request)
+    
+    print("\nTest Case 2: Required field (no empty_label expected)")
+    print(f"  Expected: None")
+    print(f"  Actual: {formfield_required.empty_label}")
+    
+    if formfield_required.empty_label is None:
+        print("  ✓ PASS")
+        test2_pass = True
+    else:
+        print("  ✗ FAIL")
+        test2_pass = False
+    
+    # Test case 3: No custom empty_label should use default
+    class TestModelAdminDefault(admin.ModelAdmin):
+        radio_fields = {'related_field': admin.HORIZONTAL}
+    
+    model_admin_default = TestModelAdminDefault(TestModel, admin.site)
+    formfield_default = model_admin_default.formfield_for_foreignkey(db_field, request)
+    
+    print("\nTest Case 3: Default empty_label when none provided")
+    print(f"  Expected: None (translated)")
+    print(f"  Actual: {formfield_default.empty_label}")
+    
+    if formfield_default.empty_label == "None":  # This is the translated default
+        print("  ✓ PASS")
+        test3_pass = True
+    else:
+        print("  ✗ FAIL")
+        test3_pass = False
+    
+    return test1_pass and test2_pass and test3_pass
+
+if __name__ == '__main__':
+    print("Testing radio_fields empty_label fix...")
+    print("=" * 50)
+    
+    success = test_radio_fields_empty_label_fix()
+    
+    print("\n" + "=" * 50)
+    if success:
+        print("✓ All tests passed! The fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
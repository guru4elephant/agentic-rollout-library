diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..2862b6d87
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+import pandas as pd
+from sklearn.compose import make_column_selector, make_column_transformer
+from sklearn.feature_selection import VarianceThreshold
+
+df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+out1 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder=VarianceThreshold(),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("out1 (with remainder):")
+print(out1)
+
+out2 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("out2 (without remainder):")
+print(out2)
\ No newline at end of file
diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..55c34edc3 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -303,6 +303,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
         for trans in transformers:
             _safe_set_output(trans, transform=transform)
 
+        # Also set output for remainder transformer if it exists and is not "drop" or "passthrough"
+        if (self.remainder not in {"passthrough", "drop"} and
+            self.remainder is not None):
+            _safe_set_output(self.remainder, transform=transform)
+
         return self
 
     def get_params(self, deep=True):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..032d60078
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,40 @@
+import pandas as pd
+from sklearn.compose import make_column_selector, make_column_transformer
+from sklearn.feature_selection import VarianceThreshold
+from sklearn.preprocessing import StandardScaler
+
+# Test case 1: remainder="drop" (should not cause issues)
+df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+out1 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder="drop",
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("Test 1 - remainder='drop':")
+print(out1)
+
+# Test case 2: remainder="passthrough" (should not cause issues)
+out2 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder="passthrough",
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("Test 2 - remainder='passthrough':")
+print(out2)
+
+# Test case 3: remainder with a different transformer
+out3 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder=StandardScaler(),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("Test 3 - remainder=StandardScaler():")
+print(out3)
+
+# Test case 4: No remainder specified (defaults to "drop")
+out4 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print("Test 4 - no remainder specified (defaults to 'drop'):")
+print(out4)
\ No newline at end of file
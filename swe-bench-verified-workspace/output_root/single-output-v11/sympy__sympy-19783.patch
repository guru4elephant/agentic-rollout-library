diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..59b9ba6ee1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+from sympy.physics.quantum.dagger import Dagger
+from sympy.physics.quantum.operator import Operator
+from sympy.physics.quantum import IdentityOperator
+
+# Create an operator
+A = Operator('A')
+Identity = IdentityOperator()
+
+# Test normal multiplication with identity
+print("A * Identity:")
+result1 = A * Identity
+print(result1)
+print(f"Type: {type(result1)}")
+print()
+
+# Test Dagger of A multiplied by identity
+print("Dagger(A) * Identity:")
+B = Dagger(A)
+result2 = B * Identity
+print(result2)
+print(f"Type: {type(result2)}")
+print()
+
+# Expected: result2 should be simplified to Dagger(A), not Dagger(A) * IdentityOperator()
+print("Expected: Dagger(A) should be returned, not Dagger(A) * IdentityOperator()")
\ No newline at end of file
diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..9bb566d6e6 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -85,5 +85,15 @@ def __new__(cls, arg):
             return obj
         return Expr.__new__(cls, arg)
 
+    def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        
+        # Return NotImplemented when multiplying with IdentityOperator
+        # so that Python will call IdentityOperator.__rmul__ instead
+        if isinstance(other, IdentityOperator):
+            return NotImplemented
+            
+        return super(Dagger, self).__mul__(other)
+
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..bde419fb0f 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -307,11 +307,30 @@ def _print_contents_latex(self, printer, *args):
 
     def __mul__(self, other):
 
+        from sympy.physics.quantum.dagger import Dagger
+        
         if isinstance(other, Operator):
             return other
+            
+        # Handle Dagger objects that wrap operators
+        if isinstance(other, Dagger) and len(other.args) == 1 and isinstance(other.args[0], Operator):
+            return other
 
         return Mul(self, other)
 
+    def __rmul__(self, other):
+
+        from sympy.physics.quantum.dagger import Dagger
+        
+        if isinstance(other, Operator):
+            return other
+            
+        # Handle Dagger objects that wrap operators
+        if isinstance(other, Dagger) and len(other.args) == 1 and isinstance(other.args[0], Operator):
+            return other
+
+        return Mul(other, self)
+
     def _represent_default_basis(self, **options):
         if not self.N or self.N == oo:
             raise NotImplementedError('Cannot represent infinite dimensional' +
diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 2c62182d31..8b28a60485 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         if settings_dict['USER']:
             kwargs['user'] = settings_dict['USER']
         if settings_dict['NAME']:
-            kwargs['db'] = settings_dict['NAME']
+            kwargs['database'] = settings_dict['NAME']
         if settings_dict['PASSWORD']:
-            kwargs['passwd'] = settings_dict['PASSWORD']
+            kwargs['password'] = settings_dict['PASSWORD']
         if settings_dict['HOST'].startswith('/'):
             kwargs['unix_socket'] = settings_dict['HOST']
         elif settings_dict['HOST']:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8323b6587f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the MySQL deprecated kwargs issue.
+This script will test the get_connection_params method by directly
+examining the source code.
+"""
+
+import os
+import sys
+import re
+
+def test_mysql_connection_params():
+    """Test that MySQL connection uses deprecated kwargs by examining source code"""
+    print("Examining MySQL backend source code for deprecated kwargs...")
+    
+    # Read the MySQL base.py file
+    mysql_base_path = "/testbed/django/db/backends/mysql/base.py"
+    
+    try:
+        with open(mysql_base_path, 'r') as f:
+            content = f.read()
+        
+        # Look for the deprecated kwargs
+        db_pattern = r"kwargs\['db'\]"
+        passwd_pattern = r"kwargs\['passwd'\]"
+        
+        db_matches = re.findall(db_pattern, content)
+        passwd_matches = re.findall(passwd_pattern, content)
+        
+        print(f"Found {len(db_matches)} occurrences of 'db' parameter:")
+        for match in db_matches:
+            print(f"  ❌ {match}")
+        
+        print(f"Found {len(passwd_matches)} occurrences of 'passwd' parameter:")
+        for match in passwd_matches:
+            print(f"  ❌ {match}")
+        
+        # Look for the correct kwargs
+        database_pattern = r"kwargs\['database'\]"
+        password_pattern = r"kwargs\['password'\]"
+        
+        database_matches = re.findall(database_pattern, content)
+        password_matches = re.findall(password_pattern, content)
+        
+        print(f"Found {len(database_matches)} occurrences of 'database' parameter:")
+        for match in database_matches:
+            print(f"  ✅ {match}")
+        
+        print(f"Found {len(password_matches)} occurrences of 'password' parameter:")
+        for match in password_matches:
+            print(f"  ✅ {match}")
+        
+        # Check if deprecated kwargs are used
+        if db_matches:
+            print("❌ ISSUE FOUND: 'db' parameter is used (should be 'database')")
+        else:
+            print("✅ 'db' parameter not found")
+        
+        if passwd_matches:
+            print("❌ ISSUE FOUND: 'passwd' parameter is used (should be 'password')")
+        else:
+            print("✅ 'passwd' parameter not found")
+            
+    except FileNotFoundError:
+        print(f"❌ File not found: {mysql_base_path}")
+    except Exception as e:
+        print(f"❌ Error reading file: {e}")
+
+if __name__ == "__main__":
+    # Add the current directory to Python path
+    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+    
+    # Set Django settings module
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+    
+    test_mysql_connection_params()
\ No newline at end of file
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 0000000000..c55a65a4de
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the MySQL kwargs fix works correctly.
+This test simulates the get_connection_params method behavior.
+"""
+
+import sys
+import os
+
+# Add the testbed to Python path
+sys.path.insert(0, '/testbed')
+
+def test_get_connection_params_simulation():
+    """Simulate the get_connection_params method to test our changes"""
+    print("Testing simulated get_connection_params method...")
+    
+    # Simulate the settings_dict that would be passed to DatabaseWrapper
+    settings_dict = {
+        'USER': 'test_user',
+        'NAME': 'test_database',
+        'PASSWORD': 'test_password',
+        'HOST': 'localhost',
+        'PORT': '3306',
+        'OPTIONS': {}
+    }
+    
+    # Simulate the get_connection_params method logic
+    kwargs = {
+        'conv': 'django_conversions',  # Mock value
+        'charset': 'utf8',
+    }
+    
+    if settings_dict['USER']:
+        kwargs['user'] = settings_dict['USER']
+    
+    if settings_dict['NAME']:
+        kwargs['database'] = settings_dict['NAME']  # This should now use 'database' instead of 'db'
+    
+    if settings_dict['PASSWORD']:
+        kwargs['password'] = settings_dict['PASSWORD']  # This should now use 'password' instead of 'passwd'
+    
+    if settings_dict['HOST'].startswith('/'):
+        kwargs['unix_socket'] = settings_dict['HOST']
+    elif settings_dict['HOST']:
+        kwargs['host'] = settings_dict['HOST']
+    
+    if settings_dict['PORT']:
+        kwargs['port'] = int(settings_dict['PORT'])
+    
+    # Test the results
+    print("Generated connection parameters:")
+    for key, value in kwargs.items():
+        print(f"  {key}: {value}")
+    
+    # Verify the deprecated kwargs are NOT used
+    assert 'db' not in kwargs, "❌ 'db' parameter found (should be 'database')"
+    assert 'passwd' not in kwargs, "❌ 'passwd' parameter found (should be 'password')"
+    
+    # Verify the correct kwargs ARE used
+    assert 'database' in kwargs, "❌ 'database' parameter not found"
+    assert 'password' in kwargs, "❌ 'password' parameter not found"
+    
+    # Verify the values are correct
+    assert kwargs['database'] == 'test_database', "❌ Database name incorrect"
+    assert kwargs['password'] == 'test_password', "❌ Password incorrect"
+    
+    print("✅ All tests passed! The fix is working correctly.")
+
+if __name__ == "__main__":
+    test_get_connection_params_simulation()
\ No newline at end of file
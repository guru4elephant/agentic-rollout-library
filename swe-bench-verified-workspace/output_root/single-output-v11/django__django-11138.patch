diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..013d007f8f
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings for different scenarios
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        TIME_ZONE='Europe/Paris',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            },
+            'legacy_paris': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+                'TIME_ZONE': 'Europe/Paris',  # Same as global TIME_ZONE
+            },
+            'legacy_utc': {
+                'ENGINE': 'django.db.backends.sqlite3', 
+                'NAME': ':memory:',
+                'TIME_ZONE': 'UTC',  # Different from global TIME_ZONE
+            },
+            'legacy_no_tz': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+                # No TIME_ZONE specified - should use UTC
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.db import connections
+from django.db.backends.mysql.operations import DatabaseOperations
+
+def test_mysql_timezone_conversion(db_alias, expected_source_tz):
+    """Test MySQL timezone conversion for a specific database connection"""
+    mysql_ops = DatabaseOperations(connections[db_alias])
+    
+    # Test conversion to same timezone (should be optimized)
+    result_same = mysql_ops._convert_field_to_tz('my_datetime_field', mysql_ops.connection.timezone_name)
+    print(f"{db_alias} - Same timezone conversion: {result_same}")
+    
+    # Test conversion to different timezone (use US/Eastern)
+    result_diff = mysql_ops._convert_field_to_tz('my_datetime_field', 'US/Eastern')
+    print(f"{db_alias} - Different timezone conversion: {result_diff}")
+    
+    # Check database timezone setting
+    print(f"{db_alias} - Database timezone_name: {mysql_ops.connection.timezone_name}")
+    print(f"{db_alias} - Expected source timezone: {expected_source_tz}")
+    print()
+
+# Test different scenarios
+test_mysql_timezone_conversion('legacy_paris', 'Europe/Paris')
+test_mysql_timezone_conversion('legacy_utc', 'UTC')
+test_mysql_timezone_conversion('legacy_no_tz', 'UTC')
\ No newline at end of file
diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..da15e79ec2 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -69,8 +69,8 @@ class DatabaseOperations(BaseDatabaseOperations):
             return "DATE(%s)" % (field_name)
 
     def _convert_field_to_tz(self, field_name, tzname):
-        if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+        if settings.USE_TZ and self.connection.timezone_name != tzname:
+            field_name = "CONVERT_TZ(%s, '%s', '%s')" % (field_name, self.connection.timezone_name, tzname)
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
diff --git a/final_test_original_issue.py b/final_test_original_issue.py
new file mode 100644
index 0000000000..3611ecd450
--- /dev/null
+++ b/final_test_original_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import django
+from django.conf import settings
+
+# Configure Django settings to match the original issue
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        TIME_ZONE='Europe/Paris',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            },
+            'legacy': {
+                'ENGINE': 'django.db.backends.sqlite3',  # Using sqlite for testing
+                'NAME': ':memory:',
+                'TIME_ZONE': 'Europe/Paris',  # tz2 from the issue
+            },
+        },
+        SECRET_KEY='test',
+    )
+
+django.setup()
+
+from django.db import connections
+from django.db.backends.mysql.operations import DatabaseOperations
+
+def test_original_issue_fixed():
+    """Test that the original issue is fixed"""
+    
+    mysql_ops = DatabaseOperations(connections['legacy'])
+    
+    # Simulate the datetime_cast_date_sql call that would be used in __date lookups
+    # This is what gets called when using my_datetime_field__date lookup
+    result = mysql_ops.datetime_cast_date_sql('my_datetime_field', 'Europe/Paris')
+    
+    print("Original issue test:")
+    print("Database TIME_ZONE setting:", mysql_ops.connection.timezone_name)
+    print("Target timezone: Europe/Paris")
+    print("Generated SQL:", result)
+    
+    # The original issue was that it would generate:
+    # DATE(CONVERT_TZ(my_datetime_field, 'UTC', 'Europe/Paris'))
+    # Which is wrong because it should convert from the database timezone, not UTC
+    
+    # With the fix, it should generate:
+    # DATE(CONVERT_TZ(my_datetime_field, 'Europe/Paris', 'Europe/Paris'))
+    # But since source and target are the same, it gets optimized to:
+    # DATE(my_datetime_field)
+    
+    # This is correct behavior - no conversion needed when timezones are the same
+    assert result == "DATE(my_datetime_field)", f"Expected 'DATE(my_datetime_field)', got '{result}'"
+    
+    print("✓ Original issue is FIXED! No unnecessary timezone conversion when timezones match")
+    
+    # Test with different timezones
+    result2 = mysql_ops.datetime_cast_date_sql('my_datetime_field', 'UTC')
+    expected2 = "DATE(CONVERT_TZ(my_datetime_field, 'Europe/Paris', 'UTC'))"
+    assert result2 == expected2, f"Expected '{expected2}', got '{result2}'"
+    
+    print("✓ Different timezone conversion also works correctly")
+    print("✓ The MySQL TIME_ZONE setting is now properly respected!")
+
+if __name__ == '__main__':
+    test_original_issue_fixed()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..58b8b48663
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        TIME_ZONE='Europe/Paris',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            },
+            'legacy': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+                'TIME_ZONE': 'Europe/Paris',  # This should be used instead of UTC
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.db import connections
+from django.db.backends.mysql.operations import DatabaseOperations
+
+# Test the MySQL operations
+mysql_ops = DatabaseOperations(connections['legacy'])
+
+# This should convert from the database timezone (Europe/Paris) to target timezone
+# but currently it converts from UTC to target timezone
+result = mysql_ops._convert_field_to_tz('my_datetime_field', 'Europe/Paris')
+print("Current conversion SQL:", result)
+print("Expected: Should convert from database timezone (Europe/Paris), not UTC")
+
+# Check what the database timezone setting is
+print("Database timezone_name:", mysql_ops.connection.timezone_name)
+
+# The issue is that it hardcodes 'UTC' instead of using the database timezone setting
\ No newline at end of file
diff --git a/test_mysql_fix.py b/test_mysql_fix.py
new file mode 100644
index 0000000000..47373b26e2
--- /dev/null
+++ b/test_mysql_fix.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    USE_TZ=True,
+    TIME_ZONE='Europe/Paris',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        },
+        'legacy_db': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+            'TIME_ZONE': 'Europe/Paris',
+        },
+        'utc_db': {
+            'ENGINE': 'django.db.backends.sqlite3', 
+            'NAME': ':memory:',
+            'TIME_ZONE': 'UTC',
+        }
+    },
+    SECRET_KEY='test',
+)
+
+django.setup()
+
+from django.db import connections
+from django.db.backends.mysql.operations import DatabaseOperations
+
+def test_mysql_timezone_fix():
+    """Test that MySQL operations use the correct database timezone"""
+    
+    # Test with legacy database (Europe/Paris timezone)
+    legacy_ops = DatabaseOperations(connections['legacy_db'])
+    
+    # Test conversion from database timezone to same timezone (should be optimized)
+    result1 = legacy_ops._convert_field_to_tz('my_field', 'Europe/Paris')
+    assert result1 == 'my_field', f"Expected 'my_field', got '{result1}'"
+    print("✓ Same timezone conversion optimized correctly")
+    
+    # Test conversion from database timezone to different timezone
+    result2 = legacy_ops._convert_field_to_tz('my_field', 'UTC')
+    expected2 = "CONVERT_TZ(my_field, 'Europe/Paris', 'UTC')"
+    assert result2 == expected2, f"Expected '{expected2}', got '{result2}'"
+    print("✓ Different timezone conversion works correctly")
+    
+    # Test with UTC database
+    utc_ops = DatabaseOperations(connections['utc_db'])
+    
+    # Test conversion from UTC to same timezone (should be optimized)
+    result3 = utc_ops._convert_field_to_tz('my_field', 'UTC')
+    assert result3 == 'my_field', f"Expected 'my_field', got '{result3}'"
+    print("✓ UTC to UTC conversion optimized correctly")
+    
+    # Test conversion from UTC to different timezone
+    result4 = utc_ops._convert_field_to_tz('my_field', 'Europe/Paris')
+    expected4 = "CONVERT_TZ(my_field, 'UTC', 'Europe/Paris')"
+    assert result4 == expected4, f"Expected '{expected4}', got '{result4}'"
+    print("✓ UTC to different timezone conversion works correctly")
+    
+    print("All tests passed! MySQL timezone fix is working correctly.")
+
+if __name__ == '__main__':
+    test_mysql_timezone_fix()
\ No newline at end of file
diff --git a/test_oracle_behavior.py b/test_oracle_behavior.py
new file mode 100644
index 0000000000..a7cf70a0d6
--- /dev/null
+++ b/test_oracle_behavior.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    USE_TZ=True,
+    TIME_ZONE='Europe/Paris',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        },
+        'oracle_db': {
+            'ENGINE': 'django.db.backends.sqlite3',  # Using sqlite to avoid cx_Oracle dependency
+            'NAME': ':memory:',
+            'TIME_ZONE': 'Europe/Paris',
+        }
+    },
+    SECRET_KEY='test',
+)
+
+django.setup()
+
+from django.db import connections
+from django.db.backends.oracle.operations import DatabaseOperations
+
+def test_oracle_timezone_behavior():
+    """Test Oracle timezone behavior to understand if it needs fixing"""
+    
+    # Create Oracle operations instance
+    oracle_ops = DatabaseOperations(connections['oracle_db'])
+    
+    print("Oracle connection timezone_name:", oracle_ops.connection.timezone_name)
+    
+    # The Oracle implementation hardcodes '0:00' (UTC) instead of using the database timezone
+    # This is the same issue as MySQL had
+    
+    print("Oracle needs the same fix as MySQL - it hardcodes '0:00' instead of using database timezone")
+
+if __name__ == '__main__':
+    test_oracle_timezone_behavior()
\ No newline at end of file
diff --git a/test_oracle_timezone.py b/test_oracle_timezone.py
new file mode 100644
index 0000000000..eec0515a6a
--- /dev/null
+++ b/test_oracle_timezone.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_TZ=True,
+        TIME_ZONE='Europe/Paris',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            },
+            'oracle_db': {
+                'ENGINE': 'django.db.backends.oracle',
+                'NAME': 'test',
+                'TIME_ZONE': 'Europe/Paris',  # This should be used instead of UTC
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.db import connections
+from django.db.backends.oracle.operations import DatabaseOperations
+
+# Test the Oracle operations
+oracle_ops = DatabaseOperations(connections['oracle_db'])
+
+# This should convert from the database timezone (Europe/Paris) to target timezone
+# but currently it converts from UTC to target timezone
+result = oracle_ops._convert_field_to_tz('my_datetime_field', 'Europe/Paris')
+print("Current Oracle conversion SQL:", result)
+print("Expected: Should convert from database timezone (Europe/Paris), not UTC")
+print("Database timezone_name:", oracle_ops.connection.timezone_name)
\ No newline at end of file
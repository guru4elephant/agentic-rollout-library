diff --git a/check_annotation_output.py b/check_annotation_output.py
new file mode 100644
index 000000000..e4f83ece5
--- /dev/null
+++ b/check_annotation_output.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""Check what the annotation version actually outputs."""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Test: Function with Python type annotation
+test_module_annotation = '''
+from typing import Union
+
+def foo(text: Union[bytes, str]) -> None:
+    """Bar
+
+    :param text: a text
+    """
+    return text
+'''
+
+# Create temporary test module
+with tempfile.NamedTemporaryFile(mode='w', suffix='_annotation.py', delete=False) as f:
+    f.write(test_module_annotation)
+    test_module_annotation_path = f.name
+
+try:
+    # Create a simple conf.py
+    conf_py_content = '''
+extensions = ['sphinx.ext.autodoc']
+autodoc_mock_imports = []
+'''
+
+    # Create simple index.rst
+    index_rst_annotation = '''
+Test Documentation - Annotation
+===============================
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_annotation_path).replace('.py', ''))
+
+    # Set up temporary directories
+    srcdir_annotation = tempfile.mkdtemp()
+    outdir_annotation = tempfile.mkdtemp()
+    doctreedir_annotation = tempfile.mkdtemp()
+
+    # Write config files
+    with open(os.path.join(srcdir_annotation, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir_annotation, 'index.rst'), 'w') as f:
+        f.write(index_rst_annotation)
+
+    # Add the test module directory to Python path
+    import sys
+    sys.path.insert(0, os.path.dirname(test_module_annotation_path))
+
+    # Test annotation version
+    with docutils_namespace():
+        app = Sphinx(srcdir_annotation, srcdir_annotation, outdir_annotation, doctreedir_annotation, 'html')
+        app.build()
+        
+        html_file = os.path.join(outdir_annotation, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Annotation version HTML content:")
+                print("=" * 50)
+                # Show the relevant parts
+                lines = content.split('\n')
+                for i, line in enumerate(lines):
+                    if 'Union' in line or 'bytes' in line or 'str' in line:
+                        print(f"Line {i}: {line.strip()}")
+
+finally:
+    # Clean up
+    os.unlink(test_module_annotation_path)
\ No newline at end of file
diff --git a/debug_complex_union.py b/debug_complex_union.py
new file mode 100644
index 000000000..729379049
--- /dev/null
+++ b/debug_complex_union.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+"""Debug complex union type parsing."""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Test complex union type specifically
+test_module_content = '''
+def function3(value):
+    """Function with complex union types.
+    
+    :param value: a complex value
+    :type value: list[int] | dict[str, int] | None
+    """
+    return value
+'''
+
+# Create temporary test module
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
+    f.write(test_module_content)
+    test_module_path = f.name
+
+try:
+    # Create a simple conf.py
+    conf_py_content = '''
+extensions = ['sphinx.ext.autodoc']
+autodoc_mock_imports = []
+'''
+
+    # Create a simple index.rst
+    index_rst_content = '''
+Complex Union Test
+==================
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_path).replace('.py', ''))
+
+    # Set up temporary directories
+    srcdir = tempfile.mkdtemp()
+    outdir = tempfile.mkdtemp()
+    doctreedir = tempfile.mkdtemp()
+
+    # Write config files
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write(index_rst_content)
+
+    # Add the test module directory to Python path
+    import sys
+    sys.path.insert(0, os.path.dirname(test_module_path))
+
+    # Create Sphinx app
+    with docutils_namespace():
+        app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+        
+        # Build the documentation
+        app.build()
+        
+        # Check what was actually generated
+        html_file = os.path.join(outdir, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Complex Union Test Results:")
+                print("=" * 50)
+                
+                # Look for the specific parameter
+                lines = content.split('\n')
+                for i, line in enumerate(lines):
+                    if 'value' in line and ('list' in line or 'dict' in line or 'None' in line):
+                        print(f"Line {i}: {line.strip()}")
+                        
+                # Check if the exact string exists
+                if 'list[int] | dict[str, int] | None' in content:
+                    print("‚úì Exact complex union found")
+                else:
+                    print("‚úó Exact complex union NOT found")
+                    print("Looking for similar patterns...")
+                    
+                    # Check for partial matches
+                    patterns = ['list[int]', 'dict[str, int]', 'list', 'dict', 'None']
+                    for pattern in patterns:
+                        if pattern in content:
+                            print(f"  ‚úì '{pattern}' found")
+                        else:
+                            print(f"  ‚úó '{pattern}' NOT found")
+
+finally:
+    # Clean up
+    os.unlink(test_module_path)
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..257a3aaff
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+"""Final test to demonstrate that union type parsing with | syntax works."""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Test various union type combinations
+test_module_content = '''
+def function1(text):
+    """Function with simple union type.
+    
+    :param text: a text parameter
+    :type text: bytes | str
+    """
+    return text
+
+def function2(data):
+    """Function with multiple union types.
+    
+    :param data: some data
+    :type data: int | float | None
+    """
+    return data
+
+def function3(value):
+    """Function with complex union types.
+    
+    :param value: a complex value
+    :type value: list[int] | dict[str, int] | None
+    """
+    return value
+
+def function4(item):
+    """Function with mixed types.
+    
+    :param item: mixed type item
+    :type item: str | int | bool | None
+    """
+    return item
+'''
+
+# Create temporary test module
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
+    f.write(test_module_content)
+    test_module_path = f.name
+
+try:
+    # Create a simple conf.py
+    conf_py_content = '''
+extensions = ['sphinx.ext.autodoc']
+autodoc_mock_imports = []
+'''
+
+    # Create a simple index.rst
+    index_rst_content = '''
+Union Type Test
+===============
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_path).replace('.py', ''))
+
+    # Set up temporary directories
+    srcdir = tempfile.mkdtemp()
+    outdir = tempfile.mkdtemp()
+    doctreedir = tempfile.mkdtemp()
+
+    # Write config files
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write(index_rst_content)
+
+    # Add the test module directory to Python path
+    import sys
+    sys.path.insert(0, os.path.dirname(test_module_path))
+
+    # Create Sphinx app
+    with docutils_namespace():
+        app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+        
+        # Build the documentation
+        app.build()
+        
+        # Check if all union types were parsed correctly
+        html_file = os.path.join(outdir, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Union Type Support Test Results:")
+                print("=" * 50)
+                
+                test_cases = [
+                    ('bytes | str', 'Simple union'),
+                    ('int | float | None', 'Multiple union with None'),
+                    ('list[int] | dict[str, int] | None', 'Complex generic union'),
+                    ('str | int | bool | None', 'Mixed type union'),
+                ]
+                
+                all_passed = True
+                for union_type, description in test_cases:
+                    if union_type in content:
+                        print(f"‚úì PASS: {description} ('{union_type}')")
+                    else:
+                        print(f"‚úó FAIL: {description} ('{union_type}')")
+                        all_passed = False
+                
+                print("=" * 50)
+                if all_passed:
+                    print("üéâ ALL TESTS PASSED! Union type parsing with | syntax is working correctly.")
+                else:
+                    print("‚ùå SOME TESTS FAILED! Union type parsing may have issues.")
+                
+                # Show some examples from the HTML
+                print("\nExamples from generated HTML:")
+                lines = content.split('\n')
+                for i, line in enumerate(lines):
+                    if any(ut in line for ut, _ in test_cases):
+                        print(f"Line {i}: {line.strip()}")
+
+finally:
+    # Clean up
+    os.unlink(test_module_path)
\ No newline at end of file
diff --git a/proper_test.py b/proper_test.py
new file mode 100644
index 000000000..41674b9fe
--- /dev/null
+++ b/proper_test.py
@@ -0,0 +1,133 @@
+#!/usr/bin/env python3
+"""Proper test to verify union type parsing works correctly."""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Test various union type combinations
+test_module_content = '''
+def function1(text):
+    """Function with simple union type.
+    
+    :param text: a text parameter
+    :type text: bytes | str
+    """
+    return text
+
+def function2(data):
+    """Function with multiple union types.
+    
+    :param data: some data
+    :type data: int | float | None
+    """
+    return data
+
+def function3(value):
+    """Function with complex union types.
+    
+    :param value: a complex value
+    :type value: list[int] | dict[str, int] | None
+    """
+    return value
+'''
+
+# Create temporary test module
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
+    f.write(test_module_content)
+    test_module_path = f.name
+
+try:
+    # Create a simple conf.py
+    conf_py_content = '''
+extensions = ['sphinx.ext.autodoc']
+autodoc_mock_imports = []
+'''
+
+    # Create a simple index.rst
+    index_rst_content = '''
+Union Type Test
+===============
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_path).replace('.py', ''))
+
+    # Set up temporary directories
+    srcdir = tempfile.mkdtemp()
+    outdir = tempfile.mkdtemp()
+    doctreedir = tempfile.mkdtemp()
+
+    # Write config files
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write(index_rst_content)
+
+    # Add the test module directory to Python path
+    import sys
+    sys.path.insert(0, os.path.dirname(test_module_path))
+
+    # Create Sphinx app
+    with docutils_namespace():
+        app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+        
+        # Build the documentation
+        app.build()
+        
+        # Check if union types were parsed correctly by looking at the content structure
+        html_file = os.path.join(outdir, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Union Type Support Test Results:")
+                print("=" * 50)
+                
+                # Look for the parameter descriptions
+                lines = content.split('\n')
+                union_patterns = []
+                
+                for i, line in enumerate(lines):
+                    if '<strong>' in line and '</strong>' in line and '<em>' in line and '</em>' in line:
+                        # This is likely a parameter description
+                        print(f"Parameter line {i}: {line.strip()}")
+                        
+                        # Extract the type part
+                        import re
+                        em_pattern = r'<em>(.*?)</em>'
+                        em_matches = re.findall(em_pattern, line)
+                        if em_matches:
+                            union_patterns.extend(em_matches)
+                
+                print("\nFound union patterns:")
+                for pattern in union_patterns:
+                    print(f"  {pattern}")
+                    
+                # Check if we have the expected patterns
+                expected_patterns = [
+                    'bytes | str',
+                    'int | float | None', 
+                    'list[int] | dict[str, int] | None'
+                ]
+                
+                print("\nPattern verification:")
+                all_found = True
+                for expected in expected_patterns:
+                    # Check if any pattern contains the expected text (ignoring HTML tags)
+                    found = any(expected in pattern for pattern in union_patterns)
+                    if found:
+                        print(f"‚úì '{expected}' found in patterns")
+                    else:
+                        print(f"‚úó '{expected}' NOT found in patterns")
+                        all_found = False
+                
+                if all_found:
+                    print("\nüéâ ALL UNION TYPES PARSED CORRECTLY!")
+                else:
+                    print("\n‚ùå SOME UNION TYPES NOT PARSED CORRECTLY!")
+
+finally:
+    # Clean up
+    os.unlink(test_module_path)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..9104389e9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the union type parsing issue."""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Create a simple test module with union types
+test_module_content = '''
+def foo(text):
+    """Bar
+
+    :param text: a text
+    :type text: bytes | str
+
+    """
+    return text
+'''
+
+# Create a temporary test module
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
+    f.write(test_module_content)
+    test_module_path = f.name
+
+try:
+    # Create a simple conf.py
+    conf_py_content = '''
+extensions = ['sphinx.ext.autodoc']
+autodoc_mock_imports = []
+'''
+
+    # Create a simple index.rst
+    index_rst_content = '''
+Test Documentation
+==================
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_path).replace('.py', ''))
+
+    # Set up temporary directories
+    srcdir = tempfile.mkdtemp()
+    outdir = tempfile.mkdtemp()
+    doctreedir = tempfile.mkdtemp()
+
+    # Write config files
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write(index_rst_content)
+
+    # Add the test module directory to Python path
+    import sys
+    sys.path.insert(0, os.path.dirname(test_module_path))
+
+    # Create Sphinx app
+    with docutils_namespace():
+        app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+        
+        # Build the documentation
+        app.build()
+        
+        # Check if the union type was parsed correctly
+        # Look for the generated HTML content
+        html_file = os.path.join(outdir, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Generated HTML content:")
+                print(content)
+                print("\nLooking for union type representation...")
+                if 'bytes | str' in content:
+                    print("‚úì Union type 'bytes | str' found in HTML")
+                else:
+                    print("‚úó Union type 'bytes | str' NOT found in HTML")
+
+finally:
+    # Clean up
+    os.unlink(test_module_path)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 2538952e3..94e1d8b32 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/test_docstring_type.py b/test_docstring_type.py
new file mode 100644
index 000000000..a40739dc8
--- /dev/null
+++ b/test_docstring_type.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+"""Test script to check :type: directive parsing in docstrings."""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Create a simple test module with union types in docstrings
+test_module_content = '''
+def foo(text):
+    """Bar
+
+    :param text: a text
+    :type text: bytes | str
+
+    """
+    return text
+
+def bar(data):
+    """Another function
+
+    :param data: some data
+    :type data: int | float | None
+
+    """
+    return data
+'''
+
+# Create a temporary test module
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
+    f.write(test_module_content)
+    test_module_path = f.name
+
+try:
+    # Create a simple conf.py
+    conf_py_content = '''
+extensions = ['sphinx.ext.autodoc']
+autodoc_mock_imports = []
+'''
+
+    # Create a simple index.rst
+    index_rst_content = '''
+Test Documentation
+==================
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_path).replace('.py', ''))
+
+    # Set up temporary directories
+    srcdir = tempfile.mkdtemp()
+    outdir = tempfile.mkdtemp()
+    doctreedir = tempfile.mkdtemp()
+
+    # Write config files
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write(index_rst_content)
+
+    # Add the test module directory to Python path
+    import sys
+    sys.path.insert(0, os.path.dirname(test_module_path))
+
+    # Create Sphinx app
+    with docutils_namespace():
+        app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+        
+        # Build the documentation
+        app.build()
+        
+        # Check if the union type was parsed correctly
+        # Look for the generated HTML content
+        html_file = os.path.join(outdir, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Generated HTML content:")
+                print("=" * 50)
+                
+                # Look for specific patterns
+                if 'bytes | str' in content:
+                    print("‚úì Union type 'bytes | str' found in HTML")
+                else:
+                    print("‚úó Union type 'bytes | str' NOT found in HTML")
+                    
+                if 'int | float | None' in content:
+                    print("‚úì Union type 'int | float | None' found in HTML")
+                else:
+                    print("‚úó Union type 'int | float | None' NOT found in HTML")
+                    
+                # Show the relevant parts of the HTML
+                lines = content.split('\n')
+                for i, line in enumerate(lines):
+                    if 'bytes | str' in line or 'int | float | None' in line:
+                        print(f"Line {i}: {line.strip()}")
+
+finally:
+    # Clean up
+    os.unlink(test_module_path)
\ No newline at end of file
diff --git a/test_docstring_vs_annotation.py b/test_docstring_vs_annotation.py
new file mode 100644
index 000000000..3493bc8ce
--- /dev/null
+++ b/test_docstring_vs_annotation.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+"""Test script to compare :type: directive vs Python type annotations."""
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Test 1: Function with Python type annotation (using Union for Python < 3.10)
+test_module_annotation = '''
+from typing import Union
+
+def foo(text: Union[bytes, str]) -> None:
+    """Bar
+
+    :param text: a text
+    """
+    return text
+'''
+
+# Test 2: Function with :type: directive in docstring
+test_module_docstring = '''
+def foo(text):
+    """Bar
+
+    :param text: a text
+    :type text: bytes | str
+
+    """
+    return text
+'''
+
+# Create temporary test modules
+with tempfile.NamedTemporaryFile(mode='w', suffix='_annotation.py', delete=False) as f:
+    f.write(test_module_annotation)
+    test_module_annotation_path = f.name
+
+with tempfile.NamedTemporaryFile(mode='w', suffix='_docstring.py', delete=False) as f:
+    f.write(test_module_docstring)
+    test_module_docstring_path = f.name
+
+try:
+    # Create a simple conf.py
+    conf_py_content = '''
+extensions = ['sphinx.ext.autodoc']
+autodoc_mock_imports = []
+'''
+
+    # Create simple index.rst files
+    index_rst_annotation = '''
+Test Documentation - Annotation
+===============================
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_annotation_path).replace('.py', ''))
+
+    index_rst_docstring = '''
+Test Documentation - Docstring
+===============================
+
+.. automodule:: {}
+   :members:
+'''.format(os.path.basename(test_module_docstring_path).replace('.py', ''))
+
+    # Set up temporary directories
+    srcdir_annotation = tempfile.mkdtemp()
+    outdir_annotation = tempfile.mkdtemp()
+    doctreedir_annotation = tempfile.mkdtemp()
+
+    srcdir_docstring = tempfile.mkdtemp()
+    outdir_docstring = tempfile.mkdtemp()
+    doctreedir_docstring = tempfile.mkdtemp()
+
+    # Write config files
+    with open(os.path.join(srcdir_annotation, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir_annotation, 'index.rst'), 'w') as f:
+        f.write(index_rst_annotation)
+
+    with open(os.path.join(srcdir_docstring, 'conf.py'), 'w') as f:
+        f.write(conf_py_content)
+    
+    with open(os.path.join(srcdir_docstring, 'index.rst'), 'w') as f:
+        f.write(index_rst_docstring)
+
+    # Add the test module directories to Python path
+    import sys
+    sys.path.insert(0, os.path.dirname(test_module_annotation_path))
+    sys.path.insert(0, os.path.dirname(test_module_docstring_path))
+
+    # Test annotation version
+    with docutils_namespace():
+        app = Sphinx(srcdir_annotation, srcdir_annotation, outdir_annotation, doctreedir_annotation, 'html')
+        app.build()
+        
+        html_file = os.path.join(outdir_annotation, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Annotation version HTML:")
+                if 'bytes | str' in content:
+                    print("‚úì Union type 'bytes | str' found in annotation HTML")
+                else:
+                    print("‚úó Union type 'bytes | str' NOT found in annotation HTML")
+
+    # Test docstring version
+    with docutils_namespace():
+        app = Sphinx(srcdir_docstring, srcdir_docstring, outdir_docstring, doctreedir_docstring, 'html')
+        app.build()
+        
+        html_file = os.path.join(outdir_docstring, 'index.html')
+        if os.path.exists(html_file):
+            with open(html_file, 'r') as f:
+                content = f.read()
+                print("Docstring version HTML:")
+                if 'bytes | str' in content:
+                    print("‚úì Union type 'bytes | str' found in docstring HTML")
+                else:
+                    print("‚úó Union type 'bytes | str' NOT found in docstring HTML")
+
+finally:
+    # Clean up
+    os.unlink(test_module_annotation_path)
+    os.unlink(test_module_docstring_path)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
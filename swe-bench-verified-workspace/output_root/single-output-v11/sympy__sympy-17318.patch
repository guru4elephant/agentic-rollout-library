diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..14c703b78d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+from sympy import sqrt, I, symbols, expand, Add
+from sympy.simplify.sqrtdenest import sqrtdenest, _sqrt_match
+from sympy.simplify.radsimp import split_surds, _split_gcd
+
+# Let's try to reproduce the exact scenario that causes the IndexError
+# The issue happens when split_surds is called with an expression that
+# has no surds, which then calls _split_gcd with an empty tuple
+
+print("Testing the specific functions that cause the IndexError:")
+
+# Test with the original complex expression from the issue
+expr1 = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2
+print(f"Complex expression: {expr1}")
+
+# Create an expression that might trigger the issue
+# Use symbols to prevent simplification
+x = symbols('x')
+expr2 = (3 - sqrt(2)*sqrt(4 + 3*x) + 3*x)/2
+print(f"Symbolic expression: {expr2}")
+
+# Test sqrtdenest with complex expression
+try:
+    result1 = sqrtdenest(expr1)
+    print(f"sqrtdenest result (complex): {result1}")
+except IndexError as e:
+    print(f"IndexError in sqrtdenest (complex): {e}")
+except Exception as e:
+    print(f"Other exception in sqrtdenest (complex): {e}")
+
+# Test sqrtdenest with symbolic expression
+try:
+    result2 = sqrtdenest(expr2)
+    print(f"sqrtdenest result (symbolic): {result2}")
+except IndexError as e:
+    print(f"IndexError in sqrtdenest (symbolic): {e}")
+except Exception as e:
+    print(f"Other exception in sqrtdenest (symbolic): {e}")
+
+# Let's also test split_surds directly with an empty case
+try:
+    # This should trigger the issue - calling with an expression that has no surds
+    result = split_surds(Add(3, 4*I))  # This should have no surds
+    print(f"split_surds result: {result}")
+except IndexError as e:
+    print(f"IndexError in split_surds: {e}")
+except Exception as e:
+    print(f"Other exception in split_surds: {e}")
\ No newline at end of file
diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py
index 216ae26204..b2c876c7e4 100644
--- a/sympy/simplify/radsimp.py
+++ b/sympy/simplify/radsimp.py
@@ -1077,6 +1077,9 @@ def split_surds(expr):
     coeff_muls = [x.as_coeff_Mul() for x in args]
     surds = [x[1]**2 for x in coeff_muls if x[1].is_Pow]
     surds.sort(key=default_sort_key)
+    if not surds:
+        # If there are no surds, return default values
+        return S.One, S.Zero, expr
     g, b1, b2 = _split_gcd(*surds)
     g2 = g
     if not b2 and len(b1) >= 2:
diff --git a/test_edge_case.py b/test_edge_case.py
new file mode 100644
index 0000000000..4474094df2
--- /dev/null
+++ b/test_edge_case.py
@@ -0,0 +1,19 @@
+#!/usr/bin/env python3
+
+from sympy import S
+from sympy.simplify.radsimp import split_surds
+
+# Test the most extreme edge case - empty expression
+# This should test if our fix handles all possible cases
+
+try:
+    result = split_surds(S.Zero)  # Zero has no terms
+    print(f"split_surds(S.Zero) = {result}")
+except Exception as e:
+    print(f"Error with S.Zero: {e}")
+
+try:
+    result = split_surds(S.One)  # One has no terms
+    print(f"split_surds(S.One) = {result}")
+except Exception as e:
+    print(f"Error with S.One: {e}")
\ No newline at end of file
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 0000000000..2891bf787d
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+from sympy import sqrt, I, symbols, Add, S
+from sympy.simplify.sqrtdenest import sqrtdenest
+from sympy.simplify.radsimp import split_surds
+
+def test_split_surds_edge_cases():
+    """Test split_surds with various edge cases that could cause IndexError"""
+    print("Testing split_surds edge cases...")
+    
+    # Test with no surds (should return default values)
+    result = split_surds(Add(3, 4*I))
+    assert result == (S.One, S.Zero, 3 + 4*I)
+    print("✓ No surds case handled correctly")
+    
+    # Test with simple surds
+    result = split_surds(sqrt(2) + sqrt(3))
+    print(f"✓ Simple surds case: {result}")
+    
+    # Test with mixed expression (some surds, some not)
+    result = split_surds(sqrt(2) + 3 + sqrt(3))
+    print(f"✓ Mixed expression case: {result}")
+
+def test_sqrtdenest_edge_cases():
+    """Test sqrtdenest with various edge cases"""
+    print("\nTesting sqrtdenest edge cases...")
+    
+    # Test with complex numbers (original issue)
+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2
+    result = sqrtdenest(expr)
+    print(f"✓ Complex expression handled: {result}")
+    
+    # Test with symbols
+    x = symbols('x')
+    expr = (3 - sqrt(2)*sqrt(4 + 3*x) + 3*x)/2
+    result = sqrtdenest(expr)
+    print(f"✓ Symbolic expression handled: {result}")
+    
+    # Test with simple surds (should work as before)
+    result = sqrtdenest(sqrt(5 + 2*sqrt(6)))
+    print(f"✓ Simple denesting still works: {result}")
+
+if __name__ == "__main__":
+    test_split_surds_edge_cases()
+    test_sqrtdenest_edge_cases()
+    print("\nAll tests passed! The fix is working correctly.")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..f2f17937c2
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+from sympy import sqrt, I
+from sympy.simplify.sqrtdenest import sqrtdenest
+
+# Test the exact expression from the GitHub issue
+expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2
+
+print("Testing the original GitHub issue:")
+print(f"Expression: {expr}")
+
+try:
+    result = sqrtdenest(expr)
+    print(f"Result: {result}")
+    print("✓ SUCCESS: No IndexError raised!")
+    print("✓ The expression is returned unchanged as expected")
+except IndexError as e:
+    print(f"✗ FAILED: IndexError still occurs: {e}")
+except Exception as e:
+    print(f"✗ FAILED: Other error: {e}")
\ No newline at end of file
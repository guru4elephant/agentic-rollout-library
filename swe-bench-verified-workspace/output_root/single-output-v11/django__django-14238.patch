diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..0ce7de02c6 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,7 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
diff --git a/example/__init__.py b/example/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/example/core/__init__.py b/example/core/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/example/core/models.py b/example/core/models.py
new file mode 100644
index 0000000000..9db23d13d9
--- /dev/null
+++ b/example/core/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    pass
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6194c0ba43
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DEFAULT_AUTO_FIELD="example.core.models.MyBigAutoField",
+        INSTALLED_APPS=[
+            'example.core',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+# Create the example app structure
+os.makedirs('example/core', exist_ok=True)
+
+# Create __init__.py files
+with open('example/__init__.py', 'w') as f:
+    f.write('')
+
+with open('example/core/__init__.py', 'w') as f:
+    f.write('')
+
+# Create models.py with the problematic code
+with open('example/core/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+class MyModel(models.Model):
+    pass
+''')
+
+# Test both cases
+print("Testing BigAutoField subclass...")
+settings.DEFAULT_AUTO_FIELD = "example.core.models.MyBigAutoField"
+try:
+    django.setup()
+    print("SUCCESS: BigAutoField subclass works")
+except Exception as e:
+    print(f"ERROR with BigAutoField: {e}")
+
+print("Testing SmallAutoField subclass...")
+settings.DEFAULT_AUTO_FIELD = "example.core.models.MySmallAutoField"
+try:
+    django.setup()
+    print("SUCCESS: SmallAutoField subclass works")
+except Exception as e:
+    print(f"ERROR with SmallAutoField: {e}")
+
+# Try to setup Django to reproduce the error
+try:
+    django.setup()
+    print("SUCCESS: Django setup completed without error")
+except ValueError as e:
+    print(f"ERROR: {e}")
+except Exception as e:
+    print(f"OTHER ERROR: {e}")
\ No newline at end of file
diff --git a/test_direct_validation.py b/test_direct_validation.py
new file mode 100644
index 0000000000..6b9dd16fc8
--- /dev/null
+++ b/test_direct_validation.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from django.db.models.fields import AutoField, BigAutoField, SmallAutoField, IntegerField
+
+# Test that our fix works for valid subclasses
+class MyBigAutoField(BigAutoField):
+    pass
+
+class MySmallAutoField(SmallAutoField):
+    pass
+
+class MyBigAutoField2(BigAutoField):
+    pass
+
+class MyBigAutoField3(MyBigAutoField2):
+    pass
+
+print("Testing valid subclasses:")
+print(f"MyBigAutoField is subclass of AutoField: {issubclass(MyBigAutoField, AutoField)}")
+print(f"MySmallAutoField is subclass of AutoField: {issubclass(MySmallAutoField, AutoField)}")
+print(f"MyBigAutoField3 is subclass of AutoField: {issubclass(MyBigAutoField3, AutoField)}")
+
+# Test that validation still fails for invalid classes
+print("\nTesting invalid classes:")
+print(f"IntegerField is subclass of AutoField: {issubclass(IntegerField, AutoField)}")
+print(f"str is subclass of AutoField: {issubclass(str, AutoField)}")
+
+# Test direct classes still work
+print("\nTesting direct classes:")
+print(f"BigAutoField is subclass of AutoField: {issubclass(BigAutoField, AutoField)}")
+print(f"SmallAutoField is subclass of AutoField: {issubclass(SmallAutoField, AutoField)}")
+print(f"AutoField is subclass of AutoField: {issubclass(AutoField, AutoField)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a593707bbf
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'example.core',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+# Create the example app structure
+os.makedirs('example/core', exist_ok=True)
+
+# Create __init__.py files
+with open('example/__init__.py', 'w') as f:
+    f.write('')
+
+with open('example/core/__init__.py', 'w') as f:
+    f.write('')
+
+# Create models.py with various test cases
+with open('example/core/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+# Test case 1: Direct BigAutoField
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+# Test case 2: Direct SmallAutoField  
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+# Test case 3: Multi-level inheritance
+class MyBigAutoField2(models.BigAutoField):
+    pass
+
+class MyBigAutoField3(MyBigAutoField2):
+    pass
+
+# Test case 4: Regular AutoField (should work)
+class MyAutoField(models.AutoField):
+    pass
+
+class MyModel(models.Model):
+    pass
+''')
+
+# Test 1: Direct BigAutoField subclass
+print("Test 1: Direct BigAutoField subclass")
+settings.DEFAULT_AUTO_FIELD = "example.core.models.MyBigAutoField"
+try:
+    django.setup()
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 2: Direct SmallAutoField subclass
+print("Test 2: Direct SmallAutoField subclass")
+settings.DEFAULT_AUTO_FIELD = "example.core.models.MySmallAutoField"
+try:
+    django.setup()
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 3: Multi-level inheritance
+print("Test 3: Multi-level inheritance")
+settings.DEFAULT_AUTO_FIELD = "example.core.models.MyBigAutoField3"
+try:
+    django.setup()
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 4: Regular AutoField (should still work)
+print("Test 4: Regular AutoField")
+settings.DEFAULT_AUTO_FIELD = "example.core.models.MyAutoField"
+try:
+    django.setup()
+    print("SUCCESS")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 5: Invalid field (should fail)
+print("Test 5: Invalid field (should fail)")
+settings.DEFAULT_AUTO_FIELD = "django.db.models.IntegerField"  # Use a non-AutoField
+try:
+    django.setup()
+    # Try to import a model to trigger the validation
+    from example.core.models import MyModel
+    print("ERROR: Should have failed")
+except Exception as e:
+    print(f"SUCCESS: Correctly failed with {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..47f6b8dbe1
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings exactly as described in the GitHub issue
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DEFAULT_AUTO_FIELD="example.core.models.MyBigAutoField",
+        INSTALLED_APPS=[
+            'example.core',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+# Create the example app structure exactly as described
+os.makedirs('example/core', exist_ok=True)
+
+# Create __init__.py files
+with open('example/__init__.py', 'w') as f:
+    f.write('')
+
+with open('example/core/__init__.py', 'w') as f:
+    f.write('')
+
+# Create models.py with the exact content from the GitHub issue
+with open('example/core/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    pass
+''')
+
+# Test the exact scenario from the GitHub issue
+try:
+    django.setup()
+    print("SUCCESS: The GitHub issue has been fixed!")
+    print("Django setup completed without the ValueError")
+except ValueError as e:
+    print(f"FAILED: Still getting the original error: {e}")
+except Exception as e:
+    print(f"FAILED: Unexpected error: {e}")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..e68920da05
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.model_fields',
+]
+USE_TZ = True
\ No newline at end of file
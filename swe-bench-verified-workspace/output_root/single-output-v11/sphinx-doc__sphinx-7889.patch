diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 000000000..bb6b6ef6c
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to ensure the fix works correctly
+and doesn't break existing functionality.
+"""
+
+from typing import TypeVar, Generic, Union, Optional, Any
+from sphinx.ext.autodoc.mock import _make_subclass, _MockObject
+
+def test_all_scenarios():
+    """Test all possible scenarios for the _make_subclass function."""
+    
+    test_cases = [
+        # (name, module, description)
+        ('NormalClass', 'mymodule', 'normal string module'),
+        ('GenericClass', TypeVar('T'), 'TypeVar module'),
+        ('NoneClass', None, 'None module'),
+        ('IntClass', 123, 'integer module'),
+        ('FloatClass', 45.67, 'float module'),
+        ('BoolClass', True, 'boolean module'),
+        ('ListClass', [1, 2, 3], 'list module'),
+        ('DictClass', {'key': 'value'}, 'dict module'),
+        ('CustomClass', type('Custom', (), {}), 'custom type module'),
+    ]
+    
+    for name, module, description in test_cases:
+        try:
+            result = _make_subclass(name, module, _MockObject)
+            instance = result()
+            
+            # Verify the instance was created successfully
+            assert hasattr(instance, '__display_name__')
+            assert hasattr(instance, '__module__')
+            
+            # Verify __display_name__ is a string and contains the class name
+            display_name = instance.__display_name__
+            assert isinstance(display_name, str)
+            assert name in display_name
+            
+            # Verify __module__ is preserved as the original object
+            assert instance.__module__ == module
+            
+            print(f"‚úì {description}: {display_name}")
+            
+        except Exception as e:
+            print(f"‚ùå {description}: Failed with {type(e).__name__}: {e}")
+            return False
+    
+    return True
+
+if __name__ == "__main__":
+    try:
+        success = test_all_scenarios()
+        if success:
+            print("\nüéâ All test scenarios passed! The fix is comprehensive and robust.")
+        else:
+            print("\n‚ùå Some test scenarios failed.")
+    except Exception as e:
+        print(f"\nüí• Test suite failed with: {e}")
+        raise
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..bb8cc7960
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the TypeError in autodoc's mock._make_subclass
+when dealing with generic-typed classes.
+"""
+
+from typing import TypeVar, Generic
+
+# Create a generic class similar to what would cause the issue
+T = TypeVar('T')
+
+class GenericClass(Generic[T]):
+    """A generic class that could cause the mock issue."""
+    pass
+
+# Now let's simulate what happens when autodoc tries to mock this
+from sphinx.ext.autodoc.mock import _make_subclass, _MockObject
+
+def test_mock_generic():
+    """Test that demonstrates the TypeError."""
+    try:
+        # Simulate what happens when autodoc tries to mock a generic class
+        # The issue is that module might be a TypeVar instead of a string
+        result = _make_subclass('GenericClass', T, _MockObject)
+        print("Success: No error occurred")
+        return True
+    except TypeError as e:
+        print(f"Error: {e}")
+        return False
+
+if __name__ == "__main__":
+    success = test_mock_generic()
+    if not success:
+        print("Reproduced the TypeError issue!")
+    else:
+        print("No error occurred - issue might be fixed or reproduction incomplete")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 3d499983f..e07b2fd4f 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py
index 98a3a3a96..dd2bc3e94 100644
--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -70,7 +70,9 @@ class _MockObject:
 
 def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
                    attributes: Any = None) -> Any:
-    attrs = {'__module__': module, '__display_name__': module + '.' + name}
+    # Handle cases where module might not be a string (e.g., TypeVar objects)
+    module_str = str(module) if not isinstance(module, str) else module
+    attrs = {'__module__': module, '__display_name__': module_str + '.' + name}
     attrs.update(attributes or {})
 
     return type(name, (superclass,), attrs)
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 000000000..297427ac4
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for the mock._make_subclass fix
+to ensure it handles various edge cases properly.
+"""
+
+from typing import TypeVar, Generic, Union, Optional, Any
+from sphinx.ext.autodoc.mock import _make_subclass, _MockObject
+
+def test_string_module():
+    """Test normal case with string module."""
+    result = _make_subclass('TestClass', 'test_module', _MockObject)
+    instance = result()
+    print(f"String module test: {instance.__display_name__}")
+    assert instance.__display_name__ == 'test_module.TestClass'
+    print("‚úì String module test passed")
+
+def test_typevar_module():
+    """Test case with TypeVar module."""
+    T = TypeVar('T')
+    result = _make_subclass('GenericClass', T, _MockObject)
+    instance = result()
+    print(f"TypeVar module test: {instance.__display_name__}")
+    # Should not crash and should create a reasonable display name
+    assert 'GenericClass' in instance.__display_name__
+    print("‚úì TypeVar module test passed")
+
+def test_none_module():
+    """Test case with None module."""
+    result = _make_subclass('TestClass', None, _MockObject)
+    instance = result()
+    print(f"None module test: {instance.__display_name__}")
+    assert instance.__display_name__ == 'None.TestClass'
+    print("‚úì None module test passed")
+
+def test_int_module():
+    """Test case with integer module."""
+    result = _make_subclass('TestClass', 123, _MockObject)
+    instance = result()
+    print(f"Int module test: {instance.__display_name__}")
+    assert instance.__display_name__ == '123.TestClass'
+    print("‚úì Int module test passed")
+
+def test_complex_object_module():
+    """Test case with complex object module."""
+    class CustomObj:
+        def __str__(self):
+            return "CustomObject"
+    
+    custom_obj = CustomObj()
+    result = _make_subclass('TestClass', custom_obj, _MockObject)
+    instance = result()
+    print(f"Complex object module test: {instance.__display_name__}")
+    assert instance.__display_name__ == 'CustomObject.TestClass'
+    print("‚úì Complex object module test passed")
+
+def test_original_functionality():
+    """Test that original functionality still works."""
+    # Test normal string module
+    result = _make_subclass('MyClass', 'mymodule', _MockObject)
+    instance = result()
+    assert instance.__display_name__ == 'mymodule.MyClass'
+    
+    # Test that __module__ attribute is preserved correctly
+    assert instance.__module__ == 'mymodule'
+    
+    print("‚úì Original functionality test passed")
+
+if __name__ == "__main__":
+    try:
+        test_string_module()
+        test_typevar_module()
+        test_none_module()
+        test_int_module()
+        test_complex_object_module()
+        test_original_functionality()
+        print("\nüéâ All tests passed! The fix works correctly.")
+    except Exception as e:
+        print(f"\n‚ùå Test failed: {e}")
+        raise
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..73e8e104a
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Test to verify the GitHub issue is resolved.
+This simulates the exact scenario described in the issue.
+"""
+
+from typing import TypeVar, Generic
+from sphinx.ext.autodoc.mock import _make_subclass, _MockObject
+
+def test_github_issue_scenario():
+    """
+    Test the exact scenario described in the GitHub issue:
+    Autodoc extension's mock file throws TypeError for generic-typed classes.
+    """
+    # Create a TypeVar like in generic classes
+    T = TypeVar('T')
+    
+    # This should not raise a TypeError anymore
+    try:
+        result = _make_subclass('GenericClass', T, _MockObject)
+        instance = result()
+        
+        # Verify the instance was created successfully
+        assert hasattr(instance, '__display_name__')
+        assert hasattr(instance, '__module__')
+        
+        # The display name should be a string representation of the TypeVar + class name
+        display_name = instance.__display_name__
+        assert isinstance(display_name, str)
+        assert 'GenericClass' in display_name
+        
+        # The __module__ should preserve the original TypeVar object
+        assert instance.__module__ == T
+        
+        print(f"‚úì Successfully created mock class with display_name: {display_name}")
+        print(f"‚úì __module__ preserved as TypeVar: {instance.__module__}")
+        return True
+        
+    except TypeError as e:
+        print(f"‚ùå TypeError still occurs: {e}")
+        return False
+    except Exception as e:
+        print(f"‚ùå Unexpected error: {e}")
+        return False
+
+if __name__ == "__main__":
+    success = test_github_issue_scenario()
+    if success:
+        print("\nüéâ GitHub issue has been resolved!")
+    else:
+        print("\n‚ùå GitHub issue is NOT resolved.")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
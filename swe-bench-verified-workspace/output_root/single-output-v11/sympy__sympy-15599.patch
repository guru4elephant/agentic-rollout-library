diff --git a/debug_comparison.py b/debug_comparison.py
new file mode 100644
index 0000000000..95560c3b45
--- /dev/null
+++ b/debug_comparison.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from sympy import Mod, Symbol, sympify
+
+i = Symbol('i', integer=True)
+
+expr_sympify = sympify("3*i%2")
+expected = Mod(i, 2)
+
+print(f"sympify result: {expr_sympify}")
+print(f"expected: {expected}")
+print(f"type(sympify): {type(expr_sympify)}")
+print(f"type(expected): {type(expected)}")
+print(f"sympify args: {expr_sympify.args}")
+print(f"expected args: {expected.args}")
+print(f"sympify repr: {repr(expr_sympify)}")
+print(f"expected repr: {repr(expected)}")
+
+# Check if they have the same hash
+print(f"sympify hash: {hash(expr_sympify)}")
+print(f"expected hash: {hash(expected)}")
+
+# Check if they are structurally the same
+print(f"Are they the same object? {expr_sympify is expected}")
\ No newline at end of file
diff --git a/debug_mod.py b/debug_mod.py
new file mode 100644
index 0000000000..1eaae3ef65
--- /dev/null
+++ b/debug_mod.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy import Mod, Symbol, Mul
+from sympy.core.numbers import Integer
+
+i = Symbol('i', integer=True)
+x = 3*i
+
+print('x =', x)
+print('type(x) =', type(x))
+print('isinstance(x, Mul) =', isinstance(x, Mul))
+coeff, rest = x.as_coeff_Mul()
+print('coeff =', coeff)
+print('type(coeff) =', type(coeff))
+print('isinstance(coeff, Integer) =', isinstance(coeff, Integer))
+print('rest =', rest)
+print('rest.is_integer =', rest.is_integer)
+
+# Test the simplification logic
+q = 2
+reduced_coeff = coeff % q
+print('coeff % q =', reduced_coeff)
+if reduced_coeff == 0:
+    new_x = 0
+elif reduced_coeff == 1:
+    new_x = rest
+else:
+    new_x = x
+print('new_x =', new_x)
\ No newline at end of file
diff --git a/debug_sympify.py b/debug_sympify.py
new file mode 100644
index 0000000000..0978a36df1
--- /dev/null
+++ b/debug_sympify.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python3
+
+from sympy import Mod, Symbol, sympify
+
+i = Symbol('i', integer=True)
+expr_sympify = sympify("3*i%2")
+expected = Mod(i, 2)
+
+print(f"sympify result: {expr_sympify}")
+print(f"expected: {expected}")
+print(f"type of sympify result: {type(expr_sympify)}")
+print(f"type of expected: {type(expected)}")
+print(f"repr(sympify): {repr(expr_sympify)}")
+print(f"repr(expected): {repr(expected)}")
+print(f"Are they structurally equal? {expr_sympify.equals(expected)}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f814d30e8f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,19 @@
+#!/usr/bin/env python3
+
+from sympy import Mod, Symbol, sympify
+
+# Test the issue described: Mod(3*i, 2) should simplify to Mod(i, 2)
+i = Symbol('i', integer=True)
+expr = Mod(3*i, 2)
+print(f"Mod(3*i, 2) = {expr}")
+
+# Expected: Mod(i, 2)
+expected = Mod(i, 2)
+print(f"Expected: {expected}")
+print(f"Are they equal? {expr == expected}")
+
+# Also test with sympify as mentioned in the issue
+expr_sympify = sympify("3*i%2")
+print(f"sympify(3*i%2) = {expr_sympify}")
+print(f"Expected: {expected}")
+print(f"Are they equal? {expr_sympify == expected}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..e8a4ec79b2
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+
+from sympy import Mod, Symbol, sympify
+
+i = Symbol('i', integer=True)
+
+# Test direct Mod creation
+expr_direct = Mod(3*i, 2)
+expected = Mod(i, 2)
+print(f"Mod(3*i, 2) = {expr_direct}")
+print(f"Expected: {expected}")
+print(f"Are they equal? {expr_direct == expected}")
+
+# Test sympify
+expr_sympify = sympify("3*i%2")
+print(f"sympify(3*i%2) = {expr_sympify}")
+print(f"Expected: {expected}")
+print(f"Are they equal? {expr_sympify == expected}")
+
+# Test the actual simplification works
+print(f"\nSimplification working: {expr_direct} -> {expected}")
+print(f"Simplification working: {expr_sympify} -> {expected}")
\ No newline at end of file
diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index eae25630cc..59c25a61cf 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -118,6 +118,18 @@ def doit(p, q):
                 return cls(net, q)
 
         elif isinstance(p, Mul):
+            # Check if p is a multiplication with integer coefficient that can be simplified
+            from sympy.core.numbers import Integer
+            coeff, rest = p.as_coeff_Mul()
+            if isinstance(coeff, Integer) and rest.is_integer:
+                reduced_coeff = coeff % q
+                if reduced_coeff == 0:
+                    return S.Zero
+                elif reduced_coeff == 1:
+                    return cls(rest, q)
+                elif reduced_coeff != coeff:
+                    return reduced_coeff * cls(rest, q)
+            
             # separating into modulus and non modulus
             both_l = non_mod_l, mod_l = [], []
             for arg in p.args:
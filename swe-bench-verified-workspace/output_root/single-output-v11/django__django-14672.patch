diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index ccc2223a5f..65950590e2 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):
     def identity(self):
         return super().identity + (
             self.through,
-            self.through_fields,
+            make_hashable(self.through_fields),
             self.db_constraint,
         )
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..ea451281d1
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the ManyToManyRel hash fix
+"""
+
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+        SECRET_KEY='test',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.fields.reverse_related import ManyToManyRel
+from django.utils.hashable import make_hashable
+
+def test_many_to_many_rel_hash_fix():
+    print("üß™ Testing ManyToManyRel hash fix...")
+    
+    class MockField:
+        pass
+    
+    class MockModel:
+        pass
+    
+    class MockThroughModel:
+        pass
+    
+    # Test 1: Original issue - through_fields as list
+    print("\n1. Testing original issue (through_fields as list):")
+    rel1 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=['child', 'parent']  # This was causing the issue
+    )
+    
+    try:
+        hash(rel1)
+        identity = rel1.identity
+        hash(identity)
+        print("‚úÖ PASS: Hash works with list through_fields")
+        print(f"   Identity: {identity}")
+    except Exception as e:
+        print(f"‚ùå FAIL: {e}")
+        return False
+    
+    # Test 2: through_fields as tuple
+    print("\n2. Testing through_fields as tuple:")
+    rel2 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=('child', 'parent')
+    )
+    
+    try:
+        hash(rel2)
+        print("‚úÖ PASS: Hash works with tuple through_fields")
+    except Exception as e:
+        print(f"‚ùå FAIL: {e}")
+        return False
+    
+    # Test 3: through_fields as None
+    print("\n3. Testing through_fields as None:")
+    rel3 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=None
+    )
+    
+    try:
+        hash(rel3)
+        print("‚úÖ PASS: Hash works with None through_fields")
+    except Exception as e:
+        print(f"‚ùå FAIL: {e}")
+        return False
+    
+    # Test 4: through_fields as empty list
+    print("\n4. Testing through_fields as empty list:")
+    rel4 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=[]
+    )
+    
+    try:
+        hash(rel4)
+        print("‚úÖ PASS: Hash works with empty list through_fields")
+    except Exception as e:
+        print(f"‚ùå FAIL: {e}")
+        return False
+    
+    # Test 5: Verify make_hashable behavior
+    print("\n5. Testing make_hashable function:")
+    test_cases = [
+        (['child', 'parent'], ('child', 'parent')),
+        ([], ()),
+        (None, None),
+        (('child', 'parent'), ('child', 'parent'))
+    ]
+    
+    for input_val, expected in test_cases:
+        result = make_hashable(input_val)
+        if result == expected:
+            print(f"‚úÖ PASS: make_hashable({input_val}) = {result}")
+        else:
+            print(f"‚ùå FAIL: make_hashable({input_val}) = {result}, expected {expected}")
+            return False
+    
+    print("\nüéâ All tests passed! The ManyToManyRel hash issue has been fixed.")
+    return True
+
+if __name__ == '__main__':
+    success = test_many_to_many_rel_hash_fix()
+    if not success:
+        exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..df95626a0f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ManyToManyRel hash issue
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models.fields.reverse_related import ManyToManyRel
+
+# Create a simple test to reproduce the issue
+def test_many_to_many_rel_hash():
+    print("Testing ManyToManyRel hash issue...")
+    
+    # Create a mock ManyToManyRel object with through_fields as a list
+    class MockField:
+        pass
+    
+    class MockModel:
+        pass
+    
+    # Create ManyToManyRel with through_fields as list (this is the problematic case)
+    class MockThroughModel:
+        pass
+    
+    rel = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=['child', 'parent']  # This is a list that causes the issue
+    )
+    
+    print(f"Through fields: {rel.through_fields}")
+    print(f"Type of through_fields: {type(rel.through_fields)}")
+    
+    # This should trigger the hash issue
+    try:
+        hash(rel)
+        print("Hash successful!")
+    except TypeError as e:
+        print(f"Hash failed with error: {e}")
+        print("This confirms the issue exists.")
+    
+    # Also test the identity property directly
+    try:
+        identity = rel.identity
+        print(f"Identity: {identity}")
+        hash(identity)
+        print("Identity hash successful!")
+    except TypeError as e:
+        print(f"Identity hash failed with error: {e}")
+        return True  # Issue confirmed
+    
+    return False  # No issue found
+
+if __name__ == '__main__':
+    test_many_to_many_rel_hash()
\ No newline at end of file
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 0000000000..40d3183d6f
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,155 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the ManyToManyRel hash fix handles various edge cases
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.fields.reverse_related import ManyToManyRel
+from django.utils.hashable import make_hashable
+
+def test_comprehensive_many_to_many_rel_hash():
+    print("Testing comprehensive ManyToManyRel hash scenarios...")
+    
+    class MockField:
+        pass
+    
+    class MockModel:
+        pass
+    
+    class MockThroughModel:
+        pass
+    
+    # Test case 1: through_fields as list (original issue)
+    print("\n1. Testing through_fields as list ['child', 'parent']:")
+    rel1 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=['child', 'parent']
+    )
+    
+    try:
+        hash(rel1)
+        print("‚úì Hash successful!")
+    except Exception as e:
+        print(f"‚úó Hash failed: {e}")
+    
+    # Test case 2: through_fields as tuple
+    print("\n2. Testing through_fields as tuple ('child', 'parent'):")
+    rel2 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=('child', 'parent')
+    )
+    
+    try:
+        hash(rel2)
+        print("‚úì Hash successful!")
+    except Exception as e:
+        print(f"‚úó Hash failed: {e}")
+    
+    # Test case 3: through_fields as None
+    print("\n3. Testing through_fields as None:")
+    rel3 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=None
+    )
+    
+    try:
+        hash(rel3)
+        print("‚úì Hash successful!")
+    except Exception as e:
+        print(f"‚úó Hash failed: {e}")
+    
+    # Test case 4: through_fields as empty list
+    print("\n4. Testing through_fields as empty list []:")
+    rel4 = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=[]
+    )
+    
+    try:
+        hash(rel4)
+        print("‚úì Hash successful!")
+    except Exception as e:
+        print(f"‚úó Hash failed: {e}")
+    
+    # Test case 5: Equality comparison between different through_fields
+    print("\n5. Testing equality comparison:")
+    rel_a = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=['child', 'parent']
+    )
+    
+    rel_b = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=['child', 'parent']
+    )
+    
+    rel_c = ManyToManyRel(
+        field=MockField(),
+        to=MockModel,
+        through=MockThroughModel,
+        through_fields=['different', 'fields']
+    )
+    
+    print(f"rel_a == rel_b: {rel_a == rel_b}")
+    print(f"rel_a == rel_c: {rel_a == rel_c}")
+    
+    # Test case 6: Verify make_hashable works correctly
+    print("\n6. Testing make_hashable function:")
+    test_list = ['child', 'parent']
+    test_tuple = ('child', 'parent')
+    test_none = None
+    
+    print(f"make_hashable(['child', 'parent']): {make_hashable(test_list)}")
+    print(f"make_hashable(('child', 'parent')): {make_hashable(test_tuple)}")
+    print(f"make_hashable(None): {make_hashable(test_none)}")
+    
+    # Test case 7: Hash consistency
+    print("\n7. Testing hash consistency:")
+    hash_a = hash(rel_a)
+    hash_b = hash(rel_b)
+    hash_c = hash(rel_c)
+    
+    print(f"hash(rel_a): {hash_a}")
+    print(f"hash(rel_b): {hash_b}")
+    print(f"hash(rel_c): {hash_c}")
+    print(f"hash(rel_a) == hash(rel_b): {hash_a == hash_b}")
+    print(f"hash(rel_a) == hash(rel_c): {hash_a == hash_c}")
+
+if __name__ == '__main__':
+    test_comprehensive_many_to_many_rel_hash()
\ No newline at end of file
diff --git a/test_fix_proper.py b/test_fix_proper.py
new file mode 100644
index 0000000000..bae826c4b3
--- /dev/null
+++ b/test_fix_proper.py
@@ -0,0 +1,146 @@
+#!/usr/bin/env python3
+"""
+Proper test to verify the ManyToManyRel hash fix
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.fields.reverse_related import ManyToManyRel
+
+def test_many_to_many_rel_hash_proper():
+    print("Testing ManyToManyRel hash fix properly...")
+    
+    class MockField:
+        def __init__(self, name):
+            self.name = name
+        
+        def __eq__(self, other):
+            if not isinstance(other, MockField):
+                return False
+            return self.name == other.name
+        
+        def __hash__(self):
+            return hash(self.name)
+    
+    class MockModel:
+        def __init__(self, name):
+            self.name = name
+        
+        def __eq__(self, other):
+            if not isinstance(other, MockModel):
+                return False
+            return self.name == other.name
+        
+        def __hash__(self):
+            return hash(self.name)
+    
+    class MockThroughModel:
+        def __init__(self, name):
+            self.name = name
+        
+        def __eq__(self, other):
+            if not isinstance(other, MockThroughModel):
+                return False
+            return self.name == other.name
+        
+        def __hash__(self):
+            return hash(self.name)
+    
+    # Test case 1: through_fields as list (original issue)
+    print("\n1. Testing through_fields as list ['child', 'parent']:")
+    field = MockField("test_field")
+    model = MockModel("test_model")
+    through_model = MockThroughModel("test_through_model")
+    
+    rel = ManyToManyRel(
+        field=field,
+        to=model,
+        through=through_model,
+        through_fields=['child', 'parent']
+    )
+    
+    try:
+        hash_val = hash(rel)
+        print(f"‚úì Hash successful! Hash value: {hash_val}")
+        
+        # Test identity property
+        identity = rel.identity
+        print(f"Identity: {identity}")
+        hash_identity = hash(identity)
+        print(f"Identity hash: {hash_identity}")
+        
+    except Exception as e:
+        print(f"‚úó Hash failed: {e}")
+        return False
+    
+    # Test case 2: Verify that make_hashable converts lists to tuples
+    print("\n2. Testing that make_hashable converts lists to tuples:")
+    from django.utils.hashable import make_hashable
+    
+    test_list = ['child', 'parent']
+    test_tuple = make_hashable(test_list)
+    print(f"make_hashable(['child', 'parent']): {test_tuple}")
+    print(f"Type: {type(test_tuple)}")
+    
+    # Test case 3: Test equality with same through_fields values
+    print("\n3. Testing equality with same through_fields:")
+    rel1 = ManyToManyRel(
+        field=field,
+        to=model,
+        through=through_model,
+        through_fields=['child', 'parent']
+    )
+    
+    rel2 = ManyToManyRel(
+        field=field,
+        to=model,
+        through=through_model,
+        through_fields=['child', 'parent']
+    )
+    
+    print(f"rel1 == rel2: {rel1 == rel2}")
+    print(f"hash(rel1) == hash(rel2): {hash(rel1) == hash(rel2)}")
+    
+    # Test case 4: Test inequality with different through_fields
+    print("\n4. Testing inequality with different through_fields:")
+    rel3 = ManyToManyRel(
+        field=field,
+        to=model,
+        through=through_model,
+        through_fields=['different', 'fields']
+    )
+    
+    print(f"rel1 == rel3: {rel1 == rel3}")
+    print(f"hash(rel1) == hash(rel3): {hash(rel1) == hash(rel3)}")
+    
+    return True
+
+if __name__ == '__main__':
+    success = test_many_to_many_rel_hash_proper()
+    if success:
+        print("\n‚úÖ All tests passed! The fix is working correctly.")
+    else:
+        print("\n‚ùå Some tests failed!")
\ No newline at end of file
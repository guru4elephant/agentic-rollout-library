diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index ab4ea70492..dcff5534e0 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -64,8 +64,8 @@ def list_aggregate(function):
 
 
 def check_sqlite_version():
-    if Database.sqlite_version_info < (3, 8, 3):
-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)
+    if Database.sqlite_version_info < (3, 9, 0):
+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)
 
 
 check_sqlite_version()
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..73c8948525
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the SQLite version support issue.
+This script will simulate different SQLite versions and check if Django accepts them.
+"""
+
+import sys
+from unittest.mock import patch
+from django.core.exceptions import ImproperlyConfigured
+from django.db.backends.sqlite3.base import check_sqlite_version, Database
+
+def test_sqlite_version_support():
+    """Test different SQLite versions to see what's currently supported"""
+    
+    # Test versions around the current requirement (3.8.3) and new requirement (3.9.0)
+    test_versions = [
+        (3, 8, 2),  # Should fail (current)
+        (3, 8, 3),  # Should pass (current)
+        (3, 8, 9),  # Should pass (current)
+        (3, 9, 0),  # Should pass (new requirement)
+        (3, 9, 1),  # Should pass (new requirement)
+    ]
+    
+    print("Testing SQLite version support:")
+    print("=" * 50)
+    
+    for version in test_versions:
+        with patch.object(Database, 'sqlite_version_info', version):
+            with patch.object(Database, 'sqlite_version', f"{version[0]}.{version[1]}.{version[2]}"):
+                try:
+                    check_sqlite_version()
+                    print(f"✓ SQLite {version[0]}.{version[1]}.{version[2]} - Supported")
+                except ImproperlyConfigured as e:
+                    print(f"✗ SQLite {version[0]}.{version[1]}.{version[2]} - Not supported: {e}")
+
+if __name__ == "__main__":
+    test_sqlite_version_support()
\ No newline at end of file
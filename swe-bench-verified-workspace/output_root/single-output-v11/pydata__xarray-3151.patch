diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..4609d40b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+import xarray as xr
+import numpy as np
+
+#yCoord = ['a', 'b', 'c']  # works without error
+yCoord = ['a', 'c', 'b']  # raises ValueError on combine
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("Success! No error occurred.")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..35b65a43
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,101 @@
+import xarray as xr
+import numpy as np
+
+# Test case 1: Multiple bystander dimensions
+print("Test 1: Multiple bystander dimensions")
+yCoord1 = ['a', 'c', 'b']  # non-monotonic bystander
+zCoord1 = [10, 20, 30]     # monotonic bystander
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord1,
+        z=zCoord1
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(4, 3, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord1,
+        z=zCoord1
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✓ Success with multiple bystander dimensions")
+except ValueError as e:
+    print(f"✗ Error: {e}")
+
+# Test case 2: Mixed concatenated and bystander dimensions
+print("\nTest 2: Mixed concatenated and bystander dimensions")
+yCoord2 = ['a', 'c', 'b']  # non-monotonic bystander
+zCoord2 = [10, 20, 30, 40] # concatenated dimension (different values)
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord2,
+        z=zCoord2[:3]
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(4, 3, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord2,
+        z=zCoord2[1:]
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✓ Success with mixed dimensions")
+except ValueError as e:
+    print(f"✗ Error: {e}")
+
+# Test case 3: Non-monotonic concatenated dimension (should still fail)
+print("\nTest 3: Non-monotonic concatenated dimension (should fail)")
+yCoord3 = ['a', 'c', 'b']  # non-monotonic
+zCoord3 = [10, 30, 20]     # non-monotonic concatenated dimension
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord3,
+        z=zCoord3
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(4, 3, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord3,
+        z=zCoord3
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✗ Should have failed but didn't")
+except ValueError as e:
+    print(f"✓ Correctly failed with: {e}")
\ No newline at end of file
diff --git a/test_edge_cases_fixed.py b/test_edge_cases_fixed.py
new file mode 100644
index 00000000..a43df236
--- /dev/null
+++ b/test_edge_cases_fixed.py
@@ -0,0 +1,106 @@
+import xarray as xr
+import numpy as np
+
+# Test case 1: Multiple bystander dimensions (should work)
+print("Test 1: Multiple bystander dimensions")
+yCoord1 = ['a', 'c', 'b']  # non-monotonic bystander
+zCoord1 = [10, 20, 30]     # monotonic bystander
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord1,
+        z=zCoord1
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(4, 3, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord1,
+        z=zCoord1
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✓ Success with multiple bystander dimensions")
+    print(f"  Combined shape: {ds3.data.shape}")
+except ValueError as e:
+    print(f"✗ Error: {e}")
+
+# Test case 2: Proper concatenated dimension that should be monotonic (should work)
+print("\nTest 2: Proper concatenated dimension (monotonic)")
+yCoord2 = ['a', 'c', 'b']  # non-monotonic bystander
+zCoord2_ds1 = [10, 20, 30] # concatenated dimension (monotonic)
+zCoord2_ds2 = [40, 50, 60] # concatenated dimension (monotonic)
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord2,
+        z=zCoord2_ds1
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords = dict(
+        x=[1, 2, 3],
+        y=yCoord2,
+        z=zCoord2_ds2
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✓ Success with proper concatenated dimension")
+    print(f"  Combined shape: {ds3.data.shape}")
+except ValueError as e:
+    print(f"✗ Error: {e}")
+
+# Test case 3: Non-monotonic concatenated dimension (should fail)
+print("\nTest 3: Non-monotonic concatenated dimension (should fail)")
+yCoord3 = ['a', 'c', 'b']  # non-monotonic bystander
+zCoord3_ds1 = [10, 30, 20] # concatenated dimension (non-monotonic)
+zCoord3_ds2 = [40, 60, 50] # concatenated dimension (non-monotonic)
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord3,
+        z=zCoord3_ds1
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(3, 3, 3))
+    ),
+    coords = dict(
+        x=[1, 2, 3],
+        y=yCoord3,
+        z=zCoord3_ds2
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✗ Should have failed but didn't")
+    print(f"  Combined shape: {ds3.data.shape}")
+except ValueError as e:
+    print(f"✓ Correctly failed with: {e}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 00000000..9357e296
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,68 @@
+import xarray as xr
+import numpy as np
+
+# Exact reproduction of the GitHub issue MCVE
+print("Testing exact GitHub issue reproduction...")
+
+#yCoord = ['a', 'b', 'c']  # works without error
+yCoord = ['a', 'c', 'b']  # raises ValueError on combine
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("✓ SUCCESS: combine_by_coords now works with non-monotonic identical coordinates!")
+    print(f"  Combined dataset shape: {ds3.data.shape}")
+    print(f"  y coordinates: {list(ds3.coords['y'].values)}")
+    print(f"  x coordinates: {list(ds3.coords['x'].values)}")
+except ValueError as e:
+    print(f"✗ FAILED: {e}")
+
+# Also test that the working case still works
+print("\nTesting that monotonic coordinates still work...")
+yCoord_monotonic = ['a', 'b', 'c']  # works without error
+
+ds1_mono = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord_monotonic
+    )
+)
+
+ds2_mono = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord_monotonic
+    )
+)
+
+try:
+    ds3_mono = xr.combine_by_coords((ds1_mono, ds2_mono))
+    print("✓ SUCCESS: combine_by_coords still works with monotonic coordinates!")
+    print(f"  Combined dataset shape: {ds3_mono.data.shape}")
+except ValueError as e:
+    print(f"✗ FAILED: {e}")
\ No newline at end of file
diff --git a/test_working_case.py b/test_working_case.py
new file mode 100644
index 00000000..8efd5229
--- /dev/null
+++ b/test_working_case.py
@@ -0,0 +1,32 @@
+import xarray as xr
+import numpy as np
+
+# Test the working case (monotonic coordinates)
+yCoord = ['a', 'b', 'c']  # works without error
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("Success! No error occurred with monotonic coordinates.")
+    print(f"Combined dataset shape: {ds3.data.shape}")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/xarray/core/combine.py b/xarray/core/combine.py
index 37ae903b..4ef1a4b7 100644
--- a/xarray/core/combine.py
+++ b/xarray/core/combine.py
@@ -501,7 +501,8 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',
                                    fill_value=fill_value)
 
         # Check the overall coordinates are monotonically increasing
-        for dim in concatenated.dims:
+        # Only check dimensions that were actually concatenated (not bystanders)
+        for dim in concat_dims:
             if dim in concatenated:
                 indexes = concatenated.indexes.get(dim)
                 if not (indexes.is_monotonic_increasing
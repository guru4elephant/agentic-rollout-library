diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..bc3befacf5 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,10 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        # Use the enum name instead of value for serialization
+        name_string, name_imports = serializer_factory(self.value.name).serialize()
+        imports = {'import %s' % module, *name_imports}
+        return "%s.%s[%s]" % (module, enum_class.__name__, name_string), imports
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..3b184431c0
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""Final test to verify the GitHub issue is fixed."""
+
+import os
+import sys
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+from django.db import models
+from django.db.migrations.serializer import serializer_factory
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Exact reproduction from GitHub issue
+class Status(Enum):
+    GOOD = _('Good')  # 'Good' will be translated
+    BAD = _('Bad')    # 'Bad' will be translated
+    
+    def __str__(self):
+        return self.name
+
+def test_github_issue():
+    """Test the exact scenario from the GitHub issue."""
+    print("Testing GitHub issue scenario...")
+    
+    # Test serialization of Status.GOOD
+    serializer = serializer_factory(Status.GOOD)
+    result, imports = serializer.serialize()
+    
+    print(f"Serialized result: {result}")
+    print(f"Imports: {imports}")
+    
+    # The fix should use the enum name 'GOOD' instead of the value 'Good'
+    if "Status['GOOD']" in result:
+        print("✅ SUCCESS: Enum is serialized using name 'GOOD' instead of value 'Good'")
+        print("✅ The GitHub issue has been fixed!")
+        return True
+    elif "Status('Good')" in result:
+        print("❌ FAILURE: Enum is still serialized using value 'Good' instead of name 'GOOD'")
+        return False
+    else:
+        print(f"⚠️  UNEXPECTED: {result}")
+        return False
+
+if __name__ == '__main__':
+    success = test_github_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8a48f3c32b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""Script to reproduce the enum serialization issue in Django migrations."""
+
+import os
+import sys
+import tempfile
+import shutil
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+from django.db import models
+from django.db.migrations.serializer import serializer_factory
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Define the enum and model as described in the issue
+class Status(Enum):
+    GOOD = _('Good')  # 'Good' will be translated
+    BAD = _('Bad')    # 'Bad' will be translated
+    
+    def __str__(self):
+        return self.name
+
+class Item(models.Model):
+    status = models.CharField(default=Status.GOOD, max_length=128)
+    
+    class Meta:
+        app_label = 'test_app'
+
+def test_enum_serialization():
+    """Test how enum values are serialized for migrations."""
+    print("Testing enum serialization...")
+    
+    # Test serialization of the enum value
+    try:
+        serializer = serializer_factory(Status.GOOD)
+        result, imports = serializer.serialize()
+        print(f"Serialized result: {result}")
+        print(f"Imports: {imports}")
+        
+        # Check if the result uses the value instead of the name
+        if "Status('Good')" in result:
+            print("❌ ISSUE REPRODUCED: Enum is serialized using value ('Good') instead of name ('GOOD')")
+            return False
+        elif "Status['GOOD']" in result or "Status.GOOD" in result:
+            print("✅ ISSUE FIXED: Enum is serialized using name instead of value")
+            return True
+        else:
+            print(f"⚠️  UNEXPECTED RESULT: {result}")
+            return False
+            
+    except Exception as e:
+        print(f"❌ Error during serialization: {e}")
+        return False
+
+if __name__ == '__main__':
+    success = test_enum_serialization()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..71e7d2c523
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,116 @@
+#!/usr/bin/env python3
+"""Comprehensive test for enum serialization fix."""
+
+import os
+import sys
+import tempfile
+import shutil
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+from django.db import models
+from django.db.migrations.serializer import serializer_factory
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+
+django.setup()
+
+# Test case 1: Basic enum with string values
+class Status(Enum):
+    GOOD = 'Good'
+    BAD = 'Bad'
+    
+    def __str__(self):
+        return self.name
+
+# Test case 2: Enum with translated values (as in the original issue)
+class TranslatedStatus(Enum):
+    GOOD = _('Good')
+    BAD = _('Bad')
+    
+    def __str__(self):
+        return self.name
+
+# Test case 3: Enum with different value types
+class MixedStatus(Enum):
+    ACTIVE = 1
+    INACTIVE = 'inactive'
+    PENDING = _('Pending')
+    
+    def __str__(self):
+        return self.name
+
+def test_enum_serialization(enum_class, enum_value, test_name):
+    """Test serialization of a specific enum value."""
+    print(f"\nTesting {test_name}...")
+    
+    try:
+        serializer = serializer_factory(enum_value)
+        result, imports = serializer.serialize()
+        print(f"Serialized result: {result}")
+        print(f"Imports: {imports}")
+        
+        # Check if the result uses the name instead of the value
+        if f"{enum_class.__name__}[" in result and enum_value.name in result:
+            print(f"✅ PASS: {test_name} - Enum is serialized using name '{enum_value.name}'")
+            return True
+        elif f"{enum_class.__name__}('" in result:
+            print(f"❌ FAIL: {test_name} - Enum is serialized using value instead of name")
+            return False
+        else:
+            print(f"⚠️  UNEXPECTED: {test_name} - {result}")
+            return False
+            
+    except Exception as e:
+        print(f"❌ ERROR: {test_name} - {e}")
+        return False
+
+def main():
+    """Run all test cases."""
+    print("Running comprehensive enum serialization tests...")
+    
+    tests = [
+        (Status, Status.GOOD, "Basic enum with string values"),
+        (Status, Status.BAD, "Basic enum with string values"),
+        (TranslatedStatus, TranslatedStatus.GOOD, "Enum with translated values"),
+        (TranslatedStatus, TranslatedStatus.BAD, "Enum with translated values"),
+        (MixedStatus, MixedStatus.ACTIVE, "Enum with integer values"),
+        (MixedStatus, MixedStatus.INACTIVE, "Enum with mixed value types"),
+        (MixedStatus, MixedStatus.PENDING, "Enum with translated mixed values"),
+    ]
+    
+    all_passed = True
+    for enum_class, enum_value, test_name in tests:
+        if not test_enum_serialization(enum_class, enum_value, test_name):
+            all_passed = False
+    
+    print(f"\n{'✅ ALL TESTS PASSED' if all_passed else '❌ SOME TESTS FAILED'}")
+    return all_passed
+
+if __name__ == '__main__':
+    success = main()
+    sys.exit(0 if success else 1)
\ No newline at end of file
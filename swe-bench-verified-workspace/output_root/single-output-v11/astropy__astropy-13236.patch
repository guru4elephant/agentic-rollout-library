diff --git a/astropy/table/table.py b/astropy/table/table.py
index 5afe2127a3..ddfd67dd95 100644
--- a/astropy/table/table.py
+++ b/astropy/table/table.py
@@ -1243,6 +1243,14 @@ class Table:
         # mixin class
         if (not isinstance(data, Column) and not data_is_mixin
                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):
+            warnings.warn(
+                "Structured ndarray columns are currently converted to NdarrayMixin. "
+                "In a future version, they will be added as regular Column objects. "
+                "To ensure future compatibility, wrap the structured array in a Column "
+                "object explicitly, e.g., table['col'] = Column(structured_array).",
+                FutureWarning,
+                stacklevel=2
+            )
             data = data.view(NdarrayMixin)
             data_is_mixin = True
 
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..b1127e7674
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,94 @@
+#!/usr/bin/env python3
+
+import warnings
+import numpy as np
+from astropy.table import Table, NdarrayMixin
+from astropy.table.column import Column
+
+def test_structured_array_warning():
+    """Test that structured arrays trigger FutureWarning"""
+    print("Testing structured array warning...")
+    
+    # Test 1: Structured array should trigger warning
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+        table = Table()
+        table['test_col'] = structured_array
+        
+        assert len(w) == 1
+        assert issubclass(w[0].category, FutureWarning)
+        assert "NdarrayMixin" in str(w[0].message)
+        assert "future version" in str(w[0].message)
+        assert "Column(structured_array)" in str(w[0].message)
+        print("✓ Warning triggered correctly")
+        
+        # Should still be converted to NdarrayMixin
+        assert isinstance(table['test_col'], NdarrayMixin)
+        print("✓ Still converted to NdarrayMixin")
+
+def test_no_warning_for_column():
+    """Test that explicit Column wrapping doesn't trigger warning"""
+    print("Testing no warning for explicit Column...")
+    
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+        table = Table()
+        table['test_col'] = Column(structured_array)
+        
+        assert len(w) == 0, f"Unexpected warning: {w[0].message if w else 'None'}"
+        assert isinstance(table['test_col'], Column)
+        print("✓ No warning for explicit Column")
+
+def test_no_warning_regular_arrays():
+    """Test that regular arrays don't trigger warning"""
+    print("Testing no warning for regular arrays...")
+    
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        regular_array = np.array([1, 2, 3])
+        table = Table()
+        table['test_col'] = regular_array
+        
+        assert len(w) == 0, f"Unexpected warning: {w[0].message if w else 'None'}"
+        assert isinstance(table['test_col'], Column)
+        print("✓ No warning for regular arrays")
+
+def test_no_warning_scalar_arrays():
+    """Test that scalar arrays don't trigger warning"""
+    print("Testing no warning for scalar arrays...")
+    
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        scalar_array = np.array([1.0, 2.0, 3.0])
+        table = Table()
+        table['test_col'] = scalar_array
+        
+        assert len(w) == 0, f"Unexpected warning: {w[0].message if w else 'None'}"
+        assert isinstance(table['test_col'], Column)
+        print("✓ No warning for scalar arrays")
+
+def test_no_warning_already_mixin():
+    """Test that already mixin objects don't trigger warning"""
+    print("Testing no warning for already mixin objects...")
+    
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        # Create a structured array and manually convert to mixin
+        structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+        mixin_array = structured_array.view(NdarrayMixin)
+        table = Table()
+        table['test_col'] = mixin_array
+        
+        assert len(w) == 0, f"Unexpected warning: {w[0].message if w else 'None'}"
+        assert isinstance(table['test_col'], NdarrayMixin)
+        print("✓ No warning for already mixin objects")
+
+if __name__ == "__main__":
+    test_structured_array_warning()
+    test_no_warning_for_column()
+    test_no_warning_regular_arrays()
+    test_no_warning_scalar_arrays()
+    test_no_warning_already_mixin()
+    print("\nAll tests passed! ✓")
\ No newline at end of file
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..241da675cb
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,107 @@
+#!/usr/bin/env python3
+"""
+Final verification that the GitHub issue is addressed.
+
+The issue: Structured numpy arrays are automatically converted to NdarrayMixin
+Proposed solution: Add FutureWarning and recommend explicit Column wrapping
+"""
+
+import warnings
+import numpy as np
+from astropy.table import Table, NdarrayMixin
+from astropy.table.column import Column
+
+def demonstrate_issue():
+    print("=== Demonstrating the GitHub Issue ===")
+    
+    # Create a structured numpy array
+    structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+    
+    print("Original structured array:")
+    print(f"  Type: {type(structured_array)}")
+    print(f"  dtype: {structured_array.dtype}")
+    print(f"  len(dtype): {len(structured_array.dtype)}")
+    
+    # Add to table - this should trigger the warning
+    print("\nAdding to table (should show warning):")
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        table = Table()
+        table['structured_col'] = structured_array
+        
+        # Check warning
+        if w:
+            print(f"  ✓ Warning triggered: {w[0].message}")
+        else:
+            print("  ✗ No warning triggered")
+            
+        # Check result type
+        result_type = type(table['structured_col'])
+        print(f"  Result type: {result_type}")
+        print(f"  Is NdarrayMixin: {isinstance(table['structured_col'], NdarrayMixin)}")
+        print(f"  Is Column: {isinstance(table['structured_col'], Column)}")
+
+def demonstrate_solution():
+    print("\n=== Demonstrating the Recommended Solution ===")
+    
+    # Create a structured numpy array
+    structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+    
+    print("Recommended approach - wrap in Column():")
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        table = Table()
+        table['structured_col'] = Column(structured_array)
+        
+        # Check no warning
+        if w:
+            print(f"  ✗ Unexpected warning: {w[0].message}")
+        else:
+            print("  ✓ No warning triggered (as expected)")
+            
+        # Check result type
+        result_type = type(table['structured_col'])
+        print(f"  Result type: {result_type}")
+        print(f"  Is NdarrayMixin: {isinstance(table['structured_col'], NdarrayMixin)}")
+        print(f"  Is Column: {isinstance(table['structured_col'], Column)}")
+
+def test_edge_cases():
+    print("\n=== Testing Edge Cases ===")
+    
+    # Test 1: Regular arrays shouldn't trigger warning
+    print("Testing regular arrays:")
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        regular_array = np.array([1, 2, 3])
+        table = Table()
+        table['regular_col'] = regular_array
+        
+        if w:
+            print(f"  ✗ Unexpected warning: {w[0].message}")
+        else:
+            print("  ✓ No warning for regular arrays")
+    
+    # Test 2: Already mixin objects shouldn't trigger warning
+    print("Testing already mixin objects:")
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+        mixin_array = structured_array.view(NdarrayMixin)
+        table = Table()
+        table['mixin_col'] = mixin_array
+        
+        if w:
+            print(f"  ✗ Unexpected warning: {w[0].message}")
+        else:
+            print("  ✓ No warning for already mixin objects")
+
+if __name__ == "__main__":
+    demonstrate_issue()
+    demonstrate_solution()
+    test_edge_cases()
+    print("\n=== Summary ===")
+    print("The GitHub issue has been addressed by:")
+    print("1. ✓ Adding a FutureWarning when structured arrays are automatically converted to NdarrayMixin")
+    print("2. ✓ Providing clear guidance to wrap structured arrays in Column() for future compatibility")
+    print("3. ✓ Ensuring the warning only triggers for the specific deprecated behavior")
+    print("4. ✓ Maintaining backward compatibility (still converts to NdarrayMixin)")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 4e84dd196b..3c3d00c32d 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b90b7823d3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from astropy.table import Table, NdarrayMixin
+
+# Create a structured numpy array
+structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+
+print("Original structured array:")
+print(f"Type: {type(structured_array)}")
+print(f"Data: {structured_array}")
+print(f"dtype: {structured_array.dtype}")
+print(f"len(dtype): {len(structured_array.dtype)}")
+
+# Add it to a table
+table = Table()
+table['test_col'] = structured_array
+
+print("\nAfter adding to table:")
+print(f"Column type: {type(table['test_col'])}")
+print(f"Column data: {table['test_col']}")
+print(f"Is NdarrayMixin: {isinstance(table['test_col'], NdarrayMixin)}")
+
+# Check if it's a regular Column
+from astropy.table.column import Column
+print(f"Is Column: {isinstance(table['test_col'], Column)}")
\ No newline at end of file
diff --git a/test_warning.py b/test_warning.py
new file mode 100644
index 0000000000..bdfdc6bd9a
--- /dev/null
+++ b/test_warning.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import warnings
+import numpy as np
+from astropy.table import Table, NdarrayMixin
+from astropy.table.column import Column
+
+# Test 1: Warning should be triggered for structured array
+print("Test 1: Warning for structured array")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+    table = Table()
+    table['test_col'] = structured_array
+    
+    if w:
+        print(f"Warning triggered: {w[0].message}")
+        print(f"Warning category: {w[0].category}")
+    else:
+        print("No warning triggered")
+
+print(f"Column type: {type(table['test_col'])}")
+print(f"Is NdarrayMixin: {isinstance(table['test_col'], NdarrayMixin)}")
+
+# Test 2: No warning for regular Column
+print("\nTest 2: No warning for explicit Column")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+    table2 = Table()
+    table2['test_col'] = Column(structured_array)
+    
+    if w:
+        print(f"Warning triggered: {w[0].message}")
+    else:
+        print("No warning triggered (expected)")
+
+print(f"Column type: {type(table2['test_col'])}")
+print(f"Is Column: {isinstance(table2['test_col'], Column)}")
+
+# Test 3: No warning for regular (non-structured) arrays
+print("\nTest 3: No warning for regular arrays")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    regular_array = np.array([1, 2, 3])
+    table3 = Table()
+    table3['test_col'] = regular_array
+    
+    if w:
+        print(f"Warning triggered: {w[0].message}")
+    else:
+        print("No warning triggered (expected)")
+
+print(f"Column type: {type(table3['test_col'])}")
\ No newline at end of file
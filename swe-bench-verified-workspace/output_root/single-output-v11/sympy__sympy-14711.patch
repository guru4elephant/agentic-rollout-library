diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..34d67d3f06
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Create reference frame
+N = ReferenceFrame('N')
+
+# Try the problematic sum operation
+try:
+    result = sum([N.x, (0 * N.x)])
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error occurred:", type(e).__name__, ":", str(e))
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py
index a048ee57f1..5d89e0f911 100644
--- a/sympy/physics/vector/vector.py
+++ b/sympy/physics/vector/vector.py
@@ -57,6 +57,8 @@ def __hash__(self):
 
     def __add__(self, other):
         """The add operator for Vector. """
+        if other == 0:
+            other = Vector(0)
         other = _check_vector(other)
         return Vector(self.args + other.args)
 
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..6ec7be18b0
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,29 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Test basic vector addition to ensure we didn't break anything
+A = ReferenceFrame('A')
+B = ReferenceFrame('B')
+
+# Test 1: Basic vector addition
+v1 = A.x + A.y
+print("A.x + A.y =", v1)
+
+# Test 2: Vector addition with different frames
+v2 = A.x + B.y
+print("A.x + B.y =", v2)
+
+# Test 3: Vector addition with scalar multiplication
+v3 = 2*A.x + 3*A.y
+print("2*A.x + 3*A.y =", v3)
+
+# Test 4: Vector addition with zero vector
+zero_vec = Vector(0)
+v4 = A.x + zero_vec
+print("A.x + Vector(0) =", v4)
+
+# Test 5: Multiple vector additions
+v5 = A.x + A.y + A.z
+print("A.x + A.y + A.z =", v5)
+
+print("All basic functionality tests passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..e6a0030091
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,66 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Create reference frame
+N = ReferenceFrame('N')
+
+print("Testing various edge cases for vector addition with 0:")
+
+# Test case 1: Original issue - sum with 0 * vector
+try:
+    result1 = sum([N.x, (0 * N.x)])
+    print("✓ Test 1 passed: sum([N.x, (0 * N.x)]) =", result1)
+except Exception as e:
+    print("✗ Test 1 failed:", e)
+
+# Test case 2: Direct addition with 0
+try:
+    result2 = N.x + 0
+    print("✓ Test 2 passed: N.x + 0 =", result2)
+except Exception as e:
+    print("✗ Test 2 failed:", e)
+
+# Test case 3: Addition with 0.0
+try:
+    result3 = N.x + 0.0
+    print("✓ Test 3 passed: N.x + 0.0 =", result3)
+except Exception as e:
+    print("✗ Test 3 failed:", e)
+
+# Test case 4: Addition with zero vector
+try:
+    zero_vec = Vector(0)
+    result4 = N.x + zero_vec
+    print("✓ Test 4 passed: N.x + Vector(0) =", result4)
+except Exception as e:
+    print("✗ Test 4 failed:", e)
+
+# Test case 5: Commutative property - 0 + vector
+try:
+    result5 = 0 + N.x
+    print("✓ Test 5 passed: 0 + N.x =", result5)
+except Exception as e:
+    print("✗ Test 5 failed:", e)
+
+# Test case 6: Multiple additions with 0
+try:
+    result6 = N.x + 0 + 0 + N.y + 0
+    print("✓ Test 6 passed: N.x + 0 + 0 + N.y + 0 =", result6)
+except Exception as e:
+    print("✗ Test 6 failed:", e)
+
+# Test case 7: Sum of empty list should be 0
+try:
+    result7 = sum([])
+    print("✓ Test 7 passed: sum([]) =", result7)
+except Exception as e:
+    print("✗ Test 7 failed:", e)
+
+# Test case 8: Sum of single vector
+try:
+    result8 = sum([N.x])
+    print("✓ Test 8 passed: sum([N.x]) =", result8)
+except Exception as e:
+    print("✗ Test 8 failed:", e)
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_github_issue_exact.py b/test_github_issue_exact.py
new file mode 100644
index 0000000000..1c740a9f4f
--- /dev/null
+++ b/test_github_issue_exact.py
@@ -0,0 +1,8 @@
+# Exact reproduction of the GitHub issue
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+N = ReferenceFrame('N')
+result = sum([N.x, (0 * N.x)])
+print("Result:", result)
+print("Type:", type(result))
\ No newline at end of file
diff --git a/test_non_zero_scalars.py b/test_non_zero_scalars.py
new file mode 100644
index 0000000000..cd5d0d52d3
--- /dev/null
+++ b/test_non_zero_scalars.py
@@ -0,0 +1,36 @@
+from sympy.physics.vector import ReferenceFrame, Vector
+from sympy import symbols
+
+# Test that non-zero scalars still raise appropriate errors
+N = ReferenceFrame('N')
+
+print("Testing that non-zero scalars still raise TypeError:")
+
+# Test 1: Addition with non-zero scalar
+try:
+    result = N.x + 1
+    print("✗ Test 1 failed: Should have raised TypeError but got:", result)
+except TypeError as e:
+    print("✓ Test 1 passed: Correctly raised TypeError:", str(e))
+except Exception as e:
+    print("✗ Test 1 failed: Unexpected exception:", type(e).__name__, ":", str(e))
+
+# Test 2: Addition with non-zero float
+try:
+    result = N.x + 1.5
+    print("✗ Test 2 failed: Should have raised TypeError but got:", result)
+except TypeError as e:
+    print("✓ Test 2 passed: Correctly raised TypeError:", str(e))
+except Exception as e:
+    print("✗ Test 2 failed: Unexpected exception:", type(e).__name__, ":", str(e))
+
+# Test 3: Addition with string
+try:
+    result = N.x + "invalid"
+    print("✗ Test 3 failed: Should have raised TypeError but got:", result)
+except TypeError as e:
+    print("✓ Test 3 passed: Correctly raised TypeError:", str(e))
+except Exception as e:
+    print("✗ Test 3 failed: Unexpected exception:", type(e).__name__, ":", str(e))
+
+print("All non-zero scalar tests completed!")
\ No newline at end of file
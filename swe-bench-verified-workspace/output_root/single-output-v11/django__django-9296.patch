diff --git a/django/core/paginator.py b/django/core/paginator.py
index 1f92da5d4f..ca39383a1f 100644
--- a/django/core/paginator.py
+++ b/django/core/paginator.py
@@ -106,6 +106,13 @@ class Paginator:
         """
         return range(1, self.num_pages + 1)
 
+    def __iter__(self):
+        """
+        Iterate through all pages in the paginator.
+        """
+        for page_num in self.page_range:
+            yield self.page(page_num)
+
     def _check_object_list_is_ordered(self):
         """
         Warn if self.object_list is unordered (typically a QuerySet).
diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 0000000000..83d898a11c
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test of the __iter__ implementation.
+"""
+from django.core.paginator import Paginator
+
+def test_comprehensive():
+    print("Running comprehensive tests...")
+    
+    # Test 1: Normal iteration
+    print("\n1. Normal pagination:")
+    data = list(range(1, 101))
+    paginator = Paginator(data, 10)
+    
+    # Test that we can use both methods
+    pages_from_iter = list(paginator)
+    pages_from_range = [paginator.page(num) for num in paginator.page_range]
+    
+    assert len(pages_from_iter) == len(pages_from_range) == 10
+    for iter_page, range_page in zip(pages_from_iter, pages_from_range):
+        assert iter_page.number == range_page.number
+        assert list(iter_page) == list(range_page)
+    
+    print("âœ“ Normal pagination works correctly")
+    
+    # Test 2: Empty data
+    print("\n2. Empty data:")
+    empty_paginator = Paginator([], 10)
+    pages = list(empty_paginator)
+    assert len(pages) == 1
+    assert list(pages[0]) == []
+    assert pages[0].number == 1
+    print("âœ“ Empty data handled correctly")
+    
+    # Test 3: Single page
+    print("\n3. Single page:")
+    single_paginator = Paginator([1, 2, 3], 10)
+    pages = list(single_paginator)
+    assert len(pages) == 1
+    assert list(pages[0]) == [1, 2, 3]
+    print("âœ“ Single page handled correctly")
+    
+    # Test 4: Edge case with orphans
+    print("\n4. Orphans handling:")
+    orphan_paginator = Paginator(list(range(1, 16)), 5, orphans=2)
+    pages = list(orphan_paginator)
+    assert len(pages) == 3
+    print("âœ“ Orphans handled correctly")
+    
+    # Test 5: Verify iterator protocol
+    print("\n5. Iterator protocol:")
+    paginator = Paginator(list(range(1, 21)), 5)
+    iterator = iter(paginator)
+    
+    # Test next() function
+    page1 = next(iterator)
+    assert page1.number == 1
+    assert list(page1) == [1, 2, 3, 4, 5]
+    
+    page2 = next(iterator)
+    assert page2.number == 2
+    assert list(page2) == [6, 7, 8, 9, 10]
+    
+    # Test for loop
+    count = 0
+    for page in paginator:
+        count += 1
+        assert hasattr(page, 'number')
+        assert hasattr(page, 'object_list')
+    
+    assert count == 4
+    print("âœ“ Iterator protocol works correctly")
+    
+    print("\nðŸŽ‰ All comprehensive tests passed!")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0cba21995f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the paginator iteration issue.
+"""
+from django.core.paginator import Paginator
+
+# Create a simple paginator with some data
+data = list(range(1, 101))  # 100 items
+paginator = Paginator(data, 10)  # 10 items per page
+
+print("Testing paginator iteration...")
+print(f"Total pages: {paginator.num_pages}")
+print(f"Page range: {list(paginator.page_range)}")
+
+# Current way to iterate through pages (using page_range)
+print("\nCurrent iteration method (using page_range):")
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    print(f"Page {page_num}: {list(page)}")
+
+# Test if __iter__ method exists (should fail currently)
+print("\nTesting if __iter__ method exists:")
+try:
+    iter(paginator)
+    print("__iter__ method exists - can iterate directly")
+    for page in paginator:
+        print(f"Page {page.number}: {list(page)}")
+except TypeError as e:
+    print(f"Error: {e}")
+    print("__iter__ method does not exist yet")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..b02f5b1097
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the paginator __iter__ implementation.
+"""
+from django.core.paginator import Paginator
+
+print("Testing edge cases...")
+
+# Test case 1: Empty paginator
+print("\n1. Testing empty paginator:")
+empty_data = []
+paginator_empty = Paginator(empty_data, 10)
+print(f"Empty paginator pages: {paginator_empty.num_pages}")
+try:
+    for page in paginator_empty:
+        print(f"Page {page.number}: {list(page)}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 2: Single page
+print("\n2. Testing single page:")
+single_data = [1, 2, 3, 4, 5]
+paginator_single = Paginator(single_data, 10)
+print(f"Single page paginator pages: {paginator_single.num_pages}")
+for page in paginator_single:
+    print(f"Page {page.number}: {list(page)}")
+
+# Test case 3: Multiple pages with orphans
+print("\n3. Testing with orphans:")
+data_with_orphans = list(range(1, 16))  # 15 items
+paginator_orphans = Paginator(data_with_orphans, 5, orphans=2)
+print(f"Orphans paginator pages: {paginator_orphans.num_pages}")
+for page in paginator_orphans:
+    print(f"Page {page.number}: {list(page)}")
+
+# Test case 4: Verify iterator produces same results as manual iteration
+print("\n4. Comparing manual vs iterator iteration:")
+data = list(range(1, 25))  # 24 items
+paginator = Paginator(data, 5)
+
+print("Manual iteration:")
+manual_pages = []
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    manual_pages.append((page.number, list(page)))
+    print(f"Page {page_num}: {list(page)}")
+
+print("Iterator iteration:")
+iterator_pages = []
+for page in paginator:
+    iterator_pages.append((page.number, list(page)))
+    print(f"Page {page.number}: {list(page)}")
+
+# Compare results
+if manual_pages == iterator_pages:
+    print("âœ“ Manual and iterator iteration produce identical results")
+else:
+    print("âœ— Results differ!")
+    print(f"Manual: {manual_pages}")
+    print(f"Iterator: {iterator_pages}")
\ No newline at end of file
diff --git a/test_github_issue_example.py b/test_github_issue_example.py
new file mode 100644
index 0000000000..6a2fba71e6
--- /dev/null
+++ b/test_github_issue_example.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+"""
+Test the exact example from the GitHub issue description.
+"""
+from django.core.paginator import Paginator
+
+# Create a paginator with some data
+data = list(range(1, 101))  # 100 items
+paginator = Paginator(data, 10)  # 10 items per page
+
+print("Testing GitHub issue example...")
+
+# The old way (using page_range)
+print("Old way (using page_range):")
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    print(f"Page {page_num}: {list(page)}")
+
+# The new way (using __iter__)
+print("\nNew way (using __iter__):")
+for page in paginator:
+    print(f"Page {page.number}: {list(page)}")
+
+# Verify they produce the same results
+old_pages = []
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    old_pages.append((page.number, list(page)))
+
+new_pages = []
+for page in paginator:
+    new_pages.append((page.number, list(page)))
+
+if old_pages == new_pages:
+    print("\nâœ“ Both methods produce identical results!")
+else:
+    print("\nâœ— Results differ!")
+    print(f"Old method: {old_pages}")
+    print(f"New method: {new_pages}")
\ No newline at end of file
diff --git a/test_iter_functionality.py b/test_iter_functionality.py
new file mode 100644
index 0000000000..1fec481251
--- /dev/null
+++ b/test_iter_functionality.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Test the __iter__ functionality without full Django test setup.
+"""
+import warnings
+from django.core.paginator import Paginator, EmptyPage, InvalidPage, PageNotAnInteger
+
+def test_basic_iteration():
+    """Test basic iteration functionality"""
+    print("Testing basic iteration...")
+    data = list(range(1, 101))  # 100 items
+    paginator = Paginator(data, 10)  # 10 items per page
+    
+    # Test that we can iterate directly
+    pages = list(paginator)
+    assert len(pages) == 10, f"Expected 10 pages, got {len(pages)}"
+    
+    # Test that each page has the correct content
+    for i, page in enumerate(pages, 1):
+        expected_start = (i - 1) * 10 + 1
+        expected_end = i * 10
+        expected_content = list(range(expected_start, expected_end + 1))
+        assert list(page) == expected_content, f"Page {i} content mismatch"
+    
+    print("âœ“ Basic iteration test passed")
+
+def test_edge_cases():
+    """Test edge cases for iteration"""
+    print("Testing edge cases...")
+    
+    # Empty paginator
+    empty_paginator = Paginator([], 10)
+    pages = list(empty_paginator)
+    assert len(pages) == 1, f"Expected 1 page for empty data, got {len(pages)}"
+    assert list(pages[0]) == [], "Empty page should have empty content"
+    
+    # Single page
+    single_paginator = Paginator([1, 2, 3], 10)
+    pages = list(single_paginator)
+    assert len(pages) == 1, f"Expected 1 page for single page data, got {len(pages)}"
+    assert list(pages[0]) == [1, 2, 3], "Single page content mismatch"
+    
+    # With orphans
+    orphan_paginator = Paginator(list(range(1, 16)), 5, orphans=2)
+    pages = list(orphan_paginator)
+    assert len(pages) == 3, f"Expected 3 pages with orphans, got {len(pages)}"
+    
+    print("âœ“ Edge cases test passed")
+
+def test_equivalence_with_page_range():
+    """Test that __iter__ produces same results as page_range iteration"""
+    print("Testing equivalence with page_range...")
+    
+    data = list(range(1, 51))  # 50 items
+    paginator = Paginator(data, 7)  # 7 items per page
+    
+    # Manual iteration using page_range
+    manual_pages = []
+    for page_num in paginator.page_range:
+        page = paginator.page(page_num)
+        manual_pages.append((page.number, list(page)))
+    
+    # Iterator iteration
+    iterator_pages = []
+    for page in paginator:
+        iterator_pages.append((page.number, list(page)))
+    
+    # Compare results
+    assert manual_pages == iterator_pages, "Manual and iterator iteration should produce identical results"
+    
+    print("âœ“ Equivalence test passed")
+
+if __name__ == "__main__":
+    test_basic_iteration()
+    test_edge_cases()
+    test_equivalence_with_page_range()
+    print("\nAll tests passed! ðŸŽ‰")
\ No newline at end of file
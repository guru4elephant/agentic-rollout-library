diff --git a/debug_ast.py b/debug_ast.py
new file mode 100644
index 000000000..beff917a9
--- /dev/null
+++ b/debug_ast.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.pycode.ast import unparse
+import ast
+
+# Test the AST structure for different cases
+test_cases = [
+    "(1,)",
+    "(1)",
+    "(1, 2, 3)",
+    "()"
+]
+
+for case in test_cases:
+    print(f"\n=== Testing: {case} ===")
+    parsed = ast.parse(case)
+    print(f"AST type: {type(parsed.body[0].value)}")
+    print(f"AST dump: {ast.dump(parsed.body[0].value)}")
+    
+    if hasattr(parsed.body[0].value, 'elts'):
+        print(f"Number of elements: {len(parsed.body[0].value.elts)}")
+        if len(parsed.body[0].value.elts) > 0:
+            print(f"First element type: {type(parsed.body[0].value.elts[0])}")
+    
+    result = unparse(parsed.body[0].value, case)
+    print(f"Unparsed: {result}")
+    print(f"Match: {case == result}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..26ed885e3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.pycode.ast import unparse
+import ast
+
+# Test the issue with 1-element tuple
+source_code = "(1,)"
+parsed = ast.parse(source_code)
+result = unparse(parsed.body[0].value, source_code)
+
+print(f"Original: {source_code}")
+print(f"Unparsed: {result}")
+print(f"Match: {source_code == result}")
+
+# Test other cases to make sure we don't break them
+test_cases = [
+    "(1, 2, 3)",  # Multi-element tuple
+    "()",         # Empty tuple
+    "(1)",        # Parenthesized expression (should not have comma)
+]
+
+for case in test_cases:
+    parsed = ast.parse(case)
+    result = unparse(parsed.body[0].value, case)
+    print(f"\nOriginal: {case}")
+    print(f"Unparsed: {result}")
+    print(f"Match: {case == result}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 206ff4ad4..4bb5faeb1 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py
index f541ec0a9..18cdb0561 100644
--- a/sphinx/pycode/ast.py
+++ b/sphinx/pycode/ast.py
@@ -214,7 +214,11 @@ class _UnparseVisitor(ast.NodeVisitor):
 
     def visit_Tuple(self, node: ast.Tuple) -> str:
         if node.elts:
-            return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
+            if len(node.elts) == 1:
+                # Single element tuple needs trailing comma
+                return "(" + self.visit(node.elts[0]) + ",)"
+            else:
+                return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
         else:
             return "()"
 
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..51550b75d
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.pycode.ast import unparse
+import ast
+
+# Test various tuple edge cases
+test_cases = [
+    # Single element tuples
+    "(1,)",
+    "('a',)",
+    "(x,)",
+    "(None,)",
+    
+    # Multi-element tuples
+    "(1, 2)",
+    "(1, 2, 3)",
+    "(1, 2, 3, 4)",
+    
+    # Empty tuple
+    "()",
+    
+    # Nested tuples
+    "((1,), (2,))",
+    "((1, 2), (3, 4))",
+    
+    # Mixed types
+    "(1, 'a', None)",
+]
+
+print("Testing tuple unparsing:")
+for case in test_cases:
+    parsed = ast.parse(case)
+    result = unparse(parsed.body[0].value, case)
+    status = "✓" if case == result else "✗"
+    print(f"{status} {case} -> {result}")
+
+# Test that we don't break non-tuple cases
+print("\nTesting non-tuple cases:")
+non_tuple_cases = [
+    "(1)",           # Parenthesized expression
+    "(x)",           # Parenthesized variable
+    "(1 + 2)",       # Parenthesized operation
+]
+
+for case in non_tuple_cases:
+    parsed = ast.parse(case)
+    result = unparse(parsed.body[0].value, case)
+    print(f"  {case} -> {result} (AST type: {type(parsed.body[0].value).__name__})")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..b191c4a96
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '.')
+
+from sphinx.pycode.ast import unparse
+import ast
+
+# Test the specific case mentioned in the GitHub issue
+source_code = "(1,)"
+parsed = ast.parse(source_code)
+result = unparse(parsed.body[0].value, source_code)
+
+print(f"Original: {source_code}")
+print(f"Unparsed: {result}")
+print(f"Match: {source_code == result}")
+
+# This should pass according to the GitHub issue
+assert source_code == result, f"Expected '{source_code}' but got '{result}'"
+print("✓ GitHub issue test case passed!")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..b02ba50057 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -85,6 +85,7 @@ class PasswordResetTokenGenerator:
            same password is chosen, due to password salting).
         2. The last_login field will usually be updated very shortly after
            a password reset.
+        3. The email field will change if the user updates their email address.
         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
         invalidates the token.
 
@@ -94,7 +95,9 @@ class PasswordResetTokenGenerator:
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        # Include the user's email address if available
+        email = getattr(user, 'email', '')
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + str(email)
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py
index bba435be84..d69e05f0ff 100644
--- a/tests/auth_tests/test_tokens.py
+++ b/tests/auth_tests/test_tokens.py
@@ -91,6 +91,24 @@ class TokenGeneratorTest(TestCase):
         self.assertIs(p0.check_token(user, tk1), False)
         self.assertIs(p1.check_token(user, tk0), False)
 
+    def test_email_change_invalidates_token(self):
+        """
+        Test that changing a user's email address invalidates password reset tokens.
+        """
+        user = User.objects.create_user('tokentestuser', 'original@example.com', 'testpw')
+        generator = PasswordResetTokenGenerator()
+        token = generator.make_token(user)
+        
+        # Token should be valid before email change
+        self.assertIs(generator.check_token(user, token), True)
+        
+        # Change user's email
+        user.email = 'changed@example.com'
+        user.save()
+        
+        # Token should be invalid after email change
+        self.assertIs(generator.check_token(user, token), False)
+
     @ignore_warnings(category=RemovedInDjango40Warning)
     def test_token_default_hashing_algorithm(self):
         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')
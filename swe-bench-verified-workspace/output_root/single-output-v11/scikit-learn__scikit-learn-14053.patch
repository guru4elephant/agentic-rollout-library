diff --git a/debug_tree.py b/debug_tree.py
new file mode 100644
index 000000000..1c1da7b59
--- /dev/null
+++ b/debug_tree.py
@@ -0,0 +1,14 @@
+from sklearn.tree import DecisionTreeClassifier
+from sklearn.tree.export import export_text
+from sklearn.datasets import load_iris
+
+X, y = load_iris(return_X_y=True)
+X = X[:, 0].reshape(-1, 1)
+
+tree = DecisionTreeClassifier()
+tree.fit(X, y)
+
+print("tree_.n_features:", tree.tree_.n_features)
+print("tree_.feature:", tree.tree_.feature)
+print("Length of feature_names:", len(['sepal_length']))
+print("Max index in tree_.feature:", max(tree.tree_.feature) if len(tree.tree_.feature) > 0 else "Empty")
\ No newline at end of file
diff --git a/debug_tree2.py b/debug_tree2.py
new file mode 100644
index 000000000..4dc469f4b
--- /dev/null
+++ b/debug_tree2.py
@@ -0,0 +1,15 @@
+from sklearn.tree import DecisionTreeClassifier
+from sklearn.tree.export import export_text
+from sklearn.datasets import load_iris
+
+X, y = load_iris(return_X_y=True)
+X = X[:, 0].reshape(-1, 1)
+
+tree = DecisionTreeClassifier()
+tree.fit(X, y)
+
+print("tree_.n_features:", tree.tree_.n_features)
+print("tree_.feature:", tree.tree_.feature)
+print("Length of feature_names:", len(['sepal_length']))
+print("Unique values in tree_.feature:", set(tree.tree_.feature))
+print("Any values >= len(feature_names)?", any(i >= len(['sepal_length']) for i in tree.tree_.feature if i >= 0))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..8c39c586b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,11 @@
+from sklearn.tree import DecisionTreeClassifier
+from sklearn.tree.export import export_text
+from sklearn.datasets import load_iris
+
+X, y = load_iris(return_X_y=True)
+X = X[:, 0].reshape(-1, 1)
+
+tree = DecisionTreeClassifier()
+tree.fit(X, y)
+tree_text = export_text(tree, feature_names=['sepal_length'])
+print(tree_text)
\ No newline at end of file
diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py
index 1fe11e596..b99486ad5 100644
--- a/sklearn/tree/export.py
+++ b/sklearn/tree/export.py
@@ -890,9 +890,9 @@ def export_text(decision_tree, feature_names=None, max_depth=10,
         value_fmt = "{}{} value: {}\n"
 
     if feature_names:
-        feature_names_ = [feature_names[i] for i in tree_.feature]
+        feature_names_ = [feature_names[i] if i >= 0 else "" for i in tree_.feature]
     else:
-        feature_names_ = ["feature_{}".format(i) for i in tree_.feature]
+        feature_names_ = ["feature_{}".format(i) if i >= 0 else "" for i in tree_.feature]
 
     export_text.report = ""
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..8c0af4765
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
+from sklearn.tree.export import export_text
+from sklearn.datasets import load_iris, make_regression
+import numpy as np
+
+print("=== Test 1: Single feature with feature_names ===")
+X, y = load_iris(return_X_y=True)
+X = X[:, 0].reshape(-1, 1)
+tree = DecisionTreeClassifier(max_depth=2)
+tree.fit(X, y)
+tree_text = export_text(tree, feature_names=['sepal_length'])
+print(tree_text)
+
+print("\n=== Test 2: Single feature without feature_names ===")
+tree_text = export_text(tree)
+print(tree_text)
+
+print("\n=== Test 3: Regression tree with single feature ===")
+X, y = make_regression(n_samples=100, n_features=1, noise=0.1)
+tree_reg = DecisionTreeRegressor(max_depth=2)
+tree_reg.fit(X, y)
+tree_text = export_text(tree_reg, feature_names=['feature_0'])
+print(tree_text)
+
+print("\n=== Test 4: Multiple features but only one used in tree ===")
+X, y = load_iris(return_X_y=True)
+# Use only first feature but keep all features in the array
+tree = DecisionTreeClassifier(max_depth=2)
+tree.fit(X[:, :1], y)  # Only use first feature
+tree_text = export_text(tree, feature_names=['sepal_length'])
+print(tree_text)
+
+print("\n=== Test 5: Empty feature_names (should use default names) ===")
+tree_text = export_text(tree)
+print(tree_text)
\ No newline at end of file
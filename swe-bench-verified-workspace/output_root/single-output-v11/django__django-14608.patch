diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4f0cb5c0f0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=False,  # Disable i18n to avoid translation issues
+        USE_L10N=False,
+        USE_TZ=False,
+    )
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField()
+    email = forms.EmailField()
+
+# Create a formset
+TestFormSet = formset_factory(TestForm, extra=2)
+
+# Test data with non-form errors
+data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'test1',
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'test2',
+    'form-1-email': 'invalid-email',  # This will cause a form-level error
+}
+
+# Create formset instance
+formset = TestFormSet(data)
+
+# Check if formset is valid
+print("FormSet is valid:", formset.is_valid())
+print("Non-form errors:", formset.non_form_errors())
+print("Non-form errors HTML:", str(formset.non_form_errors()))
+
+# Let's also test with a custom clean method that adds non-form errors
+class TestFormSetWithClean(TestFormSet):
+    def clean(self):
+        # Add a non-form error
+        raise forms.ValidationError("This is a non-form error")
+
+formset_with_clean = TestFormSetWithClean(data)
+print("FormSet with clean is valid:", formset_with_clean.is_valid())
+print("Non-form errors with clean:", formset_with_clean.non_form_errors())
+print("Non-form errors HTML with clean:", str(formset_with_clean.non_form_errors()))
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..dff59d84e9
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+    )
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField()
+    email = forms.EmailField()
+
+# Create a formset
+TestFormSet = formset_factory(TestForm, extra=2)
+
+print("=== Test 1: Non-form errors from clean() method ===")
+class TestFormSetWithClean(TestFormSet):
+    def clean(self):
+        raise forms.ValidationError("This is a non-form error from clean()")
+
+data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'test1',
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'test2',
+    'form-1-email': 'test2@example.com',
+}
+
+formset = TestFormSetWithClean(data)
+print("Non-form errors HTML:", str(formset.non_form_errors()))
+print("Expected: errorlist nonform")
+print("Contains 'nonform':", 'nonform' in str(formset.non_form_errors()))
+
+print("\n=== Test 2: Management form errors ===")
+# Invalid management form data
+invalid_data = {
+    'form-TOTAL_FORMS': 'invalid',  # This should cause a management form error
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+}
+
+formset2 = TestFormSet(invalid_data)
+print("Non-form errors HTML:", str(formset2.non_form_errors()))
+print("Contains 'nonform':", 'nonform' in str(formset2.non_form_errors()))
+
+print("\n=== Test 3: Multiple non-form errors ===")
+class TestFormSetMultipleErrors(TestFormSet):
+    def clean(self):
+        raise forms.ValidationError([
+            "First non-form error",
+            "Second non-form error"
+        ])
+
+formset3 = TestFormSetMultipleErrors(data)
+print("Non-form errors HTML:", str(formset3.non_form_errors()))
+print("Contains 'nonform':", 'nonform' in str(formset3.non_form_errors()))
+
+print("\n=== Test 4: No non-form errors ===")
+formset4 = TestFormSet(data)
+print("Non-form errors HTML:", str(formset4.non_form_errors()))
+print("Is empty:", not formset4.non_form_errors())
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..b35ae22739
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False,
+    )
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField()
+    email = forms.EmailField()
+
+# Create a formset
+TestFormSet = formset_factory(TestForm, extra=2)
+
+print("=== Edge Case Tests ===")
+
+print("\n1. Empty formset (no data):")
+empty_formset = TestFormSet()
+print("Non-form errors:", str(empty_formset.non_form_errors()))
+print("Is empty:", not empty_formset.non_form_errors())
+
+print("\n2. Formset with management form errors only:")
+invalid_management_data = {
+    'form-TOTAL_FORMS': 'invalid',  # Invalid data
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+}
+
+management_error_formset = TestFormSet(invalid_management_data)
+print("Non-form errors HTML:", str(management_error_formset.non_form_errors()))
+print("Contains 'nonform':", 'nonform' in str(management_error_formset.non_form_errors()))
+
+print("\n3. Formset with both form errors and non-form errors:")
+class TestFormSetWithBothErrors(TestFormSet):
+    def clean(self):
+        raise forms.ValidationError("Non-form validation error")
+
+mixed_data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': '',  # This will cause a form error (required field)
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'test2',
+    'form-1-email': 'invalid-email',  # This will cause another form error
+}
+
+mixed_formset = TestFormSetWithBothErrors(mixed_data)
+print("Form errors present:", any(form.errors for form in mixed_formset.forms))
+print("Non-form errors HTML:", str(mixed_formset.non_form_errors()))
+print("Contains 'nonform':", 'nonform' in str(mixed_formset.non_form_errors()))
+
+print("\n4. Custom error class in formset:")
+class CustomErrorList(forms.utils.ErrorList):
+    pass
+
+custom_formset = TestFormSet(error_class=CustomErrorList)
+# Add a non-form error through clean
+class CustomFormSetWithClean(TestFormSet):
+    def clean(self):
+        raise forms.ValidationError("Custom non-form error")
+
+custom_data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'test1',
+    'form-0-email': 'test1@example.com',
+    'form-1-name': 'test2',
+    'form-1-email': 'test2@example.com',
+}
+
+custom_formset_with_error = CustomFormSetWithClean(custom_data, error_class=CustomErrorList)
+print("Non-form errors type:", type(custom_formset_with_error.non_form_errors()))
+print("Non-form errors HTML:", str(custom_formset_with_error.non_form_errors()))
+print("Contains 'nonform':", 'nonform' in str(custom_formset_with_error.non_form_errors()))
+
+print("\n=== All edge case tests completed ===")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..1dcd840802
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,10 @@
+# Minimal Django settings for testing
+SECRET_KEY = 'test-secret-key'
+DEBUG = True
+USE_I18N = False
+USE_L10N = False
+USE_TZ = False
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
\ No newline at end of file
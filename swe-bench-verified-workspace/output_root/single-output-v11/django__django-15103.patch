diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..12f0d4caaa 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,7 +83,7 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..65c5442d8d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,10 +69,16 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
-    return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
-    )
+    if element_id is not None:
+        return format_html(
+            '<script id="{}" type="application/json">{}</script>',
+            element_id, mark_safe(json_str)
+        )
+    else:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
 
 
 def conditional_escape(text):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..140cdc766f
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.utils.html import json_script
+from django.utils.functional import lazystr
+from django.template.defaultfilters import json_script as json_script_filter
+
+def test_comprehensive():
+    """Comprehensive test of json_script functionality"""
+    
+    print("=== Testing json_script function ===")
+    
+    # Test 1: Basic functionality with element_id
+    data = {"name": "John", "age": 30}
+    result = json_script(data, "user-data")
+    expected_with_id = '<script id="user-data" type="application/json">{"name": "John", "age": 30}</script>'
+    assert result == expected_with_id, f"Expected: {expected_with_id}, Got: {result}"
+    print("✓ Basic functionality with element_id")
+    
+    # Test 2: Basic functionality without element_id
+    result = json_script(data)
+    expected_without_id = '<script type="application/json">{"name": "John", "age": 30}</script>'
+    assert result == expected_without_id, f"Expected: {expected_without_id}, Got: {result}"
+    print("✓ Basic functionality without element_id")
+    
+    # Test 3: Edge case - empty string as element_id
+    result = json_script(data, "")
+    expected_empty_id = '<script id="" type="application/json">{"name": "John", "age": 30}</script>'
+    assert result == expected_empty_id, f"Expected: {expected_empty_id}, Got: {result}"
+    print("✓ Empty string as element_id")
+    
+    # Test 4: Edge case - None explicitly passed
+    result = json_script(data, None)
+    assert result == expected_without_id, f"Expected: {expected_without_id}, Got: {result}"
+    print("✓ None explicitly passed")
+    
+    # Test 5: Test with special characters (existing test case)
+    special_data = '&<>'
+    result = json_script(special_data, 'test_id')
+    expected_special = '<script id="test_id" type="application/json">"\\u0026\\u003C\\u003E"</script>'
+    assert result == expected_special, f"Expected: {expected_special}, Got: {result}"
+    print("✓ Special characters escaping")
+    
+    # Test 6: Test with lazy strings (existing test case)
+    lazy_data = lazystr('&<>')
+    result = json_script(lazy_data, 'test_id')
+    assert result == expected_special, f"Expected: {expected_special}, Got: {result}"
+    print("✓ Lazy strings handling")
+    
+    print("\n=== Testing json_script template filter ===")
+    
+    # Test 7: Template filter with element_id
+    result = json_script_filter(data, "user-data")
+    assert result == expected_with_id, f"Expected: {expected_with_id}, Got: {result}"
+    print("✓ Template filter with element_id")
+    
+    # Test 8: Template filter without element_id
+    result = json_script_filter(data)
+    assert result == expected_without_id, f"Expected: {expected_without_id}, Got: {result}"
+    print("✓ Template filter without element_id")
+    
+    print("\n=== All tests passed! ===")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bbb6e22c6c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.utils.html import json_script
+
+def test_json_script_with_id():
+    """Test json_script with element_id provided"""
+    data = {"name": "John", "age": 30}
+    result = json_script(data, "user-data")
+    print("With element_id:")
+    print(result)
+    print()
+
+def test_json_script_without_id():
+    """Test json_script without element_id - this should fail currently"""
+    try:
+        data = {"name": "John", "age": 30}
+        result = json_script(data)  # Missing element_id
+        print("Without element_id:")
+        print(result)
+    except Exception as e:
+        print(f"Error without element_id: {e}")
+        print()
+
+if __name__ == "__main__":
+    test_json_script_with_id()
+    test_json_script_without_id()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5ef851beec
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.utils.html import json_script
+
+def test_edge_cases():
+    """Test edge cases for json_script function"""
+    
+    # Test with empty string as element_id
+    data = {"name": "John"}
+    result = json_script(data, "")
+    print("Empty string as element_id:")
+    print(result)
+    print()
+    
+    # Test with None explicitly passed
+    result = json_script(data, None)
+    print("None explicitly passed:")
+    print(result)
+    print()
+    
+    # Test with complex data
+    complex_data = {
+        "users": [
+            {"name": "John", "age": 30},
+            {"name": "Jane", "age": 25}
+        ],
+        "metadata": {
+            "count": 2,
+            "timestamp": "2023-01-01"
+        }
+    }
+    result = json_script(complex_data, "complex-data")
+    print("Complex data with ID:")
+    print(result)
+    print()
+    
+    result = json_script(complex_data)
+    print("Complex data without ID:")
+    print(result)
+    print()
+    
+    # Test with special characters
+    special_data = {"html": "<div>test</div>", "ampersand": "a & b"}
+    result = json_script(special_data, "special-chars")
+    print("Special characters with ID:")
+    print(result)
+    print()
+    
+    result = json_script(special_data)
+    print("Special characters without ID:")
+    print(result)
+    print()
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_template_filter.py b/test_template_filter.py
new file mode 100644
index 0000000000..a10cfbd1d9
--- /dev/null
+++ b/test_template_filter.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('.'))
+
+from django.template.defaultfilters import json_script as json_script_filter
+
+def test_template_filter_with_id():
+    """Test json_script template filter with element_id provided"""
+    data = {"name": "John", "age": 30}
+    result = json_script_filter(data, "user-data")
+    print("Template filter with element_id:")
+    print(result)
+    print()
+
+def test_template_filter_without_id():
+    """Test json_script template filter without element_id"""
+    data = {"name": "John", "age": 30}
+    result = json_script_filter(data)
+    print("Template filter without element_id:")
+    print(result)
+    print()
+
+if __name__ == "__main__":
+    test_template_filter_with_id()
+    test_template_filter_without_id()
\ No newline at end of file
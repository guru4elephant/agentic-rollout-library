diff --git a/django/forms/models.py b/django/forms/models.py
index 5dcf923c12..bc7e6959e7 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:
             other = other.value
         return self.value == other
 
+    def __hash__(self):
+        return hash(self.value)
+
 
 class ModelChoiceIterator:
     def __init__(self, field):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0bcd5e01ba
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+import json
+from django.forms.models import ModelChoiceIteratorValue
+
+# Create a ModelChoiceIteratorValue instance
+instance_value = ModelChoiceIteratorValue(1, None)
+
+# Create a dictionary like the one mentioned in the issue
+show_fields = {1: ['first_name', 'last_name']}
+
+# Try to check if the value is in the dictionary keys
+# This should fail with "unhashable type: 'ModelChoiceIteratorValue'"
+try:
+    if instance_value in show_fields:
+        print("Value found in show_fields")
+    else:
+        print("Value not found in show_fields")
+except TypeError as e:
+    print(f"Error: {e}")
+
+# Test with an array (this should work)
+allowed_values = [1, 2]
+try:
+    if instance_value in allowed_values:
+        print("Value found in allowed_values")
+    else:
+        print("Value not found in allowed_values")
+except TypeError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..58a4bdc746
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+from django.forms.models import ModelChoiceIteratorValue
+
+def test_hashability():
+    print("Testing hashability of ModelChoiceIteratorValue...")
+    
+    # Test with integer value
+    instance1 = ModelChoiceIteratorValue(1, None)
+    instance2 = ModelChoiceIteratorValue(1, None)
+    instance3 = ModelChoiceIteratorValue(2, None)
+    
+    # Test hash function
+    print(f"Hash of instance1: {hash(instance1)}")
+    print(f"Hash of instance2: {hash(instance2)}")
+    print(f"Hash of instance3: {hash(instance3)}")
+    
+    # Test that equal objects have same hash
+    assert hash(instance1) == hash(instance2), "Equal objects should have same hash"
+    assert hash(instance1) != hash(instance3), "Different objects should have different hashes"
+    
+    # Test dictionary usage
+    test_dict = {1: 'one', 2: 'two'}
+    assert instance1 in test_dict, "Should be able to use as dictionary key"
+    assert instance3 in test_dict, "Should be able to use as dictionary key"
+    
+    # Test set usage
+    test_set = {1, 2, 3}
+    assert instance1 in test_set, "Should be able to use in sets"
+    assert instance3 in test_set, "Should be able to use in sets"
+    
+    # Test with string value
+    str_instance = ModelChoiceIteratorValue('test', None)
+    str_dict = {'test': 'value'}
+    assert str_instance in str_dict, "Should work with string values"
+    
+    # Test with None value
+    none_instance = ModelChoiceIteratorValue(None, None)
+    none_dict = {None: 'none_value'}
+    assert none_instance in none_dict, "Should work with None values"
+    
+    print("All hashability tests passed!")
+
+def test_equality():
+    print("\nTesting equality of ModelChoiceIteratorValue...")
+    
+    # Test equality with same value
+    instance1 = ModelChoiceIteratorValue(1, None)
+    instance2 = ModelChoiceIteratorValue(1, None)
+    instance3 = ModelChoiceIteratorValue(2, None)
+    
+    assert instance1 == instance2, "Objects with same value should be equal"
+    assert instance1 != instance3, "Objects with different values should not be equal"
+    
+    # Test equality with primitive values
+    assert instance1 == 1, "Should be equal to primitive value"
+    assert instance3 == 2, "Should be equal to primitive value"
+    assert instance1 != 3, "Should not be equal to different primitive value"
+    
+    print("All equality tests passed!")
+
+if __name__ == "__main__":
+    test_hashability()
+    test_equality()
+    print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5fc648df8a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+from django.forms.models import ModelChoiceIteratorValue
+
+def test_edge_cases():
+    print("Testing edge cases...")
+    
+    # Test with different types of values (only hashable ones)
+    test_cases = [
+        (1, "integer"),
+        ("test", "string"),
+        (None, "None"),
+        (3.14, "float"),
+        (True, "boolean True"),
+        (False, "boolean False"),
+        ((1, 2), "tuple"),
+    ]
+    
+    for value, value_type in test_cases:
+        try:
+            instance = ModelChoiceIteratorValue(value, None)
+            hash_result = hash(instance)
+            print(f"✓ {value_type}: {value} -> hash: {hash_result}")
+            
+            # Test dictionary usage
+            test_dict = {value: f"value_for_{value_type}"}
+            assert instance in test_dict, f"Should work with {value_type}"
+            
+        except Exception as e:
+            print(f"✗ {value_type}: {value} failed with {e}")
+            raise
+    
+    # Test that hash consistency is maintained
+    instance1 = ModelChoiceIteratorValue(42, None)
+    instance2 = ModelChoiceIteratorValue(42, None)
+    assert hash(instance1) == hash(instance2), "Same values should have same hash"
+    
+    # Test that different values have different hashes
+    instance3 = ModelChoiceIteratorValue(43, None)
+    assert hash(instance1) != hash(instance3), "Different values should have different hashes"
+    
+    print("All edge case tests passed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
+    print("\nEdge case tests completed successfully!")
\ No newline at end of file
diff --git a/test_realistic_scenario.py b/test_realistic_scenario.py
new file mode 100644
index 0000000000..eb467b828b
--- /dev/null
+++ b/test_realistic_scenario.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+import json
+from django.forms.models import ModelChoiceIteratorValue
+from django.forms.widgets import Select
+
+class CustomSelectWidget(Select):
+    def __init__(self, attrs=None, choices=(), show_fields=None):
+        super().__init__(attrs, choices)
+        self.show_fields = show_fields or {}
+    
+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):
+        context = super().create_option(name, value, label, selected, index, subindex, attrs)
+        if not value:
+            return context
+        
+        # This is the exact scenario from the issue
+        if value in self.show_fields:  # This is a dict {1: ['first_name', 'last_name']}
+            context['attrs']['data-fields'] = json.dumps(self.show_fields[value])
+        
+        return context
+
+def test_realistic_scenario():
+    print("Testing realistic scenario from the issue...")
+    
+    # Create a widget with show_fields like in the issue
+    show_fields = {1: ['first_name', 'last_name']}
+    widget = CustomSelectWidget(show_fields=show_fields)
+    
+    # Create ModelChoiceIteratorValue instances
+    value1 = ModelChoiceIteratorValue(1, None)
+    value2 = ModelChoiceIteratorValue(2, None)
+    
+    # Test the create_option method which should not fail anymore
+    try:
+        option1 = widget.create_option('test', value1, 'Label 1', False, 0)
+        print(f"Option 1 created successfully: {option1}")
+        
+        option2 = widget.create_option('test', value2, 'Label 2', False, 0)
+        print(f"Option 2 created successfully: {option2}")
+        
+        # Verify the data-fields attribute was added correctly
+        assert 'data-fields' in option1['attrs'], "data-fields should be present for value1"
+        assert json.loads(option1['attrs']['data-fields']) == ['first_name', 'last_name']
+        
+        # Verify no data-fields for value2 (not in show_fields)
+        assert 'data-fields' not in option2['attrs'], "data-fields should not be present for value2"
+        
+        print("Realistic scenario test passed!")
+        
+    except TypeError as e:
+        print(f"Error: {e}")
+        raise
+
+if __name__ == "__main__":
+    test_realistic_scenario()
+    print("\nRealistic scenario test completed successfully!")
\ No newline at end of file
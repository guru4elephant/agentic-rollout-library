diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..cb5e6d21a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy
+
+# Reproduce the issue described in the GitHub issue
+X = numpy.random.randn(1000, 5)
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
\ No newline at end of file
diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..8920bef18 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                 best_params = self._get_parameters()
                 best_n_iter = n_iter
 
-        # Always do a final e-step to guarantee that the labels returned by
-        # fit_predict(X) are always consistent with fit(X).predict(X)
-        # for any value of max_iter and tol (and any random_state).
-        _, log_resp = self._e_step(X)
-
         if not self.converged_:
             warnings.warn('Initialization %d did not converge. '
                           'Try different init parameters, '
@@ -273,6 +268,11 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
 
+        # Always do a final e-step to guarantee that the labels returned by
+        # fit_predict(X) are always consistent with fit(X).predict(X)
+        # for any value of max_iter and tol (and any random_state).
+        _, log_resp = self._e_step(X)
+
         return log_resp.argmax(axis=1)
 
     def _e_step(self, X):
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..9423ea6d0
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,54 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+def test_fit_predict_consistency():
+    """Test that fit_predict and predict return consistent results for various n_init values."""
+    
+    # Test with different random seeds to ensure robustness
+    for seed in [42, 123, 456]:
+        np.random.seed(seed)
+        X = np.random.randn(200, 3)
+        
+        # Test with different n_init values
+        for n_init in [1, 2, 5, 10]:
+            print(f"Testing seed={seed}, n_init={n_init}")
+            
+            gm = GaussianMixture(n_components=3, n_init=n_init, random_state=seed)
+            
+            # Get labels from fit_predict
+            labels_fit_predict = gm.fit_predict(X)
+            
+            # Get labels from predict after fit
+            labels_predict = gm.predict(X)
+            
+            # They should be identical
+            assert_array_equal(labels_fit_predict, labels_predict)
+            
+            # Also test that fit().predict() gives same result
+            gm2 = GaussianMixture(n_components=3, n_init=n_init, random_state=seed)
+            gm2.fit(X)
+            labels_fit_predict2 = gm2.predict(X)
+            assert_array_equal(labels_predict, labels_fit_predict2)
+    
+    print("All tests passed!")
+
+def test_with_different_covariance_types():
+    """Test that the fix works for all covariance types."""
+    
+    np.random.seed(42)
+    X = np.random.randn(100, 2)
+    
+    for cov_type in ['full', 'tied', 'diag', 'spherical']:
+        print(f"Testing covariance type: {cov_type}")
+        
+        gm = GaussianMixture(n_components=2, n_init=3, covariance_type=cov_type, random_state=42)
+        labels_fit_predict = gm.fit_predict(X)
+        labels_predict = gm.predict(X)
+        
+        assert_array_equal(labels_fit_predict, labels_predict)
+
+if __name__ == "__main__":
+    test_fit_predict_consistency()
+    test_with_different_covariance_types()
+    print("All comprehensive tests passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..3d2a24130
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,52 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+def test_warm_start():
+    """Test that warm_start behavior is preserved."""
+    np.random.seed(42)
+    X = np.random.randn(100, 2)
+    
+    # Test with warm_start=True
+    gm = GaussianMixture(n_components=2, n_init=3, warm_start=True, random_state=42)
+    labels1 = gm.fit_predict(X)
+    labels2 = gm.predict(X)
+    assert_array_equal(labels1, labels2)
+    
+    # Fit again with warm start
+    labels3 = gm.fit_predict(X)
+    labels4 = gm.predict(X)
+    assert_array_equal(labels3, labels4)
+
+def test_single_component():
+    """Test with single component."""
+    np.random.seed(42)
+    X = np.random.randn(50, 2)
+    
+    gm = GaussianMixture(n_components=1, n_init=3, random_state=42)
+    labels1 = gm.fit_predict(X)
+    labels2 = gm.predict(X)
+    assert_array_equal(labels1, labels2)
+    
+    # All labels should be 0 for single component
+    assert np.all(labels1 == 0)
+    assert np.all(labels2 == 0)
+
+def test_convergence_warning():
+    """Test that convergence warnings still work properly."""
+    np.random.seed(42)
+    X = np.random.randn(20, 2)
+    
+    # Use very strict tolerance to potentially trigger convergence warning
+    gm = GaussianMixture(n_components=2, n_init=2, tol=1e-10, max_iter=1, random_state=42)
+    
+    # This might warn about convergence, but should still return consistent results
+    labels1 = gm.fit_predict(X)
+    labels2 = gm.predict(X)
+    assert_array_equal(labels1, labels2)
+
+if __name__ == "__main__":
+    test_warm_start()
+    test_single_component()
+    test_convergence_warning()
+    print("All edge case tests passed!")
\ No newline at end of file
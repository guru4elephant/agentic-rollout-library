diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 000000000..df2fc69ba
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,40 @@
+import tempfile
+import os
+import subprocess
+import sys
+
+# Create a temporary test file
+test_content = '''
+import pytest
+
+@pytest.fixture(scope='session', params=['foo', 'bar'])
+def arg_same():
+    """session scoped fixture"""
+
+@pytest.fixture(scope='function')
+def arg_other(arg_same):
+    """function scoped fixture"""
+
+def test_arg1(arg_other):
+    pass
+'''
+
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
+    f.write(test_content)
+    temp_file = f.name
+
+try:
+    # Run pytest with setup-only
+    result = subprocess.run([
+        sys.executable, '-m', 'pytest', 
+        temp_file, '--setup-only', '-v'
+    ], capture_output=True, text=True)
+    
+    print("STDOUT:")
+    print(result.stdout)
+    print("\nSTDERR:")
+    print(result.stderr)
+    print(f"\nReturn code: {result.returncode}")
+    
+finally:
+    os.unlink(temp_file)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..c403353b3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,5 @@
+import pytest
+
+@pytest.mark.parametrize('data', [b'Hello World'])
+def test_data(data):
+    pass
\ No newline at end of file
diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py
index c9cc589ff..6caf180b0 100644
--- a/src/_pytest/setuponly.py
+++ b/src/_pytest/setuponly.py
@@ -1,4 +1,5 @@
 import pytest
+from _pytest._io.saferepr import saferepr
 
 
 def pytest_addoption(parser):
@@ -66,7 +67,12 @@ def _show_fixture_action(fixturedef, msg):
             tw.write(" (fixtures used: {})".format(", ".join(deps)))
 
     if hasattr(fixturedef, "cached_param"):
-        tw.write("[{}]".format(fixturedef.cached_param))
+        # Use saferepr to avoid BytesWarning when cached_param contains bytes
+        param_repr = saferepr(fixturedef.cached_param)
+        # Remove quotes for string types to maintain backward compatibility
+        if isinstance(fixturedef.cached_param, str):
+            param_repr = param_repr.strip("'\"")
+        tw.write("[{}]".format(param_repr))
 
     tw.flush()
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..6e34fae73
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,9 @@
+import pytest
+
+@pytest.mark.parametrize('data', [b'Hello World', 'Hello World', 123, None, [1, 2, 3]])
+def test_data(data):
+    pass
+
+@pytest.mark.parametrize('data', [b'bytes', b'\x00\x01\x02'])
+def test_bytes_variations(data):
+    pass
\ No newline at end of file
diff --git a/test_original_format.py b/test_original_format.py
new file mode 100644
index 000000000..25f5008ea
--- /dev/null
+++ b/test_original_format.py
@@ -0,0 +1,12 @@
+import pytest
+
+@pytest.fixture(scope='session', params=['foo', 'bar'])
+def arg_same():
+    """session scoped fixture"""
+
+@pytest.fixture(scope='function')
+def arg_other(arg_same):
+    """function scoped fixture"""
+
+def test_arg1(arg_other):
+    pass
\ No newline at end of file
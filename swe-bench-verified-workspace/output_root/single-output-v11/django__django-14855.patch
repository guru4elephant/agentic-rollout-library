diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..ba8c3463a0 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,7 +209,11 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/proper_test.py b/proper_test.py
new file mode 100644
index 0000000000..8b12ef6101
--- /dev/null
+++ b/proper_test.py
@@ -0,0 +1,106 @@
+#!/usr/bin/env python3
+
+"""
+Proper test to verify the fix for the get_admin_url issue
+"""
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        USE_TZ=True,
+        ROOT_URLCONF='test_urls',
+    )
+
+import django
+django.setup()
+
+from django.contrib.admin.helpers import AdminReadonlyField
+from django import forms
+from django.db import models
+
+# Create a proper form with all required attributes
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create a form with proper _meta structure
+class TestForm(forms.ModelForm):
+    class Meta:
+        model = TestModel
+        fields = ['name']
+        labels = {}
+        help_texts = {}
+
+# Create a mock model admin with custom admin site
+class MockModelAdmin:
+    def __init__(self):
+        self.admin_site = MockAdminSite()
+    
+    def get_empty_value_display(self):
+        return "-"
+
+class MockAdminSite:
+    name = 'custom-admin'
+
+# Test the fixed get_admin_url method
+def test_fixed_get_admin_url():
+    print("Testing the fixed get_admin_url method...")
+    
+    form = TestForm()
+    model_admin = MockModelAdmin()
+    
+    # Create AdminReadonlyField instance
+    field = AdminReadonlyField(form, 'name', is_first=True, model_admin=model_admin)
+    
+    # Create mock remote field and object
+    class MockRemoteField:
+        def __init__(self):
+            self.model = TestModel
+    
+    class MockRemoteObj:
+        pk = 1
+        def __str__(self):
+            return "Test Object"
+    
+    remote_field = MockRemoteField()
+    remote_obj = MockRemoteObj()
+    
+    # Test the fixed get_admin_url method
+    try:
+        url_html = field.get_admin_url(remote_field, remote_obj)
+        print(f"Generated URL HTML: {url_html}")
+        
+        # The method should handle the reverse call gracefully
+        # Since we don't have URL patterns set up, it should return the string representation
+        if str(remote_obj) in url_html:
+            print("SUCCESS: get_admin_url method works correctly (returned fallback)")
+            return True
+        else:
+            print(f"UNEXPECTED: Method returned: {url_html}")
+            return False
+            
+    except Exception as e:
+        print(f"ERROR: get_admin_url method failed with exception: {e}")
+        import traceback
+        traceback.print_exc()
+        return False
+
+if __name__ == '__main__':
+    success = test_fixed_get_admin_url()
+    if success:
+        print("Fix appears to be working correctly!")
+        sys.exit(0)
+    else:
+        print("Fix may have issues!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b4b026b108
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+
+"""
+Simple script to test the get_admin_url function directly
+"""
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+# Test the get_admin_url function directly
+from django.contrib.admin.helpers import AdminReadonlyField
+from django import forms
+
+# Create a mock form and model_admin with admin_site.name
+class MockForm:
+    instance = None
+    
+class MockModelAdmin:
+    def __init__(self):
+        self.admin_site = MockAdminSite()
+        
+class MockAdminSite:
+    name = 'custom-admin'
+
+class MockRemoteField:
+    def __init__(self):
+        self.model = MockModel()
+
+class MockModel:
+    class _meta:
+        app_label = 'testapp'
+        model_name = 'testmodel'
+
+class MockRemoteObj:
+    pk = 1
+    def __str__(self):
+        return "Test Object"
+
+# Test the current behavior
+def test_get_admin_url():
+    form = MockForm()
+    model_admin = MockModelAdmin()
+    field = AdminReadonlyField(form, 'test_field', is_first=True, model_admin=model_admin)
+    
+    remote_field = MockRemoteField()
+    remote_obj = MockRemoteObj()
+    
+    # Test the current get_admin_url implementation
+    url_html = field.get_admin_url(remote_field, remote_obj)
+    print(f"Generated URL HTML: {url_html}")
+    
+    # Check if URL contains the wrong prefix
+    if 'href="/admin/' in url_html:
+        print("ERROR: URL generated with wrong /admin/ prefix instead of /custom-admin/")
+        return False
+    elif 'href="/custom-admin/' in url_html:
+        print("SUCCESS: URL generated with correct /custom-admin/ prefix")
+        return True
+    else:
+        print(f"UNKNOWN: URL format: {url_html}")
+        return False
+
+if __name__ == '__main__':
+    success = test_get_admin_url()
+    if not success:
+        print("Issue reproduced successfully!")
+        sys.exit(1)
+    else:
+        print("Issue not reproduced - might be fixed already?")
+        sys.exit(0)
\ No newline at end of file
diff --git a/simple_fix_test.py b/simple_fix_test.py
new file mode 100644
index 0000000000..1b8efe4e02
--- /dev/null
+++ b/simple_fix_test.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+
+"""
+Simple test to verify the fix for the get_admin_url issue
+"""
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.contrib.admin.helpers import AdminReadonlyField
+from django import forms
+from django.db import models
+
+# Create a simple form with proper _meta attribute
+class TestForm(forms.Form):
+    class Meta:
+        model = None
+        labels = {}
+        help_texts = {}
+
+# Create a mock model admin with custom admin site
+class MockModelAdmin:
+    def __init__(self):
+        self.admin_site = MockAdminSite()
+    
+    def get_empty_value_display(self):
+        return "-"
+
+class MockAdminSite:
+    name = 'custom-admin'
+
+# Create a mock model
+class MockModel:
+    class _meta:
+        app_label = 'testapp'
+        model_name = 'testmodel'
+
+# Test the fixed get_admin_url method
+def test_fixed_get_admin_url():
+    print("Testing the fixed get_admin_url method...")
+    
+    form = TestForm()
+    model_admin = MockModelAdmin()
+    
+    # Create AdminReadonlyField instance
+    field = AdminReadonlyField(form, 'test_field', is_first=True, model_admin=model_admin)
+    
+    # Create mock remote field and object
+    class MockRemoteField:
+        def __init__(self):
+            self.model = MockModel()
+    
+    class MockRemoteObj:
+        pk = 1
+        def __str__(self):
+            return "Test Object"
+    
+    remote_field = MockRemoteField()
+    remote_obj = MockRemoteObj()
+    
+    # Test the fixed get_admin_url method
+    try:
+        url_html = field.get_admin_url(remote_field, remote_obj)
+        print(f"Generated URL HTML: {url_html}")
+        
+        # The method should handle the reverse call gracefully
+        # Since we don't have URL patterns set up, it should return the string representation
+        if str(remote_obj) in url_html:
+            print("SUCCESS: get_admin_url method works correctly (returned fallback)")
+            return True
+        else:
+            print(f"UNEXPECTED: Method returned: {url_html}")
+            return False
+            
+    except Exception as e:
+        print(f"ERROR: get_admin_url method failed with exception: {e}")
+        return False
+
+if __name__ == '__main__':
+    success = test_fixed_get_admin_url()
+    if success:
+        print("Fix appears to be working correctly!")
+        sys.exit(0)
+    else:
+        print("Fix may have issues!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..57acf8628d
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+
+"""
+Simple test to directly call get_admin_url method
+"""
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.urls import reverse
+from django.contrib.admin.utils import quote
+
+# Mock the AdminReadonlyField class with just the get_admin_url method
+class MockAdminReadonlyField:
+    def __init__(self, model_admin=None):
+        self.model_admin = model_admin
+    
+    def get_admin_url(self, remote_field, remote_obj):
+        url_name = 'admin:%s_%s_change' % (
+            remote_field.model._meta.app_label,
+            remote_field.model._meta.model_name,
+        )
+        try:
+            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            return f'<a href="{url}">{remote_obj}</a>'
+        except Exception:
+            return str(remote_obj)
+
+# Create mock objects
+class MockModelAdmin:
+    def __init__(self):
+        self.admin_site = MockAdminSite()
+        
+class MockAdminSite:
+    name = 'custom-admin'
+
+class MockRemoteField:
+    def __init__(self):
+        self.model = MockModel()
+
+class MockModel:
+    class _meta:
+        app_label = 'testapp'
+        model_name = 'testmodel'
+
+class MockRemoteObj:
+    pk = 1
+    def __str__(self):
+        return "Test Object"
+
+# Test the current behavior
+def test_get_admin_url():
+    model_admin = MockModelAdmin()
+    field = MockAdminReadonlyField(model_admin)
+    
+    remote_field = MockRemoteField()
+    remote_obj = MockRemoteObj()
+    
+    # Test the current get_admin_url implementation
+    url_html = field.get_admin_url(remote_field, remote_obj)
+    print(f"Generated URL HTML: {url_html}")
+    
+    # Check if URL contains the wrong prefix
+    if 'href="/admin/' in url_html:
+        print("ERROR: URL generated with wrong /admin/ prefix instead of /custom-admin/")
+        return False
+    elif 'href="/custom-admin/' in url_html:
+        print("SUCCESS: URL generated with correct /custom-admin/ prefix")
+        return True
+    else:
+        print(f"UNKNOWN: URL format: {url_html}")
+        return False
+
+if __name__ == '__main__':
+    success = test_get_admin_url()
+    if not success:
+        print("Issue reproduced successfully!")
+        sys.exit(1)
+    else:
+        print("Issue not reproduced - might be fixed already?")
+        sys.exit(0)
\ No newline at end of file
diff --git a/syntax_test.py b/syntax_test.py
new file mode 100644
index 0000000000..9a366fc8df
--- /dev/null
+++ b/syntax_test.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+
+"""
+Simple syntax test to verify the get_admin_url method can be called
+"""
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        USE_TZ=True,
+        ROOT_URLCONF='django.contrib.admin.urls',  # Use admin URLs
+    )
+
+import django
+django.setup()
+
+# Test that the method can be imported and called
+def test_method_syntax():
+    print("Testing that get_admin_url method can be imported and called...")
+    
+    # Import the method indirectly through the class
+    from django.contrib.admin.helpers import AdminReadonlyField
+    
+    # Create a minimal mock object to test the method signature
+    class MockSelf:
+        def __init__(self):
+            self.model_admin = MockModelAdmin()
+    
+    class MockModelAdmin:
+        def __init__(self):
+            self.admin_site = MockAdminSite()
+    
+    class MockAdminSite:
+        name = 'custom-admin'
+    
+    class MockRemoteField:
+        def __init__(self):
+            self.model = MockModel()
+    
+    class MockModel:
+        class _meta:
+            app_label = 'testapp'
+            model_name = 'testmodel'
+    
+    class MockRemoteObj:
+        pk = 1
+        def __str__(self):
+            return "Test Object"
+    
+    # Create a mock instance and test the method call
+    mock_self = MockSelf()
+    remote_field = MockRemoteField()
+    remote_obj = MockRemoteObj()
+    
+    # Test that the method exists and can be called
+    try:
+        # This tests that the method signature is correct
+        method = AdminReadonlyField.get_admin_url
+        print("SUCCESS: get_admin_url method exists and has correct signature")
+        return True
+        
+    except Exception as e:
+        print(f"ERROR: {e}")
+        return False
+
+if __name__ == '__main__':
+    success = test_method_syntax()
+    if success:
+        print("Method syntax is correct!")
+        sys.exit(0)
+    else:
+        print("Method syntax has issues!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..d622cab784
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+
+"""
+Test to verify the fix for the get_admin_url issue
+"""
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        USE_TZ=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+        ROOT_URLCONF='test_fix',
+    )
+
+import django
+django.setup()
+
+from django.urls import path, include
+from django.http import HttpResponse
+from django.contrib.admin import AdminSite
+from django import forms
+from django.db import models
+
+# Create a simple view for testing
+def test_view(request):
+    return HttpResponse("Test view")
+
+# URL patterns
+urlpatterns = [
+    path('admin/', include('django.contrib.admin.urls')),
+    path('custom-admin/', include('django.contrib.admin.urls')),
+    path('test/', test_view, name='test'),
+]
+
+# Create test models
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    def __str__(self):
+        return self.name
+
+# Create custom admin site
+class CustomAdminSite(AdminSite):
+    name = 'custom-admin'
+
+custom_admin = CustomAdminSite(name='custom-admin')
+
+# Register the model with custom admin
+from django.contrib import admin
+
+@admin.register(TestModel, site=custom_admin)
+class TestModelAdmin(admin.ModelAdmin):
+    pass
+
+# Test the fixed get_admin_url method
+def test_fixed_get_admin_url():
+    print("Testing the fixed get_admin_url method...")
+    
+    # Create a mock AdminReadonlyField instance
+    from django.contrib.admin.helpers import AdminReadonlyField
+    
+    # Create a form with proper _meta attribute
+    class TestForm(forms.Form):
+        class Meta:
+            model = TestModel
+            labels = {}
+            help_texts = {}
+    
+    form = TestForm()
+    model_admin = TestModelAdmin(TestModel, custom_admin)
+    
+    # Create AdminReadonlyField instance
+    field = AdminReadonlyField(form, 'name', is_first=True, model_admin=model_admin)
+    
+    # Create mock remote field and object
+    class MockRemoteField:
+        def __init__(self):
+            self.model = TestModel
+    
+    class MockRemoteObj:
+        pk = 1
+        def __str__(self):
+            return "Test Object"
+    
+    remote_field = MockRemoteField()
+    remote_obj = MockRemoteObj()
+    
+    # Test the fixed get_admin_url method
+    try:
+        url_html = field.get_admin_url(remote_field, remote_obj)
+        print(f"Generated URL HTML: {url_html}")
+        
+        # The key test: check if the method handles the current_app parameter correctly
+        # Since we don't have actual URL patterns set up, we can't test the exact URL,
+        # but we can verify that the method doesn't crash and returns something
+        if 'href="' in url_html:
+            print("SUCCESS: get_admin_url method works without crashing")
+            return True
+        else:
+            print("Method returned fallback string (expected without proper URL setup)")
+            return True
+            
+    except Exception as e:
+        print(f"ERROR: get_admin_url method failed with exception: {e}")
+        return False
+
+if __name__ == '__main__':
+    success = test_fixed_get_admin_url()
+    if success:
+        print("Fix appears to be working correctly!")
+        sys.exit(0)
+    else:
+        print("Fix may have issues!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_get_admin_url.py b/test_get_admin_url.py
new file mode 100644
index 0000000000..d246e73e7d
--- /dev/null
+++ b/test_get_admin_url.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+
+"""
+Direct test of the get_admin_url method to reproduce the issue
+"""
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+# Configure minimal Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        USE_TZ=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+    )
+
+import django
+django.setup()
+
+# Import required modules
+from django.contrib.admin.helpers import AdminReadonlyField
+from django import forms
+
+# Create a proper form with _meta attribute
+class TestForm(forms.Form):
+    class Meta:
+        model = None
+        labels = {}
+        help_texts = {}
+
+# Create mock objects
+class MockModelAdmin:
+    def __init__(self):
+        self.admin_site = MockAdminSite()
+        
+class MockAdminSite:
+    name = 'custom-admin'
+
+class MockRemoteField:
+    def __init__(self):
+        self.model = MockModel()
+
+class MockModel:
+    class _meta:
+        app_label = 'testapp'
+        model_name = 'testmodel'
+
+class MockRemoteObj:
+    pk = 1
+    def __str__(self):
+        return "Test Object"
+
+# Test the current behavior
+def test_get_admin_url():
+    form = TestForm()
+    model_admin = MockModelAdmin()
+    
+    # Create AdminReadonlyField instance
+    field = AdminReadonlyField(form, 'test_field', is_first=True, model_admin=model_admin)
+    
+    remote_field = MockRemoteField()
+    remote_obj = MockRemoteObj()
+    
+    # Test the current get_admin_url implementation
+    url_html = field.get_admin_url(remote_field, remote_obj)
+    print(f"Generated URL HTML: {url_html}")
+    
+    # Check if URL contains the wrong prefix
+    if 'href="/admin/' in url_html:
+        print("ERROR: URL generated with wrong /admin/ prefix instead of /custom-admin/")
+        return False
+    elif 'href="/custom-admin/' in url_html:
+        print("SUCCESS: URL generated with correct /custom-admin/ prefix")
+        return True
+    else:
+        print(f"UNKNOWN: URL format: {url_html}")
+        return False
+
+if __name__ == '__main__':
+    success = test_get_admin_url()
+    if not success:
+        print("Issue reproduced successfully!")
+        sys.exit(1)
+    else:
+        print("Issue not reproduced - might be fixed already?")
+        sys.exit(0)
\ No newline at end of file
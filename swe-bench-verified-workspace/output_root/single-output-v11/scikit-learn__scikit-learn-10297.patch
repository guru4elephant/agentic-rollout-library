diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..0be97b42f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+import numpy as np
+from sklearn import linear_model as lm
+
+# test database - use classification data (discrete labels)
+n = 100
+x = np.random.randn(n, 30)
+y = np.random.randint(0, 3, size=n)  # 3 classes: 0, 1, 2
+
+# This should work according to the documentation but currently fails
+try:
+    rr = lm.RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, 
+                             store_cv_values=True).fit(x, y)
+    print("Success: RidgeClassifierCV with store_cv_values=True worked")
+    print(f"cv_values_ shape: {rr.cv_values_.shape if hasattr(rr, 'cv_values_') else 'No cv_values_'}")
+except TypeError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py
index 911c74ae3..b1fccc2e9 100644
--- a/sklearn/linear_model/ridge.py
+++ b/sklearn/linear_model/ridge.py
@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
     advantage of the multi-variate response support in Ridge.
     """
     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,
-                 normalize=False, scoring=None, cv=None, class_weight=None):
+                 normalize=False, scoring=None, cv=None, class_weight=None,
+                 store_cv_values=False):
         super(RidgeClassifierCV, self).__init__(
             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,
-            scoring=scoring, cv=cv)
+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)
         self.class_weight = class_weight
 
     def fit(self, X, y, sample_weight=None):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..61e2a3e7b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,32 @@
+import numpy as np
+from sklearn import linear_model as lm
+
+# Test 1: store_cv_values=False (default behavior)
+print("Test 1: store_cv_values=False (default)")
+n = 50
+x = np.random.randn(n, 20)
+y = np.random.randint(0, 2, size=n)  # 2 classes
+
+rr = lm.RidgeClassifierCV(alphas=[0.1, 1.0, 10.0], store_cv_values=False).fit(x, y)
+print(f"Has cv_values_: {hasattr(rr, 'cv_values_')}")
+
+# Test 2: store_cv_values=True with cv=None (default)
+print("\nTest 2: store_cv_values=True with cv=None")
+rr2 = lm.RidgeClassifierCV(alphas=[0.1, 1.0, 10.0], store_cv_values=True).fit(x, y)
+print(f"cv_values_ shape: {rr2.cv_values_.shape}")
+
+# Test 3: store_cv_values=True with explicit cv (should raise error)
+print("\nTest 3: store_cv_values=True with explicit cv (should raise error)")
+try:
+    rr3 = lm.RidgeClassifierCV(alphas=[0.1, 1.0, 10.0], cv=3, store_cv_values=True).fit(x, y)
+    print("Unexpected success")
+except ValueError as e:
+    print(f"Expected error: {e}")
+
+# Test 4: Binary classification
+print("\nTest 4: Binary classification")
+y_binary = np.random.randint(0, 2, size=n)
+rr4 = lm.RidgeClassifierCV(alphas=[0.1, 1.0, 10.0], store_cv_values=True).fit(x, y_binary)
+print(f"cv_values_ shape: {rr4.cv_values_.shape}")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 000000000..fcc9c585c
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,25 @@
+import numpy as np
+from sklearn import linear_model as lm
+
+# Exact reproduction from the GitHub issue
+n = 100
+x = np.random.randn(n, 30)
+y = np.random.normal(size=n)  # This should be classification data, but let's test the parameter first
+
+# Test that store_cv_values parameter is accepted (regardless of data type issues)
+try:
+    rr = lm.RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, 
+                             store_cv_values=True)
+    print("SUCCESS: RidgeClassifierCV now accepts store_cv_values parameter!")
+except TypeError as e:
+    print(f"FAILED: {e}")
+
+# Test with proper classification data
+y_class = np.random.randint(0, 3, size=n)  # 3 classes
+try:
+    rr = lm.RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, 
+                             store_cv_values=True).fit(x, y_class)
+    print("SUCCESS: RidgeClassifierCV with store_cv_values=True works with classification data!")
+    print(f"cv_values_ shape: {rr.cv_values_.shape}")
+except Exception as e:
+    print(f"FAILED: {e}")
\ No newline at end of file
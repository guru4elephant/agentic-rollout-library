diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a6cf8961d8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+from sympy import exp
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+expr = units.second / (units.ohm * units.farad)
+dim = SI._collect_factor_and_dimension(expr)[1]
+
+assert SI.get_dimension_system().is_dimensionless(dim)
+
+buggy_expr = 100 + exp(expr)
+SI._collect_factor_and_dimension(buggy_expr)
+
+# results in ValueError: Dimension of "exp(second/(farad*ohm))" is Dimension(time/(capacitance*impedance)), but it should be Dimension(1)
\ No newline at end of file
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..950a7f7fa5 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -192,8 +192,15 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Function):
             fds = [self._collect_factor_and_dimension(
                 arg) for arg in expr.args]
+            # For functions like exp, sin, cos, etc., the result should be dimensionless
+            # Check if all arguments are dimensionless
+            for factor, dim in fds:
+                if not self.get_dimension_system().is_dimensionless(dim):
+                    raise ValueError(
+                        'Function "{}" cannot be applied to dimensional '
+                        'arguments'.format(expr.func.__name__))
             return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+                    Dimension(1))
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..38e6383d0c
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,36 @@
+from sympy import exp, sin, cos, log
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+# Test case 1: Original issue - exp with dimensionless argument
+expr = units.second / (units.ohm * units.farad)
+dim = SI._collect_factor_and_dimension(expr)[1]
+assert SI.get_dimension_system().is_dimensionless(dim)
+
+buggy_expr = 100 + exp(expr)
+result = SI._collect_factor_and_dimension(buggy_expr)
+print("Test 1 passed: exp with dimensionless argument")
+
+# Test case 2: Other functions with dimensionless arguments
+sin_expr = sin(expr)
+cos_expr = cos(expr) 
+log_expr = log(expr)
+SI._collect_factor_and_dimension(sin_expr)
+SI._collect_factor_and_dimension(cos_expr)
+SI._collect_factor_and_dimension(log_expr)
+print("Test 2 passed: other functions with dimensionless arguments")
+
+# Test case 3: Function with dimensional argument should raise error
+try:
+    dimensional_expr = exp(units.second)
+    SI._collect_factor_and_dimension(dimensional_expr)
+    print("Test 3 failed: should have raised error")
+except ValueError as e:
+    print("Test 3 passed: exp with dimensional argument correctly raised error:", e)
+
+# Test case 4: Nested functions
+nested_expr = exp(sin(expr))
+result = SI._collect_factor_and_dimension(nested_expr)
+print("Test 4 passed: nested functions")
+
+print("All tests passed!")
\ No newline at end of file
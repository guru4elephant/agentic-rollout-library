diff --git a/debug_replace.py b/debug_replace.py
new file mode 100644
index 0000000000..860282934e
--- /dev/null
+++ b/debug_replace.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.utils import replace_named_groups, named_group_matcher
+
+# Debug the replace_named_groups function
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+
+print("Pattern:", pattern)
+print("Named group matches:")
+named_group_indices = [
+    (m.start(0), m.end(0), m.group(1))
+    for m in named_group_matcher.finditer(pattern)
+]
+print("named_group_indices:", named_group_indices)
+
+# Tuples of (named capture group pattern, group name).
+group_pattern_and_name = []
+# Loop over the groups and their start and end indices.
+for start, end, group_name in named_group_indices:
+    print(f"\nProcessing group '{group_name}' at position {start}-{end}")
+    # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
+    unmatched_open_brackets, prev_char = 1, None
+    for idx, val in enumerate(pattern[end:]):
+        print(f"  idx={idx}, val='{val}', unmatched_open_brackets={unmatched_open_brackets}")
+        # If brackets are balanced, the end of the string for the current
+        # named capture group pattern has been reached.
+        if unmatched_open_brackets == 0:
+            group_pattern_and_name.append((pattern[start:end + idx], group_name))
+            print(f"  Found end at idx={idx}, pattern={pattern[start:end + idx]}")
+            break
+        
+        # Check for unescaped `(` and `)`. They mark the start and end of a
+        # nested group.
+        if val == '(' and prev_char != '\\':
+            unmatched_open_brackets += 1
+        elif val == ')' and prev_char != '\\':
+            unmatched_open_brackets -= 1
+        prev_char = val
+    
+    print(f"  Final unmatched_open_brackets: {unmatched_open_brackets}")
+
+print("\nGroup patterns and names:", group_pattern_and_name)
+result = replace_named_groups(pattern)
+print("Final result:", result)
\ No newline at end of file
diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..937876c014 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -180,6 +180,10 @@ def replace_named_groups(pattern):
             elif val == ')' and prev_char != '\\':
                 unmatched_open_brackets -= 1
             prev_char = val
+        
+        # If we reached the end of the string and brackets are balanced, add the group
+        if unmatched_open_brackets == 0:
+            group_pattern_and_name.append((pattern[start:end + len(pattern[end:])], group_name))
 
     # Replace the string for named capture groups with their group names.
     for group_pattern, group_name in group_pattern_and_name:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..653c99182a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.utils import replace_named_groups
+
+# Test case from the GitHub issue
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+print("Original pattern:", pattern)
+result = replace_named_groups(pattern)
+print("Result:", result)
+print("Expected: entries/<pk>/relationships/<related_field>")
+
+# Test with trailing slash (should work according to the issue)
+pattern_with_slash = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/'
+print("\nPattern with trailing slash:", pattern_with_slash)
+result_with_slash = replace_named_groups(pattern_with_slash)
+print("Result with slash:", result_with_slash)
+print("Expected: entries/<pk>/relationships/<related_field>/")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..8f1b14d185
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.utils import replace_named_groups
+
+# Test various edge cases
+test_cases = [
+    # Original issue case
+    (r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)', 'entries/<pk>/relationships/<related_field>'),
+    
+    # With trailing slash
+    (r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/', 'entries/<pk>/relationships/<related_field>/'),
+    
+    # Single named group at end
+    (r'(?P<name>\w+)', '<name>'),
+    
+    # Single named group with content at end
+    (r'prefix/(?P<name>\w+)', 'prefix/<name>'),
+    
+    # Multiple nested groups
+    (r'^(?P<a>(x|y))/(?P<b>\w+)$', '^<a>/<b>$'),
+    
+    # No named groups
+    (r'static/path/', 'static/path/'),
+    
+    # Mixed named and unnamed groups
+    (r'^(?P<a>\w+)/b/(\w+)/c/(?P<d>\w+)$', '^<a>/b/(\w+)/c/<d>$'),
+    
+    # Escaped parentheses
+    (r'^(?P<a>\(escaped\))/b$', '^<a>/b$'),
+]
+
+print("Testing edge cases:")
+for pattern, expected in test_cases:
+    result = replace_named_groups(pattern)
+    status = "✓" if result == expected else "✗"
+    print(f"{status} Pattern: {pattern}")
+    print(f"   Expected: {expected}")
+    print(f"   Got:      {result}")
+    if result != expected:
+        print("   FAILED!")
+    print()
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..87e557bd5a
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.utils import replace_named_groups
+from django.contrib.admindocs.views import simplify_regex
+
+def test_github_issue():
+    """Test the specific issue reported in GitHub issue #6888"""
+    
+    # The exact pattern from the GitHub issue
+    pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+    
+    print("Testing GitHub issue #6888:")
+    print(f"Original pattern: {pattern}")
+    
+    # Test replace_named_groups directly
+    result_replace = replace_named_groups(pattern)
+    expected_replace = 'entries/<pk>/relationships/<related_field>'
+    print(f"replace_named_groups result: {result_replace}")
+    print(f"Expected: {expected_replace}")
+    replace_passed = result_replace == expected_replace
+    print(f"replace_named_groups test: {'PASS' if replace_passed else 'FAIL'}")
+    
+    # Test simplify_regex (which uses replace_named_groups)
+    result_simplify = simplify_regex(pattern)
+    expected_simplify = '/entries/<pk>/relationships/<related_field>'
+    print(f"simplify_regex result: {result_simplify}")
+    print(f"Expected: {expected_simplify}")
+    simplify_passed = result_simplify == expected_simplify
+    print(f"simplify_regex test: {'PASS' if simplify_passed else 'FAIL'}")
+    
+    # Test with trailing slash (should work both before and after fix)
+    pattern_with_slash = pattern + '/'
+    result_with_slash = simplify_regex(pattern_with_slash)
+    expected_with_slash = '/entries/<pk>/relationships/<related_field>/'
+    print(f"\nWith trailing slash: {pattern_with_slash}")
+    print(f"Result: {result_with_slash}")
+    print(f"Expected: {expected_with_slash}")
+    slash_passed = result_with_slash == expected_with_slash
+    print(f"Trailing slash test: {'PASS' if slash_passed else 'FAIL'}")
+    
+    all_passed = replace_passed and simplify_passed and slash_passed
+    print(f"\nOverall test result: {'PASS' if all_passed else 'FAIL'}")
+    
+    return all_passed
+
+if __name__ == "__main__":
+    test_github_issue()
\ No newline at end of file
diff --git a/test_nested_edge_case.py b/test_nested_edge_case.py
new file mode 100644
index 0000000000..1a0f83ee51
--- /dev/null
+++ b/test_nested_edge_case.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.utils import replace_named_groups
+
+# Test edge case: nested groups at the end of pattern
+test_cases = [
+    # Nested group at end
+    (r'(?P<a>(x|y))', '<a>'),
+    
+    # Complex nested group at end  
+    (r'prefix/(?P<a>(x|y)(z|w))', 'prefix/<a>'),
+    
+    # Multiple nested groups
+    (r'(?P<a>(x|y))/(?P<b>(z|w))', '<a>/<b>'),
+    
+    # Nested group with content after
+    (r'(?P<a>(x|y))suffix', '<a>suffix'),
+]
+
+print("Testing nested groups edge cases:")
+all_passed = True
+for pattern, expected in test_cases:
+    result = replace_named_groups(pattern)
+    status = '✓' if result == expected else '✗'
+    print(f"{status} {pattern} -> {result} (expected: {expected})")
+    if result != expected:
+        all_passed = False
+
+print(f"\nAll nested group tests passed: {all_passed}")
\ No newline at end of file
diff --git a/test_non_end_groups.py b/test_non_end_groups.py
new file mode 100644
index 0000000000..9a9caaf2aa
--- /dev/null
+++ b/test_non_end_groups.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.utils import replace_named_groups
+
+# Test cases where named groups are not at the end (should work as before)
+test_cases = [
+    # Group in middle with content after
+    (r'prefix/(?P<name>\w+)/suffix', 'prefix/<name>/suffix'),
+    
+    # Multiple groups with content after
+    (r'(?P<a>\w+)/(?P<b>\w+)/suffix', '<a>/<b>/suffix'),
+    
+    # Group with regex characters after
+    (r'(?P<name>\w+)\d+', '<name>\d+'),
+    
+    # Group with special characters after
+    (r'(?P<name>\w+)[.*?]', '<name>[.*?]'),
+]
+
+print("Testing non-end groups (should work as before):")
+all_passed = True
+for pattern, expected in test_cases:
+    result = replace_named_groups(pattern)
+    status = '✓' if result == expected else '✗'
+    print(f"{status} {pattern} -> {result} (expected: {expected})")
+    if result != expected:
+        all_passed = False
+
+print(f"\nAll non-end group tests passed: {all_passed}")
\ No newline at end of file
diff --git a/test_simplify_regex.py b/test_simplify_regex.py
new file mode 100644
index 0000000000..01b7fdb51b
--- /dev/null
+++ b/test_simplify_regex.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.views import simplify_regex
+
+# Test simplify_regex with the problematic pattern
+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+print("Testing simplify_regex:")
+print("Original pattern:", pattern)
+result = simplify_regex(pattern)
+print("Result:", result)
+print("Expected: /entries/<pk>/relationships/<related_field>")
+
+# Test with trailing slash
+pattern_with_slash = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/'
+print("\nWith trailing slash:", pattern_with_slash)
+result_with_slash = simplify_regex(pattern_with_slash)
+print("Result:", result_with_slash)
+print("Expected: /entries/<pk>/relationships/<related_field>/")
\ No newline at end of file
diff --git a/test_simplify_regex_existing.py b/test_simplify_regex_existing.py
new file mode 100644
index 0000000000..9bd612f787
--- /dev/null
+++ b/test_simplify_regex_existing.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+from django.contrib.admindocs.views import simplify_regex
+
+# Test the specific simplify_regex test cases from the existing test
+tests = (
+    (r'^a', '/a'),
+    (r'^(?P<a>\w+)/b/(?P<c>\w+)/$', '/<a>/b/<c>/'),
+    (r'^(?P<a>\w+)/b/(?P<c>\w+)$', '/<a>/b/<c>'),
+    (r'^(?P<a>\w+)/b/(\w+)$', '/<a>/b/<var>'),
+    (r'^(?P<a>\w+)/b/((x|y)\w+)$', '/<a>/b/<var>'),
+    (r'^(?P<a>(x|y))/b/(?P<c>\w+)$', '/<a>/b/<c>'),
+    (r'^(?P<a>(x|y))/b/(?P<c>\w+)ab', '/<a>/b/<c>ab'),
+    (r'^(?P<a>(x|y)(\(|\)))/b/(?P<c>\w+)ab', '/<a>/b/<c>ab'),
+    (r'^a/?$', '/a/'),
+)
+
+print('Testing simplify_regex with existing test cases:')
+all_passed = True
+for pattern, expected in tests:
+    result = simplify_regex(pattern)
+    status = '✓' if result == expected else '✗'
+    print(f'{status} {pattern} -> {result} (expected: {expected})')
+    if result != expected:
+        all_passed = False
+
+print(f'\nAll tests passed: {all_passed}')
\ No newline at end of file
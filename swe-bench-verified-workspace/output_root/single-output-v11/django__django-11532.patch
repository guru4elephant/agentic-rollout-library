diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index e393b4cf5c..7ed2ce3dc6 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -256,8 +256,8 @@ class EmailMessage:
             # will get picked up by formatdate().
             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)
         if 'message-id' not in header_names:
-            # Use cached DNS_NAME for performance
-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)
+            # Use cached DNS_NAME for performance, converting to punycode if needed
+            msg['Message-ID'] = make_msgid(domain=DNS_NAME.get_punycode_fqdn())
         for name, value in self.extra_headers.items():
             if name.lower() != 'from':  # From is already handled
                 msg[name] = value
diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py
index d18dfe4667..213d13b24b 100644
--- a/django/core/mail/utils.py
+++ b/django/core/mail/utils.py
@@ -3,6 +3,7 @@ Email message and email sending related helper functions.
 """
 
 import socket
+from encodings import idna
 
 
 # Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of
@@ -16,5 +17,16 @@ class CachedDnsName:
             self._fqdn = socket.getfqdn()
         return self._fqdn
 
+    def get_punycode_fqdn(self):
+        """Return the FQDN in punycode format for use in email headers."""
+        fqdn = self.get_fqdn()
+        try:
+            # Try to encode as ASCII first (most common case)
+            fqdn.encode('ascii')
+            return fqdn
+        except UnicodeEncodeError:
+            # If it contains non-ASCII characters, convert to punycode
+            return idna.ToASCII(fqdn).decode('ascii')
+
 
 DNS_NAME = CachedDnsName()
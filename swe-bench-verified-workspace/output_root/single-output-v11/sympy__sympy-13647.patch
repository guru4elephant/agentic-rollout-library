diff --git a/debug_col_insert.py b/debug_col_insert.py
new file mode 100644
index 0000000000..a879eca5bb
--- /dev/null
+++ b/debug_col_insert.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+"""Debug script to understand col_insert behavior."""
+
+import sympy as sm
+
+# Create a 6x6 identity matrix
+M = sm.eye(6)
+print("Original matrix M:")
+print(M)
+print()
+
+# Create a 6x2 matrix of twos
+V = 2 * sm.ones(6, 2)
+print("Matrix V to insert:")
+print(V)
+print()
+
+# Insert V at column 3
+result = M.col_insert(3, V)
+print("Result of M.col_insert(3, V):")
+print(result)
+print()
+
+# Let's manually verify what should happen
+print("Manual verification:")
+print("Columns 0-2 should be from M[0:6, 0:3]")
+print("Columns 3-4 should be from V[0:6, 0:2]") 
+print("Columns 5-7 should be from M[0:6, 3:6]")
+print()
+
+print("Expected result (manually constructed):")
+expected_rows = []
+for i in range(6):
+    row = []
+    # Columns 0-2: from original matrix
+    for j in range(3):
+        row.append(M[i, j])
+    # Columns 3-4: from inserted matrix
+    for j in range(2):
+        row.append(V[i, j])
+    # Columns 5-7: from original matrix (columns 3-5)
+    for j in range(3, 6):
+        row.append(M[i, j])
+    expected_rows.append(row)
+    
+expected = sm.Matrix(expected_rows)
+print(expected)
+print()
+
+print("Are they equal?", result == expected)
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..4d046a2b1a
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+"""Final comprehensive test of col_insert fix."""
+
+import sympy as sm
+
+print("=== Final Comprehensive Test of col_insert Fix ===")
+
+# Original issue reproduction
+print("\n1. Original issue reproduction:")
+M = sm.eye(6)
+V = 2 * sm.ones(6, 2)
+result = M.col_insert(3, V)
+print("Result shape:", result.shape)
+print("Top-left 3x3 corner:")
+print(result[:3, :3])
+print("Bottom-right 3x3 corner (should be identity):")
+print(result[3:, 5:])
+print("Inserted columns (columns 3-4):")
+print(result[:, 3:5])
+
+# Verify the fix
+expected_bottom_right = sm.eye(3)
+actual_bottom_right = result[3:, 5:]
+print("Bottom-right identity matrix correct:", actual_bottom_right == expected_bottom_right)
+
+# Test with different matrix types
+print("\n2. Testing with different matrix types:")
+
+# Dense matrix
+M_dense = sm.Matrix(sm.eye(4))
+V_dense = sm.Matrix(2 * sm.ones(4, 1))
+result_dense = M_dense.col_insert(2, V_dense)
+print("Dense matrix result shape:", result_dense.shape)
+
+# Sparse matrix  
+M_sparse = sm.SparseMatrix(sm.eye(4))
+V_sparse = sm.SparseMatrix(2 * sm.ones(4, 1))
+result_sparse = M_sparse.col_insert(2, V_sparse)
+print("Sparse matrix result shape:", result_sparse.shape)
+print("Dense and sparse results match:", result_dense == result_sparse)
+
+print("\n3. All tests completed successfully!")
+print("The col_insert bug has been fixed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..265c1dadf0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+"""Script to reproduce the col_insert issue."""
+
+import sympy as sm
+
+# Create a 6x6 identity matrix
+M = sm.eye(6)
+print("Original matrix M:")
+print(M)
+print()
+
+# Create a 6x2 matrix of twos
+V = 2 * sm.ones(6, 2)
+print("Matrix V to insert:")
+print(V)
+print()
+
+# Insert V at column 3
+result = M.col_insert(3, V)
+print("Result of M.col_insert(3, V):")
+print(result)
+print()
+
+# Expected result should have the identity matrix structure preserved
+# with the twos inserted at column 3-4, and identity matrix elements
+# in the correct positions
+print("Expected structure (identity matrix with twos inserted at columns 3-4):")
+print("The 3x3 identity submatrix should be in the bottom right, not top right")
\ No newline at end of file
diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 056d9bc497..4aa75e4d77 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -86,7 +86,7 @@ def entry(i, j):
                 return self[i, j]
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
-            return self[i, j - pos - other.cols]
+            return self[i, j - other.cols]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c1cc6fc168
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+"""Test edge cases for col_insert fix."""
+
+import sympy as sm
+
+print("Testing edge cases for col_insert:")
+
+# Test 1: Insert at beginning
+print("\n1. Insert at column 0:")
+M = sm.eye(3)
+V = sm.Matrix([[9, 9], [9, 9], [9, 9]])
+result = M.col_insert(0, V)
+print("Result:", result)
+expected = sm.Matrix([[9, 9, 1, 0, 0], [9, 9, 0, 1, 0], [9, 9, 0, 0, 1]])
+print("Expected:", expected)
+print("Match:", result == expected)
+
+# Test 2: Insert at end
+print("\n2. Insert at column 3:")
+M = sm.eye(3)
+V = sm.Matrix([[9, 9], [9, 9], [9, 9]])
+result = M.col_insert(3, V)
+print("Result:", result)
+expected = sm.Matrix([[1, 0, 0, 9, 9], [0, 1, 0, 9, 9], [0, 0, 1, 9, 9]])
+print("Expected:", expected)
+print("Match:", result == expected)
+
+# Test 3: Insert in middle
+print("\n3. Insert at column 1:")
+M = sm.eye(3)
+V = sm.Matrix([[9, 9], [9, 9], [9, 9]])
+result = M.col_insert(1, V)
+print("Result:", result)
+expected = sm.Matrix([[1, 9, 9, 0, 0], [0, 9, 9, 1, 0], [0, 9, 9, 0, 1]])
+print("Expected:", expected)
+print("Match:", result == expected)
+
+# Test 4: Negative index
+print("\n4. Insert at column -1 (should be column 2):")
+M = sm.eye(3)
+V = sm.Matrix([[9, 9], [9, 9], [9, 9]])
+result = M.col_insert(-1, V)
+print("Result:", result)
+expected = sm.Matrix([[1, 0, 9, 9, 0], [0, 1, 9, 9, 0], [0, 0, 9, 9, 1]])
+print("Expected:", expected)
+print("Match:", result == expected)
+
+# Test 5: Insert single column
+print("\n5. Insert single column at column 1:")
+M = sm.eye(3)
+V = sm.Matrix([[9], [9], [9]])
+result = M.col_insert(1, V)
+print("Result:", result)
+expected = sm.Matrix([[1, 9, 0, 0], [0, 9, 1, 0], [0, 9, 0, 1]])
+print("Expected:", expected)
+print("Match:", result == expected)
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
diff --git a/test_sparse_col_insert.py b/test_sparse_col_insert.py
new file mode 100644
index 0000000000..6518233d16
--- /dev/null
+++ b/test_sparse_col_insert.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+"""Test sparse matrix col_insert."""
+
+import sympy as sm
+
+# Test sparse matrix col_insert
+print("Testing sparse matrix col_insert:")
+M = sm.SparseMatrix(sm.eye(6))
+V = sm.SparseMatrix(2 * sm.ones(6, 2))
+result = M.col_insert(3, V)
+print("Result:", result)
+
+# Compare with dense matrix result
+M_dense = sm.eye(6)
+V_dense = 2 * sm.ones(6, 2)
+expected = M_dense.col_insert(3, V_dense)
+print("Expected:", expected)
+print("Match:", result == expected)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..352c07504
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where rst_prolog removes top-level headings 
+containing domain directives like :mod:
+"""
+
+import os
+import shutil
+import subprocess
+import tempfile
+
+def reproduce_issue():
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        os.chdir(tmpdir)
+        
+        # Step 1: Create a basic Sphinx project
+        print("Creating Sphinx project...")
+        subprocess.run([
+            "sphinx-quickstart", 
+            "--no-sep", 
+            "--project", "mypackage", 
+            "--author", "me", 
+            "-v", "0.1.0", 
+            "--release", "0.1.0", 
+            "--language", "en", 
+            "docs"
+        ], check=True)
+        
+        # Step 2: Create index.rst with toctree
+        print("Creating index.rst...")
+        with open("docs/index.rst", "w") as f:
+            f.write('Welcome\n=======\n\n.. toctree::\n\n   mypackage\n')
+        
+        # Step 3: Create mypackage.rst with domain directive heading
+        print("Creating mypackage.rst with :mod: heading...")
+        with open("docs/mypackage.rst", "w") as f:
+            f.write(':mod:`mypackage2`\n=================\n\nContent\n\nSubheading\n----------\n')
+        
+        # Step 4: Add rst_prolog to conf.py
+        print("Adding rst_prolog to conf.py...")
+        with open("docs/conf.py", "a") as f:
+            f.write('rst_prolog = """\n.. |psf| replace:: Python Software Foundation\n"""\n')
+        
+        # Step 5: Build the documentation
+        print("Building documentation...")
+        result = subprocess.run([
+            "sphinx-build", 
+            "-b", "html", 
+            "docs", 
+            "docs/_build"
+        ], capture_output=True, text=True)
+        
+        print("Build exit code:", result.returncode)
+        print("Build stdout:", result.stdout)
+        print("Build stderr:", result.stderr)
+        
+        # Step 6: Check if the heading is missing
+        print("Checking for mypackage2 in index.html...")
+        try:
+            with open("docs/_build/index.html", "r") as f:
+                content = f.read()
+                if 'mypackage2' in content:
+                    print("SUCCESS: mypackage2 found in index.html")
+                else:
+                    print("ISSUE REPRODUCED: mypackage2 NOT found in index.html")
+        except FileNotFoundError:
+            print("index.html not found - build may have failed")
+        
+        # Step 7: Also check the mypackage.html file
+        try:
+            with open("docs/_build/mypackage.html", "r") as f:
+                content = f.read()
+                print("mypackage.html content snippet:", content[:500])
+        except FileNotFoundError:
+            print("mypackage.html not found")
+
+if __name__ == "__main__":
+    reproduce_issue()
\ No newline at end of file
diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py
index 7a1538325..432692171 100644
--- a/sphinx/util/rst.py
+++ b/sphinx/util/rst.py
@@ -25,7 +25,7 @@ except ImportError:
 
 logger = logging.getLogger(__name__)
 
-docinfo_re = re.compile(':\\w+:.*?')
+docinfo_re = re.compile(':(author|title|date|copyright|contact|version|status|organization):.*?')
 symbols_re = re.compile(r'([!-\-/:-@\[-`{-~])')  # symbols without dot(0x2e)
 SECTIONING_CHARS = ['=', '-', '~']
 
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..4cf823be9
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the fix works with various domain directives
+"""
+
+import tempfile
+import subprocess
+import os
+
+def test_domain_directive(directive, content):
+    """Test a specific domain directive with rst_prolog"""
+    with tempfile.TemporaryDirectory() as tmpdir:
+        os.chdir(tmpdir)
+        
+        # Create Sphinx project
+        subprocess.run([
+            "sphinx-quickstart", 
+            "--no-sep", 
+            "--project", "test", 
+            "--author", "test", 
+            "-v", "1.0.0", 
+            "--release", "1.0.0", 
+            "--language", "en", 
+            "docs"
+        ], check=True, capture_output=True)
+        
+        # Create index.rst
+        with open("docs/index.rst", "w") as f:
+            f.write('Test\n====\n\n.. toctree::\n\n   testpage\n')
+        
+        # Create testpage.rst with domain directive
+        with open("docs/testpage.rst", "w") as f:
+            f.write(f'{directive}\n{content}\n\nContent\n\nSubheading\n----------\n')
+        
+        # Add rst_prolog
+        with open("docs/conf.py", "a") as f:
+            f.write('rst_prolog = """\n.. |test| replace:: Test Replacement\n"""\n')
+        
+        # Build documentation
+        result = subprocess.run([
+            "sphinx-build", 
+            "-b", "html", 
+            "docs", 
+            "docs/_build"
+        ], capture_output=True, text=True)
+        
+        # Check if build succeeded and heading is preserved
+        success = result.returncode == 0
+        heading_preserved = False
+        
+        if success:
+            try:
+                with open("docs/_build/index.html", "r") as f:
+                    if directive.split('`')[0].replace(':', '').replace('`', '') in f.read():
+                        heading_preserved = True
+            except FileNotFoundError:
+                pass
+        
+        return success, heading_preserved
+
+# Test various domain directives
+directives_to_test = [
+    (':mod:`mypackage`', '================='),
+    (':func:`myfunction`', '================='),
+    (':class:`MyClass`', '================='),
+    (':meth:`mymethod`', '================='),
+    (':attr:`myattr`', '================='),
+    (':exc:`MyException`', '================='),
+    (':data:`mydata`', '================='),
+    (':const:`MYCONST`', '================='),
+    (':obj:`myobj`', '================='),
+]
+
+print("Testing various domain directives with rst_prolog:")
+print("=" * 60)
+
+all_passed = True
+for directive, content in directives_to_test:
+    success, heading_preserved = test_domain_directive(directive, content)
+    status = "✅ PASS" if success and heading_preserved else "❌ FAIL"
+    print(f"{status}: {directive} -> Build: {success}, Heading preserved: {heading_preserved}")
+    
+    if not (success and heading_preserved):
+        all_passed = False
+
+print("=" * 60)
+if all_passed:
+    print("🎉 ALL TESTS PASSED! The fix works correctly for all domain directives.")
+else:
+    print("⚠️  Some tests failed. The fix may need refinement.")
\ No newline at end of file
diff --git a/test_docinfo_pattern.py b/test_docinfo_pattern.py
new file mode 100644
index 000000000..41feb38fa
--- /dev/null
+++ b/test_docinfo_pattern.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+"""
+Test script to understand the docinfo_re pattern and its behavior
+"""
+
+import re
+
+# New pattern (after fix)
+docinfo_re = re.compile(':(author|title|date|copyright|contact|version|status|organization):.*?')
+
+# Test cases
+test_cases = [
+    ':mod:mypackage2',          # Domain directive heading
+    ':mod:`mypackage2`',        # Domain directive with backticks
+    ':author: Sphinx team',     # Valid docinfo
+    ':title: test',             # Valid docinfo  
+    ':date: 2023',              # Valid docinfo
+    'normal text',              # Regular text
+    '=================',        # Underlining
+    ':unknown: value',          # Unknown field
+]
+
+print("Testing current docinfo_re pattern:")
+for case in test_cases:
+    match = docinfo_re.match(case)
+    print(f"  '{case}' -> {bool(match)}")
+
+print("\nNow let's test what happens when we look at the context...")
+
+# Let's test what happens when we have a domain directive followed by underlining
+content_with_domain = [
+    ':mod:`mypackage2`',
+    '=================',
+    '',
+    'Content'
+]
+
+print("\nTesting content with domain directive:")
+for i, line in enumerate(content_with_domain):
+    match = docinfo_re.match(line)
+    print(f"  Line {i}: '{line}' -> docinfo: {bool(match)}")
+
+# Let's test what happens with actual docinfo
+content_with_docinfo = [
+    ':title: Test Document',
+    ':author: John Doe',
+    ':date: 2023',
+    '',
+    'Content'
+]
+
+print("\nTesting content with docinfo:")
+for i, line in enumerate(content_with_docinfo):
+    match = docinfo_re.match(line)
+    print(f"  Line {i}: '{line}' -> docinfo: {bool(match)}")
\ No newline at end of file
diff --git a/test_docinfo_with_prolog.py b/test_docinfo_with_prolog.py
new file mode 100644
index 000000000..e1f50628b
--- /dev/null
+++ b/test_docinfo_with_prolog.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""
+Test that standard docinfo fields still work correctly with rst_prolog
+"""
+
+import tempfile
+import subprocess
+import os
+
+def test_docinfo_with_prolog():
+    """Test that docinfo fields work correctly with rst_prolog"""
+    with tempfile.TemporaryDirectory() as tmpdir:
+        os.chdir(tmpdir)
+        
+        # Create Sphinx project
+        subprocess.run([
+            "sphinx-quickstart", 
+            "--no-sep", 
+            "--project", "test", 
+            "--author", "test", 
+            "-v", "1.0.0", 
+            "--release", "1.0.0", 
+            "--language", "en", 
+            "docs"
+        ], check=True, capture_output=True)
+        
+        # Create index.rst with docinfo fields
+        with open("docs/index.rst", "w") as f:
+            f.write(':title: Test Document\n:author: John Doe\n:date: 2023\n\nTest\n====\n\n.. toctree::\n\n   testpage\n')
+        
+        # Create testpage.rst
+        with open("docs/testpage.rst", "w") as f:
+            f.write('Test Page\n==========\n\nContent\n')
+        
+        # Add rst_prolog
+        with open("docs/conf.py", "a") as f:
+            f.write('rst_prolog = """\n.. |test| replace:: Test Replacement\n"""\n')
+        
+        # Build documentation
+        result = subprocess.run([
+            "sphinx-build", 
+            "-b", "html", 
+            "docs", 
+            "docs/_build"
+        ], capture_output=True, text=True)
+        
+        # Check if build succeeded
+        success = result.returncode == 0
+        metadata_preserved = False
+        
+        if success:
+            try:
+                with open("docs/_build/index.html", "r") as f:
+                    content = f.read()
+                    # Check if metadata is preserved in some form
+                    if 'Test Document' in content and 'John Doe' in content:
+                        metadata_preserved = True
+            except FileNotFoundError:
+                pass
+        
+        return success, metadata_preserved
+
+print("Testing standard docinfo fields with rst_prolog:")
+print("=" * 50)
+
+success, metadata_preserved = test_docinfo_with_prolog()
+status = "✅ PASS" if success and metadata_preserved else "❌ FAIL"
+print(f"{status}: Build: {success}, Metadata preserved: {metadata_preserved}")
+
+print("=" * 50)
+if success and metadata_preserved:
+    print("🎉 Standard docinfo fields work correctly with rst_prolog!")
+else:
+    print("⚠️  Standard docinfo fields may not be working correctly.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..9fad5241d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the docinfo_re fix
+"""
+
+import re
+
+# New pattern (after fix)
+docinfo_re = re.compile(':(author|title|date|copyright|contact|version|status|organization):.*?')
+
+# Test various domain directives and edge cases
+test_cases = [
+    # Standard docinfo fields (should match)
+    ':author: John Doe',
+    ':title: My Document',
+    ':date: 2023',
+    ':copyright: 2023',
+    ':contact: email@example.com',
+    ':version: 1.0',
+    ':status: draft',
+    ':organization: My Org',
+    
+    # Domain directives (should NOT match)
+    ':mod:mypackage',
+    ':mod:`mypackage`',
+    ':func:myfunction',
+    ':func:`myfunction`',
+    ':class:MyClass',
+    ':class:`MyClass`',
+    ':meth:mymethod',
+    ':meth:`mymethod`',
+    ':attr:myattr',
+    ':attr:`myattr`',
+    ':exc:MyException',
+    ':exc:`MyException`',
+    ':data:mydata',
+    ':data:`mydata`',
+    ':const:MYCONST',
+    ':const:`MYCONST`',
+    ':obj:myobj',
+    ':obj:`myobj`',
+    
+    # Edge cases (should NOT match)
+    ':unknown: value',
+    ':custom: field',
+    '::double::colon',
+    ':notenoughchars:',
+    ':',
+    
+    # Normal text (should NOT match)
+    'normal text',
+    '=================',
+    '-----------',
+]
+
+print("Testing edge cases for docinfo_re pattern:")
+print("=" * 50)
+
+for case in test_cases:
+    match = docinfo_re.match(case)
+    status = "✅ MATCH" if match else "❌ NO MATCH"
+    print(f"{status}: '{case}'")
+
+print("\n" + "=" * 50)
+print("Summary:")
+print("- Standard docinfo fields should match")
+print("- Domain directives should NOT match")  
+print("- Unknown fields should NOT match")
+print("- Normal text should NOT match")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 512aa5f74..84c8093a3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py
index a199e45d40..bf4e59dbeb 100644
--- a/lib/matplotlib/widgets.py
+++ b/lib/matplotlib/widgets.py
@@ -2107,7 +2107,20 @@ class SpanSelector(_SelectorWidget):
 
         if self._interactive:
             self._edge_order = ['min', 'max']
-            self._setup_edge_handle(props)
+            # Set initial extents to a reasonable value within data range to avoid forcing axes limits to include 0
+            if self.direction == 'horizontal':
+                xlim = self.ax.get_xlim()
+                # Use the midpoint of the current data range
+                initial_extents = (xlim[0] + (xlim[1] - xlim[0]) * 0.25, 
+                                  xlim[0] + (xlim[1] - xlim[0]) * 0.75)
+            else:
+                ylim = self.ax.get_ylim()
+                # Use the midpoint of the current data range
+                initial_extents = (ylim[0] + (ylim[1] - ylim[0]) * 0.25, 
+                                  ylim[0] + (ylim[1] - ylim[0]) * 0.75)
+            self._setup_edge_handle(props, initial_extents)
+            # Set extents after handles are created
+            self.extents = initial_extents
 
         self._active_handle = None
 
@@ -2155,8 +2168,10 @@ class SpanSelector(_SelectorWidget):
         else:
             self.artists.append(self._rect)
 
-    def _setup_edge_handle(self, props):
-        self._edge_handles = ToolLineHandles(self.ax, self.extents,
+    def _setup_edge_handle(self, props, initial_extents=None):
+        if initial_extents is None:
+            initial_extents = self.extents
+        self._edge_handles = ToolLineHandles(self.ax, initial_extents,
                                              direction=self.direction,
                                              line_props=props,
                                              useblit=self.useblit)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b70536a139
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Original xlimits: {ax.get_xlim()}")
+ss = SpanSelector(ax, print, "horizontal", interactive=True)
+print(f"After SpanSelector xlimits: {ax.get_xlim()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_axhline.py b/test_axhline.py
new file mode 100644
index 0000000000..7f75315f6c
--- /dev/null
+++ b/test_axhline.py
@@ -0,0 +1,8 @@
+from matplotlib import pyplot as plt
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Before axhline ylimits: {ax.get_ylim()}")
+ax.axhline(15, visible=False)
+print(f"After axhline ylimits: {ax.get_ylim()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_axvline.py b/test_axvline.py
new file mode 100644
index 0000000000..7e9f1fff7e
--- /dev/null
+++ b/test_axvline.py
@@ -0,0 +1,8 @@
+from matplotlib import pyplot as plt
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Before axvline xlimits: {ax.get_xlim()}")
+ax.axvline(15, visible=False)
+print(f"After axvline xlimits: {ax.get_xlim()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_comprehensive_fix.py b/test_comprehensive_fix.py
new file mode 100644
index 0000000000..6978ea7f33
--- /dev/null
+++ b/test_comprehensive_fix.py
@@ -0,0 +1,87 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+def test_original_issue():
+    """Test the exact issue reported in the GitHub issue"""
+    fig, ax = plt.subplots()
+    ax.plot([10, 20], [10, 20])
+    original_xlim = ax.get_xlim()
+    
+    # This should NOT force axes limits to include 0
+    ss = SpanSelector(ax, print, "horizontal", interactive=True)
+    new_xlim = ax.get_xlim()
+    
+    plt.close(fig)
+    
+    # The limits should remain approximately the same (allowing for small floating point differences)
+    assert abs(original_xlim[0] - new_xlim[0]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    assert abs(original_xlim[1] - new_xlim[1]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    print("âœ“ Original issue fixed: axes limits preserved")
+
+def test_vertical_span():
+    """Test that vertical span selectors also work correctly"""
+    fig, ax = plt.subplots()
+    ax.plot([10, 20], [10, 20])
+    original_ylim = ax.get_ylim()
+    
+    ss = SpanSelector(ax, print, "vertical", interactive=True)
+    new_ylim = ax.get_ylim()
+    
+    plt.close(fig)
+    
+    assert abs(original_ylim[0] - new_ylim[0]) < 1e-10, f"Y limits changed from {original_ylim} to {new_ylim}"
+    assert abs(original_ylim[1] - new_ylim[1]) < 1e-10, f"Y limits changed from {original_ylim} to {new_ylim}"
+    print("âœ“ Vertical span selector works correctly")
+
+def test_non_interactive():
+    """Test that non-interactive mode still works"""
+    fig, ax = plt.subplots()
+    ax.plot([10, 20], [10, 20])
+    original_xlim = ax.get_xlim()
+    
+    ss = SpanSelector(ax, print, "horizontal", interactive=False)
+    new_xlim = ax.get_xlim()
+    
+    plt.close(fig)
+    
+    assert abs(original_xlim[0] - new_xlim[0]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    assert abs(original_xlim[1] - new_xlim[1]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    print("âœ“ Non-interactive mode works correctly")
+
+def test_with_zero_data():
+    """Test with data that already includes 0"""
+    fig, ax = plt.subplots()
+    ax.plot([-5, 5], [-5, 5])
+    original_xlim = ax.get_xlim()
+    
+    ss = SpanSelector(ax, print, "horizontal", interactive=True)
+    new_xlim = ax.get_xlim()
+    
+    plt.close(fig)
+    
+    assert abs(original_xlim[0] - new_xlim[0]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    assert abs(original_xlim[1] - new_xlim[1]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    print("âœ“ Data including 0 works correctly")
+
+def test_negative_data():
+    """Test with negative data that doesn't include 0"""
+    fig, ax = plt.subplots()
+    ax.plot([-20, -10], [-20, -10])
+    original_xlim = ax.get_xlim()
+    
+    ss = SpanSelector(ax, print, "horizontal", interactive=True)
+    new_xlim = ax.get_xlim()
+    
+    plt.close(fig)
+    
+    assert abs(original_xlim[0] - new_xlim[0]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    assert abs(original_xlim[1] - new_xlim[1]) < 1e-10, f"X limits changed from {original_xlim} to {new_xlim}"
+    print("âœ“ Negative data works correctly")
+
+if __name__ == "__main__":
+    test_original_issue()
+    test_vertical_span()
+    test_non_interactive()
+    test_with_zero_data()
+    test_negative_data()
+    print("\nðŸŽ‰ All tests passed! The interactive SpanSelector issue has been fixed.")
\ No newline at end of file
diff --git a/test_extents_value.py b/test_extents_value.py
new file mode 100644
index 0000000000..a12169f39e
--- /dev/null
+++ b/test_extents_value.py
@@ -0,0 +1,29 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Before SpanSelector creation xlimits: {ax.get_xlim()}")
+
+# Create SpanSelector but don't show it
+ss = SpanSelector.__new__(SpanSelector)
+ss._interactive = True
+ss._rectprops = {'facecolor': 'red', 'alpha': 0.5}
+ss.direction = 'horizontal'
+ss.useblit = False
+ss.ax = ax
+ss.canvas = None
+ss.artists = []
+ss._rect = None
+
+# Initialize the parent class
+from matplotlib.widgets import _SelectorWidget
+_SelectorWidget.__init__(ss, ax, print, useblit=False)
+
+# Set up the rectangle
+ss.new_axes(ax)
+
+# Check what extents returns
+print(f"extents value: {ss.extents}")
+
+plt.close(fig)
\ No newline at end of file
diff --git a/test_fix_approach.py b/test_fix_approach.py
new file mode 100644
index 0000000000..339a1ffeab
--- /dev/null
+++ b/test_fix_approach.py
@@ -0,0 +1,12 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Before SpanSelector creation xlimits: {ax.get_xlim()}")
+
+# Create SpanSelector but don't show it
+ss = SpanSelector(ax, print, "horizontal", interactive=False)
+print(f"After non-interactive SpanSelector xlimits: {ax.get_xlim()}")
+
+plt.close(fig)
\ No newline at end of file
diff --git a/test_negative.py b/test_negative.py
new file mode 100644
index 0000000000..878e4bf406
--- /dev/null
+++ b/test_negative.py
@@ -0,0 +1,9 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([-20, -10], [-20, -10])
+print(f"Original xlimits: {ax.get_xlim()}")
+ss = SpanSelector(ax, print, "horizontal", interactive=True)
+print(f"After SpanSelector xlimits: {ax.get_xlim()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_non_interactive.py b/test_non_interactive.py
new file mode 100644
index 0000000000..23d1a24880
--- /dev/null
+++ b/test_non_interactive.py
@@ -0,0 +1,9 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Original xlimits: {ax.get_xlim()}")
+ss = SpanSelector(ax, print, "horizontal", interactive=False)
+print(f"After non-interactive SpanSelector xlimits: {ax.get_xlim()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_span_selector_creation.py b/test_span_selector_creation.py
new file mode 100644
index 0000000000..d7c97b91f8
--- /dev/null
+++ b/test_span_selector_creation.py
@@ -0,0 +1,12 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Before SpanSelector creation xlimits: {ax.get_xlim()}")
+
+# Create SpanSelector but don't show it
+ss = SpanSelector(ax, print, "horizontal", interactive=True)
+print(f"After SpanSelector creation xlimits: {ax.get_xlim()}")
+
+plt.close(fig)
\ No newline at end of file
diff --git a/test_span_selector_step_by_step.py b/test_span_selector_step_by_step.py
new file mode 100644
index 0000000000..0ed523b360
--- /dev/null
+++ b/test_span_selector_step_by_step.py
@@ -0,0 +1,29 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"After plot xlimits: {ax.get_xlim()}")
+
+# Test step by step what happens during SpanSelector initialization
+print("\n--- Testing new_axes method ---")
+ss = SpanSelector.__new__(SpanSelector)
+ss._interactive = True
+ss._rectprops = {'facecolor': 'red', 'alpha': 0.5}
+ss.direction = 'horizontal'
+ss.useblit = False
+ss.ax = ax
+ss.canvas = None
+ss.artists = []
+
+print(f"Before new_axes xlimits: {ax.get_xlim()}")
+ss.new_axes(ax)
+print(f"After new_axes xlimits: {ax.get_xlim()}")
+
+print("\n--- Testing _setup_edge_handle method ---")
+print(f"Before _setup_edge_handle xlimits: {ax.get_xlim()}")
+props = {'color': 'red'}
+ss._setup_edge_handle(props)
+print(f"After _setup_edge_handle xlimits: {ax.get_xlim()}")
+
+plt.close(fig)
\ No newline at end of file
diff --git a/test_tool_line_handles.py b/test_tool_line_handles.py
new file mode 100644
index 0000000000..daf12c3b6f
--- /dev/null
+++ b/test_tool_line_handles.py
@@ -0,0 +1,9 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import ToolLineHandles
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Before ToolLineHandles xlimits: {ax.get_xlim()}")
+handles = ToolLineHandles(ax, (15, 16), "horizontal", line_props={'visible': False})
+print(f"After ToolLineHandles xlimits: {ax.get_xlim()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_vertical_span.py b/test_vertical_span.py
new file mode 100644
index 0000000000..05298dfee2
--- /dev/null
+++ b/test_vertical_span.py
@@ -0,0 +1,9 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+print(f"Original ylimits: {ax.get_ylim()}")
+ss = SpanSelector(ax, print, "vertical", interactive=True)
+print(f"After SpanSelector ylimits: {ax.get_ylim()}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_with_zero.py b/test_with_zero.py
new file mode 100644
index 0000000000..693130f1e0
--- /dev/null
+++ b/test_with_zero.py
@@ -0,0 +1,9 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([-5, 5], [-5, 5])
+print(f"Original xlimits: {ax.get_xlim()}")
+ss = SpanSelector(ax, print, "horizontal", interactive=True)
+print(f"After SpanSelector xlimits: {ax.get_xlim()}")
+plt.close(fig)
\ No newline at end of file
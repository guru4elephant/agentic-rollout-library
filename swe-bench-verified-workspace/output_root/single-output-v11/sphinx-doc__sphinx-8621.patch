diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py
index c91da57e9..3f2d45ab5 100644
--- a/sphinx/builders/html/transforms.py
+++ b/sphinx/builders/html/transforms.py
@@ -42,21 +42,71 @@ class KeyboardTransform(SphinxPostTransform):
     def run(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, classes=["kbd"])
         for node in self.document.traverse(matcher):  # type: nodes.literal
-            parts = self.pattern.split(node[-1].astext())
-            if len(parts) == 1:
+            text = node[-1].astext()
+            
+            # Check if this is a simple case (no separators)
+            # Single characters should still be processed to handle cases like '-' and '+'
+            if not any(sep in text for sep in ('-', '+', '^', ' ')):
                 continue
-
+                
+            # Use a more sophisticated approach to handle separators
+            # Split on separators, but be careful with single character keystrokes
+            # that contain separator characters
+            parts = []
+            current_part = []
+            separators = ['-', '+', '^', ' ']
+            
+            for char in text:
+                if char in separators:
+                    # If we have a current part, add it
+                    if current_part:
+                        parts.append(''.join(current_part))
+                        current_part = []
+                    # Add the separator as a separate part
+                    parts.append(char)
+                else:
+                    current_part.append(char)
+            
+            # Add any remaining part
+            if current_part:
+                parts.append(''.join(current_part))
+            
+            # Now process the parts, being careful not to create empty kbd elements
+            # and to handle single-character separator keystrokes properly
             node.pop()
-            while parts:
-                key = parts.pop(0)
-                node += nodes.literal('', key, classes=["kbd"])
-
-                try:
-                    # key separator (ex. -, +, ^)
-                    sep = parts.pop(0)
-                    node += nodes.Text(sep)
-                except IndexError:
-                    pass
+            
+            i = 0
+            while i < len(parts):
+                part = parts[i]
+                
+                if part in separators:
+                    # Check if this is a standalone separator (single character)
+                    # or part of a compound keystroke
+                    if len(parts) == 1:
+                        # Single character like '-' or '+', treat as content
+                        node += nodes.literal('', part, classes=["kbd"])
+                    elif i == 0 or i == len(parts) - 1:
+                        # Separator at beginning or end, treat as content
+                        node += nodes.literal('', part, classes=["kbd"])
+                    else:
+                        # Separator in the middle, treat as actual separator
+                        node += nodes.Text(part)
+                    i += 1
+                else:
+                    # Regular keystroke
+                    node += nodes.literal('', part, classes=["kbd"])
+                    i += 1
+                    
+                    # Check if next part is a separator and add it appropriately
+                    if i < len(parts) and parts[i] in separators:
+                        # Check if this separator should be treated as content or separator
+                        if i == len(parts) - 1:
+                            # Separator at end, treat as content
+                            node += nodes.literal('', parts[i], classes=["kbd"])
+                        else:
+                            # Separator in middle, treat as actual separator
+                            node += nodes.Text(parts[i])
+                        i += 1
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
diff --git a/tox.ini b/tox.ini
index 21a0faec3..be1a9127e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
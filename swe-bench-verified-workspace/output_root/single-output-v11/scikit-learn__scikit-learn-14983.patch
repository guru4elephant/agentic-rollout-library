diff --git a/debug_params.py b/debug_params.py
new file mode 100644
index 000000000..6dc37bdd5
--- /dev/null
+++ b/debug_params.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold
+
+# Test what parameters are accessible
+rkf = RepeatedKFold(n_splits=3, n_repeats=5, random_state=42)
+rskf = RepeatedStratifiedKFold(n_splits=4, n_repeats=7, random_state=123)
+
+print("RepeatedKFold attributes:")
+print(f"n_repeats: {rkf.n_repeats}")
+print(f"random_state: {rkf.random_state}")
+print(f"cvargs: {rkf.cvargs}")
+print(f"cv: {rkf.cv}")
+print()
+
+print("RepeatedStratifiedKFold attributes:")
+print(f"n_repeats: {rskf.n_repeats}")
+print(f"random_state: {rskf.random_state}")
+print(f"cvargs: {rskf.cvargs}")
+print(f"cv: {rskf.cv}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..13c28abb8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold
+
+# Test the current behavior
+print("Current RepeatedKFold repr:")
+rkf = RepeatedKFold()
+print(repr(rkf))
+print()
+
+print("Current RepeatedStratifiedKFold repr:")
+rskf = RepeatedStratifiedKFold()
+print(repr(rskf))
+print()
+
+# Test with different parameters
+print("RepeatedKFold with custom parameters:")
+rkf_custom = RepeatedKFold(n_splits=3, n_repeats=5, random_state=42)
+print(repr(rkf_custom))
+print()
+
+print("RepeatedStratifiedKFold with custom parameters:")
+rskf_custom = RepeatedStratifiedKFold(n_splits=4, n_repeats=7, random_state=123)
+print(repr(rskf_custom))
\ No newline at end of file
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index c49a3ce6a..a7e7e26de 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -1216,6 +1216,9 @@ class RepeatedKFold(_RepeatedSplits):
         super().__init__(
             KFold, n_repeats, random_state, n_splits=n_splits)
 
+    def __repr__(self):
+        return _build_repr(self)
+
 
 class RepeatedStratifiedKFold(_RepeatedSplits):
     """Repeated Stratified K-Fold cross validator.
@@ -1269,6 +1272,9 @@ class RepeatedStratifiedKFold(_RepeatedSplits):
         super().__init__(
             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)
 
+    def __repr__(self):
+        return _build_repr(self)
+
 
 class BaseShuffleSplit(metaclass=ABCMeta):
     """Base class for ShuffleSplit and StratifiedShuffleSplit"""
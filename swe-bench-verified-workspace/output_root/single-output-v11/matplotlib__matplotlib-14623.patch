diff --git a/check_axis_methods.py b/check_axis_methods.py
new file mode 100644
index 0000000000..e0200f41e8
--- /dev/null
+++ b/check_axis_methods.py
@@ -0,0 +1,13 @@
+import matplotlib.pyplot as plt
+
+fig, ax = plt.subplots()
+ax.plot([1, 2, 3], [1, 2, 3])
+ax.set_yscale('log')
+
+# Check what methods are available on the axis
+locator = ax.yaxis.get_major_locator()
+print("Axis methods:", [method for method in dir(locator.axis) if 'invert' in method.lower()])
+print("Has get_inverted:", hasattr(locator.axis, 'get_inverted'))
+print("Has _get_inverted:", hasattr(locator.axis, '_get_inverted'))
+
+plt.close('all')
\ No newline at end of file
diff --git a/debug_flow.py b/debug_flow.py
new file mode 100644
index 0000000000..e3f45c2150
--- /dev/null
+++ b/debug_flow.py
@@ -0,0 +1,33 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Monkey patch to add debug prints
+original_set_ylim = plt.Axes.set_ylim
+
+def debug_set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):
+    print(f"set_ylim called with: bottom={bottom}, top={top}")
+    old_bottom, old_top = self.get_ylim()
+    print(f"Current limits: {old_bottom}, {old_top}")
+    print(f"yscale: {self.get_yscale()}")
+    
+    result = original_set_ylim(self, bottom, top, emit, auto, ymin=ymin, ymax=ymax)
+    
+    new_bottom, new_top = self.get_ylim()
+    print(f"New limits: {new_bottom}, {new_top}")
+    print(f"Inverted: {self.yaxis_inverted()}")
+    print("---")
+    
+    return result
+
+plt.Axes.set_ylim = debug_set_ylim
+
+# Test the issue
+y = np.linspace(1000e2, 1, 100)
+x = np.exp(-np.linspace(0, 1, y.size))
+
+fig, ax = plt.subplots()
+ax.plot(x, y)
+ax.set_yscale('log')
+ax.set_ylim(y.max(), y.min())
+
+plt.close('all')
\ No newline at end of file
diff --git a/debug_inversion.py b/debug_inversion.py
new file mode 100644
index 0000000000..fd5ac3e907
--- /dev/null
+++ b/debug_inversion.py
@@ -0,0 +1,18 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+y = np.linspace(1000e2, 1, 100)
+x = np.exp(-np.linspace(0, 1, y.size))
+
+print(f"y.min() = {y.min()}, y.max() = {y.max()}")
+
+# Test log scale inversion  
+fig, ax = plt.subplots()
+ax.plot(x, y)
+ax.set_yscale('log')
+print(f"Before set_ylim: {ax.get_ylim()}")
+ax.set_ylim(y.max(), y.min())  # This should work but currently doesn't
+print(f"After set_ylim: {ax.get_ylim()}")
+print(f"Log scale inverted: {ax.yaxis_inverted()}")
+
+plt.close('all')
\ No newline at end of file
diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index da2dea6f57..0e5cd7f6a3 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -3644,8 +3644,16 @@ class _AxesBase(martist.Artist):
                 f"Attempting to set identical bottom == top == {bottom} "
                 f"results in singular transformations; automatically "
                 f"expanding.")
+        
+        # For log scale, preserve inversion intent by checking original order
+        original_bottom, original_top = bottom, top
         bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
         bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
+        
+        # If we wanted inversion and the locator normalized it, restore inversion
+        if (self.get_yscale() == 'log' and original_bottom > original_top and 
+            bottom < top):
+            bottom, top = top, bottom
 
         self.viewLim.intervaly = (bottom, top)
         if auto is not None:
diff --git a/linear_scale.png b/linear_scale.png
new file mode 100644
index 0000000000..76f2deee55
Binary files /dev/null and b/linear_scale.png differ
diff --git a/log_scale.png b/log_scale.png
new file mode 100644
index 0000000000..715b95f849
Binary files /dev/null and b/log_scale.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5cda4b193e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+y = np.linspace(1000e2, 1, 100)
+x = np.exp(-np.linspace(0, 1, y.size))
+
+for yscale in ('linear', 'log'):
+    fig, ax = plt.subplots()
+    ax.plot(x, y)
+    ax.set_yscale(yscale)
+    ax.set_ylim(y.max(), y.min())
+    plt.savefig(f'{yscale}_scale.png')
+    plt.close(fig)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4582f9a2c9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test 1: Normal log scale (not inverted)
+fig, ax = plt.subplots()
+ax.plot([1, 2, 3], [10, 100, 1000])
+ax.set_yscale('log')
+ax.set_ylim(1, 1000)  # Normal order
+print(f"Test 1 - Normal log scale inverted: {ax.yaxis_inverted()}")
+
+# Test 2: Inverted log scale
+fig, ax = plt.subplots()
+ax.plot([1, 2, 3], [10, 100, 1000])
+ax.set_yscale('log')
+ax.set_ylim(1000, 1)  # Inverted order
+print(f"Test 2 - Inverted log scale inverted: {ax.yaxis_inverted()}")
+
+# Test 3: Normal linear scale
+fig, ax = plt.subplots()
+ax.plot([1, 2, 3], [10, 100, 1000])
+ax.set_yscale('linear')
+ax.set_ylim(1, 1000)  # Normal order
+print(f"Test 3 - Normal linear scale inverted: {ax.yaxis_inverted()}")
+
+# Test 4: Inverted linear scale
+fig, ax = plt.subplots()
+ax.plot([1, 2, 3], [10, 100, 1000])
+ax.set_yscale('linear')
+ax.set_ylim(1000, 1)  # Inverted order
+print(f"Test 4 - Inverted linear scale inverted: {ax.yaxis_inverted()}")
+
+# Test 5: Invalid negative limits for log scale
+fig, ax = plt.subplots()
+ax.plot([1, 2, 3], [10, 100, 1000])
+ax.set_yscale('log')
+try:
+    ax.set_ylim(-10, 100)  # Negative limit
+    print(f"Test 5 - Negative limit handled: {ax.get_ylim()}")
+except Exception as e:
+    print(f"Test 5 - Negative limit error: {e}")
+
+plt.close('all')
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..38771030a7
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,37 @@
+"""
+Test for the GitHub issue: Inverting an axis using its limits does not work for log scale
+"""
+import numpy as np
+import matplotlib.pyplot as plt
+
+def test_log_scale_inversion():
+    """Test that log scale axes can be inverted using set_ylim"""
+    y = np.linspace(1000e2, 1, 100)
+    x = np.exp(-np.linspace(0, 1, y.size))
+    
+    # Test linear scale inversion (should work)
+    fig, ax = plt.subplots()
+    ax.plot(x, y)
+    ax.set_yscale('linear')
+    ax.set_ylim(y.max(), y.min())
+    linear_inverted = ax.yaxis_inverted()
+    plt.close(fig)
+    
+    # Test log scale inversion (was broken, should now work)
+    fig, ax = plt.subplots()
+    ax.plot(x, y)
+    ax.set_yscale('log')
+    ax.set_ylim(y.max(), y.min())
+    log_inverted = ax.yaxis_inverted()
+    plt.close(fig)
+    
+    # Both should be inverted
+    assert linear_inverted, "Linear scale should be inverted"
+    assert log_inverted, "Log scale should be inverted (this was the bug)"
+    
+    print("✓ Linear scale inversion:", linear_inverted)
+    print("✓ Log scale inversion:", log_inverted)
+    print("✓ Test passed: Log scale inversion now works correctly!")
+
+if __name__ == "__main__":
+    test_log_scale_inversion()
\ No newline at end of file
diff --git a/test_inversion.py b/test_inversion.py
new file mode 100644
index 0000000000..eb4bbddb7a
--- /dev/null
+++ b/test_inversion.py
@@ -0,0 +1,21 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+y = np.linspace(1000e2, 1, 100)
+x = np.exp(-np.linspace(0, 1, y.size))
+
+# Test linear scale inversion
+fig, ax = plt.subplots()
+ax.plot(x, y)
+ax.set_yscale('linear')
+ax.set_ylim(y.max(), y.min())  # This should work
+print(f"Linear scale inverted: {ax.yaxis_inverted()}")
+
+# Test log scale inversion  
+fig, ax = plt.subplots()
+ax.plot(x, y)
+ax.set_yscale('log')
+ax.set_ylim(y.max(), y.min())  # This should work but currently doesn't
+print(f"Log scale inverted: {ax.yaxis_inverted()}")
+
+plt.close('all')
\ No newline at end of file
diff --git a/before_fix.png b/before_fix.png
new file mode 100644
index 0000000000..5335f7ae64
Binary files /dev/null and b/before_fix.png differ
diff --git a/circle_test.png b/circle_test.png
new file mode 100644
index 0000000000..b796e746dc
Binary files /dev/null and b/circle_test.png differ
diff --git a/comparison_test.png b/comparison_test.png
new file mode 100644
index 0000000000..a451b7fedf
Binary files /dev/null and b/comparison_test.png differ
diff --git a/ellipse_test.png b/ellipse_test.png
new file mode 100644
index 0000000000..b796e746dc
Binary files /dev/null and b/ellipse_test.png differ
diff --git a/final_comparison_test.py b/final_comparison_test.py
new file mode 100644
index 0000000000..62ddb4337d
--- /dev/null
+++ b/final_comparison_test.py
@@ -0,0 +1,48 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+import numpy as np
+
+def main():
+    """Compare patch objects with Line2D objects to show they now behave the same way."""
+    
+    # Create a figure with two subplots
+    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
+    
+    # Subplot 1: Patch objects (should now work correctly)
+    ax1.set_title('Patch Objects (Rectangle)')
+    
+    # Add two rectangles with different offsets but same dash pattern
+    rect1 = mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor='r', linewidth=4, ls=(0,(10,10)))
+    rect2 = mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor='b', linewidth=4, ls=(10,(10,10)))
+    
+    ax1.add_patch(rect1)
+    ax1.add_patch(rect2)
+    
+    ax1.set_ylim([0,2])
+    ax1.set_xlim([0,2])
+    
+    # Subplot 2: Line2D objects (reference - should work the same way)
+    ax2.set_title('Line2D Objects (Reference)')
+    
+    x = np.linspace(0, np.pi*4, 100)
+    y = np.sin(x+np.pi/2)
+    
+    ax2.plot(x, y, ls=(0, (10, 10)), color='b', linewidth=4)
+    ax2.plot(x, y, ls=(10, (10, 10)), color='r', linewidth=4)
+    
+    ax2.set_ylim([-1.5,1.5])
+    ax2.set_xlim([0,13])
+    
+    plt.tight_layout()
+    plt.savefig('comparison_test.png')
+    
+    # Print the dash patterns to verify they're different
+    print("Patch Objects:")
+    print(f"  Rectangle 1: offset={rect1._dash_pattern[0]}, dashes={rect1._dash_pattern[1]}")
+    print(f"  Rectangle 2: offset={rect2._dash_pattern[0]}, dashes={rect2._dash_pattern[1]}")
+    
+    print("\nThe offset dash linestyle issue has been fixed!")
+    print("Patch objects now properly respect the offset parameter in dash patterns.")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/github_issue_fixed.png b/github_issue_fixed.png
new file mode 100644
index 0000000000..5335f7ae64
Binary files /dev/null and b/github_issue_fixed.png differ
diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py
index e062249589..0c893aac3a 100644
--- a/lib/matplotlib/patches.py
+++ b/lib/matplotlib/patches.py
@@ -586,10 +586,7 @@ class Patch(artist.Artist):
         # docstring inherited
         if not self.get_visible():
             return
-        # Patch has traditionally ignored the dashoffset.
-        with cbook._setattr_cm(
-                 self, _dash_pattern=(0, self._dash_pattern[1])), \
-             self._bind_draw_path_function(renderer) as draw_path:
+        with self._bind_draw_path_function(renderer) as draw_path:
             path = self.get_path()
             transform = self.get_transform()
             tpath = transform.transform_path_non_affine(path)
diff --git a/line2d_test.png b/line2d_test.png
new file mode 100644
index 0000000000..aef6b5c17c
Binary files /dev/null and b/line2d_test.png differ
diff --git a/offset_test_circle.png b/offset_test_circle.png
new file mode 100644
index 0000000000..b796e746dc
Binary files /dev/null and b/offset_test_circle.png differ
diff --git a/offset_test_ellipse.png b/offset_test_ellipse.png
new file mode 100644
index 0000000000..b796e746dc
Binary files /dev/null and b/offset_test_ellipse.png differ
diff --git a/offset_test_rectangle.png b/offset_test_rectangle.png
new file mode 100644
index 0000000000..5335f7ae64
Binary files /dev/null and b/offset_test_rectangle.png differ
diff --git a/rectangle_test.png b/rectangle_test.png
new file mode 100644
index 0000000000..5335f7ae64
Binary files /dev/null and b/rectangle_test.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..030a00c458
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,11 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('before_fix.png')
+print("Created reproduction script")
\ No newline at end of file
diff --git a/test_offset_fix.py b/test_offset_fix.py
new file mode 100644
index 0000000000..129f0818f1
--- /dev/null
+++ b/test_offset_fix.py
@@ -0,0 +1,93 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+import numpy as np
+
+def test_offset_dash_linestyle():
+    """Test that offset dash linestyle works correctly for patch objects."""
+    
+    # Test with Rectangle
+    plt.figure(figsize=(10,10))
+    ax = plt.gca()
+    
+    # Add two rectangles with different offsets but same dash pattern
+    rect1 = mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor='r', linewidth=4, ls=(0,(10,10)))
+    rect2 = mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor='b', linewidth=4, ls=(10,(10,10)))
+    
+    ax.add_patch(rect1)
+    ax.add_patch(rect2)
+    
+    plt.ylim([0,2])
+    plt.xlim([0,2])
+    plt.savefig('offset_test_rectangle.png')
+    
+    # Verify that the dash patterns are different
+    dash1 = rect1._dash_pattern
+    dash2 = rect2._dash_pattern
+    
+    print(f"Rectangle 1 dash pattern: {dash1}")
+    print(f"Rectangle 2 dash pattern: {dash2}")
+    
+    # The offsets should be different (0 vs 40) - scaled by linewidth 4
+    assert dash1[0] == 0, f"Expected offset 0, got {dash1[0]}"
+    assert dash2[0] == 40, f"Expected offset 40, got {dash2[0]}"
+    
+    print("✓ Rectangle offset test passed")
+    
+    # Test with Ellipse
+    plt.figure(figsize=(10,10))
+    ax = plt.gca()
+    
+    ellipse1 = mpl.patches.Ellipse((1,1),1,1, alpha=0.5, edgecolor='r', linewidth=4, ls=(0,(10,10)))
+    ellipse2 = mpl.patches.Ellipse((1,1),1,1, alpha=0.5, edgecolor='b', linewidth=4, ls=(10,(10,10)))
+    
+    ax.add_patch(ellipse1)
+    ax.add_patch(ellipse2)
+    
+    plt.ylim([0,2])
+    plt.xlim([0,2])
+    plt.savefig('offset_test_ellipse.png')
+    
+    # Verify that the dash patterns are different
+    dash1 = ellipse1._dash_pattern
+    dash2 = ellipse2._dash_pattern
+    
+    print(f"Ellipse 1 dash pattern: {dash1}")
+    print(f"Ellipse 2 dash pattern: {dash2}")
+    
+    # The offsets should be different (0 vs 40) - scaled by linewidth 4
+    assert dash1[0] == 0, f"Expected offset 0, got {dash1[0]}"
+    assert dash2[0] == 40, f"Expected offset 40, got {dash2[0]}"
+    
+    print("✓ Ellipse offset test passed")
+    
+    # Test with Circle
+    plt.figure(figsize=(10,10))
+    ax = plt.gca()
+    
+    circle1 = mpl.patches.Circle((1,1),0.5, alpha=0.5, edgecolor='r',linewidth=4, ls=(0,(10,10)))
+    circle2 = mpl.patches.Circle((1,1),0.5, alpha=0.5, edgecolor='b',linewidth=4, ls=(10,(10,10)))
+    
+    ax.add_patch(circle1)
+    ax.add_patch(circle2)
+    
+    plt.ylim([0,2])
+    plt.xlim([0,2])
+    plt.savefig('offset_test_circle.png')
+    
+    # Verify that the dash patterns are different
+    dash1 = circle1._dash_pattern
+    dash2 = circle2._dash_pattern
+    
+    print(f"Circle 1 dash pattern: {dash1}")
+    print(f"Circle 2 dash pattern: {dash2}")
+    
+    # The offsets should be different (0 vs 40) - scaled by linewidth 4
+    assert dash1[0] == 0, f"Expected offset 0, got {dash1[0]}"
+    assert dash2[0] == 40, f"Expected offset 40, got {dash2[0]}"
+    
+    print("✓ Circle offset test passed")
+    
+    print("All offset dash linestyle tests passed!")
+
+if __name__ == "__main__":
+    test_offset_dash_linestyle()
\ No newline at end of file
diff --git a/test_patch_offset.py b/test_patch_offset.py
new file mode 100644
index 0000000000..874984f60c
--- /dev/null
+++ b/test_patch_offset.py
@@ -0,0 +1,45 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+import numpy as np
+
+# Test Rectangle patch
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('rectangle_test.png')
+print("Rectangle test completed")
+
+# Test Ellipse patch
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Ellipse((1,1),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Ellipse((1,1),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('ellipse_test.png')
+print("Ellipse test completed")
+
+# Test Circle patch
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Circle((1,1),0.5, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Circle((1,1),0.5, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('circle_test.png')
+print("Circle test completed")
+
+# Compare with Line2D (should work the same way)
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+x = np.linspace(0, np.pi*4, 100)
+y = np.sin(x+np.pi/2)
+plt.plot(x, y, ls=(0, (10, 10)), color='b', linewidth=4)
+plt.plot(x, y, ls=(10, (10, 10)), color='r', linewidth=4)
+plt.savefig('line2d_test.png')
+print("Line2D test completed")
+
+print("All tests completed")
\ No newline at end of file
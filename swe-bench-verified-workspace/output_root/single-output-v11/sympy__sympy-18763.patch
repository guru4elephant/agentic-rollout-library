diff --git a/check_precedence.py b/check_precedence.py
new file mode 100644
index 0000000000..bb6865a87d
--- /dev/null
+++ b/check_precedence.py
@@ -0,0 +1,19 @@
+#!/usr/bin/env python3
+
+from sympy.abc import x, y
+from sympy.printing.precedence import precedence_traditional
+
+# Check precedence of different expressions
+print("Precedence of x:", precedence_traditional(x))
+print("Precedence of x + y:", precedence_traditional(x + y))
+print("Precedence of x - y:", precedence_traditional(x - y))
+print("Precedence of x * y:", precedence_traditional(x * y))
+print("Precedence of x / y:", precedence_traditional(x / y))
+print("Precedence of x ** y:", precedence_traditional(x ** y))
+
+# Check PRECEDENCE values
+from sympy.printing.precedence import PRECEDENCE
+print("\nPRECEDENCE values:")
+print("Add:", PRECEDENCE["Add"])
+print("Mul:", PRECEDENCE["Mul"])
+print("Pow:", PRECEDENCE["Pow"])
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..b9b0820c84
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y, z
+from sympy.printing.latex import latex
+
+# Test the original issue
+print("Original issue test:")
+subs_expr = 3*Subs(-x+y, (x,),(1,))
+latex_output = latex(subs_expr)
+expected = r'3 \left. \left(- x + y\right) \right|_{\substack{ x=1 }}'
+print("Output:", latex_output)
+print("Expected:", expected)
+print("Matches:", latex_output == expected)
+print()
+
+# Test that multiplication expressions are NOT parenthesized (they shouldn't be)
+print("Multiplication test (should NOT be parenthesized):")
+subs_mul = Subs(x*y, (x,), (1,))
+latex_mul = latex(subs_mul)
+print("Output:", latex_mul)
+print("Contains parentheses?:", "\\left(" in latex_mul and "\\right)" in latex_mul)
+print()
+
+# Test that addition expressions ARE parenthesized (they should be)
+print("Addition test (should be parenthesized):")
+subs_add = Subs(x+y, (x,), (1,))
+latex_add = latex(subs_add)
+print("Output:", latex_add)
+print("Contains parentheses?:", "\\left(" in latex_add and "\\right)" in latex_add)
+print()
+
+# Test the existing test case from the test suite
+print("Existing test case from test suite:")
+subs_test = Subs(x*y, (x, y), (1, 2))
+latex_test = latex(subs_test)
+expected_test = r'\left. x y \right|_{\substack{ x=1\\ y=2 }}'
+print("Output:", latex_test)
+print("Expected:", expected_test)
+print("Matches:", latex_test == expected_test)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..afcc1c5e9b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y
+from sympy.printing.latex import latex
+
+# Create the example from the issue
+subs_expr = 3*Subs(-x+y, (x,),(1,))
+
+# Print the LaTeX representation
+latex_output = latex(subs_expr)
+print("LaTeX output:")
+print(latex_output)
+
+# Expected output (with parentheses around -x+y)
+expected = r'3 \left. \left(- x + y\right) \right|_{\substack{ x=1 }}'
+print("\nExpected output:")
+print(expected)
+
+print("\nCurrent output matches expected:", latex_output == expected)
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8743723ea0..969072f47f 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -698,7 +698,7 @@ def _print_Derivative(self, expr):
 
     def _print_Subs(self, subs):
         expr, old, new = subs.args
-        latex_expr = self._print(expr)
+        latex_expr = self.parenthesize(expr, PRECEDENCE["Mul"], strict=True)
         latex_old = (self._print(e) for e in old)
         latex_new = (self._print(e) for e in new)
         latex_subs = r'\\ '.join(
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..2a69b21499
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y, z
+from sympy.printing.latex import latex
+
+# Test various expression types to ensure correct parenthesization
+test_cases = [
+    # (expression, variables, points, expected_pattern)
+    (x, (x,), (1,), r"x"),  # Simple symbol - no parentheses
+    (x + y, (x,), (1,), r"\\left\(x \+ y\\right\)"),  # Addition - parentheses
+    (x - y, (x,), (1,), r"\\left\(x - y\\right\)"),  # Subtraction - parentheses  
+    (x * y, (x,), (1,), r"x y"),  # Multiplication - no parentheses
+    (x / y, (x,), (1,), r"\\frac{x}{y}"),  # Division - no parentheses (fraction)
+    (x ** y, (x,), (1,), r"x^{y}"),  # Power - no parentheses
+    (x + y + z, (x, y), (1, 2), r"\\left\(x \+ y \+ z\\right\)"),  # Multiple addition - parentheses
+    (x * y * z, (x, y), (1, 2), r"x y z"),  # Multiple multiplication - no parentheses
+]
+
+print("Comprehensive test of Subs LaTeX printing:")
+for i, (expr, vars, points, expected_pattern) in enumerate(test_cases, 1):
+    subs_expr = Subs(expr, vars, points)
+    latex_output = latex(subs_expr)
+    print(f"Test {i}: {expr}")
+    print(f"  LaTeX: {latex_output}")
+    print(f"  Expected pattern: {expected_pattern}")
+    print(f"  Pattern matches: {expected_pattern in latex_output}")
+    print()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..9171dbe9d0
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+from sympy import Subs
+from sympy.abc import x, y, z
+from sympy.printing.latex import latex
+
+# Test case 1: Simple expression that doesn't need parentheses
+subs1 = Subs(x, (x,), (1,))
+print("Test 1 - Simple expression:")
+print("LaTeX:", latex(subs1))
+print("Expected: \\left. x \\right|_{\\substack{ x=1 }}")
+print()
+
+# Test case 2: Expression that needs parentheses (addition)
+subs2 = Subs(x + y, (x,), (1,))
+print("Test 2 - Addition expression:")
+print("LaTeX:", latex(subs2))
+print("Expected: \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}")
+print()
+
+# Test case 3: Expression that needs parentheses (subtraction)
+subs3 = Subs(x - y, (x,), (1,))
+print("Test 3 - Subtraction expression:")
+print("LaTeX:", latex(subs3))
+print("Expected: \\left. \\left(x - y\\right) \\right|_{\\substack{ x=1 }}")
+print()
+
+# Test case 4: Multiplication (should not need parentheses)
+subs4 = Subs(x * y, (x,), (1,))
+print("Test 4 - Multiplication expression:")
+print("LaTeX:", latex(subs4))
+print("Expected: \\left. x y \\right|_{\\substack{ x=1 }}")
+print()
+
+# Test case 5: Multiple variables
+subs5 = Subs(x + y, (x, y), (1, 2))
+print("Test 5 - Multiple variables:")
+print("LaTeX:", latex(subs5))
+print("Expected: \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 \\\\ y=2 }}")
+print()
+
+# Test case 6: Nested multiplication with Subs
+subs6 = 3 * Subs(x + y, (x,), (1,))
+print("Test 6 - Nested multiplication:")
+print("LaTeX:", latex(subs6))
+print("Expected: 3 \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}")
+print()
\ No newline at end of file
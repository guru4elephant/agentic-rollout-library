diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 00000000..8db3b174
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,15 @@
+import numpy as np
+import xarray as xr
+
+# Exact reproduction from the GitHub issue
+dta = xr.DataArray([1., 1., 1.])
+wgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool))
+
+result = dta.weighted(wgt).mean()
+
+print("Result:", result.values)
+print("Expected: 1.0")
+
+# Verify it matches expected output
+assert result.values == 1.0, f"Expected 1.0, got {result.values}"
+print("âœ“ Test passed! The issue has been fixed.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..981c2570
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+import numpy as np
+import xarray as xr
+
+# Reproduce the issue from the GitHub issue
+dta = xr.DataArray([1., 1., 1.])
+wgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool))
+
+print("DataArray:")
+print(dta)
+print("Weights (boolean):")
+print(wgt)
+print("dtype of weights:", wgt.dtype)
+
+# Test the weighted mean
+result = dta.weighted(wgt).mean()
+print("Weighted mean result:")
+print(result)
+
+# Expected result should be 1.0
+print("Expected result: 1.0")
+
+# Let's also test the sum_of_weights calculation
+sum_of_weights = dta.weighted(wgt)._sum_of_weights(dta, dim=None)
+print("Sum of weights:")
+print(sum_of_weights)
+print("dtype of sum_of_weights:", sum_of_weights.dtype)
+
+# Test with explicit conversion to int
+wgt_int = wgt * 1
+print("Weights converted to int:")
+print(wgt_int)
+print("dtype of weights_int:", wgt_int.dtype)
+
+result_int = dta.weighted(wgt_int).mean()
+print("Weighted mean with int weights:")
+print(result_int)
\ No newline at end of file
diff --git a/test_boolean_weights.py b/test_boolean_weights.py
new file mode 100644
index 00000000..c455a323
--- /dev/null
+++ b/test_boolean_weights.py
@@ -0,0 +1,62 @@
+import numpy as np
+import xarray as xr
+import pytest
+
+def test_boolean_weights_mean():
+    """Test that boolean weights work correctly for weighted mean operations."""
+    # Test case from the GitHub issue
+    dta = xr.DataArray([1., 1., 1.])
+    wgt = xr.DataArray(np.array([True, True, False]))
+    
+    result = dta.weighted(wgt).mean()
+    expected = 1.0
+    
+    assert result.values == expected, f"Expected {expected}, got {result.values}"
+
+def test_boolean_weights_sum_of_weights():
+    """Test that boolean weights work correctly for sum_of_weights calculation."""
+    dta = xr.DataArray([1., 1., 1.])
+    wgt = xr.DataArray(np.array([True, True, False]))
+    
+    sum_of_weights = dta.weighted(wgt)._sum_of_weights(dta)
+    expected = 2.0
+    
+    assert sum_of_weights.values == expected, f"Expected {expected}, got {sum_of_weights.values}"
+
+def test_boolean_weights_weighted_sum():
+    """Test that boolean weights work correctly for weighted sum operations."""
+    dta = xr.DataArray([1., 2., 3.])
+    wgt = xr.DataArray(np.array([True, False, True]))
+    
+    result = dta.weighted(wgt).sum()
+    expected = 4.0  # 1 * True + 2 * False + 3 * True = 1 + 0 + 3 = 4
+    
+    assert result.values == expected, f"Expected {expected}, got {result.values}"
+
+def test_mixed_boolean_weights():
+    """Test various boolean weight scenarios."""
+    dta = xr.DataArray([1., 2., 3., 4.])
+    
+    # All True weights
+    wgt_all_true = xr.DataArray(np.array([True, True, True, True]))
+    result_all_true = dta.weighted(wgt_all_true).mean()
+    expected_all_true = (1 + 2 + 3 + 4) / 4
+    assert result_all_true.values == expected_all_true
+    
+    # All False weights (should return NaN)
+    wgt_all_false = xr.DataArray(np.array([False, False, False, False]))
+    result_all_false = dta.weighted(wgt_all_false).mean()
+    assert np.isnan(result_all_false.values)
+    
+    # Mixed boolean weights
+    wgt_mixed = xr.DataArray(np.array([True, False, True, False]))
+    result_mixed = dta.weighted(wgt_mixed).mean()
+    expected_mixed = (1 + 3) / 2  # Only positions 0 and 2 are weighted
+    assert result_mixed.values == expected_mixed
+
+if __name__ == "__main__":
+    test_boolean_weights_mean()
+    test_boolean_weights_sum_of_weights()
+    test_boolean_weights_weighted_sum()
+    test_mixed_boolean_weights()
+    print("All boolean weights tests passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..a709913b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,47 @@
+import numpy as np
+import xarray as xr
+
+print("Testing edge cases for boolean weights fix...")
+
+# Test 1: Regular numeric weights should still work
+print("\n1. Testing with regular integer weights:")
+dta = xr.DataArray([1., 2., 3.])
+wgt_int = xr.DataArray([1, 2, 1])
+result = dta.weighted(wgt_int).mean()
+print(f"Result: {result.values} (expected: {(1*1 + 2*2 + 3*1)/4} = 2.0)")
+
+# Test 2: Regular float weights should still work  
+print("\n2. Testing with regular float weights:")
+wgt_float = xr.DataArray([1.0, 2.0, 1.0])
+result = dta.weighted(wgt_float).mean()
+print(f"Result: {result.values} (expected: 2.0)")
+
+# Test 3: All True boolean weights
+print("\n3. Testing with all True boolean weights:")
+wgt_all_true = xr.DataArray(np.array([True, True, True]))
+result = dta.weighted(wgt_all_true).mean()
+print(f"Result: {result.values} (expected: {(1+2+3)/3} = 2.0)")
+
+# Test 4: All False boolean weights (should return NaN)
+print("\n4. Testing with all False boolean weights:")
+wgt_all_false = xr.DataArray(np.array([False, False, False]))
+result = dta.weighted(wgt_all_false).mean()
+print(f"Result: {result.values} (expected: NaN)")
+
+# Test 5: Mixed boolean weights with some False
+print("\n5. Testing with mixed boolean weights:")
+wgt_mixed = xr.DataArray(np.array([True, False, True]))
+result = dta.weighted(wgt_mixed).mean()
+print(f"Result: {result.values} (expected: {(1+3)/2} = 2.0)")
+
+# Test 6: Check that sum_of_weights works correctly
+print("\n6. Testing sum_of_weights with boolean weights:")
+sum_wgt = dta.weighted(wgt_mixed)._sum_of_weights(dta)
+print(f"Sum of weights: {sum_wgt.values} (expected: 2)")
+
+# Test 7: Check that weighted sum works correctly
+print("\n7. Testing weighted sum with boolean weights:")
+sum_result = dta.weighted(wgt_mixed).sum()
+print(f"Weighted sum: {sum_result.values} (expected: {1+3} = 4)")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py
index 996d2e4c..56172911 100644
--- a/xarray/core/weighted.py
+++ b/xarray/core/weighted.py
@@ -142,7 +142,12 @@ class Weighted:
         # we need to mask data values that are nan; else the weights are wrong
         mask = da.notnull()
 
-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)
+        # Convert boolean weights to integer to avoid boolean operations in dot product
+        weights = self.weights
+        if weights.dtype == bool:
+            weights = weights * 1
+
+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)
 
         # 0-weights are not valid
         valid_weights = sum_of_weights != 0.0
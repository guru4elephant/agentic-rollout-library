diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..e55ddd503
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,98 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the sphinx-quickstart issue with existing conf.py
+"""
+
+import os
+import sys
+import tempfile
+from pathlib import Path
+
+# Import the quickstart module to test directly
+sys.path.insert(0, '/testbed')
+from sphinx.cmd.quickstart import ask_user, do_prompt, is_path
+
+def test_quickstart_exit_on_enter():
+    """Test that sphinx-quickstart exits when pressing Enter with existing conf.py"""
+    
+    # Create a temporary directory
+    with tempfile.TemporaryDirectory() as temp_dir:
+        temp_path = Path(temp_dir)
+        
+        # Create a conf.py file to simulate existing Sphinx project
+        conf_py = temp_path / "conf.py"
+        conf_py.write_text("# Existing conf.py file")
+        
+        print(f"Created test directory: {temp_dir}")
+        print(f"Created conf.py: {conf_py}")
+        
+        # Test the problematic prompt directly
+        print("\nTesting the prompt that causes the issue...")
+        
+        # Simulate the scenario where conf.py exists
+        d = {'path': str(temp_path)}
+        
+        # This should trigger the problematic prompt
+        try:
+            # Mock the do_prompt function to simulate pressing Enter
+            original_do_prompt = do_prompt
+            
+            def mock_do_prompt(text, default=None, validator=is_path):
+                if "new root path" in text:
+                    print(f"Prompt text: {text}")
+                    print(f"Default: {default}")
+                    print(f"Validator: {validator.__name__}")
+                    
+                    # Simulate pressing Enter (empty input)
+                    user_input = ""
+                    print(f"User input: '{user_input}'")
+                    
+                    if default and not user_input:
+                        user_input = default
+                    
+                    try:
+                        result = validator(user_input)
+                        print(f"Validator result: {result}")
+                        return result
+                    except Exception as e:
+                        print(f"Validator error: {e}")
+                        raise e
+            
+            # Replace the do_prompt function temporarily
+            import sphinx.cmd.quickstart as quickstart_module
+            quickstart_module.do_prompt = mock_do_prompt
+            
+            # This should trigger the bug
+            try:
+                ask_user(d)
+                print("✗ No error occurred - but the function should have exited")
+                return True
+            except SystemExit as e:
+                if e.code == 1:
+                    print("✓ sphinx-quickstart exited properly (bug fixed)")
+                    return False
+                else:
+                    print(f"? Unexpected exit code: {e.code}")
+                    return None
+            except Exception as e:
+                print(f"✗ Error occurred: {e}")
+                if "Please enter a valid path name" in str(e):
+                    print("✓ Confirmed the bug: validator rejects empty input")
+                    return True
+                else:
+                    print("? Unexpected error")
+                    return None
+
+if __name__ == "__main__":
+    print("Testing sphinx-quickstart behavior with existing conf.py...")
+    has_bug = test_quickstart_exit_on_enter()
+    
+    if has_bug:
+        print("\n❌ Bug confirmed: sphinx-quickstart doesn't exit properly on Enter")
+        sys.exit(1)
+    elif has_bug is False:
+        print("\n✅ Bug is fixed: sphinx-quickstart exits properly on Enter")
+        sys.exit(0)
+    else:
+        print("\n⚠️  Could not determine bug status")
+        sys.exit(2)
\ No newline at end of file
diff --git a/reproduce_issue_fixed.py b/reproduce_issue_fixed.py
new file mode 100644
index 000000000..f42119a7d
--- /dev/null
+++ b/reproduce_issue_fixed.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the sphinx-quickstart issue with existing conf.py
+"""
+
+import os
+import sys
+import tempfile
+from pathlib import Path
+
+# Import the quickstart module to test directly
+sys.path.insert(0, '/testbed')
+from sphinx.cmd.quickstart import ask_user, do_prompt, is_path
+
+def test_quickstart_exit_on_enter():
+    """Test that sphinx-quickstart exits when pressing Enter with existing conf.py"""
+    
+    # Create a temporary directory
+    with tempfile.TemporaryDirectory() as temp_dir:
+        temp_path = Path(temp_dir)
+        
+        # Create a conf.py file to simulate existing Sphinx project
+        conf_py = temp_path / "conf.py"
+        conf_py.write_text("# Existing conf.py file")
+        
+        print(f"Created test directory: {temp_dir}")
+        print(f"Created conf.py: {conf_py}")
+        
+        # Test the problematic prompt directly
+        print("\nTesting the prompt that causes the issue...")
+        
+        # Simulate the scenario where conf.py exists
+        d = {'path': str(temp_path)}
+        
+        # This should trigger the problematic prompt
+        try:
+            # Mock the do_prompt function to simulate pressing Enter
+            original_do_prompt = do_prompt
+            
+            def mock_do_prompt(text, default=None, validator=is_path):
+                if "new root path" in text:
+                    print(f"Prompt text: {text}")
+                    print(f"Default: {default}")
+                    print(f"Validator: {validator.__name__}")
+                    
+                    # Simulate pressing Enter (empty input)
+                    user_input = ""
+                    print(f"User input: '{user_input}'")
+                    
+                    if default and not user_input:
+                        user_input = default
+                    
+                    try:
+                        result = validator(user_input)
+                        print(f"Validator result: {result}")
+                        return result
+                    except Exception as e:
+                        print(f"Validator error: {e}")
+                        raise e
+            
+            # Replace the do_prompt function temporarily
+            import sphinx.cmd.quickstart as quickstart_module
+            quickstart_module.do_prompt = mock_do_prompt
+            
+            # This should trigger the bug
+            try:
+                ask_user(d)
+                print("✗ No error occurred - but the function should have exited")
+                return True
+            except SystemExit as e:
+                if e.code == 1:
+                    print("✓ sphinx-quickstart exited properly (bug fixed)")
+                    return False
+                else:
+                    print(f"? Unexpected exit code: {e.code}")
+                    return None
+            except Exception as e:
+                print(f"✗ Error occurred: {e}")
+                if "Please enter a valid path name" in str(e):
+                    print("✓ Confirmed the bug: validator rejects empty input")
+                    return True
+                else:
+                    print("? Unexpected error")
+                    return None
+                    
+        except Exception as e:
+            print(f"✗ Outer error occurred: {e}")
+            return None
+
+if __name__ == "__main__":
+    print("Testing sphinx-quickstart behavior with existing conf.py...")
+    has_bug = test_quickstart_exit_on_enter()
+    
+    if has_bug:
+        print("\n❌ Bug confirmed: sphinx-quickstart doesn't exit properly on Enter")
+        sys.exit(1)
+    elif has_bug is False:
+        print("\n✅ Bug is fixed: sphinx-quickstart exits properly on Enter")
+        sys.exit(0)
+    else:
+        print("\n⚠️  Could not determine bug status")
+        sys.exit(2)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 206ff4ad4..4bb5faeb1 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py
index a40a21073..084f54751 100644
--- a/sphinx/cmd/quickstart.py
+++ b/sphinx/cmd/quickstart.py
@@ -99,6 +99,13 @@ def allow_empty(x: str) -> str:
     return x
 
 
+def allow_empty_or_path(x: str) -> str:
+    """Allow empty input or validate as path if non-empty."""
+    if not x:
+        return x
+    return is_path(x)
+
+
 def nonempty(x: str) -> str:
     if not x:
         raise ValidationError(__("Please enter some text."))
@@ -223,7 +230,7 @@ def ask_user(d: Dict) -> None:
         print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))
         print()
         d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),
-                              '', is_path)
+                              '', allow_empty_or_path)
         if not d['path']:
             sys.exit(1)
 
diff --git a/test_validator.py b/test_validator.py
new file mode 100644
index 000000000..146d03b65
--- /dev/null
+++ b/test_validator.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+"""Test the allow_empty_or_path validator"""
+
+import sys
+import tempfile
+from pathlib import Path
+
+sys.path.insert(0, '/testbed')
+from sphinx.cmd.quickstart import allow_empty_or_path
+
+def test_validator():
+    """Test the allow_empty_or_path validator"""
+    
+    print("Testing allow_empty_or_path validator...")
+    
+    # Test empty input
+    try:
+        result = allow_empty_or_path("")
+        print(f"✓ Empty input: '{result}'")
+    except Exception as e:
+        print(f"✗ Empty input failed: {e}")
+    
+    # Test valid path
+    with tempfile.TemporaryDirectory() as temp_dir:
+        try:
+            result = allow_empty_or_path(temp_dir)
+            print(f"✓ Valid path '{temp_dir}': '{result}'")
+        except Exception as e:
+            print(f"✗ Valid path failed: {e}")
+    
+    # Test invalid path
+    try:
+        result = allow_empty_or_path("/nonexistent/path")
+        print(f"✓ Invalid path: '{result}' (should not reach here)")
+    except Exception as e:
+        print(f"✓ Invalid path correctly rejected: {e}")
+
+if __name__ == "__main__":
+    test_validator()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..e7633f67f2
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.iterables import partitions
+
+def comprehensive_test():
+    """Comprehensive test of the partitions function fix."""
+    
+    print("=== Comprehensive Test of partitions() Fix ===")
+    
+    # Test 1: Basic functionality
+    print("\n1. Basic functionality test:")
+    result = list(partitions(4))
+    expected = [{4: 1}, {3: 1, 1: 1}, {2: 2}, {2: 1, 1: 2}, {1: 4}]
+    print(f"partitions(4) = {result}")
+    print(f"Expected: {expected}")
+    print(f"Match: {result == expected}")
+    
+    # Test 2: Check that all dictionaries are different objects
+    print("\n2. Object uniqueness test:")
+    result = list(partitions(4))
+    unique_objects = len(set(id(p) for p in result)) == len(result)
+    print(f"All partitions are unique objects: {unique_objects}")
+    
+    # Test 3: Test with size parameter
+    print("\n3. Size parameter test:")
+    result = list(partitions(4, size=True))
+    expected = [(1, {4: 1}), (2, {3: 1, 1: 1}), (2, {2: 2}), (3, {2: 1, 1: 2}), (4, {1: 4})]
+    print(f"partitions(4, size=True) = {result}")
+    print(f"Expected: {expected}")
+    print(f"Match: {result == expected}")
+    
+    # Test 4: Test with m parameter
+    print("\n4. m parameter test:")
+    result = list(partitions(6, m=2))
+    expected = [{6: 1}, {5: 1, 1: 1}, {4: 1, 2: 1}, {3: 2}]
+    print(f"partitions(6, m=2) = {result}")
+    print(f"Expected: {expected}")
+    print(f"Match: {result == expected}")
+    
+    # Test 5: Test with k parameter
+    print("\n5. k parameter test:")
+    result = list(partitions(6, k=2))
+    expected = [{2: 3}, {2: 2, 1: 2}, {2: 1, 1: 4}, {1: 6}]
+    print(f"partitions(6, k=2) = {result}")
+    print(f"Expected: {expected}")
+    print(f"Match: {result == expected}")
+    
+    # Test 6: Edge case - n=0
+    print("\n6. Edge case n=0:")
+    result = list(partitions(0))
+    expected = [{}]
+    print(f"partitions(0) = {result}")
+    print(f"Expected: {expected}")
+    print(f"Match: {result == expected}")
+    
+    # Test 7: Edge case - n=1
+    print("\n7. Edge case n=1:")
+    result = list(partitions(1))
+    expected = [{1: 1}]
+    print(f"partitions(1) = {result}")
+    print(f"Expected: {expected}")
+    print(f"Match: {result == expected}")
+    
+    print("\n=== All tests completed ===")
+
+if __name__ == "__main__":
+    comprehensive_test()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5cd358c10a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.iterables import partitions
+
+def test_partitions_reuse_issue():
+    """Test to reproduce the issue where partitions() reuses the same dictionary object."""
+    
+    print("Testing partitions() with list conversion...")
+    
+    # This should demonstrate the issue
+    partitions_list = list(partitions(4))
+    print(f"list(partitions(4)) = {partitions_list}")
+    
+    # All elements in the list should be the same object (due to reuse)
+    print(f"Are all elements the same object? {all(p is partitions_list[0] for p in partitions_list)}")
+    
+    # Let's also test with a simple iteration
+    print("\nTesting individual partitions:")
+    for i, p in enumerate(partitions(4)):
+        print(f"Partition {i}: {p} (id: {id(p)})")
+    
+    # Test with k=2 parameter as mentioned in the docstring
+    print("\nTesting partitions(6, k=2):")
+    partitions_k2 = list(partitions(6, k=2))
+    print(f"list(partitions(6, k=2)) = {partitions_k2}")
+    print(f"Are all elements the same object? {all(p is partitions_k2[0] for p in partitions_k2)}")
+
+if __name__ == "__main__":
+    test_partitions_reuse_issue()
\ No newline at end of file
diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index dd36dea304..5ae68514f4 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -1738,19 +1738,11 @@ def partitions(n, m=None, k=None, size=False):
     {2: 1, 4: 1}
     {3: 2}
 
-    Note that the _same_ dictionary object is returned each time.
-    This is for speed:  generating each partition goes quickly,
-    taking constant time, independent of n.
+    Each partition is returned as a new dictionary object.
 
     >>> [p for p in partitions(6, k=2)]
-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
-
-    If you want to build a list of the returned dictionaries then
-    make a copy of them:
-
-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
-    >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
+    >>> [(M, p) for M, p in partitions(6, k=2, size=True)]
     [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]
 
     References
@@ -1802,9 +1794,9 @@ def partitions(n, m=None, k=None, size=False):
         keys.append(r)
     room = m - q - bool(r)
     if size:
-        yield sum(ms.values()), ms
+        yield sum(ms.values()), ms.copy()
     else:
-        yield ms
+        yield ms.copy()
 
     while keys != [1]:
         # Reuse any 1's.
@@ -1842,9 +1834,9 @@ def partitions(n, m=None, k=None, size=False):
             break
         room -= need
         if size:
-            yield sum(ms.values()), ms
+            yield sum(ms.values()), ms.copy()
         else:
-            yield ms
+            yield ms.copy()
 
 
 def ordered_partitions(n, m=None, sort=True):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..66d05f8ecc
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.iterables import partitions
+
+def test_edge_cases():
+    """Test edge cases for the partitions function fix."""
+    
+    print("Testing edge case: n=0")
+    result = list(partitions(0))
+    print(f"partitions(0) = {result}")
+    
+    print("\nTesting edge case: n=1")
+    result = list(partitions(1))
+    print(f"partitions(1) = {result}")
+    
+    print("\nTesting with size=True parameter")
+    result = list(partitions(4, size=True))
+    print(f"partitions(4, size=True) = {result}")
+    
+    print("\nTesting with m parameter")
+    result = list(partitions(6, m=2))
+    print(f"partitions(6, m=2) = {result}")
+    
+    print("\nTesting with k parameter")
+    result = list(partitions(6, k=3))
+    print(f"partitions(6, k=3) = {result}")
+    
+    print("\nTesting with both m and k parameters")
+    result = list(partitions(6, m=3, k=2))
+    print(f"partitions(6, m=3, k=2) = {result}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
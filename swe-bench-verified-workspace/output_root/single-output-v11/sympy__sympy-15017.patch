diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..806ba42d6e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+import sympy
+
+# Test the issue described in the GitHub issue
+print("Testing len() of rank-0 arrays...")
+a = sympy.Array(3)
+print(f"sympy.Array(3) = {a}")
+print(f"len(a) = {len(a)}")
+print(f"len(list(a)) = {len(list(a))}")
+
+# Test with numpy for comparison
+try:
+    import numpy
+    print("\nComparing with numpy:")
+    numpy_array = numpy.asarray(1)
+    print(f"numpy.asarray(1).size = {numpy_array.size}")
+except ImportError:
+    print("numpy not available for comparison")
+
+# Test some edge cases
+print("\nTesting edge cases:")
+print(f"len(sympy.Array(0)) = {len(sympy.Array(0))}")
+print(f"len(sympy.Array(1.5)) = {len(sympy.Array(1.5))}")
+print(f"len(sympy.Array(sympy.Symbol('x'))) = {len(sympy.Array(sympy.Symbol('x')))}")
+
+# Test with sparse arrays
+print("\nTesting sparse arrays:")
+try:
+    from sympy.tensor.array import MutableSparseNDimArray
+    sparse_a = MutableSparseNDimArray(3)
+    print(f"len(MutableSparseNDimArray(3)) = {len(sparse_a)}")
+except ImportError:
+    print("Sparse arrays not available for testing")
\ No newline at end of file
diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py
index 9be94a8631..9790712755 100644
--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
diff --git a/sympy/tensor/array/sparse_ndim_array.py b/sympy/tensor/array/sparse_ndim_array.py
index 72b5d51299..c5ce8e389f 100644
--- a/sympy/tensor/array/sparse_ndim_array.py
+++ b/sympy/tensor/array/sparse_ndim_array.py
@@ -167,7 +167,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
         self = object.__new__(cls)
         self._shape = shape
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..e79bc7fae4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import sympy
+from sympy.tensor.array import ImmutableDenseNDimArray, MutableDenseNDimArray, MutableSparseNDimArray
+
+def test_array_creation():
+    print("Testing various array creation methods...")
+    
+    # Test with different data types
+    test_cases = [
+        ("Integer", sympy.Array(5)),
+        ("Float", sympy.Array(3.14)),
+        ("Symbol", sympy.Array(sympy.Symbol('x'))),
+        ("Zero", sympy.Array(0)),
+        ("Negative", sympy.Array(-1)),
+    ]
+    
+    for name, arr in test_cases:
+        print(f"{name}: len() = {len(arr)}, shape = {arr.shape}, rank = {arr.rank()}")
+        assert len(arr) == 1, f"Expected len=1 for {name}, got {len(arr)}"
+        assert arr.shape == (), f"Expected shape=() for {name}, got {arr.shape}"
+        assert arr.rank() == 0, f"Expected rank=0 for {name}, got {arr.rank()}"
+    
+    print("All rank-0 array tests passed!")
+
+def test_direct_creation():
+    print("\nTesting direct class creation...")
+    
+    # Test ImmutableDenseNDimArray
+    imm_arr = ImmutableDenseNDimArray(42)
+    print(f"ImmutableDenseNDimArray: len() = {len(imm_arr)}, shape = {imm_arr.shape}")
+    assert len(imm_arr) == 1
+    
+    # Test MutableDenseNDimArray
+    mut_arr = MutableDenseNDimArray(42)
+    print(f"MutableDenseNDimArray: len() = {len(mut_arr)}, shape = {mut_arr.shape}")
+    assert len(mut_arr) == 1
+    
+    # Test MutableSparseNDimArray
+    sparse_arr = MutableSparseNDimArray(42)
+    print(f"MutableSparseNDimArray: len() = {len(sparse_arr)}, shape = {sparse_arr.shape}")
+    assert len(sparse_arr) == 1
+    
+    print("All direct creation tests passed!")
+
+def test_iteration():
+    print("\nTesting iteration...")
+    
+    arr = sympy.Array(7)
+    elements = list(arr)
+    print(f"Array elements: {elements}")
+    print(f"len(list(arr)) = {len(elements)}")
+    
+    assert len(elements) == 1, f"Expected 1 element, got {len(elements)}"
+    assert elements[0] == 7, f"Expected element 7, got {elements[0]}"
+    
+    print("Iteration test passed!")
+
+if __name__ == "__main__":
+    test_array_creation()
+    test_direct_creation()
+    test_iteration()
+    print("\nAll tests passed! The fix is working correctly.")
\ No newline at end of file
diff --git a/test_normal_arrays.py b/test_normal_arrays.py
new file mode 100644
index 0000000000..65ff09093e
--- /dev/null
+++ b/test_normal_arrays.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import sympy
+
+def test_normal_arrays():
+    print("Testing normal (non-scalar) arrays...")
+    
+    # Test 1D array
+    arr1d = sympy.Array([1, 2, 3])
+    print(f"1D array: len() = {len(arr1d)}, shape = {arr1d.shape}, rank = {arr1d.rank()}")
+    assert len(arr1d) == 3
+    assert arr1d.shape == (3,)
+    assert arr1d.rank() == 1
+    
+    # Test 2D array
+    arr2d = sympy.Array([[1, 2], [3, 4]])
+    print(f"2D array: len() = {len(arr2d)}, shape = {arr2d.shape}, rank = {arr2d.rank()}")
+    assert len(arr2d) == 4
+    assert arr2d.shape == (2, 2)
+    assert arr2d.rank() == 2
+    
+    # Test 3D array
+    arr3d = sympy.Array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
+    print(f"3D array: len() = {len(arr3d)}, shape = {arr3d.shape}, rank = {arr3d.rank()}")
+    assert len(arr3d) == 8
+    assert arr3d.shape == (2, 2, 2)
+    assert arr3d.rank() == 3
+    
+    # Note: Empty arrays are handled differently and not relevant to this fix
+    
+    print("All normal array tests passed!")
+
+def test_mixed_arrays():
+    print("\nTesting mixed array scenarios...")
+    
+    # Test that scalar arrays still work correctly
+    scalar = sympy.Array(42)
+    print(f"Scalar: len() = {len(scalar)}, shape = {scalar.shape}")
+    assert len(scalar) == 1
+    assert scalar.shape == ()
+    
+    # Test that normal arrays still work
+    normal = sympy.Array([1, 2, 3])
+    print(f"Normal: len() = {len(normal)}, shape = {normal.shape}")
+    assert len(normal) == 3
+    assert normal.shape == (3,)
+    
+    print("Mixed array tests passed!")
+
+if __name__ == "__main__":
+    test_normal_arrays()
+    test_mixed_arrays()
+    print("\nAll tests passed! The fix doesn't break normal arrays.")
\ No newline at end of file
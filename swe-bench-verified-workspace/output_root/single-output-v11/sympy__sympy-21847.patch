diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9439257ccb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Reproduce the issue from GitHub issue
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+max_degrees = 3
+min_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), 
+                   key=monomial_key('grlex', states))
+print("Monomials with max_degrees=3, min_degrees=3:")
+print(monomials)
+print()
+
+# Test with different max_degrees to show the issue persists
+print("Monomials with max_degrees=4, min_degrees=3:")
+monomials2 = sorted(sp.itermonomials(states, 4, min_degrees=3), 
+                   key=monomial_key('grlex', states))
+print(monomials2)
+print()
+
+# Expected monomials with total degree 3 should include mixed terms
+expected_monomials = [
+    x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,
+    x2**3, x2**2*x3, x2*x3**2, x3**3
+]
+
+print("Expected monomials with total degree 3:")
+print(expected_monomials)
+print()
+
+print("Missing monomials:")
+missing = [m for m in expected_monomials if m not in monomials]
+print(missing)
\ No newline at end of file
diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..d2cd3451e5 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_comm.append(Mul(*item))
             yield from set(monomials_list_comm)
         else:
@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_non_comm.append(Mul(*item))
             yield from set(monomials_list_non_comm)
     else:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2d62b75a51
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Test edge cases to ensure our fix doesn't break anything
+
+# Test 1: min_degree = 0 (should include all monomials up to max_degree)
+print("Test 1: min_degree = 0, max_degree = 2")
+x, y = sp.symbols('x y')
+monomials1 = sorted(sp.itermonomials([x, y], 2, min_degrees=0), 
+                   key=monomial_key('grlex', [x, y]))
+print(monomials1)
+print()
+
+# Test 2: min_degree > max_degree (should return empty)
+print("Test 2: min_degree = 3, max_degree = 2")
+monomials2 = list(sp.itermonomials([x, y], 2, min_degrees=3))
+print(monomials2)
+print()
+
+# Test 3: min_degree = max_degree = 0 (should return 1)
+print("Test 3: min_degree = 0, max_degree = 0")
+monomials3 = list(sp.itermonomials([x, y], 0, min_degrees=0))
+print(monomials3)
+print()
+
+# Test 4: Empty variables list
+print("Test 4: Empty variables list, max_degree = 0, min_degree = 0")
+monomials4 = list(sp.itermonomials([], 0, min_degrees=0))
+print(monomials4)
+print()
+
+# Test 5: Non-commutative variables
+print("Test 5: Non-commutative variables")
+a, b = sp.symbols('a b', commutative=False)
+monomials5 = list(sp.itermonomials([a, b], 2, min_degrees=1))
+print(monomials5)
+print()
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..77416d10aa
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,45 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Test the exact example from the GitHub issue
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+max_degrees = 3
+min_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), 
+                   key=monomial_key('grlex', states))
+
+print("Result from GitHub issue example:")
+print(monomials)
+print()
+
+# Verify that all monomials of total degree 3 are included
+expected_monomials = [
+    x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,
+    x2**3, x2**2*x3, x2*x3**2, x3**3
+]
+
+print("Expected monomials (all total degree 3):")
+print(expected_monomials)
+print()
+
+# Check if all expected monomials are present
+all_present = all(m in monomials for m in expected_monomials)
+print(f"All expected monomials present: {all_present}")
+print()
+
+# Check if no extra monomials are present (should only have total degree 3)
+all_degree_3 = all(m.as_poly().total_degree() == 3 for m in monomials)
+print(f"All returned monomials have total degree 3: {all_degree_3}")
+print()
+
+# Test with max_degrees > min_degrees as mentioned in the issue
+print("Testing with max_degrees=4, min_degrees=3:")
+monomials2 = sorted(sp.itermonomials(states, 4, min_degrees=3), 
+                   key=monomial_key('grlex', states))
+print(monomials2)
+print()
+
+# Verify that all monomials have total degree >= 3
+all_degree_ge_3 = all(m.as_poly().total_degree() >= 3 for m in monomials2)
+print(f"All returned monomials have total degree >= 3: {all_degree_ge_3}")
\ No newline at end of file
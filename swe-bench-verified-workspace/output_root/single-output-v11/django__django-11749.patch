diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..c39929e39b 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,6 +136,17 @@ def call_command(command_name, *args, **options):
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+    
+    # Handle required mutually exclusive groups
+    # Check if any required mutually exclusive groups have arguments provided in kwargs
+    for group in parser._mutually_exclusive_groups:
+        if group.required:
+            # Check if any argument in this group is provided in kwargs
+            for opt in group._group_actions:
+                if opt.dest in options:
+                    # Add the argument to parse_args
+                    parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))
+                    break
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..97843c9616
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+from django.core.management import call_command, BaseCommand
+from django.core.management.base import CommandParser, CommandError
+
+# Create a test command with a required mutually exclusive group
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        # Create a required mutually exclusive group
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+    
+    def handle(self, *args, **options):
+        print(f"Shop ID: {options.get('shop_id')}")
+        print(f"Shop Name: {options.get('shop_name')}")
+        return "Success"
+
+def test_call_command_kwargs():
+    """Test call_command with kwargs for mutually exclusive group"""
+    print("Testing call_command with kwargs...")
+    try:
+        # This should work but currently fails
+        result = call_command(TestCommand(), shop_id=1)
+        print("SUCCESS: call_command with kwargs worked")
+        return True
+    except CommandError as e:
+        print(f"FAILED: {e}")
+        return False
+
+def test_call_command_args():
+    """Test call_command with args for mutually exclusive group"""
+    print("Testing call_command with args...")
+    try:
+        # This should work and currently does work
+        result = call_command(TestCommand(), '--shop-id=1')
+        print("SUCCESS: call_command with args worked")
+        return True
+    except Exception as e:
+        print(f"FAILED: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("=" * 50)
+    print("Reproducing the issue...")
+    print("=" * 50)
+    
+    # Test both approaches
+    kwargs_result = test_call_command_kwargs()
+    args_result = test_call_command_args()
+    
+    print("=" * 50)
+    if not kwargs_result and args_result:
+        print("ISSUE CONFIRMED: call_command fails with kwargs but works with args")
+    else:
+        print("UNEXPECTED: Both approaches should not work the same way")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..695408f3bd
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+from django.core.management import call_command, BaseCommand
+from django.core.management.base import CommandParser, CommandError
+
+# Create a test command with multiple mutually exclusive groups
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        # Create a required mutually exclusive group
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+        
+        # Create an optional mutually exclusive group
+        category = parser.add_mutually_exclusive_group(required=False)
+        category.add_argument('--category-id', nargs='?', type=int, default=None, dest='category_id')
+        category.add_argument('--category', nargs='?', type=str, default=None, dest='category_name')
+    
+    def handle(self, *args, **options):
+        print(f"Shop ID: {options.get('shop_id')}")
+        print(f"Shop Name: {options.get('shop_name')}")
+        print(f"Category ID: {options.get('category_id')}")
+        print(f"Category Name: {options.get('category_name')}")
+        return "Success"
+
+def test_required_group_with_kwargs():
+    """Test required mutually exclusive group with kwargs"""
+    print("Testing required group with kwargs...")
+    try:
+        result = call_command(TestCommand(), shop_id=1)
+        print("SUCCESS: Required group with kwargs worked")
+        return True
+    except Exception as e:
+        print(f"FAILED: {e}")
+        return False
+
+def test_required_group_with_args():
+    """Test required mutually exclusive group with args"""
+    print("Testing required group with args...")
+    try:
+        result = call_command(TestCommand(), '--shop-id=1')
+        print("SUCCESS: Required group with args worked")
+        return True
+    except Exception as e:
+        print(f"FAILED: {e}")
+        return False
+
+def test_optional_group_with_kwargs():
+    """Test optional mutually exclusive group with kwargs"""
+    print("Testing optional group with kwargs...")
+    try:
+        result = call_command(TestCommand(), shop_id=1, category_id=5)
+        print("SUCCESS: Optional group with kwargs worked")
+        return True
+    except Exception as e:
+        print(f"FAILED: {e}")
+        return False
+
+def test_no_group_arguments():
+    """Test error when no arguments from required group are provided"""
+    print("Testing error when no group arguments provided...")
+    try:
+        result = call_command(TestCommand())
+        print("UNEXPECTED: Should have failed")
+        return False
+    except CommandError as e:
+        if "one of the arguments --shop-id --shop is required" in str(e):
+            print("SUCCESS: Correctly raised error for missing required group")
+            return True
+        else:
+            print(f"FAILED: Wrong error message: {e}")
+            return False
+
+if __name__ == "__main__":
+    print("=" * 50)
+    print("Testing edge cases...")
+    print("=" * 50)
+    
+    results = []
+    results.append(test_required_group_with_kwargs())
+    results.append(test_required_group_with_args())
+    results.append(test_optional_group_with_kwargs())
+    results.append(test_no_group_arguments())
+    
+    print("=" * 50)
+    if all(results):
+        print("ALL TESTS PASSED: Fix handles all edge cases correctly")
+    else:
+        print("SOME TESTS FAILED: Fix needs improvement")
\ No newline at end of file
diff --git a/test_no_groups.py b/test_no_groups.py
new file mode 100644
index 0000000000..a194d1c383
--- /dev/null
+++ b/test_no_groups.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the testbed directory to Python path
+sys.path.insert(0, '/testbed')
+
+from django.core.management import call_command, BaseCommand
+from django.core.management.base import CommandParser, CommandError
+
+# Create a test command without mutually exclusive groups
+class SimpleCommand(BaseCommand):
+    def add_arguments(self, parser):
+        parser.add_argument('--simple-arg', dest='simple_arg')
+    
+    def handle(self, *args, **options):
+        print(f"Simple arg: {options.get('simple_arg')}")
+        return "Success"
+
+def test_no_mutually_exclusive_groups():
+    """Test that commands without mutually exclusive groups still work"""
+    print("Testing command without mutually exclusive groups...")
+    try:
+        result = call_command(SimpleCommand(), simple_arg='test')
+        print("SUCCESS: Command without mutually exclusive groups worked")
+        return True
+    except Exception as e:
+        print(f"FAILED: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("=" * 50)
+    print("Testing commands without mutually exclusive groups...")
+    print("=" * 50)
+    
+    result = test_no_mutually_exclusive_groups()
+    
+    print("=" * 50)
+    if result:
+        print("TEST PASSED: Fix doesn't break regular commands")
+    else:
+        print("TEST FAILED: Fix breaks regular commands")
\ No newline at end of file
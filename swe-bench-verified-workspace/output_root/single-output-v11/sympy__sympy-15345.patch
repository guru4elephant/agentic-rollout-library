diff --git a/debug_args.py b/debug_args.py
new file mode 100644
index 0000000000..56cd01a3d5
--- /dev/null
+++ b/debug_args.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Max
+
+# Check the argument order in Max
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print(f"Original args: {max_expr.args}")
+print(f"Original func call: {max_expr.func(*max_expr.args)}")
+
+# Check if there's a way to get the original unsorted arguments
+print(f"Has _args attribute: {hasattr(max_expr, '_args')}")
+if hasattr(max_expr, '_args'):
+    print(f"_args: {max_expr._args}")
\ No newline at end of file
diff --git a/debug_creation.py b/debug_creation.py
new file mode 100644
index 0000000000..31f7744004
--- /dev/null
+++ b/debug_creation.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Max
+
+# Debug the creation process to see if we can access original arguments
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print(f"Max expression: {max_expr}")
+print(f"Args: {max_expr.args}")
+print(f"All attributes: {dir(max_expr)}")
+
+# Check if there's any way to get the original order
+print(f"Has _argset: {hasattr(max_expr, '_argset')}")
+if hasattr(max_expr, '_argset'):
+    print(f"_argset: {max_expr._argset}")
\ No newline at end of file
diff --git a/debug_max.py b/debug_max.py
new file mode 100644
index 0000000000..e0c9811124
--- /dev/null
+++ b/debug_max.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+import sympy
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+
+# Debug what type Max is and how it's printed
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print(f"Type of Max(x, 2): {type(max_expr)}")
+print(f"Function name: {max_expr.func.__name__}")
+print(f"Is it a Function? {isinstance(max_expr, sympy.Function)}")
+
+# Create a printer and see what method handles it
+printer = MCodePrinter()
+print(f"Printer method for Max: {printer._print(max_expr)}")
\ No newline at end of file
diff --git a/debug_max2.py b/debug_max2.py
new file mode 100644
index 0000000000..058271e23d
--- /dev/null
+++ b/debug_max2.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+import sympy
+from sympy import symbols, Max
+from sympy.printing.mathematica import MCodePrinter
+from sympy.core.function import Application
+from sympy.core.expr import Expr
+
+# Debug the inheritance hierarchy of Max
+x = symbols('x')
+max_expr = Max(x, 2)
+
+print(f"Type: {type(max_expr)}")
+print(f"MRO: {type(max_expr).__mro__}")
+print(f"Is it an Application? {isinstance(max_expr, Application)}")
+print(f"Is it an Expr? {isinstance(max_expr, Expr)}")
+
+# Let's also check what methods are available in the printer
+printer = MCodePrinter()
+print(f"Has _print_Max: {hasattr(printer, '_print_Max')}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6a074a9cd1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Max
+from sympy.printing.mathematica import mathematica_code
+
+# Reproduce the issue
+x = symbols('x')
+result = mathematica_code(Max(x, 2))
+print(f"Result: {result}")
+print(f"Expected: Max[x,2]")
+print(f"Match: {result == 'Max[x,2]'}")
\ No newline at end of file
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..5f248c3aad 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -101,6 +101,12 @@ def _print_Function(self, expr):
                     return "%s[%s]" % (mfunc, self.stringify(expr.args, ", "))
         return expr.func.__name__ + "[%s]" % self.stringify(expr.args, ", ")
 
+    def _print_Max(self, expr):
+        return "Max[%s]" % self.stringify(expr.args, ", ")
+
+    def _print_Min(self, expr):
+        return "Min[%s]" % self.stringify(expr.args, ", ")
+
     def _print_Integral(self, expr):
         if len(expr.variables) == 1 and not expr.limits[0][1:]:
             args = [expr.args[0], expr.variables[0]]
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..bb6861a2e2
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Max
+from sympy.printing.mathematica import mathematica_code
+
+# Test various cases to ensure the fix works
+x, y, z = symbols('x y z')
+
+# Test case 1: Original issue
+result1 = mathematica_code(Max(x, 2))
+print(f"Max(x, 2): {result1}")
+
+# Test case 2: Multiple symbols
+result2 = mathematica_code(Max(x, y, z))
+print(f"Max(x, y, z): {result2}")
+
+# Test case 3: Mixed types
+result3 = mathematica_code(Max(x, 2, y, 3))
+print(f"Max(x, 2, y, 3): {result3}")
+
+# Test case 4: Just numbers
+result4 = mathematica_code(Max(1, 2, 3))
+print(f"Max(1, 2, 3): {result4}")
+
+# Test case 5: Single argument
+result5 = mathematica_code(Max(x))
+print(f"Max(x): {result5}")
\ No newline at end of file
diff --git a/test_min.py b/test_min.py
new file mode 100644
index 0000000000..14b6b2d1be
--- /dev/null
+++ b/test_min.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, Min
+from sympy.printing.mathematica import mathematica_code
+
+# Test Min function
+x, y, z = symbols('x y z')
+
+# Test case 1: Original issue with Min
+result1 = mathematica_code(Min(x, 2))
+print(f"Min(x, 2): {result1}")
+
+# Test case 2: Multiple symbols
+result2 = mathematica_code(Min(x, y, z))
+print(f"Min(x, y, z): {result2}")
+
+# Test case 3: Mixed types
+result3 = mathematica_code(Min(x, 2, y, 3))
+print(f"Min(x, 2, y, 3): {result3}")
+
+# Test case 4: Just numbers
+result4 = mathematica_code(Min(1, 2, 3))
+print(f"Min(1, 2, 3): {result4}")
+
+# Test case 5: Single argument
+result5 = mathematica_code(Min(x))
+print(f"Min(x): {result5}")
\ No newline at end of file
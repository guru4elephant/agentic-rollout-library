diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b0ac2825f8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,89 @@
+#!/usr/bin/env python3
+
+from sympy import S
+from sympy.stats import *
+
+# Test cases from the issue
+print("Testing Arcsin distribution:")
+try:
+    result1 = cdf(Arcsin("x", 0, 3))(1)
+    print(f"Arcsin cdf result: {result1}")
+except Exception as e:
+    print(f"Arcsin error: {e}")
+
+print("\nTesting Dagum distribution:")
+try:
+    result2 = cdf(Dagum("x", S(1)/3, S(1)/5, 2))(3)
+    print(f"Dagum cdf result: {result2}")
+except Exception as e:
+    print(f"Dagum error: {e}")
+
+print("\nTesting Erlang distribution:")
+try:
+    result3 = cdf(Erlang("x", 1, 1))(1)
+    print(f"Erlang cdf result: {result3}")
+except Exception as e:
+    print(f"Erlang error: {e}")
+
+print("\nTesting Frechet distribution:")
+try:
+    result4 = cdf(Frechet("x", S(4)/3, 1, 2))(3)
+    print(f"Frechet cdf result: {result4}")
+except Exception as e:
+    print(f"Frechet error: {e}")
+
+print("\nTesting Gamma distribution:")
+try:
+    result5 = cdf(Gamma("x", 0.1, 2))(3)
+    print(f"Gamma cdf result: {result5}")
+except Exception as e:
+    print(f"Gamma error: {e}")
+
+print("\nTesting GammaInverse distribution:")
+try:
+    result6 = cdf(GammaInverse("x", S(5)/7, 2))(3)
+    print(f"GammaInverse cdf result: {result6}")
+except Exception as e:
+    print(f"GammaInverse error: {e}")
+
+print("\nTesting Kumaraswamy distribution:")
+try:
+    result7 = cdf(Kumaraswamy("x", S(1)/123, 5))(S(1)/3)
+    print(f"Kumaraswamy cdf result: {result7}")
+except Exception as e:
+    print(f"Kumaraswamy error: {e}")
+
+print("\nTesting Laplace distribution:")
+try:
+    result8 = cdf(Laplace("x", 2, 3))(5)
+    print(f"Laplace cdf result: {result8}")
+except Exception as e:
+    print(f"Laplace error: {e}")
+
+print("\nTesting Logistic distribution:")
+try:
+    result9 = cdf(Logistic("x", 1, 0.1))(2)
+    print(f"Logistic cdf result: {result9}")
+except Exception as e:
+    print(f"Logistic error: {e}")
+
+print("\nTesting Nakagami distribution:")
+try:
+    result10 = cdf(Nakagami("x", S(7)/3, 1))(2)
+    print(f"Nakagami cdf result: {result10}")
+except Exception as e:
+    print(f"Nakagami error: {e}")
+
+print("\nTesting StudentT distribution:")
+try:
+    result11 = cdf(StudentT("x", 10))(2)
+    print(f"StudentT cdf result: {result11}")
+except Exception as e:
+    print(f"StudentT error: {e}")
+
+print("\nTesting UniformSum distribution:")
+try:
+    result12 = cdf(UniformSum("x", 5))(2)
+    print(f"UniformSum cdf result: {result12}")
+except Exception as e:
+    print(f"UniformSum error: {e}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..4c645c6a26
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,12 @@
+#!/usr/bin/env python3
+
+from sympy import S
+from sympy.stats import *
+
+# Test just one distribution at a time to identify which ones hang
+print("Testing UniformSum distribution:")
+try:
+    result12 = cdf(UniformSum("x", 5))(2)
+    print(f"UniformSum cdf result: {result12}")
+except Exception as e:
+    print(f"UniformSum error: {e}")
\ No newline at end of file
diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index fff7da80ae..bc1bdba932 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -47,7 +47,7 @@
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, uppergamma, erf, erfc, I, asin, hyper)
 from sympy import beta as beta_fn
 from sympy import cos, exp, besseli
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
@@ -153,6 +153,14 @@ class ArcsinDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (0, x < a),
+            (2/pi * asin(sqrt((x - a)/(b - a))), x <= b),
+            (1, True)
+        )
+
 def Arcsin(name, a=0, b=1):
     r"""
     Create a Continuous Random Variable with an arcsin distribution.
@@ -670,6 +678,13 @@ def pdf(self, x):
         p, a, b = self.p, self.a, self.b
         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))
 
+    def _cdf(self, x):
+        p, a, b = self.p, self.a, self.b
+        return Piecewise(
+            (0, x <= 0),
+            ((1 + (x/b)**(-a))**(-p), True)
+        )
+
 
 def Dagum(name, p, a, b):
     r"""
@@ -1042,6 +1057,13 @@ def pdf(self, x):
         a, s, m = self.a, self.s, self.m
         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))
 
+    def _cdf(self, x):
+        a, s, m = self.a, self.s, self.m
+        return Piecewise(
+            (0, x <= m),
+            (exp(-((x - m)/s)**(-a)), True)
+        )
+
 def Frechet(name, a, s=1, m=0):
     r"""
     Create a continuous random variable with a Frechet distribution.
@@ -1111,6 +1133,13 @@ def pdf(self, x):
     def sample(self):
         return random.gammavariate(self.k, self.theta)
 
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return Piecewise(
+            (0, x <= 0),
+            (lowergamma(k, x/theta) / gamma(k), True)
+        )
+
 
 def Gamma(name, k, theta):
     r"""
@@ -1200,6 +1229,13 @@ def pdf(self, x):
         a, b = self.a, self.b
         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (0, x <= 0),
+            (uppergamma(a, b/x) / gamma(a), True)
+        )
+
 def GammaInverse(name, a, b):
     r"""
     Create a continuous random variable with an inverse Gamma distribution.
@@ -1385,6 +1421,14 @@ def pdf(self, x):
         a, b = self.a, self.b
         return a * b * x**(a-1) * (1-x**a)**(b-1)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (0, x <= 0),
+            (1 - (1 - x**a)**b, x <= 1),
+            (1, True)
+        )
+
 def Kumaraswamy(name, a, b):
     r"""
     Create a Continuous Random Variable with a Kumaraswamy distribution.
@@ -1445,6 +1489,13 @@ def pdf(self, x):
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
 
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (exp((x - mu)/b)/2, x < mu),
+            (1 - exp(-(x - mu)/b)/2, True)
+        )
+
 
 def Laplace(name, mu, b):
     r"""
@@ -1501,6 +1552,10 @@ def pdf(self, x):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
 
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return 1/(1 + exp(-(x - mu)/s))
+
 
 def Logistic(name, mu, s):
     r"""
@@ -1711,6 +1766,13 @@ def pdf(self, x):
         mu, omega = self.mu, self.omega
         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)
 
+    def _cdf(self, x):
+        mu, omega = self.mu,  self.omega
+        return Piecewise(
+            (0, x <= 0),
+            (lowergamma(mu, mu*x**2/omega) / gamma(mu), True)
+        )
+
 
 def Nakagami(name, mu, omega):
     r"""
@@ -2227,6 +2289,12 @@ def pdf(self, x):
         nu = self.nu
         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)
 
+    def _cdf(self, x):
+        nu = self.nu
+        return Piecewise(
+            (S.Half + x*gamma((nu + 1)/2)*hyper([S.Half, (nu + 1)/2], [S(3)/2], -x**2/nu)/(sqrt(pi*nu)*gamma(nu/2)), True)
+        )
+
 
 def StudentT(name, nu):
     r"""
@@ -2554,6 +2622,15 @@ def pdf(self, x):
         return 1/factorial(
             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
 
+    def _cdf(self, x):
+        n = self.n
+        k = Dummy("k")
+        return Piecewise(
+            (0, x <= 0),
+            (1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x))), x <= n),
+            (1, True)
+        )
+
 
 
 def UniformSum(name, n):
diff --git a/test_all_distributions.py b/test_all_distributions.py
new file mode 100644
index 0000000000..64935ddb63
--- /dev/null
+++ b/test_all_distributions.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+from sympy import S
+from sympy.stats import *
+import time
+
+# Test each distribution individually with timeout
+distributions = [
+    ("Arcsin", lambda: cdf(Arcsin("x", 0, 3))(1)),
+    ("Dagum", lambda: cdf(Dagum("x", S(1)/3, S(1)/5, 2))(3)),
+    ("Erlang", lambda: cdf(Erlang("x", 1, 1))(1)),
+    ("Frechet", lambda: cdf(Frechet("x", S(4)/3, 1, 2))(3)),
+    ("Gamma", lambda: cdf(Gamma("x", 0.1, 2))(3)),
+    ("GammaInverse", lambda: cdf(GammaInverse("x", S(5)/7, 2))(3)),
+    ("Kumaraswamy", lambda: cdf(Kumaraswamy("x", S(1)/123, 5))(S(1)/3)),
+    ("Laplace", lambda: cdf(Laplace("x", 2, 3))(5)),
+    ("Logistic", lambda: cdf(Logistic("x", 1, 0.1))(2)),
+    ("Nakagami", lambda: cdf(Nakagami("x", S(7)/3, 1))(2)),
+    ("StudentT", lambda: cdf(StudentT("x", 10))(2)),
+    ("UniformSum", lambda: cdf(UniformSum("x", 5))(2)),
+]
+
+for name, func in distributions:
+    print(f"\nTesting {name} distribution:")
+    start_time = time.time()
+    try:
+        result = func()
+        end_time = time.time()
+        print(f"{name} cdf result: {result}")
+        print(f"Time taken: {end_time - start_time:.3f} seconds")
+    except Exception as e:
+        end_time = time.time()
+        print(f"{name} error: {e}")
+        print(f"Time taken: {end_time - start_time:.3f} seconds")
\ No newline at end of file
diff --git a/test_arcsin_simplify.py b/test_arcsin_simplify.py
new file mode 100644
index 0000000000..b096fcc7c9
--- /dev/null
+++ b/test_arcsin_simplify.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python3
+
+from sympy import S
+from sympy.stats import *
+from sympy import simplify
+
+# Test Arcsin distribution simplification
+result = cdf(Arcsin("x", 0, 3))(1)
+print(f"Arcsin cdf result: {result}")
+print(f"Simplified: {simplify(result)}")
+
+# Test numeric evaluation
+print(f"Numeric evaluation: {result.evalf()}")
\ No newline at end of file
diff --git a/test_erlang_symbolic.py b/test_erlang_symbolic.py
new file mode 100644
index 0000000000..58a49c9a01
--- /dev/null
+++ b/test_erlang_symbolic.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python3
+
+from sympy import S
+from sympy.stats import *
+from sympy import symbols
+
+# Test Erlang distribution with symbolic parameters
+k, l, z = symbols('k l z', positive=True)
+X = Erlang("x", k, l)
+result = cdf(X)(z)
+print(f"Erlang cdf result: {result}")
\ No newline at end of file
diff --git a/test_gamma_symbolic.py b/test_gamma_symbolic.py
new file mode 100644
index 0000000000..b75c139379
--- /dev/null
+++ b/test_gamma_symbolic.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python3
+
+from sympy import S
+from sympy.stats import *
+from sympy import symbols
+
+# Test Gamma distribution with symbolic parameters
+k, theta, z = symbols('k theta z', positive=True)
+X = Gamma("x", k, theta)
+result = cdf(X)(z)
+print(f"Gamma cdf result: {result}")
\ No newline at end of file
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 000000000..d5c8f330d
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,12 @@
+import pytest
+
+def test_foo(caplog):
+    """Test that sets the log level to 42"""
+    caplog.set_level(42)
+
+def test_bar(caplog):
+    """Test that verifies the log level is restored to 0 (default)"""
+    assert caplog.handler.level == 0, f"Expected handler level 0, got {caplog.handler.level}"
+
+if __name__ == "__main__":
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..33e1a4ac6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,7 @@
+import pytest
+
+def test_foo(caplog):
+    caplog.set_level(42)
+
+def test_bar(caplog):
+    print(f"Handler level: {caplog.handler.level}")
\ No newline at end of file
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index 11031f2f2..2e0e531a7 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -346,6 +346,8 @@ class LogCaptureFixture:
         self._item = item
         # dict of log name -> log level
         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]
+        # original handler level to restore during teardown
+        self._initial_handler_level = None  # type: Optional[int]
 
     def _finalize(self) -> None:
         """Finalizes the fixture.
@@ -356,6 +358,9 @@ class LogCaptureFixture:
         for logger_name, level in self._initial_logger_levels.items():
             logger = logging.getLogger(logger_name)
             logger.setLevel(level)
+        # restore handler level
+        if self._initial_handler_level is not None:
+            self.handler.setLevel(self._initial_handler_level)
 
     @property
     def handler(self) -> LogCaptureHandler:
@@ -433,6 +438,9 @@ class LogCaptureFixture:
         logger_obj = logging.getLogger(logger)
         # save the original log-level to restore it during teardown
         self._initial_logger_levels.setdefault(logger, logger_obj.level)
+        # save the original handler level to restore it during teardown
+        if self._initial_handler_level is None:
+            self._initial_handler_level = self.handler.level
         logger_obj.setLevel(level)
         self.handler.setLevel(level)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..fc9a7c0cd
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,32 @@
+import pytest
+import logging
+
+def test_multiple_set_level_calls(caplog):
+    """Test that multiple set_level calls don't overwrite the original handler level"""
+    original_handler_level = caplog.handler.level
+    caplog.set_level(10)
+    caplog.set_level(20)
+    caplog.set_level(30)
+    # After teardown, handler level should be restored to original
+
+def test_no_set_level_call(caplog):
+    """Test that handler level is unchanged if set_level is never called"""
+    original_handler_level = caplog.handler.level
+    # After teardown, handler level should still be original
+
+def test_root_logger_level(caplog):
+    """Test that root logger level is also properly restored"""
+    original_root_level = logging.getLogger().level
+    caplog.set_level(42)
+    # After teardown, root logger level should be restored
+
+def test_custom_logger_level(caplog):
+    """Test that custom logger levels are properly restored"""
+    custom_logger = logging.getLogger("custom")
+    original_custom_level = custom_logger.level
+    caplog.set_level(42, "custom")
+    # After teardown, custom logger level should be restored
+
+# Run all tests and check results
+if __name__ == "__main__":
+    pytest.main([__file__, "-v"])
\ No newline at end of file
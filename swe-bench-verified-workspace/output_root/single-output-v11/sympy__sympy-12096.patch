diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..8935be4ede
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.lambdify import implemented_function
+from sympy import Function, symbols, sin, cos
+
+# Test various scenarios
+f = implemented_function('f', lambda x: x ** 2)
+g = implemented_function('g', lambda x: 2 * x)
+h = implemented_function('h', lambda x, y: x + y)
+
+# Test basic functionality
+print("=== Basic Tests ===")
+print("f(2).evalf():", f(2).evalf())
+print("g(2).evalf():", g(2).evalf())
+print("f(g(2)).evalf():", f(g(2)).evalf())  # Should be 16
+
+# Test multiple nesting
+print("=== Nested Tests ===")
+print("f(g(f(2))).evalf():", f(g(f(2))).evalf())  # Should be 64
+print("g(f(g(2))).evalf():", g(f(g(2))).evalf())  # Should be 32
+
+# Test multiple arguments
+print("=== Multiple Arguments Tests ===")
+print("h(2, 3).evalf():", h(2, 3).evalf())  # Should be 5
+print("h(g(2), f(3)).evalf():", h(g(2), f(3)).evalf())  # Should be 4 + 9 = 13
+
+# Test mixed with built-in functions
+print("=== Mixed with Built-in Functions ===")
+print("f(sin(1)).evalf():", f(sin(1)).evalf())  # Should be sin(1)^2
+print("g(cos(1)).evalf():", g(cos(1)).evalf())  # Should be 2*cos(1)
+
+# Test symbolic arguments
+print("=== Symbolic Arguments Tests ===")
+x, y = symbols('x y')
+print("f(x).evalf():", f(x).evalf())  # Should remain symbolic
+print("h(x, y).evalf():", h(x, y).evalf())  # Should remain symbolic
+print("f(g(x)).evalf():", f(g(x)).evalf())  # Should remain symbolic
+
+# Test edge case with non-evaluable arguments
+print("=== Edge Case Tests ===")
+try:
+    # This should work fine
+    print("f(2.5).evalf():", f(2.5).evalf())  # Should be 6.25
+except Exception as e:
+    print("Error with float:", e)
+
+try:
+    # This should work fine
+    print("h(1.5, 2.5).evalf():", h(1.5, 2.5).evalf())  # Should be 4.0
+except Exception as e:
+    print("Error with floats:", e)
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..9c25038921
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+# Exact reproduction from the GitHub issue
+from sympy.utilities.lambdify import implemented_function
+
+f = implemented_function('f', lambda x: x ** 2)
+g = implemented_function('g', lambda x: 2 * x)
+
+print("f(2).evalf():", f(2).evalf())
+print("g(2).evalf():", g(2).evalf())
+print("f(g(2)).evalf():", f(g(2)).evalf())
+
+# Verify the expected results
+print("Expected f(2): 4.0")
+print("Expected g(2): 4.0") 
+print("Expected f(g(2)): 16.0 (since g(2)=4 and f(4)=16)")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..68d7c3fdf4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.lambdify import implemented_function
+from sympy import Function
+
+# Reproduce the issue from the GitHub issue
+f = implemented_function('f', lambda x: x ** 2)
+g = implemented_function('g', lambda x: 2 * x)
+
+print("f(2).evalf():", f(2).evalf())
+print("g(2).evalf():", g(2).evalf())
+print("f(g(2)).evalf():", f(g(2)).evalf())
+
+# Let's also check what the actual values are
+print("f(2):", f(2))
+print("g(2):", g(2))
+print("f(g(2)):", f(g(2)))
\ No newline at end of file
diff --git a/sympy/core/function.py b/sympy/core/function.py
index 1b8005e1d2..49c0214cf1 100644
--- a/sympy/core/function.py
+++ b/sympy/core/function.py
@@ -507,7 +507,9 @@ def _eval_evalf(self, prec):
             func = getattr(mpmath, fname)
         except (AttributeError, KeyError):
             try:
-                return Float(self._imp_(*self.args), prec)
+                # Evaluate arguments first before passing to _imp_
+                evaluated_args = [arg.evalf(prec) if hasattr(arg, 'evalf') else arg for arg in self.args]
+                return Float(self._imp_(*evaluated_args), prec)
             except (AttributeError, TypeError, ValueError):
                 return
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2c68e72723
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from sympy.utilities.lambdify import implemented_function
+from sympy import Function, symbols
+
+# Test edge cases
+f = implemented_function('f', lambda x: x ** 2)
+g = implemented_function('g', lambda x: 2 * x)
+h = implemented_function('h', lambda x, y: x + y)
+
+# Test multiple arguments
+print("h(2, 3).evalf():", h(2, 3).evalf())
+print("h(g(2), 3).evalf():", h(g(2), 3).evalf())
+
+# Test nested functions
+print("f(g(f(2))).evalf():", f(g(f(2))).evalf())  # Should be f(g(f(2))) = f(g(4)) = f(8) = 64
+
+# Test with symbolic arguments
+x = symbols('x')
+print("f(g(x)).evalf():", f(g(x)).evalf())  # Should remain symbolic since x is symbolic
+
+# Test with mixed numeric and symbolic
+print("f(g(2) + x).evalf():", f(g(2) + x).evalf())  # Should be f(4 + x)
\ No newline at end of file
diff --git a/test_regular_functions.py b/test_regular_functions.py
new file mode 100644
index 0000000000..cc20bbfd74
--- /dev/null
+++ b/test_regular_functions.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from sympy import Function, sin, cos, exp
+from sympy.abc import x
+
+# Test that regular functions still work
+print("sin(1).evalf():", sin(1).evalf())
+print("cos(1).evalf():", cos(1).evalf())
+print("exp(1).evalf():", exp(1).evalf())
+
+# Test composition of regular functions
+print("sin(cos(1)).evalf():", sin(cos(1)).evalf())
+print("exp(sin(1)).evalf():", exp(sin(1)).evalf())
+
+# Test with symbolic arguments
+print("sin(x).evalf():", sin(x).evalf())
+print("cos(sin(x)).evalf():", cos(sin(x)).evalf())
\ No newline at end of file
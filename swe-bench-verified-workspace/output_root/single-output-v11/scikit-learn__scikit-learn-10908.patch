diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..6b37f0018
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+# Reproduce the issue described in the GitHub issue
+print("=== Reproducing the issue ===")
+
+# Case 1: Without vocabulary - should raise NotFittedError
+print("\n1. CountVectorizer without vocabulary:")
+vectorizer1 = CountVectorizer()
+corpus = [
+    'This is the first document.',
+    'This is the second second document.',
+    'And the third one.',
+    'Is this the first document?',
+]
+
+try:
+    vectorizer1.transform(corpus)
+    print("ERROR: Should have raised NotFittedError!")
+except Exception as e:
+    print(f"Expected error: {type(e).__name__}: {e}")
+
+# Case 2: With vocabulary provided at initialization
+print("\n2. CountVectorizer with vocabulary provided:")
+vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
+vectorizer2 = CountVectorizer(vocabulary=vocabulary)
+
+print(f"hasattr(vectorizer2, 'vocabulary_'): {hasattr(vectorizer2, 'vocabulary_')}")
+
+try:
+    feature_names = vectorizer2.get_feature_names()
+    print(f"get_feature_names() succeeded: {feature_names}")
+except Exception as e:
+    print(f"ERROR - get_feature_names() failed: {type(e).__name__}: {e}")
+
+# Case 3: After transform, it should work
+print("\n3. After calling transform():")
+try:
+    result = vectorizer2.transform(corpus)
+    print(f"transform() succeeded, shape: {result.shape}")
+    print(f"hasattr(vectorizer2, 'vocabulary_'): {hasattr(vectorizer2, 'vocabulary_')}")
+    
+    feature_names = vectorizer2.get_feature_names()
+    print(f"get_feature_names() succeeded: {feature_names}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index 9b1ebd632..e942b1c69 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -300,6 +300,11 @@ class VectorizerMixin(object):
 
     def _check_vocabulary(self):
         """Check if vocabulary is empty or missing (not fit-ed)"""
+        # If vocabulary was provided during initialization but vocabulary_ is not set yet,
+        # validate the vocabulary first (similar to what transform() does)
+        if not hasattr(self, 'vocabulary_') and self.vocabulary is not None:
+            self._validate_vocabulary()
+        
         msg = "%(name)s - Vocabulary wasn't fitted."
         check_is_fitted(self, 'vocabulary_', msg=msg),
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..30fc16224
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+print("=== Testing edge cases ===")
+
+# Test 1: Empty vocabulary
+print("\n1. Empty vocabulary:")
+try:
+    vectorizer = CountVectorizer(vocabulary=[])
+    feature_names = vectorizer.get_feature_names()
+    print(f"ERROR: Should have raised ValueError for empty vocabulary: {feature_names}")
+except ValueError as e:
+    print(f"Expected error: {e}")
+except Exception as e:
+    print(f"Unexpected error: {type(e).__name__}: {e}")
+
+# Test 2: Vocabulary with duplicates
+print("\n2. Vocabulary with duplicates:")
+try:
+    vectorizer = CountVectorizer(vocabulary=['word', 'word'])
+    feature_names = vectorizer.get_feature_names()
+    print(f"ERROR: Should have raised ValueError for duplicates: {feature_names}")
+except ValueError as e:
+    print(f"Expected error: {e}")
+except Exception as e:
+    print(f"Unexpected error: {type(e).__name__}: {e}")
+
+# Test 3: Valid vocabulary
+print("\n3. Valid vocabulary:")
+try:
+    vocabulary = ['apple', 'banana', 'cherry']
+    vectorizer = CountVectorizer(vocabulary=vocabulary)
+    feature_names = vectorizer.get_feature_names()
+    print(f"Success: {feature_names}")
+    print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+except Exception as e:
+    print(f"Unexpected error: {type(e).__name__}: {e}")
+
+# Test 4: Vocabulary as dict with indices
+print("\n4. Vocabulary as dict with indices:")
+try:
+    vocabulary = {'apple': 0, 'banana': 1, 'cherry': 2}
+    vectorizer = CountVectorizer(vocabulary=vocabulary)
+    feature_names = vectorizer.get_feature_names()
+    print(f"Success: {feature_names}")
+    print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+except Exception as e:
+    print(f"Unexpected error: {type(e).__name__}: {e}")
+
+# Test 5: No vocabulary provided (should still raise NotFittedError)
+print("\n5. No vocabulary provided:")
+try:
+    vectorizer = CountVectorizer()
+    feature_names = vectorizer.get_feature_names()
+    print(f"ERROR: Should have raised NotFittedError: {feature_names}")
+except Exception as e:
+    print(f"Expected error: {type(e).__name__}: {e}")
+
+# Test 6: Transform still works after get_feature_names
+print("\n6. Transform after get_feature_names:")
+try:
+    vocabulary = ['test', 'transform']
+    vectorizer = CountVectorizer(vocabulary=vocabulary)
+    feature_names = vectorizer.get_feature_names()
+    print(f"get_feature_names() succeeded: {feature_names}")
+    
+    corpus = ['test transform', 'transform test']
+    result = vectorizer.transform(corpus)
+    print(f"transform() succeeded, shape: {result.shape}")
+except Exception as e:
+    print(f"Unexpected error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..b2824bb83
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+# Exact reproduction from GitHub issue
+print("=== Testing GitHub issue example ===")
+
+# Step 1: Import and initialize
+vectorizer = CountVectorizer()
+corpus = [
+    'This is the first document.',
+    'This is the second second document.',
+    'And the third one.',
+    'Is this the first document?',
+]
+
+# Step 2: Without vocabulary - should raise NotFittedError
+print("\nStep 2: Without vocabulary")
+try:
+    vectorizer.transform(corpus)
+    print("ERROR: Should have raised NotFittedError!")
+except Exception as e:
+    print(f"Expected error: {type(e).__name__}: {e}")
+
+# Step 3: With vocabulary provided
+print("\nStep 3: With vocabulary provided")
+vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
+vectorizer = CountVectorizer(vocabulary=vocabulary)
+
+print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+
+# Step 4: This should now work (previously failed)
+print("\nStep 4: get_feature_names() should work now")
+try:
+    feature_names = vectorizer.get_feature_names()
+    print(f"get_feature_names() succeeded: {feature_names}")
+except Exception as e:
+    print(f"ERROR - get_feature_names() failed: {type(e).__name__}: {e}")
+
+# Step 5: Transform should still work
+print("\nStep 5: transform() should work")
+try:
+    result = vectorizer.transform(corpus)
+    print(f"transform() succeeded, shape: {result.shape}")
+    print(f"hasattr(vectorizer, 'vocabulary_'): {hasattr(vectorizer, 'vocabulary_')}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Step 6: get_feature_names() should still work after transform
+print("\nStep 6: get_feature_names() after transform")
+try:
+    feature_names = vectorizer.get_feature_names()
+    print(f"get_feature_names() succeeded: {feature_names}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+print("\n=== GitHub issue should now be fixed ===")
\ No newline at end of file
diff --git a/test_normal_workflow.py b/test_normal_workflow.py
new file mode 100644
index 000000000..6a66f5f07
--- /dev/null
+++ b/test_normal_workflow.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from sklearn.feature_extraction.text import CountVectorizer
+
+print("=== Testing normal workflow (no vocabulary provided) ===")
+
+# Normal workflow: fit then get_feature_names
+vectorizer = CountVectorizer()
+corpus = [
+    'This is the first document.',
+    'This is the second second document.',
+    'And the third one.',
+    'Is this the first document?',
+]
+
+print("\n1. Before fit:")
+try:
+    feature_names = vectorizer.get_feature_names()
+    print(f"ERROR: Should have raised NotFittedError: {feature_names}")
+except Exception as e:
+    print(f"Expected error: {type(e).__name__}: {e}")
+
+print("\n2. After fit:")
+vectorizer.fit(corpus)
+try:
+    feature_names = vectorizer.get_feature_names()
+    print(f"get_feature_names() succeeded: {feature_names}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+print("\n3. Transform after fit:")
+try:
+    result = vectorizer.transform(corpus)
+    print(f"transform() succeeded, shape: {result.shape}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+print("\n=== Normal workflow should still work ===")
\ No newline at end of file
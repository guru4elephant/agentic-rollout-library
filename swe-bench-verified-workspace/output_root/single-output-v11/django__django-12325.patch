diff --git a/django/db/models/base.py b/django/db/models/base.py
index 8ea6c05ef9..a8a7a6376b 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -200,9 +200,9 @@ class ModelBase(type):
             # Skip concrete parent classes.
             if base != new_class and not base._meta.abstract:
                 continue
-            # Locate OneToOneField instances.
+            # Locate OneToOneField instances with parent_link=True.
             for field in base._meta.local_fields:
-                if isinstance(field, OneToOneField):
+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:
                     related = resolve_relation(new_class, field.remote_field.model)
                     parent_links[make_model_tuple(related)] = field
 
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..f7c2edb00b
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,118 @@
+#!/usr/bin/env python3
+"""
+Final verification that our fix works and doesn't break anything.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Final verification of the fix...")
+
+# Test the exact scenario from the GitHub issue
+print("\nTesting the exact GitHub issue scenario:")
+
+# Case 1: document_ptr first (should now work)
+print("1. document_ptr first:")
+try:
+    class Document(models.Model):
+        class Meta:
+            app_label = 'test_app'
+        
+    class Picking(Document):
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        
+        class Meta:
+            app_label = 'test_app'
+        
+    print("✓ SUCCESS: No ImproperlyConfigured error")
+except django.core.exceptions.ImproperlyConfigured as e:
+    print(f"✗ FAILED: {e}")
+except Exception as e:
+    print(f"✗ UNEXPECTED ERROR: {e}")
+
+# Case 2: document_ptr second (should work)
+print("2. document_ptr second:")
+try:
+    class Document2(models.Model):
+        class Meta:
+            app_label = 'test_app'
+        
+    class Picking2(Document2):
+        origin = models.OneToOneField(Document2, related_name='picking', on_delete=models.PROTECT)
+        document_ptr = models.OneToOneField(Document2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_app'
+        
+    print("✓ SUCCESS: No ImproperlyConfigured error")
+except django.core.exceptions.ImproperlyConfigured as e:
+    print(f"✗ FAILED: {e}")
+except Exception as e:
+    print(f"✗ UNEXPECTED ERROR: {e}")
+
+# Test that normal inheritance still works
+print("\nTesting normal inheritance:")
+try:
+    class Parent(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+        
+    class Child(Parent):
+        age = models.IntegerField()
+        
+        class Meta:
+            app_label = 'test_app'
+        
+    print("✓ SUCCESS: Normal inheritance works")
+except Exception as e:
+    print(f"✗ FAILED: {e}")
+
+# Test that explicit parent_link still works
+print("Testing explicit parent_link:")
+try:
+    class Parent2(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+        
+    class Child2(Parent2):
+        age = models.IntegerField()
+        parent2_ptr = models.OneToOneField(Parent2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_app'
+        
+    print("✓ SUCCESS: Explicit parent_link works")
+except Exception as e:
+    print(f"✗ FAILED: {e}")
+
+print("\nFinal verification completed!")
+print("The fix successfully resolves the GitHub issue without breaking existing functionality.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a32881b25f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with multiple OneToOneField references
+where order matters for parent_link detection.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+from django.apps import apps
+
+print("Testing the issue with multiple OneToOneField references...")
+
+# Create test models within an app context
+class Document(models.Model):
+    class Meta:
+        app_label = 'test_app'
+
+class Document2(models.Model):
+    class Meta:
+        app_label = 'test_app'
+
+# Test case 1: This should fail according to the issue
+print("\n1. Testing case that should fail (document_ptr first):")
+try:
+    class Picking(Document):
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Case 1 worked (document_ptr first)")
+except Exception as e:
+    print(f"ERROR in case 1: {e}")
+
+# Test case 2: This should work according to the issue
+print("\n2. Testing case that should work (document_ptr second):")
+try:
+    class Picking2(Document2):
+        origin = models.OneToOneField(Document2, related_name='picking', on_delete=models.PROTECT)
+        document_ptr = models.OneToOneField(Document2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Case 2 worked (document_ptr second)")
+except Exception as e:
+    print(f"ERROR in case 2: {e}")
+
+print("\nTest completed.")
\ No newline at end of file
diff --git a/run_basic_tests.py b/run_basic_tests.py
new file mode 100644
index 0000000000..67bbbfa930
--- /dev/null
+++ b/run_basic_tests.py
@@ -0,0 +1,139 @@
+#!/usr/bin/env python3
+"""
+Run basic tests to ensure our fix doesn't break existing functionality.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Running basic model inheritance tests...")
+
+# Test 1: Basic model inheritance
+print("\n1. Testing basic model inheritance:")
+try:
+    class Parent(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+
+    class Child(Parent):
+        extra_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+    
+    print("SUCCESS: Basic inheritance works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 2: Explicit parent_link
+print("\n2. Testing explicit parent_link:")
+try:
+    class Parent2(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+
+    class Child2(Parent2):
+        extra_field = models.CharField(max_length=100)
+        parent2_ptr = models.OneToOneField(Parent2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_basic'
+    
+    print("SUCCESS: Explicit parent_link works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 3: Multi-level inheritance
+print("\n3. Testing multi-level inheritance:")
+try:
+    class GrandParent(models.Model):
+        grand_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+
+    class Parent3(GrandParent):
+        parent_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+
+    class Child3(Parent3):
+        child_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+    
+    print("SUCCESS: Multi-level inheritance works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 4: The original issue - multiple OneToOneFields
+print("\n4. Testing the original issue (multiple OneToOneFields):")
+try:
+    class Document(models.Model):
+        title = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+
+    class Picking(Document):
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        
+        class Meta:
+            app_label = 'test_basic'
+    
+    print("SUCCESS: Multiple OneToOneFields with parent_link first works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 5: The original issue - different order
+print("\n5. Testing the original issue (different order):")
+try:
+    class Document2(models.Model):
+        title = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_basic'
+
+    class Picking2(Document2):
+        origin = models.OneToOneField(Document2, related_name='picking', on_delete=models.PROTECT)
+        document_ptr = models.OneToOneField(Document2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_basic'
+    
+    print("SUCCESS: Multiple OneToOneFields with parent_link second works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nAll basic tests completed successfully!")
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..95535eae9f
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1 @@
+# Test app for reproducing the OneToOneField issue
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..71572e14e2
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,139 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to ensure the fix doesn't break other functionality.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Running comprehensive tests for OneToOneField parent_link functionality...")
+
+# Test 1: Basic inheritance with explicit parent_link
+print("\n1. Testing basic inheritance with explicit parent_link:")
+try:
+    class BaseModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class ChildModel(BaseModel):
+        extra_field = models.CharField(max_length=100)
+        base_ptr = models.OneToOneField(BaseModel, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Basic inheritance works")
+except Exception as e:
+    print(f"ERROR in basic inheritance: {e}")
+
+# Test 2: Multiple OneToOneFields, only one with parent_link=True (original issue)
+print("\n2. Testing multiple OneToOneFields with only one parent_link:")
+try:
+    class Document(models.Model):
+        title = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class Picking(Document):
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Multiple OneToOneFields with order 1 works")
+except Exception as e:
+    print(f"ERROR in multiple OneToOneFields order 1: {e}")
+
+# Test 3: Multiple OneToOneFields, different order
+print("\n3. Testing multiple OneToOneFields with different order:")
+try:
+    class Document2(models.Model):
+        title = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class Picking2(Document2):
+        origin = models.OneToOneField(Document2, related_name='picking', on_delete=models.PROTECT)
+        document_ptr = models.OneToOneField(Document2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Multiple OneToOneFields with order 2 works")
+except Exception as e:
+    print(f"ERROR in multiple OneToOneFields order 2: {e}")
+
+# Test 4: No explicit parent_link (should auto-create)
+print("\n4. Testing inheritance without explicit parent_link:")
+try:
+    class BaseModel2(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class ChildModel2(BaseModel2):
+        extra_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Auto-created parent_link works")
+except Exception as e:
+    print(f"ERROR in auto-created parent_link: {e}")
+
+# Test 5: Multiple inheritance levels
+print("\n5. Testing multiple inheritance levels:")
+try:
+    class GrandParent(models.Model):
+        grand_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class Parent(GrandParent):
+        parent_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class Child(Parent):
+        child_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Multiple inheritance levels work")
+except Exception as e:
+    print(f"ERROR in multiple inheritance levels: {e}")
+
+print("\nAll comprehensive tests completed.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..93dfaa1aaf
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,135 @@
+#!/usr/bin/env python3
+"""
+Test edge cases to ensure our fix handles all scenarios correctly.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Testing edge cases for parent_link functionality...")
+
+# Test 1: Multiple OneToOneFields with parent_link=False (should not interfere)
+print("\n1. Testing multiple OneToOneFields without parent_link:")
+try:
+    class Document(models.Model):
+        title = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class Picking(Document):
+        # Multiple OneToOneFields, none with parent_link=True
+        origin = models.OneToOneField(Document, related_name='picking1', on_delete=models.PROTECT)
+        destination = models.OneToOneField(Document, related_name='picking2', on_delete=models.PROTECT)
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Multiple OneToOneFields without parent_link work")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 2: Multiple OneToOneFields with multiple parent_link=True (invalid case)
+print("\n2. Testing multiple OneToOneFields with multiple parent_link=True:")
+try:
+    class Document2(models.Model):
+        title = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class Picking2(Document2):
+        # This should fail - multiple parent links
+        document_ptr1 = models.OneToOneField(Document2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        document_ptr2 = models.OneToOneField(Document2, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("UNEXPECTED: Multiple parent links should have failed")
+except Exception as e:
+    print(f"EXPECTED ERROR: {e}")
+
+# Test 3: Regular OneToOneField alongside parent_link
+print("\n3. Testing regular OneToOneField alongside parent_link:")
+try:
+    class Document3(models.Model):
+        title = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class Picking3(Document3):
+        document_ptr = models.OneToOneField(Document3, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        related_doc = models.OneToOneField(Document3, related_name='related_picking', on_delete=models.PROTECT)
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Regular OneToOneField alongside parent_link works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 4: Inheritance with abstract base class
+print("\n4. Testing inheritance with abstract base class:")
+try:
+    class AbstractBase(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            abstract = True
+            app_label = 'test_app'
+
+    class ConcreteChild(AbstractBase):
+        extra_field = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+    
+    print("SUCCESS: Abstract base class inheritance works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test 5: Proxy model with parent_link
+print("\n5. Testing proxy model (should not use parent_link):")
+try:
+    class BaseModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test_app'
+
+    class ProxyModel(BaseModel):
+        class Meta:
+            proxy = True
+            app_label = 'test_app'
+    
+    print("SUCCESS: Proxy model works")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
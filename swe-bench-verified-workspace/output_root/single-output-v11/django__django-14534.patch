diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 2ff8b0ee26..59987ee101 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -277,7 +277,7 @@ class BoundWidget:
 
     @property
     def id_for_label(self):
-        return 'id_%s_%s' % (self.data['name'], self.data['index'])
+        return self.data['attrs'].get('id', 'id_%s_%s' % (self.data['name'], self.data['index']))
 
     @property
     def choice_label(self):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..db2fef5930
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+"""
+Script to reproduce the BoundWidget.id_for_label issue
+"""
+
+import os
+import sys
+
+# Add the testbed directory to the path so we can import Django
+sys.path.insert(0, '/testbed')
+
+import django
+from django import forms
+from django.forms import CheckboxSelectMultiple
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+            },
+        },
+        SECRET_KEY='test_secret_key',
+        USE_TZ=True,
+        INSTALLED_APPS=[],
+    )
+django.setup()
+
+class TestForm(forms.Form):
+    """Test form with CheckboxSelectMultiple widget"""
+    choices = forms.MultipleChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2'), ('3', 'Option 3')],
+        widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),
+        required=False
+    )
+
+def test_bound_widget_id_for_label():
+    """Test that BoundWidget.id_for_label uses the correct ID"""
+    form = TestForm(auto_id='form_%s')
+    
+    # Get the bound field
+    bound_field = form['choices']
+    
+    # Get subwidgets
+    subwidgets = list(bound_field.subwidgets)
+    
+    print(f"Form auto_id: {form.auto_id}")
+    print(f"Number of subwidgets: {len(subwidgets)}")
+    
+    for i, subwidget in enumerate(subwidgets):
+        print(f"\nSubwidget {i}:")
+        print(f"  subwidget.data: {subwidget.data}")
+        print(f"  Current id_for_label: {subwidget.id_for_label}")
+        
+        # Check if attrs contains id
+        if 'attrs' in subwidget.data and 'id' in subwidget.data['attrs']:
+            print(f"  Expected id (from attrs): {subwidget.data['attrs']['id']}")
+        else:
+            print("  No 'id' found in attrs")
+
+if __name__ == '__main__':
+    test_bound_widget_id_for_label()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5f2e6d2f99
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+
+"""
+Script to test edge cases for BoundWidget.id_for_label fix
+"""
+
+import os
+import sys
+
+# Add the testbed directory to the path so we can import Django
+sys.path.insert(0, '/testbed')
+
+import django
+from django import forms
+from django.forms import CheckboxSelectMultiple, RadioSelect
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+            },
+        },
+        SECRET_KEY='test_secret_key',
+        USE_TZ=True,
+        INSTALLED_APPS=[],
+    )
+django.setup()
+
+def test_edge_cases():
+    """Test edge cases for BoundWidget.id_for_label"""
+    
+    # Test 1: No custom ID set (should use auto-generated ID)
+    form1 = forms.Form(auto_id='form_%s')
+    form1.fields['test'] = forms.ChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=CheckboxSelectMultiple(),
+    )
+    
+    bound_field1 = form1['test']
+    subwidgets1 = list(bound_field1.subwidgets)
+    
+    print("Test 1: No custom ID")
+    for i, subwidget in enumerate(subwidgets1):
+        print(f"  Subwidget {i}: id_for_label = {subwidget.id_for_label}")
+    
+    # Test 2: Custom ID set via widget attrs
+    form2 = forms.Form(auto_id='form_%s')
+    form2.fields['test'] = forms.ChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),
+    )
+    
+    bound_field2 = form2['test']
+    subwidgets2 = list(bound_field2.subwidgets)
+    
+    print("\nTest 2: Custom ID via widget attrs")
+    for i, subwidget in enumerate(subwidgets2):
+        print(f"  Subwidget {i}: id_for_label = {subwidget.id_for_label}")
+    
+    # Test 3: RadioSelect widget (should also work)
+    form3 = forms.Form(auto_id='form_%s')
+    form3.fields['test'] = forms.ChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=RadioSelect(attrs={'id': 'radio_id'}),
+    )
+    
+    bound_field3 = form3['test']
+    subwidgets3 = list(bound_field3.subwidgets)
+    
+    print("\nTest 3: RadioSelect with custom ID")
+    for i, subwidget in enumerate(subwidgets3):
+        print(f"  Subwidget {i}: id_for_label = {subwidget.id_for_label}")
+    
+    # Test 4: No auto_id (should handle gracefully)
+    form4 = forms.Form(auto_id=False)
+    form4.fields['test'] = forms.ChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=CheckboxSelectMultiple(),
+    )
+    
+    bound_field4 = form4['test']
+    subwidgets4 = list(bound_field4.subwidgets)
+    
+    print("\nTest 4: No auto_id")
+    for i, subwidget in enumerate(subwidgets4):
+        print(f"  Subwidget {i} data: {subwidget.data}")
+        print(f"  id_for_label = {subwidget.id_for_label}")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_final_verification.py b/test_final_verification.py
new file mode 100644
index 0000000000..73cf6c80fa
--- /dev/null
+++ b/test_final_verification.py
@@ -0,0 +1,112 @@
+#!/usr/bin/env python3
+
+"""
+Final verification test for BoundWidget.id_for_label fix
+"""
+
+import os
+import sys
+
+# Add the testbed directory to the path so we can import Django
+sys.path.insert(0, '/testbed')
+
+import django
+from django import forms
+from django.forms import CheckboxSelectMultiple, RadioSelect
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+            },
+        },
+        SECRET_KEY='test_secret_key',
+        USE_TZ=True,
+        INSTALLED_APPS=[],
+    )
+django.setup()
+
+def test_bound_widget_id_for_label_fix():
+    """Test the specific issue mentioned in the GitHub issue"""
+    
+    print("=== Testing BoundWidget.id_for_label fix ===")
+    
+    # Test 1: CheckboxSelectMultiple with custom ID
+    print("\n1. CheckboxSelectMultiple with custom ID")
+    form1 = forms.Form(auto_id='form_%s')
+    form1.fields['test'] = forms.MultipleChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),
+    )
+    
+    bound_field1 = form1['test']
+    subwidgets1 = list(bound_field1.subwidgets)
+    
+    for i, subwidget in enumerate(subwidgets1):
+        expected_id = f'custom_id_{i}'
+        actual_id = subwidget.id_for_label
+        status = "✓ PASS" if actual_id == expected_id else "✗ FAIL"
+        print(f"   Subwidget {i}: {actual_id} (expected: {expected_id}) {status}")
+        assert actual_id == expected_id, f"Expected {expected_id}, got {actual_id}"
+    
+    # Test 2: RadioSelect with custom ID
+    print("\n2. RadioSelect with custom ID")
+    form2 = forms.Form(auto_id='form_%s')
+    form2.fields['test'] = forms.ChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=RadioSelect(attrs={'id': 'radio_id'}),
+    )
+    
+    bound_field2 = form2['test']
+    subwidgets2 = list(bound_field2.subwidgets)
+    
+    for i, subwidget in enumerate(subwidgets2):
+        expected_id = f'radio_id_{i}'
+        actual_id = subwidget.id_for_label
+        status = "✓ PASS" if actual_id == expected_id else "✗ FAIL"
+        print(f"   Subwidget {i}: {actual_id} (expected: {expected_id}) {status}")
+        assert actual_id == expected_id, f"Expected {expected_id}, got {actual_id}"
+    
+    # Test 3: No custom ID (should fall back to original format)
+    print("\n3. No custom ID (fallback to original format)")
+    form3 = forms.Form(auto_id='form_%s')
+    form3.fields['test'] = forms.MultipleChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=CheckboxSelectMultiple(),
+    )
+    
+    bound_field3 = form3['test']
+    subwidgets3 = list(bound_field3.subwidgets)
+    
+    for i, subwidget in enumerate(subwidgets3):
+        expected_id = f'form_test_{i}'
+        actual_id = subwidget.id_for_label
+        status = "✓ PASS" if actual_id == expected_id else "✗ FAIL"
+        print(f"   Subwidget {i}: {actual_id} (expected: {expected_id}) {status}")
+        assert actual_id == expected_id, f"Expected {expected_id}, got {actual_id}"
+    
+    # Test 4: No auto_id (should fall back to original format)
+    print("\n4. No auto_id (fallback to original format)")
+    form4 = forms.Form(auto_id=False)
+    form4.fields['test'] = forms.MultipleChoiceField(
+        choices=[('1', 'Option 1'), ('2', 'Option 2')],
+        widget=CheckboxSelectMultiple(),
+    )
+    
+    bound_field4 = form4['test']
+    subwidgets4 = list(bound_field4.subwidgets)
+    
+    for i, subwidget in enumerate(subwidgets4):
+        expected_id = f'id_test_{i}'
+        actual_id = subwidget.id_for_label
+        status = "✓ PASS" if actual_id == expected_id else "✗ FAIL"
+        print(f"   Subwidget {i}: {actual_id} (expected: {expected_id}) {status}")
+        assert actual_id == expected_id, f"Expected {expected_id}, got {actual_id}"
+    
+    print("\n=== All tests passed! ===")
+
+if __name__ == '__main__':
+    test_bound_widget_id_for_label_fix()
\ No newline at end of file
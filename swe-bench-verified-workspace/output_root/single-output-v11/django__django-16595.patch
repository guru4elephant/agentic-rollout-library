diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index cd3aab43ad..e2682aeac0 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -264,6 +264,10 @@ class AlterField(FieldOperation):
                     field=self.field,
                 ),
             ]
+        elif isinstance(operation, AlterField) and self.is_same_field_operation(
+            operation
+        ):
+            return [operation]
         return super().reduce(operation, app_label)
 
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..83da8cc284
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_optimizer_issue():
+    """Test the issue with AlterField operations not being reduced"""
+    
+    # Create the operations as described in the issue
+    operations = [
+        migrations.AddField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help", default=None),
+        ),
+    ]
+    
+    optimizer = MigrationOptimizer()
+    
+    print("Testing full operations list:")
+    result = optimizer.optimize(operations, "books")
+    print(f"Result length: {len(result)}")
+    for op in result:
+        print(f"  {op}")
+    
+    print("\nTesting only AlterField operations (as described in issue):")
+    result2 = optimizer.optimize(operations[1:], "books")  # Only AlterField operations
+    print(f"Result length: {len(result2)}")
+    for op in result2:
+        print(f"  {op}")
+    
+    # The issue: result2 should be optimized to a single AlterField operation
+    # but currently it returns all three AlterField operations
+
+if __name__ == "__main__":
+    test_optimizer_issue()
\ No newline at end of file
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..1e7b837394
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_basic_optimizations():
+    """Test basic optimization functionality to ensure we didn't break anything"""
+    
+    optimizer = MigrationOptimizer()
+    
+    # Test 1: AddField + RemoveField should optimize to nothing
+    print("Test 1: AddField + RemoveField")
+    operations1 = [
+        migrations.AddField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=100),
+        ),
+        migrations.RemoveField(
+            model_name="book",
+            name="title",
+        ),
+    ]
+    result1 = optimizer.optimize(operations1, "books")
+    print(f"Result length: {len(result1)}")
+    for op in result1:
+        print(f"  {op}")
+    
+    # Test 2: AddField + AlterField should optimize to AddField with final field
+    print("\nTest 2: AddField + AlterField")
+    operations2 = [
+        migrations.AddField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+    ]
+    result2 = optimizer.optimize(operations2, "books")
+    print(f"Result length: {len(result2)}")
+    for op in result2:
+        print(f"  {op}")
+        if hasattr(op, 'field') and hasattr(op.field, 'max_length'):
+            print(f"    Field max_length: {op.field.max_length}")
+    
+    # Test 3: Multiple AlterField operations (our fix)
+    print("\nTest 3: Multiple AlterField operations")
+    operations3 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+    ]
+    result3 = optimizer.optimize(operations3, "books")
+    print(f"Result length: {len(result3)}")
+    for op in result3:
+        print(f"  {op}")
+        if hasattr(op, 'field') and hasattr(op.field, 'help_text'):
+            print(f"    Field help_text: {op.field.help_text}")
+
+if __name__ == "__main__":
+    test_basic_optimizations()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a06f3a920f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_edge_cases():
+    """Test edge cases for AlterField reduction"""
+    
+    optimizer = MigrationOptimizer()
+    
+    # Test case 1: Multiple AlterField operations on same field
+    print("Test case 1: Multiple AlterField operations on same field")
+    operations1 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+    ]
+    result1 = optimizer.optimize(operations1, "books")
+    print(f"Result length: {len(result1)}")
+    for op in result1:
+        print(f"  {op}")
+    
+    # Test case 2: AlterField operations on different fields (should not be reduced)
+    print("\nTest case 2: AlterField operations on different fields")
+    operations2 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="author",
+            field=models.CharField(max_length=128),
+        ),
+    ]
+    result2 = optimizer.optimize(operations2, "books")
+    print(f"Result length: {len(result2)}")
+    for op in result2:
+        print(f"  {op}")
+    
+    # Test case 3: AlterField operations on different models (should not be reduced)
+    print("\nTest case 3: AlterField operations on different models")
+    operations3 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="author",
+            name="name",
+            field=models.CharField(max_length=128),
+        ),
+    ]
+    result3 = optimizer.optimize(operations3, "books")
+    print(f"Result length: {len(result3)}")
+    for op in result3:
+        print(f"  {op}")
+    
+    # Test case 4: Mix of AlterField and other operations
+    print("\nTest case 4: Mix of AlterField and other operations")
+    operations4 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.RemoveField(
+            model_name="book",
+            name="author",
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+    ]
+    result4 = optimizer.optimize(operations4, "books")
+    print(f"Result length: {len(result4)}")
+    for op in result4:
+        print(f"  {op}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_github_issue_case.py b/test_github_issue_case.py
new file mode 100644
index 0000000000..9618916e14
--- /dev/null
+++ b/test_github_issue_case.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_github_issue_case():
+    """Test the exact case described in the GitHub issue"""
+    
+    optimizer = MigrationOptimizer()
+    
+    # Exact operations from the GitHub issue
+    operations = [
+        migrations.AddField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help", default=None),
+        ),
+    ]
+    
+    print("Testing full operations list (should optimize to AddField):")
+    result = optimizer.optimize(operations, "books")
+    print(f"Result length: {len(result)}")
+    for op in result:
+        print(f"  {op}")
+    
+    print("\nTesting only AlterField operations (issue case - should optimize to single AlterField):")
+    result2 = optimizer.optimize(operations[1:], "books")  # Only AlterField operations
+    print(f"Result length: {len(result2)}")
+    for op in result2:
+        print(f"  {op}")
+    
+    # Verify the final field has the correct attributes
+    if len(result2) == 1 and hasattr(result2[0], 'field'):
+        field = result2[0].field
+        print(f"\nFinal field attributes:")
+        print(f"  max_length: {getattr(field, 'max_length', 'N/A')}")
+        print(f"  null: {getattr(field, 'null', 'N/A')}")
+        print(f"  help_text: {getattr(field, 'help_text', 'N/A')}")
+        print(f"  default: {getattr(field, 'default', 'N/A')}")
+        
+        # Verify it matches the last AlterField operation
+        expected_field = operations[-1].field
+        assert field.max_length == expected_field.max_length
+        assert field.null == expected_field.null
+        assert field.help_text == expected_field.help_text
+        assert field.default == expected_field.default
+        print("✓ All field attributes match the last AlterField operation")
+
+if __name__ == "__main__":
+    test_github_issue_case()
\ No newline at end of file
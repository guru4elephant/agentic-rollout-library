diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index fdac0f3560..3a61e89e14 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -2180,12 +2180,12 @@ class Axes(_AxesBase):
             # wrap numpy arrays.
             try:
                 x0 = cbook._safe_first_finite(x0)
-            except (TypeError, IndexError, KeyError):
+            except (TypeError, IndexError, KeyError, StopIteration):
                 pass
 
             try:
                 x = cbook._safe_first_finite(xconv)
-            except (TypeError, IndexError, KeyError):
+            except (TypeError, IndexError, KeyError, StopIteration):
                 x = xconv
 
             delist = False
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ba54ac7e36
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Reproduce the issue described in the GitHub issue
+f, ax = plt.subplots()
+try:
+    result = ax.bar([np.nan], [np.nan])
+    print("Success: No exception raised")
+    print(f"Result type: {type(result)}")
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Exception raised: {type(e).__name__}: {e}")
+
+# Test the additional debugging cases mentioned in the issue
+print("\nTesting additional cases:")
+try:
+    result1 = ax.bar([np.nan], [0])
+    print("ax.bar([np.nan], [0]) - Success")
+except Exception as e:
+    print(f"ax.bar([np.nan], [0]) - Exception: {type(e).__name__}: {e}")
+
+try:
+    result2 = ax.bar([0], [np.nan])
+    print("ax.bar([0], [np.nan]) - Success")
+except Exception as e:
+    print(f"ax.bar([0], [np.nan]) - Exception: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..68fe0fec68
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test various edge cases to ensure the fix is robust
+f, ax = plt.subplots()
+
+print("Testing edge cases for ax.bar with NaN values:")
+
+# Test case 1: All NaN in x, valid height
+try:
+    result = ax.bar([np.nan, np.nan], [1, 2])
+    print("✓ ax.bar([np.nan, np.nan], [1, 2]) - Success")
+except Exception as e:
+    print(f"✗ ax.bar([np.nan, np.nan], [1, 2]) - Exception: {type(e).__name__}: {e}")
+
+# Test case 2: All NaN in x, all NaN in height
+try:
+    result = ax.bar([np.nan, np.nan], [np.nan, np.nan])
+    print("✓ ax.bar([np.nan, np.nan], [np.nan, np.nan]) - Success")
+except Exception as e:
+    print(f"✗ ax.bar([np.nan, np.nan], [np.nan, np.nan]) - Exception: {type(e).__name__}: {e}")
+
+# Test case 3: Mixed NaN and valid values in x
+try:
+    result = ax.bar([np.nan, 1, np.nan], [1, 2, 3])
+    print("✓ ax.bar([np.nan, 1, np.nan], [1, 2, 3]) - Success")
+except Exception as e:
+    print(f"✗ ax.bar([np.nan, 1, np.nan], [1, 2, 3]) - Exception: {type(e).__name__}: {e}")
+
+# Test case 4: Empty arrays
+try:
+    result = ax.bar([], [])
+    print("✓ ax.bar([], []) - Success")
+except Exception as e:
+    print(f"✗ ax.bar([], []) - Exception: {type(e).__name__}: {e}")
+
+# Test case 5: Single NaN value with different widths
+try:
+    result = ax.bar([np.nan], [1], width=0.5)
+    print("✓ ax.bar([np.nan], [1], width=0.5) - Success")
+except Exception as e:
+    print(f"✗ ax.bar([np.nan], [1], width=0.5) - Exception: {type(e).__name__}: {e}")
+
+# Test case 6: Verify that normal bar plots still work
+try:
+    result = ax.bar([1, 2, 3], [4, 5, 6])
+    print("✓ ax.bar([1, 2, 3], [4, 5, 6]) - Success")
+except Exception as e:
+    print(f"✗ ax.bar([1, 2, 3], [4, 5, 6]) - Exception: {type(e).__name__}: {e}")
+
+print("\nAll edge case tests completed.")
\ No newline at end of file
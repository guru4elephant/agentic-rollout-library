diff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py
index 4b6150f4ac..1f51fe4835 100644
--- a/astropy/io/fits/connect.py
+++ b/astropy/io/fits/connect.py
@@ -69,7 +69,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):
             (".fits", ".fits.gz", ".fit", ".fit.gz", ".fts", ".fts.gz")
         ):
             return True
-    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))
+    return len(args) > 0 and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))
 
 
 def _decode_mixins(tbl):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..7cf7adf9c0
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+
+from astropy.io.registry import identify_format
+from astropy.table import Table
+from astropy.io.fits import HDUList, TableHDU, BinTableHDU, GroupsHDU
+
+def test_original_issue():
+    """Test the exact scenario from the GitHub issue"""
+    print("Testing original GitHub issue scenario...")
+    try:
+        result = identify_format("write", Table, "bububu.ecsv", None, [], {})
+        print(f"✓ Success: {result}")
+        return True
+    except IndexError as e:
+        print(f"✗ IndexError still occurs: {e}")
+        return False
+    except Exception as e:
+        print(f"✗ Other error: {e}")
+        return False
+
+def test_edge_cases():
+    """Test various edge cases"""
+    print("\nTesting edge cases...")
+    
+    # Test with empty tuple args
+    try:
+        result = identify_format("write", Table, "test.txt", None, (), {})
+        print(f"✓ Empty tuple args: {result}")
+    except Exception as e:
+        print(f"✗ Empty tuple args failed: {e}")
+    
+    # Test with single element tuple (not HDU)
+    try:
+        result = identify_format("write", Table, "test.txt", None, ("string",), {})
+        print(f"✓ Non-HDU args: {result}")
+    except Exception as e:
+        print(f"✗ Non-HDU args failed: {e}")
+    
+    # Test with actual HDU object
+    try:
+        hdul = HDUList()
+        result = identify_format("write", Table, None, None, [hdul], {})
+        print(f"✓ HDUList args: {result}")
+    except Exception as e:
+        print(f"✗ HDUList args failed: {e}")
+    
+    # Test with different operation
+    try:
+        result = identify_format("read", Table, "test.fits", None, [], {})
+        print(f"✓ Read operation: {result}")
+    except Exception as e:
+        print(f"✗ Read operation failed: {e}")
+
+def main():
+    print("Running final comprehensive tests...")
+    
+    success1 = test_original_issue()
+    test_edge_cases()
+    
+    if success1:
+        print("\n🎉 All tests passed! The IndexError has been fixed.")
+    else:
+        print("\n❌ The original issue is not fixed.")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 41865a87d1..922d14bf49 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..eea8da1db8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python3
+
+from astropy.io.registry import identify_format
+from astropy.table import Table
+
+# This should reproduce the IndexError mentioned in the issue
+try:
+    result = identify_format("write", Table, "bububu.ecsv", None, [], {})
+    print("Success:", result)
+except IndexError as e:
+    print("IndexError reproduced:", e)
+except Exception as e:
+    print("Other error:", e)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..f97a4094b1
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+from astropy.io.registry import identify_format
+from astropy.table import Table
+from astropy.io.fits import HDUList, TableHDU, BinTableHDU, GroupsHDU
+
+def test_cases():
+    print("Testing various identify_format scenarios...")
+    
+    # Test 1: Empty args (original issue)
+    print("\n1. Testing with empty args (original issue):")
+    try:
+        result = identify_format("write", Table, "bububu.ecsv", None, [], {})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 2: FITS extension should still work
+    print("\n2. Testing with FITS extension:")
+    try:
+        result = identify_format("write", Table, "bububu.fits", None, [], {})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 3: Non-FITS extension
+    print("\n3. Testing with non-FITS extension:")
+    try:
+        result = identify_format("write", Table, "bububu.txt", None, [], {})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 4: With actual HDU object (should work)
+    print("\n4. Testing with HDUList object:")
+    try:
+        hdul = HDUList()
+        result = identify_format("write", Table, None, None, [hdul], {})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 5: Read operation instead of write
+    print("\n5. Testing read operation:")
+    try:
+        result = identify_format("read", Table, "bububu.ecsv", None, [], {})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    print("\nAll tests completed!")
+
+if __name__ == "__main__":
+    test_cases()
\ No newline at end of file
diff --git a/test_is_fits_direct.py b/test_is_fits_direct.py
new file mode 100644
index 0000000000..c850ed0b08
--- /dev/null
+++ b/test_is_fits_direct.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+from astropy.io.fits.connect import is_fits
+from astropy.io.fits import HDUList
+
+def test_is_fits():
+    print("Testing is_fits function directly...")
+    
+    # Test 1: Empty args (should return False, not crash)
+    print("\n1. Testing with empty args:")
+    try:
+        result = is_fits("write", "test.ecsv", None, *[], **{})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 2: FITS extension (should return True)
+    print("\n2. Testing with FITS extension:")
+    try:
+        result = is_fits("write", "test.fits", None, *[], **{})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 3: With HDUList object (should return True)
+    print("\n3. Testing with HDUList:")
+    try:
+        hdul = HDUList()
+        result = is_fits("write", None, None, *[hdul], **{})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    # Test 4: Non-FITS extension (should return False)
+    print("\n4. Testing with non-FITS extension:")
+    try:
+        result = is_fits("write", "test.txt", None, *[], **{})
+        print(f"   Success: {result}")
+    except Exception as e:
+        print(f"   Error: {e}")
+    
+    print("\nAll tests completed!")
+
+if __name__ == "__main__":
+    test_is_fits()
\ No newline at end of file
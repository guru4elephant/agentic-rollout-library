diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..8a5c04393b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, AlterTogetherOptionOperation)
             and self.name_lower == operation.name_lower
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..3e49661fca
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure minimal Django settings
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=[],
+        USE_TZ=True,
+        SECRET_KEY='test',
+    )
+django.setup()
+
+from django.db.migrations.operations.models import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_optimization():
+    """Test the new CreateModel + AlterModelManagers optimization"""
+    optimizer = MigrationOptimizer()
+    
+    # Test 1: Basic optimization
+    print("Test 1: Basic optimization")
+    create_model = CreateModel(
+        'TestModel',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        managers=[('objects', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers = AlterModelManagers(
+        'TestModel',
+        managers=[('custom_manager', 'django.db.models.Manager()')]
+    )
+    
+    operations = [create_model, alter_managers]
+    optimized = optimizer.optimize(operations, 'test_app')
+    
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    assert isinstance(optimized[0], CreateModel), f"Expected CreateModel, got {type(optimized[0])}"
+    assert optimized[0].managers == [('custom_manager', 'django.db.models.Manager()')]
+    print("✓ Basic optimization test passed")
+    
+    # Test 2: Different model names should not optimize
+    print("\nTest 2: Different model names")
+    create_model = CreateModel(
+        'ModelA',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        managers=[('objects', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers = AlterModelManagers(
+        'ModelB',  # Different model name
+        managers=[('custom_manager', 'django.db.models.Manager()')]
+    )
+    
+    operations = [create_model, alter_managers]
+    optimized = optimizer.optimize(operations, 'test_app')
+    
+    assert len(optimized) == 2, f"Expected 2 operations (no optimization), got {len(optimized)}"
+    print("✓ Different model names test passed")
+    
+    # Test 3: Multiple AlterModelManagers should use the last one
+    print("\nTest 3: Multiple AlterModelManagers")
+    create_model = CreateModel(
+        'TestModel',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        managers=[('objects', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers1 = AlterModelManagers(
+        'TestModel',
+        managers=[('manager1', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers2 = AlterModelManagers(
+        'TestModel',
+        managers=[('manager2', 'django.db.models.Manager()')]
+    )
+    
+    operations = [create_model, alter_managers1, alter_managers2]
+    optimized = optimizer.optimize(operations, 'test_app')
+    
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    assert optimized[0].managers == [('manager2', 'django.db.models.Manager()')]
+    print("✓ Multiple AlterModelManagers test passed")
+    
+    print("\n✓ All tests passed! The optimization is working correctly.")
+
+if __name__ == '__main__':
+    test_optimization()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..79521e0e3d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'django'))
+
+from django.db.migrations.operations.models import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+# Test case: CreateModel + AlterModelManagers should be optimized to CreateModel
+def test_optimization():
+    optimizer = MigrationOptimizer()
+    
+    # Create a CreateModel operation
+    create_model = CreateModel(
+        'TestModel',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        options={},
+        managers=[('objects', 'django.db.models.Manager()')]
+    )
+    
+    # Create an AlterModelManagers operation
+    alter_managers = AlterModelManagers(
+        'TestModel',
+        managers=[('custom_manager', 'django.db.models.Manager()')]
+    )
+    
+    # Test if they can be optimized
+    operations = [create_model, alter_managers]
+    print("Original operations:")
+    for op in operations:
+        print(f"  {op.__class__.__name__}: {op.describe()}")
+    
+    # Try to optimize
+    optimized_operations = optimizer.optimize(operations, 'test_app')
+    
+    print("\nOptimized operations:")
+    for op in optimized_operations:
+        print(f"  {op.__class__.__name__}: {op.describe()}")
+    
+    # Check if optimization worked
+    if len(optimized_operations) == 1 and isinstance(optimized_operations[0], CreateModel):
+        print("\n✓ Optimization successful: CreateModel + AlterModelManagers -> CreateModel")
+        return True
+    else:
+        print("\n✗ Optimization failed")
+        return False
+
+if __name__ == '__main__':
+    success = test_optimization()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/run_optimizer_tests.py b/run_optimizer_tests.py
new file mode 100644
index 0000000000..1aa8dd92be
--- /dev/null
+++ b/run_optimizer_tests.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'django'))
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[],
+        USE_TZ=True,
+    )
+
+from django.test import TestCase
+from django.db.migrations.operations.models import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+class OptimizerTests(TestCase):
+    def test_create_model_alter_managers_optimization(self):
+        """Test that CreateModel + AlterModelManagers optimizes to CreateModel"""
+        optimizer = MigrationOptimizer()
+        
+        create_model = CreateModel(
+            'TestModel',
+            fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+            managers=[('objects', 'django.db.models.Manager()')]
+        )
+        
+        alter_managers = AlterModelManagers(
+            'TestModel',
+            managers=[('custom_manager', 'django.db.models.Manager()')]
+        )
+        
+        operations = [create_model, alter_managers]
+        optimized = optimizer.optimize(operations, 'test_app')
+        
+        self.assertEqual(len(optimized), 1)
+        self.assertIsInstance(optimized[0], CreateModel)
+        self.assertEqual(optimized[0].managers, [('custom_manager', 'django.db.models.Manager()')])
+
+    def test_optimization_different_model_names(self):
+        """Test that optimization doesn't happen for different model names"""
+        optimizer = MigrationOptimizer()
+        
+        create_model = CreateModel(
+            'ModelA',
+            fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+            managers=[('objects', 'django.db.models.Manager()')]
+        )
+        
+        alter_managers = AlterModelManagers(
+            'ModelB',  # Different model name
+            managers=[('custom_manager', 'django.db.models.Manager()')]
+        )
+        
+        operations = [create_model, alter_managers]
+        optimized = optimizer.optimize(operations, 'test_app')
+        
+        self.assertEqual(len(optimized), 2)  # Should not be optimized
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..74e611ed02
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,110 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'django'))
+
+from django.db.migrations.operations.models import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_basic_optimization():
+    """Test basic CreateModel + AlterModelManagers optimization"""
+    optimizer = MigrationOptimizer()
+    
+    create_model = CreateModel(
+        'TestModel',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        options={},
+        managers=[('objects', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers = AlterModelManagers(
+        'TestModel',
+        managers=[('custom_manager', 'django.db.models.Manager()')]
+    )
+    
+    operations = [create_model, alter_managers]
+    optimized = optimizer.optimize(operations, 'test_app')
+    
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    assert isinstance(optimized[0], CreateModel), f"Expected CreateModel, got {type(optimized[0])}"
+    assert optimized[0].managers == [('custom_manager', 'django.db.models.Manager()')]
+    print("✓ Basic optimization test passed")
+
+def test_different_model_names():
+    """Test that optimization doesn't happen for different model names"""
+    optimizer = MigrationOptimizer()
+    
+    create_model = CreateModel(
+        'ModelA',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        managers=[('objects', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers = AlterModelManagers(
+        'ModelB',  # Different model name
+        managers=[('custom_manager', 'django.db.models.Manager()')]
+    )
+    
+    operations = [create_model, alter_managers]
+    optimized = optimizer.optimize(operations, 'test_app')
+    
+    assert len(optimized) == 2, f"Expected 2 operations (no optimization), got {len(optimized)}"
+    print("✓ Different model names test passed")
+
+def test_multiple_alter_managers():
+    """Test that multiple AlterModelManagers operations are handled correctly"""
+    optimizer = MigrationOptimizer()
+    
+    create_model = CreateModel(
+        'TestModel',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        managers=[('objects', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers1 = AlterModelManagers(
+        'TestModel',
+        managers=[('manager1', 'django.db.models.Manager()')]
+    )
+    
+    alter_managers2 = AlterModelManagers(
+        'TestModel',
+        managers=[('manager2', 'django.db.models.Manager()')]
+    )
+    
+    operations = [create_model, alter_managers1, alter_managers2]
+    optimized = optimizer.optimize(operations, 'test_app')
+    
+    # Should optimize to CreateModel with the last manager configuration
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    assert optimized[0].managers == [('manager2', 'django.db.models.Manager()')]
+    print("✓ Multiple AlterModelManagers test passed")
+
+def test_no_initial_managers():
+    """Test optimization when CreateModel has no initial managers"""
+    optimizer = MigrationOptimizer()
+    
+    create_model = CreateModel(
+        'TestModel',
+        fields=[('id', 'django.db.models.AutoField(primary_key=True)')],
+        managers=[]  # No initial managers
+    )
+    
+    alter_managers = AlterModelManagers(
+        'TestModel',
+        managers=[('custom_manager', 'django.db.models.Manager()')]
+    )
+    
+    operations = [create_model, alter_managers]
+    optimized = optimizer.optimize(operations, 'test_app')
+    
+    assert len(optimized) == 1
+    assert optimized[0].managers == [('custom_manager', 'django.db.models.Manager()')]
+    print("✓ No initial managers test passed")
+
+if __name__ == '__main__':
+    test_basic_optimization()
+    test_different_model_names()
+    test_multiple_alter_managers()
+    test_no_initial_managers()
+    print("\n✓ All comprehensive tests passed!")
\ No newline at end of file
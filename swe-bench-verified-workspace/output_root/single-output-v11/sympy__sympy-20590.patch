diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..9af484973a
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+
+import sympy
+
+def test_symbol_attributes():
+    print("Testing Symbol attributes after fix...")
+    
+    # Create a Symbol instance
+    s = sympy.Symbol('s')
+    
+    # Test 1: __dict__ should not exist
+    try:
+        symbol_dict = s.__dict__
+        print(f"FAIL: Symbol.__dict__ exists and returns: {symbol_dict}")
+        return False
+    except AttributeError:
+        print("✓ PASS: Symbol does not have __dict__ attribute")
+    
+    # Test 2: __slots__ should exist and be correct
+    try:
+        symbol_slots = s.__slots__
+        expected_slots = ('name',)
+        if symbol_slots == expected_slots:
+            print(f"✓ PASS: Symbol.__slots__ is correct: {symbol_slots}")
+        else:
+            print(f"FAIL: Symbol.__slots__ is {symbol_slots}, expected {expected_slots}")
+            return False
+    except AttributeError:
+        print("FAIL: Symbol does not have __slots__ attribute")
+        return False
+    
+    # Test 3: Symbol should work normally
+    try:
+        x = sympy.Symbol('x')
+        y = sympy.Symbol('y')
+        expr = x + y
+        result = expr.subs(x, 5).subs(y, 3)
+        if result == 8:
+            print("✓ PASS: Symbol arithmetic works correctly")
+        else:
+            print(f"FAIL: Symbol arithmetic failed, got {result}, expected 8")
+            return False
+    except Exception as e:
+        print(f"FAIL: Symbol functionality broken: {e}")
+        return False
+    
+    # Test 4: Check instances of other classes in the hierarchy
+    instances_to_check = [
+        sympy.Symbol('test'),
+        sympy.Dummy('d'),
+        sympy.Wild('w'),
+        sympy.Number(5),  # Should also not have __dict__
+    ]
+    
+    for instance in instances_to_check:
+        if hasattr(instance, '__dict__'):
+            print(f"FAIL: {type(instance).__name__} instance has __dict__")
+            return False
+        else:
+            print(f"✓ PASS: {type(instance).__name__} instance does not have __dict__")
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_symbol_attributes()
+    if success:
+        print("\n✓ All tests passed!")
+    else:
+        print("\n✗ Some tests failed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3e4fe71a44
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+import sympy
+
+def test_symbol_dict():
+    print("Testing Symbol __dict__ attribute...")
+    
+    # Create a Symbol instance
+    s = sympy.Symbol('s')
+    
+    # Test if __dict__ exists
+    try:
+        symbol_dict = s.__dict__
+        print(f"Symbol.__dict__ exists and returns: {symbol_dict}")
+        print("ISSUE: Symbol should not have __dict__ attribute (should use __slots__)")
+        return False
+    except AttributeError as e:
+        print(f"GOOD: Symbol does not have __dict__ attribute: {e}")
+        return True
+    
+    # Test __slots__
+    try:
+        symbol_slots = s.__slots__
+        print(f"Symbol.__slots__: {symbol_slots}")
+    except AttributeError as e:
+        print(f"Symbol does not have __slots__ attribute: {e}")
+        return False
+
+if __name__ == "__main__":
+    success = test_symbol_dict()
+    if success:
+        print("✓ Issue is NOT present - Symbol correctly uses __slots__")
+    else:
+        print("✗ Issue IS present - Symbol incorrectly has __dict__")
\ No newline at end of file
diff --git a/sympy/core/_print_helpers.py b/sympy/core/_print_helpers.py
index 96d7e72676..f7875b9eec 100644
--- a/sympy/core/_print_helpers.py
+++ b/sympy/core/_print_helpers.py
@@ -17,6 +17,8 @@ class Printable:
     This also adds support for LaTeX printing in jupyter notebooks.
     """
 
+    __slots__ = ()
+
     # Note, we always use the default ordering (lex) in __str__ and __repr__,
     # regardless of the global setting. See issue 5487.
     def __str__(self):
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..9965548e71
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+import sympy
+
+def test_github_issue_reproduction():
+    """Reproduce the exact scenario from the GitHub issue"""
+    print("Reproducing GitHub issue scenario...")
+    
+    # Test 1: Symbol should not have __dict__ (this was the issue)
+    try:
+        symbol_dict = sympy.Symbol('s').__dict__
+        print(f"FAIL: sympy.Symbol('s').__dict__ exists and returns: {symbol_dict}")
+        return False
+    except AttributeError as e:
+        print(f"✓ PASS: sympy.Symbol('s').__dict__ raises AttributeError: {e}")
+    
+    # Test 2: Symbol should have __slots__ with correct value
+    try:
+        symbol_slots = sympy.Symbol('s').__slots__
+        expected_slots = ('name',)
+        if symbol_slots == expected_slots:
+            print(f"✓ PASS: sympy.Symbol('s').__slots__ returns correct value: {symbol_slots}")
+        else:
+            print(f"FAIL: sympy.Symbol('s').__slots__ returns {symbol_slots}, expected {expected_slots}")
+            return False
+    except AttributeError as e:
+        print(f"FAIL: sympy.Symbol('s').__slots__ raises AttributeError: {e}")
+        return False
+    
+    # Test 3: Verify the behavior matches what was expected in version 1.6.2
+    print("\nTesting behavior matches sympy 1.6.2:")
+    s = sympy.Symbol('s')
+    
+    # Should not have __dict__
+    try:
+        s.__dict__
+        print("FAIL: Symbol instance has __dict__")
+        return False
+    except AttributeError:
+        print("✓ PASS: Symbol instance does not have __dict__")
+    
+    # Should have __slots__ with value ('name',)
+    try:
+        slots = s.__slots__
+        if slots == ('name',):
+            print(f"✓ PASS: Symbol.__slots__ is correct: {slots}")
+        else:
+            print(f"FAIL: Symbol.__slots__ is {slots}, expected ('name',)")
+            return False
+    except AttributeError:
+        print("FAIL: Symbol instance does not have __slots__")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_github_issue_reproduction()
+    if success:
+        print("\n✓ GitHub issue is FIXED! Symbol instances no longer have __dict__")
+    else:
+        print("\n✗ GitHub issue is NOT fixed")
\ No newline at end of file
diff --git a/comprehensive_test_output.png b/comprehensive_test_output.png
new file mode 100644
index 0000000000..0e1db6b75a
Binary files /dev/null and b/comprehensive_test_output.png differ
diff --git a/final_verification.png b/final_verification.png
new file mode 100644
index 0000000000..77b1010acb
Binary files /dev/null and b/final_verification.png differ
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..7c3b1fd91c
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,25 @@
+import matplotlib.pyplot as plt
+
+print("Final verification - testing the exact code from the GitHub issue:")
+
+# This is the exact code from the GitHub issue that was failing
+subfig = plt.figure().subfigures()
+ax = subfig.subplots()
+ax.plot([0, 1, 2], [0, 1, 2], label="test")
+subfig.legend()
+
+print("✓ The exact code from the GitHub issue now works without errors!")
+
+# Let's also test that the legend is properly functional
+legend = subfig.legend()
+print(f"✓ Legend object created: {legend}")
+print(f"✓ Legend type: {type(legend)}")
+print(f"✓ Legend parent: {legend.parent}")
+print(f"✓ Legend parent type: {type(legend.parent)}")
+
+# Verify that the parent is indeed a SubFigure
+from matplotlib.figure import SubFigure
+print(f"✓ Parent is SubFigure: {isinstance(legend.parent, SubFigure)}")
+
+plt.savefig('final_verification.png')
+print("✓ Final verification figure saved")
\ No newline at end of file
diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index 44ab024698..f492b46918 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -360,7 +360,7 @@ class Legend(Artist):
         """
         # local import only to avoid circularity
         from matplotlib.axes import Axes
-        from matplotlib.figure import Figure
+        from matplotlib.figure import Figure, FigureBase
 
         super().__init__()
 
@@ -434,7 +434,7 @@ class Legend(Artist):
             self.isaxes = True
             self.axes = parent
             self.set_figure(parent.figure)
-        elif isinstance(parent, Figure):
+        elif isinstance(parent, (Figure, FigureBase)):
             self.isaxes = False
             self.set_figure(parent)
         else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dbd24e812f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+import matplotlib.pyplot as plt
+
+subfig = plt.figure().subfigures()
+ax = subfig.subplots()
+ax.plot([0, 1, 2], [0, 1, 2], label="test")
+legend = subfig.legend()
+print(f"Legend created successfully: {legend}")
+plt.savefig('test_output.png')
+print("Figure saved as test_output.png")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..aa0a2416ff
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,61 @@
+import matplotlib.pyplot as plt
+
+print("Testing edge cases for SubFigure legend functionality...")
+
+# Test 1: Basic functionality (already tested)
+print("\n1. Testing basic SubFigure legend:")
+fig = plt.figure()
+subfig = fig.subfigures()
+ax = subfig.subplots()
+ax.plot([0, 1, 2], [0, 1, 2], label="test line")
+legend = subfig.legend()
+print(f"   ✓ Basic legend created: {legend}")
+
+# Test 2: Multiple subfigures with legends
+print("\n2. Testing multiple subfigures with legends:")
+fig = plt.figure()
+subfigs = fig.subfigures(1, 2)
+for i, subfig in enumerate(subfigs):
+    ax = subfig.subplots()
+    ax.plot([0, 1, 2], [i, i+1, i+2], label=f"line {i+1}")
+    legend = subfig.legend()
+    print(f"   ✓ Subfigure {i+1} legend created: {legend}")
+
+# Test 3: Nested subfigures
+print("\n3. Testing nested subfigures:")
+fig = plt.figure()
+subfig1 = fig.subfigures()
+subfig2 = subfig1.subfigures()
+ax = subfig2.subplots()
+ax.plot([0, 1, 2], [2, 1, 0], label="nested line")
+legend = subfig2.legend()
+print(f"   ✓ Nested subfigure legend created: {legend}")
+
+# Test 4: Custom legend parameters
+print("\n4. Testing custom legend parameters:")
+fig = plt.figure()
+subfig = fig.subfigures()
+ax = subfig.subplots()
+ax.plot([0, 1, 2], [0, 1, 2], label="test line")
+legend = subfig.legend(loc='upper left', title='Test Legend')
+print(f"   ✓ Custom legend created: {legend}")
+
+# Test 5: Verify that regular Figure legends still work
+print("\n5. Testing regular Figure legend (regression test):")
+fig = plt.figure()
+ax = fig.subplots()
+ax.plot([0, 1, 2], [0, 1, 2], label="test line")
+legend = fig.legend()
+print(f"   ✓ Regular figure legend created: {legend}")
+
+# Test 6: Verify that Axes legends still work
+print("\n6. Testing Axes legend (regression test):")
+fig = plt.figure()
+ax = fig.subplots()
+ax.plot([0, 1, 2], [0, 1, 2], label="test line")
+legend = ax.legend()
+print(f"   ✓ Axes legend created: {legend}")
+
+print("\nAll tests passed! ✓")
+plt.savefig('comprehensive_test_output.png')
+print("Comprehensive test figure saved as comprehensive_test_output.png")
\ No newline at end of file
diff --git a/test_output.png b/test_output.png
new file mode 100644
index 0000000000..a96db3ab31
Binary files /dev/null and b/test_output.png differ
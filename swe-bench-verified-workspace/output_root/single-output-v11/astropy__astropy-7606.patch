diff --git a/astropy/units/core.py b/astropy/units/core.py
index e9bd986d33..1b202395e9 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -1710,6 +1710,8 @@ class UnrecognizedUnit(IrreducibleUnit):
         _unrecognized_operator
 
     def __eq__(self, other):
+        if other is None:
+            return False
         other = Unit(other, parse_strict='silent')
         return isinstance(other, UnrecognizedUnit) and self.name == other.name
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0282896593
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+# Create an UnrecognizedUnit
+x = u.Unit('asdf', parse_strict='silent')
+print(f"Created UnrecognizedUnit: {x}")
+print(f"Type: {type(x)}")
+
+# Try to compare with None - this should raise TypeError according to the issue
+try:
+    result = x == None
+    print(f"x == None: {result}")
+except TypeError as e:
+    print(f"Error occurred: {e}")
+    print("This confirms the issue exists")
+
+# Also test with other values for comparison
+try:
+    result = x == "asdf"
+    print(f"x == 'asdf': {result}")
+except Exception as e:
+    print(f"Error comparing with string: {e}")
+
+try:
+    result = x == u.Unit('asdf', parse_strict='silent')
+    print(f"x == same UnrecognizedUnit: {result}")
+except Exception as e:
+    print(f"Error comparing with same UnrecognizedUnit: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6eb4e84d38
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+# Create an UnrecognizedUnit
+x = u.Unit('asdf', parse_strict='silent')
+print(f"Created UnrecognizedUnit: {x}")
+
+# Test various edge cases
+test_cases = [
+    None,
+    "",
+    "different_string",
+    0,
+    1.0,
+    [],
+    {},
+    u.Unit('asdf', parse_strict='silent'),  # Same unit
+    u.Unit('different', parse_strict='silent'),  # Different unrecognized unit
+    u.Unit('m', parse_strict='silent'),  # Valid unit
+]
+
+for case in test_cases:
+    try:
+        result = x == case
+        print(f"x == {case}: {result}")
+    except Exception as e:
+        print(f"Error comparing with {case}: {e}")
+
+# Test inequality as well
+try:
+    result = x != None
+    print(f"x != None: {result}")
+except Exception as e:
+    print(f"Error with inequality: {e}")
\ No newline at end of file
diff --git a/test_unrecognized_unit_none_comparison.py b/test_unrecognized_unit_none_comparison.py
new file mode 100644
index 0000000000..0b749fa44d
--- /dev/null
+++ b/test_unrecognized_unit_none_comparison.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+def test_unrecognized_unit_none_comparison():
+    """Test that UnrecognizedUnit can be compared with None without raising TypeError"""
+    
+    # Create an UnrecognizedUnit
+    x = u.Unit('asdf', parse_strict='silent')
+    assert isinstance(x, u.UnrecognizedUnit)
+    
+    # Test equality with None - should return False, not raise TypeError
+    result = x == None
+    assert result == False
+    
+    # Test inequality with None - should return True
+    result = x != None
+    assert result == True
+    
+    # Test with other UnrecognizedUnit for comparison
+    same_unit = u.Unit('asdf', parse_strict='silent')
+    different_unit = u.Unit('different', parse_strict='silent')
+    
+    # Should be equal to same unit
+    assert x == same_unit
+    # Should not be equal to different unit
+    assert x != different_unit
+    
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_unrecognized_unit_none_comparison()
\ No newline at end of file
diff --git a/direct_test.py b/direct_test.py
new file mode 100644
index 0000000000..e0ea76f463
--- /dev/null
+++ b/direct_test.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+"""
+Direct test to verify the UserChangeForm password help text fix.
+This test examines the code change directly without running Django.
+"""
+
+import re
+import sys
+
+def test_code_change():
+    """Test that the code change was made correctly"""
+    
+    # Read the forms.py file
+    with open('/testbed/django/contrib/auth/forms.py', 'r') as f:
+        content = f.read()
+    
+    # Look for the UserChangeForm class and its __init__ method
+    user_change_form_pattern = r'class UserChangeForm\(forms\.ModelForm\):.*?def __init__\(self, \*args, \*\*kwargs\):.*?password\.help_text = password\.help_text\.format\(.*?\)'
+    match = re.search(user_change_form_pattern, content, re.DOTALL)
+    
+    if not match:
+        print("‚ùå FAIL: Could not find UserChangeForm __init__ method")
+        return False
+    
+    # Check if the fix is present
+    fix_pattern = r'password\.help_text = password\.help_text\.format\(f"\.\./\.\./{self\.instance\.pk}/password/"\)'
+    fix_match = re.search(fix_pattern, content)
+    
+    if fix_match:
+        print("‚úÖ PASS: Fix is present in the code")
+        print(f"Found: {fix_match.group(0)}")
+        return True
+    else:
+        print("‚ùå FAIL: Fix is not present in the code")
+        
+        # Check what's actually there
+        old_pattern = r'password\.help_text = password\.help_text\.format\("\.\./password/"\)'
+        old_match = re.search(old_pattern, content)
+        
+        if old_match:
+            print(f"Found old code: {old_match.group(0)}")
+        else:
+            print("Could not find either old or new code pattern")
+        
+        return False
+
+if __name__ == '__main__':
+    print("Testing UserChangeForm code change...\n")
+    
+    result = test_code_change()
+    print()
+    
+    if result:
+        print("‚úÖ CODE CHANGE VERIFIED: Fix has been implemented!")
+        sys.exit(0)
+    else:
+        print("‚ùå CODE CHANGE FAILED: Fix needs to be implemented")
+        sys.exit(1)
\ No newline at end of file
diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b3cfc6723c..f6c4b7fc2f 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):
         super().__init__(*args, **kwargs)
         password = self.fields.get("password")
         if password:
-            password.help_text = password.help_text.format("../password/")
+            password.help_text = password.help_text.format(f"../../{self.instance.pk}/password/")
         user_permissions = self.fields.get("user_permissions")
         if user_permissions:
             user_permissions.queryset = user_permissions.queryset.select_related(
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..c231438777
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+"""
+Final verification test for the UserChangeForm password help text fix.
+This test simulates the exact scenario described in the GitHub issue.
+"""
+
+import sys
+import re
+
+def verify_fix():
+    """Verify that the fix addresses the GitHub issue"""
+    
+    # Read the forms.py file
+    with open('/testbed/django/contrib/auth/forms.py', 'r') as f:
+        content = f.read()
+    
+    print("üîç Analyzing the UserChangeForm fix...")
+    
+    # Find the UserChangeForm class and its __init__ method
+    user_change_form_pattern = r'class UserChangeForm\(forms\.ModelForm\):.*?def __init__\(self, \*args, \*\*kwargs\):.*?password\.help_text = password\.help_text\.format\(.*?\)'
+    match = re.search(user_change_form_pattern, content, re.DOTALL)
+    
+    if not match:
+        print("‚ùå FAIL: Could not find UserChangeForm __init__ method")
+        return False
+    
+    # Check if the OLD problematic code is present
+    old_pattern = r'password\.help_text = password\.help_text\.format\("\.\./password/"\)'
+    old_match = re.search(old_pattern, content)
+    
+    if old_match:
+        print("‚ùå FAIL: Old problematic code still present")
+        print(f"Found: {old_match.group(0)}")
+        return False
+    
+    # Check if the NEW fixed code is present
+    new_pattern = r'password\.help_text = password\.help_text\.format\(f"\.\./\.\./{self\.instance\.pk}/password/"\)'
+    new_match = re.search(new_pattern, content)
+    
+    if new_match:
+        print("‚úÖ PASS: New fixed code is present")
+        print(f"Found: {new_match.group(0)}")
+        
+        # Explain why this fixes the issue
+        print("\nüìù EXPLANATION:")
+        print("The old code used '../password/' which assumes UserAdmin is accessed via primary key URL structure.")
+        print("When UserAdmin is accessed via to_field (e.g., uuid), the relative path becomes incorrect.")
+        print("The new code uses f'../../{self.instance.pk}/password/' which:")
+        print("  1. Goes up two levels to account for the to_field URL structure")
+        print("  2. Uses the instance's primary key to construct an absolute path")
+        print("  3. Works correctly regardless of how UserAdmin is accessed")
+        
+        return True
+    else:
+        print("‚ùå FAIL: New fixed code not found")
+        return False
+
+if __name__ == '__main__':
+    print("Final verification of UserChangeForm password help text fix...\n")
+    
+    result = verify_fix()
+    print()
+    
+    if result:
+        print("üéâ SUCCESS: The fix correctly addresses the GitHub issue!")
+        print("The PasswordResetForm link will now work correctly when UserAdmin")
+        print("is accessed via to_field (e.g., uuid) instead of just primary key.")
+        sys.exit(0)
+    else:
+        print("üí• FAILURE: The fix does not address the GitHub issue")
+        sys.exit(1)
\ No newline at end of file
diff --git a/minimal_test.py b/minimal_test.py
new file mode 100644
index 0000000000..e543b7bf9c
--- /dev/null
+++ b/minimal_test.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+"""
+Minimal test to verify the UserChangeForm password help text fix.
+This test directly tests the form logic without database operations.
+"""
+
+import os
+import sys
+
+# We'll test the form logic directly by importing and testing the specific method
+sys.path.insert(0, '/testbed')
+
+from django.contrib.auth.forms import UserChangeForm
+
+class MockUser:
+    """Mock user class to simulate User model without database dependencies"""
+    def __init__(self, pk=None, username='testuser', email='test@example.com'):
+        self.pk = pk
+        self.username = username
+        self.email = email
+    
+    # Mock methods that might be called
+    def _get_pk_val(self):
+        return self.pk
+
+def test_user_change_form_logic():
+    """Test UserChangeForm password help text logic directly"""
+    
+    # Test with a mock user that has a PK
+    user_with_pk = MockUser(pk=123)
+    
+    # Create form instance and manually call the __init__ method
+    form = UserChangeForm()
+    form.instance = user_with_pk
+    
+    # Manually call the password help text logic
+    password_field = form.fields.get('password')
+    if password_field:
+        # This is the exact logic from the fixed UserChangeForm.__init__
+        password_field.help_text = password_field.help_text.format(f"../../{form.instance.pk}/password/")
+        
+        print(f"User with PK {user_with_pk.pk}:")
+        print(f"Help text: {password_field.help_text}")
+        
+        expected_url = f"../../{user_with_pk.pk}/password/"
+        if expected_url in password_field.help_text:
+            print("‚úÖ PASS: Help text contains correct PK-based URL")
+            result1 = True
+        else:
+            print("‚ùå FAIL: Help text doesn't contain correct PK-based URL")
+            result1 = False
+    else:
+        print("No password field found")
+        result1 = False
+    
+    print()
+    
+    # Test with a mock user that has no PK (None)
+    user_without_pk = MockUser(pk=None)
+    
+    form2 = UserChangeForm()
+    form2.instance = user_without_pk
+    
+    password_field2 = form2.fields.get('password')
+    if password_field2:
+        # This is the exact logic from the fixed UserChangeForm.__init__
+        password_field2.help_text = password_field2.help_text.format(f"../../{form2.instance.pk}/password/")
+        
+        print(f"User without PK (should be None):")
+        print(f"Help text: {password_field2.help_text}")
+        
+        expected_url2 = "../../None/password/"
+        if expected_url2 in password_field2.help_text:
+            print("‚úÖ PASS: Help text handles None PK correctly")
+            result2 = True
+        else:
+            print("‚ùå FAIL: Help text doesn't handle None PK correctly")
+            result2 = False
+    else:
+        print("No password field found")
+        result2 = False
+    
+    return result1 and result2
+
+if __name__ == '__main__':
+    print("Testing UserChangeForm password help text fix logic...\n")
+    
+    result = test_user_change_form_logic()
+    print()
+    
+    if result:
+        print("‚úÖ ALL TESTS PASSED: Fix works correctly!")
+        sys.exit(0)
+    else:
+        print("‚ùå SOME TESTS FAILED: Fix needs more work")
+        sys.exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a7e8f64357
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where accessing UserAdmin via to_field
+leads to broken PasswordResetForm link.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.models import User
+from django.contrib.auth.forms import UserChangeForm
+from django import forms
+
+def test_user_change_form_password_help_text():
+    """Test the UserChangeForm password help text generation"""
+    
+    # Create a mock user instance without saving to database
+    user = User(username='testuser', email='test@example.com')
+    
+    # Create UserChangeForm instance
+    form = UserChangeForm(instance=user)
+    
+    # Check the password help text
+    password_field = form.fields.get('password')
+    if password_field:
+        print("Password help text:")
+        print(password_field.help_text)
+        print("\nExpected: Should contain a valid URL to the password change form")
+        print("Actual: Contains relative URL that may break when accessed via to_field")
+        
+        # Check if the URL is relative and might cause issues
+        if '../password/' in password_field.help_text:
+            print("\n‚ùå ISSUE CONFIRMED: Help text uses relative path '../password/'")
+            print("This will break when UserAdmin is accessed via to_field (e.g., uuid)")
+            print("The relative path assumes UserAdmin is accessed via primary key URL structure")
+            return False
+        else:
+            print("\n‚úÖ No issue found: Help text doesn't use problematic relative path")
+            return True
+    else:
+        print("No password field found in form")
+        return False
+
+if __name__ == '__main__':
+    result = test_user_change_form_password_help_text()
+    sys.exit(0 if result else 1)
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..6d58369a29
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify the UserChangeForm password help text fix.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.models import User
+from django.contrib.auth.forms import UserChangeForm
+
+def test_user_change_form():
+    """Test UserChangeForm password help text with mock user instances"""
+    
+    # Test with a mock user that has a PK (simulating saved user)
+    user_with_pk = User(username='testuser', email='test@example.com')
+    user_with_pk.pk = 123  # Simulate a saved user with PK
+    
+    form1 = UserChangeForm(instance=user_with_pk)
+    password_field1 = form1.fields.get('password')
+    
+    print(f"User with PK {user_with_pk.pk}:")
+    print(f"Help text: {password_field1.help_text}")
+    
+    expected_url1 = f"../../{user_with_pk.pk}/password/"
+    if expected_url1 in password_field1.help_text:
+        print("‚úÖ PASS: Help text contains correct PK-based URL")
+        result1 = True
+    else:
+        print("‚ùå FAIL: Help text doesn't contain correct PK-based URL")
+        result1 = False
+    
+    print()
+    
+    # Test with a mock user that has no PK (simulating unsaved user)
+    user_without_pk = User(username='testuser2', email='test2@example.com')
+    # No PK set - should be None
+    
+    form2 = UserChangeForm(instance=user_without_pk)
+    password_field2 = form2.fields.get('password')
+    
+    print(f"User without PK (should be None):")
+    print(f"Help text: {password_field2.help_text}")
+    
+    expected_url2 = "../../None/password/"
+    if expected_url2 in password_field2.help_text:
+        print("‚úÖ PASS: Help text handles None PK correctly")
+        result2 = True
+    else:
+        print("‚ùå FAIL: Help text doesn't handle None PK correctly")
+        result2 = False
+    
+    return result1 and result2
+
+if __name__ == '__main__':
+    print("Testing UserChangeForm password help text fix...\n")
+    
+    result = test_user_change_form()
+    print()
+    
+    if result:
+        print("‚úÖ ALL TESTS PASSED: Fix works correctly!")
+        sys.exit(0)
+    else:
+        print("‚ùå SOME TESTS FAILED: Fix needs more work")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..c35a9a7ea8
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,115 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for UserChangeForm password help text.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'test.db',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.models import User
+from django.contrib.auth.forms import UserChangeForm
+
+def test_user_change_form_with_saved_user():
+    """Test UserChangeForm with a saved user instance that has a PK"""
+    
+    # Create and save a user to get a real PK
+    user = User.objects.create_user(
+        username='testuser',
+        email='test@example.com',
+        password='testpass123'
+    )
+    
+    print(f"Created user with PK: {user.pk}")
+    
+    # Create UserChangeForm instance
+    form = UserChangeForm(instance=user)
+    
+    # Check the password help text
+    password_field = form.fields.get('password')
+    if password_field:
+        print("Password help text:")
+        print(password_field.help_text)
+        
+        # Check if the URL contains the correct PK
+        if f'../../{user.pk}/password/' in password_field.help_text:
+            print(f"‚úÖ SUCCESS: Help text correctly uses absolute path with PK {user.pk}")
+            return True
+        else:
+            print("‚ùå FAILURE: Help text doesn't contain the correct PK-based path")
+            return False
+    else:
+        print("No password field found in form")
+        return False
+
+def test_user_change_form_with_unsaved_user():
+    """Test UserChangeForm with an unsaved user instance (PK is None)"""
+    
+    # Create a user but don't save it (PK will be None)
+    user = User(username='testuser2', email='test2@example.com')
+    
+    print(f"Unsaved user PK: {user.pk}")
+    
+    # Create UserChangeForm instance
+    form = UserChangeForm(instance=user)
+    
+    # Check the password help text
+    password_field = form.fields.get('password')
+    if password_field:
+        print("Password help text for unsaved user:")
+        print(password_field.help_text)
+        
+        # For unsaved users, the PK should be None in the URL
+        if '../../None/password/' in password_field.help_text:
+            print("‚úÖ SUCCESS: Help text handles unsaved users correctly")
+            return True
+        else:
+            print("‚ùå FAILURE: Help text doesn't handle unsaved users correctly")
+            return False
+    else:
+        print("No password field found in form")
+        return False
+
+if __name__ == '__main__':
+    print("Testing UserChangeForm password help text fix...\n")
+    
+    # Test with saved user
+    print("=== Testing with saved user ===")
+    result1 = test_user_change_form_with_saved_user()
+    print()
+    
+    # Test with unsaved user
+    print("=== Testing with unsaved user ===")
+    result2 = test_user_change_form_with_unsaved_user()
+    print()
+    
+    # Clean up
+    User.objects.all().delete()
+    
+    if result1 and result2:
+        print("‚úÖ ALL TESTS PASSED: Fix works correctly!")
+        sys.exit(0)
+    else:
+        print("‚ùå SOME TESTS FAILED: Fix needs more work")
+        sys.exit(1)
\ No newline at end of file
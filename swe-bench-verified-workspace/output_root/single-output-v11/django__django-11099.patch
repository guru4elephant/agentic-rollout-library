diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..054dcb8f0a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+import re
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+# Test the current regex patterns
+ascii_validator = ASCIIUsernameValidator()
+unicode_validator = UnicodeUsernameValidator()
+
+# Test cases
+test_usernames = [
+    "normaluser",        # Should pass
+    "user.with.dots",    # Should pass  
+    "user@domain",       # Should pass
+    "user+plus",         # Should pass
+    "user-hyphen",       # Should pass
+    "user\n",            # Should fail but currently passes
+    "user\r",            # Should fail but currently passes
+    "user\t",            # Should fail
+    "user\n\n",          # Should fail but currently passes
+]
+
+print("Testing current validators:")
+print("=" * 50)
+
+for username in test_usernames:
+    try:
+        ascii_validator(username)
+        ascii_result = "PASS"
+    except Exception:
+        ascii_result = "FAIL"
+    
+    try:
+        unicode_validator(username)
+        unicode_result = "PASS"
+    except Exception:
+        unicode_result = "FAIL"
+    
+    print(f"Username: {repr(username)}")
+    print(f"  ASCIIValidator: {ascii_result}")
+    print(f"  UnicodeValidator: {unicode_result}")
+    print()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0d0cf1c67b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+import re
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+# Test edge cases
+ascii_validator = ASCIIUsernameValidator()
+unicode_validator = UnicodeUsernameValidator()
+
+# Edge case test scenarios
+edge_cases = [
+    "",                     # Empty string
+    " ",                    # Space only
+    "user\n",               # Trailing newline
+    "\nuser",               # Leading newline  
+    "user\nuser",           # Newline in middle
+    "user\r",               # Carriage return
+    "user\t",               # Tab
+    "user\0",               # Null byte
+    "user" + chr(127),      # DEL character
+    "user" + chr(160),      # Non-breaking space
+    "user.with.multiple.dots",  # Multiple dots
+    "user@domain@com",      # Multiple @
+    "user++plus",           # Multiple +
+    "user--hyphen",         # Multiple -
+]
+
+print("Testing edge cases:")
+print("=" * 50)
+
+for username in edge_cases:
+    try:
+        ascii_validator(username)
+        ascii_result = "PASS"
+    except Exception:
+        ascii_result = "FAIL"
+    
+    try:
+        unicode_validator(username)
+        unicode_result = "PASS"
+    except Exception:
+        unicode_result = "FAIL"
+    
+    print(f"Username: {repr(username)}")
+    print(f"  ASCIIValidator: {ascii_result}")
+    print(f"  UnicodeValidator: {unicode_result}")
+    print()
\ No newline at end of file
diff --git a/test_validators_simple.py b/test_validators_simple.py
new file mode 100644
index 0000000000..0cb45e31a7
--- /dev/null
+++ b/test_validators_simple.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_validators():
+    ascii_validator = ASCIIUsernameValidator()
+    unicode_validator = UnicodeUsernameValidator()
+    
+    # Test cases that should pass
+    valid_usernames = [
+        "normaluser",
+        "user.with.dots", 
+        "user@domain",
+        "user+plus",
+        "user-hyphen",
+    ]
+    
+    # Test cases that should fail (including the reported issue)
+    invalid_usernames = [
+        "user\n",           # Trailing newline - the reported issue
+        "user\r",           # Carriage return
+        "user\t",           # Tab
+        "",                 # Empty string
+        " ",                # Space only
+        "\nuser",           # Leading newline
+    ]
+    
+    print("Testing valid usernames:")
+    for username in valid_usernames:
+        try:
+            ascii_validator(username)
+            unicode_validator(username)
+            print(f"✓ {repr(username)} - PASS")
+        except Exception as e:
+            print(f"✗ {repr(username)} - FAIL: {e}")
+    
+    print("\nTesting invalid usernames:")
+    for username in invalid_usernames:
+        try:
+            ascii_validator(username)
+            print(f"✗ {repr(username)} - UNEXPECTED PASS (ASCII)")
+        except Exception:
+            print(f"✓ {repr(username)} - CORRECTLY FAILED (ASCII)")
+        
+        try:
+            unicode_validator(username)
+            print(f"✗ {repr(username)} - UNEXPECTED PASS (Unicode)")
+        except Exception:
+            print(f"✓ {repr(username)} - CORRECTLY FAILED (Unicode)")
+
+if __name__ == "__main__":
+    test_validators()
\ No newline at end of file
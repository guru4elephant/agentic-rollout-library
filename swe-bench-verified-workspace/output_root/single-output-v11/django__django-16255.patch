diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py
index 27756d9d96..b40ad806ed 100644
--- a/django/contrib/sitemaps/__init__.py
+++ b/django/contrib/sitemaps/__init__.py
@@ -168,7 +168,7 @@ class Sitemap:
         if callable(self.lastmod):
             try:
                 return max([self.lastmod(item) for item in self.items()])
-            except TypeError:
+            except (TypeError, ValueError):
                 return None
         else:
             return self.lastmod
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..7c3695842c
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the GitHub issue fix.
+Tests all scenarios mentioned in the issue and ensures no regressions.
+"""
+
+from django.contrib.sitemaps import Sitemap
+from datetime import datetime
+
+def test_case_1_empty_items_callable_lastmod():
+    """Test the exact issue: empty items() with callable lastmod."""
+    print("Test 1: Empty items() with callable lastmod (the original issue)")
+    
+    class EmptySitemap(Sitemap):
+        def items(self):
+            return []
+        
+        def lastmod(self, item):
+            return datetime(2023, 1, 1)
+    
+    sitemap = EmptySitemap()
+    result = sitemap.get_latest_lastmod()
+    
+    assert result is None, f"Expected None, got {result}"
+    print("‚úì PASS: Empty sitemap returns None instead of ValueError")
+
+def test_case_2_non_empty_items_callable_lastmod():
+    """Test normal case: non-empty items() with callable lastmod."""
+    print("Test 2: Non-empty items() with callable lastmod (normal case)")
+    
+    class NonEmptySitemap(Sitemap):
+        def items(self):
+            return ["item1", "item2"]
+        
+        def lastmod(self, item):
+            return datetime(2023, 1, 1) if item == "item1" else datetime(2023, 1, 2)
+    
+    sitemap = NonEmptySitemap()
+    result = sitemap.get_latest_lastmod()
+    
+    expected = datetime(2023, 1, 2)
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("‚úì PASS: Non-empty sitemap returns correct max lastmod")
+
+def test_case_3_static_lastmod():
+    """Test static lastmod attribute."""
+    print("Test 3: Static lastmod attribute")
+    
+    class StaticLastmodSitemap(Sitemap):
+        lastmod = datetime(2023, 1, 1)
+        
+        def items(self):
+            return ["item1", "item2"]
+    
+    sitemap = StaticLastmodSitemap()
+    result = sitemap.get_latest_lastmod()
+    
+    expected = datetime(2023, 1, 1)
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("‚úì PASS: Static lastmod returns correct value")
+
+def test_case_4_no_lastmod():
+    """Test sitemap without lastmod attribute."""
+    print("Test 4: No lastmod attribute")
+    
+    class NoLastmodSitemap(Sitemap):
+        def items(self):
+            return ["item1", "item2"]
+    
+    sitemap = NoLastmodSitemap()
+    result = sitemap.get_latest_lastmod()
+    
+    assert result is None, f"Expected None, got {result}"
+    print("‚úì PASS: No lastmod returns None")
+
+def test_case_5_type_error():
+    """Test TypeError handling (should still work)."""
+    print("Test 5: TypeError handling")
+    
+    class TypeErrorSitemap(Sitemap):
+        def items(self):
+            return ["item1", "item2"]
+        
+        def lastmod(self, item):
+            return None  # This causes TypeError in max()
+    
+    sitemap = TypeErrorSitemap()
+    result = sitemap.get_latest_lastmod()
+    
+    assert result is None, f"Expected None, got {result}"
+    print("‚úì PASS: TypeError returns None")
+
+def main():
+    """Run all tests."""
+    print("Running comprehensive tests for sitemap fix...\n")
+    
+    tests = [
+        test_case_1_empty_items_callable_lastmod,
+        test_case_2_non_empty_items_callable_lastmod,
+        test_case_3_static_lastmod,
+        test_case_4_no_lastmod,
+        test_case_5_type_error,
+    ]
+    
+    passed = 0
+    total = len(tests)
+    
+    for test in tests:
+        try:
+            test()
+            passed += 1
+        except Exception as e:
+            print(f"‚úó FAIL: {test.__name__} - {e}")
+    
+    print(f"\nResults: {passed}/{total} tests passed")
+    
+    if passed == total:
+        print("üéâ All tests passed! The GitHub issue has been successfully fixed.")
+        return True
+    else:
+        print("‚ùå Some tests failed. Please review the implementation.")
+        return False
+
+if __name__ == "__main__":
+    success = main()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6c30f7ccb2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the sitemap issue described in the GitHub issue.
+"""
+
+from django.contrib.sitemaps import Sitemap
+
+class EmptySitemap(Sitemap):
+    """A sitemap with no items but a callable lastmod method."""
+    
+    def items(self):
+        """Return empty list to simulate sitemap with no items."""
+        return []
+    
+    def lastmod(self, item):
+        """Callable lastmod method that would be used if items existed."""
+        return "2023-01-01"  # Return a dummy date
+
+def test_empty_sitemap():
+    """Test that reproduces the ValueError issue."""
+    sitemap = EmptySitemap()
+    
+    try:
+        result = sitemap.get_latest_lastmod()
+        print(f"Success: get_latest_lastmod() returned {result}")
+    except ValueError as e:
+        print(f"Error reproduced: {e}")
+        return False
+    except Exception as e:
+        print(f"Unexpected error: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    print("Testing empty sitemap with callable lastmod...")
+    success = test_empty_sitemap()
+    
+    if success:
+        print("Test passed - no error occurred")
+    else:
+        print("Test failed - error reproduced")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..cb6ed35934
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to ensure the sitemap fix handles various edge cases.
+"""
+
+from django.contrib.sitemaps import Sitemap
+
+class EmptySitemap(Sitemap):
+    """A sitemap with no items but a callable lastmod method."""
+    
+    def items(self):
+        return []
+    
+    def lastmod(self, item):
+        return "2023-01-01"
+
+class NonEmptySitemap(Sitemap):
+    """A sitemap with items and a callable lastmod method."""
+    
+    def items(self):
+        return ["item1", "item2", "item3"]
+    
+    def lastmod(self, item):
+        return f"2023-01-{int(item[-1])}"  # Return different dates based on item
+
+class SitemapWithNonCallableLastmod(Sitemap):
+    """A sitemap with a non-callable lastmod attribute."""
+    
+    lastmod = "2023-01-01"
+    
+    def items(self):
+        return ["item1", "item2"]
+
+class SitemapWithoutLastmod(Sitemap):
+    """A sitemap without a lastmod attribute."""
+    
+    def items(self):
+        return ["item1", "item2"]
+
+def test_edge_cases():
+    """Test various edge cases for the get_latest_lastmod method."""
+    
+    print("Testing empty sitemap with callable lastmod...")
+    sitemap1 = EmptySitemap()
+    result1 = sitemap1.get_latest_lastmod()
+    print(f"Result: {result1} (should be None)")
+    
+    print("\nTesting non-empty sitemap with callable lastmod...")
+    sitemap2 = NonEmptySitemap()
+    result2 = sitemap2.get_latest_lastmod()
+    print(f"Result: {result2} (should be '2023-01-3')")
+    
+    print("\nTesting sitemap with non-callable lastmod...")
+    sitemap3 = SitemapWithNonCallableLastmod()
+    result3 = sitemap3.get_latest_lastmod()
+    print(f"Result: {result3} (should be '2023-01-01')")
+    
+    print("\nTesting sitemap without lastmod attribute...")
+    sitemap4 = SitemapWithoutLastmod()
+    result4 = sitemap4.get_latest_lastmod()
+    print(f"Result: {result4} (should be None)")
+    
+    # Verify results
+    tests_passed = 0
+    total_tests = 4
+    
+    if result1 is None:
+        print("‚úì Empty sitemap test passed")
+        tests_passed += 1
+    else:
+        print("‚úó Empty sitemap test failed")
+    
+    if result2 == "2023-01-3":
+        print("‚úì Non-empty sitemap test passed")
+        tests_passed += 1
+    else:
+        print("‚úó Non-empty sitemap test failed")
+    
+    if result3 == "2023-01-01":
+        print("‚úì Non-callable lastmod test passed")
+        tests_passed += 1
+    else:
+        print("‚úó Non-callable lastmod test failed")
+    
+    if result4 is None:
+        print("‚úì No lastmod attribute test passed")
+        tests_passed += 1
+    else:
+        print("‚úó No lastmod attribute test failed")
+    
+    print(f"\n{tests_passed}/{total_tests} tests passed")
+    return tests_passed == total_tests
+
+if __name__ == "__main__":
+    print("Running comprehensive sitemap tests...")
+    success = test_edge_cases()
+    
+    if success:
+        print("\nAll tests passed! The fix is working correctly.")
+    else:
+        print("\nSome tests failed. Please review the implementation.")
\ No newline at end of file
diff --git a/test_exact_issue.py b/test_exact_issue.py
new file mode 100644
index 0000000000..fcda11f3b7
--- /dev/null
+++ b/test_exact_issue.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+Test to reproduce the exact issue described in the GitHub issue.
+"""
+
+from django.contrib.sitemaps import Sitemap
+from datetime import datetime
+
+class EmptySitemapWithCallableLastmod(Sitemap):
+    """Reproduces the exact scenario from the GitHub issue."""
+    
+    def items(self):
+        """Return empty list - this is the key to reproducing the issue."""
+        return []
+    
+    def lastmod(self, item):
+        """Callable lastmod method - this causes the ValueError when items() is empty."""
+        return datetime(2023, 1, 1)
+
+def test_exact_issue():
+    """Test the exact scenario described in the GitHub issue."""
+    print("Testing the exact issue scenario...")
+    print("Sitemap with empty items() and callable lastmod()")
+    
+    sitemap = EmptySitemapWithCallableLastmod()
+    
+    # Before our fix, this would raise:
+    # ValueError: max() arg is an empty sequence
+    try:
+        result = sitemap.get_latest_lastmod()
+        print(f"‚úì Success: get_latest_lastmod() returned {result}")
+        print("‚úì The ValueError issue has been fixed!")
+        return True
+    except ValueError as e:
+        print(f"‚úó Error still occurs: {e}")
+        return False
+    except Exception as e:
+        print(f"‚úó Unexpected error: {e}")
+        return False
+
+def test_original_behavior_preserved():
+    """Test that normal behavior is preserved for non-empty sitemaps."""
+    print("\nTesting that normal behavior is preserved...")
+    
+    class NonEmptySitemap(Sitemap):
+        def items(self):
+            return ["item1", "item2"]
+        
+        def lastmod(self, item):
+            # Return different dates to test max() functionality
+            if item == "item1":
+                return datetime(2023, 1, 1)
+            else:
+                return datetime(2023, 1, 2)
+    
+    sitemap = NonEmptySitemap()
+    result = sitemap.get_latest_lastmod()
+    
+    expected = datetime(2023, 1, 2)
+    if result == expected:
+        print(f"‚úì Normal behavior preserved: get_latest_lastmod() returned {result}")
+        return True
+    else:
+        print(f"‚úó Normal behavior broken: expected {expected}, got {result}")
+        return False
+
+if __name__ == "__main__":
+    print("Testing the exact GitHub issue scenario...")
+    
+    issue_fixed = test_exact_issue()
+    behavior_preserved = test_original_behavior_preserved()
+    
+    if issue_fixed and behavior_preserved:
+        print("\nüéâ All tests passed! The fix is working correctly.")
+    else:
+        print("\n‚ùå Some tests failed. Please review the implementation.")
\ No newline at end of file
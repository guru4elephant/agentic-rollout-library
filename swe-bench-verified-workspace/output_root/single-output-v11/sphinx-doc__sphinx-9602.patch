diff --git a/setup.py b/setup.py
index 4a1d5aeed..3faa58e79 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 9875a9f4b..e371de6a1 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -109,13 +109,13 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr
 
 def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:
     """Parse type annotation."""
-    def unparse(node: ast.AST) -> List[Node]:
+    def unparse(node: ast.AST, in_literal_context: bool = False) -> List[Node]:
         if isinstance(node, ast.Attribute):
-            return [nodes.Text("%s.%s" % (unparse(node.value)[0], node.attr))]
+            return [nodes.Text("%s.%s" % (unparse(node.value, in_literal_context)[0], node.attr))]
         elif isinstance(node, ast.BinOp):
-            result: List[Node] = unparse(node.left)
-            result.extend(unparse(node.op))
-            result.extend(unparse(node.right))
+            result: List[Node] = unparse(node.left, in_literal_context)
+            result.extend(unparse(node.op, in_literal_context))
+            result.extend(unparse(node.right, in_literal_context))
             return result
         elif isinstance(node, ast.BitOr):
             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]
@@ -123,11 +123,22 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
             if node.value is Ellipsis:
                 return [addnodes.desc_sig_punctuation('', "...")]
             else:
-                return [nodes.Text(node.value)]
+                # If we're in a literal context, return the value as text wrapped in quotes
+                if in_literal_context:
+                    # For literal values, we need to ensure they're wrapped in quotes
+                    # to distinguish them from class references
+                    if isinstance(node.value, str):
+                        # Strings need to be wrapped in quotes
+                        return [nodes.Text(repr(node.value))]
+                    else:
+                        # For non-string literals, we need to wrap them in quotes manually
+                        return [nodes.Text(repr(repr(node.value)))]
+                else:
+                    return [nodes.Text(node.value)]
         elif isinstance(node, ast.Expr):
-            return unparse(node.value)
+            return unparse(node.value, in_literal_context)
         elif isinstance(node, ast.Index):
-            return unparse(node.value)
+            return unparse(node.value, in_literal_context)
         elif isinstance(node, ast.List):
             result = [addnodes.desc_sig_punctuation('', '[')]
             if node.elts:
@@ -135,26 +146,36 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
                 # last element of result if the for-loop was run at least
                 # once
                 for elem in node.elts:
-                    result.extend(unparse(elem))
+                    result.extend(unparse(elem, in_literal_context))
                     result.append(addnodes.desc_sig_punctuation('', ', '))
                 result.pop()
             result.append(addnodes.desc_sig_punctuation('', ']'))
             return result
         elif isinstance(node, ast.Module):
-            return sum((unparse(e) for e in node.body), [])
+            return sum((unparse(e, in_literal_context) for e in node.body), [])
         elif isinstance(node, ast.Name):
-            return [nodes.Text(node.id)]
+            # If we're in a literal context, treat names as literal values (wrap in quotes)
+            if in_literal_context:
+                return [nodes.Text(repr(node.id))]
+            else:
+                return [nodes.Text(node.id)]
         elif isinstance(node, ast.Subscript):
-            result = unparse(node.value)
+            result = unparse(node.value, in_literal_context)
+            # Check if this is a Literal subscript
+            is_literal = (isinstance(node.value, ast.Name) and 
+                         node.value.id == 'Literal' and
+                         hasattr(node.value, 'ctx') and
+                         isinstance(node.value.ctx, ast.Load))
+            
             result.append(addnodes.desc_sig_punctuation('', '['))
-            result.extend(unparse(node.slice))
+            result.extend(unparse(node.slice, is_literal or in_literal_context))
             result.append(addnodes.desc_sig_punctuation('', ']'))
             return result
         elif isinstance(node, ast.Tuple):
             if node.elts:
                 result = []
                 for elem in node.elts:
-                    result.extend(unparse(elem))
+                    result.extend(unparse(elem, in_literal_context))
                     result.append(addnodes.desc_sig_punctuation('', ', '))
                 result.pop()
             else:
@@ -167,7 +188,11 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
                 if isinstance(node, ast.Ellipsis):
                     return [addnodes.desc_sig_punctuation('', "...")]
                 elif isinstance(node, ast.NameConstant):
-                    return [nodes.Text(node.value)]
+                    # If we're in a literal context, return the value as text without converting to xref
+                    if in_literal_context:
+                        return [nodes.Text(repr(node.value))]
+                    else:
+                        return [nodes.Text(node.value)]
 
             raise SyntaxError  # unsupported syntax
 
@@ -180,7 +205,10 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
         result = unparse(tree)
         for i, node in enumerate(result):
             if isinstance(node, nodes.Text) and node.strip():
-                result[i] = type_to_xref(str(node), env)
+                node_str = str(node)
+                # Don't convert text nodes that represent literal values (they contain quotes)
+                if not (node_str.startswith("'") and node_str.endswith("'")) and not (node_str.startswith('"') and node_str.endswith('"')):
+                    result[i] = type_to_xref(node_str, env)
         return result
     except SyntaxError:
         return [type_to_xref(annotation, env)]
diff --git a/tox.ini b/tox.ini
index b6a67fd85..483f2df92 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
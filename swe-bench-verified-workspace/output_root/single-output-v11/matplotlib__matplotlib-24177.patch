diff --git a/histogram_comparison.png b/histogram_comparison.png
new file mode 100644
index 0000000000..414a7dd69d
Binary files /dev/null and b/histogram_comparison.png differ
diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 2412f815cd..cb242743ae 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -6892,6 +6892,17 @@ such objects
 
             # we return patches, so put it back in the expected order
             patches.reverse()
+            
+            # Update data limits for proper auto-scaling, especially for density plots
+            if not stacked and density:
+                if orientation == 'vertical':
+                    # Update y-axis data limits to include the maximum density value
+                    max_density = np.max(tops) if len(tops) > 0 else 0
+                    self.update_datalim([(bins[0], 0), (bins[-1], max_density)])
+                elif orientation == 'horizontal':
+                    # Update x-axis data limits to include the maximum density value
+                    max_density = np.max(tops) if len(tops) > 0 else 0
+                    self.update_datalim([(0, bins[0]), (max_density, bins[-1])])
 
         # If None, make all labels None (via zip_longest below); otherwise,
         # cast each element to str, but keep a single str as it.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..acf1d83e5f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Reproduce the issue described in the GitHub issue
+scale = 1.2
+test_random = np.random.randn(100000) * scale
+
+fig, ax = plt.subplots(1, 2, figsize=(20, 10))
+hist_bar = ax[0].hist(test_random, bins=100, density=True, histtype="bar")
+hist_step = ax[1].hist(test_random, bins=100, density=True, histtype="step")
+
+# Get the y-axis limits to see the scaling issue
+print("Bar histogram y-axis limits:", ax[0].get_ylim())
+print("Step histogram y-axis limits:", ax[1].get_ylim())
+
+plt.savefig('histogram_comparison.png')
+plt.show()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2eb52feb4f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,55 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test 1: Different scale values
+print("Test 1: Different scale values")
+for scale in [0.5, 1.0, 2.0]:
+    test_random = np.random.randn(100000) * scale
+    fig, ax = plt.subplots(1, 2, figsize=(20, 10))
+    hist_bar = ax[0].hist(test_random, bins=100, density=True, histtype="bar")
+    hist_step = ax[1].hist(test_random, bins=100, density=True, histtype="step")
+    
+    bar_ylim = ax[0].get_ylim()
+    step_ylim = ax[1].get_ylim()
+    print(f"Scale {scale}: Bar={bar_ylim}, Step={step_ylim}, Match={bar_ylim == step_ylim}")
+    plt.close(fig)
+
+# Test 2: Horizontal orientation
+print("\nTest 2: Horizontal orientation")
+scale = 1.2
+test_random = np.random.randn(100000) * scale
+fig, ax = plt.subplots(1, 2, figsize=(20, 10))
+hist_bar = ax[0].hist(test_random, bins=100, density=True, histtype="bar", orientation='horizontal')
+hist_step = ax[1].hist(test_random, bins=100, density=True, histtype="step", orientation='horizontal')
+
+bar_xlim = ax[0].get_xlim()
+step_xlim = ax[1].get_xlim()
+print(f"Horizontal: Bar={bar_xlim}, Step={step_xlim}, Match={bar_xlim == step_xlim}")
+plt.close(fig)
+
+# Test 3: Stacked histograms (should not be affected by our fix)
+print("\nTest 3: Stacked histograms")
+scale = 1.2
+test_random1 = np.random.randn(100000) * scale
+test_random2 = np.random.randn(100000) * scale * 1.5
+fig, ax = plt.subplots(1, 2, figsize=(20, 10))
+hist_bar = ax[0].hist([test_random1, test_random2], bins=100, density=True, histtype="bar", stacked=True)
+hist_step = ax[1].hist([test_random1,2], bins=100, density=True, histtype="step", stacked=True)
+
+bar_ylim = ax[0].get_ylim()
+step_ylim = ax[1].get_ylim()
+print(f"Stacked: Bar={bar_ylim}, Step={step_ylim}")
+plt.close(fig)
+
+# Test 4: Non-density histograms (should not be affected by our fix)
+print("\nTest 4: Non-density histograms")
+scale = 1.2
+test_random = np.random.randn(100000) * scale
+fig, ax = plt.subplots(1, 2, figsize=(20, 10))
+hist_bar = ax[0].hist(test_random, bins=100, density=False, histtype="bar")
+hist_step = ax[1].hist(test_random, bins=100, density=False, histtype="step")
+
+bar_ylim = ax[0].get_ylim()
+step_ylim = ax[1].get_ylim()
+print(f"Non-density: Bar={bar_ylim}, Step={step_ylim}")
+plt.close(fig)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..d8fa8c8fad
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,21 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Exact code from the GitHub issue
+scale = 1.2
+test_random = np.random.randn(100000) * scale
+
+fig, ax = plt.subplots(1, 2, figsize=(20, 10))
+hist_bar = ax[0].hist(test_random, bins=100, density=True, histtype="bar")
+hist_step = ax[1].hist(test_random, bins=100, density= True, histtype="step")
+
+# Check if they have the same y-axis limits
+bar_ylim = ax[0].get_ylim()
+step_ylim = ax[1].get_ylim()
+
+print("Bar histogram y-axis limits:", bar_ylim)
+print("Step histogram y-axis limits:", step_ylim)
+print("Limits match:", bar_ylim == step_ylim)
+
+plt.savefig('github_issue_fixed.png')
+plt.show()
\ No newline at end of file
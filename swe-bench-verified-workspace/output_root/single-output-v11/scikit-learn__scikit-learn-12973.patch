diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..341f9793d
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+from sklearn import datasets
+
+# Test with real dataset
+diabetes = datasets.load_diabetes()
+X = diabetes.data
+y = diabetes.target
+
+print("Final comprehensive test of LassoLarsIC copy_X fix...")
+
+# Test 1: Backward compatibility - should work exactly as before
+print("\n1. Testing backward compatibility:")
+lasso1 = LassoLarsIC(copy_X=True)
+lasso1.fit(X, y)
+print("   Default constructor and fit: OK")
+
+# Test 2: Explicit copy_X in constructor
+print("\n2. Testing copy_X in constructor:")
+lasso2 = LassoLarsIC(copy_X=False)
+lasso2.fit(X, y)
+print("   copy_X=False in constructor: OK")
+
+# Test 3: Explicit copy_X in fit method (should override constructor)
+print("\n3. Testing copy_X in fit method:")
+lasso3 = LassoLarsIC(copy_X=True)
+lasso3.fit(X, y, copy_X=False)
+print("   copy_X=False in fit overrides constructor: OK")
+
+lasso4 = LassoLarsIC(copy_X=False) 
+lasso4.fit(X, y, copy_X=True)
+print("   copy_X=True in fit overrides constructor: OK")
+
+# Test 4: None behavior (should use constructor value)
+print("\n4. Testing copy_X=None behavior:")
+lasso5 = LassoLarsIC(copy_X=False)
+lasso5.fit(X, y, copy_X=None)
+print("   copy_X=None uses constructor value (False): OK")
+
+lasso6 = LassoLarsIC(copy_X=True)
+lasso6.fit(X, y, copy_X=None)
+print("   copy_X=None uses constructor value (True): OK")
+
+# Test 5: Verify the actual copy behavior works
+print("\n5. Testing actual copy behavior:")
+X_orig = X.copy()
+y_orig = y.copy()
+
+# Test with copy_X=False - should modify input
+lasso_no_copy = LassoLarsIC(copy_X=False)
+lasso_no_copy.fit(X, y)
+X_modified = not np.array_equal(X, X_orig)
+print(f"   Input data modified when copy_X=False: {X_modified}")
+
+# Reset data
+X = X_orig.copy()
+y = y_orig.copy()
+
+# Test with copy_X=True - should not modify input
+lasso_copy = LassoLarsIC(copy_X=True)
+lasso_copy.fit(X, y)
+X_not_modified = np.array_equal(X, X_orig)
+print(f"   Input data preserved when copy_X=True: {X_not_modified}")
+
+print("\nâœ… All tests passed! The fix works correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..93937fefd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+# Create some sample data
+np.random.seed(42)
+X = np.random.randn(100, 5)
+y = np.random.randn(100)
+
+print("Testing LassoLarsIC copy_X behavior...")
+
+# Test case 1: Set copy_X=False in constructor, don't specify in fit
+print("\n1. Testing copy_X=False in constructor, default in fit:")
+lasso1 = LassoLarsIC(copy_X=False)
+print(f"Before fit: lasso1.copy_X = {lasso1.copy_X}")
+lasso1.fit(X, y)
+print(f"After fit: lasso1.copy_X = {lasso1.copy_X}")
+
+# Test case 2: Set copy_X=False in constructor, explicitly set copy_X=False in fit
+print("\n2. Testing copy_X=False in constructor, copy_X=False in fit:")
+lasso2 = LassoLarsIC(copy_X=False)
+print(f"Before fit: lasso2.copy_X = {lasso2.copy_X}")
+lasso2.fit(X, y, copy_X=False)
+print(f"After fit: lasso2.copy_X = {lasso2.copy_X}")
+
+# Test case 3: Set copy_X=False in constructor, explicitly set copy_X=True in fit
+print("\n3. Testing copy_X=False in constructor, copy_X=True in fit:")
+lasso3 = LassoLarsIC(copy_X=False)
+print(f"Before fit: lasso3.copy_X = {lasso3.copy_X}")
+lasso3.fit(X, y, copy_X=True)
+print(f"After fit: lasso3.copy_X = {lasso3.copy_X}")
+
+# Test case 4: Set copy_X=True in constructor, don't specify in fit
+print("\n4. Testing copy_X=True in constructor, default in fit:")
+lasso4 = LassoLarsIC(copy_X=True)
+print(f"Before fit: lasso4.copy_X = {lasso4.copy_X}")
+lasso4.fit(X, y)
+print(f"After fit: lasso4.copy_X = {lasso4.copy_X}")
+
+print("\nThe issue is that in case 1, the user's choice (copy_X=False) is silently overwritten by the default value (True) in the fit method!")
\ No newline at end of file
diff --git a/reproduce_issue_v2.py b/reproduce_issue_v2.py
new file mode 100644
index 000000000..98aa1a8c2
--- /dev/null
+++ b/reproduce_issue_v2.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+# Create some sample data
+np.random.seed(42)
+X = np.random.randn(100, 5)
+y = np.random.randn(100)
+
+print("Testing LassoLarsIC copy_X behavior...")
+
+# The real issue is that the fit method has its own copy_X parameter
+# which can conflict with the constructor parameter
+
+print("1. Check the fit method signature:")
+lasso = LassoLarsIC()
+import inspect
+sig = inspect.signature(lasso.fit)
+print(f"Fit method parameters: {sig}")
+
+print("\n2. The problem is that fit method has copy_X=True as default,")
+print("   which can override the user's choice in the constructor")
+print("   if they don't explicitly pass copy_X to fit.")
+
+print("\n3. Let's see what happens when we trace which copy_X value is used:")
+
+# Let's create a simple test to see the issue
+class DebugLassoLarsIC(LassoLarsIC):
+    def fit(self, X, y, copy_X=True):
+        print(f"DEBUG: fit called with copy_X={copy_X}, self.copy_X={self.copy_X}")
+        # The issue: copy_X parameter from fit method is used in lars_path
+        # but self.copy_X is used in _preprocess_data
+        return super().fit(X, y, copy_X=copy_X)
+
+print("\nTesting with debug class:")
+debug_lasso = DebugLassoLarsIC(copy_X=False)
+debug_lasso.fit(X, y)
\ No newline at end of file
diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..c2e3aa040 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):
         self.eps = eps
         self.fit_path = True
 
-    def fit(self, X, y, copy_X=True):
+    def fit(self, X, y, copy_X=None):
         """Fit the model using X, y as training data.
 
         Parameters
@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):
         y : array-like, shape (n_samples,)
             target values. Will be cast to X's dtype if necessary
 
-        copy_X : boolean, optional, default True
+        copy_X : boolean, optional, default None
             If ``True``, X will be copied; else, it may be overwritten.
+            If None, then the value set in the constructor is used.
 
         Returns
         -------
@@ -1500,8 +1501,12 @@ class LassoLarsIC(LassoLars):
         """
         X, y = check_X_y(X, y, y_numeric=True)
 
+        # Handle copy_X parameter: if None, use the value from constructor
+        if copy_X is None:
+            copy_X = self.copy_X
+
         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(
-            X, y, self.fit_intercept, self.normalize, self.copy_X)
+            X, y, self.fit_intercept, self.normalize, copy_X)
         max_iter = self.max_iter
 
         Gram = self.precompute
diff --git a/test_copy_behavior.py b/test_copy_behavior.py
new file mode 100644
index 000000000..4eacbfbcc
--- /dev/null
+++ b/test_copy_behavior.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+# Create some sample data
+np.random.seed(42)
+X = np.random.randn(100, 5)
+y = np.random.randn(100)
+
+print("Testing LassoLarsIC copy_X behavior...")
+
+def test_copy_behavior(copy_X_constructor, copy_X_fit=None, description=""):
+    print(f"\n{description}")
+    
+    # Create original copies to compare against
+    X_original = X.copy()
+    y_original = y.copy()
+    
+    # Create and fit the model
+    lasso = LassoLarsIC(copy_X=copy_X_constructor)
+    if copy_X_fit is None:
+        lasso.fit(X, y)
+    else:
+        lasso.fit(X, y, copy_X=copy_X_fit)
+    
+    # Check if input data was modified
+    X_modified = not np.array_equal(X, X_original)
+    y_modified = not np.array_equal(y, y_original)
+    
+    print(f"  X modified: {X_modified}")
+    print(f"  y modified: {y_modified}")
+    
+    return X_modified, y_modified
+
+# Test cases
+test_copy_behavior(False, None, "1. copy_X=False in constructor, default fit")
+test_copy_behavior(False, False, "2. copy_X=False in constructor, copy_X=False in fit")
+test_copy_behavior(False, True, "3. copy_X=False in constructor, copy_X=True in fit")
+test_copy_behavior(True, None, "4. copy_X=True in constructor, default fit")
+test_copy_behavior(True, False, "5. copy_X=True in constructor, copy_X=False in fit")
+test_copy_behavior(True, True, "6. copy_X=True in constructor, copy_X=True in fit")
+
+print("\nTests completed!")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..4f0d9d66f
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+# Create some sample data
+np.random.seed(42)
+X = np.random.randn(100, 5)
+y = np.random.randn(100)
+
+print("Testing LassoLarsIC copy_X fix...")
+
+# Test 1: copy_X=None in fit should use constructor value
+print("\n1. Testing copy_X=False in constructor, copy_X=None in fit:")
+lasso1 = LassoLarsIC(copy_X=False)
+print(f"Before fit: lasso1.copy_X = {lasso1.copy_X}")
+lasso1.fit(X, y, copy_X=None)
+print(f"After fit: lasso1.copy_X = {lasso1.copy_X}")
+
+# Test 2: copy_X=True in fit should override constructor value
+print("\n2. Testing copy_X=False in constructor, copy_X=True in fit:")
+lasso2 = LassoLarsIC(copy_X=False)
+print(f"Before fit: lasso2.copy_X = {lasso2.copy_X}")
+lasso2.fit(X, y, copy_X=True)
+print(f"After fit: lasso2.copy_X = {lasso2.copy_X}")
+
+# Test 3: copy_X=False in fit should override constructor value
+print("\n3. Testing copy_X=True in constructor, copy_X=False in fit:")
+lasso3 = LassoLarsIC(copy_X=True)
+print(f"Before fit: lasso3.copy_X = {lasso3.copy_X}")
+lasso3.fit(X, y, copy_X=False)
+print(f"After fit: lasso3.copy_X = {lasso3.copy_X}")
+
+# Test 4: Default behavior (no copy_X specified in fit) should use constructor value
+print("\n4. Testing copy_X=False in constructor, default fit call:")
+lasso4 = LassoLarsIC(copy_X=False)
+print(f"Before fit: lasso4.copy_X = {lasso4.copy_X}")
+lasso4.fit(X, y)  # Should use copy_X=None internally
+print(f"After fit: lasso4.copy_X = {lasso4.copy_X}")
+
+# Test 5: Default behavior (no copy_X specified in fit) should use constructor value
+print("\n5. Testing copy_X=True in constructor, default fit call:")
+lasso5 = LassoLarsIC(copy_X=True)
+print(f"Before fit: lasso5.copy_X = {lasso5.copy_X}")
+lasso5.fit(X, y)  # Should use copy_X=None internally
+print(f"After fit: lasso5.copy_X = {lasso5.copy_X}")
+
+print("\nAll tests completed!")
\ No newline at end of file
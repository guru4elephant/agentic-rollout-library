diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py
index c279f35f87..9f65670f3e 100644
--- a/astropy/timeseries/core.py
+++ b/astropy/timeseries/core.py
@@ -75,10 +75,18 @@ class BaseTimeSeries(QTable):
                                  .format(self.__class__.__name__, required_columns[0], plural))
 
             elif self.colnames[:len(required_columns)] != required_columns:
-
-                raise ValueError("{} object is invalid - expected '{}' "
-                                 "as the first column{} but found '{}'"
-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
+                # Check which required columns are missing
+                missing_columns = [col for col in required_columns if col not in self.colnames]
+                if missing_columns:
+                    plural = 's' if len(missing_columns) > 1 else ''
+                    raise ValueError("{} object is invalid - required column{} '{}' {} missing"
+                                     .format(self.__class__.__name__, plural, "', '".join(missing_columns), 
+                                             "are" if len(missing_columns) > 1 else "is"))
+                else:
+                    # This case handles when columns are present but in wrong order
+                    raise ValueError("{} object is invalid - expected '{}' "
+                                     "as the first column{} but found '{}'"
+                                     .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
 
             if (self._required_columns_relax
                     and self._required_columns == self.colnames[:len(self._required_columns)]):
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..bb007061ce
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,43 @@
+import numpy as np
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+
+print("=== Testing the original issue ===")
+time = Time(np.arange(100000, 100003), format='jd')
+ts = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts._required_columns = ["time", "flux"]
+try:
+    ts.remove_column("flux")
+    print("ERROR: Should have raised an exception!")
+except ValueError as e:
+    print(f"SUCCESS: Got expected error: {e}")
+
+print("\n=== Testing multiple missing columns ===")
+time = Time(np.arange(100000, 100003), format='jd')
+ts2 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7], "error": [0.1, 0.1, 0.1]})
+ts2._required_columns = ["time", "flux", "error"]
+try:
+    ts2.remove_columns(["flux", "error"])
+    print("ERROR: Should have raised an exception!")
+except ValueError as e:
+    print(f"SUCCESS: Got expected error: {e}")
+
+print("\n=== Testing single missing column ===")
+time = Time(np.arange(100000, 100003), format='jd')
+ts3 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7], "error": [0.1, 0.1, 0.1]})
+ts3._required_columns = ["time", "flux", "error"]
+try:
+    ts3.remove_column("error")
+    print("ERROR: Should have raised an exception!")
+except ValueError as e:
+    print(f"SUCCESS: Got expected error: {e}")
+
+print("\n=== Testing no columns edge case ===")
+time = Time(np.arange(100000, 100003), format='jd')
+ts4 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts4._required_columns = ["time", "flux"]
+try:
+    ts4.remove_columns(["time", "flux"])
+    print("ERROR: Should have raised an exception!")
+except ValueError as e:
+    print(f"SUCCESS: Got expected error: {e}")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 32ebe645ce..6ebe80c7a6 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..03d6e4d978
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,8 @@
+import numpy as np
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+
+time = Time(np.arange(100000, 100003), format='jd')
+ts = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts._required_columns = ["time", "flux"]
+ts.remove_column("flux")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5163072356
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,25 @@
+import numpy as np
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+
+# Test case 1: Multiple missing columns
+print("Test 1: Multiple missing columns")
+time = Time(np.arange(100000, 100003), format='jd')
+ts = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7], "error": [0.1, 0.1, 0.1]})
+ts._required_columns = ["time", "flux", "error"]
+ts.remove_columns(["flux", "error"])
+
+# Test case 2: Wrong order but all columns present
+print("Test 2: Wrong order but all columns present")
+time = Time(np.arange(100000, 100003), format='jd')
+ts2 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts2._required_columns = ["time", "flux"]
+# Manually reorder columns to test the wrong order case
+ts2 = ts2[["flux", "time"]]
+
+# Test case 3: No columns (edge case)
+print("Test 3: No columns")
+time = Time(np.arange(100000, 100003), format='jd')
+ts3 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts3._required_columns = ["time", "flux"]
+ts3.remove_columns(["time", "flux"])
\ No newline at end of file
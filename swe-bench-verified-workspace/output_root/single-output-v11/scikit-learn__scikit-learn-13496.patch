diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..e370e0709
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.ensemble import IsolationForest
+
+# Create some sample data
+X = np.random.randn(100, 2)
+
+# Test that warm_start is not currently exposed in __init__
+print("Testing if warm_start is exposed in IsolationForest.__init__...")
+
+# Try to create IsolationForest with warm_start parameter
+try:
+    iforest = IsolationForest(warm_start=True)
+    print("SUCCESS: warm_start parameter is accepted")
+except TypeError as e:
+    print(f"EXPECTED ERROR: {e}")
+
+# Test that warm_start can be set after initialization
+print("\nTesting if warm_start can be set after initialization...")
+iforest = IsolationForest(n_estimators=10)
+iforest.warm_start = True
+print(f"SUCCESS: warm_start set to {iforest.warm_start}")
+
+# Test incremental fitting with warm_start
+print("\nTesting incremental fitting with warm_start...")
+iforest = IsolationForest(n_estimators=5, random_state=42)
+iforest.warm_start = True
+
+# First fit
+iforest.fit(X)
+print(f"After first fit: {len(iforest.estimators_)} estimators")
+
+# Incremental fit - add more estimators
+iforest.n_estimators = 10
+iforest.fit(X)
+print(f"After incremental fit: {len(iforest.estimators_)} estimators")
+
+# Verify the warm_start behavior works correctly
+print("SUCCESS: warm_start incremental fitting works!")
\ No newline at end of file
diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py
index 8a1bd3625..f42c80532 100644
--- a/sklearn/ensemble/iforest.py
+++ b/sklearn/ensemble/iforest.py
@@ -120,6 +120,11 @@ class IsolationForest(BaseBagging, OutlierMixin):
     verbose : int, optional (default=0)
         Controls the verbosity of the tree building process.
 
+    warm_start : bool, optional (default=False)
+        When set to ``True``, reuse the solution of the previous call to fit
+        and add more estimators to the ensemble, otherwise, just fit a whole
+        new forest. See :term:`the Glossary <warm_start>`.
+
 
     Attributes
     ----------
@@ -173,7 +178,8 @@ class IsolationForest(BaseBagging, OutlierMixin):
                  n_jobs=None,
                  behaviour='old',
                  random_state=None,
-                 verbose=0):
+                 verbose=0,
+                 warm_start=False):
         super().__init__(
             base_estimator=ExtraTreeRegressor(
                 max_features=1,
@@ -187,7 +193,8 @@ class IsolationForest(BaseBagging, OutlierMixin):
             max_features=max_features,
             n_jobs=n_jobs,
             random_state=random_state,
-            verbose=verbose)
+            verbose=verbose,
+            warm_start=warm_start)
 
         self.behaviour = behaviour
         self.contamination = contamination
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..e0f117d70
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from sklearn.ensemble import IsolationForest
+
+# Create some sample data
+X = np.random.randn(100, 2)
+
+print("=== Comprehensive warm_start test for IsolationForest ===")
+
+# Test 1: Default warm_start value (should be False)
+print("\n1. Testing default warm_start value:")
+iforest = IsolationForest(n_estimators=5, random_state=42)
+print(f"Default warm_start: {iforest.warm_start}")
+
+# Test 2: Explicitly set warm_start to False
+print("\n2. Testing warm_start=False:")
+iforest = IsolationForest(n_estimators=5, warm_start=False, random_state=42)
+print(f"warm_start=False: {iforest.warm_start}")
+
+# Test 3: Explicitly set warm_start to True
+print("\n3. Testing warm_start=True:")
+iforest = IsolationForest(n_estimators=5, warm_start=True, random_state=42)
+print(f"warm_start=True: {iforest.warm_start}")
+
+# Test 4: Incremental fitting with warm_start=True
+print("\n4. Testing incremental fitting with warm_start=True:")
+iforest = IsolationForest(n_estimators=5, warm_start=True, random_state=42)
+
+# First fit
+iforest.fit(X)
+print(f"After first fit: {len(iforest.estimators_)} estimators")
+
+# Incremental fit - add more estimators
+iforest.n_estimators = 10
+iforest.fit(X)
+print(f"After incremental fit: {len(iforest.estimators_)} estimators")
+
+# Verify we have the expected number of estimators
+assert len(iforest.estimators_) == 10, f"Expected 10 estimators, got {len(iforest.estimators_)}"
+print("SUCCESS: Correct number of estimators after incremental fit")
+
+# Test 5: Incremental fitting with warm_start=False (should reset)
+print("\n5. Testing warm_start=False behavior:")
+iforest = IsolationForest(n_estimators=5, warm_start=False, random_state=42)
+
+# First fit
+iforest.fit(X)
+print(f"After first fit: {len(iforest.estimators_)} estimators")
+
+# Change n_estimators and fit again - should reset
+iforest.n_estimators = 10
+iforest.fit(X)
+print(f"After second fit with warm_start=False: {len(iforest.estimators_)} estimators")
+
+# Should have exactly 10 estimators (not 15)
+assert len(iforest.estimators_) == 10, f"Expected 10 estimators, got {len(iforest.estimators_)}"
+print("SUCCESS: warm_start=False correctly resets estimators")
+
+# Test 6: Verify predictions work correctly
+print("\n6. Testing predictions with warm_start:")
+iforest_warm = IsolationForest(n_estimators=5, warm_start=True, random_state=42)
+iforest_no_warm = IsolationForest(n_estimators=10, warm_start=False, random_state=42)
+
+# Fit both models
+iforest_warm.fit(X)
+iforest_warm.n_estimators = 10
+iforest_warm.fit(X)
+
+iforest_no_warm.fit(X)
+
+# Compare predictions
+pred_warm = iforest_warm.predict(X)
+pred_no_warm = iforest_no_warm.predict(X)
+
+print(f"Predictions with warm_start: {pred_warm[:5]}...")
+print(f"Predictions without warm_start: {pred_no_warm[:5]}...")
+
+# They should be similar (not necessarily identical due to random nature)
+print("SUCCESS: Predictions work correctly with both approaches")
+
+print("\n=== All tests passed! ===")
\ No newline at end of file
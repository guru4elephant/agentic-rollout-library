diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..32e27e126
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+from sklearn import svm
+from sklearn.datasets import samples_generator
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import f_regression
+from sklearn.pipeline import Pipeline
+
+# generate some data to play with
+X, y = samples_generator.make_classification(
+    n_informative=5, n_redundant=0, random_state=42)
+
+anova_filter = SelectKBest(f_regression, k=5)
+clf = svm.SVC(kernel='linear')
+pipe = Pipeline([('anova', anova_filter), ('svc', clf)])
+
+print("Testing len(pipe):")
+try:
+    result = len(pipe)
+    print(f"len(pipe) = {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+print("\nTesting pipe[:len(pipe)]:")
+try:
+    result = pipe[:len(pipe)]
+    print(f"pipe[:len(pipe)] succeeded: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 7eaf9a46f..3a11a8268 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -219,6 +219,10 @@ class Pipeline(_BaseComposition):
             return self.named_steps[ind]
         return est
 
+    def __len__(self):
+        """Returns the length of the Pipeline"""
+        return len(self.steps)
+
     @property
     def _estimator_type(self):
         return self.steps[-1][1]._estimator_type
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..7e93ee96f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,29 @@
+from sklearn.pipeline import Pipeline
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import f_regression
+from sklearn import svm
+
+# Test 1: Single step pipeline
+single_step = Pipeline([('svc', svm.SVC())])
+print(f"Single step pipeline length: {len(single_step)}")
+
+# Test 2: Multiple steps pipeline
+multi_step = Pipeline([
+    ('anova1', SelectKBest(f_regression,5)),
+    ('anova2', SelectKBest(f_regression,3)),
+    ('svc', svm.SVC())
+])
+print(f"Multi-step pipeline length: {len(multi_step)}")
+
+# Test 3: Pipeline with None/passthrough steps
+pipe_with_none = Pipeline([
+    ('step1', SelectKBest(f_regression, k=5)),
+    ('step2', None),
+    ('step3', 'passthrough'),
+    ('step4', svm.SVC())
+])
+print(f"Pipeline with None/passthrough length: {len(pipe_with_none)}")
+
+# Test 5: Verify slicing works correctly with len()
+print(f"pipe[:len(pipe)]: {pipe_with_none[:len(pipe_with_none)]}")
+print(f"pipe[:len(pipe)-1]: {pipe_with_none[:len(pipe_with_none)-1]}")
\ No newline at end of file
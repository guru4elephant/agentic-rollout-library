diff --git a/2d_compatibility_test.png b/2d_compatibility_test.png
new file mode 100644
index 0000000000..bea2ae82b4
Binary files /dev/null and b/2d_compatibility_test.png differ
diff --git a/empty_test.png b/empty_test.png
new file mode 100644
index 0000000000..871384c035
Binary files /dev/null and b/empty_test.png differ
diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py
index 9db44b7994..5479bc1af0 100644
--- a/lib/mpl_toolkits/mplot3d/axes3d.py
+++ b/lib/mpl_toolkits/mplot3d/axes3d.py
@@ -387,6 +387,8 @@ class Axes3D(Axes):
 
     @martist.allow_rasterization
     def draw(self, renderer):
+        if not self.get_visible():
+            return
         self._unstale_viewLim()
 
         # draw the background patch
diff --git a/multiple_test.png b/multiple_test.png
new file mode 100644
index 0000000000..cca64f785e
Binary files /dev/null and b/multiple_test.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ea693df4d7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+import matplotlib.pyplot as plt
+from matplotlib.gridspec import GridSpec
+
+fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})
+ax1.scatter(1,1,1)
+ax2.scatter(1,1,1, c='r')
+ax1.set_visible(False)
+
+print(f"ax1 visible: {ax1.get_visible()}")
+print(f"ax2 visible: {ax2.get_visible()}")
+
+# Save the figure to see the result
+plt.savefig('test_output.png')
+print("Figure saved to test_output.png")
\ No newline at end of file
diff --git a/test_2d_compatibility.py b/test_2d_compatibility.py
new file mode 100644
index 0000000000..8c7049c7aa
--- /dev/null
+++ b/test_2d_compatibility.py
@@ -0,0 +1,17 @@
+import matplotlib.pyplot as plt
+
+# Test that regular 2D axes still work correctly
+fig, (ax1, ax2) = plt.subplots(1, 2)
+ax1.plot([1, 2, 3], [1, 2, 3])
+ax2.plot([1, 2, 3], [3, 2, 1])
+
+ax1.set_title('2D Axes 1 (should be hidden)')
+ax2.set_title('2D Axes 2 (should be visible)')
+
+ax1.set_visible(False)
+
+print(f"2D ax1.get_visible(): {ax1.get_visible()}")
+print(f"2D ax2.get_visible(): {ax2.get_visible()}")
+
+plt.savefig('2d_compatibility_test.png')
+print("2D compatibility test saved and passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..34d1c84a05
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+
+# Test 1: Toggle visibility
+fig, ax = plt.subplots(subplot_kw={'projection': '3d'})
+ax.scatter([1, 2], [1, 2], [1, 2])
+
+print("Test 1: Toggle visibility")
+print(f"Initial visibility: {ax.get_visible()}")
+
+ax.set_visible(False)
+print(f"After set_visible(False): {ax.get_visible()}")
+
+ax.set_visible(True)
+print(f"After set_visible(True): {ax.get_visible()}")
+
+plt.savefig('toggle_test.png')
+print("Toggle test saved")
+
+# Test 2: Multiple operations
+fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})
+ax1.scatter([1], [1], [1])
+ax2.scatter([2], [2], [2])
+
+print("\nTest 2: Multiple operations")
+ax1.set_visible(False)
+ax2.set_visible(True)
+print(f"ax1 visibility: {ax1.get_visible()}")
+print(f"ax2 visibility: {ax2.get_visible()}")
+
+plt.savefig('multiple_test.png')
+print("Multiple test saved")
+
+# Test 3: Empty 3D axes
+fig, ax = plt.subplots(subplot_kw={'projection': '3d'})
+print(f"\nTest 3: Empty axes visibility: {ax.get_visible()}")
+ax.set_visible(False)
+print(f"After set_visible(False): {ax.get_visible()}")
+
+plt.savefig('empty_test.png')
+print("Empty test saved")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/test_output.png b/test_output.png
new file mode 100644
index 0000000000..755fe85543
Binary files /dev/null and b/test_output.png differ
diff --git a/test_visibility.py b/test_visibility.py
new file mode 100644
index 0000000000..46d0741147
--- /dev/null
+++ b/test_visibility.py
@@ -0,0 +1,34 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Create a figure with two 3D subplots
+fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})
+
+# Add some data to both subplots
+ax1.scatter([1, 2, 3], [1, 2, 3], [1, 2, 3], c='b', marker='o')
+ax2.scatter([1, 2, 3], [1, 2, 3], [1, 2, 3], c='r', marker='^')
+
+# Set titles for clarity
+ax1.set_title('Axes 1 (should be hidden)')
+ax2.set_title('Axes 2 (should be visible)')
+
+# Make ax1 invisible
+ax1.set_visible(False)
+
+print(f"ax1.get_visible(): {ax1.get_visible()}")
+print(f"ax2.get_visible(): {ax2.get_visible()}")
+
+# Save and show
+plt.savefig('visibility_test.png', dpi=100, bbox_inches='tight')
+print("Figure saved as visibility_test.png")
+
+# Also test with regular 2D axes for comparison
+fig2, (ax3, ax4) = plt.subplots(1, 2)
+ax3.plot([1, 2, 3], [1, 2, 3], 'b-')
+ax4.plot([1, 2, 3], [3, 2, 1], 'r-')
+ax3.set_title('2D Axes 3 (should be hidden)')
+ax4.set_title('2D Axes 4 (should be visible)')
+ax3.set_visible(False)
+
+plt.savefig('visibility_test_2d.png', dpi=100, bbox_inches='tight')
+print("2D comparison figure saved as visibility_test_2d.png")
\ No newline at end of file
diff --git a/toggle_test.png b/toggle_test.png
new file mode 100644
index 0000000000..b57c9eef4b
Binary files /dev/null and b/toggle_test.png differ
diff --git a/visibility_test.png b/visibility_test.png
new file mode 100644
index 0000000000..64b1566782
Binary files /dev/null and b/visibility_test.png differ
diff --git a/visibility_test_2d.png b/visibility_test_2d.png
new file mode 100644
index 0000000000..08972c2196
Binary files /dev/null and b/visibility_test_2d.png differ
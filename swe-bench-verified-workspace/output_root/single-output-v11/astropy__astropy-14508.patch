diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..a05ff2c029 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,31 +1299,40 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
-    if "." not in value_str and "E" not in value_str:
-        value_str += ".0"
-    elif "E" in value_str:
-        # On some Windows builds of Python (and possibly other platforms?) the
-        # exponent is zero-padded out to, it seems, three digits.  Normalize
-        # the format to pad only to two digits.
-        significand, exponent = value_str.split("E")
-        if exponent[0] in ("+", "-"):
-            sign = exponent[0]
-            exponent = exponent[1:]
-        else:
-            sign = ""
-        value_str = f"{significand}E{sign}{int(exponent):02d}"
+    # First try using Python's default string representation
+    value_str = str(value)
+    
+    # Convert any lowercase 'e' to uppercase 'E' for FITS compliance
+    if "e" in value_str:
+        value_str = value_str.replace("e", "E")
+    
+    # If the default representation is too long (>20 characters), fall back to scientific notation
+    if len(value_str) > 20:
+        value_str = f"{value:.16G}"
+        if "." not in value_str and "E" not in value_str:
+            value_str += ".0"
+        elif "E" in value_str:
+            # On some Windows builds of Python (and possibly other platforms?) the
+            # exponent is zero-padded out to, it seems, three digits.  Normalize
+            # the format to pad only to two digits.
+            significand, exponent = value_str.split("E")
+            if exponent[0] in ("+", "-"):
+                sign = exponent[0]
+                exponent = exponent[1:]
+            else:
+                sign = ""
+            value_str = f"{significand}E{sign}{int(exponent):02d}"
 
-    # Limit the value string to at most 20 characters.
-    str_len = len(value_str)
+        # Limit the value string to at most 20 characters.
+        str_len = len(value_str)
 
-    if str_len > 20:
-        idx = value_str.find("E")
+        if str_len > 20:
+            idx = value_str.find("E")
 
-        if idx < 0:
-            value_str = value_str[:20]
-        else:
-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+            if idx < 0:
+                value_str = value_str[:20]
+            else:
+                value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
 
     return value_str
 
diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 0000000000..15f622f0b4
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+# Test the specific value from the failing test
+test_value = 5.0022221e-07
+
+print(f"Original value: {test_value}")
+print(f"str(value): '{str(test_value)}'")
+print(f"repr(value): '{repr(test_value)}'")
+
+# Test our modified _format_float
+from astropy.io.fits.card import _format_float
+result = _format_float(test_value)
+print(f"_format_float(result): '{result}'")
+print(f"Length: {len(result)}")
+
+# Test what the old version would produce
+def old_format_float(value):
+    """Original _format_float implementation"""
+    value_str = f"{value:.16G}"
+    if "." not in value_str and "E" not in value_str:
+        value_str += ".0"
+    elif "E" in value_str:
+        significand, exponent = value_str.split("E")
+        if exponent[0] in ("+", "-"):
+            sign = exponent[0]
+            exponent = exponent[1:]
+        else:
+            sign = ""
+        value_str = f"{significand}E{sign}{int(exponent):02d}"
+
+    # Limit the value string to at most 20 characters.
+    str_len = len(value_str)
+
+    if str_len > 20:
+        idx = value_str.find("E")
+        if idx < 0:
+            value_str = value_str[:20]
+        else:
+            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+
+    return value_str
+
+old_result = old_format_float(test_value)
+print(f"old_format_float(result): '{old_result}'")
+print(f"Length: {len(old_result)}")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 65df5b1b77..d02c4f9eda 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4c51c12973
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+import numpy as np
+
+# Create a test case similar to the one described in the issue
+print("Testing the float formatting issue...")
+
+# Test value from the issue
+test_value = 0.009125
+
+# Test the _format_float function directly
+from astropy.io.fits.card import _format_float
+
+result = _format_float(test_value)
+print(f"_format_float({test_value}) = '{result}'")
+print(f"Length: {len(result)} characters")
+
+# Test with Card creation
+print("\nTesting Card creation...")
+try:
+    new_c = fits.Card('HIERARCH ESO IFM CL RADIUS', test_value, '[m] radius arround actuator to avoid')
+    print(f"Card created successfully:")
+    print(f"repr: {repr(new_c)}")
+    print(f"str: {str(new_c)}")
+    print(f"Length of string representation: {len(str(new_c))} characters")
+except Exception as e:
+    print(f"Error creating card: {e}")
+
+# Test with different float values that might have similar issues
+test_values = [0.009125, 1.23456789, 123.456789, 0.000123456789]
+print("\nTesting various float values:")
+for val in test_values:
+    result = _format_float(val)
+    print(f"_format_float({val}) = '{result}' (length: {len(result)})")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..6de194f508
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+from astropy.io.fits.card import _format_float
+import numpy as np
+
+def test_format_float():
+    """Test various float formatting scenarios"""
+    
+    test_cases = [
+        # Simple cases
+        0.0,
+        1.0,
+        123.456,
+        0.001,
+        1000000.0,
+        
+        # Edge cases that might need scientific notation
+        1.234567890123456789,  # More than 20 digits
+        0.000000000123456789,  # Very small number
+        12345678901234567890.0,  # Very large number
+        
+        # The problematic case from the issue
+        0.009125,
+        
+        # NaN and infinity
+        float('nan'),
+        float('inf'),
+        float('-inf'),
+        
+        # Numpy floats
+        np.float32(1.234),
+        np.float64(1.23456789),
+    ]
+    
+    print("Testing _format_float with various values:")
+    print("=" * 50)
+    
+    for value in test_cases:
+        try:
+            result = _format_float(value)
+            length = len(result)
+            print(f"_format_float({value}) = '{result}' (length: {length})")
+            
+            # Check that the result is <= 20 characters
+            assert length <= 20, f"Result '{result}' is too long ({length} > 20)"
+            
+        except Exception as e:
+            print(f"Error with {value}: {e}")
+    
+    print("\n" + "=" * 50)
+    print("All tests passed!")
+
+def test_card_creation():
+    """Test that cards can be created without comment truncation"""
+    
+    test_cases = [
+        ("TEST1", 0.009125, "This is a test comment"),
+        ("TEST2", 1.23456789, "Another test comment"),
+        ("TEST3", 0.000123456789, "Yet another comment"),
+        ("HIERARCH LONG KEYWORD NAME", 123.456, "Comment for long keyword"),
+    ]
+    
+    print("Testing Card creation:")
+    print("=" * 50)
+    
+    for keyword, value, comment in test_cases:
+        try:
+            card = fits.Card(keyword, value, comment)
+            card_str = str(card)
+            print(f"Card '{keyword}': '{card_str}' (length: {len(card_str)})")
+            
+            # Check that the card is exactly 80 characters (standard FITS card length)
+            assert len(card_str) == 80, f"Card length is {len(card_str)}, expected 80"
+            
+            # Check that the comment is preserved (if it should fit)
+            if comment and len(comment) <= 68:  # Rough estimate of available space
+                assert comment in card_str, f"Comment '{comment}' not found in card string"
+                
+        except Exception as e:
+            print(f"Error creating card {keyword}: {e}")
+
+if __name__ == "__main__":
+    test_format_float()
+    print("\n")
+    test_card_creation()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2a9feeb1f8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+from astropy.io.fits.card import _format_float
+
+# Test cases where the default string representation might be too long
+test_cases = [
+    1.2345678901234567890123456789,  # Very long decimal
+    0.000000000000000000123456789,   # Very small number
+    1234567890123456789012345678.0,  # Very large number
+    1.2345678901234567e-20,          # Scientific notation needed
+    1.2345678901234567e+20,          # Scientific notation needed
+]
+
+print("Testing edge cases that might require scientific notation:")
+print("=" * 50)
+
+for value in test_cases:
+    result = _format_float(value)
+    length = len(result)
+    print(f"_format_float({value}) = '{result}' (length: {length})")
+    
+    # Verify the result is <= 20 characters
+    assert length <= 20, f"Result '{result}' is too long ({length} > 20)"
+    
+    # Verify scientific notation is used when appropriate
+    if len(str(value)) > 20:
+        assert "E" in result or "e" in result, f"Scientific notation should be used for {value}"
+
+print("\n" + "=" * 50)
+print("All edge case tests passed!")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..a7550b53f6
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+from astropy.io import fits
+
+# Reproduce the exact test case from the GitHub issue
+print("Testing the original issue scenario:")
+
+# Create a card with the exact values from the issue
+test_value = 0.009125
+test_comment = '[m] radius arround actuator to avoid'
+
+# Test creating the card
+new_c = fits.Card('HIERARCH ESO IFM CL RADIUS', test_value, test_comment)
+
+print(f"repr(new_c): {repr(new_c)}")
+print(f"str(new_c): '{str(new_c)}'")
+print(f"Length: {len(str(new_c))} characters")
+
+# Verify the results match the expected behavior
+expected_repr = "('ESO IFM CL RADIUS', 0.009125, '[m] radius arround actuator to avoid')"
+expected_str_start = 'HIERARCH ESO IFM CL RADIUS = 0.009125 / [m] radius arround actuator to avoid'
+
+assert repr(new_c) == expected_repr, f"repr mismatch: {repr(new_c)} != {expected_repr}"
+assert str(new_c).startswith(expected_str_start), f"str mismatch: {str(new_c)} doesn't start with {expected_str_start}"
+assert len(str(new_c)) == 80, f"Card length should be 80, got {len(str(new_c))}"
+
+print("\nOriginal issue has been resolved successfully!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..46cd2a072
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the linkcheck issue with local links.
+"""
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_linkcheck_local_links():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple index.rst with broken external and local links
+        index_content = """\
+broken external-link_
+broken local-link_
+
+.. _external-link: https://lkfqhlkghflkhs
+.. _local-link: doesntexist
+"""
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create a simple conf.py
+        conf_content = """\
+project = 'Test Project'
+extensions = []
+"""
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Run Sphinx linkcheck
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'linkcheck')
+            app.build()
+        
+        # Check the output
+        output_file = os.path.join(outdir, 'output.txt')
+        if os.path.exists(output_file):
+            with open(output_file, 'r') as f:
+                output = f.read()
+                print("Linkcheck output:")
+                print(output)
+                
+                # Check if local link error is reported
+                if 'doesntexist' in output:
+                    print("\n✓ Local link error is reported")
+                else:
+                    print("\n✗ Local link error is NOT reported")
+        else:
+            print("No output file found")
+
+if __name__ == '__main__':
+    test_linkcheck_local_links()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index dd5317087..e4ff934fa 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -9,6 +9,7 @@
 """
 
 import json
+import os
 import queue
 import re
 import socket
@@ -213,7 +214,30 @@ class CheckExternalLinksBuilder(Builder):
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
             elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
+                # Check if local link exists
+                try:
+                    # First, check if it's a document reference
+                    if uri in self.env.found_docs:
+                        return 'working', '', 0
+                    
+                    # If not a document, try to resolve as a file path
+                    rel_fn, abs_fn = self.env.relfn2path(uri, docname)
+                    
+                    # Check if the file exists
+                    if os.path.exists(abs_fn):
+                        return 'working', '', 0
+                    
+                    # Check if the resolved path corresponds to a document
+                    doc_ref = self.env.path2doc(abs_fn)
+                    if doc_ref is not None and doc_ref in self.env.found_docs:
+                        return 'working', '', 0
+                    
+                    # If neither file nor document exists, it's broken
+                    return 'broken', __('Local link "%s" does not exist') % uri, 0
+                    
+                except Exception as err:
+                    # If there's any error resolving the path, treat as broken
+                    return 'broken', str(err), 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
diff --git a/test_comprehensive_local_links.py b/test_comprehensive_local_links.py
new file mode 100644
index 000000000..220c21dca
--- /dev/null
+++ b/test_comprehensive_local_links.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for local link checking.
+"""
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_comprehensive_local_links():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple index.rst with various types of links
+        index_content = """\
+Test Local Links
+================
+
+- Broken local file: `broken-link`_
+- Existing local file: `existing-file`_
+- Document reference: `document-ref`_
+
+.. _broken-link: doesntexist.txt
+.. _existing-file: existing.txt
+.. _document-ref: other-doc
+
+Also testing relative paths: :doc:`other-doc` and :ref:`other-doc`.
+"""
+
+        # Create another document
+        other_doc_content = """\
+Other Document
+==============
+
+This is another document.
+"""
+
+        # Create an existing file
+        existing_file_content = "This file exists."
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        with open(os.path.join(srcdir, 'other-doc.rst'), 'w') as f:
+            f.write(other_doc_content)
+            
+        with open(os.path.join(srcdir, 'existing.txt'), 'w') as f:
+            f.write(existing_file_content)
+        
+        # Create a simple conf.py
+        conf_content = """\
+project = 'Test Project'
+extensions = []
+"""
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Run Sphinx linkcheck
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'linkcheck')
+            app.build()
+        
+        # Check the output
+        output_file = os.path.join(outdir, 'output.txt')
+        if os.path.exists(output_file):
+            with open(output_file, 'r') as f:
+                output = f.read()
+                print("Linkcheck output:")
+                print(output)
+                
+                # Check results
+                if 'doesntexist.txt' in output and 'broken' in output:
+                    print("\n✓ Broken local link is properly reported")
+                else:
+                    print("\n✗ Broken local link is NOT properly reported")
+                    
+                # Working links might not appear in output.txt, so we need to check console output
+                # The fact that we didn't get an error for existing.txt and other-doc means they're working
+                if 'existing.txt' not in output or 'broken' not in output:
+                    print("✓ Existing local file is not reported as broken")
+                else:
+                    print("✗ Existing local file is incorrectly reported")
+                    
+                if 'other-doc' not in output or 'broken' not in output:
+                    print("✓ Document reference is not reported as broken")
+                else:
+                    print("✗ Document reference is incorrectly reported")
+        else:
+            print("No output file found")
+
+if __name__ == '__main__':
+    test_comprehensive_local_links()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..e2d56d8eb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for local link checking.
+"""
+
+import os
+import tempfile
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_edge_cases():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple index.rst with edge cases
+        index_content = """\
+Test Edge Cases
+===============
+
+- Empty link: `empty-link`_
+- Anchor link: `anchor-link`_
+- Mailto link: `mailto-link`_
+- FTP link: `ftp-link`_
+- Relative path: `relative-link`_
+- Absolute path: `absolute-link`_
+
+.. _empty-link: 
+.. _anchor-link: #section
+.. _mailto-link: mailto:test@example.com
+.. _ftp-link: ftp://example.com/file.txt
+.. _relative-link: ../file.txt
+.. _absolute-link: /absolute/path.txt
+"""
+
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Create a simple conf.py
+        conf_content = """\
+project = 'Test Project'
+extensions = []
+"""
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Run Sphinx linkcheck
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'linkcheck')
+            app.build()
+        
+        # Check the output
+        output_file = os.path.join(outdir, 'output.txt')
+        if os.path.exists(output_file):
+            with open(output_file, 'r') as f:
+                output = f.read()
+                print("Linkcheck output:")
+                print(output)
+                
+                # Check results
+                if 'mailto:test@example.com' not in output:
+                    print("✓ Mailto links are properly ignored")
+                else:
+                    print("✗ Mailto links are not properly ignored")
+                    
+                if 'ftp://example.com/file.txt' not in output:
+                    print("✓ FTP links are properly ignored")
+                else:
+                    print("✗ FTP links are not properly ignored")
+                    
+                if '#section' not in output:
+                    print("✓ Anchor links are properly ignored")
+                else:
+                    print("✗ Anchor links are not properly ignored")
+        else:
+            print("No output file found")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_local_only.py b/test_local_only.py
new file mode 100644
index 000000000..ceb17a1b0
--- /dev/null
+++ b/test_local_only.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Test to verify that local link checking works without affecting external links.
+"""
+
+import os
+import tempfile
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_local_only():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple index.rst with only local links
+        index_content = """\
+Test Local Links Only
+=====================
+
+- Broken local file: `broken-link`_
+- Existing local file: `existing-file`_
+
+.. _broken-link: doesntexist.txt
+.. _existing-file: existing.txt
+"""
+
+        # Create an existing file
+        existing_file_content = "This file exists."
+        
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+            
+        with open(os.path.join(srcdir, 'existing.txt'), 'w') as f:
+            f.write(existing_file_content)
+        
+        # Create a simple conf.py
+        conf_content = """\
+project = 'Test Project'
+extensions = []
+"""
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Run Sphinx linkcheck
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'linkcheck')
+            app.build()
+        
+        # Check the output
+        output_file = os.path.join(outdir, 'output.txt')
+        if os.path.exists(output_file):
+            with open(output_file, 'r') as f:
+                output = f.read()
+                print("Linkcheck output:")
+                print(output)
+                
+                # Check results - only local links should be processed
+                if 'doesntexist.txt' in output and 'broken' in output:
+                    print("\n✓ Broken local link is properly reported")
+                else:
+                    print("\n✗ Broken local link is NOT properly reported")
+                    
+                # Working local links might not appear in output.txt
+                if 'existing.txt' not in output or 'broken' not in output:
+                    print("✓ Existing local file is not reported as broken")
+                else:
+                    print("✗ Existing local file is incorrectly reported")
+        else:
+            print("No output file found")
+
+if __name__ == '__main__':
+    test_local_only()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index bddd822a6..34baee205 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
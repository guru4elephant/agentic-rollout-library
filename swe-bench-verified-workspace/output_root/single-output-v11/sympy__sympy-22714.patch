diff --git a/debug_evaluation.py b/debug_evaluation.py
new file mode 100644
index 0000000000..e661de1366
--- /dev/null
+++ b/debug_evaluation.py
@@ -0,0 +1,27 @@
+import sympy as sp
+from sympy import Integer, Float, S, simplify, nsimplify
+from sympy.core.containers import Tuple
+
+print("Testing evaluation process...")
+with sp.evaluate(False):
+    coords = Tuple(Integer(1), Integer(2))
+    print(f"Original coords: {coords}")
+    print(f"coords.atoms(Float): {coords.atoms(Float)}")
+    
+    # This is what happens in the evaluation step
+    evaluated_coords = coords.xreplace({
+        f: simplify(nsimplify(f, rational=True))
+         for f in coords.atoms(Float)
+    })
+    print(f"After evaluation step: {evaluated_coords}")
+
+print("\nTesting with evaluate=True...")
+coords = Tuple(Integer(1), Integer(2))
+print(f"Original coords: {coords}")
+print(f"coords.atoms(Float): {coords.atoms(Float)}")
+
+evaluated_coords = coords.xreplace({
+    f: simplify(nsimplify(f, rational=True))
+    for f in coords.atoms(Float)
+})
+print(f"After evaluation step: {evaluated_coords}")
\ No newline at end of file
diff --git a/debug_im.py b/debug_im.py
new file mode 100644
index 0000000000..e87a6b6c6c
--- /dev/null
+++ b/debug_im.py
@@ -0,0 +1,23 @@
+import sympy as sp
+from sympy import Integer, im
+
+print("Testing im() function with Integer objects...")
+with sp.evaluate(False):
+    i1 = Integer(1)
+    i2 = Integer(2)
+    
+    print(f"Integer(1): {i1}")
+    print(f"im(Integer(1)): {im(i1)}")
+    print(f"bool(im(Integer(1))): {bool(im(i1))}")
+    
+    print(f"Integer(2): {i2}")
+    print(f"im(Integer(2)): {im(i2)}")
+    print(f"bool(im(Integer(2))): {bool(im(i2))}")
+
+print("\nTesting with evaluated integers...")
+i1_eval = Integer(1)
+i2_eval = Integer(2)
+
+print(f"Integer(1) evaluated: {i1_eval}")
+print(f"im(Integer(1)): {im(i1_eval)}")
+print(f"bool(im(Integer(1))): {bool(im(i1_eval))}")
\ No newline at end of file
diff --git a/debug_integers.py b/debug_integers.py
new file mode 100644
index 0000000000..7f36392d1f
--- /dev/null
+++ b/debug_integers.py
@@ -0,0 +1,26 @@
+import sympy as sp
+from sympy import Integer, im
+
+print("Testing Integer objects...")
+with sp.evaluate(False):
+    i1 = Integer(1)
+    i2 = Integer(2)
+    
+    print(f"Integer(1): {i1}")
+    print(f"Integer(1).is_number: {i1.is_number}")
+    print(f"im(Integer(1)): {im(i1)}")
+    print(f"Integer(1).is_number and im(Integer(1)): {i1.is_number and im(i1)}")
+    
+    print(f"Integer(2): {i2}")
+    print(f"Integer(2).is_number: {i2.is_number}")
+    print(f"im(Integer(2)): {im(i2)}")
+    print(f"Integer(2).is_number and im(Integer(2)): {i2.is_number and im(i2)}")
+
+print("\nTesting evaluated integers...")
+i1_eval = Integer(1)
+i2_eval = Integer(2)
+
+print(f"Integer(1) evaluated: {i1_eval}")
+print(f"Integer(1).is_number: {i1_eval.is_number}")
+print(f"im(Integer(1)): {im(i1_eval)}")
+print(f"Integer(1).is_number and im(Integer(1)): {i1_eval.is_number and im(i1_eval)}")
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..de8b582ddb
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,77 @@
+import sympy as sp
+
+def test_original_issue():
+    """Test the exact issue reported in the GitHub issue"""
+    print("Testing original issue...")
+    
+    # This should work now (was failing before)
+    try:
+        with sp.evaluate(False):
+            result = sp.S('Point2D(Integer(1),Integer(2))')
+            print("‚úì with sp.evaluate(False):", result)
+    except Exception as e:
+        print("‚úó with sp.evaluate(False):", e)
+        return False
+    
+    # These should continue to work
+    try:
+        result = sp.S('Point2D(Integer(1),Integer(2))')
+        print("‚úì Without evaluate(False):", result)
+    except Exception as e:
+        print("‚úó Without evaluate(False):", e)
+        return False
+    
+    try:
+        result = sp.S('Point2D(Integer(1),Integer(2))', evaluate=False)
+        print("‚úì With evaluate=False parameter:", result)
+    except Exception as e:
+        print("‚úó With evaluate=False parameter:", e)
+        return False
+    
+    return True
+
+def test_edge_cases():
+    """Test various edge cases"""
+    print("\nTesting edge cases...")
+    
+    # Test Point3D
+    try:
+        with sp.evaluate(False):
+            result = sp.S('Point3D(Integer(1),Integer(2),Integer(3))')
+            print("‚úì Point3D with evaluate(False):", result)
+    except Exception as e:
+        print("‚úó Point3D with evaluate(False):", e)
+        return False
+    
+    # Test that imaginary coordinates still fail
+    try:
+        with sp.evaluate(False):
+            result = sp.S('Point2D(I,Integer(2))')
+            print("‚úó Imaginary coordinates should fail:", result)
+            return False
+    except ValueError as e:
+        if "Imaginary coordinates are not permitted" in str(e):
+            print("‚úì Imaginary coordinates properly fail")
+        else:
+            print("‚úó Wrong error for imaginary coordinates:", e)
+            return False
+    
+    # Test that complex coordinates still fail
+    try:
+        with sp.evaluate(False):
+            result = sp.S('Point2D(1+I,Integer(2))')
+            print("‚úó Complex coordinates should fail:", result)
+            return False
+    except Exception as e:
+        print("‚úì Complex coordinates properly fail:", type(e).__name__)
+    
+    return True
+
+if __name__ == "__main__":
+    success1 = test_original_issue()
+    success2 = test_edge_cases()
+    
+    if success1 and success2:
+        print("\nüéâ All tests passed! The issue has been fixed.")
+    else:
+        print("\n‚ùå Some tests failed.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2ee30b7d17
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+import sympy as sp
+
+print("Testing Point2D with evaluate(False) context...")
+try:
+    with sp.evaluate(False):
+        result = sp.S('Point2D(Integer(1),Integer(2))')
+        print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
+
+print("\nTesting Point2D without evaluate(False) context...")
+try:
+    result = sp.S('Point2D(Integer(1),Integer(2))')
+    print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
+
+print("\nTesting Point2D with evaluate=False parameter...")
+try:
+    result = sp.S('Point2D(Integer(1),Integer(2))', evaluate=False)
+    print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 73c20334d0..bceb7659f8 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -152,8 +152,6 @@ def __new__(cls, *args, **kwargs):
                         'warn' or 'ignore'.'''))
         if any(coords[dim:]):
             raise ValueError('Nonzero coordinates cannot be removed.')
-        if any(a.is_number and im(a) for a in coords):
-            raise ValueError('Imaginary coordinates are not permitted.')
         if not all(isinstance(a, Expr) for a in coords):
             raise TypeError('Coordinates must be valid SymPy expressions.')
 
@@ -167,6 +165,11 @@ def __new__(cls, *args, **kwargs):
                 f: simplify(nsimplify(f, rational=True))
                  for f in coords.atoms(Float)})
 
+        # Check for imaginary coordinates after potential evaluation
+        # For unevaluated expressions, we need to check if they would evaluate to imaginary numbers
+        if any(a.is_number and (im(a) if evaluate else im(a).simplify()) for a in coords):
+            raise ValueError('Imaginary coordinates are not permitted.')
+
         # return 2D or 3D instances
         if len(coords) == 2:
             kwargs['_nocheck'] = True
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..946cc81727
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,56 @@
+import sympy as sp
+from sympy import I, Integer
+
+print("Testing edge cases...")
+
+# Test 1: Real coordinates with evaluate(False)
+print("\n1. Testing real coordinates with evaluate(False):")
+try:
+    with sp.evaluate(False):
+        result = sp.S('Point2D(Integer(1),Integer(2))')
+        print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
+
+# Test 2: Real coordinates with evaluate=True
+print("\n2. Testing real coordinates with evaluate=True:")
+try:
+    result = sp.S('Point2D(Integer(1),Integer(2))')
+    print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
+
+# Test 3: Imaginary coordinates should still fail
+print("\n3. Testing imaginary coordinates (should fail):")
+try:
+    with sp.evaluate(False):
+        result = sp.S('Point2D(I,Integer(2))')
+        print("SUCCESS:", result)
+except Exception as e:
+    print("EXPECTED ERROR:", e)
+
+# Test 4: Complex coordinates should still fail
+print("\n4. Testing complex coordinates (should fail):")
+try:
+    with sp.evaluate(False):
+        result = sp.S('Point2D(1+I,Integer(2))')
+        print("SUCCESS:", result)
+except Exception as e:
+    print("EXPECTED ERROR:", e)
+
+# Test 5: Float coordinates with evaluate(False)
+print("\n5. Testing float coordinates with evaluate(False):")
+try:
+    with sp.evaluate(False):
+        result = sp.S('Point2D(1.0,2.0)')
+        print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
+
+# Test 6: Float coordinates with evaluate=True
+print("\n6. Testing float coordinates with evaluate=True:")
+try:
+    result = sp.S('Point2D(1.0,2.0)')
+    print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
\ No newline at end of file
diff --git a/test_evalf.py b/test_evalf.py
new file mode 100644
index 0000000000..ee63dddcf7
--- /dev/null
+++ b/test_evalf.py
@@ -0,0 +1,15 @@
+import sympy as sp
+from sympy import Integer, im
+
+print("Testing evalf() approach...")
+with sp.evaluate(False):
+    i1 = Integer(1)
+    i2 = Integer(2)
+    
+    print(f"Integer(1): {i1}")
+    print(f"im(Integer(1).evalf()): {im(i1.evalf())}")
+    print(f"bool(im(Integer(1).evalf())): {bool(im(i1.evalf()))}")
+    
+    print(f"Integer(2): {i2}")
+    print(f"im(Integer(2).evalf()): {im(i2.evalf())}")
+    print(f"bool(im(Integer(2).evalf())): {bool(im(i2.evalf()))}")
\ No newline at end of file
diff --git a/test_point3d.py b/test_point3d.py
new file mode 100644
index 0000000000..c6ef046ca2
--- /dev/null
+++ b/test_point3d.py
@@ -0,0 +1,18 @@
+import sympy as sp
+
+print("Testing Point3D with evaluate(False)...")
+
+# Test Point3D with evaluate(False)
+try:
+    with sp.evaluate(False):
+        result = sp.S('Point3D(Integer(1),Integer(2),Integer(3))')
+        print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
+
+# Test Point3D without evaluate(False)
+try:
+    result = sp.S('Point3D(Integer(1),Integer(2),Integer(3))')
+    print("SUCCESS:", result)
+except Exception as e:
+    print("ERROR:", e)
\ No newline at end of file
diff --git a/test_simplify.py b/test_simplify.py
new file mode 100644
index 0000000000..cbb888b37e
--- /dev/null
+++ b/test_simplify.py
@@ -0,0 +1,15 @@
+import sympy as sp
+from sympy import Integer, im
+
+print("Testing simplify() approach...")
+with sp.evaluate(False):
+    i1 = Integer(1)
+    i2 = Integer(2)
+    
+    print(f"Integer(1): {i1}")
+    print(f"im(Integer(1)).simplify(): {im(i1).simplify()}")
+    print(f"bool(im(Integer(1)).simplify()): {bool(im(i1).simplify())}")
+    
+    print(f"Integer(2): {i2}")
+    print(f"im2).simplify(): {im(i2).simplify()}")
+    print(f"bool(im(Integer(2)).simplify()): {bool(im(i2).simplify())}")
\ No newline at end of file
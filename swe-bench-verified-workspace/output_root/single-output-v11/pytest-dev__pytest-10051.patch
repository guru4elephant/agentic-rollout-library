diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index a4f4214b1..7ccac3745 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -440,7 +440,14 @@ class LogCaptureFixture:
 
     def clear(self) -> None:
         """Reset the list of log records and the captured log text."""
+        # Store the old records reference before resetting
+        old_records = self.handler.records
         self.handler.reset()
+        # Update the stash to point to the new records list
+        records_dict = self._item.stash[caplog_records_key]
+        for when in records_dict:
+            if records_dict[when] is old_records:
+                records_dict[when] = self.handler.records
 
     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:
         """Set the level of a logger for the duration of a test.
diff --git a/test_multiple_phases.py b/test_multiple_phases.py
new file mode 100644
index 000000000..65261f554
--- /dev/null
+++ b/test_multiple_phases.py
@@ -0,0 +1,29 @@
+import logging
+import pytest
+
+def test_multiple_phases(caplog) -> None:
+    """Test that caplog.clear() works correctly across multiple test phases."""
+    
+    # Setup phase
+    logging.warning("setup log")
+    assert len(caplog.get_records("setup")) == 1
+    assert len(caplog.records) == 1
+    
+    caplog.clear()
+    assert len(caplog.get_records("setup")) == 0
+    assert len(caplog.records) == 0
+    
+    # Call phase (main test)
+    logging.error("call log")
+    assert len(caplog.get_records("call")) == 1
+    assert len(caplog.records) == 1
+    
+    caplog.clear()
+    assert len(caplog.get_records("call")) == 0
+    assert len(caplog.records) == 0
+    
+    # Teardown phase would be tested similarly
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
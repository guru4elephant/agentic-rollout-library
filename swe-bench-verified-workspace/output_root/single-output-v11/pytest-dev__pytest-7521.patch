diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..f693ad153
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,10 @@
+#!/usr/bin/env python3
+
+def test_capfd_includes_carriage_return(capfd):
+    print('Greetings from DOS', end='\r')
+    out, err = capfd.readouterr()
+    assert out.endswith('\r')
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py
index 3f9c60fb9..f538b67ec 100644
--- a/src/_pytest/capture.py
+++ b/src/_pytest/capture.py
@@ -388,6 +388,7 @@ class FDCaptureBinary:
                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
                 encoding="utf-8",
                 errors="replace",
+                newline="",
                 write_through=True,
             )
             if targetfd in patchsysdict:
diff --git a/test_binary_capture.py b/test_binary_capture.py
new file mode 100644
index 000000000..21549f992
--- /dev/null
+++ b/test_binary_capture.py
@@ -0,0 +1,12 @@
+#!/usr/bin/env python3
+
+def test_capfdbinary_preserves_bytes(capfdbinary):
+    # Test that binary capture still works
+    import sys
+    sys.stdout.buffer.write(b'Hello\rWorld')
+    out, err = capfdbinary.readouterr()
+    assert out == b'Hello\rWorld'
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..f23c84720
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+def test_capfd_preserves_carriage_return(capfd):
+    # Test with carriage return at the end
+    print('Test 1', end='\r')
+    out, err = capfd.readouterr()
+    assert out.endswith('\r')
+    assert out == 'Test 1\r'
+
+def test_capfd_preserves_carriage_return_middle(capfd):
+    # Test with carriage return in the middle
+    print('Hello\rWorld')
+    out, err = capfd.readouterr()
+    assert '\r' in out
+    assert out == 'Hello\rWorld\n'
+
+def test_capfd_preserves_mixed_newlines(capfd):
+    # Test with mixed newlines
+    print('Line 1\r\nLine 2\nLine 3\r')
+    out, err = capfd.readouterr()
+    assert out == 'Line 1\r\nLine 2\nLine 3\r\n'
+
+def test_capfd_preserves_no_newline(capfd):
+    # Test without newline at the end
+    print('No newline', end='')
+    out, err = capfd.readouterr()
+    assert out == 'No newline'
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..628783161
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+def test_progress_percentage_sameline(capfd):
+    # This is the exact test case from the GitHub issue
+    pi = ProgressIndicatorPercent(1000, step=5, start=0, msg="%3.0f%%")
+    pi.logger.setLevel('INFO')
+    pi.show(0)
+    out, err = capfd.readouterr()
+    assert err == '  0%\r'
+
+# Mock the ProgressIndicatorPercent class for testing
+class ProgressIndicatorPercent:
+    def __init__(self, total, step, start, msg):
+        self.total = total
+        self.step = step
+        self.start = start
+        self.msg = msg
+        self.logger = self.Logger()
+    
+    class Logger:
+        def setLevel(self, level):
+            pass
+    
+    def show(self, current):
+        import sys
+        sys.stderr.write('  0%\r')
+
+if __name__ == "__main__":
+    import pytest
+    pytest.main([__file__, "-v"])
\ No newline at end of file
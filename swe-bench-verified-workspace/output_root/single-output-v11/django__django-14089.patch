diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py
index 871b016715..721b0ee951 100644
--- a/django/utils/datastructures.py
+++ b/django/utils/datastructures.py
@@ -34,6 +34,9 @@ class OrderedSet:
     def __len__(self):
         return len(self.dict)
 
+    def __reversed__(self):
+        return reversed(self.dict)
+
 
 class MultiValueDictKeyError(KeyError):
     pass
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..cb70d4a35b
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+from django.utils.datastructures import OrderedSet
+
+def test_final():
+    print("=== FINAL COMPREHENSIVE TEST ===")
+    
+    # Test 1: Basic reversed functionality
+    print("\n1. Basic reversed functionality:")
+    os = OrderedSet([1, 2, 3, 4, 5])
+    result = list(reversed(os))
+    expected = [5, 4, 3, 2, 1]
+    assert result == expected, f"Basic reversed failed: {result} != {expected}"
+    print("âœ“ PASS")
+    
+    # Test 2: Verify it works with for loops
+    print("\n2. For loop with reversed:")
+    os = OrderedSet(['a', 'b', 'c'])
+    reversed_items = []
+    for item in reversed(os):
+        reversed_items.append(item)
+    assert reversed_items == ['c', 'b', 'a'], f"For loop failed: {reversed_items}"
+    print("âœ“ PASS")
+    
+    # Test 3: Verify it works with list comprehension
+    print("\n3. List comprehension with reversed:")
+    os = OrderedSet([10, 20, 30])
+    result = [x for x in reversed(os)]
+    assert result == [30, 20, 10], f"List comprehension failed: {result}"
+    print("âœ“ PASS")
+    
+    # Test 4: Verify it doesn't modify original
+    print("\n4. Original unchanged after reversed:")
+    original = [1, 2, 3, 4, 5]
+    os = OrderedSet(original)
+    reversed_list = list(reversed(os))
+    assert list(os) == original, f"Original modified: {list(os)} != {original}"
+    assert reversed_list == [5, 4, 3, 2, 1], f"Reversed wrong: {reversed_list}"
+    print("âœ“ PASS")
+    
+    # Test 5: Multiple reversed calls
+    print("\n5. Multiple reversed calls:")
+    os = OrderedSet([1, 2, 3])
+    first = list(reversed(os))
+    second = list(reversed(os))
+    assert first == second == [3, 2, 1], f"Multiple calls inconsistent: {first}, {second}"
+    print("âœ“ PASS")
+    
+    print("\nðŸŽ‰ ALL FINAL TESTS PASSED!")
+    print("The OrderedSet.__reversed__() implementation is working correctly!")
+
+if __name__ == "__main__":
+    test_final()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b8f1ea44eb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from django.utils.datastructures import OrderedSet
+
+# Create an OrderedSet
+os = OrderedSet([1, 2, 3, 4, 5])
+
+print("Original OrderedSet:", list(os))
+
+# Try to use reversed() on it
+try:
+    reversed_os = reversed(os)
+    print("Reversed OrderedSet:", list(reversed_os))
+    print("SUCCESS: reversed() works on OrderedSet")
+except Exception as e:
+    print("ERROR:", e)
+    print("FAILURE: reversed() doesn't work on OrderedSet")
\ No newline at end of file
diff --git a/run_orderedset_tests.py b/run_orderedset_tests.py
new file mode 100644
index 0000000000..81a96bb5d7
--- /dev/null
+++ b/run_orderedset_tests.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+sys.path.insert(0, '/testbed')
+
+import django
+from django.conf import settings
+from django.test.utils import get_runner
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+# Import the test class
+from tests.utils_tests.test_datastructures import OrderedSetTests
+
+# Create test instance and run tests
+test_instance = OrderedSetTests()
+
+# Run all test methods
+test_methods = [method for method in dir(test_instance) if method.startswith('test_')]
+
+print("Running OrderedSet tests...")
+for method_name in test_methods:
+    method = getattr(test_instance, method_name)
+    try:
+        method()
+        print(f"âœ“ {method_name}: PASSED")
+    except Exception as e:
+        print(f"âœ— {method_name}: FAILED - {e}")
+
+print("\nAll OrderedSet tests completed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..8daab40093
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+from django.utils.datastructures import OrderedSet
+
+# Test 1: Empty OrderedSet
+print("Test 1: Empty OrderedSet")
+os_empty = OrderedSet()
+try:
+    reversed_empty = reversed(os_empty)
+    print("Reversed empty:", list(reversed_empty))
+    print("SUCCESS")
+except Exception as e:
+    print("ERROR:", e)
+
+# Test 2: Single element OrderedSet
+print("\nTest 2: Single element OrderedSet")
+os_single = OrderedSet([42])
+try:
+    reversed_single = reversed(os_single)
+    print("Reversed single:", list(reversed_single))
+    print("SUCCESS")
+except Exception as e:
+    print("ERROR:", e)
+
+# Test 3: OrderedSet with duplicate items (should preserve order)
+print("\nTest 3: OrderedSet with duplicates")
+os_dup = OrderedSet([1, 2, 1, 3, 2, 4])
+try:
+    reversed_dup = reversed(os_dup)
+    print("Original with duplicates:", list(os_dup))
+    print("Reversed with duplicates:", list(reversed_dup))
+    print("SUCCESS")
+except Exception as e:
+    print("ERROR:", e)
+
+# Test 4: OrderedSet with different data types
+print("\nTest 4: Mixed data types")
+os_mixed = OrderedSet(['a', 1, 3.14, True, None])
+try:
+    reversed_mixed = reversed(os_mixed)
+    print("Original mixed:", list(os_mixed))
+    print("Reversed mixed:", list(reversed_mixed))
+    print("SUCCESS")
+except Exception as e:
+    print("ERROR:", e)
\ No newline at end of file
diff --git a/test_iterator_behavior.py b/test_iterator_behavior.py
new file mode 100644
index 0000000000..7562ab413e
--- /dev/null
+++ b/test_iterator_behavior.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from django.utils.datastructures import OrderedSet
+
+def test_iterator_behavior():
+    print("Testing iterator behavior with modifications...")
+    
+    # Test 1: Modifying after creating reversed iterator
+    print("\n1. Modifying OrderedSet after creating reversed iterator:")
+    os = OrderedSet([1, 2, 3])
+    reversed_iter = reversed(os)
+    
+    # Modify the OrderedSet
+    os.add(4)
+    os.remove(1)
+    
+    # The reversed iterator should reflect the current state (Python iterator behavior)
+    result = list(reversed_iter)
+    expected = [3, 2]  # Should be based on current state [2, 3] after removing 1
+    print(f"   Result: {result}")
+    print(f"   Expected: {expected}")
+    assert result == expected, f"Iterator should reflect current state: {result} != {expected}"
+    print("   âœ“ PASS")
+    
+    # Test 2: Creating new reversed iterator after modification
+    print("\n2. Creating new reversed iterator after modification:")
+    reversed_iter2 = reversed(os)
+    result2 = list(reversed_iter2)
+    expected2 = [4, 3, 2]  # Should be based on modified state [2, 3, 4]
+    print(f"   Result: {result2}")
+    print(f"   Expected: {expected2}")
+    assert result2 == expected2, f"New iterator should reflect current state: {result2} != {expected2}"
+    print("   âœ“ PASS")
+    
+    print("\nðŸŽ‰ Iterator behavior tests passed!")
+
+if __name__ == "__main__":
+    test_iterator_behavior()
\ No newline at end of file
diff --git a/test_method_exists.py b/test_method_exists.py
new file mode 100644
index 0000000000..1a9ec3ead8
--- /dev/null
+++ b/test_method_exists.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+
+from django.utils.datastructures import OrderedSet
+
+# Check if __reversed__ method exists
+os = OrderedSet([1, 2, 3])
+print("Has __reversed__ method:", hasattr(os, '__reversed__'))
+print("__reversed__ method:", getattr(os, '__reversed__', None))
+
+# Test that it's callable
+if hasattr(os, '__reversed__'):
+    reversed_method = getattr(os, '__reversed__')
+    print("Is callable:", callable(reversed_method))
+    
+    # Call it directly
+    result = reversed_method()
+    print("Direct call result type:", type(result))
+    print("Direct call result:", list(result))
+
+# Test that it works with the reversed() built-in
+try:
+    result = reversed(os)
+    print("Built-in reversed() result type:", type(result))
+    print("Built-in reversed() result:", list(result))
+    print("SUCCESS: reversed() built-in works")
+except Exception as e:
+    print("ERROR with built-in reversed():", e)
\ No newline at end of file
diff --git a/test_reversed_comprehensive.py b/test_reversed_comprehensive.py
new file mode 100644
index 0000000000..156ecd5214
--- /dev/null
+++ b/test_reversed_comprehensive.py
@@ -0,0 +1,88 @@
+#!/usr/bin/env python3
+
+from django.utils.datastructures import OrderedSet
+
+def test_reversed_orderedset():
+    print("Testing reversed() on OrderedSet...")
+    
+    # Test 1: Basic functionality
+    print("\n1. Basic functionality:")
+    os = OrderedSet([1, 2, 3, 4, 5])
+    reversed_os = reversed(os)
+    result = list(reversed_os)
+    expected = [5, 4, 3, 2, 1]
+    print(f"   Original: {list(os)}")
+    print(f"   Reversed: {result}")
+    print(f"   Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("   âœ“ PASS")
+    
+    # Test 2: Empty OrderedSet
+    print("\n2. Empty OrderedSet:")
+    os_empty = OrderedSet()
+    reversed_empty = reversed(os_empty)
+    result = list(reversed_empty)
+    expected = []
+    print(f"   Reversed: {result}")
+    print(f"   Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("   âœ“ PASS")
+    
+    # Test 3: Single element
+    print("\n3. Single element:")
+    os_single = OrderedSet([42])
+    reversed_single = reversed(os_single)
+    result = list(reversed_single)
+    expected = [42]
+    print(f"   Reversed: {result}")
+    print(f"   Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("   âœ“ PASS")
+    
+    # Test 4: Duplicates (should preserve order)
+    print("\n4. With duplicates:")
+    os_dup = OrderedSet([1, 2, 1, 3, 2, 4])
+    reversed_dup = reversed(os_dup)
+    result = list(reversed_dup)
+    expected = [4, 3, 2, 1]
+    print(f"   Original: {list(os_dup)}")
+    print(f"   Reversed: {result}")
+    print(f"   Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("   âœ“ PASS")
+    
+    # Test 5: Mixed data types
+    print("\n5. Mixed data types:")
+    os_mixed = OrderedSet(['a', 2, 3.14, None])  # Using 2 instead of 1 to avoid True/1 collision
+    reversed_mixed = reversed(os_mixed)
+    result = list(reversed_mixed)
+    expected = [None, 3.14, 2, 'a']
+    print(f"   Original: {list(os_mixed)}")
+    print(f"   Reversed: {result}")
+    print(f"   Expected: {expected}")
+    assert result == expected, f"Expected {expected}, got {result}"
+    print("   âœ“ PASS")
+    
+    # Test 6: Multiple reversed() calls (should work consistently)
+    print("\n6. Multiple reversed() calls:")
+    os_multi = OrderedSet([1, 2, 3])
+    reversed1 = list(reversed(os_multi))
+    reversed2 = list(reversed(os_multi))
+    print(f"   First call: {reversed1}")
+    print(f"   Second call: {reversed2}")
+    assert reversed1 == reversed2, "Multiple reversed() calls should return same result"
+    print("   âœ“ PASS")
+    
+    # Test 7: Verify it's actually an iterator
+    print("\n7. Iterator behavior:")
+    os_iter = OrderedSet([1, 2, 3])
+    reversed_iter = reversed(os_iter)
+    print(f"   Type: {type(reversed_iter)}")
+    assert hasattr(reversed_iter, '__iter__'), "Should be iterable"
+    assert hasattr(reversed_iter, '__next__'), "Should be iterator"
+    print("   âœ“ PASS")
+    
+    print("\nðŸŽ‰ All reversed() tests passed!")
+
+if __name__ == "__main__":
+    test_reversed_orderedset()
\ No newline at end of file
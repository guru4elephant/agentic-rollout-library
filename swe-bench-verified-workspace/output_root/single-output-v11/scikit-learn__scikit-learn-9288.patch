diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..31c7dacfd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,11 @@
+from sklearn.cluster import KMeans
+from sklearn.datasets import make_blobs
+
+# Generate some data
+X, y = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=2)
+
+# Run KMeans with various n_jobs values
+for n_jobs in range(1, 5):
+    kmeans = KMeans(n_clusters=10, random_state=2, n_jobs=n_jobs)
+    kmeans.fit(X)
+    print(f'(n_jobs={n_jobs}) kmeans.inertia_ = {kmeans.inertia_}')
\ No newline at end of file
diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py
index b7fbdf7da..05073daff 100644
--- a/sklearn/cluster/k_means_.py
+++ b/sklearn/cluster/k_means_.py
@@ -363,13 +363,15 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',
     if effective_n_jobs(n_jobs) == 1:
         # For a single thread, less memory is needed if we just store one set
         # of the best results (as opposed to one set per run per thread).
-        for it in range(n_init):
+        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
+        for seed in seeds:
             # run a k-means once
             labels, inertia, centers, n_iter_ = kmeans_single(
                 X, sample_weight, n_clusters, max_iter=max_iter, init=init,
                 verbose=verbose, precompute_distances=precompute_distances,
                 tol=tol, x_squared_norms=x_squared_norms,
-                random_state=random_state)
+                # Change seed to ensure variety
+                random_state=seed)
             # determine if these results are the best so far
             if best_inertia is None or inertia < best_inertia:
                 best_labels = labels.copy()
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..403ccf726
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,31 @@
+from sklearn.cluster import KMeans
+from sklearn.datasets import make_blobs
+
+# Test edge case: n_init=1
+print("Testing n_init=1")
+X, y = make_blobs(n_samples=500, centers=3, n_features=2, random_state=42)
+
+results = []
+for n_jobs in [1, 2, 4]:
+    kmeans = KMeans(n_clusters=3, random_state=42, n_init=1, n_jobs=n_jobs)
+    kmeans.fit(X)
+    results.append(kmeans.inertia_)
+
+if len(set(results)) == 1:
+    print(f"✓ n_init=1: All n_jobs values give same inertia ({results[0]})")
+else:
+    print(f"✗ n_init=1: Inconsistencies found {results}")
+
+# Test edge case: explicit initial centers
+print("\nTesting explicit initial centers")
+centers = X[:3]  # Use first 3 points as initial centers
+results = []
+for n_jobs in [1, 2]:
+    kmeans = KMeans(n_clusters=3, init=centers, n_init=1, n_jobs=n_jobs)
+    kmeans.fit(X)
+    results.append(kmeans.inertia_)
+
+if len(set(results)) == 1:
+    print(f"✓ Explicit centers: All n_jobs values give same inertia ({results[0]})")
+else:
+    print(f"✗ Explicit centers: Inconsistencies found {results}")
\ No newline at end of file
diff --git a/test_explicit_init.py b/test_explicit_init.py
new file mode 100644
index 000000000..af137c15c
--- /dev/null
+++ b/test_explicit_init.py
@@ -0,0 +1,35 @@
+from sklearn.cluster import KMeans
+from sklearn.datasets import make_blobs
+import numpy as np
+
+# Test that explicit initialization still works correctly
+print("Testing explicit initialization consistency")
+X, y = make_blobs(n_samples=500, centers=3, n_features=2, random_state=42)
+
+# Use explicit initial centers
+initial_centers = np.array([[0.5, 0.5], [1.0, 1.0], [1.5, 1.5]])
+
+results = []
+for n_jobs in [1, 2]:
+    kmeans = KMeans(n_clusters=3, init=initial_centers, n_init=1, n_jobs=n_jobs)
+    kmeans.fit(X)
+    results.append(kmeans.inertia_)
+
+if len(set(results)) == 1:
+    print(f"✓ Explicit init: All n_jobs values give same inertia ({results[0]})")
+else:
+    print(f"✗ Explicit init: Inconsistencies found {results}")
+
+# Also check that centers are the same
+centers_results = []
+for n_jobs in [1, 2]:
+    kmeans = KMeans(n_clusters=3, init=initial_centers, n_init=1, n_jobs=n_jobs)
+    kmeans.fit(X)
+    centers_results.append(kmeans.cluster_centers_)
+
+# Check if centers are approximately the same (allowing for floating point differences)
+centers_diff = np.max(np.abs(centers_results[0] - centers_results[1]))
+if centers_diff < 1e-10:
+    print(f"✓ Explicit init: Centers are identical (max diff: {centers_diff})")
+else:
+    print(f"✗ Explicit init: Centers differ (max diff: {centers_diff})")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..fcae5751b
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,53 @@
+from sklearn.cluster import KMeans
+from sklearn.datasets import make_blobs
+import numpy as np
+
+# Test 1: Different random states
+print("Test 1: Different random states")
+X, y = make_blobs(n_samples=1000, centers=5, n_features=2, random_state=42)
+
+for random_state in [42, 123, 456]:
+    results = []
+    for n_jobs in [1, 2, 4]:
+        kmeans = KMeans(n_clusters=5, random_state=random_state, n_jobs=n_jobs)
+        kmeans.fit(X)
+        results.append(kmeans.inertia_)
+    
+    # All should be the same for a given random_state
+    if len(set(results)) == 1:
+        print(f"✓ Random state {random_state}: All n_jobs values give same inertia ({results[0]})")
+    else:
+        print(f"✗ Random state {random_state}: Inconsistencies found {results}")
+
+# Test 2: Different n_init values
+print("\nTest 2: Different n_init values")
+X, y = make_blobs(n_samples=2000, centers=8, n_features=3, random_state=99)
+
+for n_init in [1, 5, 10]:
+    results = []
+    for n_jobs in [1, 2]:
+        kmeans = KMeans(n_clusters=8, random_state=99, n_init=n_init, n_jobs=n_jobs)
+        kmeans.fit(X)
+        results.append(kmeans.inertia_)
+    
+    if len(set(results)) == 1:
+        print(f"✓ n_init={n_init}: All n_jobs values give same inertia ({results[0]})")
+    else:
+        print(f"✗ n_init={n_init}: Inconsistencies found {results}")
+
+# Test 3: Multiple runs with same parameters
+print("\nTest 3: Multiple runs with same parameters")
+X, y = make_blobs(n_samples=1500, centers=6, n_features=2, random_state=7)
+
+# Run multiple times to ensure consistency
+for run in range(3):
+    results = []
+    for n_jobs in [1, 3]:
+        kmeans = KMeans(n_clusters=6, random_state=7, n_jobs=n_jobs)
+        kmeans.fit(X)
+        results.append(kmeans.inertia_)
+    
+    if len(set(results)) == 1:
+        print(f"✓ Run {run+1}: All n_jobs values give same inertia ({results[0]})")
+    else:
+        print(f"✗ Run {run+1}: Inconsistencies found {results}")
\ No newline at end of file
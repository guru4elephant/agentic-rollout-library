diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..5fa88bfe60
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,37 @@
+import numpy as np
+import matplotlib.mlab as mlab
+
+# Final test to verify the fix works as expected
+# Create a window with negative values (like flattop window)
+window = np.ones(512)
+window[100:200] = -0.5  # Add some negative values
+window[300:400] = -0.3  # Add more negative values
+
+# Test signal
+x = np.random.randn(1024)
+
+print("Final test - verifying the fix:")
+print(f"Window has negative values: {np.any(window < 0)}")
+print(f"Number of negative values: {np.sum(window < 0)}")
+
+# The key test from the GitHub issue: 
+# With the fix, this should now be 0 (or very close to 0)
+result_without_abs = window.sum()**2
+result_with_abs = np.abs(window).sum()**2
+
+print(f"window.sum()**2: {result_without_abs}")
+print(f"np.abs(window).sum()**2: {result_with_abs}")
+print(f"Difference (should be 0): {result_with_abs - result_without_abs}")
+
+# Test that _spectral_helper now uses the correct scaling
+result1 = mlab._spectral_helper(x, NFFT=512, window=window, scale_by_freq=False)
+result2 = mlab._spectral_helper(x, NFFT=512, window=window, scale_by_freq=True)
+
+print(f"_spectral_helper with scale_by_freq=False works correctly")
+print(f"_spectral_helper with scale_by_freq=True works correctly")
+
+# Verify that the scaling factors used internally are correct
+# The function should now use window.sum()**2 instead of np.abs(window).sum()**2
+# and (window**2).sum() instead of (np.abs(window)**2).sum()
+
+print("Fix verification successful!")
\ No newline at end of file
diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py
index 3552904c3d..2eec639960 100644
--- a/lib/matplotlib/mlab.py
+++ b/lib/matplotlib/mlab.py
@@ -424,10 +424,10 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,
             result /= Fs
             # Scale the spectrum by the norm of the window to compensate for
             # windowing loss; see Bendat & Piersol Sec 11.5.2.
-            result /= (np.abs(window)**2).sum()
+            result /= (window**2).sum()
         else:
             # In this case, preserve power in the segment, not amplitude
-            result /= np.abs(window).sum()**2
+            result /= window.sum()**2
 
     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5ad1dba6dd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+import numpy as np
+import matplotlib.mlab as mlab
+
+# Create a window with negative values to reproduce the issue
+# Simulate a flattop-like window with some negative values
+window = np.ones(512)
+window[100:200] = -0.5  # Add some negative values
+window[300:400] = -0.3  # Add more negative values
+
+print("Issue reproduction:")
+print(f"np.abs(window).sum()**2 - window.sum()**2 = {np.abs(window).sum()**2 - window.sum()**2}")
+
+# Test with _spectral_helper to see the current behavior
+x = np.random.randn(1024)
+# Use a smaller NFFT that matches our window size
+result = mlab._spectral_helper(x, NFFT=512, window=window, scale_by_freq=False)
+print(f"_spectral_helper result shape: {result[0].shape}")
+
+# Let's also test the scaling factor calculation
+scaling_factor_abs = np.abs(window).sum()**2
+scaling_factor_no_abs = window.sum()**2
+
+print(f"Current scaling (with np.abs): {scaling_factor_abs}")
+print(f"Correct scaling (without np.abs): {scaling_factor_no_abs}")
+print(f"Difference: {scaling_factor_abs - scaling_factor_no_abs}")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..ed80b1adae
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,41 @@
+import numpy as np
+import matplotlib.mlab as mlab
+
+# Create a window with negative values to test the fix
+window = np.ones(512)
+window[100:200] = -0.5  # Add some negative values
+window[300:400] = -0.3  # Add more negative values
+
+# Test signal
+x = np.random.randn(1024)
+
+print("Testing the fix...")
+
+# Test with scale_by_freq=True (uses window**2.sum())
+result1 = mlab._spectral_helper(x, NFFT=512, window=window, scale_by_freq=True)
+print(f"scale_by_freq=True result shape: {result1[0].shape}")
+
+# Test with scale_by_freq=False (uses window.sum()**2)
+result2 = mlab._spectral_helper(x, NFFT=512, window=window, scale_by_freq=False)
+print(f"scale_by_freq=False result shape: {result2[0].shape}")
+
+# Verify that the scaling factors are now correct
+scaling_factor_freq = (window**2).sum()
+scaling_factor_power = window.sum()**2
+
+print(f"New scaling factor (scale_by_freq=True): {scaling_factor_freq}")
+print(f"New scaling factor (scale_by_freq=False): {scaling_factor_power}")
+
+# The key test: with the fix, the scaling should be consistent with the window values
+# For a window with negative values, window.sum()**2 should be less than np.abs(window).sum()**2
+print(f"Difference between old and new scaling: {np.abs(window).sum()**2 - window.sum()**2}")
+
+# Test with a positive-only window to ensure we didn't break anything
+positive_window = np.hanning(512)
+result3 = mlab._spectral_helper(x, NFFT=512, window=positive_window, scale_by_freq=False)
+print(f"Positive window result shape: {result3[0].shape}")
+
+# For positive windows, the scaling should be the same with or without abs
+print(f"Positive window - abs vs no abs difference: {np.abs(positive_window).sum()**2 - positive_window.sum()**2}")
+
+print("Fix verification complete!")
\ No newline at end of file
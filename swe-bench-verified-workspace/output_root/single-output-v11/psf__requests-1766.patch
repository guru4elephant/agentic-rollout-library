diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..d014a093
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import requests
+from requests.auth import HTTPDigestAuth
+
+# Create a mock digest auth to test the qop quoting
+auth = HTTPDigestAuth('user', 'pass')
+
+# Mock challenge data similar to what would come from a server
+auth.chal = {
+    'realm': 'testrealm@host.com',
+    'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+    'qop': 'auth',
+    'algorithm': 'MD5'
+}
+
+# Build the digest header
+digest_header = auth.build_digest_header('GET', 'http://example.com/digest-auth')
+
+print("Digest Header:")
+print(digest_header)
+
+# Check if qop is quoted
+if 'qop=auth' in digest_header and 'qop="auth"' not in digest_header:
+    print("\nISSUE REPRODUCED: qop value is not quoted!")
+    print("Expected: qop=\"auth\"")
+    print("Found:    qop=auth")
+else:
+    print("\nqop is properly quoted")
\ No newline at end of file
diff --git a/requests/auth.py b/requests/auth.py
index a3de123d..48416e5f 100644
--- a/requests/auth.py
+++ b/requests/auth.py
@@ -144,7 +144,7 @@ class HTTPDigestAuth(AuthBase):
         if entdig:
             base += ', digest="%s"' % entdig
         if qop:
-            base += ', qop=auth, nc=%s, cnonce="%s"' % (ncvalue, cnonce)
+            base += ', qop="auth", nc=%s, cnonce="%s"' % (ncvalue, cnonce)
 
         return 'Digest %s' % (base)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..1bbd081d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import requests
+from requests.auth import HTTPDigestAuth
+
+def test_qop_quoting():
+    print("Testing qop quoting in Digest Authentication...")
+    
+    # Test case 1: qop with 'auth' value
+    auth = HTTPDigestAuth('user', 'pass')
+    auth.chal = {
+        'realm': 'testrealm@host.com',
+        'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+        'qop': 'auth',
+        'algorithm': 'MD5'
+    }
+    
+    digest_header = auth.build_digest_header('GET', 'http://example.com/digest-auth')
+    print(f"Test 1 - qop=auth: {digest_header}")
+    assert 'qop="auth"' in digest_header, "qop should be quoted with 'auth' value"
+    
+    # Test case 2: qop with comma-separated values including 'auth'
+    auth2 = HTTPDigestAuth('user', 'pass')
+    auth2.chal = {
+        'realm': 'testrealm@host.com',
+        'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+        'qop': 'auth,other',
+        'algorithm': 'MD5'
+    }
+    
+    digest_header2 = auth2.build_digest_header('GET', 'http://example.com/digest-auth')
+    print(f"Test 2 - qop=auth,other: {digest_header2}")
+    assert 'qop="auth"' in digest_header2, "qop should be quoted with 'auth' value when multiple values present"
+    
+    # Test case 3: No qop (should not include qop parameter)
+    auth3 = HTTPDigestAuth('user', 'pass')
+    auth3.chal = {
+        'realm': 'testrealm@host.com',
+        'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+        'algorithm': 'MD5'
+        # No qop key
+    }
+    
+    digest_header3 = auth3.build_digest_header('GET', 'http://example.com/digest-auth')
+    print(f"Test 3 - no qop: {digest_header3}")
+    assert 'qop=' not in digest_header3, "Should not include qop when not in challenge"
+    
+    print("\nAll tests passed! qop values are properly quoted according to RFC2617.")
+
+if __name__ == "__main__":
+    test_qop_quoting()
\ No newline at end of file
diff --git a/test_final_verification.py b/test_final_verification.py
new file mode 100644
index 00000000..6674d942
--- /dev/null
+++ b/test_final_verification.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+
+import requests
+from requests.auth import HTTPDigestAuth
+
+def test_qop_quoting_comprehensive():
+    """Test that qop values are properly quoted in Digest authentication headers."""
+    print("Testing comprehensive qop quoting functionality...")
+    
+    # Test 1: Basic qop=auth case
+    auth1 = HTTPDigestAuth('user', 'pass')
+    auth1.chal = {
+        'realm': 'testrealm@host.com',
+        'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+        'qop': 'auth',
+        'algorithm': 'MD5'
+    }
+    
+    digest_header1 = auth1.build_digest_header('GET', 'http://example.com/digest-auth')
+    print(f"Test 1 - qop=auth: {digest_header1}")
+    assert 'qop="auth"' in digest_header1, "qop value should be quoted"
+    assert 'qop=auth' not in digest_header1, "qop value should not be unquoted"
+    
+    # Test 2: Multiple qop values (should still quote 'auth')
+    auth2 = HTTPDigestAuth('user', 'pass')
+    auth2.chal = {
+        'realm': 'testrealm@host.com',
+        'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+        'qop': 'auth,other',
+        'algorithm': 'MD5'
+    }
+    
+    digest_header2 = auth2.build_digest_header('GET', 'http://example.com/digest-auth')
+    print(f"Test 2 - qop=auth,other: {digest_header2}")
+    assert 'qop="auth"' in digest_header2, "qop value should be quoted even with multiple values"
+    
+    # Test 3: No qop in challenge (should not include qop parameter)
+    auth3 = HTTPDigestAuth('user', 'pass')
+    auth3.chal = {
+        'realm': 'testrealm@host.com',
+        'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+        'algorithm': 'MD5'
+        # No qop key
+    }
+    
+    digest_header3 = auth3.build_digest_header('GET', 'http://example.com/digest-auth')
+    print(f"Test 3 - no qop: {digest_header3}")
+    assert 'qop=' not in digest_header3, "Should not include qop when not in challenge"
+    
+    # Test 4: Verify other parameters are still properly formatted
+    assert 'username="user"' in digest_header1, "Username should be quoted"
+    assert 'realm="testrealm@host.com"' in digest_header1, "Realm should be quoted"
+    assert 'nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093"' in digest_header1, "Nonce should be quoted"
+    assert 'algorithm="MD5"' in digest_header1, "Algorithm should be quoted"
+    
+    print("\n✅ All tests passed! qop values are properly quoted according to RFC2617.")
+    print("✅ The fix correctly handles qop quoting without breaking other functionality.")
+
+if __name__ == "__main__":
+    test_qop_quoting_comprehensive()
\ No newline at end of file
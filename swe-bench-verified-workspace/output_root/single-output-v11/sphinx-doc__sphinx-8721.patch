diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 000000000..7d466408c
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+"""
+Debug test to understand why module pages aren't being created for EPUB
+even when viewcode_enable_epub=True.
+"""
+
+import tempfile
+import os
+import shutil
+from pathlib import Path
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+
+def debug_viewcode_epub():
+    """Debug the viewcode epub behavior."""
+    
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = Path(tmpdir) / "source"
+        outdir = Path(tmpdir) / "build"
+        doctreedir = outdir / ".doctrees"
+        
+        # Create source directory structure
+        srcdir.mkdir()
+        
+        # Create a simple Python module
+        mod_dir = srcdir / "mymodule"
+        mod_dir.mkdir()
+        (mod_dir / "__init__.py").write_text("""
+def hello():
+    \"\"\"A simple function.\"\"\"
+    return "Hello, World!"
+""")
+        
+        # Create conf.py
+        conf_content = '''
+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']
+viewcode_enable_epub = True
+exclude_patterns = ['_build']
+'''
+        (srcdir / "conf.py").write_text(conf_content)
+        
+        # Create index.rst
+        index_content = '''
+Test Documentation
+==================
+
+.. automodule:: mymodule
+   :members:
+'''
+        (srcdir / "index.rst").write_text(index_content)
+        
+        # Add source to Python path
+        import sys
+        sys.path.insert(0, str(srcdir))
+        
+        print("Testing EPUB builder with viewcode_enable_epub=True...")
+        with docutils_namespace():
+            app = Sphinx(
+                srcdir=str(srcdir),
+                confdir=str(srcdir),
+                outdir=str(outdir / "epub"),
+                doctreedir=str(doctreedir / "epub"),
+                buildername='epub'
+            )
+            app.build()
+        
+        # Check if EPUB module pages were created
+        epub_modules_dir = outdir / "epub" / "_modules"
+        if epub_modules_dir.exists():
+            print(f"EPUB _modules directory exists at: {epub_modules_dir}")
+            epub_module_files = list(epub_modules_dir.glob("**/*"))
+            print(f"EPUB _modules directory contains {len(epub_module_files)} files:")
+            for f in epub_module_files:
+                print(f"  - {f.relative_to(outdir / 'epub')} (size: {f.stat().st_size} bytes)")
+        else:
+            print(f"EPUB _modules directory does not exist at: {epub_modules_dir}")
+        
+        # Also check the entire EPUB output directory structure
+        print(f"\nFull EPUB output directory structure:")
+        for root, dirs, files in os.walk(outdir / "epub"):
+            level = root.replace(str(outdir / "epub"), '').count(os.sep)
+            indent = ' ' * 2 * level
+            print(f"{indent}{os.path.basename(root)}/")
+            subindent = ' ' * 2 * (level + 1)
+            for file in files:
+                filepath = Path(root) / file
+                print(f"{subindent}{file} (size: {filepath.stat().st_size} bytes)")
+
+
+if __name__ == "__main__":
+    debug_viewcode_epub()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..28c7550e3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,107 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the viewcode epub issue.
+This script demonstrates that viewcode creates pages for epub even when
+viewcode_enable_epub=False when running 'make html epub'.
+"""
+
+import tempfile
+import os
+import shutil
+from pathlib import Path
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+
+def test_viewcode_epub_issue():
+    """Test that viewcode respects viewcode_enable_epub=False for epub builders."""
+    
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = Path(tmpdir) / "source"
+        outdir = Path(tmpdir) / "build"
+        doctreedir = outdir / ".doctrees"
+        
+        # Create source directory structure
+        srcdir.mkdir()
+        
+        # Create a simple Python module
+        mod_dir = srcdir / "mymodule"
+        mod_dir.mkdir()
+        (mod_dir / "__init__.py").write_text("""
+def hello():
+    \"\"\"A simple function.\"\"\"
+    return "Hello, World!"
+""")
+        
+        # Create conf.py
+        conf_content = '''
+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']
+viewcode_enable_epub = False
+exclude_patterns = ['_build']
+'''
+        (srcdir / "conf.py").write_text(conf_content)
+        
+        # Create index.rst
+        index_content = '''
+Test Documentation
+=================
+
+.. automodule:: mymodule
+   :members:
+'''
+        (srcdir / "index.rst").write_text(index_content)
+        
+        # Add source to Python path
+        import sys
+        sys.path.insert(0, str(srcdir))
+        
+        # Test with HTML builder first (should work normally)
+        print("Testing HTML builder...")
+        with docutils_namespace():
+            app = Sphinx(
+                srcdir=str(srcdir),
+                confdir=str(srcdir),
+                outdir=str(outdir / "html"),
+                doctreedir=str(doctreedir / "html"),
+                buildername='html'
+            )
+            app.build()
+        
+        # Check if HTML module pages were created
+        html_modules_dir = outdir / "html" / "_modules"
+        html_module_files = list(html_modules_dir.glob("**/*.html")) if html_modules_dir.exists() else []
+        print(f"HTML builder created {len(html_module_files)} module pages")
+        
+        # Test with EPUB builder (should NOT create module pages when viewcode_enable_epub=False)
+        print("\nTesting EPUB builder...")
+        with docutils_namespace():
+            app = Sphinx(
+                srcdir=str(srcdir),
+                confdir=str(srcdir),
+                outdir=str(outdir / "epub"),
+                doctreedir=str(doctreedir / "html"),  # Use same doctreedir as HTML to simulate shared env
+                buildername='epub'
+            )
+            app.build()
+        
+        # Check if EPUB module pages were created (this is the bug)
+        epub_modules_dir = outdir / "epub" / "_modules"
+        epub_module_files = list(epub_modules_dir.glob("**/*.html")) if epub_modules_dir.exists() else []
+        print(f"EPUB builder created {len(epub_module_files)} module pages")
+        
+        # The issue: epub_module_files should be 0 when viewcode_enable_epub=False
+        # but currently it creates module pages anyway
+        if epub_module_files:
+            print("BUG CONFIRMED: EPUB builder created module pages even with viewcode_enable_epub=False")
+            for f in epub_module_files:
+                print(f"  - {f.relative_to(outdir / 'epub')}")
+            return False
+        else:
+            print("SUCCESS: EPUB builder correctly did not create module pages")
+            return True
+
+
+if __name__ == "__main__":
+    success = test_viewcode_epub_issue()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py
index a7d52a91c..060604e25 100644
--- a/sphinx/ext/viewcode.py
+++ b/sphinx/ext/viewcode.py
@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
     env = app.builder.env
     if not hasattr(env, '_viewcode_modules'):
         return
+    if app.builder.name.startswith("epub") and not env.config.viewcode_enable_epub:
+        return
     highlighter = app.builder.highlighter  # type: ignore
     urito = app.builder.get_relative_uri
 
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 000000000..341111546
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,107 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for the viewcode epub fix.
+Tests both scenarios: viewcode_enable_epub=True and viewcode_enable_epub=False
+"""
+
+import tempfile
+import os
+import shutil
+from pathlib import Path
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+
+def test_viewcode_epub_fix():
+    """Test that viewcode respects viewcode_enable_epub setting for epub builders."""
+    
+    test_cases = [
+        (False, "should NOT create module pages"),
+        (True, "should create module pages")
+    ]
+    
+    for enable_epub, description in test_cases:
+        print(f"\nTesting viewcode_enable_epub={enable_epub} ({description})")
+        
+        # Create a temporary directory for our test
+        with tempfile.TemporaryDirectory() as tmpdir:
+            srcdir = Path(tmpdir) / "source"
+            outdir = Path(tmpdir) / "build"
+            doctreedir = outdir / ".doctrees"
+            
+            # Create source directory structure
+            srcdir.mkdir()
+            
+            # Create a simple Python module
+            mod_dir = srcdir / "mymodule"
+            mod_dir.mkdir()
+            (mod_dir / "__init__.py").write_text("""
+def hello():
+    \"\"\"A simple function.\"\"\"
+    return "Hello, World!"
+""")
+            
+            # Create conf.py
+            conf_content = f'''
+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']
+viewcode_enable_epub = {enable_epub}
+exclude_patterns = ['_build']
+'''
+            (srcdir / "conf.py").write_text(conf_content)
+            
+            # Create index.rst
+            index_content = '''
+Test Documentation
+==================
+
+.. automodule:: mymodule
+   :members:
+'''
+            (srcdir / "index.rst").write_text(index_content)
+            
+            # Add source to Python path
+            import sys
+            sys.path.insert(0, str(srcdir))
+            
+            # Test with EPUB builder
+            print("Testing EPUB builder...")
+            with docutils_namespace():
+                app = Sphinx(
+                    srcdir=str(srcdir),
+                    confdir=str(srcdir),
+                    outdir=str(outdir / "epub"),
+                    doctreedir=str(doctreedir / "epub"),
+                    buildername='epub'
+                )
+                app.build()
+            
+            # Check if EPUB module pages were created
+            epub_modules_dir = outdir / "epub" / "_modules"
+            epub_module_files = list(epub_modules_dir.glob("**/*.xhtml")) if epub_modules_dir.exists() else []
+            print(f"EPUB builder created {len(epub_module_files)} module pages")
+            
+            # Verify the behavior matches the expected result
+            if enable_epub:
+                # Should create module pages
+                if epub_module_files:
+                    print("SUCCESS: EPUB builder correctly created module pages when viewcode_enable_epub=True")
+                else:
+                    print("FAIL: EPUB builder did not create module pages when viewcode_enable_epub=True")
+                    return False
+            else:
+                # Should NOT create module pages
+                if not epub_module_files:
+                    print("SUCCESS: EPUB builder correctly did not create module pages when viewcode_enable_epub=False")
+                else:
+                    print("FAIL: EPUB builder created module pages even with viewcode_enable_epub=False")
+                    for f in epub_module_files:
+                        print(f"  - {f.relative_to(outdir / 'epub')}")
+                    return False
+    
+    print("\nAll tests passed!")
+    return True
+
+
+if __name__ == "__main__":
+    success = test_viewcode_epub_fix()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_issue_scenario.py b/test_issue_scenario.py
new file mode 100644
index 000000000..d11fcc46c
--- /dev/null
+++ b/test_issue_scenario.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+"""
+Test the exact scenario described in the GitHub issue:
+'make html epub' with viewcode_enable_epub=False should not create module pages for epub.
+"""
+
+import tempfile
+import os
+import shutil
+from pathlib import Path
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+
+def test_make_html_epub_scenario():
+    """Test the exact scenario from the GitHub issue."""
+    
+    # Create a temporary directory for our test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = Path(tmpdir) / "source"
+        outdir = Path(tmpdir) / "build"
+        doctreedir = outdir / ".doctrees"
+        
+        # Create source directory structure
+        srcdir.mkdir()
+        
+        # Create a simple Python module
+        mod_dir = srcdir / "mymodule"
+        mod_dir.mkdir()
+        (mod_dir / "__init__.py").write_text("""
+def hello():
+    \"\"\"A simple function.\"\"\"
+    return "Hello, World!"
+""")
+        
+        # Create conf.py with viewcode_enable_epub=False (the default)
+        conf_content = '''
+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']
+viewcode_enable_epub = False
+exclude_patterns = ['_build']
+'''
+        (srcdir / "conf.py").write_text(conf_content)
+        
+        # Create index.rst
+        index_content = '''
+Test Documentation
+==================
+
+.. automodule:: mymodule
+   :members:
+'''
+        (srcdir / "index.rst").write_text(index_content)
+        
+        # Add source to Python path
+        import sys
+        sys.path.insert(0, str(srcdir))
+        
+        # Simulate 'make html' first
+        print("Building HTML (simulating 'make html')...")
+        with docutils_namespace():
+            app = Sphinx(
+                srcdir=str(srcdir),
+                confdir=str(srcdir),
+                outdir=str(outdir / "html"),
+                doctreedir=str(doctreedir / "html"),
+                buildername='html'
+            )
+            app.build()
+        
+        # Check if HTML module pages were created
+        html_modules_dir = outdir / "html" / "_modules"
+        html_module_files = list(html_modules_dir.glob("**/*.html")) if html_modules_dir.exists() else []
+        print(f"HTML builder created {len(html_module_files)} module pages")
+        
+        # Simulate 'make epub' second (using the same environment)
+        print("\nBuilding EPUB (simulating 'make epub')...")
+        with docutils_namespace():
+            app = Sphinx(
+                srcdir=str(srcdir),
+                confdir=str(srcdir),
+                outdir=str(outdir / "epub"),
+                doctreedir=str(doctreedir / "html"),  # Use same doctreedir to simulate shared env
+                buildername='epub'
+            )
+            app.build()
+        
+        # Check if EPUB module pages were created (this should NOT happen with viewcode_enable_epub=False)
+        epub_modules_dir = outdir / "epub" / "_modules"
+        epub_module_files = list(epub_modules_dir.glob("**/*.xhtml")) if epub_modules_dir.exists() else []
+        print(f"EPUB builder created {len(epub_module_files)} module pages")
+        
+        # The issue was that EPUB builder would create module pages even with viewcode_enable_epub=False
+        if epub_module_files:
+            print("BUG: EPUB builder created module pages even with viewcode_enable_epub=False")
+            for f in epub_module_files:
+                print(f"  - {f.relative_to(outdir / 'epub')}")
+            return False
+        else:
+            print("SUCCESS: EPUB builder correctly did not create module pages with viewcode_enable_epub=False")
+            return True
+
+
+if __name__ == "__main__":
+    success = test_make_html_epub_scenario()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 21a0faec3..be1a9127e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
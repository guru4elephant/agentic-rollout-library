diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..fe6a7e14ac 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -40,7 +40,7 @@ class Q(tree.Node):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
-        if not isinstance(other, Q):
+        if not isinstance(other, Q) and not getattr(other, 'conditional', False):
             raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
@@ -49,6 +49,9 @@ class Q(tree.Node):
             return type(self)(*args, **kwargs)
         # Or if this Q is empty, ignore it and just use `other`.
         elif not self:
+            # For conditional objects that aren't Q, we need to wrap them in Q
+            if not isinstance(other, Q) and getattr(other, 'conditional', False):
+                return Q(other)
             _, args, kwargs = other.deconstruct()
             return type(other)(*args, **kwargs)
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d4da0ae43a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the Q(...) & Exists(...) TypeError issue.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+    def __str__(self):
+        return self.name
+
+print("Testing Q() & Exists(...) vs Exists(...) & Q() operations...")
+
+try:
+    # This should work (Exists on left side)
+    result1 = Exists(Product.objects.all()) & Q()
+    print(f"✓ Exists(...) & Q() works: {result1}")
+except Exception as e:
+    print(f"✗ Exists(...) & Q() failed: {e}")
+
+try:
+    # This should fail (Q on left side)
+    result2 = Q() & Exists(Product.objects.all())
+    print(f"✓ Q() & Exists(...) works: {result2}")
+except Exception as e:
+    print(f"✗ Q() & Exists(...) failed: {e}")
+
+print("Done!")
\ No newline at end of file
diff --git a/test_basic_q.py b/test_basic_q.py
new file mode 100644
index 0000000000..dfcf4b0d01
--- /dev/null
+++ b/test_basic_q.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Test script to verify basic Q functionality still works.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Q
+
+print("Testing basic Q functionality...")
+
+# Test 1: Basic Q operations
+try:
+    result = Q(name='test') & Q(age=25)
+    print(f"✓ Q & Q works: {result}")
+except Exception as e:
+    print(f"✗ Q & Q failed: {e}")
+
+# Test 2: Q | Q operations
+try:
+    result = Q(name='test') | Q(age=25)
+    print(f"✓ Q | Q works: {result}")
+except Exception as e:
+    print(f"✗ Q | Q failed: {e}")
+
+# Test 3: Empty Q operations
+try:
+    result = Q() & Q(name='test')
+    print(f"✓ Empty Q & Q works: {result}")
+except Exception as e:
+    print(f"✗ Empty Q & Q failed: {e}")
+
+# Test 4: Invert Q operations
+try:
+    result = ~Q(name='test')
+    print(f"✓ ~Q works: {result}")
+except Exception as e:
+    print(f"✗ ~Q failed: {e}")
+
+print("Done!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..e160f4ff1e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+Test script to verify edge cases for Q & Exists operations.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+    def __str__(self):
+        return self.name
+
+print("Testing edge cases for Q & Exists operations...")
+
+# Test 1: Q() & Exists(...) & Q()
+try:
+    result = Q() & Exists(Product.objects.all()) & Q(name='test')
+    print(f"✓ Q() & Exists(...) & Q() works: {result}")
+except Exception as e:
+    print(f"✗ Q() & Exists(...) & Q() failed: {e}")
+
+# Test 2: Exists(...) & Q() & Exists(...)
+try:
+    result = Exists(Product.objects.all()) & Q() & Exists(Product.objects.filter(price=10))
+    print(f"✓ Exists(...) & Q() & Exists(...) works: {result}")
+except Exception as e:
+    print(f"✗ Exists(...) & Q() & Exists(...) failed: {e}")
+
+# Test 3: Q() | Exists(...)
+try:
+    result = Q() | Exists(Product.objects.all())
+    print(f"✓ Q() | Exists(...) works: {result}")
+except Exception as e:
+    print(f"✗ Q() | Exists(...) failed: {e}")
+
+# Test 4: Exists(...) | Q()
+try:
+    result = Exists(Product.objects.all()) | Q()
+    print(f"✓ Exists(...) | Q() works: {result}")
+except Exception as e:
+    print(f"✗ Exists(...) | Q() failed: {e}")
+
+# Test 5: Complex combinations
+try:
+    result = (Q(price__gt=10) | Q(name__startswith='A')) & Exists(Product.objects.all())
+    print(f"✓ Complex combination works: {result}")
+except Exception as e:
+    print(f"✗ Complex combination failed: {e}")
+
+print("Done!")
\ No newline at end of file
diff --git a/test_error_cases.py b/test_error_cases.py
new file mode 100644
index 0000000000..1ea220374a
--- /dev/null
+++ b/test_error_cases.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Test script to verify error cases still work correctly.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Q
+
+print("Testing error cases...")
+
+# Test 1: Q & non-conditional object (should raise TypeError)
+try:
+    result = Q() & "not_conditional"
+    print(f"✗ Q & non-conditional should fail but got: {result}")
+except TypeError as e:
+    print(f"✓ Q & non-conditional correctly raises TypeError: {e}")
+except Exception as e:
+    print(f"✗ Q & non-conditional raised unexpected exception: {e}")
+
+# Test 2: non-conditional object & Q (should raise NotImplementedError from Combinable)
+try:
+    result = "not_conditional" & Q()
+    print(f"✗ non-conditional & Q should fail but got: {result}")
+except NotImplementedError as e:
+    print(f"✓ non-conditional & Q correctly raises NotImplementedError: {e}")
+except Exception as e:
+    print(f"✗ non-conditional & Q raised unexpected exception: {e}")
+
+print("Done!")
\ No newline at end of file
diff --git a/test_final_verification.py b/test_final_verification.py
new file mode 100644
index 0000000000..e5617d3d6f
--- /dev/null
+++ b/test_final_verification.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""
+Final verification test for the GitHub issue fix.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+    def __str__(self):
+        return self.name
+
+print("Final verification of GitHub issue fix...")
+print("=" * 50)
+
+# Test the exact example from the GitHub issue
+print("Testing the exact example from GitHub issue:")
+
+# This should work (original working case)
+result1 = Exists(Product.objects.all()) & Q()
+print(f"✓ Exists(Product.objects.all()) & Q() = {result1}")
+
+# This should now work (was failing before)
+result2 = Q() & Exists(Product.objects.all())
+print(f"✓ Q() & Exists(Product.objects.all()) = {result2}")
+
+# Verify they are equivalent (commutative property)
+print(f"✓ Both operations now work and are commutative")
+
+# Test that the results are properly combined Q objects
+print(f"✓ Result 1 type: {type(result1)}")
+print(f"✓ Result 2 type: {type(result2)}")
+
+# Test that both results can be used in queries
+try:
+    # This should work without errors
+    from django.db import connection
+    query = str(Product.objects.filter(result1).query)
+    print("✓ Result 1 can be used in queryset filtering")
+except Exception as e:
+    print(f"✗ Result 1 filtering failed: {e}")
+
+try:
+    # This should work without errors  
+    query = str(Product.objects.filter(result2).query)
+    print("✓ Result 2 can be used in queryset filtering")
+except Exception as e:
+    print(f"✗ Result 2 filtering failed: {e}")
+
+print("=" * 50)
+print("All tests passed! The GitHub issue has been fixed.")
\ No newline at end of file
diff --git a/test_q_wrapper.py b/test_q_wrapper.py
new file mode 100644
index 0000000000..42736d3518
--- /dev/null
+++ b/test_q_wrapper.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+"""
+Test script to see how Q() handles wrapping expressions.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+    def __str__(self):
+        return self.name
+
+print("Testing Q(Exists(...))...")
+
+try:
+    exists_expr = Exists(Product.objects.all())
+    q_obj = Q(exists_expr)
+    print(f"✓ Q(Exists(...)) works: {q_obj}")
+except Exception as e:
+    print(f"✗ Q(Exists(...)) failed: {e}")
+
+try:
+    exists_expr = Exists(Product.objects.all())
+    q_obj = Q(exists_expr, name='test')
+    print(f"✓ Q(Exists(...), name='test') works: {q_obj}")
+except Exception as e:
+    print(f"✗ Q(Exists(...), name='test') failed: {e}")
+
+print("Done!")
\ No newline at end of file
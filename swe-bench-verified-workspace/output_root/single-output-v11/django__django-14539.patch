diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..9bf47d4434
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""Debug script to understand the urlize issue."""
+
+import html
+from django.utils.html import TRAILING_PUNCTUATION_CHARS
+
+# Test the specific case
+middle = "google.com/?q=1&lt!"
+print(f"Original middle: {middle}")
+print(f"Length of middle: {len(middle)}")
+
+middle_unescaped = html.unescape(middle)
+print(f"Unescaped middle: {middle_unescaped}")
+print(f"Length of unescaped middle: {len(middle_unescaped)}")
+
+stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
+print(f"Stripped unescaped: {stripped}")
+print(f"Length of stripped: {len(stripped)}")
+
+# Current problematic calculation
+trail_calc = middle[len(stripped):]
+middle_calc = middle[:len(stripped) - len(middle_unescaped)]
+
+print(f"Current trail calculation: {trail_calc}")
+print(f"Current middle calculation: {middle_calc}")
\ No newline at end of file
diff --git a/detailed_debug.py b/detailed_debug.py
new file mode 100644
index 0000000000..cd0cc3e7ef
--- /dev/null
+++ b/detailed_debug.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+"""Detailed debug script to understand the urlize issue."""
+
+import html
+from django.utils.html import TRAILING_PUNCTUATION_CHARS
+
+# Test the specific case
+middle = "google.com/?q=1&lt!"
+print(f"Original middle: {middle}")
+
+middle_unescaped = html.unescape(middle)
+print(f"Unescaped middle: {middle_unescaped}")
+
+stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
+print(f"Stripped unescaped: {stripped}")
+
+# Test my new algorithm
+escaped_pos = 0
+built_unescaped = ""
+
+while escaped_pos < len(middle) and len(built_unescaped) < len(stripped):
+    # Get the unescaped version of the current character/entity
+    char_unescaped = html.unescape(middle[escaped_pos])
+    print(f"Position {escaped_pos}: '{middle[escaped_pos]}' -> '{char_unescaped}', built_unescaped: '{built_unescaped}'")
+    
+    # Check if adding this would exceed the stripped length
+    if len(built_unescaped) + len(char_unescaped) > len(stripped):
+        print("Would exceed stripped length, breaking")
+        break
+    built_unescaped += char_unescaped
+    escaped_pos += 1
+
+print(f"Final built_unescaped: '{built_unescaped}'")
+print(f"Final escaped_pos: {escaped_pos}")
+print(f"Should be: '{stripped}'")
+print(f"Match: {built_unescaped == stripped}")
+
+# Test what the new trail and middle would be
+if built_unescaped == stripped:
+    trail_new = middle[escaped_pos:] + " (trail)"
+    middle_new = middle[:escaped_pos]
+    print(f"New trail: '{trail_new}'")
+    print(f"New middle: '{middle_new}'")
\ No newline at end of file
diff --git a/django/utils/html.py b/django/utils/html.py
index 3bc02b8dd3..dd7354418d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -283,9 +283,38 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
             middle_unescaped = html.unescape(middle)
             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
             if middle_unescaped != stripped:
-                trail = middle[len(stripped):] + trail
-                middle = middle[:len(stripped) - len(middle_unescaped)]
-                trimmed_something = True
+                # Find the correct position by parsing HTML entities properly
+                # We need to find where the stripped version ends in the original string
+                import re
+                
+                # Use a regex to find HTML entities
+                entity_pattern = re.compile(r'&[a-zA-Z0-9#]+;?')
+                escaped_pos = 0
+                built_unescaped = ""
+                
+                while escaped_pos < len(middle) and len(built_unescaped) < len(stripped):
+                    # Check if we're at the start of an HTML entity
+                    match = entity_pattern.match(middle[escaped_pos:])
+                    if match:
+                        # This is an HTML entity
+                        entity = match.group(0)
+                        char_unescaped = html.unescape(entity)
+                        escaped_pos += len(entity)
+                    else:
+                        # Regular character
+                        char_unescaped = middle[escaped_pos]
+                        escaped_pos += 1
+                    
+                    # Check if adding this would exceed the stripped length
+                    if len(built_unescaped) + len(char_unescaped) > len(stripped):
+                        break
+                    built_unescaped += char_unescaped
+                
+                # Verify we built the correct unescaped string
+                if built_unescaped == stripped:
+                    trail = middle[escaped_pos:] + trail
+                    middle = middle[:escaped_pos]
+                    trimmed_something = True
         return lead, middle, trail
 
     def is_email_simple(value):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9f35be2f00
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+"""Script to reproduce the urlize issue with HTML escaped strings and trailing punctuation."""
+
+from django.utils.html import urlize
+
+# Test case from the GitHub issue
+test_input = 'Search for google.com/?q=1&lt! and see.'
+expected_output = 'Search for <a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>! and see.'
+actual_output = urlize(test_input)
+
+print(f"Input: {test_input}")
+print(f"Expected output: {expected_output}")
+print(f"Actual output: {actual_output}")
+print(f"Match: {expected_output == actual_output}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..e26b36484b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+"""Test edge cases for the urlize fix."""
+
+from django.utils.html import urlize
+
+# Test cases to ensure the fix doesn't break other functionality
+test_cases = [
+    # Original issue case
+    ('Search for google.com/?q=1&lt! and see.', 
+     'Search for <a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>! and see.'),
+    
+    # Regular URL without HTML entities
+    ('Visit example.com.', 
+     'Visit <a href="http://example.com">example.com</a>.'),
+    
+    # URL with multiple HTML entities
+    ('Check site.com/?a=1&amp;b=2!', 
+     'Check <a href="http://site.com/?a=1&amp;b=2">site.com/?a=1&amp;b=2</a>!'),
+    
+    # URL with trailing punctuation but no HTML entities
+    ('Go to test.org, please.', 
+     'Go to <a href="http://test.org">test.org</a>, please.'),
+    
+    # URL with balanced parentheses
+    ('See (example.com)', 
+     'See (<a href="http://example.com">example.com</a>)'),
+    
+    # Email address
+    ('Contact me@example.com!', 
+     'Contact <a href="mailto:me@example.com">me@example.com</a>!'),
+]
+
+print("Testing edge cases for urlize fix:")
+print("=" * 50)
+
+for i, (input_text, expected_output) in enumerate(test_cases, 1):
+    actual_output = urlize(input_text)
+    match = expected_output == actual_output
+    status = "PASS" if match else "FAIL"
+    
+    print(f"Test {i}: {status}")
+    if not match:
+        print(f"  Input: {input_text}")
+        print(f"  Expected: {expected_output}")
+        print(f"  Actual: {actual_output}")
+    print()
+
+print("All tests completed!")
\ No newline at end of file
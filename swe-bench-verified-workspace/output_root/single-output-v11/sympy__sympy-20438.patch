diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2f8cba2884
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, ProductSet, Eq
+
+# Reproduce the issue described in the GitHub issue
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+print("Testing intersection equality:")
+print(f"b.intersection(c) == c.intersection(b): {b.intersection(c) == c.intersection(b)}")
+
+print("\nTesting subset relations:")
+print(f"b.is_subset(c): {b.is_subset(c)}")
+print(f"c.is_subset(b): {c.is_subset(b)}")
+
+print("\nTesting equality simplification:")
+try:
+    result = Eq(b, c).simplify()
+    print(f"Eq(b, c).simplify(): {result}")
+except Exception as e:
+    print(f"Error in Eq(b, c).simplify(): {type(e).__name__}: {e}")
+
+print(f"\nb.rewrite(FiniteSet): {b.rewrite(FiniteSet)}")
\ No newline at end of file
diff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py
index fdca06025a..58b6b4821a 100644
--- a/sympy/sets/handlers/issubset.py
+++ b/sympy/sets/handlers/issubset.py
@@ -1,7 +1,7 @@
 from sympy import S, Symbol
 from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or
 from sympy.core.relational import Eq
-from sympy.sets.sets import FiniteSet, Interval, Set, Union
+from sympy.sets.sets import FiniteSet, Interval, Set, Union, ProductSet
 from sympy.sets.fancysets import Complexes, Reals, Range, Rationals
 from sympy.multipledispatch import dispatch
 
@@ -133,3 +133,49 @@ def is_subset_sets(a, b): # noqa:F811
 @dispatch(Rationals, Range)  # type: ignore # noqa:F811
 def is_subset_sets(a, b): # noqa:F811
     return False
+
+@dispatch(ProductSet, FiniteSet)  # type: ignore # noqa:F811
+def is_subset_sets(product_set, finite_set): # noqa:F811
+    """
+    Check if a ProductSet is a subset of a FiniteSet.
+    
+    A ProductSet is a subset of a FiniteSet if all elements of the ProductSet
+    are contained in the FiniteSet.
+    """
+    # If the ProductSet is not finite, it cannot be a subset of a finite set
+    if not product_set.is_finite_set:
+        return False
+    
+    # If the ProductSet is empty, it's always a subset
+    if product_set.is_empty:
+        return True
+    
+    # Check if all elements of the ProductSet are in the FiniteSet
+    try:
+        # Try to iterate through the ProductSet
+        for element in product_set:
+            if element not in finite_set:
+                return False
+        return True
+    except (TypeError, ValueError):
+        # If we can't iterate (e.g., symbolic elements), return None
+        return None
+
+@dispatch(FiniteSet, ProductSet)  # type: ignore # noqa:F811
+def is_subset_sets(finite_set, product_set): # noqa:F811
+    """
+    Check if a FiniteSet is a subset of a ProductSet.
+    
+    A FiniteSet is a subset of a ProductSet if all elements of the FiniteSet
+    are contained in the ProductSet.
+    """
+    # If the ProductSet is not finite, a finite set can still be a subset
+    # Check if all elements of the FiniteSet are in the ProductSet
+    try:
+        for element in finite_set:
+            if element not in product_set:
+                return False
+        return True
+    except (TypeError, ValueError):
+        # If we can't check membership (e.g., symbolic elements), return None
+        return None
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..9d9cc81294
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+from sympy import FiniteSet, ProductSet
+
+# Test case 1: Basic case from the issue
+print("=== Test Case 1: Basic case ===")
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+print(f"b.is_subset(c): {b.is_subset(c)}")  # Should be True
+print(f"c.is_subset(b): {c.is_subset(b)}")  # Should be True
+
+# Test case 2: Partial subset
+print("\n=== Test Case 2: Partial subset ===")
+d = FiniteSet((1, 1), (1, 2))  # Only some elements
+print(f"d.is_subset(b): {d.is_subset(b)}")  # Should be True
+print(f"b.is_subset(d): {b.is_subset(d)}")  # Should be False
+
+# Test case 3: Empty sets
+print("\n=== Test Case 3: Empty sets ===")
+empty_fs = FiniteSet()
+empty_ps = ProductSet(FiniteSet(), FiniteSet())
+print(f"empty_fs.is_subset(b): {empty_fs.is_subset(b)}")  # Should be True
+print(f"empty_ps.is_subset(c): {empty_ps.is_subset(c)}")  # Should be True
+
+# Test case 4: Different sizes
+print("\n=== Test Case 4: Different sizes ===")
+e = FiniteSet(1, 2, 3)
+f = ProductSet(e, e)
+g = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))  # Missing some elements
+print(f"g.is_subset(f): {g.is_subset(f)}")  # Should be True
+print(f"f.is_subset(g): {f.is_subset(g)}")  # Should be False
+
+# Test case 5: Single element sets
+print("\n=== Test Case 5: Single element sets ===")
+h = FiniteSet(1)
+i = ProductSet(h, h)
+j = FiniteSet((1, 1))
+print(f"i.is_subset(j): {i.is_subset(j)}")  # Should be True
+print(f"j.is_subset(i): {j.is_subset(i)}")  # Should be True
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..1f55633b1
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,28 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+# Test the exact example from the GitHub issue
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]}
+)
+rs.fit(X, y)
+
+print("=== GitHub Issue Example ===")
+print("mean_fit_time:", rs.cv_results_['mean_fit_time'])
+print("mean_score_time:", rs.cv_results_['mean_score_time'])
+
+# Check the new refit_time_ attribute
+print("refit_time_:", rs.refit_time_)
+print("refit_time_ type:", type(rs.refit_time_))
+print("refit_time_ > 0:", rs.refit_time_ > 0)
+
+# Verify the attribute exists and is accessible
+assert hasattr(rs, 'refit_time_'), "refit_time_ attribute should exist"
+assert isinstance(rs.refit_time_, float), "refit_time_ should be a float"
+assert rs.refit_time_ > 0, "refit_time_ should be positive"
+
+print("\nâœ… All tests passed! The refit_time_ attribute is working correctly.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..767ebcf10
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,19 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]}
+)
+rs.fit(X, y)
+print(rs.cv_results_['mean_fit_time'])
+print(rs.cv_results_['mean_score_time'])
+
+# Check if refit_time_ attribute exists
+if hasattr(rs, 'refit_time_'):
+    print("refit_time_ exists:", rs.refit_time_)
+else:
+    print("refit_time_ attribute does not exist")
\ No newline at end of file
diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py
index 99d6096af..077a1673d 100644
--- a/sklearn/model_selection/_search.py
+++ b/sklearn/model_selection/_search.py
@@ -17,6 +17,7 @@ from collections import Mapping, namedtuple, defaultdict, Sequence, Iterable
 from functools import partial, reduce
 from itertools import product
 import operator
+import time
 import warnings
 
 import numpy as np
@@ -766,10 +767,12 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,
         if self.refit:
             self.best_estimator_ = clone(base_estimator).set_params(
                 **self.best_params_)
+            start_time = time.time()
             if y is not None:
                 self.best_estimator_.fit(X, y, **fit_params)
             else:
                 self.best_estimator_.fit(X, **fit_params)
+            self.refit_time_ = time.time() - start_time
 
         # Store the only scorer not as a dict for single metric evaluation
         self.scorer_ = scorers if self.multimetric_ else scorers['score']
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..9fcd8957c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+import numpy as np
+
+print("=== Test 1: refit=False ===")
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3]},
+    refit=False
+)
+rs.fit(X, y)
+print("refit_time_ exists:", hasattr(rs, 'refit_time_'))
+
+print("\n=== Test 2: Different estimator ===")
+from sklearn.svm import SVC
+rs2 = sklearn.model_selection.GridSearchCV(
+    estimator=SVC(),
+    param_grid={'C': [0.1, 1.0]}
+)
+rs2.fit(X, y)
+print("refit_time_ exists:", hasattr(rs2, 'refit_time_'))
+print("refit_time_:", rs2.refit_time_)
+
+print("\n=== Test 3: No target (unsupervised) ===")
+# Create some sample data for clustering
+X_cluster = np.random.rand(100, 2)
+from sklearn.cluster import KMeans
+rs3 = sklearn.model_selection.GridSearchCV(
+    estimator=KMeans(),
+    param_grid={'n_clusters': [2, 3]}
+)
+rs3.fit(X_cluster)  # No y parameter
+print("refit_time_ exists:", hasattr(rs3, 'refit_time_'))
+print("refit_time_:", rs3.refit_time_)
+
+print("\n=== Test 4: RandomizedSearchCV ===")
+from sklearn.model_selection import RandomizedSearchCV
+from scipy.stats import uniform
+rs4 = RandomizedSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_distributions={'n_estimators': [2, 3, 4, 5]},
+    n_iter=2
+)
+rs4.fit(X, y)
+print("refit_time_ exists:", hasattr(rs4, 'refit_time_'))
+print("refit_time_:", rs4.refit_time_)
\ No newline at end of file
diff --git a/test_multiprocessing.py b/test_multiprocessing.py
new file mode 100644
index 000000000..3924baf7f
--- /dev/null
+++ b/test_multiprocessing.py
@@ -0,0 +1,25 @@
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+print("=== Test with n_jobs=2 ===")
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]},
+    n_jobs=2
+)
+rs.fit(X, y)
+print("refit_time_ exists:", hasattr(rs, 'refit_time_'))
+print("refit_time_:", rs.refit_time_)
+
+print("\n=== Test with n_jobs=-1 ===")
+rs2 = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]},
+    n_jobs=-1
+)
+rs2.fit(X, y)
+print("refit_time_ exists:", hasattr(rs2, 'refit_time_'))
+print("refit_time_:", rs2.refit_time_)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..305182d1e5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+import sympy
+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, gamma_trace, LorentzIndex
+from sympy.physics.hep.gamma_matrices import kahane_simplify
+from sympy.tensor.tensor import tensor_indices
+
+def test_kahane_leading_gamma_matrix_bug():
+    mu, nu, rho, sigma = tensor_indices("mu, nu, rho, sigma", LorentzIndex)
+    
+    t = G(mu)*G(-mu)*G(rho)*G(sigma)
+    r = kahane_simplify(t)
+    print("First case:")
+    print(r)
+    print("Expected: 4*GammaMatrix(rho)*GammaMatrix(sigma)")
+    print("Match:", r.equals(4*G(rho)*G(sigma)))
+    print()
+    
+    t = G(rho)*G(sigma)*G(mu)*G(-mu)
+    r = kahane_simplify(t)
+    print("Second case:")
+    print(r)
+    print("Expected: 4*GammaMatrix(rho)*GammaMatrix(sigma)")
+    print("Match:", r.equals(4*G(rho)*G(sigma)))
+    
+    # The second case should fail due to the bug
+    assert r.equals(4*G(rho)*G(sigma)), "Bug confirmed: order of gamma matrices is reversed"
+
+if __name__ == "__main__":
+    test_kahane_leading_gamma_matrix_bug()
\ No newline at end of file
diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py
index 23284e4a92..bf43facfb1 100644
--- a/sympy/physics/hep/gamma_matrices.py
+++ b/sympy/physics/hep/gamma_matrices.py
@@ -694,7 +694,7 @@ def kahane_simplify(expression):
 
     # If `first_dum_pos` is not zero, it means that there are trailing free gamma
     # matrices in front of `expression`, so multiply by them:
-    for i in range(0, first_dum_pos):
+    for i in range(first_dum_pos - 1, -1, -1):
         [ri.insert(0, free_pos[i]) for ri in resulting_indices]
 
     resulting_expr = S.Zero
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..6dd658f13b
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,68 @@
+import sympy
+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify, LorentzIndex
+from sympy.tensor.tensor import tensor_indices
+
+def test_comprehensive_kahane_simplify():
+    mu, nu, rho, sigma, alpha, beta = tensor_indices("mu, nu, rho, sigma, alpha, beta", LorentzIndex)
+    
+    # Test case 1: Original bug case - leading gamma matrices
+    print("Test 1: Leading gamma matrices")
+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)
+    r1 = kahane_simplify(t1)
+    print("Result:", r1)
+    print("Expected: 4*GammaMatrix(rho)*GammaMatrix(sigma)")
+    print("Match:", r1.equals(4*G(rho)*G(sigma)))
+    assert r1.equals(4*G(rho)*G(sigma)), "Test 1 failed"
+    
+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)
+    r2 = kahane_simplify(t2)
+    print("Result:", r2)
+    print("Expected: 4*GammaMatrix(rho)*GammaMatrix(sigma)")
+    print("Match:", r2.equals(4*G(rho)*G(sigma)))
+    assert r2.equals(4*G(rho)*G(sigma)), "Test 1 failed"
+    print()
+    
+    # Test case 2: Multiple leading gamma matrices
+    print("Test 2: Multiple leading gamma matrices")
+    t3 = G(alpha)*G(beta)*G(mu)*G(-mu)*G(rho)*G(sigma)
+    r3 = kahane_simplify(t3)
+    print("Result:", r3)
+    print("Expected: 4*GammaMatrix(alpha)*GammaMatrix(beta)*GammaMatrix(rho)*GammaMatrix(sigma)")
+    expected3 = 4*G(alpha)*G(beta)*G(rho)*G(sigma)
+    print("Match:", r3.equals(expected3))
+    assert r3.equals(expected3), "Test 2 failed"
+    
+    t4 = G(rho)*G(sigma)*G(alpha)*G(beta)*G(mu)*G(-mu)
+    r4 = kahane_simplify(t4)
+    print("Result:", r4)
+    print("Expected: 4*GammaMatrix(rho)*GammaMatrix(sigma)*GammaMatrix(alpha)*GammaMatrix(beta)")
+    expected4 = 4*G(rho)*G(sigma)*G(alpha)*G(beta)
+    print("Match:", r4.equals(expected4))
+    assert r4.equals(expected4), "Test 2 failed"
+    print()
+    
+    # Test case 3: No leading gamma matrices (should still work)
+    print("Test 3: No leading gamma matrices")
+    t5 = G(mu)*G(-mu)
+    r5 = kahane_simplify(t5)
+    print("Result:", r5)
+    print("Expected: 4 (identity matrix)")
+    # The result should be a 4x4 identity matrix
+    print("Type:", type(r5))
+    print()
+    
+    # Test case 4: Single leading gamma matrix
+    print("Test 4: Single leading gamma matrix")
+    m1 = tensor_indices("m1", LorentzIndex)
+    t6 = G(rho)*G(m1)*G(-m1)
+    r6 = kahane_simplify(t6)
+    print("Result:", r6)
+    print("Expected: 4*GammaMatrix(rho)")
+    print("Match:", r6.equals(4*G(rho)))
+    assert r6.equals(4*G(rho)), "Test 4 failed"
+    print()
+    
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_comprehensive_kahane_simplify()
\ No newline at end of file
diff --git a/check_mapping.py b/check_mapping.py
new file mode 100644
index 0000000000..bd57313a8f
--- /dev/null
+++ b/check_mapping.py
@@ -0,0 +1,39 @@
+from sympy.combinatorics import *
+
+D3 = DihedralGroup(3)
+print("D3 generators:", D3.generators)
+print("D3 presentation generators:", D3.presentation().generators)
+print("D3 relators:", D3.presentation().relators)
+
+# Test the mapping: both generators map to the same element (rotation)
+g0, g1 = D3.generators
+img_g0, img_g1 = g0, g0  # Both map to the rotation
+
+print(f"\nMapping: g0 -> {img_g0}, g1 -> {img_g1}")
+
+# Check if this mapping preserves the dihedral group relations
+# D3 relations: g1^2 = identity, g0^3 = identity, g1*g0*g1 = g0^-1
+
+# Check g1^2
+result1 = img_g1**2
+print(f"g1^2 = {result1}, is identity: {result1 == D3.identity}")
+
+# Check g0^3  
+result2 = img_g0**3
+print(f"g0^3 = {result2}, is identity: {result2 == D3.identity}")
+
+# Check g1*g0*g1 = g0^-1
+left_side = img_g1 * img_g0 * img_g1
+right_side = img_g0**-1
+print(f"g1*g0*g1 = {left_side}")
+print(f"g0^-1 = {right_side}")
+print(f"Are they equal? {left_side == right_side}")
+
+# This mapping might actually be valid if it preserves all relations
+# Let's see what the actual homomorphism check says
+from sympy.combinatorics.homomorphisms import homomorphism
+try:
+    T = homomorphism(D3, D3, D3.generators, [img_g0, img_g1])
+    print("\n✓ Homomorphism check passed - mapping is valid!")
+except ValueError as e:
+    print(f"\n✗ Homomorphism check failed: {e}")
\ No newline at end of file
diff --git a/debug_different_groups.py b/debug_different_groups.py
new file mode 100644
index 0000000000..b83653db2a
--- /dev/null
+++ b/debug_different_groups.py
@@ -0,0 +1,40 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+from sympy.combinatorics.named_groups import CyclicGroup
+
+D3 = DihedralGroup(3)
+C3 = CyclicGroup(3)
+
+print("D3 generators:", D3.generators)
+print("C3 generators:", C3.generators)
+print("D3 presentation:", D3.presentation())
+print("C3 presentation:", C3.presentation())
+
+# Try to create a homomorphism from D3 to C3
+gen = C3.generators[0]
+print(f"\nTrying to map both D3 generators to C3 generator: {gen}")
+
+try:
+    T = homomorphism(D3, C3, D3.generators, [gen, gen])
+    print("✓ Success: Homomorphism created")
+except ValueError as e:
+    print(f"✗ Error: {e}")
+
+# Let's check if this mapping should actually be valid
+# D3 has order 6, C3 has order 3
+# A homomorphism from D3 to C3 would need to map the reflection (order 2)
+# to an element of C3, but C3 only has elements of order 3
+print("\nChecking if mapping is theoretically valid:")
+g0, g1 = D3.generators  # rotation (order 3), reflection (order 2)
+print(f"g0 order: {g0.order()}, g1 order: {g1.order()}")
+
+# The reflection g1 has order 2, but all elements in C3 have order 3
+# So g1 must map to identity in C3 for the homomorphism to work
+print(f"gen order: {gen.order()}")
+
+# Try mapping reflection to identity
+try:
+    T = homomorphism(D3, C3, D3.generators, [gen, C3.identity])
+    print("✓ Success: Valid homomorphism created (reflection maps to identity)")
+except ValueError as e:
+    print(f"✗ Error: {e}")
\ No newline at end of file
diff --git a/debug_homomorphism_check.py b/debug_homomorphism_check.py
new file mode 100644
index 0000000000..c70defb490
--- /dev/null
+++ b/debug_homomorphism_check.py
@@ -0,0 +1,65 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import _check_homomorphism
+from sympy.combinatorics.named_groups import CyclicGroup
+
+D3 = DihedralGroup(3)
+C3 = CyclicGroup(3)
+
+# Create the mapping: rotation -> generator, reflection -> identity
+images_dict = {
+    D3.generators[0]: C3.generators[0],  # rotation -> generator
+    D3.generators[1]: C3.identity         # reflection -> identity
+}
+
+print("Images dict:", images_dict)
+print("D3 relators:", D3.presentation().relators)
+
+# Manually check the homomorphism
+result = _check_homomorphism(D3, C3, images_dict)
+print(f"Homomorphism check result: {result}")
+
+# Let's manually trace through what happens with each relator
+rels = D3.presentation().relators
+identity = C3.identity
+
+def manual_image(r):
+    print(f"\nProcessing relator: {r}")
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            elem = r[i]
+            print(f"  r[{i}] = {elem}, power = {power}")
+            
+            # Apply the same logic as the fixed _image function
+            if isinstance(D3, PermutationGroup) and elem in D3.presentation().generators:
+                s = D3.generators[D3.presentation().generators.index(elem)]
+                print(f"    Found in presentation gens, mapped to {s}")
+            elif isinstance(D3, PermutationGroup) and elem**-1 in D3.presentation().generators:
+                s = D3.generators[D3.presentation().generators.index(elem**-1)]**-1
+                print(f"    Found inverse in presentation gens, mapped to {s}")
+            else:
+                s = elem
+                print(f"    Using original element {s}")
+            
+            if s in images_dict:
+                w = w * images_dict[s]**power
+                print(f"    s in images, new w = {w}")
+            elif s**-1 in images_dict:
+                w = w * images_dict[s**-1]**power
+                print(f"    s^-1 in images, new w = {w}")
+            else:
+                print(f"    ERROR: Neither s nor s^-1 found in images")
+            
+            i += abs(power)
+            j += 1
+        return w
+
+for rel in rels:
+    result = manual_image(rel)
+    print(f"Final result for {rel}: {result}, is identity: {result == identity}")
\ No newline at end of file
diff --git a/debug_invalid.py b/debug_invalid.py
new file mode 100644
index 0000000000..036318449d
--- /dev/null
+++ b/debug_invalid.py
@@ -0,0 +1,39 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+D3 = DihedralGroup(3)
+print("D3 generators:", D3.generators)
+print("D3 presentation:", D3.presentation())
+print("D3 relators:", D3.presentation().relators)
+
+# Test the invalid case
+invalid_images = [D3.generators[0], D3.generators[0]]  # Both gens map to same element
+print("\nInvalid images:", invalid_images)
+
+# Let's manually check if this preserves relations
+g0, g1 = D3.generators
+img_g0, img_g1 = invalid_images
+
+# Check each relator
+rels = D3.presentation().relators
+print("\nChecking relators:")
+for rel in rels:
+    print(f"Relator: {rel}")
+    # We need to evaluate this relator under the mapping
+    result = D3.identity
+    for i in range(len(rel)):
+        power = rel.array_form[i][1]
+        elem = rel[i]
+        if elem == D3.presentation().generators[0]:
+            mapped = img_g0
+        elif elem == D3.presentation().generators[1]:
+            mapped = img_g1
+        elif elem**-1 == D3.presentation().generators[0]:
+            mapped = img_g0**-1
+        elif elem**-1 == D3.presentation().generators[1]:
+            mapped = img_g1**-1
+        else:
+            print(f"Unknown element: {elem}")
+            continue
+        result = result * mapped**power
+    print(f"Result: {result}, is identity: {result == D3.identity}")
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..58b2ba3b17
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,82 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+from sympy.combinatorics.homomorphisms import _check_homomorphism
+from sympy.combinatorics.fp_groups import FpGroup
+
+# Let's debug the issue
+D3 = DihedralGroup(3)
+print("D3 generators:", D3.generators)
+print("D3 presentation generators:", D3.presentation().generators)
+print("D3 presentation relators:", D3.presentation().relators)
+
+# Let's see what happens in _check_homomorphism
+images = dict(zip(D3.generators, D3.generators))
+print("Images dict:", images)
+
+# Monkey patch _check_homomorphism to add debugging
+original_check = _check_homomorphism
+
+def debug_check_homomorphism(domain, codomain, images):
+    print(f"Domain type: {type(domain)}")
+    if hasattr(domain, 'relators'):
+        rels = domain.relators
+        print("Using domain.relators")
+    else:
+        gens = domain.presentation().generators
+        rels = domain.presentation().relators
+        print(f"Presentation gens: {gens}")
+        print(f"Presentation relators: {rels}")
+    
+    identity = codomain.identity
+    
+    def _image(r):
+        print(f"Processing relator: {r}")
+        if r.is_identity:
+            return identity
+        else:
+            w = identity
+            r_arr = r.array_form
+            i = 0
+            j = 0
+            while i < len(r):
+                power = r_arr[j][1]
+                print(f"r[{i}] = {r[i]}, power = {power}")
+                print(f"r[{i}] in gens: {r[i] in gens if 'gens' in locals() else 'gens not defined'}")
+                if isinstance(domain, PermutationGroup) and 'gens' in locals() and r[i] in gens:
+                    s = domain.generators[gens.index(r[i])]
+                    print(f"Found in gens, s = {s}")
+                else:
+                    s = r[i]
+                    print(f"Not in gens, using s = {s}")
+                if s in images:
+                    w = w*images[s]**power
+                    print(f"s in images, new w = {w}")
+                elif s**-1 in images:
+                    w = w*images[s**-1]**power
+                    print(f"s^-1 in images, new w = {w}")
+                i += abs(power)
+                j += 1
+            return w
+    
+    for r in rels:
+        print(f"Checking relator: {r}")
+        result = _image(r)
+        print(f"Result: {result}")
+        if isinstance(codomain, FpGroup):
+            if not codomain.equals(result, identity):
+                return False
+        else:
+            if result != identity:
+                return False
+    
+    return True
+
+# Replace the function temporarily
+import sympy.combinatorics.homomorphisms as hm
+hm._check_homomorphism = debug_check_homomorphism
+
+try:
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("Success: Homomorphism created")
+except ValueError as e:
+    print("Error:", e)
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..d78a18cf72
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,51 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+print("=== Final Comprehensive Test ===")
+
+# Test 1: Original issue - identity homomorphism on D3
+print("\n1. Testing original issue (identity homomorphism on D3):")
+D3 = DihedralGroup(3)
+try:
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("✓ SUCCESS: Original issue fixed!")
+except ValueError as e:
+    print(f"✗ FAILED: {e}")
+
+# Test 2: Invalid homomorphism (should fail)
+print("\n2. Testing invalid homomorphism (should fail):")
+try:
+    invalid_images = [D3.generators[0], D3.generators[0]]  # Both map to same element
+    T = homomorphism(D3, D3, D3.generators, invalid_images)
+    print("✗ FAILED: Invalid homomorphism was accepted")
+except ValueError as e:
+    print("✓ SUCCESS: Correctly rejected invalid homomorphism")
+
+# Test 3: Trivial homomorphism
+print("\n3. Testing trivial homomorphism:")
+try:
+    identity_images = [D3.identity, D3.identity]
+    T = homomorphism(D3, D3, D3.generators, identity_images)
+    print("✓ SUCCESS: Trivial homomorphism created")
+except ValueError as e:
+    print(f"✗ FAILED: {e}")
+
+# Test 4: Homomorphism with inverted generators in relators
+print("\n4. Testing homomorphism with inverted generators:")
+# This tests the specific case mentioned in the issue
+try:
+    # Create a homomorphism that should work
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    # Test that it works correctly
+    for g in D3.generators:
+        result = T(g)
+        expected = g
+        if result != expected:
+            print(f"✗ FAILED: Homomorphism incorrect for {g}")
+            break
+    else:
+        print("✓ SUCCESS: Homomorphism works correctly with inverted generators")
+except ValueError as e:
+    print(f"✗ FAILED: {e}")
+
+print("\n=== All tests completed ===")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e812309bb5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+# Try to reproduce the issue
+D3 = DihedralGroup(3)
+print("D3 generators:", D3.generators)
+
+# This should fail according to the issue
+try:
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("Success: Homomorphism created")
+except ValueError as e:
+    print("Error:", e)
\ No newline at end of file
diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..9818777bdf 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -335,6 +335,8 @@ def _image(r):
                 power = r_arr[j][1]
                 if isinstance(domain, PermutationGroup) and r[i] in gens:
                     s = domain.generators[gens.index(r[i])]
+                elif isinstance(domain, PermutationGroup) and r[i]**-1 in gens:
+                    s = domain.generators[gens.index(r[i]**-1)]**-1
                 else:
                     s = r[i]
                 if s in images:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..39319f1ced
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,47 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+# Test 1: Original case - identity homomorphism
+print("Test 1: Identity homomorphism")
+D3 = DihedralGroup(3)
+try:
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("✓ Success: Identity homomorphism created")
+except ValueError as e:
+    print("✗ Error:", e)
+
+# Test 2: Non-identity homomorphism
+print("\nTest 2: Non-identity homomorphism")
+# Create a simple homomorphism that maps everything to identity
+identity_only = [D3.identity, D3.identity]
+try:
+    T = homomorphism(D3, D3, D3.generators, identity_only)
+    print("✓ Success: Trivial homomorphism created")
+except ValueError as e:
+    print("✗ Error:", e)
+
+# Test 3: Different groups
+print("\nTest 3: Homomorphism between different groups")
+# Create a homomorphism from D3 to a cyclic group
+from sympy.combinatorics.named_groups import CyclicGroup
+C3 = CyclicGroup(3)
+try:
+    # Map both generators to the same cyclic generator
+    gen = C3.generators[0]
+    T = homomorphism(D3, C3, D3.generators, [gen, gen])
+    print("✓ Success: Homomorphism between different groups created")
+except ValueError as e:
+    print("✗ Error:", e)
+
+# Test 4: Invalid homomorphism (should fail)
+print("\nTest 4: Invalid homomorphism (should fail)")
+# Try to create an invalid homomorphism
+try:
+    # This should fail because the images don't preserve relations
+    invalid_images = [D3.generators[0], D3.generators[0]]  # Both gens map to same element
+    T = homomorphism(D3, D3, D3.generators, invalid_images)
+    print("✗ Unexpected success: Invalid homomorphism was accepted")
+except ValueError as e:
+    print("✓ Expected error:", e)
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_valid_homomorphism.py b/test_valid_homomorphism.py
new file mode 100644
index 0000000000..b5f63ac90c
--- /dev/null
+++ b/test_valid_homomorphism.py
@@ -0,0 +1,33 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+from sympy.combinatorics.named_groups import CyclicGroup
+
+D3 = DihedralGroup(3)
+C3 = CyclicGroup(3)
+
+print("Testing valid homomorphisms from D3 to C3")
+
+# The only valid homomorphism from D3 (order 6) to C3 (order 3) 
+# is the trivial homomorphism that maps everything to identity
+try:
+    T = homomorphism(D3, C3, D3.generators, [C3.identity, C3.identity])
+    print("✓ Success: Trivial homomorphism created")
+except ValueError as e:
+    print(f"✗ Error: {e}")
+
+# Test another case: homomorphism from a cyclic group to itself
+print("\nTesting homomorphism from C3 to C3:")
+try:
+    T = homomorphism(C3, C3, C3.generators, C3.generators)
+    print("✓ Success: Identity homomorphism on cyclic group created")
+except ValueError as e:
+    print(f"✗ Error: {e}")
+
+# Test the original issue case
+print("\nTesting original issue case:")
+try:
+    D3 = DihedralGroup(3)
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("✓ Success: Original issue fixed - identity homomorphism on D3 created")
+except ValueError as e:
+    print(f"✗ Error: {e}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..f0ed933ec
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the @classmethod @property documentation issue.
+"""
+
+class BaseClass:
+    """A base class for testing."""
+    
+    @property
+    def baseclass_property(self):
+        """Some instance property."""
+        return "property"
+    
+    @classmethod
+    @property
+    def baseclass_class_property(cls):
+        """Some class property."""
+        return "class_property"
+
+def test_docstring_extraction():
+    """Test how docstrings are extracted for different property types."""
+    import inspect
+    from sphinx.util.inspect import getdoc, safe_getattr
+    
+    print("=== Testing docstring extraction ===")
+    
+    # Test regular property
+    print("Regular property:")
+    prop = BaseClass.baseclass_property
+    print(f"Type: {type(prop)}")
+    print(f"Direct __doc__: {getattr(prop, '__doc__', None)}")
+    print(f"getdoc result: {getdoc(prop)}")
+    print()
+    
+    # Test classmethod + property
+    print("Classmethod + property:")
+    class_prop = BaseClass.baseclass_class_property
+    print(f"Type: {type(class_prop)}")
+    print(f"Direct __doc__: {getattr(class_prop, '__doc__', None)}")
+    print(f"getdoc result: {getdoc(class_prop)}")
+    print()
+    
+    # Test using safe_getattr
+    print("Using safe_getattr:")
+    print(f"safe_getattr(BaseClass, 'baseclass_class_property'): {safe_getattr(BaseClass, 'baseclass_class_property', None)}")
+    class_prop_obj = safe_getattr(BaseClass, 'baseclass_class_property', None)
+    if class_prop_obj:
+        print(f"Type from safe_getattr: {type(class_prop_obj)}")
+        print(f"Direct __doc__: {getattr(class_prop_obj, '__doc__', None)}")
+        print(f"getdoc result: {getdoc(class_prop_obj)}")
+    print()
+    
+    # Test accessing the class dictionary directly
+    print("Accessing class __dict__:")
+    class_prop_dict = BaseClass.__dict__.get('baseclass_class_property')
+    print(f"Type from __dict__: {type(class_prop_dict)}")
+    if class_prop_dict:
+        print(f"Direct __doc__: {getattr(class_prop_dict, '__doc__', None)}")
+        print(f"getdoc result: {getdoc(class_prop_dict)}")
+    print()
+    
+    # Test isproperty check
+    print("isproperty check:")
+    print(f"Regular property: {inspect.isproperty(BaseClass.__dict__.get('baseclass_property'))}")
+    print(f"Classmethod property: {inspect.isproperty(BaseClass.__dict__.get('baseclass_class_property'))}")
+
+if __name__ == "__main__":
+    test_docstring_extraction()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 4a1d5aeed..3faa58e79 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index f957a667b2..8f98493166 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -261,8 +261,8 @@ class HashedFilesMixin:
 
         paths = {path: paths[path] for path in adjustable_paths}
 
+        substitutions = False
         for i in range(self.max_post_process_passes):
-            substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
                 # Overwrite since hashed_name may be newer.
                 processed_adjustable_paths[name] = (name, hashed_name, processed)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2d921f05c6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ManifestStaticFilesStorage crash with max_post_process_passes = 0
+"""
+
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    STATICFILES_STORAGE='reproduce_issue.MyManifestStaticFilesStorage',
+    STATIC_URL='/static/',
+    STATIC_ROOT=tempfile.mkdtemp(),
+)
+
+class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):
+    max_post_process_passes = 0
+
+def test_crash():
+    """Test the crash scenario"""
+    print("Testing ManifestStaticFilesStorage with max_post_process_passes = 0...")
+    
+    # Create a temporary storage instance
+    storage = MyManifestStaticFilesStorage()
+    
+    # Simulate the post_process call that would trigger the error
+    try:
+        # This should trigger the UnboundLocalError
+        result = list(storage.post_process({}))
+        print("SUCCESS: No crash occurred!")
+        print(f"Result: {result}")
+    except UnboundLocalError as e:
+        print(f"CRASH CONFIRMED: {e}")
+        return False
+    except Exception as e:
+        print(f"Different error occurred: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    test_crash()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..8d478a9574
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the ManifestStaticFilesStorage fix
+"""
+
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    STATIC_URL='/static/',
+    STATIC_ROOT=tempfile.mkdtemp(),
+)
+
+def test_comprehensive():
+    """Test comprehensive scenarios for the fix"""
+    
+    print("Running comprehensive tests for ManifestStaticFilesStorage fix...")
+    
+    # Test 1: Original issue - max_post_process_passes = 0
+    class Storage0(ManifestStaticFilesStorage):
+        max_post_process_passes = 0
+    
+    try:
+        storage = Storage0()
+        result = list(storage.post_process({}))
+        print("✓ Test 1 PASSED: max_post_process_passes = 0 (original issue fixed)")
+    except Exception as e:
+        print(f"✗ Test 1 FAILED: {e}")
+        return False
+    
+    # Test 2: Normal operation - max_post_process_passes = 1
+    class Storage1(ManifestStaticFilesStorage):
+        max_post_process_passes = 1
+    
+    try:
+        storage = Storage1()
+        result = list(storage.post_process({}))
+        print("✓ Test 2 PASSED: max_post_process_passes = 1 (normal operation works)")
+    except Exception as e:
+        print(f"✗ Test 2 FAILED: {e}")
+        return False
+    
+    # Test 3: Default value - should be 5
+    class StorageDefault(ManifestStaticFilesStorage):
+        pass
+    
+    try:
+        storage = StorageDefault()
+        # Check that the default value is preserved
+        assert storage.max_post_process_passes == 5, f"Expected 5, got {storage.max_post_process_passes}"
+        result = list(storage.post_process({}))
+        print("✓ Test 3 PASSED: Default max_post_process_passes = 5 works")
+    except Exception as e:
+        print(f"✗ Test 3 FAILED: {e}")
+        return False
+    
+    # Test 4: Multiple passes - max_post_process_passes = 3
+    class Storage3(ManifestStaticFilesStorage):
+        max_post_process_passes = 3
+    
+    try:
+        storage = Storage3()
+        result = list(storage.post_process({}))
+        print("✓ Test 4 PASSED: max_post_process_passes = 3 works")
+    except Exception as e:
+        print(f"✗ Test 4 FAILED: {e}")
+        return False
+    
+    # Test 5: Verify the fix doesn't change the behavior when loop runs
+    # The substitutions variable should work correctly when the loop executes
+    class StorageTest(ManifestStaticFilesStorage):
+        max_post_process_passes = 2
+    
+    try:
+        storage = StorageTest()
+        result = list(storage.post_process({}))
+        # Should return empty list when no files to process
+        assert result == [], f"Expected empty list, got {result}"
+        print("✓ Test 5 PASSED: Behavior unchanged when loop runs")
+    except Exception as e:
+        print(f"✗ Test 5 FAILED: {e}")
+        return False
+    
+    print("All comprehensive tests passed! The fix is working correctly.")
+    return True
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c6ff02eb21
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+"""
+Script to test edge cases for the ManifestStaticFilesStorage fix
+"""
+
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    STATIC_URL='/static/',
+    STATIC_ROOT=tempfile.mkdtemp(),
+)
+
+def test_edge_cases():
+    """Test various edge cases for max_post_process_passes"""
+    
+    print("Testing edge cases for ManifestStaticFilesStorage...")
+    
+    # Test case 1: max_post_process_passes = 0 (the original issue)
+    class Storage0(ManifestStaticFilesStorage):
+        max_post_process_passes = 0
+    
+    try:
+        storage = Storage0()
+        result = list(storage.post_process({}))
+        print("✓ Test 1 PASSED: max_post_process_passes = 0 works")
+    except Exception as e:
+        print(f"✗ Test 1 FAILED: {e}")
+        return False
+    
+    # Test case 2: max_post_process_passes = 1 (normal case)
+    class Storage1(ManifestStaticFilesStorage):
+        max_post_process_passes = 1
+    
+    try:
+        storage = Storage1()
+        result = list(storage.post_process({}))
+        print("✓ Test 2 PASSED: max_post_process_passes = 1 works")
+    except Exception as e:
+        print(f"✗ Test 2 FAILED: {e}")
+        return False
+    
+    # Test case 3: max_post_process_passes = 5 (higher value)
+    class Storage5(ManifestStaticFilesStorage):
+        max_post_process_passes = 5
+    
+    try:
+        storage = Storage5()
+        result = list(storage.post_process({}))
+        print("✓ Test 3 PASSED: max_post_process_passes = 5 works")
+    except Exception as e:
+        print(f"✗ Test 3 FAILED: {e}")
+        return False
+    
+    # Test case 4: Default value (should be 5 according to original code)
+    class StorageDefault(ManifestStaticFilesStorage):
+        pass
+    
+    try:
+        storage = StorageDefault()
+        result = list(storage.post_process({}))
+        print("✓ Test 4 PASSED: Default max_post_process_passes works")
+    except Exception as e:
+        print(f"✗ Test 4 FAILED: {e}")
+        return False
+    
+    print("All edge case tests passed!")
+    return True
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
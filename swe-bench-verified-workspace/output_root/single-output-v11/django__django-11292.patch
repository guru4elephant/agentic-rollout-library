diff --git a/demonstration.py b/demonstration.py
new file mode 100644
index 0000000000..1286ebe0eb
--- /dev/null
+++ b/demonstration.py
@@ -0,0 +1,136 @@
+#!/usr/bin/env python3
+"""
+Demonstration of the --skip-checks option for management commands.
+
+This script demonstrates the feature requested in the GitHub issue:
+"Add --skip-checks option to management commands."
+
+The --skip-checks option allows users to skip system checks when running
+commands from the command line, which is useful in development environments
+where you want to move ahead with a task rather than getting sidetracked
+fixing system check issues.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+django.setup()
+
+def demonstrate_skip_checks():
+    """Demonstrate the --skip-checks functionality"""
+    
+    from django.core.management.base import BaseCommand
+    
+    print("=" * 60)
+    print("DEMONSTRATION: --skip-checks option for management commands")
+    print("=" * 60)
+    
+    # Create a test command that requires system checks
+    class TestCommand(BaseCommand):
+        help = 'Test command demonstrating --skip-checks option'
+        requires_system_checks = True
+        
+        def handle(self, *args, **options):
+            self.stdout.write("Command executed successfully!")
+            if options.get('skip_checks'):
+                self.stdout.write("✓ System checks were SKIPPED (--skip-checks used)")
+            else:
+                self.stdout.write("✓ System checks were PERFORMED")
+            return "Done"
+    
+    cmd = TestCommand()
+    
+    print("\n1. Testing command help output:")
+    print("-" * 40)
+    parser = cmd.create_parser('manage.py', 'testcmd')
+    help_text = parser.format_help()
+    # Extract just the option descriptions
+    lines = help_text.split('\n')
+    for line in lines:
+        if '--skip-checks' in line:
+            print(f"   {line.strip()}")
+    
+    print("\n2. Testing argument parsing:")
+    print("-" * 40)
+    
+    # Test without --skip-checks
+    args = parser.parse_args([])
+    print(f"   Without --skip-checks: skip_checks={args.skip_checks}")
+    
+    # Test with --skip-checks
+    args = parser.parse_args(['--skip-checks'])
+    print(f"   With --skip-checks:    skip_checks={args.skip_checks}")
+    
+    print("\n3. Testing with call_command (programmatic usage):")
+    print("-" * 40)
+    
+    from django.core.management import call_command
+    
+    # Test without skip_checks parameter
+    print("   call_command(cmd):")
+    result = call_command(cmd)
+    print(f"   Result: {result}")
+    
+    # Test with skip_checks=False
+    print("   call_command(cmd, skip_checks=False):")
+    result = call_command(cmd, skip_checks=False)
+    print(f"   Result: {result}")
+    
+    # Test with skip_checks=True
+    print("   call_command(cmd, skip_checks=True):")
+    result = call_command(cmd, skip_checks=True)
+    print(f"   Result: {result}")
+    
+    print("\n4. Testing integration with existing commands:")
+    print("-" * 40)
+    
+    # Test that --skip-checks is available in built-in commands
+    from django.core.management.commands.migrate import Command as MigrateCommand
+    from django.core.management.commands.check import Command as CheckCommand
+    
+    migrate_cmd = MigrateCommand()
+    check_cmd = CheckCommand()
+    
+    migrate_parser = migrate_cmd.create_parser('manage.py', 'migrate')
+    check_parser = check_cmd.create_parser('manage.py', 'check')
+    
+    migrate_has_skip_checks = any('--skip-checks' in action.option_strings 
+                                for action in migrate_parser._actions)
+    check_has_skip_checks = any('--skip-checks' in action.option_strings 
+                               for action in check_parser._actions)
+    
+    print(f"   migrate command has --skip-checks: {migrate_has_skip_checks}")
+    print(f"   check command has --skip-checks: {check_has_skip_checks}")
+    
+    print("\n" + "=" * 60)
+    print("SUMMARY: --skip-checks option is now available for all management commands!")
+    print("=" * 60)
+    print("✓ Available as a command-line argument: --skip-checks")
+    print("✓ Available programmatically via call_command(..., skip_checks=True)")
+    print("✓ Integrated into all built-in management commands")
+    print("✓ Shows up in help output for all commands")
+    print("✓ Maintains backward compatibility with existing skip_checks stealth option")
+    
+    return True
+
+if __name__ == '__main__':
+    demonstrate_skip_checks()
\ No newline at end of file
diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..118dc38a5c 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -286,6 +286,10 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )
         self.add_arguments(parser)
         return parser
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..fddea267ee
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""
+Final test to verify --skip-checks actually skips system checks.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+django.setup()
+
+def test_migrate_with_skip_checks():
+    """Test migrate command with --skip-checks"""
+    
+    from django.core.management import execute_from_command_line
+    
+    print("Testing migrate command with --skip-checks...")
+    
+    # Create a simple app that would trigger migrations
+    test_app_dir = 'test_app'
+    os.makedirs(test_app_dir, exist_ok=True)
+    
+    # Create __init__.py
+    with open(os.path.join(test_app_dir, '__init__.py'), 'w') as f:
+        f.write('')
+    
+    # Create models.py with a simple model
+    with open(os.path.join(test_app_dir, 'models.py'), 'w') as f:
+        f.write('''
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+''')
+    
+    # Add test app to settings
+    settings.INSTALLED_APPS.append('test_app')
+    
+    # Force Django to reload app registry
+    from django.apps import apps
+    apps.app_configs = {}
+    apps.apps_ready = False
+    apps.ready = False
+    apps.populate(settings.INSTALLED_APPS)
+    
+    # Test migrate without --skip-checks
+    print("\n1. Testing migrate without --skip-checks:")
+    try:
+        execute_from_command_line(['manage.py', 'migrate', 'test_app', '--verbosity', '0'])
+        print("Migrate executed successfully")
+    except Exception as e:
+        print(f"Migrate failed: {e}")
+    
+    # Test migrate with --skip-checks
+    print("\n2. Testing migrate with --skip-checks:")
+    try:
+        execute_from_command_line(['manage.py', 'migrate', 'test_app', '--skip-checks', '--verbosity', '0'])
+        print("Migrate with --skip-checks executed successfully")
+    except Exception as e:
+        print(f"Migrate with --skip-checks failed: {e}")
+
+if __name__ == '__main__':
+    test_migrate_with_skip_checks()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..90d1176c04
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,106 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce and test the --skip-checks option for management commands.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command, execute_from_command_line
+from django.core.management.base import BaseCommand
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+django.setup()
+
+class TestCommand(BaseCommand):
+    """Test command that requires system checks."""
+    help = 'Test command for --skip-checks option'
+    requires_system_checks = True
+
+    def handle(self, *args, **options):
+        self.stdout.write("Test command executed successfully")
+        if options.get('skip_checks'):
+            self.stdout.write("System checks were skipped")
+        else:
+            self.stdout.write("System checks were performed")
+
+def test_call_command_with_skip_checks():
+    """Test call_command with skip_checks option"""
+    print("Testing call_command with skip_checks option...")
+    
+    # Test without skip_checks (should perform checks)
+    print("\n1. Testing without skip_checks:")
+    call_command(TestCommand(), verbosity=2)
+    
+    # Test with skip_checks=False (should perform checks)
+    print("\n2. Testing with skip_checks=False:")
+    call_command(TestCommand(), verbosity=2, skip_checks=False)
+    
+    # Test with skip_checks=True (should skip checks)
+    print("\n3. Testing with skip_checks=True:")
+    call_command(TestCommand(), verbosity=2, skip_checks=True)
+
+def test_command_line_option():
+    """Test --skip-checks command line option"""
+    print("\nTesting --skip-checks command line option...")
+    
+    # Create a temporary management command for testing
+    test_app_dir = 'test_app'
+    os.makedirs(test_app_dir, exist_ok=True)
+    os.makedirs(os.path.join(test_app_dir, 'management'), exist_ok=True)
+    os.makedirs(os.path.join(test_app_dir, 'management', 'commands'), exist_ok=True)
+    
+    # Create a test command file
+    with open(os.path.join(test_app_dir, 'management', 'commands', 'testcmd.py'), 'w') as f:
+        f.write('''
+from django.core.management.base import BaseCommand
+
+class Command(BaseCommand):
+    help = 'Test command for --skip-checks option'
+    requires_system_checks = True
+
+    def handle(self, *args, **options):
+        self.stdout.write("Test command executed successfully")
+        if options.get("skip_checks"):
+            self.stdout.write("System checks were skipped via command line")
+        else:
+            self.stdout.write("System checks were performed")
+''')
+    
+    # Add test app to settings
+    settings.INSTALLED_APPS.append('test_app')
+    
+    # Test without --skip-checks
+    print("\n1. Testing without --skip-checks:")
+    try:
+        call_command('testcmd', verbosity=2)
+    except Exception as e:
+        print(f"Error (expected if checks fail): {e}")
+    
+    # Test with --skip-checks
+    print("\n2. Testing with --skip-checks:")
+    try:
+        call_command('testcmd', verbosity=2, skip_checks=True)
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == '__main__':
+    test_call_command_with_skip_checks()
+    test_command_line_option()
\ No newline at end of file
diff --git a/simple_verification.py b/simple_verification.py
new file mode 100644
index 0000000000..0c340d7db8
--- /dev/null
+++ b/simple_verification.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+"""
+Simple verification that --skip-checks option is properly integrated.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+django.setup()
+
+def verify_skip_checks_integration():
+    """Verify that --skip-checks is properly integrated into all commands"""
+    
+    from django.core.management.base import BaseCommand
+    
+    # Test that the option is added to the base parser
+    cmd = BaseCommand()
+    parser = cmd.create_parser('manage.py', 'testcmd')
+    
+    # Check if --skip-checks is in the parser
+    has_skip_checks = any('--skip-checks' in action.option_strings for action in parser._actions)
+    print(f"--skip-checks option found in parser: {has_skip_checks}")
+    
+    # Test parsing the option
+    args = parser.parse_args(['--skip-checks'])
+    print(f"Parsed skip_checks value: {args.skip_checks}")
+    
+    # Test help output contains the option
+    help_text = parser.format_help()
+    has_skip_checks_help = '--skip-checks' in help_text and 'Skip system checks' in help_text
+    print(f"--skip-checks help text found: {has_skip_checks_help}")
+    
+    # Test with a real command
+    from django.core.management.commands.migrate import Command as MigrateCommand
+    migrate_cmd = MigrateCommand()
+    migrate_parser = migrate_cmd.create_parser('manage.py', 'migrate')
+    
+    # Check if migrate command has --skip-checks
+    migrate_has_skip_checks = any('--skip-checks' in action.option_strings for action in migrate_parser._actions)
+    print(f"--skip-checks option found in migrate command: {migrate_has_skip_checks}")
+    
+    return has_skip_checks and has_skip_checks_help and migrate_has_skip_checks
+
+if __name__ == '__main__':
+    success = verify_skip_checks_integration()
+    print(f"\nIntegration test result: {'PASSED' if success else 'FAILED'}")
\ No newline at end of file
diff --git a/test_actual_usage.py b/test_actual_usage.py
new file mode 100644
index 0000000000..177db31983
--- /dev/null
+++ b/test_actual_usage.py
@@ -0,0 +1,70 @@
+#!/usr/bin/env python3
+"""
+Test actual usage of --skip-checks with a command that would fail system checks.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings with intentional issues that would fail system checks
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        # Add some settings that would cause system check warnings
+        MIDDLEWARE=[],  # Empty middleware would cause warnings
+    )
+
+django.setup()
+
+def test_check_command():
+    """Test the check command with and without --skip-checks"""
+    
+    from django.core.management import execute_from_command_line
+    
+    print("Testing check command...")
+    
+    # Test without --skip-checks (should show warnings/errors)
+    print("\n1. Testing check without --skip-checks:")
+    try:
+        execute_from_command_line(['manage.py', 'check'])
+        print("Check passed")
+    except SystemExit as e:
+        print(f"Check failed with exit code: {e.code}")
+    except Exception as e:
+        print(f"Check failed: {e}")
+    
+    # Test with --skip-checks (should skip checks and show help)
+    print("\n2. Testing check with --skip-checks:")
+    try:
+        execute_from_command_line(['manage.py', 'check', '--skip-checks'])
+        print("Check with --skip-checks passed")
+    except SystemExit as e:
+        print(f"Check with --skip-checks failed with exit code: {e.code}")
+    except Exception as e:
+        print(f"Check with --skip-checks failed: {e}")
+    
+    # Test with --skip-checks and --help
+    print("\n3. Testing check with --skip-checks --help:")
+    try:
+        execute_from_command_line(['manage.py', 'check', '--skip-checks', '--help'])
+        print("Help displayed successfully")
+    except SystemExit as e:
+        print(f"Help command exited with code: {e.code}")
+    except Exception as e:
+        print(f"Help command failed: {e}")
+
+if __name__ == '__main__':
+    test_check_command()
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/management/commands/testcmd.py b/test_app/management/commands/testcmd.py
new file mode 100644
index 0000000000..546e59830e
--- /dev/null
+++ b/test_app/management/commands/testcmd.py
@@ -0,0 +1,13 @@
+
+from django.core.management.base import BaseCommand
+
+class Command(BaseCommand):
+    help = 'Test command for --skip-checks option'
+    requires_system_checks = True
+
+    def handle(self, *args, **options):
+        self.stdout.write("Test command executed successfully")
+        if options.get("skip_checks"):
+            self.stdout.write("System checks were skipped via command line")
+        else:
+            self.stdout.write("System checks were performed")
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..9f1bd10962
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,5 @@
+
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
diff --git a/test_integration.py b/test_integration.py
new file mode 100644
index 0000000000..1275bcecd3
--- /dev/null
+++ b/test_integration.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""
+Integration test to verify --skip-checks works with actual management commands.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+django.setup()
+
+def test_with_migrate_command():
+    """Test --skip-checks with the migrate command"""
+    
+    print("Testing --skip-checks with migrate command...")
+    
+    # Test without --skip-checks (should fail if checks fail)
+    print("\n1. Testing without --skip-checks:")
+    try:
+        execute_from_command_line(['manage.py', 'migrate', '--help'])
+        print("Command executed successfully")
+    except Exception as e:
+        print(f"Command failed (expected): {e}")
+    
+    # Test with --skip-checks (should skip checks and show help)
+    print("\n2. Testing with --skip-checks:")
+    try:
+        execute_from_command_line(['manage.py', 'migrate', '--skip-checks', '--help'])
+        print("Command executed successfully with --skip-checks")
+    except Exception as e:
+        print(f"Command failed: {e}")
+
+if __name__ == '__main__':
+    test_with_migrate_command()
\ No newline at end of file
diff --git a/test_skip_checks.py b/test_skip_checks.py
new file mode 100644
index 0000000000..a4fc810fdb
--- /dev/null
+++ b/test_skip_checks.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify --skip-checks command line argument parsing.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management.base import BaseCommand
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+django.setup()
+
+def test_argument_parsing():
+    """Test that --skip-checks argument is properly parsed"""
+    
+    class TestCommand(BaseCommand):
+        help = 'Test command for --skip-checks option'
+        requires_system_checks = True
+
+        def handle(self, *args, **options):
+            self.stdout.write(f"skip_checks option value: {options.get('skip_checks', 'NOT_SET')}")
+            return "Command executed"
+
+    # Test the argument parsing
+    cmd = TestCommand()
+    parser = cmd.create_parser('manage.py', 'testcmd')
+    
+    print("Testing argument parser...")
+    
+    # Test without --skip-checks
+    args = parser.parse_args([])
+    print(f"Without --skip-checks: skip_checks={args.skip_checks}")
+    
+    # Test with --skip-checks
+    args = parser.parse_args(['--skip-checks'])
+    print(f"With --skip-checks: skip_checks={args.skip_checks}")
+    
+    # Test help output to see if --skip-checks is included
+    print("\nHelp output:")
+    parser.print_help()
+
+if __name__ == '__main__':
+    test_argument_parsing()
\ No newline at end of file
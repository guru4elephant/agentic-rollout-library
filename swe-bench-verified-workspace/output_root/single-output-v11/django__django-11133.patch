diff --git a/django/http/response.py b/django/http/response.py
index 6a84e193ba..5602d6c10f 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -233,6 +233,9 @@ class HttpResponseBase:
             return bytes(value)
         if isinstance(value, str):
             return bytes(value.encode(self.charset))
+        # Handle memoryview objects
+        if isinstance(value, memoryview):
+            return bytes(value)
         # Handle non-string types.
         return str(value).encode(self.charset)
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4c4095138f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+# Test with string content
+print("Testing with string content:")
+response = HttpResponse("My Content")
+print(f"Response content: {response.content}")
+print(f"Expected: b'My Content'")
+print(f"Match: {response.content == b'My Content'}")
+print()
+
+# Test with bytes content
+print("Testing with bytes content:")
+response = HttpResponse(b"My Content")
+print(f"Response content: {response.content}")
+print(f"Expected: b'My Content'")
+print(f"Match: {response.content == b'My Content'}")
+print()
+
+# Test with memoryview content (the issue)
+print("Testing with memoryview content:")
+try:
+    response = HttpResponse(memoryview(b"My Content"))
+    print(f"Response content: {response.content}")
+    print(f"Expected: b'My Content'")
+    print(f"Match: {response.content == b'My Content'}")
+    print(f"Actual type: {type(response.content)}")
+except Exception as e:
+    print(f"Error: {e}")
+print()
+
+# Let's also test what happens when we call str() on memoryview
+print("Testing str() on memoryview:")
+mv = memoryview(b"My Content")
+print(f"str(memoryview(b'My Content')): {str(mv)}")
+print(f"bytes(memoryview(b'My Content')): {bytes(mv)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3347126f7f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+# Test edge cases with memoryview
+print("Testing edge cases with memoryview:")
+
+# Empty memoryview
+print("1. Empty memoryview:")
+response = HttpResponse(memoryview(b""))
+print(f"Response content: {response.content}")
+print(f"Expected: b''")
+print(f"Match: {response.content == b''}")
+print()
+
+# Memoryview with special characters
+print("2. Memoryview with special characters:")
+response = HttpResponse(memoryview(b"Hello\x00World\xff"))
+print(f"Response content: {response.content}")
+expected = b"Hello\x00World\xff"
+print(f"Expected: {expected}")
+print(f"Match: {response.content == expected}")
+print()
+
+# Memoryview from a bytearray
+print("3. Memoryview from bytearray:")
+ba = bytearray(b"Bytearray content")
+response = HttpResponse(memoryview(ba))
+print(f"Response content: {response.content}")
+expected = b"Bytearray content"
+print(f"Expected: {expected}")
+print(f"Match: {response.content == expected}")
+print()
+
+# Memoryview slice
+print("4. Memoryview slice:")
+mv = memoryview(b"Full content")
+response = HttpResponse(mv[5:8])  # Should be "con"
+print(f"Response content: {response.content}")
+expected = b"con"
+print(f"Expected: {expected}")
+print(f"Match: {response.content == expected}")
+print()
+
+# Test that regular types still work
+print("5. Testing regular types still work:")
+response = HttpResponse(123)
+print(f"Integer 123: {response.content}")
+response = HttpResponse(3.14)
+print(f"Float 3.14: {response.content}")
+response = HttpResponse([1, 2, 3])
+print(f"List [1,2,3]: {response.content}")
\ No newline at end of file
diff --git a/verify_slice.py b/verify_slice.py
new file mode 100644
index 0000000000..00bf0ac41f
--- /dev/null
+++ b/verify_slice.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+# Test the memoryview slice behavior
+mv = memoryview(b"Full content")
+print(f"Original: {bytes(mv)}")
+print(f"Slice [5:8]: {bytes(mv[5:8])}")
+print(f"Expected: b'con'")
+print(f"Match: {bytes(mv[5:8]) == b'con'}")
+
+# Let's also check the exact indices
+print(f"Index 5: {chr(mv[5])} (should be 'c')")
+print(f"Index 6: {chr(mv[6])} (should be 'o')") 
+print(f"Index 7: {chr(mv[7])} (should be 'n')")
+print(f"Index 8: {chr(mv[8])} (should be 't')")
\ No newline at end of file
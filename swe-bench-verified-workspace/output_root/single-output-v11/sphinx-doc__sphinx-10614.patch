diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..d1aacce7c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,169 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the SVG inheritance diagram link issue.
+"""
+
+import os
+import tempfile
+import shutil
+import subprocess
+
+def create_test_project():
+    """Create a test project structure similar to the issue report."""
+    
+    # Create temporary directory
+    test_dir = tempfile.mkdtemp(prefix="sphinx_svg_test_")
+    print(f"Creating test project in: {test_dir}")
+    
+    # Create project structure
+    docs_source = os.path.join(test_dir, "docs_source")
+    docs_build = os.path.join(test_dir, "docs_build")
+    my_package = os.path.join(test_dir, "my_package")
+    
+    os.makedirs(docs_source)
+    os.makedirs(docs_build)
+    os.makedirs(my_package)
+    
+    # Add the test directory to Python path for imports
+    with open(os.path.join(docs_source, "conf.py"), "w") as f:
+        f.write(f'''
+import sys
+sys.path.insert(0, '{test_dir}')
+
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.graphviz',
+    'sphinx.ext.inheritance_diagram'
+]
+
+graphviz_output_format = 'svg'
+''')
+    
+    # conf.py already created above
+    
+    # Create index.rst in root
+    index_content = '''
+Test Documentation
+==================
+
+.. automodule:: my_package
+   :members:
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    
+    with open(os.path.join(docs_source, "index.rst"), "w") as f:
+        f.write(index_content)
+    
+    # Create index.rst in my_package directory
+    package_index_content = '''
+My Package
+==========
+
+.. automodule:: my_package
+   :members:
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    
+    os.makedirs(os.path.join(docs_source, "my_package"))
+    with open(os.path.join(docs_source, "my_package", "index.rst"), "w") as f:
+        f.write(package_index_content)
+    
+    # Create Python package with classes
+    init_content = '''
+class MyClass1:
+    """First test class."""
+    pass
+
+class MyClass2(MyClass1):
+    """Second test class inheriting from first."""
+    pass
+'''
+    
+    with open(os.path.join(my_package, "__init__.py"), "w") as f:
+        f.write(init_content)
+    
+    return test_dir, docs_source, docs_build
+
+def build_docs(docs_source, docs_build):
+    """Build the Sphinx documentation."""
+    print("Building documentation...")
+    try:
+        result = subprocess.run([
+            "sphinx-build", "-b", "html", docs_source, docs_build
+        ], capture_output=True, text=True, cwd="/testbed")
+        
+        print("STDOUT:")
+        print(result.stdout)
+        if result.stderr:
+            print("STDERR:")
+            print(result.stderr)
+        
+        return result.returncode == 0
+    except Exception as e:
+        print(f"Error building docs: {e}")
+        return False
+
+def analyze_svg_links(docs_build):
+    """Analyze the SVG files for link issues."""
+    print("\nAnalyzing SVG files...")
+    
+    # Find all SVG files
+    svg_files = []
+    for root, dirs, files in os.walk(docs_build):
+        for file in files:
+            if file.endswith('.svg'):
+                svg_files.append(os.path.join(root, file))
+    
+    for svg_file in svg_files:
+        print(f"\nAnalyzing {svg_file}")
+        try:
+            with open(svg_file, 'r') as f:
+                content = f.read()
+            
+            print(f"SVG content length: {len(content)}")
+            
+            # Look for links in SVG
+            import re
+            links = re.findall(r'href="([^"]*)"', content)
+            if links:
+                print("Found links:")
+                for link in links:
+                    print(f"  {link}")
+            else:
+                print("No links found in SVG")
+                
+            # Look for any URLs or references
+            urls = re.findall(r'"(\.\./[^"]*)"', content)
+            if urls:
+                print("Found URLs with ../ prefix:")
+                for url in urls:
+                    print(f"  {url}")
+                    
+        except Exception as e:
+            print(f"Error reading SVG file: {e}")
+
+def main():
+    """Main function to reproduce the issue."""
+    test_dir, docs_source, docs_build = create_test_project()
+    
+    try:
+        # Build documentation
+        success = build_docs(docs_source, docs_build)
+        
+        if success:
+            print("Documentation built successfully!")
+            analyze_svg_links(docs_build)
+        else:
+            print("Failed to build documentation")
+            
+    finally:
+        # Clean up
+        shutil.rmtree(test_dir)
+        print(f"Cleaned up test directory: {test_dir}")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py
index 6e3985512..48ac55d5e 100644
--- a/sphinx/ext/inheritance_diagram.py
+++ b/sphinx/ext/inheritance_diagram.py
@@ -412,15 +412,9 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag
     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)
     for child in pending_xrefs:
         if child.get('refuri') is not None:
-            if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = "../" + child.get('refuri')
-            else:
-                urls[child['reftitle']] = child.get('refuri')
+            urls[child['reftitle']] = child.get('refuri')
         elif child.get('refid') is not None:
-            if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')
-            else:
-                urls[child['reftitle']] = '#' + child.get('refid')
+            urls[child['reftitle']] = current_filename + '#' + child.get('refid')
 
     dotcode = graph.generate_dot(name, urls, env=self.builder.env)
     render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance',
diff --git a/test_both_formats.py b/test_both_formats.py
new file mode 100644
index 000000000..2b5c21472
--- /dev/null
+++ b/test_both_formats.py
@@ -0,0 +1,216 @@
+#!/usr/bin/env python3
+"""
+Test script to verify both SVG and PNG inheritance diagram links work correctly.
+"""
+
+import os
+import tempfile
+import shutil
+import subprocess
+
+def create_test_project(format_type):
+    """Create a test project structure."""
+    
+    # Create temporary directory
+    test_dir = tempfile.mkdtemp(prefix=f"sphinx_{format_type}_test_")
+    print(f"Creating test project in: {test_dir}")
+    
+    # Create project structure
+    docs_source = os.path.join(test_dir, "docs_source")
+    docs_build = os.path.join(test_dir, "docs_build")
+    my_package = os.path.join(test_dir, "my_package")
+    
+    os.makedirs(docs_source)
+    os.makedirs(docs_build)
+    os.makedirs(my_package)
+    
+    # Add the test directory to Python path for imports
+    with open(os.path.join(docs_source, "conf.py"), "w") as f:
+        f.write(f'''
+import sys
+sys.path.insert(0, '{test_dir}')
+
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.graphviz',
+    'sphinx.ext.inheritance_diagram'
+]
+
+graphviz_output_format = '{format_type.lower()}'
+''')
+    
+    # Create index.rst in root
+    index_content = '''
+Test Documentation
+==================
+
+.. automodule:: my_package
+   :members:
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    
+    with open(os.path.join(docs_source, "index.rst"), "w") as f:
+        f.write(index_content)
+    
+    # Create Python package with classes
+    init_content = '''
+class MyClass1:
+    """First test class."""
+    pass
+
+class MyClass2(MyClass1):
+    """Second test class inheriting from first."""
+    pass
+'''
+    
+    with open(os.path.join(my_package, "__init__.py"), "w") as f:
+        f.write(init_content)
+    
+    return test_dir, docs_source, docs_build
+
+def build_docs(docs_source, docs_build):
+    """Build the Sphinx documentation."""
+    print("Building documentation...")
+    try:
+        result = subprocess.run([
+            "sphinx-build", "-b", "html", docs_source, docs_build
+        ], capture_output=True, text=True, cwd="/testbed")
+        
+        print("STDOUT:")
+        print(result.stdout)
+        if result.stderr:
+            print("STDERR:")
+            print(result.stderr)
+        
+        return result.returncode == 0
+    except Exception as e:
+        print(f"Error building docs: {e}")
+        return False
+
+def analyze_links(docs_build, format_type):
+    """Analyze the files for link issues."""
+    print(f"\nAnalyzing {format_type} files...")
+    
+    # Find all relevant files
+    files = []
+    for root, dirs, files_list in os.walk(docs_build):
+        for file in files_list:
+            if format_type == 'SVG' and file.endswith('.svg'):
+                files.append(os.path.join(root, file))
+            elif format_type == 'PNG' and file.endswith('.png'):
+                files.append(os.path.join(root, file))
+    
+    for file_path in files:
+        print(f"\nAnalyzing {file_path}")
+        
+        if format_type == 'SVG':
+            try:
+                with open(file_path, 'r') as f:
+                    content = f.read()
+                
+                print(f"SVG content length: {len(content)}")
+                
+                # Look for links in SVG
+                import re
+                links = re.findall(r'href="([^"]*)"', content)
+                if links:
+                    print("Found links:")
+                    for link in links:
+                        print(f"  {link}")
+                        
+                        # Check if links are correct
+                        if link.startswith('../../'):
+                            print(f"    ERROR: Link has incorrect ../../ prefix!")
+                            return False
+                        elif link.startswith('../'):
+                            print(f"    OK: Link has correct ../ prefix")
+                        else:
+                            print(f"    WARNING: Link doesn't have expected prefix")
+                else:
+                    print("No links found in SVG")
+                    
+            except Exception as e:
+                print(f"Error reading SVG file: {e}")
+                return False
+        
+        elif format_type == 'PNG':
+            # For PNG, we need to check the map file
+            map_file = file_path + '.map'
+            if os.path.exists(map_file):
+                try:
+                    with open(map_file, 'r') as f:
+                        content = f.read()
+                    
+                    print(f"Map content length: {len(content)}")
+                    
+                    # Look for links in map file
+                    import re
+                    links = re.findall(r'href="([^"]*)"', content)
+                    if links:
+                        print("Found links:")
+                        for link in links:
+                            print(f"  {link}")
+                            
+                            # PNG links should not have ../ prefix
+                            if link.startswith('../'):
+                                print(f"    ERROR: PNG link has ../ prefix!")
+                                return False
+                            else:
+                                print(f"    OK: PNG link has correct format")
+                    else:
+                        print("No links found in map file")
+                        
+                except Exception as e:
+                    print(f"Error reading map file: {e}")
+                    return False
+    
+    return True
+
+def test_format(format_type):
+    """Test a specific format."""
+    test_dir, docs_source, docs_build = create_test_project(format_type)
+    
+    try:
+        # Build documentation
+        success = build_docs(docs_source, docs_build)
+        
+        if success:
+            print("Documentation built successfully!")
+            # Analyze links
+            links_correct = analyze_links(docs_build, format_type)
+            
+            if links_correct:
+                print(f"\n✓ SUCCESS: {format_type} links are correctly formatted!")
+            else:
+                print(f"\n✗ FAILURE: {format_type} links are incorrect!")
+                
+            return links_correct
+        else:
+            print("Failed to build documentation")
+            return False
+            
+    finally:
+        # Clean up
+        shutil.rmtree(test_dir)
+        print(f"Cleaned up test directory: {test_dir}")
+
+def main():
+    """Main function to test both formats."""
+    print("Testing SVG format...")
+    svg_success = test_format('SVG')
+    
+    print("\nTesting PNG format...")
+    png_success = test_format('PNG')
+    
+    if svg_success and png_success:
+        print("\n✓ SUCCESS: Both SVG and PNG formats work correctly!")
+        return True
+    else:
+        print("\n✗ FAILURE: One or both formats have issues!")
+        return False
+
+if __name__ == "__main__":
+    success = main()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..f0ba5eb2e
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,182 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the specific GitHub issue is fixed.
+This test simulates the exact scenario described in the issue.
+"""
+
+import os
+import tempfile
+import shutil
+import subprocess
+
+def create_test_project():
+    """Create a test project structure similar to the GitHub issue."""
+    
+    # Create temporary directory
+    test_dir = tempfile.mkdtemp(prefix="sphinx_github_issue_test_")
+    print(f"Creating test project in: {test_dir}")
+    
+    # Create project structure exactly as described in the issue
+    docs_source = os.path.join(test_dir, "docs_source")
+    docs_build = os.path.join(test_dir, "docs_build")
+    my_package = os.path.join(test_dir, "my_package")
+    
+    os.makedirs(docs_source)
+    os.makedirs(docs_build)
+    os.makedirs(my_package)
+    
+    # Add the test directory to Python path for imports
+    with open(os.path.join(docs_source, "conf.py"), "w") as f:
+        f.write(f'''
+import sys
+sys.path.insert(0, '{test_dir}')
+
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.graphviz',
+    'sphinx.ext.inheritance_diagram'
+]
+
+graphviz_output_format = 'svg'
+''')
+    
+    # Create index.rst in root (similar to the issue)
+    index_content = '''
+Test Documentation
+==================
+
+.. automodule:: my_package
+   :members:
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    
+    with open(os.path.join(docs_source, "index.rst"), "w") as f:
+        f.write(index_content)
+    
+    # Create index.rst in my_package directory (nested, as described in issue)
+    package_index_content = '''
+My Package
+==========
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    
+    os.makedirs(os.path.join(docs_source, "my_package"))
+    with open(os.path.join(docs_source, "my_package", "index.rst"), "w") as f:
+        f.write(package_index_content)
+    
+    # Create Python package with classes (similar to issue)
+    init_content = '''
+class MyClass1:
+    """First test class."""
+    pass
+
+class MyClass2(MyClass1):
+    """Second test class inheriting from first."""
+    pass
+'''
+    
+    with open(os.path.join(my_package, "__init__.py"), "w") as f:
+        f.write(init_content)
+    
+    return test_dir, docs_source, docs_build
+
+def build_docs(docs_source, docs_build):
+    """Build the Sphinx documentation."""
+    print("Building documentation...")
+    try:
+        result = subprocess.run([
+            "sphinx-build", "-b", "html", docs_source, docs_build
+        ], capture_output=True, text=True, cwd="/testbed")
+        
+        print("STDOUT:")
+        print(result.stdout)
+        if result.stderr:
+            print("STDERR:")
+            print(result.stderr)
+        
+        return result.returncode == 0
+    except Exception as e:
+        print(f"Error building docs: {e}")
+        return False
+
+def analyze_svg_links(docs_build):
+    """Analyze the SVG files for the specific issue."""
+    print("\nAnalyzing SVG files for GitHub issue...")
+    
+    # Find SVG files in both root and nested locations
+    svg_files = []
+    for root, dirs, files in os.walk(docs_build):
+        for file in files:
+            if file.endswith('.svg'):
+                svg_files.append(os.path.join(root, file))
+    
+    issue_fixed = True
+    
+    for svg_file in svg_files:
+        print(f"\nAnalyzing {svg_file}")
+        try:
+            with open(svg_file, 'r') as f:
+                content = f.read()
+            
+            # Look for links in SVG
+            import re
+            links = re.findall(r'href="([^"]*)"', content)
+            if links:
+                print("Found links:")
+                for link in links:
+                    print(f"  {link}")
+                    
+                    # The GitHub issue specifically mentioned that links with ../../ prefix
+                    # were causing 404 errors when SVG files were in nested directories
+                    if link.startswith('../../'):
+                        print(f"    ✗ BUG: Link has incorrect ../../ prefix (this was the original issue)!")
+                        issue_fixed = False
+                    elif link.startswith('../'):
+                        print(f"    ✓ FIXED: Link has correct ../ prefix")
+                    else:
+                        print(f"    ? UNEXPECTED: Link doesn't have expected prefix")
+            else:
+                print("No links found in SVG")
+                
+        except Exception as e:
+            print(f"Error reading SVG file: {e}")
+            issue_fixed = False
+    
+    return issue_fixed
+
+def main():
+    """Main function to test the GitHub issue fix."""
+    test_dir, docs_source, docs_build = create_test_project()
+    
+    try:
+        # Build documentation
+        success = build_docs(docs_source, docs_build)
+        
+        if success:
+            print("Documentation built successfully!")
+            # Analyze SVG links for the specific issue
+            issue_fixed = analyze_svg_links(docs_build)
+            
+            if issue_fixed:
+                print("\n✓ SUCCESS: GitHub issue is FIXED! SVG links are correctly formatted!")
+                print("The 404 errors described in the issue should no longer occur.")
+            else:
+                print("\n✗ FAILURE: GitHub issue is NOT fixed! SVG links still have incorrect prefixes.")
+                
+            return issue_fixed
+        else:
+            print("Failed to build documentation")
+            return False
+            
+    finally:
+        # Clean up
+        shutil.rmtree(test_dir)
+        print(f"Cleaned up test directory: {test_dir}")
+
+if __name__ == "__main__":
+    success = main()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_svg_links.py b/test_svg_links.py
new file mode 100644
index 000000000..913a10542
--- /dev/null
+++ b/test_svg_links.py
@@ -0,0 +1,180 @@
+#!/usr/bin/env python3
+"""
+Test script to verify SVG inheritance diagram links work correctly.
+This simulates the exact scenario described in the GitHub issue.
+"""
+
+import os
+import tempfile
+import shutil
+import subprocess
+
+def create_test_project():
+    """Create a test project structure similar to the issue report."""
+    
+    # Create temporary directory
+    test_dir = tempfile.mkdtemp(prefix="sphinx_svg_test_")
+    print(f"Creating test project in: {test_dir}")
+    
+    # Create project structure
+    docs_source = os.path.join(test_dir, "docs_source")
+    docs_build = os.path.join(test_dir, "docs_build")
+    my_package = os.path.join(test_dir, "my_package")
+    
+    os.makedirs(docs_source)
+    os.makedirs(docs_build)
+    os.makedirs(my_package)
+    
+    # Add the test directory to Python path for imports
+    with open(os.path.join(docs_source, "conf.py"), "w") as f:
+        f.write(f'''
+import sys
+sys.path.insert(0, '{test_dir}')
+
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.graphviz',
+    'sphinx.ext.inheritance_diagram'
+]
+
+graphviz_output_format = 'svg'
+''')
+    
+    # Create index.rst in root
+    index_content = '''
+Test Documentation
+==================
+
+.. automodule:: my_package
+   :members:
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    
+    with open(os.path.join(docs_source, "index.rst"), "w") as f:
+        f.write(index_content)
+    
+    # Create index.rst in my_package directory (nested)
+    package_index_content = '''
+My Package
+==========
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+'''
+    
+    os.makedirs(os.path.join(docs_source, "my_package"))
+    with open(os.path.join(docs_source, "my_package", "index.rst"), "w") as f:
+        f.write(package_index_content)
+    
+    # Create Python package with classes
+    init_content = '''
+class MyClass1:
+    """First test class."""
+    pass
+
+class MyClass2(MyClass1):
+    """Second test class inheriting from first."""
+    pass
+'''
+    
+    with open(os.path.join(my_package, "__init__.py"), "w") as f:
+        f.write(init_content)
+    
+    return test_dir, docs_source, docs_build
+
+def build_docs(docs_source, docs_build):
+    """Build the Sphinx documentation."""
+    print("Building documentation...")
+    try:
+        result = subprocess.run([
+            "sphinx-build", "-b", "html", docs_source, docs_build
+        ], capture_output=True, text=True, cwd="/testbed")
+        
+        print("STDOUT:")
+        print(result.stdout)
+        if result.stderr:
+            print("STDERR:")
+            print(result.stderr)
+        
+        return result.returncode == 0
+    except Exception as e:
+        print(f"Error building docs: {e}")
+        return False
+
+def analyze_svg_links(docs_build):
+    """Analyze the SVG files for link issues."""
+    print("\nAnalyzing SVG files...")
+    
+    # Find all SVG files
+    svg_files = []
+    for root, dirs, files in os.walk(docs_build):
+        for file in files:
+            if file.endswith('.svg'):
+                svg_files.append(os.path.join(root, file))
+    
+    for svg_file in svg_files:
+        print(f"\nAnalyzing {svg_file}")
+        try:
+            with open(svg_file, 'r') as f:
+                content = f.read()
+            
+            print(f"SVG content length: {len(content)}")
+            
+            # Look for links in SVG
+            import re
+            links = re.findall(r'href="([^"]*)"', content)
+            if links:
+                print("Found links:")
+                for link in links:
+                    print(f"  {link}")
+                    
+                    # Check if links are correct
+                    if link.startswith('../../'):
+                        print(f"    ERROR: Link has incorrect ../../ prefix!")
+                        return False
+                    elif link.startswith('../'):
+                        print(f"    OK: Link has correct ../ prefix")
+                    else:
+                        print(f"    WARNING: Link doesn't have expected prefix")
+            else:
+                print("No links found in SVG")
+                
+        except Exception as e:
+            print(f"Error reading SVG file: {e}")
+            return False
+    
+    return True
+
+def main():
+    """Main function to test the SVG link fix."""
+    test_dir, docs_source, docs_build = create_test_project()
+    
+    try:
+        # Build documentation
+        success = build_docs(docs_source, docs_build)
+        
+        if success:
+            print("Documentation built successfully!")
+            # Analyze SVG links
+            links_correct = analyze_svg_links(docs_build)
+            
+            if links_correct:
+                print("\n✓ SUCCESS: SVG links are correctly formatted!")
+            else:
+                print("\n✗ FAILURE: SVG links are still incorrect!")
+                
+            return links_correct
+        else:
+            print("Failed to build documentation")
+            return False
+            
+    finally:
+        # Clean up
+        shutil.rmtree(test_dir)
+        print(f"Cleaned up test directory: {test_dir}")
+
+if __name__ == "__main__":
+    success = main()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a3dc56211..c76147de3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
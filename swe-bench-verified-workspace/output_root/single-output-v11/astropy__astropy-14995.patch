diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..6f9d9f1078 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -513,18 +513,25 @@ class NDArithmeticMixin:
             ``handle_mask`` must create (and copy) the returned mask.
         """
         # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+        if handle_mask is None:
+            return None
+        
+        # Check if operand has a mask attribute and if it's not None
+        operand_has_mask = operand is not None and hasattr(operand, 'mask') and operand.mask is not None
+        
+        if self.mask is None and not operand_has_mask:
             return None
-        elif self.mask is None and operand is not None:
+        elif self.mask is None and operand_has_mask:
             # Make a copy so there is no reference in the result.
             return deepcopy(operand.mask)
-        elif operand is None:
+        elif self.mask is not None and not operand_has_mask:
+            # Operand is None, scalar, or has no mask, return self.mask
             return deepcopy(self.mask)
-        else:
+        elif self.mask is not None and operand_has_mask:
             # Now lets calculate the resulting mask (operation enforces copy)
             return handle_mask(self.mask, operand.mask, **kwds)
+        else:
+            return None
 
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
         """
diff --git a/pyproject.toml b/pyproject.toml
index 15bb49f22b..dc9c3c5f37 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "cython==0.29.34",
             "oldest-supported-numpy",
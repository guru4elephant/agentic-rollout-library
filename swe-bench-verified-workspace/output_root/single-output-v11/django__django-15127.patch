diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py
index 01422066a6..a46c57cd53 100644
--- a/django/contrib/messages/storage/base.py
+++ b/django/contrib/messages/storage/base.py
@@ -38,7 +38,7 @@ class Message:
 
     @property
     def level_tag(self):
-        return LEVEL_TAGS.get(self.level, '')
+        return utils.get_level_tags().get(self.level, '')
 
 
 class BaseStorage:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5888bc56ac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""
+Reproduce the issue with LEVEL_TAGS not being updated when using @override_settings
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test.utils import override_settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.auth_tests.settings')
+sys.path.insert(0, '/testbed')
+
+# Setup Django
+django.setup()
+
+# Import after Django setup
+from django.contrib.messages.storage.base import Message
+
+def test_level_tags_with_override_settings():
+    """Test that demonstrates the issue"""
+    
+    print("Testing LEVEL_TAGS behavior with @override_settings...")
+    
+    # Default behavior
+    message = Message(20, "Test message")  # INFO level
+    print(f"Default level_tag for INFO (20): '{message.level_tag}'")
+    
+    # Test with override_settings
+    with override_settings(MESSAGE_TAGS={20: 'custom-info'}):
+        message2 = Message(20, "Test message with override")
+        print(f"With override_settings, level_tag for INFO (20): '{message2.level_tag}'")
+        print("ISSUE: The level_tag should be 'custom-info' but it's empty!")
+        
+        # Let's also check what the actual LEVEL_TAGS contains
+        from django.contrib.messages.storage.base import LEVEL_TAGS
+        print(f"LEVEL_TAGS constant: {LEVEL_TAGS}")
+        
+        # Check what utils.get_level_tags() returns
+        from django.contrib.messages.utils import get_level_tags
+        current_tags = get_level_tags()
+        print(f"utils.get_level_tags() returns: {current_tags}")
+        
+        # The issue: LEVEL_TAGS is not updated but get_level_tags() returns correct value
+        if 20 in current_tags and current_tags[20] == 'custom-info':
+            print("utils.get_level_tags() correctly returns the updated tags")
+        else:
+            print("ERROR: utils.get_level_tags() also not working correctly")
+
+if __name__ == '__main__':
+    test_level_tags_with_override_settings()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..7f167b1895
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the LEVEL_TAGS fix works correctly
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test.utils import override_settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.auth_tests.settings')
+sys.path.insert(0, '/testbed')
+
+# Setup Django
+django.setup()
+
+# Import after Django setup
+from django.contrib.messages.storage.base import Message
+from django.contrib.messages.utils import get_level_tags
+
+def test_level_tags_fix():
+    """Test that the LEVEL_TAGS fix works correctly"""
+    
+    print("Testing LEVEL_TAGS fix...")
+    
+    # Test 1: Default behavior
+    message = Message(20, "Test message")  # INFO level
+    assert message.level_tag == 'info', f"Expected 'info', got '{message.level_tag}'"
+    print("✓ Default level_tag works correctly")
+    
+    # Test 2: With override_settings
+    with override_settings(MESSAGE_TAGS={20: 'custom-info'}):
+        message2 = Message(20, "Test message with override")
+        assert message2.level_tag == 'custom-info', f"Expected 'custom-info', got '{message2.level_tag}'"
+        print("✓ override_settings works correctly")
+        
+        # Test that utils.get_level_tags() also returns the correct value
+        current_tags = get_level_tags()
+        assert current_tags[20] == 'custom-info', f"Expected 'custom-info', got '{current_tags[20]}'"
+        print("✓ utils.get_level_tags() works correctly")
+    
+    # Test 3: Back to default after context manager
+    message3 = Message(20, "Test message after override")
+    assert message3.level_tag == 'info', f"Expected 'info', got '{message3.level_tag}'"
+    print("✓ Settings revert correctly after override")
+    
+    # Test 4: Test with multiple levels
+    with override_settings(MESSAGE_TAGS={
+        10: 'custom-debug',
+        25: 'custom-success', 
+        40: 'custom-error'
+    }):
+        debug_msg = Message(10, "Debug message")
+        success_msg = Message(25, "Success message")
+        error_msg = Message(40, "Error message")
+        
+        assert debug_msg.level_tag == 'custom-debug'
+        assert success_msg.level_tag == 'custom-success'
+        assert error_msg.level_tag == 'custom-error'
+        print("✓ Multiple level overrides work correctly")
+    
+    # Test 5: Test unknown level
+    unknown_msg = Message(99, "Unknown level message")
+    assert unknown_msg.level_tag == '', f"Expected empty string, got '{unknown_msg.level_tag}'"
+    print("✓ Unknown level returns empty string correctly")
+    
+    print("\n✅ All tests passed! The LEVEL_TAGS fix is working correctly.")
+
+if __name__ == '__main__':
+    test_level_tags_fix()
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5289ef34a0..913ddb7575 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -498,6 +498,19 @@ def safeseq(value):
     return [mark_safe(obj) for obj in value]
 
 
+@register.filter(is_safe=True)
+def escapeseq(value):
+    """
+    An "escape" filter for sequences. Escape each element in the sequence,
+    individually. Return a list with the results.
+    """
+    from django.utils.html import conditional_escape
+    try:
+        return [conditional_escape(obj) for obj in value]
+    except TypeError:  # Fail silently if value isn't iterable.
+        return value
+
+
 @register.filter(is_safe=True)
 @stringfilter
 def striptags(value):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..d4aa36af26
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            }
+        ]
+    )
+    django.setup()
+
+from django.template import Template, Context
+
+def test_github_issue_example():
+    """Test the exact example from the GitHub issue"""
+    template_string = '{{ some_list|escapeseq|join:"," }}'
+    
+    # Test with autoescape off as mentioned in the issue
+    template_string_autoescape_off = '{% autoescape off %}{{ some_list|escapeseq|join:"," }}{% endautoescape %}'
+    
+    test_data = ['&', '<', '>', '"', "'"]
+    
+    try:
+        # Test with autoescape on (default)
+        template1 = Template(template_string)
+        context = Context({'some_list': test_data})
+        result1 = template1.render(context)
+        print(f"Autoescape on: {result1}")
+        
+        # Test with autoescape off (as mentioned in the issue)
+        template2 = Template(template_string_autoescape_off)
+        result2 = template2.render(context)
+        print(f"Autoescape off: {result2}")
+        
+        # Expected result: each item should be escaped
+        expected = "&amp;,&lt;,&gt;,&quot;,&#x27;"
+        if result1 == expected and result2 == expected:
+            print("‚úì GitHub issue example: PASSED")
+            return True
+        else:
+            print(f"‚úó GitHub issue example: FAILED")
+            print(f"  Expected: {expected}")
+            print(f"  Got (autoescape on): {result1}")
+            print(f"  Got (autoescape off): {result2}")
+            return False
+            
+    except Exception as e:
+        print(f"‚úó GitHub issue example: ERROR - {e}")
+        return False
+
+if __name__ == "__main__":
+    success = test_github_issue_example()
+    if success:
+        print("\nüéâ All tests passed! The escapeseq filter is working correctly.")
+    else:
+        print("\n‚ùå Tests failed.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..279881a6f2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            }
+        ]
+    )
+    django.setup()
+
+from django.template import Template, Context
+from django.template.defaultfilters import register
+
+# Test the expected behavior of escapeseq
+def test_escapeseq_behavior():
+    # Test with autoescape on (default)
+    template_string1 = '{{ some_list|escapeseq|join:"," }}'
+    template_string2 = '{% autoescape off %}{{ some_list|escapeseq|join:"," }}{% endautoescape %}'
+    
+    test_data = ['&', '<', '>', '"', "'", "test"]
+    
+    try:
+        # Test with autoescape on
+        template1 = Template(template_string1)
+        context = Context({'some_list': test_data})
+        result1 = template1.render(context)
+        print(f"With autoescape on: {result1}")
+        
+        # Test with autoescape off
+        template2 = Template(template_string2)
+        result2 = template2.render(context)
+        print(f"With autoescape off: {result2}")
+        
+        # Test with safe data
+        from django.utils.safestring import mark_safe
+        safe_data = [mark_safe('&'), '<', '>']
+        context_safe = Context({'some_list': safe_data})
+        result3 = template1.render(context_safe)
+        print(f"With safe data: {result3}")
+        
+        print("All tests passed!")
+        
+    except Exception as e:
+        print(f"Error: {e}")
+        import traceback
+        traceback.print_exc()
+
+if __name__ == "__main__":
+    test_escapeseq_behavior()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2b04f506dc
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            }
+        ]
+    )
+    django.setup()
+
+from django.template import Template, Context
+from django.utils.safestring import mark_safe
+
+def test_edge_cases():
+    test_cases = [
+        # Empty list
+        ("Empty list", [], ""),
+        # List with integers
+        ("Integers", [1, 2, 3], "1,2,3"),
+        # List with mixed types
+        ("Mixed types", ["hello", 42, True], "hello,42,True"),
+        # List with None values
+        ("None values", ["a", None, "b"], "a,None,b"),
+        # List with already escaped content
+        ("Already escaped", [mark_safe("&"), "<", ">"], "&,&lt;,&gt;"),
+    ]
+    
+    template_string = '{{ some_list|escapeseq|join:"," }}'
+    template = Template(template_string)
+    
+    for test_name, test_data, expected in test_cases:
+        try:
+            context = Context({'some_list': test_data})
+            result = template.render(context)
+            print(f"{test_name}: {'PASS' if result == expected else 'FAIL'}")
+            if result != expected:
+                print(f"  Expected: {expected}")
+                print(f"  Got: {result}")
+        except Exception as e:
+            print(f"{test_name}: ERROR - {e}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_non_sequence.py b/test_non_sequence.py
new file mode 100644
index 0000000000..a2d9238c22
--- /dev/null
+++ b/test_non_sequence.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            }
+        ]
+    )
+    django.setup()
+
+from django.template import Template, Context
+
+def test_non_sequence():
+    test_cases = [
+        # Non-sequence inputs
+        ("String", "hello"),
+        ("Integer", 42),
+        ("None", None),
+        ("Boolean", True),
+    ]
+    
+    template_string = '{{ some_value|escapeseq|join:"," }}'
+    
+    for test_name, test_data in test_cases:
+        try:
+            template = Template(template_string)
+            context = Context({'some_value': test_data})
+            result = template.render(context)
+            print(f"{test_name}: {result}")
+        except Exception as e:
+            print(f"{test_name}: ERROR - {e}")
+
+if __name__ == "__main__":
+    test_non_sequence()
\ No newline at end of file
diff --git a/test_safeseq.py b/test_safeseq.py
new file mode 100644
index 0000000000..ab823372af
--- /dev/null
+++ b/test_safeseq.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            }
+        ]
+    )
+    django.setup()
+
+# Import and run the safeseq tests
+from tests.template_tests.filter_tests.test_safeseq import SafeseqTests
+
+def run_safeseq_tests():
+    test_instance = SafeseqTests()
+    
+    # Run test_safeseq01
+    try:
+        test_instance.test_safeseq01()
+        print("test_safeseq01: PASSED")
+    except Exception as e:
+        print(f"test_safeseq01: FAILED - {e}")
+    
+    # Run test_safeseq02
+    try:
+        test_instance.test_safeseq02()
+        print("test_safeseq02: PASSED")
+    except Exception as e:
+        print(f"test_safeseq02: FAILED - {e}")
+
+if __name__ == "__main__":
+    run_safeseq_tests()
\ No newline at end of file
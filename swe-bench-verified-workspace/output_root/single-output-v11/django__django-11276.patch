diff --git a/django/utils/html.py b/django/utils/html.py
index 9c519978f5..5dae6fb518 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -1,5 +1,6 @@
 """HTML utilities suitable for global use."""
 
+import html
 import json
 import re
 from html.parser import HTMLParser
@@ -24,15 +25,6 @@ word_split_re = re.compile(r'''([\s<>"']+)''')
 simple_url_re = re.compile(r'^https?://\[?\w', re.IGNORECASE)
 simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)
 
-_html_escapes = {
-    ord('&'): '&amp;',
-    ord('<'): '&lt;',
-    ord('>'): '&gt;',
-    ord('"'): '&quot;',
-    ord("'"): '&#39;',
-}
-
-
 @keep_lazy(str, SafeString)
 def escape(text):
     """
@@ -43,7 +35,7 @@ def escape(text):
     This may result in double-escaping. If this is a concern, use
     conditional_escape() instead.
     """
-    return mark_safe(str(text).translate(_html_escapes))
+    return mark_safe(html.escape(str(text)))
 
 
 _js_escapes = {
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6cecf3e35f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+"""Script to reproduce and test the html.escape() replacement."""
+
+import html
+from django.utils.html import escape
+
+# Test strings to compare behavior
+test_strings = [
+    'Hello & World',
+    'Test <script>alert("xss")</script>',
+    'Quotes: "double" and \'single\'',
+    'Copyright symbol: Â©',
+    'Mixed: & < > " \'',
+]
+
+print("=== Comparing Django escape() vs html.escape() ===")
+print()
+
+for test_str in test_strings:
+    django_result = escape(test_str)
+    html_result = html.escape(test_str)
+    
+    print(f"Input:      {test_str}")
+    print(f"Django:     {django_result}")
+    print(f"html:       {html_result}")
+    print(f"Equal:      {django_result == html_result}")
+    
+    if django_result != html_result:
+        print("DIFFERENCE FOUND!")
+        # Show character differences
+        for i, (d_char, h_char) in enumerate(zip(str(django_result), str(html_result))):
+            if d_char != h_char:
+                print(f"  Position {i}: Django='{d_char}'({ord(d_char)}), html='{h_char}'({ord(h_char)})")
+    
+    print("-" * 50)
+
+# Performance test
+import timeit
+
+print("\n=== Performance Comparison ===")
+django_time = timeit.timeit(
+    'escape(copyright)',
+    setup='from django.utils.html import escape; copyright="Â© 2023 Django"',
+    number=100000
+)
+
+html_time = timeit.timeit(
+    'html.escape(copyright)',
+    setup='import html; copyright="Â© 2023 Django"',
+    number=100000
+)
+
+print(f"Django escape time: {django_time:.6f} seconds")
+print(f"html.escape time:   {html_time:.6f} seconds")
+print(f"Speedup: {django_time/html_time:.2f}x")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..926902acf0
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""Comprehensive test for the html.escape() replacement."""
+
+import html
+from django.utils.html import escape
+from django.utils.functional import lazy
+
+def test_basic_escaping():
+    """Test basic HTML escaping functionality."""
+    test_cases = [
+        ('', ''),
+        ('hello', 'hello'),
+        ('&', '&amp;'),
+        ('<', '&lt;'),
+        ('>', '&gt;'),
+        ('"', '&quot;'),
+        ("'", '&#x27;'),  # Note: changed from &#39; to &#x27;
+        ('&amp;', '&amp;amp;'),  # Double escaping
+        ('&lt;', '&amp;lt;'),    # Double escaping
+        ('&gt;', '&amp;gt;'),    # Double escaping
+        ('&quot;', '&amp;quot;'), # Double escaping
+        ('&#x27;', '&amp;#x27;'), # Double escaping
+    ]
+    
+    print("=== Testing Basic Escaping ===")
+    for input_str, expected in test_cases:
+        result = escape(input_str)
+        print(f"Input: {repr(input_str)}")
+        print(f"Expected: {repr(expected)}")
+        print(f"Got: {repr(result)}")
+        print(f"Match: {result == expected}")
+        if result != expected:
+            print("ERROR!")
+        print()
+    
+    print("All basic tests passed!")
+
+def test_lazy_strings():
+    """Test that lazy strings are handled correctly."""
+    print("=== Testing Lazy Strings ===")
+    
+    # Test with lazy strings
+    lazy_str = lazy(lambda: "test & < > \" '", str)()
+    result = escape(lazy_str)
+    expected = "test &amp; &lt; &gt; &quot; &#x27;"
+    
+    print(f"Lazy input: {lazy_str}")
+    print(f"Expected: {expected}")
+    print(f"Got: {result}")
+    print(f"Match: {result == expected}")
+    
+    if result != expected:
+        print("ERROR with lazy strings!")
+    else:
+        print("Lazy string test passed!")
+
+def test_performance():
+    """Test performance improvement."""
+    import timeit
+    
+    print("=== Performance Test ===")
+    
+    test_string = "Hello & World <script>alert('xss')</script>"
+    
+    # Test Django escape
+    django_time = timeit.timeit(
+        lambda: escape(test_string),
+        number=100000
+    )
+    
+    # Test stdlib html.escape
+    html_time = timeit.timeit(
+        lambda: html.escape(test_string),
+        number=100000
+    )
+    
+    print(f"Django escape time: {django_time:.6f}s")
+    print(f"html.escape time: {html_time:.6f}s")
+    print(f"Speedup: {django_time/html_time:.2f}x")
+    
+    if django_time > html_time * 1.5:  # Allow some overhead for mark_safe
+        print("Performance improvement confirmed!")
+    else:
+        print("Performance test inconclusive")
+
+if __name__ == "__main__":
+    test_basic_escaping()
+    print()
+    test_lazy_strings()
+    print()
+    test_performance()
+    print("\n=== All tests completed ===")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2c5e29fcf3
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+"""Test edge cases for the html.escape() replacement."""
+
+from django.utils.html import escape
+from django.utils.functional import Promise, lazy
+
+def test_edge_cases():
+    """Test various edge cases."""
+    test_cases = [
+        # Empty strings
+        ('', ''),
+        
+        # Strings with only special characters
+        ('&', '&amp;'),
+        ('<', '&lt;'),
+        ('>', '&gt;'),
+        ('"', '&quot;'),
+        ("'", '&#x27;'),
+        
+        # Mixed content
+        ('Hello & World <script>alert("xss")</script>', 
+         'Hello &amp; World &lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;'),
+        
+        # Already escaped content (should double-escape)
+        ('&amp;', '&amp;amp;'),
+        ('&lt;', '&amp;lt;'),
+        ('&gt;', '&amp;gt;'),
+        ('&quot;', '&amp;quot;'),
+        ('&#x27;', '&amp;#x27;'),
+        
+        # Unicode characters
+        ('Â©', 'Â©'),
+        ('ä¸­æ–‡', 'ä¸­æ–‡'),
+        ('ðŸš€', 'ðŸš€'),
+        
+        # Numbers and special chars
+        ('123&456', '123&amp;456'),
+        ('test@example.com', 'test@example.com'),
+    ]
+    
+    print("=== Testing Edge Cases ===")
+    all_passed = True
+    
+    for input_str, expected in test_cases:
+        result = escape(input_str)
+        if result != expected:
+            print(f"FAIL: Input: {repr(input_str)}")
+            print(f"      Expected: {repr(expected)}")
+            print(f"      Got: {repr(result)}")
+            all_passed = False
+        else:
+            print(f"PASS: {repr(input_str)} -> {repr(result)}")
+    
+    print(f"\nAll edge case tests: {'PASSED' if all_passed else 'FAILED'}")
+    return all_passed
+
+def test_lazy_promise():
+    """Test with lazy promises."""
+    print("\n=== Testing Lazy Promises ===")
+    
+    # Create a lazy string
+    lazy_str = lazy(lambda: "test & 'content'", str)()
+    result = escape(lazy_str)
+    expected = "test &amp; &#x27;content&#x27;"
+    
+    print(f"Lazy input: {lazy_str}")
+    print(f"Expected: {expected}")
+    print(f"Got: {result}")
+    print(f"Match: {result == expected}")
+    
+    if result == expected:
+        print("Lazy promise test: PASSED")
+        return True
+    else:
+        print("Lazy promise test: FAILED")
+        return False
+
+if __name__ == "__main__":
+    edge_cases_passed = test_edge_cases()
+    lazy_passed = test_lazy_promise()
+    
+    print(f"\n=== Final Result ===")
+    print(f"All tests: {'PASSED' if edge_cases_passed and lazy_passed else 'FAILED'}")
\ No newline at end of file
diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py
index d87927cdfe..2c65a98c49 100644
--- a/tests/utils_tests/test_html.py
+++ b/tests/utils_tests/test_html.py
@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):
             ('<', '&lt;'),
             ('>', '&gt;'),
             ('"', '&quot;'),
-            ("'", '&#39;'),
+            ("'", '&#x27;'),
         )
         # Substitution patterns for testing the above items.
         patterns = ("%s", "asdf%sfdsa", "%s1", "1%sb")
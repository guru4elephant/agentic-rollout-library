diff --git a/django/contrib/postgres/aggregates/general.py b/django/contrib/postgres/aggregates/general.py
index 918373e926..a15758cd0f 100644
--- a/django/contrib/postgres/aggregates/general.py
+++ b/django/contrib/postgres/aggregates/general.py
@@ -10,7 +10,7 @@ __all__ = [
 
 class ArrayAgg(OrderableAggMixin, Aggregate):
     function = 'ARRAY_AGG'
-    template = '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'
+    template = '%(function)s(%(distinct)s %(expressions)s %(ordering)s)'
     allow_distinct = True
 
     @property
@@ -51,7 +51,7 @@ class JSONBAgg(Aggregate):
 
 class StringAgg(OrderableAggMixin, Aggregate):
     function = 'STRING_AGG'
-    template = "%(function)s(%(distinct)s%(expressions)s, '%(delimiter)s'%(ordering)s)"
+    template = "%(function)s(%(distinct)s %(expressions)s, '%(delimiter)s'%(ordering)s)"
     allow_distinct = True
 
     def __init__(self, expression, delimiter, **extra):
diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index ac0b62d0bf..f746654ace 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -14,7 +14,7 @@ __all__ = [
 
 
 class Aggregate(Func):
-    template = '%(function)s(%(distinct)s%(expressions)s)'
+    template = '%(function)s(%(distinct)s %(expressions)s)'
     contains_aggregate = True
     name = None
     filter_template = '%s FILTER (WHERE %%(filter)s)'
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..22b92633b4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count, Case, When, Q
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create the issue scenario
+try:
+    # This should produce COUNT(DISTINCT CASE WHEN ...) but might produce COUNT(DISTINCTCASE WHEN ...)
+    queryset = TestModel.objects.annotate(
+        count_field=Count(
+            Case(
+                When(Q(value__gt=5), then='name')
+            ),
+            distinct=True
+        )
+    )
+    
+    # Try to generate the SQL to see the issue
+    sql, params = queryset.query.sql_with_params()
+    print("Generated SQL:")
+    print(sql)
+    print("Parameters:", params)
+    
+except Exception as e:
+    print("Error occurred:")
+    print(str(e))
+    print("Type:", type(e).__name__)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..b9a07fc9c0
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count, Case, When, Q
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Test Case 1: Count with distinct=True but without Case (should work normally)
+print("Test 1: Count with distinct=True (normal case)")
+try:
+    queryset1 = TestModel.objects.annotate(
+        count_field=Count('name', distinct=True)
+    )
+    sql1, params1 = queryset1.query.sql_with_params()
+    print("SQL:", sql1)
+    print("Parameters:", params1)
+    print("✓ Success")
+except Exception as e:
+    print("✗ Error:", str(e))
+
+print("\nTest 2: Count with Case but without distinct=True (should work normally)")
+try:
+    queryset2 = TestModel.objects.annotate(
+        count_field=Count(
+            Case(
+                When(Q(value__gt=5), then='name')
+            )
+        )
+    )
+    sql2, params2 = queryset2.query.sql_with_params()
+    print("SQL:", sql2)
+    print("Parameters:", params2)
+    print("✓ Success")
+except Exception as e:
+    print("✗ Error:", str(e))
+
+print("\nTest 3: Count with both Case and distinct=True (the original issue)")
+try:
+    queryset3 = TestModel.objects.annotate(
+        count_field=Count(
+            Case(
+                When(Q(value__gt=5), then='name')
+            ),
+            distinct=True
+        )
+    )
+    sql3, params3 = queryset3.query.sql_with_params()
+    print("SQL:", sql3)
+    print("Parameters:", params3)
+    print("✓ Success")
+except Exception as e:
+    print("✗ Error:", str(e))
+
+print("\nTest 4: Count with distinct=False (should work normally)")
+try:
+    queryset4 = TestModel.objects.annotate(
+        count_field=Count('name', distinct=False)
+    )
+    sql4, params4 = queryset4.query.sql_with_params()
+    print("SQL:", sql4)
+    print("Parameters:", params4)
+    print("✓ Success")
+except Exception as e:
+    print("✗ Error:", str(e))
\ No newline at end of file
diff --git a/test_template_fix.py b/test_template_fix.py
new file mode 100644
index 0000000000..ea32e249b5
--- /dev/null
+++ b/test_template_fix.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.aggregates import Aggregate, Count
+from django.db.models.expressions import Value
+
+# Test the template directly
+print("Testing template output:")
+
+# Test 1: distinct=True
+agg1 = Count('test_field', distinct=True)
+print("distinct=True:", agg1.template % {'function': 'COUNT', 'distinct': 'DISTINCT', 'expressions': 'test_field'})
+
+# Test 2: distinct=False  
+agg2 = Count('test_field', distinct=False)
+print("distinct=False:", agg2.template % {'function': 'COUNT', 'distinct': '', 'expressions': 'test_field'})
+
+# Test 3: With Case expression (the original issue)
+from django.db.models import Case, When, Q
+case_expr = Case(When(Q(value__gt=5), then='name'))
+print("With Case expression:", agg1.template % {'function': 'COUNT', 'distinct': 'DISTINCT', 'expressions': str(case_expr)})
+
+# Test 4: Empty distinct with Case expression
+print("Empty distinct with Case:", agg2.template % {'function': 'COUNT', 'distinct': '', 'expressions': str(case_expr)})
\ No newline at end of file
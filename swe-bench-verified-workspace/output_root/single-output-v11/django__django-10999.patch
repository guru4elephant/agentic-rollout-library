diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..a037758784 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -29,7 +29,7 @@ datetime_re = re.compile(
 standard_duration_re = re.compile(
     r'^'
     r'(?:(?P<days>-?\d+) (days?, )?)?'
-    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
+    r'((?:(?P<hours>-?\d+):)(?=-?\d+:-?\d+))?'
     r'(?:(?P<minutes>-?\d+):)?'
     r'(?P<seconds>-?\d+)'
     r'(?:\.(?P<microseconds>\d{1,6})\d{0,6})?'
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..ba1c4d6c6a
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.utils.dateparse import parse_duration
+
+# The main issue was that negative durations with time components were returning None
+# Let's test that they now return valid timedelta objects instead of None
+test_cases = [
+    "1 days, -2:3:4.567890",  # Negative hours
+    "1 days, 2:-3:4.567890",  # Negative minutes  
+    "1 days, 2:3:-4.567890",  # Negative seconds
+    "-1:2:3.456789",         # Negative hours without days
+    "-2:3.456789",           # Negative minutes without hours
+    "-3.456789",             # Negative seconds without hours/minutes
+]
+
+print("Testing that negative durations no longer return None:")
+all_passed = True
+
+for test_str in test_cases:
+    result = parse_duration(test_str)
+    if result is None:
+        print(f"✗ '{test_str}' -> None (still failing)")
+        all_passed = False
+    else:
+        print(f"✓ '{test_str}' -> {result} (success - not None)")
+
+print(f"\nOverall result: {'PASS' if all_passed else 'FAIL'}")
+
+# Compare with the original behavior by temporarily reverting the fix
+print("\nTesting original behavior (before fix):")
+# Let's temporarily modify the regex to see what would happen
+import re
+
+# Original problematic regex
+original_regex = re.compile(
+    r'^'
+    r'(?:(?P<days>-?\d+) (days?, )?)?'
+    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
+    r'(?:(?P<minutes>-?\d+):)?'
+    r'(?P<seconds>-?\d+)'
+    r'(?:\.(?P<microseconds>\d{1,6})\d{0,6})?'
+    r'$'
+)
+
+def original_parse_duration(value):
+    match = original_regex.match(value)
+    if match:
+        return "Would match (but with incorrect parsing)"
+    return None
+
+for test_str in test_cases:
+    result = original_parse_duration(test_str)
+    if result is None:
+        print(f"Original: '{test_str}' -> None (would fail)")
+    else:
+        print(f"Original: '{test_str}' -> {result}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6698b31e2d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.utils.dateparse import parse_duration
+
+# Test cases for negative durations
+test_cases = [
+    "-1 days, 2:3:4.567890",  # Negative days
+    "1 days, -2:3:4.567890",  # Negative hours
+    "1 days, 2:-3:4.567890",  # Negative minutes
+    "1 days, 2:3:-4.567890",  # Negative seconds
+    "-1:2:3.456789",         # Negative hours without days
+    "-2:3.456789",           # Negative minutes without hours
+    "-3.456789",             # Negative seconds without hours/minutes
+]
+
+print("Testing parse_duration with negative durations:")
+for i, test_case in enumerate(test_cases, 1):
+    try:
+        result = parse_duration(test_case)
+        print(f"✓ Test {i}: '{test_case}' -> {result}")
+    except Exception as e:
+        print(f"✗ Test {i}: '{test_case}' -> ERROR: {e}")
\ No newline at end of file
diff --git a/test_fix_validation.py b/test_fix_validation.py
new file mode 100644
index 0000000000..0d7b339714
--- /dev/null
+++ b/test_fix_validation.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.utils.dateparse import parse_duration
+from datetime import timedelta
+
+# Test cases specifically for the GitHub issue
+# The issue was that negative hours/minutes/seconds weren't being parsed correctly
+test_cases = [
+    # These should all work now (they were failing before the fix)
+    ("1 days, -2:3:4.567890", timedelta(days=1, hours=-2, minutes=3, seconds=4, microseconds=567890)),
+    ("1 days, 2:-3:4.567890", timedelta(days=1, hours=2, minutes=-3, seconds=4, microseconds=567890)),
+    ("1 days, 2:3:-4.567890", timedelta(days=1, hours=2, minutes=3, seconds=-4, microseconds=567890)),
+    
+    # Time-only formats with negative components
+    ("-1:2:3.456789", timedelta(hours=-1, minutes=2, seconds=3, microseconds=456789)),
+    ("-2:3.456789", timedelta(minutes=-2, seconds=3, microseconds=456789)),
+    ("-3.456789", timedelta(seconds=-3, microseconds=456789)),
+]
+
+print("Testing specific GitHub issue fix:")
+all_passed = True
+
+for i, (duration_str, expected) in enumerate(test_cases, 1):
+    try:
+        result = parse_duration(duration_str)
+        if result == expected:
+            print(f"✓ Test {i}: '{duration_str}' -> {result}")
+        else:
+            print(f"✗ Test {i}: '{duration_str}' -> Expected: {expected}, Got: {result}")
+            all_passed = False
+    except Exception as e:
+        print(f"✗ Test {i}: '{duration_str}' -> ERROR: {e}")
+        all_passed = False
+
+print(f"\nOverall result: {'PASS' if all_passed else 'FAIL'}")
+
+# Additional verification - these should NOT return None anymore
+print("\nTesting that negative durations don't return None:")
+none_tests = [
+    "1 days, -2:3:4.567890",
+    "1 days, 2:-3:4.567890", 
+    "1 days, 2:3:-4.567890",
+]
+
+for test_str in none_tests:
+    result = parse_duration(test_str)
+    if result is None:
+        print(f"✗ '{test_str}' -> None (should not be None)")
+        all_passed = False
+    else:
+        print(f"✓ '{test_str}' -> {result} (not None)")
\ No newline at end of file
diff --git a/test_negative_durations.py b/test_negative_durations.py
new file mode 100644
index 0000000000..d5f111ea19
--- /dev/null
+++ b/test_negative_durations.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.utils.dateparse import parse_duration
+from datetime import timedelta
+
+# Test cases for negative durations - these should all work now
+test_cases = [
+    # Standard format with negative components
+    ("-1 days, 2:3:4.567890", timedelta(days=-1, hours=2, minutes=3, seconds=4, microseconds=567890)),
+    ("1 days, -2:3:4.567890", timedelta(days=1, hours=-2, minutes=3, seconds=4, microseconds=567890)),
+    ("1 days, 2:-3:4.567890", timedelta(days=1, hours=2, minutes=-3, seconds=4, microseconds=567890)),
+    ("1 days, 2:3:-4.567890", timedelta(days=1, hours=2, minutes=3, seconds=-4, microseconds=567890)),
+    
+    # Time-only formats with negative components
+    ("-1:2:3.456789", timedelta(hours=-1, minutes=2, seconds=3, microseconds=456789)),
+    ("-2:3.456789", timedelta(minutes=-2, seconds=3, microseconds=456789)),
+    ("-3.456789", timedelta(seconds=-3, microseconds=456789)),
+    
+    # Mixed negative components
+    ("-1 days, -2:3:4.567890", timedelta(days=-1, hours=-2, minutes=3, seconds=4, microseconds=567890)),
+    ("1 days, 2:-3:-4.567890", timedelta(days=1, hours=2, minutes=-3, seconds=-4, microseconds=567890)),
+    
+    # Edge cases
+    ("-0:0:0.000001", timedelta(microseconds=-1)),
+    ("-0:0:1", timedelta(seconds=-1)),
+]
+
+print("Testing parse_duration with negative durations:")
+all_passed = True
+
+for i, (duration_str, expected) in enumerate(test_cases, 1):
+    try:
+        result = parse_duration(duration_str)
+        if result == expected:
+            print(f"✓ Test {i}: '{duration_str}' -> {result}")
+        else:
+            print(f"✗ Test {i}: '{duration_str}' -> Expected: {expected}, Got: {result}")
+            all_passed = False
+    except Exception as e:
+        print(f"✗ Test {i}: '{duration_str}' -> ERROR: {e}")
+        all_passed = False
+
+print(f"\nOverall result: {'PASS' if all_passed else 'FAIL'}")
\ No newline at end of file
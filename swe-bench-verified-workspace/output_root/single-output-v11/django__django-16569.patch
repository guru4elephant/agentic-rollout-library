diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..6184220be5
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,98 @@
+#!/usr/bin/env python3
+import os
+import django
+from django import forms
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+def test_original_issue():
+    """Test the exact scenario from the GitHub issue"""
+    print("Testing original issue scenario...")
+    
+    class MyForm(forms.Form):
+        my_field = forms.CharField()
+    
+    # This is the exact code from the issue
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=True,
+        can_delete_extra=False,
+    )
+    my_formset = MyFormSet(
+        initial=None,
+    )
+    
+    # This should not raise TypeError anymore
+    empty_form = my_formset.empty_form
+    print("‚úì empty_form created without TypeError")
+    
+    # Verify the form has correct fields
+    fields = list(empty_form.fields.keys())
+    assert fields == ['my_field'], f"Expected ['my_field'], got {fields}"
+    print("‚úì Form has correct fields")
+    
+    return True
+
+def test_various_scenarios():
+    """Test various combinations of parameters"""
+    print("\nTesting various scenarios...")
+    
+    class TestForm(forms.Form):
+        field1 = forms.CharField()
+    
+    scenarios = [
+        # (can_delete, can_delete_extra, initial, description)
+        (True, False, None, "Original issue case"),
+        (True, True, None, "can_delete_extra=True"),
+        (False, False, None, "can_delete=False"),
+        (True, False, [], "Empty initial list"),
+        (True, False, [{'field1': 'test'}], "With initial data"),
+        (True, True, [{'field1': 'test'}], "With initial data and can_delete_extra=True"),
+    ]
+    
+    for can_delete, can_delete_extra, initial, description in scenarios:
+        print(f"  Testing: {description}")
+        
+        FormSet = forms.formset_factory(
+            TestForm,
+            can_delete=can_delete,
+            can_delete_extra=can_delete_extra,
+        )
+        
+        try:
+            formset = FormSet(initial=initial)
+            empty_form = formset.empty_form
+            print(f"    ‚úì empty_form created successfully")
+            
+            # Basic sanity check
+            assert 'field1' in empty_form.fields, "Main field should always be present"
+            
+        except Exception as e:
+            print(f"    ‚úó Failed: {e}")
+            return False
+    
+    print("‚úì All scenarios passed")
+    return True
+
+if __name__ == "__main__":
+    success = True
+    success &= test_original_issue()
+    success &= test_various_scenarios()
+    
+    if success:
+        print("\nüéâ All tests passed! The fix is working correctly.")
+    else:
+        print("\n‚ùå Some tests failed.")
+        exit(1)
\ No newline at end of file
diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 235aaf844c..02d040ee03 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):
                     required=False,
                     widget=self.get_ordering_widget(),
                 )
-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):
+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):
             form.fields[DELETION_FIELD_NAME] = BooleanField(
                 label=_("Delete"),
                 required=False,
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..df3c473a5d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+import os
+import django
+from django import forms
+
+class MyForm(forms.Form):
+    my_field = forms.CharField()
+
+if __name__ == "__main__":
+    settings_file = os.path.splitext(os.path.basename(__file__))[0]
+    django.conf.settings.configure(
+        DEBUG=True,
+        MIDDLEWARE_CLASSES=[],
+        ROOT_URLCONF=settings_file,
+    )
+    django.setup()
+
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=True,
+        can_delete_extra=False,
+    )
+    my_formset = MyFormSet(
+        initial=None,
+    )
+    print(my_formset.empty_form)
\ No newline at end of file
diff --git a/run_formset_tests.py b/run_formset_tests.py
new file mode 100644
index 0000000000..42b47589c4
--- /dev/null
+++ b/run_formset_tests.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+# Now we can import and run formset tests
+from tests.forms_tests.tests.test_formsets import *
+
+def run_basic_tests():
+    """Run some basic formset tests to verify our fix doesn't break anything"""
+    
+    # Test the specific case mentioned in the issue
+    print("Testing the original issue case...")
+    from django import forms
+    
+    class TestForm(forms.Form):
+        field1 = forms.CharField()
+    
+    # This should not raise an error anymore
+    FormSet = forms.formset_factory(TestForm, can_delete=True, can_delete_extra=False)
+    formset = FormSet(initial=None)
+    
+    # Access empty_form which was causing the issue
+    empty_form = formset.empty_form
+    print("‚úì empty_form created successfully")
+    
+    # Test that the form has the expected fields
+    expected_fields = ['field1']
+    actual_fields = list(empty_form.fields.keys())
+    print(f"‚úì Form fields: {actual_fields}")
+    
+    # Test that DELETE field is NOT present (since can_delete_extra=False and index=None)
+    assert 'DELETE' not in actual_fields, "DELETE field should not be present when can_delete_extra=False and index=None"
+    print("‚úì DELETE field correctly absent when can_delete_extra=False and index=None")
+    
+    # Test with can_delete_extra=True
+    print("\nTesting with can_delete_extra=True...")
+    FormSet2 = forms.formset_factory(TestForm, can_delete=True, can_delete_extra=True)
+    formset2 = FormSet2(initial=None)
+    empty_form2 = formset2.empty_form
+    print("‚úì empty_form created successfully with can_delete_extra=True")
+    
+    # Test with can_delete=False
+    print("\nTesting with can_delete=False...")
+    FormSet3 = forms.formset_factory(TestForm, can_delete=False)
+    formset3 = FormSet3(initial=None)
+    empty_form3 = formset3.empty_form
+    print("‚úì empty_form created successfully with can_delete=False")
+    
+    # Verify DELETE field is not present when can_delete=False
+    fields3 = list(empty_form3.fields.keys())
+    assert 'DELETE' not in fields3, "DELETE field should not be present when can_delete=False"
+    print("‚úì DELETE field correctly absent when can_delete=False")
+    
+    print("\nAll basic tests passed! ‚úì")
+
+if __name__ == "__main__":
+    run_basic_tests()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f577a0d875
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+import os
+import django
+from django import forms
+
+class MyForm(forms.Form):
+    my_field = forms.CharField()
+
+def test_case(can_delete=True, can_delete_extra=False, initial=None):
+    """Test different combinations of parameters"""
+    print(f"\nTesting: can_delete={can_delete}, can_delete_extra={can_delete_extra}, initial={initial}")
+    
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=can_delete,
+        can_delete_extra=can_delete_extra,
+    )
+    
+    try:
+        my_formset = MyFormSet(initial=initial)
+        print(f"Success: empty_form created")
+        return True
+    except Exception as e:
+        print(f"Error: {e}")
+        return False
+
+if __name__ == "__main__":
+    settings_file = os.path.splitext(os.path.basename(__file__))[0]
+    django.conf.settings.configure(
+        DEBUG=True,
+        MIDDLEWARE_CLASSES=[],
+        ROOT_URLCONF=settings_file,
+    )
+    django.setup()
+
+    # Test various edge cases
+    test_cases = [
+        (True, False, None),  # Original issue case
+        (True, True, None),   # can_delete_extra=True
+        (False, False, None), # can_delete=False
+        (True, False, []),    # Empty initial list
+        (True, False, [{'my_field': 'test'}]),  # With initial data
+    ]
+    
+    results = []
+    for can_delete, can_delete_extra, initial in test_cases:
+        results.append(test_case(can_delete, can_delete_extra, initial))
+    
+    print(f"\nAll tests passed: {all(results)}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..09d59a5c4a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F
+from django.db.models.functions import Mod
+
+# Create a simple test model
+class TestModel(models.Model):
+    decimal_field = models.DecimalField(max_digits=10, decimal_places=2)
+    integer_field = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the issue
+def test_mod_operator():
+    print("Testing MOD operator with different numeric types...")
+    
+    # Create a model instance to resolve F expressions
+    test_obj = TestModel(decimal_field=10.5, integer_field=3)
+    
+    # Test 1: Decimal % Integer using MOD function
+    try:
+        expr1 = Mod(F('decimal_field'), F('integer_field'))
+        resolved_expr1 = expr1.resolve_expression(test_obj._meta)
+        print(f"MOD function output_field: {resolved_expr1.output_field}")
+    except Exception as e:
+        print(f"MOD function error: {e}")
+    
+    # Test 2: Integer % Decimal using MOD function  
+    try:
+        expr2 = Mod(F('integer_field'), F('decimal_field'))
+        resolved_expr2 = expr2.resolve_expression(test_obj._meta)
+        print(f"MOD function output_field: {resolved_expr2.output_field}")
+    except Exception as e:
+        print(f"MOD function error: {e}")
+    
+    # Test 3: Decimal % Integer using % operator
+    try:
+        expr3 = F('decimal_field') % F('integer_field')
+        resolved_expr3 = expr3.resolve_expression(test_obj._meta)
+        print(f"% operator output_field: {resolved_expr3.output_field}")
+    except Exception as e:
+        print(f"% operator error: {e}")
+    
+    # Test 4: Integer % Decimal using % operator
+    try:
+        expr4 = F('integer_field') % F('decimal_field')
+        resolved_expr4 = expr4.resolve_expression(test_obj._meta)
+        print(f"% operator output_field: {resolved_expr4.output_field}")
+    except Exception as e:
+        print(f"% operator error: {e}")
+
+if __name__ == '__main__':
+    test_mod_operator()
\ No newline at end of file
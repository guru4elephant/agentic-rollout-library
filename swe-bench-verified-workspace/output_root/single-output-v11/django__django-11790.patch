diff --git a/debug_detailed.py b/debug_detailed.py
new file mode 100644
index 0000000000..2a54ec83a3
--- /dev/null
+++ b/debug_detailed.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+from django.forms.widgets import TextInput
+
+# Monkey patch to debug when build_attrs is called
+original_build_attrs = TextInput.build_attrs
+
+def debug_build_attrs(self, base_attrs, extra_attrs=None):
+    print(f"TextInput.build_attrs called with base_attrs: {base_attrs}, extra_attrs: {extra_attrs}")
+    result = original_build_attrs(self, base_attrs, extra_attrs)
+    print(f"TextInput.build_attrs result: {result}")
+    return result
+
+TextInput.build_attrs = debug_build_attrs
+
+def debug_detailed():
+    """Debug the exact flow of widget attribute building"""
+    
+    print("=== Creating AuthenticationForm ===")
+    form = AuthenticationForm()
+    
+    print("\n=== Accessing username field widget ===")
+    widget = form.fields['username'].widget
+    print(f"Widget type: {type(widget)}")
+    print(f"Widget attrs: {widget.attrs}")
+    
+    print("\n=== Calling widget_attrs directly ===")
+    attrs = form.fields['username'].widget_attrs(widget)
+    print(f"Direct widget_attrs result: {attrs}")
+    
+    print("\n=== Rendering the form field ===")
+    rendered = form['username']
+    print(f"Rendered field type: {type(rendered)}")
+    
+    print("\n=== Calling as_widget() ===")
+    widget_output = rendered.as_widget()
+    print(f"Widget output length: {len(widget_output)}")
+    print(f"Widget output snippet: {widget_output[:100]}...")
+
+if __name__ == '__main__':
+    debug_detailed()
\ No newline at end of file
diff --git a/debug_widget_attrs.py b/debug_widget_attrs.py
new file mode 100644
index 0000000000..71818d19ec
--- /dev/null
+++ b/debug_widget_attrs.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm, UsernameField
+from django.forms.widgets import TextInput
+
+def debug_widget_attrs_timing():
+    """Debug when widget_attrs is called and what values it sees"""
+    
+    print("=== Creating UsernameField instance ===")
+    field = UsernameField()
+    print(f"Initial max_length: {field.max_length}")
+    
+    print("\n=== Calling widget_attrs initially ===")
+    attrs = field.widget_attrs(TextInput())
+    print(f"Initial widget_attrs: {attrs}")
+    
+    print("\n=== Setting max_length manually ===")
+    field.max_length = 150
+    print(f"Updated max_length: {field.max_length}")
+    
+    print("\n=== Calling widget_attrs after setting max_length ===")
+    attrs = field.widget_attrs(TextInput())
+    print(f"Updated widget_attrs: {attrs}")
+    
+    print("\n=== Creating AuthenticationForm ===")
+    form = AuthenticationForm()
+    print(f"Form username field max_length: {form.fields['username'].max_length}")
+    
+    print("\n=== Calling widget_attrs on form field ===")
+    attrs = form.fields['username'].widget_attrs(TextInput())
+    print(f"Form field widget_attrs: {attrs}")
+
+if __name__ == '__main__':
+    debug_widget_attrs_timing()
\ No newline at end of file
diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index a0cfed0995..17a138d399 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -62,11 +62,12 @@ class UsernameField(forms.CharField):
         return unicodedata.normalize('NFKC', super().to_python(value))
 
     def widget_attrs(self, widget):
-        return {
-            **super().widget_attrs(widget),
+        attrs = super().widget_attrs(widget)
+        attrs.update({
             'autocapitalize': 'none',
             'autocomplete': 'username',
-        }
+        })
+        return attrs
 
 
 class UserCreationForm(forms.ModelForm):
@@ -194,6 +195,11 @@ class AuthenticationForm(forms.Form):
         self.fields['username'].max_length = self.username_field.max_length or 254
         if self.fields['username'].label is None:
             self.fields['username'].label = capfirst(self.username_field.verbose_name)
+        
+        # Update widget attributes to include maxlength after max_length is set
+        username_field = self.fields['username']
+        widget_attrs = username_field.widget_attrs(username_field.widget)
+        username_field.widget.attrs.update(widget_attrs)
 
     def clean(self):
         username = self.cleaned_data.get('username')
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..aae4e3c2ac
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+
+def test_authentication_form_maxlength():
+    """Test that AuthenticationForm username field has maxlength HTML attribute"""
+    form = AuthenticationForm()
+    
+    print("AuthenticationForm username field attributes:")
+    username_widget = form.fields['username'].widget
+    attrs = username_widget.get_context('username', None, {})['widget']['attrs']
+    print(f"Widget attrs: {attrs}")
+    
+    # Check if maxlength is present
+    if 'maxlength' in attrs:
+        print("✓ maxlength attribute is present")
+        print(f"  maxlength value: {attrs['maxlength']}")
+    else:
+        print("✗ maxlength attribute is missing")
+        print("  This is the bug we need to fix!")
+    
+    # Check the actual max_length value
+    print(f"Field max_length: {form.fields['username'].max_length}")
+
+if __name__ == '__main__':
+    test_authentication_form_maxlength()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..930f26dbd4
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
+from django.forms.widgets import TextInput
+
+def test_authentication_form():
+    """Test that AuthenticationForm works correctly with the fix"""
+    print("Testing AuthenticationForm...")
+    form = AuthenticationForm()
+    
+    # Check that max_length is set correctly
+    assert form.fields['username'].max_length == 150
+    print("✓ max_length is correctly set to 150")
+    
+    # Check that widget attributes include maxlength
+    widget_attrs = form.fields['username'].widget_attrs(TextInput())
+    assert 'maxlength' in widget_attrs
+    assert widget_attrs['maxlength'] == '150'
+    print("✓ widget_attrs includes maxlength attribute")
+    
+    # Check that widget itself has the maxlength attribute
+    assert 'maxlength' in form.fields['username'].widget.attrs
+    assert form.fields['username'].widget.attrs['maxlength'] == '150'
+    print("✓ widget attrs includes maxlength attribute")
+    
+    # Test form rendering
+    rendered = form.as_p()
+    assert 'maxlength="150"' in rendered
+    print("✓ Form rendering includes maxlength attribute")
+    
+    print("AuthenticationForm tests passed!")
+
+def test_user_creation_form():
+    """Test that UserCreationForm still works correctly"""
+    print("\nTesting UserCreationForm...")
+    form = UserCreationForm()
+    
+    # UserCreationForm should also work correctly
+    assert form.fields['username'].max_length == 150
+    print("✓ UserCreationForm max_length is correctly set")
+    
+    # Widget attributes should include maxlength
+    widget_attrs = form.fields['username'].widget_attrs(TextInput())
+    assert 'maxlength' in widget_attrs
+    assert widget_attrs['maxlength'] == '150'
+    print("✓ UserCreationForm widget_attrs includes maxlength")
+    
+    print("UserCreationForm tests passed!")
+
+def test_edge_cases():
+    """Test edge cases"""
+    print("\nTesting edge cases...")
+    
+    # Test with a custom user model that has different max_length
+    from django.contrib.auth.models import User
+    original_max_length = User._meta.get_field(User.USERNAME_FIELD).max_length
+    
+    # Temporarily change the max_length to test different values
+    try:
+        User._meta.get_field(User.USERNAME_FIELD).max_length = 50
+        form = AuthenticationForm()
+        assert form.fields['username'].max_length == 50
+        widget_attrs = form.fields['username'].widget_attrs(TextInput())
+        assert widget_attrs['maxlength'] == '50'
+        print("✓ Custom max_length (50) works correctly")
+        
+        User._meta.get_field(User.USERNAME_FIELD).max_length = None
+        form = AuthenticationForm()
+        assert form.fields['username'].max_length == 254  # Default fallback
+        widget_attrs = form.fields['username'].widget_attrs(TextInput())
+        assert widget_attrs['maxlength'] == '254'
+        print("✓ None max_length falls back to 254 correctly")
+        
+    finally:
+        # Restore original max_length
+        User._meta.get_field(User.USERNAME_FIELD).max_length = original_max_length
+    
+    print("Edge case tests passed!")
+
+if __name__ == '__main__':
+    test_authentication_form()
+    test_user_creation_form()
+    test_edge_cases()
+    print("\n✓ All tests passed! The fix is working correctly.")
\ No newline at end of file
diff --git a/test_username_field.py b/test_username_field.py
new file mode 100644
index 0000000000..f18617899d
--- /dev/null
+++ b/test_username_field.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import UsernameField
+from django.forms.widgets import TextInput
+
+def test_username_field_standalone():
+    """Test UsernameField behavior in isolation"""
+    print("Testing UsernameField in isolation...")
+    
+    # Test default behavior
+    field = UsernameField()
+    attrs = field.widget_attrs(TextInput())
+    assert 'autocapitalize' in attrs
+    assert 'autocomplete' in attrs
+    assert attrs['autocapitalize'] == 'none'
+    assert attrs['autocomplete'] == 'username'
+    print("✓ Default UsernameField attributes work correctly")
+    
+    # Test with max_length set
+    field.max_length = 100
+    attrs = field.widget_attrs(TextInput())
+    assert 'maxlength' in attrs
+    assert attrs['maxlength'] == '100'
+    print("✓ UsernameField with max_length includes maxlength attribute")
+    
+    # Test with min_length set
+    field.min_length = 5
+    attrs = field.widget_attrs(TextInput())
+    assert 'minlength' in attrs
+    assert attrs['minlength'] == '5'
+    print("✓ UsernameField with min_length includes minlength attribute")
+    
+    print("UsernameField standalone tests passed!")
+
+if __name__ == '__main__':
+    test_username_field_standalone()
\ No newline at end of file
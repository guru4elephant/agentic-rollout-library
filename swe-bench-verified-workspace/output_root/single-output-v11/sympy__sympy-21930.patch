diff --git a/debug_latex.py b/debug_latex.py
new file mode 100644
index 0000000000..851d659233
--- /dev/null
+++ b/debug_latex.py
@@ -0,0 +1,8 @@
+import sympy as sp
+from sympy.physics.secondquant import B, Bd
+
+a = sp.Symbol('0')
+bd_op = Bd(a)
+
+print("LaTeX for Bd(a):", sp.latex(bd_op))
+print("LaTeX for Bd(a)**2:", sp.latex(bd_op**2))
\ No newline at end of file
diff --git a/debug_operator.py b/debug_operator.py
new file mode 100644
index 0000000000..af6e8f9422
--- /dev/null
+++ b/debug_operator.py
@@ -0,0 +1,13 @@
+import sympy as sp
+from sympy.physics.secondquant import B, Bd
+
+a = sp.Symbol('0')
+bd_op = Bd(a)
+bd_squared = bd_op**2
+
+print("Type of Bd(a):", type(bd_op))
+print("Type of Bd(a)**2:", type(bd_squared))
+print("Base of power:", bd_squared.base)
+print("Exponent of power:", bd_squared.exp)
+print("Base class:", bd_squared.base.__class__)
+print("Base MRO:", bd_squared.base.__class__.__mro__)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3ce2467fea
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+import sympy as sp
+from sympy.physics.secondquant import B, Bd, Commutator
+
+# Initialize printing
+sp.init_printing()
+
+# Reproduce the issue
+a = sp.Symbol('0')
+commutator = Commutator(Bd(a)**2, B(a))
+
+print("Commutator expression:")
+print(commutator)
+print("\nLaTeX representation:")
+print(sp.latex(commutator))
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 64d3207d09..23a2cb0663 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -14,6 +14,12 @@
 from sympy.core.sympify import SympifyError
 from sympy.logic.boolalg import true
 
+# Import for second quantization operators
+try:
+    from sympy.physics.secondquant import SqOperator
+except ImportError:
+    SqOperator = None
+
 # sympy.printing imports
 from sympy.printing.precedence import precedence_traditional
 from sympy.printing.printer import Printer, print_function
@@ -673,6 +679,10 @@ def _helper_print_standard_power(self, expr, template):
             and base.endswith(r'\right)')):
             # don't use parentheses around dotted derivative
             base = base[6: -7]  # remove outermost added parens
+        elif SqOperator is not None and isinstance(expr.base, SqOperator):
+            # Handle second quantization operators: wrap in braces to avoid
+            # double superscript issues like b^\dagger_{0}^{2} -> {b^\dagger_{0}}^{2}
+            base = "{%s}" % base
         return template % (base, exp)
 
     def _print_UnevaluatedExpr(self, expr):
diff --git a/test_import.py b/test_import.py
new file mode 100644
index 0000000000..8400d0dbf7
--- /dev/null
+++ b/test_import.py
@@ -0,0 +1,5 @@
+try:
+    from sympy.physics.secondquant import SqOperator
+    print("SqOperator imported successfully:", SqOperator)
+except ImportError as e:
+    print("Import failed:", e)
\ No newline at end of file
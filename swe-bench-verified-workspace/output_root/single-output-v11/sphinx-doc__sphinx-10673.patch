diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..4b0ddbd88
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_toctree_warnings():
+    """Reproduce the issue with toctree warnings for genindex, modindex, search"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple conf.py
+        conf_content = '''
+extensions = []
+html_theme = 'default'
+'''
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Create index.rst with toctree containing genindex, modindex, search
+        index_content = '''
+Test Document
+=============
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+   genindex
+   modindex
+   search
+'''
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Build with Sphinx and capture warnings
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            
+            # Build and check if warnings are generated
+            app.build()
+            
+            print("Build completed. Check the output above for warnings about")
+            print("'genindex', 'modindex', and 'search' documents.")
+
+if __name__ == '__main__':
+    test_toctree_warnings()
\ No newline at end of file
diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py
index 35e16e623..c3ec3201e 100644
--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -52,6 +52,33 @@ class TocTree(SphinxDirective):
         'reversed': directives.flag,
     }
 
+    def _is_special_document(self, ref: str) -> bool:
+        """Check if a document reference is a special document that should not trigger warnings.
+        
+        Special documents include:
+        - 'genindex': General index
+        - 'modindex': Module index (Python domain)
+        - 'search': Search page
+        
+        These documents are generated by the builder and don't exist in env.found_docs
+        during the directive processing phase.
+        """
+        # Check for known special documents
+        if ref in ('genindex', 'modindex', 'search'):
+            return True
+            
+        # Check if this is a domain index (e.g., 'py-modindex' for Python module index)
+        # Domain indices follow the pattern {domain_name}-{index_name}
+        if '-' in ref:
+            domain_name, index_name = ref.split('-', 1)
+            if domain_name in self.env.domains:
+                domain = self.env.domains[domain_name]
+                for indexcls in domain.indices:
+                    if indexcls.name == index_name:
+                        return True
+        
+        return False
+
     def run(self) -> List[Node]:
         subnode = addnodes.toctree()
         subnode['parent'] = self.env.docname
@@ -119,16 +146,23 @@ class TocTree(SphinxDirective):
                 if url_re.match(ref) or ref == 'self':
                     toctree['entries'].append((title, ref))
                 elif docname not in self.env.found_docs:
-                    if excluded(self.env.doc2path(docname, False)):
+                    # first check if this is a special document that should not trigger warnings
+                    if self._is_special_document(ref):
+                        # Special document like genindex, modindex, search - skip warning
+                        # but still add it to the entries so it appears in the toctree
+                        toctree['entries'].append((title, ref))
+                    elif excluded(self.env.doc2path(docname, False)):
                         message = __('toctree contains reference to excluded document %r')
                         subtype = 'excluded'
+                        logger.warning(message, docname, type='toc', subtype=subtype,
+                                       location=toctree)
+                        self.env.note_reread()
                     else:
                         message = __('toctree contains reference to nonexisting document %r')
                         subtype = 'not_readable'
-
-                    logger.warning(message, docname, type='toc', subtype=subtype,
-                                   location=toctree)
-                    self.env.note_reread()
+                        logger.warning(message, docname, type='toc', subtype=subtype,
+                                       location=toctree)
+                        self.env.note_reread()
                 else:
                     if docname in all_docnames:
                         all_docnames.remove(docname)
diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py
index 9678e3c7c..6c8691ddd 100644
--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -23,6 +23,33 @@ class TocTree:
     def __init__(self, env: "BuildEnvironment") -> None:
         self.env = env
 
+    def _is_special_document(self, ref: str) -> bool:
+        """Check if a document reference is a special document that should not trigger warnings.
+        
+        Special documents include:
+        - 'genindex': General index
+        - 'modindex': Module index (Python domain)
+        - 'search': Search page
+        
+        These documents are generated by the builder and don't exist in env.tocs
+        during the toctree resolution phase.
+        """
+        # Check for known special documents
+        if ref in ('genindex', 'modindex', 'search'):
+            return True
+            
+        # Check if this is a domain index (e.g., 'py-modindex' for Python module index)
+        # Domain indices follow the pattern {domain_name}-{index_name}
+        if '-' in ref:
+            domain_name, index_name = ref.split('-', 1)
+            if domain_name in self.env.domains:
+                domain = self.env.domains[domain_name]
+                for indexcls in domain.indices:
+                    if indexcls.name == index_name:
+                        return True
+        
+        return False
+
     def note(self, docname: str, toctreenode: addnodes.toctree) -> None:
         """Note a TOC tree directive in a document and gather information about
         file relations from it.
@@ -165,7 +192,11 @@ class TocTree:
                                        ref, location=toctreenode)
                 except KeyError:
                     # this is raised if the included file does not exist
-                    if excluded(self.env.doc2path(ref, False)):
+                    # first check if this is a special document that should not trigger warnings
+                    if self._is_special_document(ref):
+                        # Special document like genindex, modindex, search - skip warning
+                        continue
+                    elif excluded(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to excluded document %r')
                     elif not included(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to non-included document %r')
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..d2cf9df2e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+def test_edge_cases():
+    """Test edge cases for the toctree special document fix"""
+    
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Create a simple conf.py
+        conf_content = '''
+extensions = []
+html_theme = 'default'
+'''
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Test case 1: Mixed regular and special documents
+        index_content = '''
+Test Document
+=============
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+   genindex
+   modindex
+   search
+   nonexistent_document
+'''
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(index_content)
+        
+        # Build with Sphinx
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+            
+        print("Test case 1: Mixed regular and special documents - completed")
+        
+        # Test case 2: Domain indices with full names
+        index_content2 = '''
+Test Document 2
+===============
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+   py-modindex
+'''
+        with open(os.path.join(srcdir, 'index2.rst'), 'w') as f:
+            f.write(index_content2)
+        
+        # Build with Sphinx
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+            
+        print("Test case 2: Domain indices with full names - completed")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 7ca990b56..a0708b02c 100644
--- a/tox.ini
+++ b/tox.ini
@@ -30,7 +30,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
diff --git a/django/core/validators.py b/django/core/validators.py
index 84b4f31ec7..d93e33547d 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -48,7 +48,7 @@ class RegexValidator:
         regex_matches = self.regex.search(str(value))
         invalid_input = regex_matches if self.inverse_match else not regex_matches
         if invalid_input:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..632475fda9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import validate_email, ValidationError
+
+# Test current behavior - see if value is included in ValidationError
+try:
+    validate_email("invalid_email")
+except ValidationError as e:
+    print("Current ValidationError:")
+    print(f"Message: {e.message}")
+    print(f"Code: {e.code}")
+    print(f"Params: {e.params}")
+    print(f"Error list: {e.error_list}")
+
+# Test with a custom validator that should include value
+from django.core.validators import RegexValidator
+
+custom_validator = RegexValidator(
+    regex=r'^valid.*$',
+    message="'%(value)s' is not a valid value",
+    code="invalid"
+)
+
+try:
+    custom_validator("invalid_value")
+except ValidationError as e:
+    print("\nCustom Validator ValidationError:")
+    print(f"Message: {e.message}")
+    print(f"Code: {e.code}")
+    print(f"Params: {e.params}")
+    print(f"Error list: {e.error_list}")
\ No newline at end of file
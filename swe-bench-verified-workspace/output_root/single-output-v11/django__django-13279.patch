diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..b4ba81927d 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -106,8 +106,19 @@ class SessionBase:
         key_salt = "django.contrib.sessions" + self.__class__.__name__
         return salted_hmac(key_salt, value).hexdigest()
 
+    def _legacy_encode(self, session_dict):
+        # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
+        serialized = self.serializer().dumps(session_dict)
+        hash = self._hash(serialized)
+        return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')
+
     def encode(self, session_dict):
         "Return the given session dictionary serialized and encoded as a string."
+        # RemovedInDjango40Warning: when the deprecation ends, remove this condition
+        # and always use signing.dumps().
+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':
+            # Use legacy encoding for backward compatibility during transition
+            return self._legacy_encode(session_dict)
         return signing.dumps(
             session_dict, salt=self.key_salt, serializer=self.serializer,
             compress=True,
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..09fce51710
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,127 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the fix works correctly
+"""
+
+import os
+import django
+from django.conf import settings
+from django.contrib.sessions.backends.base import SessionBase
+from django.test.utils import override_settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key-for-session-testing',
+        DEFAULT_HASHING_ALGORITHM='sha256',  # Default value
+        INSTALLED_APPS=[
+            'django.contrib.sessions',
+        ],
+        USE_TZ=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+django.setup()
+
+def test_sha256_default_behavior():
+    """Test default behavior with sha256 algorithm"""
+    print("Testing DEFAULT_HASHING_ALGORITHM='sha256' (default)...")
+    
+    session = SessionBase()
+    session['test'] = 'value_sha256'
+    encoded = session.encode(session._session)
+    decoded = session.decode(encoded)
+    
+    print(f"  Encoded: {encoded[:50]}...")
+    print(f"  Decoded: {decoded}")
+    
+    # Should use new signing format (starts with eyJ for base64 JSON)
+    assert encoded.startswith('eyJ'), "Should use new signing format"
+    assert decoded == {'test': 'value_sha256'}, "Decoded data should match"
+    print("  ✓ SHA256 test passed")
+
+def test_sha1_backward_compatibility():
+    """Test backward compatibility with sha1 algorithm"""
+    print("Testing DEFAULT_HASHING_ALGORITHM='sha1' (backward compatibility)...")
+    
+    with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):
+        session = SessionBase()
+        session['test'] = 'value_sha1'
+        encoded = session.encode(session._session)
+        decoded = session.decode(encoded)
+        
+        print(f"  Encoded: {encoded[:50]}...")
+        print(f"  Decoded: {decoded}")
+        
+        # Should use legacy format (starts with base64 encoded hash)
+        assert not encoded.startswith('eyJ'), "Should use legacy format"
+        assert decoded == {'test': 'value_sha1'}, "Decoded data should match"
+        print("  ✓ SHA1 encoding test passed")
+
+def test_legacy_session_decoding():
+    """Test that legacy sessions can be decoded with sha1 algorithm"""
+    print("Testing legacy session decoding...")
+    
+    # Create legacy session data manually (simulating Django 3.0)
+    import base64
+    from django.utils.crypto import salted_hmac
+    
+    session_legacy = SessionBase()
+    test_data = {'legacy_data': 'from_django_30'}
+    
+    # Use the same key salt that _hash() method uses
+    key_salt = 'django.contrib.sessions' + session_legacy.__class__.__name__
+    serialized = session_legacy.serializer().dumps(test_data)
+    hmac_digest = salted_hmac(key_salt, serialized).hexdigest()
+    legacy_encoded = base64.b64encode(f'{hmac_digest}:'.encode() + serialized).decode('ascii')
+    
+    print(f"  Legacy encoded: {legacy_encoded[:50]}...")
+    
+    # Test that it can be decoded with sha1 algorithm
+    with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):
+        session_new = SessionBase()
+        decoded = session_new.decode(legacy_encoded)
+        print(f"  Decoded legacy: {decoded}")
+        
+        assert decoded == test_data, "Legacy session should be decoded correctly"
+        print("  ✓ Legacy decoding test passed")
+
+def test_cross_compatibility():
+    """Test cross-compatibility between different Django versions"""
+    print("Testing cross-version compatibility...")
+    
+    # Create session with sha1 algorithm (simulating transition environment)
+    with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):
+        session_sha1 = SessionBase()
+        session_sha1['transition'] = 'data'
+        encoded_sha1 = session_sha1.encode(session_sha1._session)
+        
+        # This session should be decodable by both old and new Django versions
+        decoded_sha1 = session_sha1.decode(encoded_sha1)
+        assert decoded_sha1 == {'transition': 'data'}, "SHA1 session should be decodable"
+        
+        print(f"  SHA1 session encoded: {encoded_sha1[:50]}...")
+        print(f"  SHA1 session decoded: {decoded_sha1}")
+        print("  ✓ Cross-compatibility test passed")
+
+if __name__ == '__main__':
+    print("=" * 60)
+    print("COMPREHENSIVE TEST SUITE")
+    print("=" * 60)
+    
+    test_sha256_default_behavior()
+    test_sha1_backward_compatibility()
+    test_legacy_session_decoding()
+    test_cross_compatibility()
+    
+    print("=" * 60)
+    print("✓ ALL TESTS PASSED! The fix is working correctly.")
+    print("=" * 60)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1f03237aed
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,137 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the session data decoding issue during transition to Django 3.1.
+The issue is that when DEFAULT_HASHING_ALGORITHM is set to 'sha1', sessions created
+with the old format (pre-Django 3.1) cannot be decoded properly.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.sessions.backends.base import SessionBase
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key-for-session-testing',
+        DEFAULT_HASHING_ALGORITHM='sha1',  # This should trigger the legacy behavior
+        INSTALLED_APPS=[
+            'django.contrib.sessions',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_session_encoding_decoding():
+    """Test that sessions can be encoded and decoded properly with sha1 algorithm"""
+    print("Testing session encoding/decoding with DEFAULT_HASHING_ALGORITHM='sha1'")
+    print(f"Current DEFAULT_HASHING_ALGORITHM: {settings.DEFAULT_HASHING_ALGORITHM}")
+    
+    # Create a test session
+    session = SessionBase()
+    session['test_key'] = 'test_value'
+    session['user_id'] = 123
+    
+    # Encode the session using the current method
+    encoded_data = session.encode(session._session)
+    print(f"Encoded session data: {encoded_data[:100]}...")
+    
+    # Try to decode it back
+    try:
+        decoded_data = session.decode(encoded_data)
+        print(f"Successfully decoded session: {decoded_data}")
+        return True
+    except Exception as e:
+        print(f"Failed to decode session: {e}")
+        return False
+
+def test_legacy_session_decoding():
+    """Test decoding of legacy session data (pre-Django 3.1 format)"""
+    print("\nTesting legacy session decoding...")
+    
+    # Simulate legacy session data (pre-Django 3.1 format)
+    # This would be the old format that used base64 encoding with HMAC-SHA1
+    session = SessionBase()
+    
+    # Create some test session data
+    test_data = {'test_key': 'test_value', 'user_id': 123}
+    
+    # Simulate the old encoding format manually
+    import base64
+    from django.utils.crypto import salted_hmac
+    
+    # Old format: base64(hmac_sha1(serialized_data) + ':' + serialized_data)
+    serialized = session.serializer().dumps(test_data)
+    key_salt = "django.contrib.sessions" + session.__class__.__name__
+    hmac_digest = salted_hmac(key_salt, serialized).hexdigest()
+    
+    # Encode in the old format
+    legacy_encoded = base64.b64encode(
+        f"{hmac_digest}:".encode() + serialized
+    ).decode('ascii')
+    
+    print(f"Legacy encoded session data: {legacy_encoded[:100]}...")
+    
+    # Try to decode using the current session backend
+    try:
+        decoded_data = session.decode(legacy_encoded)
+        print(f"Successfully decoded legacy session: {decoded_data}")
+        return True
+    except Exception as e:
+        print(f"Failed to decode legacy session: {e}")
+        import traceback
+        traceback.print_exc()
+        return False
+
+def test_mixed_environment():
+    """Test the specific issue: when DEFAULT_HASHING_ALGORITHM='sha1', 
+    we should still be able to decode sessions created with the old format"""
+    print("\nTesting mixed environment scenario...")
+    
+    # Create a session with the old format (simulating pre-Django 3.1)
+    session_old = SessionBase()
+    test_data = {'mixed_test': 'mixed_value', 'id': 456}
+    
+    # Manually create old format session data
+    import base64
+    from django.utils.crypto import salted_hmac
+    
+    serialized = session_old.serializer().dumps(test_data)
+    key_salt = "django.contrib.sessions" + session_old.__class__.__name__
+    hmac_digest = salted_hmac(key_salt, serialized).hexdigest()
+    old_format_data = base64.b64encode(
+        f"{hmac_digest}:".encode() + serialized
+    ).decode('ascii')
+    
+    print(f"Created old format session data: {old_format_data[:100]}...")
+    
+    # Now try to decode it with a new session instance (simulating Django 3.1+)
+    session_new = SessionBase()
+    try:
+        decoded = session_new.decode(old_format_data)
+        print(f"Successfully decoded old format with new session: {decoded}")
+        return True
+    except Exception as e:
+        print(f"Failed to decode old format with new session: {e}")
+        import traceback
+        traceback.print_exc()
+        return False
+
+if __name__ == '__main__':
+    print("=" * 60)
+    success1 = test_session_encoding_decoding()
+    success2 = test_legacy_session_decoding()
+    success3 = test_mixed_environment()
+    
+    print("=" * 60)
+    if success1 and success2 and success3:
+        print("✓ All tests passed!")
+        sys.exit(0)
+    else:
+        print("✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/reproduce_specific_issue.py b/reproduce_specific_issue.py
new file mode 100644
index 0000000000..d9f3cd6aac
--- /dev/null
+++ b/reproduce_specific_issue.py
@@ -0,0 +1,118 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the specific issue mentioned in the GitHub issue.
+The issue is that during transition to Django 3.1, when DEFAULT_HASHING_ALGORITHM
+is set to 'sha1', sessions created with different Django versions might not be
+compatible.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.sessions.backends.base import SessionBase
+from django.core import signing
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key-for-session-testing',
+        DEFAULT_HASHING_ALGORITHM='sha1',  # This should trigger the legacy behavior
+        INSTALLED_APPS=[
+            'django.contrib.sessions',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_cross_version_compatibility():
+    """Test compatibility between different Django versions during transition"""
+    print("Testing cross-version session compatibility...")
+    print(f"Current DEFAULT_HASHING_ALGORITHM: {settings.DEFAULT_HASHING_ALGORITHM}")
+    
+    # Simulate session data created by Django 3.0 (old format)
+    session_30 = SessionBase()
+    test_data = {'version': '3.0', 'user': 'test_user'}
+    
+    # Create session data using the old format (pre-Django 3.1)
+    import base64
+    from django.utils.crypto import salted_hmac
+    
+    serialized = session_30.serializer().dumps(test_data)
+    key_salt = "django.contrib.sessions" + session_30.__class__.__name__
+    hmac_digest = salted_hmac(key_salt, serialized).hexdigest()
+    
+    # Old format session data (Django 3.0)
+    django_30_session_data = base64.b64encode(
+        f"{hmac_digest}:".encode() + serialized
+    ).decode('ascii')
+    
+    print(f"Django 3.0 session data: {django_30_session_data[:100]}...")
+    
+    # Simulate session data created by Django 3.1 (new format)
+    # This should use the signing module with DEFAULT_HASHING_ALGORITHM='sha1'
+    session_31 = SessionBase()
+    session_31['version'] = '3.1'
+    session_31['user'] = 'test_user'
+    
+    django_31_session_data = session_31.encode(session_31._session)
+    print(f"Django 3.1 session data: {django_31_session_data[:100]}...")
+    
+    # Now test if Django 3.1 can decode Django 3.0 sessions
+    try:
+        decoded_30 = session_31.decode(django_30_session_data)
+        print(f"Django 3.1 decoded Django 3.0 session: {decoded_30}")
+        success_30_to_31 = True
+    except Exception as e:
+        print(f"Django 3.1 failed to decode Django 3.0 session: {e}")
+        success_30_to_31 = False
+    
+    # Test if Django 3.0 can decode Django 3.1 sessions
+    try:
+        # For this test, we need to simulate Django 3.0's decoding logic
+        # Since we don't have the actual Django 3.0 code, we'll use the legacy decode
+        decoded_31 = session_30._legacy_decode(django_31_session_data)
+        print(f"Django 3.0 decoded Django 3.1 session: {decoded_31}")
+        success_31_to_30 = True
+    except Exception as e:
+        print(f"Django 3.0 failed to decode Django 3.1 session: {e}")
+        success_31_to_30 = False
+    
+    return success_30_to_31 and success_31_to_30
+
+def test_signing_with_sha1():
+    """Test signing behavior when DEFAULT_HASHING_ALGORITHM is set to 'sha1'"""
+    print("\nTesting signing with DEFAULT_HASHING_ALGORITHM='sha1'...")
+    
+    # Test that signing uses sha1 when DEFAULT_HASHING_ALGORITHM is set to 'sha1'
+    value = 'test_value'
+    
+    # Sign with the current settings
+    signed_value = signing.dumps(value)
+    print(f"Signed value: {signed_value}")
+    
+    # Try to unsign
+    try:
+        unsigned_value = signing.loads(signed_value)
+        print(f"Successfully unsigned: {unsigned_value}")
+        return True
+    except Exception as e:
+        print(f"Failed to unsign: {e}")
+        return False
+
+if __name__ == '__main__':
+    print("=" * 60)
+    success1 = test_cross_version_compatibility()
+    success2 = test_signing_with_sha1()
+    
+    print("=" * 60)
+    if success1 and success2:
+        print("✓ All tests passed!")
+        sys.exit(0)
+    else:
+        print("✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_sha256.py b/test_sha256.py
new file mode 100644
index 0000000000..dd3eb96c03
--- /dev/null
+++ b/test_sha256.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Test that the fix doesn't break anything when DEFAULT_HASHING_ALGORITHM is 'sha256'
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.sessions.backends.base import SessionBase
+
+# Configure Django settings with default algorithm
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key-for-session-testing',
+        DEFAULT_HASHING_ALGORITHM='sha256',  # Default value
+        INSTALLED_APPS=[
+            'django.contrib.sessions',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_sha256_encoding():
+    """Test that sessions work correctly with DEFAULT_HASHING_ALGORITHM='sha256'"""
+    print("Testing session encoding/decoding with DEFAULT_HASHING_ALGORITHM='sha256'")
+    print(f"Current DEFAULT_HASHING_ALGORITHM: {settings.DEFAULT_HASHING_ALGORITHM}")
+    
+    # Create a test session
+    session = SessionBase()
+    session['test_key'] = 'test_value'
+    session['user_id'] = 123
+    
+    # Encode the session using the current method
+    encoded_data = session.encode(session._session)
+    print(f"Encoded session data: {encoded_data[:100]}...")
+    
+    # Try to decode it back
+    try:
+        decoded_data = session.decode(encoded_data)
+        print(f"Successfully decoded session: {decoded_data}")
+        return True
+    except Exception as e:
+        print(f"Failed to decode session: {e}")
+        return False
+
+if __name__ == '__main__':
+    print("=" * 60)
+    success = test_sha256_encoding()
+    
+    print("=" * 60)
+    if success:
+        print("✓ Test passed!")
+        sys.exit(0)
+    else:
+        print("✗ Test failed!")
+        sys.exit(1)
\ No newline at end of file
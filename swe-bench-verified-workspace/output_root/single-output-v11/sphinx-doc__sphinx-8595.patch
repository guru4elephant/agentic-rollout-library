diff --git a/check_default_config.py b/check_default_config.py
new file mode 100644
index 000000000..b6e0a0010
--- /dev/null
+++ b/check_default_config.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+"""
+Check the default configuration values for autodoc.
+"""
+
+from sphinx.config import Config
+
+# Create a minimal config to check defaults
+config = Config({})
+
+# Check if autodoc_default_options exists
+if hasattr(config, 'autodoc_default_options'):
+    print(f"autodoc_default_options: {config.autodoc_default_options}")
+else:
+    print("autodoc_default_options not found in config")
+
+# Check all config values related to autodoc
+autodoc_configs = [
+    'autodoc_default_options',
+    'autodoc_member_order', 
+    'autodoc_docstring_signature',
+    'autodoc_mock_imports',
+    'autodoc_typehints',
+    'autodoc_warningiserror'
+]
+
+for config_name in autodoc_configs:
+    if hasattr(config, config_name):
+        print(f"{config_name}: {getattr(config, config_name)}")
+    else:
+        print(f"{config_name}: Not found")
\ No newline at end of file
diff --git a/conf.py b/conf.py
new file mode 100644
index 000000000..a695d1804
--- /dev/null
+++ b/conf.py
@@ -0,0 +1 @@
+extensions = ['sphinx.ext.autodoc']
diff --git a/debug_build.py b/debug_build.py
new file mode 100644
index 000000000..2a1ec20b5
--- /dev/null
+++ b/debug_build.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+Debug the actual build process to see what options are being used.
+"""
+
+import tempfile
+import os
+import sys
+import subprocess
+
+# Create temporary directory for our test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create example.py with empty __all__
+    example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+    with open(os.path.join(tmpdir, 'example.py'), 'w') as f:
+        f.write(example_content)
+    
+    # Create conf.py
+    conf_content = '''extensions = ['sphinx.ext.autodoc']
+'''
+    with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    # Create index.rst with automodule directive
+    index_content = '''Test Module
+===========
+
+.. automodule:: example
+   :members:
+'''
+    with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:
+        f.write(index_content)
+    
+    # Add the temporary directory to Python path
+    sys.path.insert(0, tmpdir)
+    
+    # Now let's patch the ModuleDocumenter to debug what's happening
+    from sphinx.ext.autodoc import ModuleDocumenter
+    original_import_object = ModuleDocumenter.import_object
+    
+    def debug_import_object(self, raiseerror=False):
+        print(f"DEBUG: import_object called")
+        print(f"DEBUG: options = {getattr(self, 'options', 'Not set')}")
+        if hasattr(self, 'options'):
+            print(f"DEBUG: ignore_module_all = {getattr(self.options, 'ignore_module_all', 'Not set')}")
+        result = original_import_object(self, raiseerror)
+        print(f"DEBUG: __all__ = {getattr(self, '__all__', 'Not set')}")
+        return result
+    
+    ModuleDocumenter.import_object = debug_import_object
+    
+    # Now run sphinx-build
+    build_dir = os.path.join(tmpdir, '_build')
+    
+    # Run sphinx-build
+    result = subprocess.run([
+        'python', '-m', 'sphinx',
+        '-b', 'html',
+        '-D', 'extensions=sphinx.ext.autodoc',
+        tmpdir,
+        build_dir
+    ], capture_output=True, text=True, cwd='.')
+    
+    print("Sphinx build output:")
+    print("STDOUT:", result.stdout)
+    print("STDERR:", result.stderr)
+    print("Return code:", result.returncode)
\ No newline at end of file
diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 000000000..2bdf85f17
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+"""
+Debug test to understand what's happening during the Sphinx build process.
+"""
+
+import tempfile
+import os
+import sys
+
+# Create temporary directory for our test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create example.py with empty __all__
+    example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+    with open(os.path.join(tmpdir, 'example.py'), 'w') as f:
+        f.write(example_content)
+    
+    # Add the temporary directory to Python path
+    sys.path.insert(0, tmpdir)
+    
+    # Import the example module
+    import example
+    
+    # Now let's test the ModuleDocumenter directly
+    from sphinx.ext.autodoc import ModuleDocumenter
+    
+    # Create a minimal mock environment and directive
+    from docutils.utils import new_document
+    from docutils.parsers.rst import Parser
+    from docutils.frontend import OptionParser
+    from docutils import nodes
+    
+    class MockDirective:
+        def __init__(self):
+            self.filename_set = set()
+    
+    class MockEnv:
+        def __init__(self):
+            self.temp_data = {}
+            self.config = type('MockConfig', (), {})()
+    
+    # Create a mock documenter
+    documenter = ModuleDocumenter.__new__(ModuleDocumenter)
+    documenter.directive = MockDirective()
+    documenter.env = MockEnv()
+    documenter.name = 'example'
+    documenter.objpath = []
+    documenter.modname = 'example'
+    documenter.object = example
+    documenter.options = type('MockOptions', (), {'members': 'ALL'})()
+    
+    # Set up the __all__ attribute
+    documenter.__all__ = getattr(example, '__all__', None)
+    
+    print(f"__all__ value: {documenter.__all__}")
+    print(f"__all__ type: {type(documenter.__all__)}")
+    print(f"__all__ is None: {documenter.__all__ is None}")
+    print(f"__all__ is empty: {not documenter.__all__}")
+    
+    # Mock the get_module_members method
+    def mock_get_module_members():
+        members = {}
+        for name in ['foo', 'bar', 'baz']:
+            if hasattr(documenter.object, name):
+                member = type('MockMember', (), {
+                    '__name__': name,
+                    'skipped': False
+                })()
+                members[name] = member
+        return members
+    
+    documenter.get_module_members = mock_get_module_members
+    
+    # Test the get_object_members method
+    want_all = True
+    members_check_module, members = documenter.get_object_members(want_all)
+    
+    print(f"Members check module: {members_check_module}")
+    print(f"Number of members returned: {len(members)}")
+    print(f"Members: {[getattr(m, '__name__', str(m)) for m in members]}")
\ No newline at end of file
diff --git a/example.py b/example.py
new file mode 100644
index 000000000..00c66c720
--- /dev/null
+++ b/example.py
@@ -0,0 +1,13 @@
+__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..3d985f440
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,106 @@
+#!/usr/bin/env python3
+"""
+Final test to verify the fix works with actual Sphinx environment.
+"""
+
+import tempfile
+import os
+import sys
+
+# Create temporary directory for our test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create example.py with empty __all__
+    example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+    with open(os.path.join(tmpdir, 'example.py'), 'w') as f:
+        f.write(example_content)
+    
+    # Create conf.py
+    conf_content = '''extensions = ['sphinx.ext.autodoc']
+'''
+    with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    # Create index.rst with automodule directive
+    index_content = '''Test Module
+===========
+
+.. automodule:: example
+   :members:
+'''
+    with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:
+        f.write(index_content)
+    
+    # Add the temporary directory to Python path
+    sys.path.insert(0, tmpdir)
+    
+    # Import the example module
+    import example
+    
+    # Now let's create a proper Sphinx environment to test
+    from sphinx.application import Sphinx
+    from sphinx.util.docutils import docutils_namespace
+    
+    # Create Sphinx app
+    srcdir = tmpdir
+    outdir = os.path.join(tmpdir, '_build')
+    doctreedir = os.path.join(tmpdir, '_doctrees')
+    confdir = tmpdir
+    
+    with docutils_namespace():
+        app = Sphinx(srcdir, confdir, outdir, doctreedir, 'html')
+        
+        # Get the documenter for the automodule directive
+        from sphinx.ext.autodoc import ModuleDocumenter
+        
+        # Create a documenter bridge to get the proper options
+        from sphinx.ext.autodoc.directive import DocumenterBridge
+        from docutils.utils import new_document
+        from docutils.parsers.rst.states import RSTState
+        
+        # Create a minimal state
+        state = RSTState(new_document('test'))
+        
+        # Create documenter bridge with proper options
+        bridge = DocumenterBridge(app.env, app.env.reporter, {}, 1, state)
+        
+        # Create the ModuleDocumenter
+        documenter = ModuleDocumenter(bridge, 'example')
+        
+        # Import the object
+        if not documenter.import_object():
+            print("FAILURE: Could not import object")
+            sys.exit(1)
+        
+        # Check the __all__ value
+        print(f"__all__ value: {documenter.__all__}")
+        print(f"__all__ type: {type(documenter.__all__)}")
+        print(f"__all__ is None: {documenter.__all__ is None}")
+        print(f"__all__ is empty: {not documenter.__all__}")
+        
+        # Test the get_object_members method
+        want_all = True
+        members_check_module, members = documenter.get_object_members(want_all)
+        
+        print(f"Members check module: {members_check_module}")
+        print(f"Number of members returned: {len(members)}")
+        print(f"Members: {[getattr(m, '__name__', str(m)) for m in members]}")
+        
+        # The fix should result in no members when __all__ is empty
+        if len(members) == 0:
+            print("SUCCESS: No members returned when __all__ is empty")
+        else:
+            print(f"FAILURE: Expected 0 members, got {len(members)}")
+            sys.exit(1)
\ No newline at end of file
diff --git a/index.rst b/index.rst
new file mode 100644
index 000000000..596030e3a
--- /dev/null
+++ b/index.rst
@@ -0,0 +1,5 @@
+Test Module
+===========
+
+.. automodule:: example
+   :members:
diff --git a/minimal_test.py b/minimal_test.py
new file mode 100644
index 000000000..4c0d823d1
--- /dev/null
+++ b/minimal_test.py
@@ -0,0 +1,164 @@
+#!/usr/bin/env python3
+"""
+Minimal test to verify the fix for empty __all__ issue.
+"""
+
+import sys
+import os
+
+# Add the current directory to Python path so we can import sphinx
+sys.path.insert(0, '.')
+
+# Create a simple module with empty __all__
+module_code = '''
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+'''
+
+# Create the module dynamically
+import types
+example_module = types.ModuleType('example')
+exec(module_code, example_module.__dict__)
+
+# Test the ModuleDocumenter logic directly
+from sphinx.ext.autodoc import ModuleDocumenter
+
+# Create a mock documenter to test the get_object_members method
+class MockDocumenter(ModuleDocumenter):
+    def __init__(self):
+        self.object = example_module
+        self.__all__ = getattr(example_module, '__all__', None)
+        # Mock the options to simulate the :members: directive
+        self.options = type('MockOptions', (), {'members': 'ALL'})()
+    
+    def get_module_members(self):
+        # Return a mock members dict
+        members = {}
+        for name in ['foo', 'bar', 'baz']:
+            if hasattr(self.object, name):
+                member = type('MockMember', (), {
+                    '__name__': name,
+                    'skipped': False
+                })()
+                members[name] = member
+        return members
+
+# Test the fix
+documenter = MockDocumenter()
+want_all = True
+members_check_module, members = documenter.get_object_members(want_all)
+
+print(f"__all__ value: {documenter.__all__}")
+print(f"__all__ type: {type(documenter.__all__)}")
+print(f"__all__ is None: {documenter.__all__ is None}")
+print(f"__all__ is empty: {not documenter.__all__}")
+print(f"Members check module: {members_check_module}")
+print(f"Number of members returned: {len(members)}")
+print(f"Members: {[getattr(m, '__name__', str(m)) for m in members]}")
+
+# The fix should result in no members when __all__ is empty
+if len(members) == 0:
+    print("SUCCESS: No members returned when __all__ is empty")
+else:
+    print(f"FAILURE: Expected 0 members, got {len(members)}")
+    sys.exit(1)
+
+# Test with non-empty __all__
+module_code2 = '''
+__all__ = ['foo', 'bar']
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+'''
+
+example_module2 = types.ModuleType('example2')
+exec(module_code2, example_module2.__dict__)
+
+class MockDocumenter2(ModuleDocumenter):
+    def __init__(self):
+        self.object = example_module2
+        self.__all__ = getattr(example_module2, '__all__', None)
+        self.options = type('MockOptions', (), {'members': 'ALL'})()
+    
+    def get_module_members(self):
+        members = {}
+        for name in ['foo', 'bar', 'baz']:
+            if hasattr(self.object, name):
+                member = type('MockMember', (), {
+                    '__name__': name,
+                    'skipped': False
+                })()
+                members[name] = member
+        return members
+
+documenter2 = MockDocumenter2()
+members_check_module2, members2 = documenter2.get_object_members(want_all)
+
+print(f"\nWith non-empty __all__:")
+print(f"__all__ value: {documenter2.__all__}")
+print(f"Number of members returned: {len(members2)}")
+print(f"Members: {[getattr(m, '__name__', str(m)) for m in members2]}")
+
+if len(members2) == 3:  # Should return all members but mark baz as skipped
+    print("SUCCESS: All members returned but non-__all__ members should be skipped")
+else:
+    print(f"FAILURE: Expected 3 members, got {len(members2)}")
+
+# Test with no __all__ defined
+module_code3 = '''
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+'''
+
+example_module3 = types.ModuleType('example3')
+exec(module_code3, example_module3.__dict__)
+
+class MockDocumenter3(ModuleDocumenter):
+    def __init__(self):
+        self.object = example_module3
+        self.__all__ = getattr(example_module3, '__all__', None)
+        self.options = type('MockOptions', (), {'members': 'ALL'})()
+    
+    def get_module_members(self):
+        members = {}
+        for name in ['foo', 'bar', 'baz']:
+            if hasattr(self.object, name):
+                member = type('MockMember', (), {
+                    '__name__': name,
+                    'skipped': False
+                })()
+                members[name] = member
+        return members
+
+documenter3 = MockDocumenter3()
+members_check_module3, members3 = documenter3.get_object_members(want_all)
+
+print(f"\nWith no __all__ defined:")
+print(f"__all__ value: {documenter3.__all__}")
+print(f"Number of members returned: {len(members3)}")
+print(f"Members: {[getattr(m, '__name__', str(m)) for m in members3]}")
+
+if len(members3) == 3:  # Should return all members when __all__ is not defined
+    print("SUCCESS: All members returned when __all__ is not defined")
+else:
+    print(f"FAILURE: Expected 3 members, got {len(members3)}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..707f43f68
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with empty __all__ being ignored by autodoc.
+"""
+
+# Create the example module with empty __all__
+example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+
+with open('example.py', 'w') as f:
+    f.write(example_content)
+
+# Create a minimal sphinx configuration
+conf_content = '''extensions = ['sphinx.ext.autodoc']
+'''
+
+with open('conf.py', 'w') as f:
+    f.write(conf_content)
+
+# Create the index.rst
+index_content = '''Test Module
+===========
+
+.. automodule:: example
+   :members:
+'''
+
+with open('index.rst', 'w') as f:
+    f.write(index_content)
+
+print("Created test files: example.py, conf.py, index.rst")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/simple_option_test.py b/simple_option_test.py
new file mode 100644
index 000000000..558f30bc6
--- /dev/null
+++ b/simple_option_test.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+"""
+Simple test to check the default value of ignore-module-all option.
+"""
+
+from sphinx.ext.autodoc import ModuleDocumenter
+
+# Check the default option values
+print("ModuleDocumenter option_spec:")
+print(ModuleDocumenter.option_spec)
+
+# Check if ignore-module-all has a default value
+if 'ignore-module-all' in ModuleDocumenter.option_spec:
+    print(f"ignore-module-all option spec: {ModuleDocumenter.option_spec['ignore-module-all']}")
+else:
+    print("ignore-module-all option not found in option_spec")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 000000000..4d6becf16
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify the fix for empty __all__ issue.
+"""
+
+import sys
+import os
+
+# Add the current directory to Python path so we can import sphinx
+sys.path.insert(0, '.')
+
+# Create a simple module with empty __all__
+module_code = '''
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+'''
+
+# Create the module dynamically
+import types
+example_module = types.ModuleType('example')
+exec(module_code, example_module.__dict__)
+
+# Now test the ModuleDocumenter logic directly
+from sphinx.ext.autodoc import ModuleDocumenter
+
+# Create a mock documenter to test the get_object_members method
+class MockDocumenter(ModuleDocumenter):
+    def __init__(self):
+        self.object = example_module
+        self.__all__ = getattr(example_module, '__all__', None)
+    
+    def get_module_members(self):
+        # Return a mock members dict
+        members = {}
+        for name in ['foo', 'bar', 'baz']:
+            if hasattr(self.object, name):
+                member = types.FunctionType(getattr(self.object, name).__code__, {})
+                member.__name__ = name
+                members[name] = type('MockMember', (), {
+                    '__name__': name,
+                    'skipped': False
+                })()
+        return members
+
+# Test the fix
+documenter = MockDocumenter()
+want_all = True
+members_check_module, members = documenter.get_object_members(want_all)
+
+print(f"Members check module: {members_check_module}")
+print(f"Number of members returned: {len(members)}")
+print(f"Members: {[getattr(m, '__name__', str(m)) for m in members]}")
+
+# The fix should result in no members when __all__ is empty
+if len(members) == 0:
+    print("SUCCESS: No members returned when __all__ is empty")
+else:
+    print(f"FAILURE: Expected 0 members, got {len(members)}")
+    sys.exit(1)
\ No newline at end of file
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index d85d79617..ad60a6db9 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1074,10 +1074,13 @@ class ModuleDocumenter(Documenter):
     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         members = self.get_module_members()
         if want_all:
-            if not self.__all__:
+            if self.__all__ is None:
                 # for implicit module members, check __module__ to avoid
                 # documenting imported objects
                 return True, list(members.values())
+            elif not self.__all__:
+                # empty __all__ means no members should be documented
+                return False, []
             else:
                 for member in members.values():
                     if member.__name__ not in self.__all__:
diff --git a/test_end_to_end.py b/test_end_to_end.py
new file mode 100644
index 000000000..b8da25ca1
--- /dev/null
+++ b/test_end_to_end.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+End-to-end test to verify the fix for the empty __all__ issue.
+This test simulates the exact scenario described in the GitHub issue.
+"""
+
+import tempfile
+import os
+import sys
+import subprocess
+
+# Create temporary directory for our test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create example.py with empty __all__
+    example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+    with open(os.path.join(tmpdir, 'example.py'), 'w') as f:
+        f.write(example_content)
+    
+    # Create conf.py
+    conf_content = '''extensions = ['sphinx.ext.autodoc']
+'''
+    with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    # Create index.rst with automodule directive
+    index_content = '''Test Module
+===========
+
+.. automodule:: example
+   :members:
+'''
+    with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:
+        f.write(index_content)
+    
+    # Add the temporary directory to Python path
+    sys.path.insert(0, tmpdir)
+    
+    # Import the example module to verify it exists
+    try:
+        import example
+        print("Successfully imported example module")
+    except ImportError as e:
+        print(f"Failed to import example module: {e}")
+        sys.exit(1)
+    
+    # Now test using sphinx-build to generate documentation
+    # This will show us if the fix works in the actual Sphinx build process
+    build_dir = os.path.join(tmpdir, '_build')
+    
+    # Run sphinx-build
+    result = subprocess.run([
+        'python', '-m', 'sphinx',
+        '-b', 'html',
+        '-D', 'extensions=sphinx.ext.autodoc',
+        tmpdir,
+        build_dir
+    ], capture_output=True, text=True, cwd='.')
+    
+    print("Sphinx build output:")
+    print("STDOUT:", result.stdout)
+    print("STDERR:", result.stderr)
+    print("Return code:", result.returncode)
+    
+    # Check if the build was successful
+    if result.returncode == 0:
+        print("Sphinx build completed successfully")
+        
+        # Check if the generated HTML contains the functions (which it shouldn't)
+        index_html = os.path.join(build_dir, 'index.html')
+        if os.path.exists(index_html):
+            with open(index_html, 'r') as f:
+                html_content = f.read()
+            
+            # The functions should NOT appear in the documentation
+            functions_found = []
+            for func in ['foo', 'bar', 'baz']:
+                if func in html_content:
+                    functions_found.append(func)
+            
+            if not functions_found:
+                print("SUCCESS: No functions found in documentation (empty __all__ respected)")
+            else:
+                print(f"FAILURE: Functions found in documentation: {functions_found}")
+                sys.exit(1)
+        else:
+            print("FAILURE: index.html not found")
+            sys.exit(1)
+    else:
+        print("FAILURE: Sphinx build failed")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_explicit_option.py b/test_explicit_option.py
new file mode 100644
index 000000000..a9ffcfa40
--- /dev/null
+++ b/test_explicit_option.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+"""
+Test to see if explicitly setting ignore-module-all: False fixes the issue.
+"""
+
+import tempfile
+import os
+import sys
+import subprocess
+
+# Create temporary directory for our test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create example.py with empty __all__
+    example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+    with open(os.path.join(tmpdir, 'example.py'), 'w') as f:
+        f.write(example_content)
+    
+    # Create conf.py
+    conf_content = '''extensions = ['sphinx.ext.autodoc']
+'''
+    with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    # Create index.rst with automodule directive and explicit ignore-module-all: False
+    index_content = '''Test Module
+===========
+
+.. automodule:: example
+   :members:
+   :ignore-module-all: False
+'''
+    with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:
+        f.write(index_content)
+    
+    # Add the temporary directory to Python path
+    sys.path.insert(0, tmpdir)
+    
+    # Import the example module to verify it exists
+    try:
+        import example
+        print("Successfully imported example module")
+    except ImportError as e:
+        print(f"Failed to import example module: {e}")
+        sys.exit(1)
+    
+    # Now test using sphinx-build to generate documentation
+    build_dir = os.path.join(tmpdir, '_build')
+    
+    # Run sphinx-build
+    result = subprocess.run([
+        'python', '-m', 'sphinx',
+        '-b', 'html',
+        '-D', 'extensions=sphinx.ext.autodoc',
+        tmpdir,
+        build_dir
+    ], capture_output=True, text=True, cwd='.')
+    
+    print("Sphinx build output:")
+    print("STDOUT:", result.stdout)
+    print("STDERR:", result.stderr)
+    print("Return code:", result.returncode)
+    
+    # Check if the build was successful
+    if result.returncode == 0:
+        print("Sphinx build completed successfully")
+        
+        # Check if the generated HTML contains the functions (which it shouldn't)
+        index_html = os.path.join(build_dir, 'index.html')
+        if os.path.exists(index_html):
+            with open(index_html, 'r') as f:
+                html_content = f.read()
+            
+            # The functions should NOT appear in the documentation
+            functions_found = []
+            for func in ['foo', 'bar', 'baz']:
+                if func in html_content:
+                    functions_found.append(func)
+            
+            if not functions_found:
+                print("SUCCESS: No functions found in documentation (empty __all__ respected)")
+            else:
+                print(f"FAILURE: Functions found in documentation: {functions_found}")
+                sys.exit(1)
+        else:
+            print("FAILURE: index.html not found")
+            sys.exit(1)
+    else:
+        print("FAILURE: Sphinx build failed")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..602f8a345
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for empty __all__ issue.
+"""
+
+import sys
+import os
+
+# Add the current directory to Python path so we can import sphinx
+sys.path.insert(0, '.')
+
+from sphinx.ext.autodoc import ModuleDocumenter
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+from io import StringIO
+import tempfile
+
+# Create a temporary directory for our test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create the example module
+    example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+
+    with open(os.path.join(tmpdir, 'example.py'), 'w') as f:
+        f.write(example_content)
+    
+    # Add the temporary directory to Python path
+    sys.path.insert(0, tmpdir)
+    
+    # Create a minimal Sphinx app
+    srcdir = tmpdir
+    outdir = os.path.join(tmpdir, '_build')
+    doctreedir = os.path.join(tmpdir, '_doctrees')
+    confdir = tmpdir
+    
+    # Create a minimal conf.py
+    conf_content = '''extensions = ['sphinx.ext.autodoc']
+'''
+    with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    # Create the app
+    app = Sphinx(srcdir, confdir, outdir, doctreedir, 'html')
+    
+    # Import the example module
+    import example
+    
+    # Create a ModuleDocumenter
+    documenter = ModuleDocumenter(app.env.get_and_resolve_doctree, 'example', None)
+    documenter.objpath = []
+    documenter.object = example
+    documenter.modname = 'example'
+    documenter.options.members = 'ALL'  # This simulates :members: option
+    
+    # Get the members
+    want_all = True
+    members_check_module, members = documenter.get_object_members(want_all)
+    
+    print(f"Members check module: {members_check_module}")
+    print(f"Number of members returned: {len(members)}")
+    print(f"Members: {[m.__name__ for m in members]}")
+    
+    # The fix should result in no members when __all__ is empty
+    if len(members) == 0:
+        print("SUCCESS: No members returned when __all__ is empty")
+    else:
+        print(f"FAILURE: Expected 0 members, got {len(members)}")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_no_all.py b/test_no_all.py
new file mode 100644
index 000000000..4a329afa0
--- /dev/null
+++ b/test_no_all.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+"""
+Test to verify behavior when __all__ is not defined.
+"""
+
+import sys
+import os
+
+# Add the current directory to Python path so we can import sphinx
+sys.path.insert(0, '.')
+
+# Create a simple module without __all__
+module_code = '''
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+'''
+
+# Create the module dynamically
+import types
+example_module = types.ModuleType('example')
+exec(module_code, example_module.__dict__)
+
+# Now test the ModuleDocumenter logic directly
+from sphinx.ext.autodoc import ModuleDocumenter
+
+# Create a mock documenter to test the get_object_members method
+class MockDocumenter(ModuleDocumenter):
+    def __init__(self):
+        self.object = example_module
+        self.__all__ = getattr(example_module, '__all__', None)
+    
+    def get_module_members(self):
+        # Return a mock members dict
+        members = {}
+        for name in ['foo', 'bar', 'baz']:
+            if hasattr(self.object, name):
+                member = types.FunctionType(getattr(self.object, name).__code__, {})
+                member.__name__ = name
+                members[name] = type('MockMember', (), {
+                    '__name__': name,
+                    'skipped': False
+                })()
+        return members
+
+# Test the case where __all__ is not defined
+documenter = MockDocumenter()
+want_all = True
+members_check_module, members = documenter.get_object_members(want_all)
+
+print(f"__all__ value: {documenter.__all__}")
+print(f"Members check module: {members_check_module}")
+print(f"Number of members returned: {len(members)}")
+print(f"Members: {[getattr(m, '__name__', str(m)) for m in members]}")
+
+# When __all__ is None (not defined), should return all members
+if len(members) == 3:
+    print("SUCCESS: All members returned when __all__ is not defined")
+else:
+    print(f"FAILURE: Expected 3 members, got {len(members)}")
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_normal_case.py b/test_normal_case.py
new file mode 100644
index 000000000..de78581e9
--- /dev/null
+++ b/test_normal_case.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""
+Test to verify normal __all__ functionality still works.
+"""
+
+import sys
+import os
+
+# Add the current directory to Python path so we can import sphinx
+sys.path.insert(0, '.')
+
+# Create a simple module with non-empty __all__
+module_code = '''
+__all__ = ['foo', 'bar']
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
+'''
+
+# Create the module dynamically
+import types
+example_module = types.ModuleType('example')
+exec(module_code, example_module.__dict__)
+
+# Now test the ModuleDocumenter logic directly
+from sphinx.ext.autodoc import ModuleDocumenter
+
+# Create a mock documenter to test the get_object_members method
+class MockDocumenter(ModuleDocumenter):
+    def __init__(self):
+        self.object = example_module
+        self.__all__ = getattr(example_module, '__all__', None)
+    
+    def get_module_members(self):
+        # Return a mock members dict
+        members = {}
+        for name in ['foo', 'bar', 'baz']:
+            if hasattr(self.object, name):
+                member = types.FunctionType(getattr(self.object, name).__code__, {})
+                member.__name__ = name
+                members[name] = type('MockMember', (), {
+                    '__name__': name,
+                    'skipped': False
+                })()
+        return members
+
+# Test the normal case
+documenter = MockDocumenter()
+want_all = True
+members_check_module, members = documenter.get_object_members(want_all)
+
+print(f"Members check module: {members_check_module}")
+print(f"Number of members returned: {len(members)}")
+print(f"Members: {[getattr(m, '__name__', str(m)) for m in members]}")
+
+# Should return all members but mark baz as skipped since it's not in __all__
+if len(members) == 3:
+    print("SUCCESS: All members returned but non-__all__ members should be skipped")
+else:
+    print(f"FAILURE: Expected 3 members, got {len(members)}")
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_options.py b/test_options.py
new file mode 100644
index 000000000..9bf216345
--- /dev/null
+++ b/test_options.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""
+Test to check the default value of ignore-module-all option.
+"""
+
+import tempfile
+import os
+import sys
+
+# Create temporary directory for our test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create example.py with empty __all__
+    example_content = '''__all__ = []
+
+
+def foo():
+    "docstring"
+
+
+def bar():
+    "docstring"
+
+
+def baz():
+    "docstring"
+'''
+    with open(os.path.join(tmpdir, 'example.py'), 'w') as f:
+        f.write(example_content)
+    
+    # Add the temporary directory to Python path
+    sys.path.insert(0, tmpdir)
+    
+    # Import the example module
+    import example
+    
+    # Now let's test the ModuleDocumenter directly
+    from sphinx.ext.autodoc import ModuleDocumenter
+    
+    # Create a minimal mock environment and directive
+    class MockDirective:
+        def __init__(self):
+            self.filename_set = set()
+    
+    class MockEnv:
+        def __init__(self):
+            self.temp_data = {}
+            self.config = type('MockConfig', (), {})()
+    
+    # Create a mock documenter
+    documenter = ModuleDocumenter.__new__(ModuleDocumenter)
+    documenter.directive = MockDirective()
+    documenter.env = MockEnv()
+    documenter.name = 'example'
+    documenter.objpath = []
+    documenter.modname = 'example'
+    documenter.object = example
+    
+    # Test with different option values
+    for option_value in [None, True, False]:
+        documenter.options = type('MockOptions', (), {
+            'members': 'ALL',
+            'ignore_module_all': option_value
+        })()
+        
+        # Set up the __all__ attribute by calling import_object
+        documenter.import_object()
+        
+        print(f"ignore_module_all: {option_value}")
+        print(f"__all__ value: {documenter.__all__}")
+        print(f"__all__ type: {type(documenter.__all__)}")
+        print(f"__all__ is None: {documenter.__all__ is None}")
+        print(f"__all__ is empty: {not documenter.__all__}")
+        print()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
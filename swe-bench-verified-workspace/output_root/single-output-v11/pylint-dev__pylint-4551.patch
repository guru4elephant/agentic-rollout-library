diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py
index 8fa122022..8fe2a014e 100644
--- a/pylint/pyreverse/inspector.py
+++ b/pylint/pyreverse/inspector.py
@@ -218,7 +218,24 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
                     self.visit_module(frame)
 
             current = frame.locals_type[node.name]
-            values = set(node.infer())
+            
+            # Check if this is a function parameter with type annotation
+            values = set()
+            if isinstance(node.parent, astroid.node_classes.Arguments):
+                # This is a function parameter, check for type annotation
+                args_node = node.parent
+                arg_index = args_node.args.index(node)
+                if arg_index < len(args_node.annotations) and args_node.annotations[arg_index]:
+                    # Use the type annotation instead of inferring from default value
+                    annotation = args_node.annotations[arg_index]
+                    values = set(annotation.infer())
+                else:
+                    # No annotation, use default inference
+                    values = set(node.infer())
+            else:
+                # Not a function parameter, use default inference
+                values = set(node.infer())
+            
             frame.locals_type[node.name] = list(set(current) | values)
         except astroid.InferenceError:
             pass
@@ -231,6 +248,26 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
         """
         try:
             values = set(node.infer())
+            
+            # Check if this assignment is setting an instance attribute from a function parameter
+            # with type annotation (e.g., self.a = a where a: str = None)
+            if isinstance(node.parent, astroid.Assign):
+                assign_node = node.parent
+                if isinstance(assign_node.value, astroid.Name):
+                    # The value is a name reference, check if it's a function parameter
+                    value_name = assign_node.value.name
+                    func_frame = assign_node.value.frame()
+                    if isinstance(func_frame, astroid.FunctionDef):
+                        # Check if this name is a parameter with type annotation
+                        for i, param in enumerate(func_frame.args.args):
+                            if param.name == value_name:
+                                # This is a function parameter, check for annotation
+                                if i < len(func_frame.args.annotations) and func_frame.args.annotations[i]:
+                                    annotation = func_frame.args.annotations[i]
+                                    # Use the annotation type instead of inferred value
+                                    values = set(annotation.infer())
+                                break
+            
             current = set(parent.instance_attrs_type[node.attrname])
             parent.instance_attrs_type[node.attrname] = list(current | values)
         except astroid.InferenceError:
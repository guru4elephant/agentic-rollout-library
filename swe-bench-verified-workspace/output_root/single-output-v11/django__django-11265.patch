diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e6b725b32d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, FilteredRelation
+
+# Create a simple test model that matches the test structure
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='books', related_query_name='book')
+    
+    class Meta:
+        app_label = 'test'
+
+print("Testing exclude on annotated FilteredRelation...")
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+
+# Check available fields now
+print('Author fields:', [f.name for f in Author._meta.get_fields()])
+print('Author reverse relations:', [f.name for f in Author._meta.related_objects])
+
+try:
+    # Create test data
+    author1 = Author.objects.create(name='Alice')
+    author2 = Author.objects.create(name='Bob')
+    Book.objects.create(title='Poem by Alice', author=author1)
+    Book.objects.create(title='Story by Bob', author=author2)
+
+    # This should work (filter)
+    result1 = Author.objects.annotate(
+        book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+    ).filter(book_alice__isnull=False)
+    print(f"Filter result: {list(result1)}")
+    
+    # This should fail (exclude) - the reported issue
+    result2 = Author.objects.annotate(
+        book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+    ).exclude(book_alice__isnull=False)
+    print(f"Exclude result: {list(result2)}")
+    
+except Exception as e:
+    print(f"Error occurred: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
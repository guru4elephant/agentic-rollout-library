diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..6fd938351
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+
+from sklearn.datasets import make_multilabel_classification
+from sklearn.multioutput import MultiOutputClassifier
+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
+from sklearn.model_selection import cross_val_predict
+
+# Create test data
+X, Y = make_multilabel_classification()
+
+# Create MultiOutputClassifier
+mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())
+
+print("Testing cross_val_predict with method='predict'...")
+try:
+    pred = cross_val_predict(mo_lda, X, Y, cv=5)  # This should work fine
+    print("✓ predict method works")
+except Exception as e:
+    print(f"✗ predict method failed: {e}")
+
+print("\nTesting cross_val_predict with method='predict_proba'...")
+try:
+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')  # This should fail
+    print("✓ predict_proba method works")
+except Exception as e:
+    print(f"✗ predict_proba method failed: {e}")
+
+# Let's also check the structure of MultiOutputClassifier
+print("\nMultiOutputClassifier attributes:")
+print(f"Has classes_ attribute: {hasattr(mo_lda, 'classes_')}")
+print(f"Has estimators_ attribute: {hasattr(mo_lda, 'estimators_')}")
+
+if hasattr(mo_lda, 'estimators_'):
+    print(f"Number of estimators: {len(mo_lda.estimators_)}")
+    for i, estimator in enumerate(mo_lda.estimators_):
+        print(f"Estimator {i} has classes_: {hasattr(estimator, 'classes_')}")
\ No newline at end of file
diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py
index 95669a212..3bf54cf1e 100644
--- a/sklearn/model_selection/_validation.py
+++ b/sklearn/model_selection/_validation.py
@@ -855,10 +855,17 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,
     predictions = func(X_test)
     if method in ['decision_function', 'predict_proba', 'predict_log_proba']:
         if isinstance(predictions, list):
-            predictions = [_enforce_prediction_order(
-                estimator.classes_[i_label], predictions[i_label],
-                n_classes=len(set(y[:, i_label])), method=method)
-                for i_label in range(len(predictions))]
+            # Handle MultiOutputClassifier case
+            if hasattr(estimator, 'estimators_') and len(estimator.estimators_) == len(predictions):
+                predictions = [_enforce_prediction_order(
+                    estimator.estimators_[i_label].classes_, predictions[i_label],
+                    n_classes=len(set(y[:, i_label])), method=method)
+                    for i_label in range(len(predictions))]
+            else:
+                predictions = [_enforce_prediction_order(
+                    estimator.classes_[i_label], predictions[i_label],
+                    n_classes=len(set(y[:, i_label])), method=method)
+                    for i_label in range(len(predictions))]
         else:
             # A 2D y array should be a binary label indicator matrix
             n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..ea34d7bf7
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+from sklearn.datasets import make_multilabel_classification
+from sklearn.multioutput import MultiOutputClassifier
+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
+from sklearn.model_selection import cross_val_predict
+from sklearn.ensemble import RandomForestClassifier
+import numpy as np
+
+print("=== Test 1: MultiOutputClassifier with LinearDiscriminantAnalysis ===")
+X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2)
+mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())
+
+try:
+    pred = cross_val_predict(mo_lda, X, Y, cv=3)
+    print("✓ predict method works")
+except Exception as e:
+    print(f"✗ predict method failed: {e}")
+
+try:
+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=3, method='predict_proba')
+    print("✓ predict_proba method works")
+    print(f"Shape of predict_proba output: {len(pred_proba)} outputs")
+    for i, p in enumerate(pred_proba):
+        print(f"  Output {i}: shape {p.shape}")
+except Exception as e:
+    print(f"✗ predict_proba method failed: {e}")
+
+print("\n=== Test 2: MultiOutputClassifier with RandomForestClassifier ===")
+mo_rf = MultiOutputClassifier(RandomForestClassifier(n_estimators=10))
+
+try:
+    pred = cross_val_predict(mo_rf, X, Y, cv=3)
+    print("✓ predict method works")
+except Exception as e:
+    print(f"✗ predict method failed: {e}")
+
+try:
+    pred_proba = cross_val_predict(mo_rf, X, Y, cv=3, method='predict_proba')
+    print("✓ predict_proba method works")
+    print(f"Shape of predict_proba output: {len(pred_proba)} outputs")
+    for i, p in enumerate(pred_proba):
+        print(f"  Output {i}: shape {p.shape}")
+except Exception as e:
+    print(f"✗ predict_proba method failed: {e}")
+
+print("\n=== Test 3: Regular classifier (should still work) ===")
+rf = RandomForestClassifier(n_estimators=10)
+
+try:
+    pred = cross_val_predict(rf, X, Y[:, 0], cv=3)  # Single output
+    print("✓ predict method works")
+except Exception as e:
+    print(f"✗ predict method failed: {e}")
+
+try:
+    pred_proba = cross_val_predict(rf, X, Y[:, 0], cv=3, method='predict_proba')
+    print("✓ predict_proba method works")
+    print(f"Shape of predict_proba output: {pred_proba.shape}")
+except Exception as e:
+    print(f"✗ predict_proba method failed: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..a31b5327a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+from sklearn.datasets import make_multilabel_classification
+from sklearn.multioutput import MultiOutputClassifier
+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
+from sklearn.model_selection import cross_val_predict
+from sklearn.ensemble import RandomForestClassifier
+import numpy as np
+
+print("=== Test 1: Single output case (should use original logic) ===")
+X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=1, n_labels=1)
+mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())
+
+try:
+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=3, method='predict_proba')
+    print("✓ predict_proba method works for single output")
+    print(f"Shape of predict_proba output: {len(pred_proba)} outputs")
+    for i, p in enumerate(pred_proba):
+        print(f"  Output {i}: shape {p.shape}")
+except Exception as e:
+    print(f"✗ predict_proba method failed: {e}")
+
+print("\n=== Test 2: Different number of classes per output ===")
+# Create a case where different outputs have different number of classes
+X = np.random.randn(100, 10)
+Y = np.zeros((100, 2))
+Y[:50, 0] = 1  # Binary classification for first output
+Y[:, 1] = np.random.randint(0, 3, 100)  # 3-class classification for second output
+
+mo_rf = MultiOutputClassifier(RandomForestClassifier(n_estimators=10))
+
+try:
+    pred_proba = cross_val_predict(mo_rf, X, Y, cv=3, method='predict_proba')
+    print("✓ predict_proba method works for different class counts")
+    print(f"Shape of predict_proba output: {len(pred_proba)} outputs")
+    for i, p in enumerate(pred_proba):
+        print(f"  Output {i}: shape {p.shape}")
+except Exception as e:
+    print(f"✗ predict_proba method failed: {e}")
+
+print("\n=== Test 3: Non-MultiOutputClassifier with list output (edge case) ===")
+# This tests our fallback logic for non-MultiOutput classifiers that return lists
+class CustomClassifier:
+    def __init__(self):
+        self.classes_ = [0, 1, 2]  # This would be unusual but possible
+    
+    def fit(self, X, y):
+        pass
+        
+    def predict_proba(self, X):
+        # Return a list like MultiOutputClassifier but without estimators_
+        return [np.random.rand(X.shape[0], 3), np.random.rand(X.shape[0], 3)]
+    
+    def predict(self, X):
+        return np.random.randint(0, 3, X.shape[0])
+
+custom_clf = CustomClassifier()
+X = np.random.randn(50, 5)
+y = np.random.randint(0, 3, 50)
+
+try:
+    pred_proba = cross_val_predict(custom_clf, X, y, cv=3, method='predict_proba')
+    print("✓ Custom classifier with list output works (fallback logic)")
+except Exception as e:
+    print(f"✗ Custom classifier failed: {e}")
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 000000000..08bb37390
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+# This reproduces the exact code from the GitHub issue
+from sklearn.datasets import make_multilabel_classification
+from sklearn.multioutput import MultiOutputClassifier
+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
+from sklearn.model_selection import cross_val_predict
+
+X, Y = make_multilabel_classification()
+
+mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())
+pred = cross_val_predict(mo_lda, X, Y, cv=5) # Works fine
+print("✓ cross_val_predict with default method works")
+
+pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba') # Should work now
+print("✓ cross_val_predict with method='predict_proba' works")
+
+print("Success! The issue has been fixed.")
\ No newline at end of file
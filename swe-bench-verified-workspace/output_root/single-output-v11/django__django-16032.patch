diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9c61928f36
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,123 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Value
+
+# Define models
+class Publisher(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    pages = models.IntegerField()
+    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
+    authors = models.ManyToManyField(Author)
+    
+    class Meta:
+        app_label = 'test'
+
+def test_reproduce_issue():
+    # Create test data
+    authors = [
+        Author.objects.create(name='Author 1'),
+        Author.objects.create(name='Author 2'),
+        Author.objects.create(name='Author 3'),
+        Author.objects.create(name='Author 4'),
+    ]
+    
+    publishers = [
+        Publisher.objects.create(name='Apress'),
+        Publisher.objects.create(name='Sams'),
+        Publisher.objects.create(name='Prentice Hall'),
+        Publisher.objects.create(name='Morgan Kaufmann'),
+    ]
+    
+    # Create books with different page counts and assign authors
+    book1 = Book.objects.create(title='Book 1', pages=500, publisher=publishers[0])
+    book1.authors.add(authors[0])
+    
+    book2 = Book.objects.create(title='Book 2', pages=300, publisher=publishers[1])
+    book2.authors.add(authors[1])
+    
+    book3 = Book.objects.create(title='Book 3', pages=450, publisher=publishers[0])
+    book3.authors.add(authors[0])
+    
+    book4 = Book.objects.create(title='Book 4', pages=600, publisher=publishers[2])
+    book4.authors.add(authors[2])
+    
+    book5 = Book.objects.create(title='Book 5', pages=200, publisher=publishers[3])
+    book5.authors.add(authors[3])
+    
+    book6 = Book.objects.create(title='Book 6', pages=800, publisher=publishers[3])
+    book6.authors.add(authors[3])
+
+    try:
+        # This should reproduce the issue
+        long_books_qs = (
+            Book.objects.filter(
+                pages__gt=400,
+            )
+            .annotate(book_annotate=Value(1))
+            .alias(book_alias=Value(1))
+        )
+        author_books_qs = (
+            Author.objects.filter(
+                book_set__in=long_books_qs
+            )
+            .values("name")
+        )
+        
+        print("Query executed successfully!")
+        print("Result:", list(author_books_qs))
+        
+    except Exception as e:
+        print(f"Error occurred: {e}")
+        print(f"Error type: {type(e).__name__}")
+        return False
+    
+    return True
+
+if __name__ == '__main__':
+    # Create tables
+    from django.db import connection
+    
+    # Create tables using schema editor
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Publisher)
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    success = test_reproduce_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue_final.py b/reproduce_issue_final.py
new file mode 100644
index 0000000000..b343b24f31
--- /dev/null
+++ b/reproduce_issue_final.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'tests.aggregation',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value
+from tests.aggregation.models import Author, Book, Publisher
+from django.core.management import execute_from_command_line
+
+def test_reproduce_issue():
+    # Set up test data like in the aggregation tests
+    a1 = Author.objects.create(name="Adrian Holovaty", age=34)
+    a2 = Author.objects.create(name="Jacob Kaplan-Moss", age=35)
+    a3 = Author.objects.create(name="Brad Dayley", age=45)
+    a4 = Author.objects.create(name="James Bennett", age=29)
+    a5 = Author.objects.create(name="Jeffrey Forcier", age=37)
+    a6 = Author.objects.create(name="Paul Bissex", age=29)
+    a7 = Author.objects.create(name="Wesley J. Chun", age=25)
+    a8 = Author.objects.create(name="Peter Norvig", age=57)
+    a9 = Author.objects.create(name="Stuart Russell", age=46)
+    
+    p1 = Publisher.objects.create(name="Apress", num_awards=3)
+    p2 = Publisher.objects.create(name="Sams", num_awards=1)
+    p3 = Publisher.objects.create(name="Prentice Hall", num_awards=7)
+    p4 = Publisher.objects.create(name="Morgan Kaufmann", num_awards=9)
+    
+    b5 = Book.objects.create(
+        isbn="013790395",
+        name="Artificial Intelligence: A Modern Approach",
+        pages=1132,
+        rating=4.0,
+        price=30.00,
+        contact=a8,
+        publisher=p3,
+    )
+    b6 = Book.objects.create(
+        isbn="155860191",
+        name="Paradigms of Artificial Intelligence Programming",
+        pages=946,
+        rating=5.0,
+        price=75.00,
+        contact=a8,
+        publisher=p4,
+    )
+    
+    b5.authors.add(a8, a9)
+    b6.authors.add(a8)
+
+    try:
+        # This should reproduce the issue
+        long_books_qs = (
+            Book.objects.filter(
+                pages__gt=400,
+            )
+            .annotate(book_annotate=Value(1))
+            .alias(book_alias=Value(1))
+        )
+        author_books_qs = (
+            Author.objects.filter(
+                book__in=long_books_qs
+            )
+            .values("name")
+        )
+        
+        print("Query executed successfully!")
+        print("Result:", list(author_books_qs))
+        
+    except Exception as e:
+        print(f"Error occurred: {e}")
+        print(f"Error type: {type(e).__name__}")
+        import traceback
+        traceback.print_exc()
+        return False
+    
+    return True
+
+if __name__ == '__main__':
+    # Create tables
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(['manage.py', 'migrate', '--run-syncdb'])
+    
+    success = test_reproduce_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue_simple.py b/reproduce_issue_simple.py
new file mode 100644
index 0000000000..59a3f57a7f
--- /dev/null
+++ b/reproduce_issue_simple.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'tests.aggregation',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value
+from tests.aggregation.models import Author, Book
+
+def test_reproduce_issue():
+    try:
+        # This should reproduce the issue
+        long_books_qs = (
+            Book.objects.filter(
+                pages__gt=400,
+            )
+            .annotate(book_annotate=Value(1))
+            .alias(book_alias=Value(1))
+        )
+        author_books_qs = (
+            Author.objects.filter(
+                book__in=long_books_qs
+            )
+            .values("name")
+        )
+        
+        print("Query executed successfully!")
+        print("Result:", list(author_books_qs))
+        
+    except Exception as e:
+        print(f"Error occurred: {e}")
+        print(f"Error type: {type(e).__name__}")
+        import traceback
+        traceback.print_exc()
+        return False
+    
+    return True
+
+if __name__ == '__main__':
+    success = test_reproduce_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
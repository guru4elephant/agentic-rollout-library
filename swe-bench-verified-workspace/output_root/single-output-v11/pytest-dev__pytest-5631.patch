diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py
index d238061b4..67594b72d 100644
--- a/src/_pytest/compat.py
+++ b/src/_pytest/compat.py
@@ -59,6 +59,18 @@ def getlocation(function, curdir):
     return "%s:%d" % (fn, lineno + 1)
 
 
+def _is_in_sentinels(value, sentinels):
+    """Check if value is in sentinels, handling array-like objects properly."""
+    try:
+        # Handle the case where value might be an array-like object
+        # by using explicit boolean conversion
+        return bool(value in sentinels)
+    except ValueError:
+        # If we get a ValueError (like "truth value of array is ambiguous"),
+        # it means value is an array-like object that can't be used in boolean context
+        # In this case, we assume it's not a sentinel
+        return False
+
 def num_mock_patch_args(function):
     """ return number of arguments used up by mock arguments (if any) """
     patchings = getattr(function, "patchings", None)
@@ -68,7 +80,7 @@ def num_mock_patch_args(function):
     if any(mock_modules):
         sentinels = [m.DEFAULT for m in mock_modules if m is not None]
         return len(
-            [p for p in patchings if not p.attribute_name and p.new in sentinels]
+            [p for p in patchings if not p.attribute_name and _is_in_sentinels(p.new, sentinels)]
         )
     return len(patchings)
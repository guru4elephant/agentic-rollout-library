diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 00000000..c0dc597f
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the proxy authentication bug fix.
+This test covers the specific issue mentioned in the GitHub issue
+where Python 3.8.12 would fail with 407 error due to proxy authentication issues.
+"""
+
+import requests.utils
+from requests.adapters import HTTPAdapter
+
+def test_get_auth_from_url():
+    """Test the fixed get_auth_from_url function"""
+    print("Testing get_auth_from_url function...")
+    
+    test_cases = [
+        # (url, expected_result)
+        ("http://user:pass@proxy.com:8080", ("user", "pass")),
+        ("https://user:pass@proxy.com:8080", ("user", "pass")),
+        ("http://user@proxy.com:8080", ("user", "")),  # This was the problematic case
+        ("http://:pass@proxy.com:8080", ("", "pass")),
+        ("http://proxy.com:8080", ("", "")),
+        ("https://admin@api.example.com", ("admin", "")),
+        ("socks5://user:pass@proxy.com:1080", ("user", "pass")),
+    ]
+    
+    for url, expected in test_cases:
+        result = requests.utils.get_auth_from_url(url)
+        assert result == expected, f"Failed for {url}: expected {expected}, got {result}"
+        print(f"âœ“ {url} -> {result}")
+    
+    print("get_auth_from_url tests passed!")
+
+def test_proxy_headers():
+    """Test that proxy headers are generated correctly"""
+    print("\nTesting proxy_headers generation...")
+    
+    adapter = HTTPAdapter()
+    
+    test_cases = [
+        # (proxy_url, should_have_auth_header)
+        ("http://user:pass@proxy.com:8080", True),
+        ("https://user:pass@proxy.com:8080", True),
+        ("http://user@proxy.com:8080", True),  # This was the problematic case
+        ("http://:pass@proxy.com:8080", False),  # No username, no auth header
+        ("http://proxy.com:8080", False),  # No auth, no auth header
+    ]
+    
+    for proxy_url, should_have_auth in test_cases:
+        headers = adapter.proxy_headers(proxy_url)
+        
+        if should_have_auth:
+            assert 'Proxy-Authorization' in headers, f"Expected Proxy-Authorization header for {proxy_url}"
+            print(f"âœ“ {proxy_url} -> has Proxy-Authorization: {headers['Proxy-Authorization']}")
+        else:
+            assert 'Proxy-Authorization' not in headers, f"Unexpected Proxy-Authorization header for {proxy_url}"
+            print(f"âœ“ {proxy_url} -> no Proxy-Authorization header (correct)")
+    
+    print("proxy_headers tests passed!")
+
+def test_edge_cases():
+    """Test edge cases that might cause issues"""
+    print("\nTesting edge cases...")
+    
+    # Test empty strings
+    result = requests.utils.get_auth_from_url("")
+    assert result == ("", ""), f"Empty URL test failed: {result}"
+    print("âœ“ Empty URL handled correctly")
+    
+    # Test None input (should be handled gracefully)
+    try:
+        result = requests.utils.get_auth_from_url(None)
+        print(f"âœ“ None input handled: {result}")
+    except Exception as e:
+        print(f"âœ“ None input properly raises exception: {type(e).__name__}")
+    
+    # Test malformed URLs
+    malformed_urls = [
+        "http://",
+        "https://@",
+        "http://:@",
+    ]
+    
+    for url in malformed_urls:
+        try:
+            result = requests.utils.get_auth_from_url(url)
+            print(f"âœ“ Malformed URL {url} handled: {result}")
+        except Exception as e:
+            print(f"âœ“ Malformed URL {url} properly handled: {type(e).__name__}")
+    
+    print("Edge case tests passed!")
+
+if __name__ == "__main__":
+    print("Running comprehensive tests for proxy authentication fix...")
+    print("=" * 60)
+    
+    test_get_auth_from_url()
+    test_proxy_headers() 
+    test_edge_cases()
+    
+    print("=" * 60)
+    print("ðŸŽ‰ ALL TESTS PASSED! The proxy authentication bug has been successfully fixed.")
+    print("The fix correctly handles the Python 3.8.12 issue where urlparse returns None for missing passwords.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..d8cebe92
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+import requests
+import os
+
+# Let's try to reproduce the proxy authentication issue
+# We'll use a simple HTTP proxy that requires authentication
+# For testing, we can use a mock proxy or try to simulate the conditions
+
+print("Testing proxy authentication...")
+
+# Try with a basic proxy setup (this might fail with 407 if authentication is required)
+try:
+    # Using a proxy that doesn't exist to simulate the issue
+    proxies = {
+        'http': 'http://user:pass@invalid-proxy:8080',
+        'https': 'http://user:pass@invalid-proxy:8080'
+    }
+    
+    # This should ideally handle proxy authentication properly
+    r = requests.get('https://httpbin.org/get', proxies=proxies, timeout=5)
+    print(f"Status code: {r.status_code}")
+    
+except requests.exceptions.ProxyError as e:
+    print(f"Proxy error: {e}")
+    # Check if this is a 407 authentication required error
+    if "407" in str(e):
+        print("Confirmed: 407 Proxy Authentication Required error")
+    else:
+        print(f"Different proxy error: {e}")
+        
+except requests.exceptions.RequestException as e:
+    print(f"Request exception: {e}")
+
+print("Test completed")
\ No newline at end of file
diff --git a/requests/utils.py b/requests/utils.py
index 1c2ae4e0..02cd59e4 100644
--- a/requests/utils.py
+++ b/requests/utils.py
@@ -991,7 +991,9 @@ def get_auth_from_url(url):
     parsed = urlparse(url)
 
     try:
-        auth = (unquote(parsed.username), unquote(parsed.password))
+        username = unquote(parsed.username) if parsed.username is not None else ''
+        password = unquote(parsed.password) if parsed.password is not None else ''
+        auth = (username, password)
     except (AttributeError, TypeError):
         auth = ('', '')
 
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 00000000..584f9862
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,36 @@
+import requests
+import requests.utils
+
+print("Testing the original issue scenario...")
+
+# Test the specific case mentioned in the issue
+# The issue was that proxy authentication would fail with 407 error in Python 3.8.12
+# due to the get_auth_from_url function failing when password is None
+
+# Test the problematic case: username without password
+proxy_url = "http://user@proxy.example.com:8080"
+
+# This should now work correctly instead of failing
+auth = requests.utils.get_auth_from_url(proxy_url)
+print(f"Extracted auth from {proxy_url}: {auth}")
+
+# Verify it's correct
+expected = ('user', '')
+assert auth == expected, f"Expected {expected}, got {auth}"
+
+print("âœ“ The original issue has been fixed!")
+print("âœ“ Proxy authentication with username-only URLs now works correctly")
+
+# Test that the fix doesn't break normal cases
+normal_cases = [
+    "http://user:pass@proxy.example.com:8080",
+    "https://user:pass@proxy.example.com:8080",
+    "http://:pass@proxy.example.com:8080",
+    "http://proxy.example.com:8080"
+]
+
+for case in normal_cases:
+    auth = requests.utils.get_auth_from_url(case)
+    print(f"âœ“ {case} -> {auth}")
+
+print("\nAll tests passed! The proxy authentication bug has been fixed.")
\ No newline at end of file
diff --git a/test_proxy_auth.py b/test_proxy_auth.py
new file mode 100644
index 00000000..5f47c9b6
--- /dev/null
+++ b/test_proxy_auth.py
@@ -0,0 +1,26 @@
+import requests.utils
+from requests.compat import urlparse, unquote
+
+# Test the get_auth_from_url function directly
+def test_auth_extraction():
+    test_urls = [
+        "http://user:pass@proxy.example.com:8080",
+        "https://user:pass@proxy.example.com:8080",
+        "http://user@proxy.example.com:8080",
+        "http://:pass@proxy.example.com:8080",
+        "http://proxy.example.com:8080"
+    ]
+    
+    for url in test_urls:
+        print(f"Testing URL: {url}")
+        result = requests.utils.get_auth_from_url(url)
+        print(f"Extracted auth: {result}")
+        
+        # Also test urlparse directly
+        parsed = urlparse(url)
+        print(f"Parsed username: {parsed.username}")
+        print(f"Parsed password: {parsed.password}")
+        print("---")
+
+if __name__ == "__main__":
+    test_auth_extraction()
\ No newline at end of file
diff --git a/test_proxy_integration.py b/test_proxy_integration.py
new file mode 100644
index 00000000..c2649236
--- /dev/null
+++ b/test_proxy_integration.py
@@ -0,0 +1,33 @@
+import requests
+from requests.adapters import HTTPAdapter
+
+# Test the proxy authentication integration
+def test_proxy_auth_integration():
+    # Create a test adapter to check proxy headers
+    adapter = HTTPAdapter()
+    
+    test_proxies = [
+        "http://user:pass@proxy.example.com:8080",
+        "https://user:pass@proxy.example.com:8080", 
+        "http://user@proxy.example.com:8080",
+        "http://:pass@proxy.example.com:8080",
+        "http://proxy.example.com:8080"
+    ]
+    
+    for proxy_url in test_proxies:
+        print(f"Testing proxy: {proxy_url}")
+        
+        # Get proxy headers using the adapter
+        headers = adapter.proxy_headers(proxy_url)
+        print(f"Proxy headers: {headers}")
+        
+        # Check if Proxy-Authorization header is set correctly
+        if 'Proxy-Authorization' in headers:
+            print(f"Proxy-Authorization: {headers['Proxy-Authorization']}")
+        else:
+            print("No Proxy-Authorization header")
+        
+        print("---")
+
+if __name__ == "__main__":
+    test_proxy_auth_integration()
\ No newline at end of file
diff --git a/test_unquote.py b/test_unquote.py
new file mode 100644
index 00000000..718134c4
--- /dev/null
+++ b/test_unquote.py
@@ -0,0 +1,22 @@
+from requests.compat import unquote
+
+# Test unquote with None
+try:
+    result = unquote(None)
+    print(f"unquote(None) = {result}")
+except Exception as e:
+    print(f"Error with unquote(None): {type(e).__name__}: {e}")
+
+# Test unquote with empty string
+try:
+    result = unquote("")
+    print(f"unquote('') = {result}")
+except Exception as e:
+    print(f"Error with unquote(''): {type(e).__name__}: {e}")
+
+# Test unquote with actual value
+try:
+    result = unquote("test")
+    print(f"unquote('test') = {result}")
+except Exception as e:
+    print(f"Error with unquote('test'): {type(e).__name__}: {e}")
\ No newline at end of file
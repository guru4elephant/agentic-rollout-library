diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..7d5e4b03
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,6 @@
+# Your code here
+import xarray as xr                                                                                                                                                                                 
+da = xr.DataArray([0, 0], dims="x", attrs={'units':'K'})                                                                                                                                             
+out = da.quantile(.9, dim='x', keep_attrs=True)                                                                                                                                                      
+print("Output attrs:", out.attrs)
+print("Expected: OrderedDict([('units', 'K')])")
\ No newline at end of file
diff --git a/test_dataset_quantile.py b/test_dataset_quantile.py
new file mode 100644
index 00000000..2514f53b
--- /dev/null
+++ b/test_dataset_quantile.py
@@ -0,0 +1,20 @@
+import xarray as xr
+import numpy as np
+
+# Test Dataset quantile with keep_attrs
+print("Test Dataset quantile with keep_attrs=True")
+ds = xr.Dataset({
+    'temperature': xr.DataArray([0, 1, 2], dims="x", attrs={'units': 'K'}),
+    'pressure': xr.DataArray([100, 101, 102], dims="x", attrs={'units': 'Pa'})
+}, attrs={'title': 'test dataset'})
+
+out = ds.quantile(0.5, dim='x', keep_attrs=True)
+print("Dataset attrs:", out.attrs)
+print("Temperature attrs:", out.temperature.attrs)
+print("Pressure attrs:", out.pressure.attrs)
+
+print("\nTest Dataset quantile with keep_attrs=False")
+out = ds.quantile(0.5, dim='x', keep_attrs=False)
+print("Dataset attrs:", out.attrs)
+print("Temperature attrs:", out.temperature.attrs)
+print("Pressure attrs:", out.pressure.attrs)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..36cf6747
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+import xarray as xr
+import numpy as np
+
+# Test 1: keep_attrs=True should preserve attributes
+print("Test 1: keep_attrs=True")
+da = xr.DataArray([0, 0], dims="x", attrs={'units':'K'})
+out = da.quantile(.9, dim='x', keep_attrs=True)
+print("Output attrs:", out.attrs)
+print("Expected: OrderedDict([('units', 'K')])")
+print("Pass:", out.attrs == {'units': 'K'})
+
+# Test 2: keep_attrs=False should not preserve attributes
+print("\nTest 2: keep_attrs=False")
+da = xr.DataArray([0, 0], dims="x", attrs={'units':'K'})
+out = da.quantile(.9, dim='x', keep_attrs=False)
+print("Output attrs:", out.attrs)
+print("Expected: OrderedDict()")
+print("Pass:", out.attrs == {})
+
+# Test 3: keep_attrs=None should use default behavior (False)
+print("\nTest 3: keep_attrs=None (default)")
+da = xr.DataArray([0, 0], dims="x", attrs={'units':'K'})
+out = da.quantile(.9, dim='x', keep_attrs=None)
+print("Output attrs:", out.attrs)
+print("Expected: OrderedDict()")
+print("Pass:", out.attrs == {})
+
+# Test 4: Multiple quantiles
+print("\nTest 4: Multiple quantiles with keep_attrs=True")
+da = xr.DataArray([0, 1, 2], dims="x", attrs={'units':'K'})
+out = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)
+print("Output attrs:", out.attrs)
+print("Expected: OrderedDict([('units', 'K')])")
+print("Pass:", out.attrs == {'units': 'K'})
+
+# Test 5: No attributes to preserve
+print("\nTest 5: No attributes with keep_attrs=True")
+da = xr.DataArray([0, 0], dims="x")
+out = da.quantile(.9, dim='x', keep_attrs=True)
+print("Output attrs:", out.attrs)
+print("Expected: OrderedDict()")
+print("Pass:", out.attrs == {})
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 00000000..94a084dc
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,7 @@
+# Exact code from the GitHub issue
+import xarray as xr                                                                                                                                                                                 
+da = xr.DataArray([0, 0], dims="x", attrs={'units':'K'})                                                                                                                                             
+out = da.quantile(.9, dim='x', keep_attrs=True)                                                                                                                                                     
+print("out.attrs:", out.attrs)
+print("Expected: OrderedDict([('units', 'K')])")
+print("Fixed:", out.attrs == {'units': 'K'})
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index d6f0da42..4b2b3580 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -4768,7 +4768,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
                             # the former is often more efficient
                             reduce_dims = None
                         variables[name] = var.quantile(
-                            q, dim=reduce_dims, interpolation=interpolation
+                            q, dim=reduce_dims, interpolation=interpolation, keep_attrs=keep_attrs
                         )
 
             else:
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 2e9906ce..4937aa34 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -1592,7 +1592,7 @@ class Variable(
         """
         return self.broadcast_equals(other, equiv=duck_array_ops.array_notnull_equiv)
 
-    def quantile(self, q, dim=None, interpolation="linear"):
+    def quantile(self, q, dim=None, interpolation="linear", keep_attrs=None):
         """Compute the qth quantile of the data along the specified dimension.
 
         Returns the qth quantiles(s) of the array elements.
@@ -1615,6 +1615,10 @@ class Variable(
                 * higher: ``j``.
                 * nearest: ``i`` or ``j``, whichever is nearest.
                 * midpoint: ``(i + j) / 2``.
+        keep_attrs : bool, optional
+            If True, the variable's attributes (`attrs`) will be copied from
+            the original object to the new one.  If False (default), the new
+            object will be returned without attributes.
 
         Returns
         -------
@@ -1658,7 +1662,12 @@ class Variable(
         qs = np.nanpercentile(
             self.data, q * 100.0, axis=axis, interpolation=interpolation
         )
-        return Variable(new_dims, qs)
+        
+        if keep_attrs is None:
+            keep_attrs = _get_keep_attrs(default=False)
+        attrs = self._attrs if keep_attrs else None
+        
+        return Variable(new_dims, qs, attrs=attrs)
 
     def rank(self, dim, pct=False):
         """Ranks the data.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c95f304202
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Test case from the issue
+x2, y, z = sympy.symbols('x2 y z')
+y = x2*z + x2**3
+
+print("MathML output for x2*z + x2**3:")
+print(mathml(y, printer='presentation'))
+
+# Test with regular x for comparison
+x, y2, z2 = sympy.symbols('x y z')
+y2 = x*z + x**3
+
+print("\nMathML output for x*z + x**3:")
+print(mathml(y2, printer='presentation'))
+
+# Test with different symbols ending with numbers
+a1, b2, c3 = sympy.symbols('a1 b2 c3')
+expr = a1 + b2 + c3
+
+print("\nMathML output for a1 + b2 + c3:")
+print(mathml(expr, printer='presentation'))
\ No newline at end of file
diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 3f8b8d49e0..5a8decc4b3 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -772,6 +772,18 @@ def translate(s):
             else:
                 return s
 
+        # Check if symbol name ends with digits (like x2, a1, etc.)
+        # For MathML presentation, we want to treat these as single identifiers
+        # rather than splitting them into name and subscript
+        import re
+        name_with_digits_pattern = re.compile(r'^([a-zA-Z]+)([0-9]+)$')
+        match = name_with_digits_pattern.match(sym.name)
+        
+        if match:
+            # Treat as single identifier
+            x.appendChild(self.dom.createTextNode(sym.name))
+            return x
+
         name, supers, subs = split_super_sub(sym.name)
         name = translate(name)
         supers = [translate(sup) for sup in supers]
diff --git a/sympy_test.html b/sympy_test.html
new file mode 100644
index 0000000000..cb01fe230d
--- /dev/null
+++ b/sympy_test.html
@@ -0,0 +1,12 @@
+
+<html>
+<head>
+    <title>MathML Test</title>
+</head>
+<body>
+    <h1>MathML Output for x2*z + x2**3</h1>
+    <math xmlns="http://www.w3.org/1998/Math/MathML">
+        <mrow><msup><mrow><mfenced><mi>x2</mi></mfenced></mrow><mn>3</mn></msup><mo>+</mo><mrow><mi>x2</mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>
+    </math>
+</body>
+</html>
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..86005a2740
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,31 @@
+import sympy
+from sympy.printing.mathml import mathml, MathMLPresentationPrinter
+
+# Test basic functionality
+print("Testing basic functionality:")
+
+# Test regular symbols
+x, y, z = sympy.symbols('x y z')
+expr = x + y + z
+print("\nRegular symbols:")
+print(mathml(expr, printer='presentation'))
+
+# Test symbols with numbers (our fix)
+x1, y2, z3 = sympy.symbols('x1 y2 z3')
+expr2 = x1 + y2 + z3
+print("\nSymbols with numbers:")
+print(mathml(expr2, printer='presentation'))
+
+# Test mixed symbols
+expr3 = x + x1 + y + y2
+print("\nMixed symbols:")
+print(mathml(expr3, printer='presentation'))
+
+# Test mathematical operations
+expr4 = x1**2 + y2*z3
+print("\nMathematical operations:")
+print(mathml(expr4, printer='presentation'))
+
+# Test content printer still works (should not be affected)
+print("\nContent printer (should not be affected):")
+print(mathml(expr2, printer='content'))
\ No newline at end of file
diff --git a/test_content_printer.py b/test_content_printer.py
new file mode 100644
index 0000000000..4f7a53a755
--- /dev/null
+++ b/test_content_printer.py
@@ -0,0 +1,22 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Test content printer functionality
+print("Testing content printer functionality:")
+
+# Test symbols with explicit subscript notation
+x_sub, y_sup = sympy.symbols('x_sub y^sup')
+expr1 = x_sub + y_sup
+print("\nContent MathML for x_sub + y^sup:")
+print(mathml(expr1, printer='content'))
+
+# Test symbols ending with numbers (should still work as subscripts in content MathML)
+x1, y2 = sympy.symbols('x1 y2')
+expr2 = x1 + y2
+print("\nContent MathML for x1 + y2:")
+print(mathml(expr2, printer='content'))
+
+# Test mixed symbols
+expr3 = x_sub + x1
+print("\nContent MathML for x_sub + x1:")
+print(mathml(expr3, printer='content'))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..33e6c006b5
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Test edge cases
+print("Testing edge cases:")
+
+# Test symbols with actual subscripts (using _ notation)
+x_sub, y_sup = sympy.symbols('x_sub y^sup')
+expr1 = x_sub + y_sup
+print("\nMathML for x_sub + y^sup:")
+print(mathml(expr1, printer='presentation'))
+
+# Test symbols with both subscripts and superscripts
+x_sub_sup = sympy.symbols('x_sub__sup')
+expr2 = x_sub_sup
+print("\nMathML for x_sub__sup:")
+print(mathml(expr2, printer='presentation'))
+
+# Test Greek letters ending with numbers
+alpha1, beta2 = sympy.symbols('alpha1 beta2')
+expr3 = alpha1 + beta2
+print("\nMathML for alpha1 + beta2:")
+print(mathml(expr3, printer='presentation'))
+
+# Test regular symbols without numbers
+a, b, c = sympy.symbols('a b c')
+expr4 = a + b + c
+print("\nMathML for a + b + c:")
+print(mathml(expr4, printer='presentation'))
+
+# Test symbols with multiple digits
+x123, y456 = sympy.symbols('x123 y456')
+expr5 = x123 + y456
+print("\nMathML for x123 + y456:")
+print(mathml(expr5, printer='presentation'))
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..de6c808388
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,38 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Exact reproduction of the GitHub issue
+x2, y, z = sympy.symbols('x2 y z')
+y = x2*z + x2**3
+
+print("MathML output for x2*z + x2**3:")
+mathml_output = mathml(y, printer='presentation')
+print(mathml_output)
+
+# Create HTML file to visualize the result
+html_content = f'''
+<html>
+<head>
+    <title>MathML Test</title>
+</head>
+<body>
+    <h1>MathML Output for x2*z + x2**3</h1>
+    <math xmlns="http://www.w3.org/1998/Math/MathML">
+        {mathml_output}
+    </math>
+</body>
+</html>
+'''
+
+with open('sympy_test.html', 'w') as f:
+    f.write(html_content)
+
+print("\nHTML file 'sympy_test.html' created successfully.")
+print("The symbol 'x2' should now be visible in the rendered MathML.")
+
+# Compare with regular x
+x, y2, z2 = sympy.symbols('x y z')
+y2 = x*z + x**3
+
+print("\nMathML output for x*z + x**3:")
+print(mathml(y2, printer='presentation'))
\ No newline at end of file
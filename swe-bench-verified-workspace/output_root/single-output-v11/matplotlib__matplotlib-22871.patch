diff --git a/debug_case6.py b/debug_case6.py
new file mode 100644
index 0000000000..e80d924df1
--- /dev/null
+++ b/debug_case6.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+import numpy as np
+
+# Test Case 6: 11 months starting from Jan
+initial_date = datetime(2021, 1, 1)
+days_range = 330
+time_array = [initial_date + timedelta(days=x) for x in range(days_range)]
+data = [-x**2/20000 for x in range(days_range)]
+
+# Plot data
+fig, ax = plt.subplots(figsize=(8, 3))
+ax.plot(time_array, data) 
+        
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+
+ax.grid(True)
+ax.set_ylabel("Value")
+ax.xaxis.set_major_locator(locator)   
+ax.xaxis.set_major_formatter(formatter)
+
+# Force drawing to update the formatter
+plt.draw()
+
+# Debug the internal state
+values = locator()
+tickdatetime = [mdates.num2date(value, tz=formatter._tz) for value in values]
+tickdate = np.array([tdt.timetuple()[:6] for tdt in tickdatetime])
+
+print("Tick dates:", tickdatetime)
+print("Tick date array:", tickdate)
+print("Unique values per level:")
+for level in range(6):
+    print(f"Level {level}: {len(np.unique(tickdate[:, level]))} unique values")
+
+# Get the offset string
+offset_string = formatter.get_offset()
+print(f"Offset: '{offset_string}'")
+
+plt.close()
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..53236e95ca
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,58 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+import numpy as np
+
+#create time array
+initial = datetime(2021,2,14,0,0,0)
+time_array = [initial + timedelta(days=x) for x in range(1,200)]
+
+#create data array
+data = [-x**2/20000 for x in range(1,200)]
+
+#plot data
+fig,ax = plt.subplots()
+ax.plot(time_array,data) 
+        
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+
+ax.grid(True)
+ax.set_ylabel("Temperature ($\degree$C)")
+ax.xaxis.set_major_locator(locator)   
+ax.xaxis.set_major_formatter(formatter)
+
+# Let's debug what's happening
+values = locator()
+tickdatetime = [mdates.num2date(value, tz=formatter._tz) for value in values]
+tickdate = np.array([tdt.timetuple()[:6] for tdt in tickdatetime])
+
+print("Tick dates:", tickdatetime)
+print("Tick date array:", tickdate)
+print("Unique values per level:")
+for level in range(6):
+    print(f"Level {level}: {len(np.unique(tickdate[:, level]))} unique values")
+
+# Determine the level manually
+for level in range(5, -1, -1):
+    if len(np.unique(tickdate[:, level])) > 1:
+        print(f"Breaking at level {level}")
+        if level < 2:
+            show_offset = False
+        else:
+            show_offset = True
+        break
+    elif level == 0:
+        level = 5
+        show_offset = True
+
+print(f"Final level: {level}, show_offset: {show_offset}")
+
+# Check what the offset string would be
+if show_offset:
+    offset_string = tickdatetime[-1].strftime(formatter.offset_formats[level])
+    print(f"Offset string: {offset_string}")
+else:
+    print("No offset shown")
+
+plt.show()
\ No newline at end of file
diff --git a/github_issue_test.png b/github_issue_test.png
new file mode 100644
index 0000000000..7d7eaefce3
Binary files /dev/null and b/github_issue_test.png differ
diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 4d8ddf3ee5..df114eedcc 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -798,7 +798,18 @@ class ConciseDateFormatter(ticker.Formatter):
         for level in range(5, -1, -1):
             if len(np.unique(tickdate[:, level])) > 1:
                 if level < 2:
-                    show_offset = False
+                    # For level 1 (months), we need to show offset if the data
+                    # doesn't span a full year or doesn't include January
+                    if level == 1:
+                        # Check if the data spans multiple years or doesn't include January
+                        unique_years = np.unique(tickdate[:, 0])
+                        if len(unique_years) > 1 or (1 not in tickdate[:, 1]):
+                            show_offset = True
+                        else:
+                            show_offset = False
+                    else:
+                        # For level 0 (years), don't show offset
+                        show_offset = False
                 break
             elif level == 0:
                 # all tickdate are the same, so only micros might be different
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b05db59b58
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+
+#create time array
+initial = datetime(2021,2,14,0,0,0)
+time_array = [initial + timedelta(days=x) for x in range(1,200)]
+
+#create data array
+data = [-x**2/20000 for x in range(1,200)]
+
+
+#plot data
+fig,ax = plt.subplots()
+ax.plot(time_array,data) 
+        
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+
+ax.grid(True)
+ax.set_ylabel("Temperature ($\degree$C)")
+ax.xaxis.set_major_locator(locator)   
+ax.xaxis.set_major_formatter(formatter)
+fig.autofmt_xdate() #automatically makes the x-labels rotate
+
+# Save the figure to see the output
+plt.savefig('test_output.png')
+plt.show()
\ No newline at end of file
diff --git a/test_Spans_exactly_12_months_from_Feb.png b/test_Spans_exactly_12_months_from_Feb.png
new file mode 100644
index 0000000000..519101508d
Binary files /dev/null and b/test_Spans_exactly_12_months_from_Feb.png differ
diff --git a/test_Spans_exactly_12_months_from_Jan.png b/test_Spans_exactly_12_months_from_Jan.png
new file mode 100644
index 0000000000..ba02075ad8
Binary files /dev/null and b/test_Spans_exactly_12_months_from_Jan.png differ
diff --git a/test_Spans_multiple_years.png b/test_Spans_multiple_years.png
new file mode 100644
index 0000000000..f5e1a5b42a
Binary files /dev/null and b/test_Spans_multiple_years.png differ
diff --git a/test_Starts_in_Feb,_spans_<12_months.png b/test_Starts_in_Feb,_spans_<12_months.png
new file mode 100644
index 0000000000..19f01655c8
Binary files /dev/null and b/test_Starts_in_Feb,_spans_<12_months.png differ
diff --git a/test_Starts_in_Jan,_spans_<12_months.png b/test_Starts_in_Jan,_spans_<12_months.png
new file mode 100644
index 0000000000..2bae559848
Binary files /dev/null and b/test_Starts_in_Jan,_spans_<12_months.png differ
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..52a612d32a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+"""
+Test edge cases for the ConciseDateFormatter fix
+"""
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+
+def test_case(description, initial_date, days_range):
+    """Test a specific case"""
+    print(f"\n{description}")
+    
+    # Create time array
+    time_array = [initial_date + timedelta(days=x) for x in range(days_range)]
+    data = [-x**2/20000 for x in range(days_range)]
+    
+    # Plot data
+    fig, ax = plt.subplots(figsize=(8, 3))
+    ax.plot(time_array, data) 
+            
+    locator = mdates.AutoDateLocator()
+    formatter = mdates.ConciseDateFormatter(locator)
+    
+    ax.grid(True)
+    ax.set_ylabel("Value")
+    ax.xaxis.set_major_locator(locator)   
+    ax.xaxis.set_major_formatter(formatter)
+    
+    # Force drawing to update the formatter
+    plt.draw()
+    
+    # Get the offset string
+    offset_string = formatter.get_offset()
+    print(f"  Offset: '{offset_string}'")
+    
+    plt.close()
+    return offset_string
+
+# Test various edge cases
+test_case("Case 1: Single month (Feb)", datetime(2021, 2, 1), 28)
+test_case("Case 2: 11 months starting from Feb", datetime(2021, 2, 1), 330)
+test_case("Case 3: 12 months starting from Feb", datetime(2021, 2, 1), 365)
+test_case("Case 4: 13 months starting from Feb", datetime(2021, 2, 1), 400)
+test_case("Case 5: Single month (Jan)", datetime(2021, 1, 1), 31)
+test_case("Case 6: 11 months starting from Jan", datetime(2021, 1, 1), 330)
+test_case("Case 7: 12 months starting from Jan", datetime(2021, 1, 1), 365)
+test_case("Case 8: 13 months starting from Jan", datetime(2021, 1, 1), 400)
+test_case("Case 9: Cross-year boundary (Dec to Jan)", datetime(2021, 12, 1), 60)
+test_case("Case 10: Multiple years", datetime(2021, 6, 1), 800)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..b827ff822f
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,53 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+import numpy as np
+
+def test_case(initial_date, days_range, title):
+    """Test a specific case and print debug info"""
+    print(f"\n=== {title} ===")
+    
+    # Create time array
+    time_array = [initial_date + timedelta(days=x) for x in range(days_range)]
+    data = [-x**2/20000 for x in range(days_range)]
+    
+    # Plot data
+    fig, ax = plt.subplots(figsize=(10, 4))
+    ax.plot(time_array, data) 
+            
+    locator = mdates.AutoDateLocator()
+    formatter = mdates.ConciseDateFormatter(locator)
+    
+    ax.grid(True)
+    ax.set_ylabel("Temperature ($\degree$C)")
+    ax.xaxis.set_major_locator(locator)   
+    ax.xaxis.set_major_formatter(formatter)
+    fig.autofmt_xdate()
+    
+    # Get the offset string to see if year is shown
+    plt.draw()  # Force drawing to update formatter
+    offset_string = formatter.get_offset()
+    print(f"Offset string: '{offset_string}'")
+    
+    # Check if year is in offset
+    year_in_offset = str(initial_date.year) in offset_string
+    print(f"Year {initial_date.year} in offset: {year_in_offset}")
+    
+    plt.title(title)
+    plt.savefig(f'test_{title.replace(" ", "_")}.png')
+    plt.close()
+
+# Test case 1: Original issue - data starts in Feb, spans less than 12 months
+test_case(datetime(2021, 2, 14), 200, "Starts in Feb, spans <12 months")
+
+# Test case 2: Data starts in Jan, spans less than 12 months
+test_case(datetime(2021, 1, 14), 200, "Starts in Jan, spans <12 months")
+
+# Test case 3: Data spans multiple years
+test_case(datetime(2021, 6, 14), 400, "Spans multiple years")
+
+# Test case 4: Data spans exactly 12 months starting from Jan
+test_case(datetime(2021, 1, 1), 365, "Spans exactly 12 months from Jan")
+
+# Test case 5: Data spans exactly 12 months starting from Feb
+test_case(datetime(2021, 2, 1), 365, "Spans exactly 12 months from Feb")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..3e194307e2
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,60 @@
+"""
+Test script to verify the GitHub issue is fixed.
+The issue: ConciseDateFormatter not showing year anywhere when plotting <12 months
+when January is not included in the x-axis.
+"""
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+
+def test_github_issue():
+    """Test the exact case from the GitHub issue"""
+    print("Testing the exact GitHub issue case...")
+    
+    # Create time array exactly as in the issue
+    initial = datetime(2021, 2, 14, 0, 0, 0)
+    time_array = [initial + timedelta(days=x) for x in range(1, 200)]
+    
+    # Create data array exactly as in the issue
+    data = [-x**2/20000 for x in range(1, 200)]
+    
+    # Plot data exactly as in the issue
+    fig, ax = plt.subplots()
+    ax.plot(time_array, data) 
+            
+    locator = mdates.AutoDateLocator()
+    formatter = mdates.ConciseDateFormatter(locator)
+    
+    ax.grid(True)
+    ax.set_ylabel("Temperature ($\degree$C)")
+    ax.xaxis.set_major_locator(locator)   
+    ax.xaxis.set_major_formatter(formatter)
+    fig.autofmt_xdate()
+    
+    # Force drawing to update the formatter
+    plt.draw()
+    
+    # Get the offset string
+    offset_string = formatter.get_offset()
+    print(f"Offset string: '{offset_string}'")
+    
+    # Check if the year 2021 is in the offset
+    year_in_offset = "2021" in offset_string
+    print(f"Year 2021 is in offset: {year_in_offset}")
+    
+    if year_in_offset:
+        print("✅ SUCCESS: The GitHub issue has been fixed!")
+        print("   The year 2021 now appears in the offset when plotting")
+        print("   data that spans less than 12 months and doesn't include January.")
+    else:
+        print("❌ FAILURE: The GitHub issue is not fixed.")
+        print("   The year 2021 should appear in the offset but doesn't.")
+    
+    plt.savefig('github_issue_test.png')
+    plt.close()
+    
+    return year_in_offset
+
+if __name__ == "__main__":
+    success = test_github_issue()
+    exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_output.png b/test_output.png
new file mode 100644
index 0000000000..7d7eaefce3
Binary files /dev/null and b/test_output.png differ
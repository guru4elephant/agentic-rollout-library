diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..08c56dba79
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from sympy.geometry import Point
+from sympy import sqrt, simplify
+
+print("=== Final Test: GitHub Issue Reproduction ===")
+
+# Exact test case from the GitHub issue
+result = Point(2, 0).distance(Point(1, 0, 2))
+expected = sqrt(5)
+
+print(f"Point(2,0).distance(Point(1,0,2)) = {result}")
+print(f"Expected: sqrt(5) = {expected}")
+print(f"Simplified: {simplify(result)}")
+print(f"Numerical value: {result.evalf()}")
+
+# Verify the result is correct
+assert result == expected, f"Expected {expected}, got {result}"
+print("✓ Test passed! The issue has been fixed.")
+
+print("\n=== Additional edge cases ===")
+
+# Test with symbolic expressions
+from sympy.abc import x, y, z
+p1 = Point(x, y)
+p2 = Point(1, 2, 3)
+result2 = p1.distance(p2)
+print(f"Point({x}, {y}).distance(Point(1, 2, 3)) = {result2}")
+print(f"Simplified: {simplify(result2)}")
+
+# Test with more extreme dimension differences
+p3 = Point(1)  # 1D point
+p4 = Point(2, 3, 4, 5)  # 4D point (if supported)
+result3 = p3.distance(p4)
+print(f"Point(1).distance(Point(2, 3, 4, 5)) = {result3}")
+print(f"Simplified: {simplify(result3)}")
+
+print("\n✓ All tests completed successfully!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c8e4fa4fe7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+#!/usr/bin/env python3
+
+from sympy.geometry import Point
+
+# Reproduce the issue from the GitHub issue
+p1 = Point(2, 0)
+p2 = Point(1, 0, 2)
+
+print("Point 1:", p1)
+print("Point 2:", p2)
+print("Distance:", p1.distance(p2))
+print("Expected distance: sqrt(5) ≈", 5**0.5)
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464b..778d47fb30 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -266,8 +266,18 @@ def distance(self, p):
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+        # Handle points with different dimensions by treating missing coordinates as 0
+        if not isinstance(p, Point):
+            p = Point(p)
+        
+        # Get the maximum dimension between the two points
+        max_dim = max(len(self.args), len(p.args))
+        
+        # Create lists of coordinates, padding with zeros for missing dimensions
+        self_coords = list(self.args) + [0] * (max_dim - len(self.args))
+        p_coords = list(p.args) + [0] * (max_dim - len(p.args))
+        
+        return sqrt(sum([(a - b)**2 for a, b in zip(self_coords, p_coords)]))
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..89d5a6baf7
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+from sympy.geometry import Point
+from sympy import sqrt, simplify
+
+# Test various cases of distance calculation between points of different dimensions
+
+print("=== Testing distance between points of different dimensions ===")
+
+# Test case 1: Original issue - 2D vs 3D
+p1 = Point(2, 0)
+p2 = Point(1, 0, 2)
+print(f"Point(2, 0).distance(Point(1, 0, 2)) = {p1.distance(p2)}")
+print(f"Expected: sqrt(5) = {sqrt(5)}")
+print(f"Simplified: {simplify(p1.distance(p2))}")
+print()
+
+# Test case 2: 3D vs 2D (reverse)
+p3 = Point(1, 0, 2)
+p4 = Point(2, 0)
+print(f"Point(1, 0, 2).distance(Point(2, 0)) = {p3.distance(p4)}")
+print(f"Expected: sqrt(5) = {sqrt(5)}")
+print(f"Simplified: {simplify(p3.distance(p4))}")
+print()
+
+# Test case 3: 1D vs 2D
+p5 = Point(3)
+p6 = Point(1, 4)
+print(f"Point(3).distance(Point(1, 4)) = {p5.distance(p6)}")
+print(f"Expected: sqrt((3-1)^2 + (0-4)^2) = sqrt(4 + 16) = sqrt(20) = {sqrt(20)}")
+print(f"Simplified: {simplify(p5.distance(p6))}")
+print()
+
+# Test case 4: 2D vs 1D (reverse)
+p7 = Point(1, 4)
+p8 = Point(3)
+print(f"Point(1, 4).distance(Point(3)) = {p7.distance(p8)}")
+print(f"Expected: sqrt((1-3)^2 + (4-0)^2) = sqrt(4 + 16) = sqrt(20) = {sqrt(20)}")
+print(f"Simplified: {simplify(p7.distance(p8))}")
+print()
+
+# Test case 5: 1D vs 3D
+p9 = Point(5)
+p10 = Point(2, 3, 1)
+print(f"Point(5).distance(Point(2, 3, 1)) = {p9.distance(p10)}")
+print(f"Expected: sqrt((5-2)^2 + (0-3)^2 + (0-1)^2) = sqrt(9 + 9 + 1) = sqrt(19) = {sqrt(19)}")
+print(f"Simplified: {simplify(p9.distance(p10))}")
+print()
+
+# Test case 6: Same dimension points (should still work)
+p11 = Point(1, 2)
+p12 = Point(4, 6)
+print(f"Point(1, 2).distance(Point(4, 6)) = {p11.distance(p12)}")
+print(f"Expected: 5")
+print()
+
+# Test case 7: 3D vs 3D (should still work)
+p13 = Point(1, 2, 3)
+p14 = Point(4, 6, 8)
+print(f"Point(1, 2, 3).distance(Point(4, 6, 8)) = {p13.distance(p14)}")
+print(f"Expected: sqrt(9 + 16 + 25) = sqrt(50) = {sqrt(50)}")
+print()
+
+print("=== All tests completed ===")
\ No newline at end of file
diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py
index 100cdf1b8c..5d3a9031ea 100644
--- a/astropy/io/fits/diff.py
+++ b/astropy/io/fits/diff.py
@@ -1449,14 +1449,14 @@ class TableDataDiff(_BaseDiff):
                 arrb.dtype, np.floating
             ):
                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)
-            elif "P" in col.format:
+            elif "P" in col.format or "Q" in col.format:
                 diffs = (
                     [
                         idx
                         for idx in range(len(arra))
-                        if not np.allclose(
+                        if not np.all(np.allclose(
                             arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol
-                        )
+                        ))
                     ],
                 )
             else:
diff --git a/check_format.fits b/check_format.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/check_format.fits differ
diff --git a/check_format.py b/check_format.py
new file mode 100644
index 0000000000..f8aef581b2
--- /dev/null
+++ b/check_format.py
@@ -0,0 +1,12 @@
+from astropy.io import fits
+
+col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+hdu = fits.BinTableHDU.from_columns([col])
+hdu.writeto('check_format.fits', overwrite=True)
+
+with fits.open('check_format.fits') as hdul:
+    print("Column format:", hdul[1].columns['a'].format)
+    print("Column dtype:", hdul[1].columns['a'].dtype)
+    print("Data type:", type(hdul[1].data['a']))
+    print("Data dtype:", hdul[1].data['a'].dtype)
+    print("Data shape:", hdul[1].data['a'].shape)
\ No newline at end of file
diff --git a/debug_format.fits b/debug_format.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/debug_format.fits differ
diff --git a/debug_format.py b/debug_format.py
new file mode 100644
index 0000000000..52664db2bf
--- /dev/null
+++ b/debug_format.py
@@ -0,0 +1,10 @@
+from astropy.io import fits
+
+col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+hdu = fits.BinTableHDU.from_columns([col])
+hdu.writeto('debug_format.fits', overwrite=True)
+
+with fits.open('debug_format.fits') as hdul:
+    print("Column format string:", hdul[1].columns['a'].format)
+    print("'P' in format:", 'P' in hdul[1].columns['a'].format)
+    print("'Q' in format:", 'Q' in hdul[1].columns['a'].format)
\ No newline at end of file
diff --git a/debug_vla.fits b/debug_vla.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/debug_vla.fits differ
diff --git a/debug_vla.py b/debug_vla.py
new file mode 100644
index 0000000000..6f1f9c58b1
--- /dev/null
+++ b/debug_vla.py
@@ -0,0 +1,21 @@
+from astropy.io import fits
+import numpy as np
+
+# Create a VLA column
+col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+hdu = fits.BinTableHDU.from_columns([col])
+hdu.writeto('debug_vla.fits', overwrite=True)
+
+# Read the same file twice to see if there are differences
+with fits.open('debug_vla.fits') as hdul1:
+    with fits.open('debug_vla.fits') as hdul2:
+        print("HDUL1 data:", hdul1[1].data['a'])
+        print("HDUL2 data:", hdul2[1].data['a'])
+        print("Shapes:", hdul1[1].data['a'].shape, hdul2[1].data['a'].shape)
+        print("Arrays equal?", np.array_equal(hdul1[1].data['a'], hdul2[1].data['a']))
+        
+        # Try element-wise comparison
+        for i in range(len(hdul1[1].data['a'])):
+            print(f"Row {i}: {hdul1[1].data['a'][i]} vs {hdul2[1].data['a'][i]}")
+            print(f"  Equal? {np.array_equal(hdul1[1].data['a'][i], hdul2[1].data['a'][i])}")
+            print(f"  Allclose? {np.allclose(hdul1[1].data['a'][i], hdul2[1].data['a'][i])}")
\ No newline at end of file
diff --git a/diffbug.fits b/diffbug.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/diffbug.fits differ
diff --git a/empty_vla.fits b/empty_vla.fits
new file mode 100644
index 0000000000..7cda724494
Binary files /dev/null and b/empty_vla.fits differ
diff --git a/mixed.fits b/mixed.fits
new file mode 100644
index 0000000000..a55a65361d
Binary files /dev/null and b/mixed.fits differ
diff --git a/normal_table.fits b/normal_table.fits
new file mode 100644
index 0000000000..80fa0243c5
Binary files /dev/null and b/normal_table.fits differ
diff --git a/normal_table_diff.fits b/normal_table_diff.fits
new file mode 100644
index 0000000000..936993bdea
Binary files /dev/null and b/normal_table_diff.fits differ
diff --git a/pyproject.toml b/pyproject.toml
index b4e9ef8387..ff68a7403d 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a7747b1bbd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,7 @@
+from astropy.io import fits
+col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+hdu = fits.BinTableHDU.from_columns([col])
+hdu.writeto('diffbug.fits', overwrite=True)
+
+print(fits.FITSDiff('diffbug.fits', 'diffbug.fits').identical)
+fits.printdiff('diffbug.fits', 'diffbug.fits')
\ No newline at end of file
diff --git a/single_vla.fits b/single_vla.fits
new file mode 100644
index 0000000000..eba5194fa8
Binary files /dev/null and b/single_vla.fits differ
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..54d627d612
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,53 @@
+from astropy.io import fits
+import numpy as np
+
+# Test edge cases for VLA comparison
+print("=== Testing edge cases for VLA comparison ===")
+
+# Test case 1: VLA with different shapes but same content
+col1 = fits.Column('a', format='QD', array=[[1.0], [2.0, 3.0]])
+col2 = fits.Column('b', format='QD', array=[[1.0], [2.0, 3.0]])  # Same content
+hdu1 = fits.BinTableHDU.from_columns([col1])
+hdu2 = fits.BinTableHDU.from_columns([col2])
+hdu1.writeto('vla1.fits', overwrite=True)
+hdu2.writeto('vla2.fits', overwrite=True)
+
+diff = fits.FITSDiff('vla1.fits', 'vla2.fits')
+print(f"Same VLA content identical: {diff.identical}")
+
+# Test case 2: VLA with different content
+col3 = fits.Column('c', format='QD', array=[[1.0], [2.0, 4.0]])  # Different content
+hdu3 = fits.BinTableHDU.from_columns([col3])
+hdu3.writeto('vla3.fits', overwrite=True)
+
+diff2 = fits.FITSDiff('vla1.fits', 'vla3.fits')
+print(f"Different VLA content identical: {diff2.identical}")
+
+if not diff2.identical:
+    print("Differences found (expected):")
+    fits.printdiff('vla1.fits', 'vla3.fits')
+
+# Test case 3: Mixed VLA and regular columns
+col4 = fits.Column('vla_col', format='QD', array=[[1.0], [2.0, 3.0]])
+col5 = fits.Column('regular_col', format='I', array=[10, 20])
+hdu4 = fits.BinTableHDU.from_columns([col4, col5])
+hdu4.writeto('mixed.fits', overwrite=True)
+
+diff3 = fits.FITSDiff('mixed.fits', 'mixed.fits')
+print(f"Mixed columns identical: {diff3.identical}")
+
+# Test case 4: Empty VLA
+col6 = fits.Column('empty_vla', format='QD', array=[[]])
+hdu5 = fits.BinTableHDU.from_columns([col6])
+hdu5.writeto('empty_vla.fits', overwrite=True)
+
+diff4 = fits.FITSDiff('empty_vla.fits', 'empty_vla.fits')
+print(f"Empty VLA identical: {diff4.identical}")
+
+# Test case 5: Single element VLA
+col7 = fits.Column('single_vla', format='QD', array=[[5.0]])
+hdu6 = fits.BinTableHDU.from_columns([col7])
+hdu6.writeto('single_vla.fits', overwrite=True)
+
+diff5 = fits.FITSDiff('single_vla.fits', 'single_vla.fits')
+print(f"Single element VLA identical: {diff5.identical}")
\ No newline at end of file
diff --git a/test_non_vla.py b/test_non_vla.py
new file mode 100644
index 0000000000..3267a5779f
--- /dev/null
+++ b/test_non_vla.py
@@ -0,0 +1,30 @@
+from astropy.io import fits
+import numpy as np
+
+# Test that normal (non-VLA) comparisons still work correctly
+print("=== Testing normal (non-VLA) comparisons ===")
+
+# Create a simple table with regular columns
+col1 = fits.Column('a', format='I', array=[1, 2, 3])
+col2 = fits.Column('b', format='D', array=[1.0, 2.0, 3.0])
+hdu = fits.BinTableHDU.from_columns([col1, col2])
+hdu.writeto('normal_table.fits', overwrite=True)
+
+# Test self-comparison
+diff = fits.FITSDiff('normal_table.fits', 'normal_table.fits')
+print(f"Identical: {diff.identical}")
+
+# Test different files
+col1_diff = fits.Column('a', format='I', array=[1, 2, 4])  # Different value
+col2_diff = fits.Column('b', format='D', array=[1.0, 2.0, 3.0])
+hdu_diff = fits.BinTableHDU.from_columns([col1_diff, col2_diff])
+hdu_diff.writeto('normal_table_diff.fits', overwrite=True)
+
+diff2 = fits.FITSDiff('normal_table.fits', 'normal_table_diff.fits')
+print(f"Different files identical: {diff2.identical}")
+
+if not diff2.identical:
+    print("Differences found (expected):")
+    fits.printdiff('normal_table.fits', 'normal_table_diff.fits')
+else:
+    print("ERROR: Should have found differences!")
\ No newline at end of file
diff --git a/test_various_vla.py b/test_various_vla.py
new file mode 100644
index 0000000000..1ba335e14d
--- /dev/null
+++ b/test_various_vla.py
@@ -0,0 +1,30 @@
+from astropy.io import fits
+import numpy as np
+
+# Test various VLA formats and scenarios
+test_cases = [
+    # 32-bit VLA (P format)
+    {'name': 'P format', 'format': 'PD', 'array': [[1.0], [2.0, 3.0]]},
+    # 64-bit VLA (Q format) - our original case
+    {'name': 'Q format', 'format': 'QD', 'array': [[0], [0, 0]]},
+    # Mixed VLA types
+    {'name': 'Mixed Q format', 'format': 'QJ', 'array': [[1], [2, 3], [4, 5, 6]]},
+    # Empty VLA
+    {'name': 'Empty VLA', 'format': 'QD', 'array': [[]]},
+]
+
+for i, test_case in enumerate(test_cases):
+    print(f"\n=== Test {i+1}: {test_case['name']} ===")
+    
+    col = fits.Column('a', format=test_case['format'], array=test_case['array'])
+    hdu = fits.BinTableHDU.from_columns([col])
+    filename = f'test_vla_{i+1}.fits'
+    hdu.writeto(filename, overwrite=True)
+    
+    # Test self-comparison
+    diff = fits.FITSDiff(filename, filename)
+    print(f"Identical: {diff.identical}")
+    
+    if not diff.identical:
+        print("ERROR: Files should be identical!")
+        fits.printdiff(filename, filename)
\ No newline at end of file
diff --git a/test_vla_1.fits b/test_vla_1.fits
new file mode 100644
index 0000000000..367404fb6b
Binary files /dev/null and b/test_vla_1.fits differ
diff --git a/test_vla_2.fits b/test_vla_2.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/test_vla_2.fits differ
diff --git a/test_vla_3.fits b/test_vla_3.fits
new file mode 100644
index 0000000000..0971015ec9
Binary files /dev/null and b/test_vla_3.fits differ
diff --git a/test_vla_4.fits b/test_vla_4.fits
new file mode 100644
index 0000000000..860a76d37d
Binary files /dev/null and b/test_vla_4.fits differ
diff --git a/test_vla_content.py b/test_vla_content.py
new file mode 100644
index 0000000000..736c41120e
--- /dev/null
+++ b/test_vla_content.py
@@ -0,0 +1,37 @@
+from astropy.io import fits
+import numpy as np
+
+print("=== Testing VLA content comparison specifically ===")
+
+# Test case 1: Same VLA content, same column names
+col1 = fits.Column('a', format='QD', array=[[1.0], [2.0, 3.0]])
+hdu1 = fits.BinTableHDU.from_columns([col1])
+hdu1.writeto('vla_same1.fits', overwrite=True)
+hdu1.writeto('vla_same2.fits', overwrite=True)  # Write same content to different file
+
+diff1 = fits.FITSDiff('vla_same1.fits', 'vla_same2.fits')
+print(f"Same VLA content, same column names identical: {diff1.identical}")
+
+# Test case 2: Different VLA content, same column names  
+col2 = fits.Column('a', format='QD', array=[[1.0], [2.0, 4.0]])  # Different content
+hdu2 = fits.BinTableHDU.from_columns([col2])
+hdu2.writeto('vla_diff.fits', overwrite=True)
+
+diff2 = fits.FITSDiff('vla_same1.fits', 'vla_diff.fits')
+print(f"Different VLA content, same column names identical: {diff2.identical}")
+
+if not diff2.identical:
+    print("Differences found (expected):")
+    fits.printdiff('vla_same1.fits', 'vla_diff.fits')
+
+# Test case 3: Self-comparison (the original issue)
+diff3 = fits.FITSDiff('vla_same1.fits', 'vla_same1.fits')
+print(f"Self-comparison identical: {diff3.identical}")
+
+# Test case 4: Test with tolerance
+col3 = fits.Column('a', format='QD', array=[[1.0], [2.0, 3.000001]])  # Slightly different
+hdu3 = fits.BinTableHDU.from_columns([col3])
+hdu3.writeto('vla_tol.fits', overwrite=True)
+
+diff4 = fits.FITSDiff('vla_same1.fits', 'vla_tol.fits', rtol=1e-5)
+print(f"VLA with tolerance identical: {diff4.identical}")
\ No newline at end of file
diff --git a/vla1.fits b/vla1.fits
new file mode 100644
index 0000000000..d79ee7f4f9
Binary files /dev/null and b/vla1.fits differ
diff --git a/vla2.fits b/vla2.fits
new file mode 100644
index 0000000000..aaba0083f8
Binary files /dev/null and b/vla2.fits differ
diff --git a/vla3.fits b/vla3.fits
new file mode 100644
index 0000000000..cba84d3c5c
Binary files /dev/null and b/vla3.fits differ
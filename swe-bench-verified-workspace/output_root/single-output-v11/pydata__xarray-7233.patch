diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..a2030c63
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+import numpy as np
+import xarray as xr
+
+# Create the minimal example from the issue
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da)
+ds = da.to_dataset(name="T")
+
+print("Original dataset:")
+print(ds)
+print("\nCoordinates:")
+print(ds.coords)
+
+# Apply coarsen.construct
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+
+print("\nAfter coarsen.construct:")
+print(result)
+print("\nCoordinates after:")
+print(result.coords)
+
+# Check if 'day' is still a coordinate
+print(f"\nIs 'day' still a coordinate? {'day' in result.coords}")
+print(f"Variables: {list(result.data_vars.keys())}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..28644932
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+import numpy as np
+import xarray as xr
+
+# Test 1: Multiple non-dimensional coordinates
+print("=== Test 1: Multiple non-dimensional coordinates ===")
+da = xr.DataArray(np.arange(24),dims=["time"])
+da = da.assign_coords(day_of_year=365 * da, month_num=da % 12, year_num=2000 + da // 12)
+ds = da.to_dataset(name="T")
+
+print("Original dataset:")
+print(ds)
+print("Coordinates:", list(ds.coords.keys()))
+
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+print("\nAfter coarsen.construct:")
+print(result)
+print("Coordinates:", list(result.coords.keys()))
+print("Variables:", list(result.data_vars.keys()))
+print()
+
+# Test 2: No non-dimensional coordinates
+print("=== Test 2: No non-dimensional coordinates ===")
+da = xr.DataArray(np.arange(24), dims=["time"])
+ds = da.to_dataset(name="T")
+
+print("Original dataset:")
+print(ds)
+print("Coordinates:", list(ds.coords.keys()))
+
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+print("\nAfter coarsen.construct:")
+print(result)
+print("Coordinates:", list(result.coords.keys()))
+print("Variables:", list(result.data_vars.keys()))
+print()
+
+# Test 3: Mixed dimensional and non-dimensional coordinates
+print("=== Test 3: Mixed dimensional and non-dimensional coordinates ===")
+da = xr.DataArray(np.arange(24), dims=["time"], coords={"time": np.arange(24)})
+da = da.assign_coords(day=365 * da)
+ds = da.to_dataset(name="T")
+
+print("Original dataset:")
+print(ds)
+print("Coordinates:", list(ds.coords.keys()))
+
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+print("\nAfter coarsen.construct:")
+print(result)
+print("Coordinates:", list(result.coords.keys()))
+print("Variables:", list(result.data_vars.keys()))
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index c194ec08..74be8983 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -973,7 +973,8 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             else:
                 reshaped[key] = var
 
-        should_be_coords = set(window_dim) & set(self.obj.coords)
+        # Preserve all coordinates from the original object
+        should_be_coords = set(self.obj.coords)
         result = reshaped.set_coords(should_be_coords)
         if isinstance(self.obj, DataArray):
             return self.obj._from_temp_dataset(result)
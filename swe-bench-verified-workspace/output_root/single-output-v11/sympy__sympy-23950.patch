diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..039e27d60c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+from sympy import Contains, Reals, Symbol
+
+# Reproduce the issue mentioned in the GitHub issue
+x = Symbol('x')
+result = Contains(x, Reals).as_set()
+print("Contains(x, Reals).as_set() =", result)
+
+# Try to use it in Piecewise to reproduce the AttributeError
+from sympy import Piecewise
+try:
+    piecewise_result = Piecewise((6, Contains(x, Reals)), (7, True))
+    print("Piecewise result:", piecewise_result)
+except AttributeError as e:
+    print("AttributeError:", e)
+except Exception as e:
+    print("Other error:", e)
\ No newline at end of file
diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..c6e3cd2e53 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -45,4 +45,16 @@ def binary_symbols(self):
             isinstance(i, (Eq, Ne))])
 
     def as_set(self):
-        raise NotImplementedError()
+        """
+        Return the set for which the Contains object is defined.
+
+        Examples
+        ========
+
+        >>> from sympy import Contains, Reals, Symbol
+        >>> x = Symbol('x')
+        >>> Contains(x, Reals).as_set()
+        Reals
+
+        """
+        return self.args[1]
diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py
index 1973fed19c..089dcdcc4f 100644
--- a/sympy/sets/tests/test_contains.py
+++ b/sympy/sets/tests/test_contains.py
@@ -41,10 +41,9 @@ def test_binary_symbols():
 def test_as_set():
     x = Symbol('x')
     y = Symbol('y')
-    # Contains is a BooleanFunction whose value depends on an arg's
-    # containment in a Set -- rewriting as a Set is not yet implemented
-    raises(NotImplementedError, lambda:
-           Contains(x, FiniteSet(y)).as_set())
+    # Contains.as_set() returns the set for which the Contains object is defined
+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)
+    assert Contains(x, S.Reals).as_set() == S.Reals
 
 def test_type_error():
     # Pass in a parameter not of type "set"
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..10a0b37b40
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from sympy import Contains, Reals, Integers, Interval, FiniteSet, Symbol
+
+x = Symbol('x')
+
+# Test with different types of sets
+print("Testing Contains.as_set() with different sets:")
+print("Reals:", Contains(x, Reals).as_set())
+print("Integers:", Contains(x, Integers).as_set())
+print("Interval:", Contains(x, Interval(0, 1)).as_set())
+print("FiniteSet:", Contains(x, FiniteSet(1, 2, 3)).as_set())
+
+# Verify that the returned objects are indeed sets with as_relational method
+print("\nTesting that returned objects have as_relational method:")
+reals_set = Contains(x, Reals).as_set()
+print("Reals has as_relational:", hasattr(reals_set, 'as_relational'))
+if hasattr(reals_set, 'as_relational'):
+    print("Reals.as_relational(x):", reals_set.as_relational(x))
+
+integers_set = Contains(x, Integers).as_set()
+print("Integers has as_relational:", hasattr(integers_set, 'as_relational'))
+if hasattr(integers_set, 'as_relational'):
+    print("Integers.as_relational(x):", integers_set.as_relational(x))
+
+# Test that Piecewise now works correctly
+from sympy import Piecewise
+print("\nTesting Piecewise with Contains:")
+try:
+    result = Piecewise((6, Contains(x, Reals)), (7, True))
+    print("Piecewise result:", result)
+except Exception as e:
+    print("Error:", e)
\ No newline at end of file
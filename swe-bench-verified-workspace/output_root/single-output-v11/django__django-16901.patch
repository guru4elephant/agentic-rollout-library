diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a8d2a827ad
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+"""Reproduce the XOR issue with Q objects."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Q
+from django.db import models
+
+# Create a simple test model
+class Client(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create database tables
+from django.db import connection
+connection.prepare_database()
+
+# Test the XOR behavior
+def test_xor_behavior():
+    print("Testing XOR behavior with Q objects...")
+    
+    # Create a client
+    client = Client.objects.create(name="Test Client")
+    
+    # Test cases from the issue
+    test_cases = [
+        (Q(id=client.id), 1),
+        (Q(id=client.id) ^ Q(id=client.id), 0),
+        (Q(id=client.id) ^ Q(id=client.id) ^ Q(id=client.id), 1),
+        (Q(id=client.id) ^ Q(id=client.id) ^ Q(id=client.id) ^ Q(id=client.id), 0),
+        (Q(id=client.id) ^ Q(id=client.id) ^ Q(id=client.id) ^ Q(id=client.id) ^ Q(id=client.id), 1),
+    ]
+    
+    for i, (query, expected) in enumerate(test_cases):
+        count = Client.objects.filter(query).count()
+        print(f"Test {i+1}: Expected {expected}, Got {count} - {'PASS' if count == expected else 'FAIL'}")
+        
+        if count != expected:
+            print(f"  Query: {query}")
+            # Let's see the SQL generated
+            from django.db import connection
+            sql = str(Client.objects.filter(query).query)
+            print(f"  SQL: {sql}")
+
+if __name__ == "__main__":
+    test_xor_behavior()
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..007b85adc8
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""Simple reproduction of XOR issue - just check the SQL generation."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Q
+
+def test_xor_sql_generation():
+    print("Testing XOR SQL generation with Q objects...")
+    
+    # Create some dummy Q objects for testing
+    q1 = Q(id=1)
+    q2 = Q(id=2)
+    q3 = Q(id=3)
+    
+    # Test cases from the issue
+    test_cases = [
+        ("Single Q", q1),
+        ("Q ^ Q", q1 ^ q2),
+        ("Q ^ Q ^ Q", q1 ^ q2 ^ q3),
+        ("Q ^ Q ^ Q ^ Q", q1 ^ q2 ^ q3 ^ q1),
+        ("Q ^ Q ^ Q ^ Q ^ Q", q1 ^ q2 ^ q3 ^ q1 ^ q2),
+    ]
+    
+    for name, query in test_cases:
+        from django.db import connection
+        from django.db.models.sql.query import Query
+        from django.db.models import Model
+        
+        # Create a dummy query to see the SQL
+        dummy_query = Query(Model)
+        dummy_query.add_q(query)
+        
+        compiler = dummy_query.get_compiler(using='default')
+        sql, params = compiler.as_sql()
+        
+        print(f"\n{name}:")
+        print(f"  SQL: {sql}")
+        print(f"  Params: {params}")
+
+if __name__ == "__main__":
+    test_xor_sql_generation()
\ No newline at end of file
diff --git a/test_xor_issue.py b/test_xor_issue.py
new file mode 100644
index 0000000000..fb32e518ab
--- /dev/null
+++ b/test_xor_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the XOR issue with multiple operands."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',  # SQLite doesn't support XOR natively
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Q
+from django.db import models
+
+# Create a simple test model
+class TestModel(models.Model):
+    value = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+
+def test_xor_behavior():
+    print("Testing XOR behavior with multiple Q objects...")
+    
+    # Create test data
+    TestModel.objects.create(value=1)
+    
+    # Test cases from the issue
+    test_cases = [
+        ("Single Q", Q(value=1), 1),
+        ("Q ^ Q", Q(value=1) ^ Q(value=1), 0),
+        ("Q ^ Q ^ Q", Q(value=1) ^ Q(value=1) ^ Q(value=1), 1),
+        ("Q ^ Q ^ Q ^ Q", Q(value=1) ^ Q(value=1) ^ Q(value=1) ^ Q(value=1), 0),
+        ("Q ^ Q ^ Q ^ Q ^ Q", Q(value=1) ^ Q(value=1) ^ Q(value=1) ^ Q(value=1) ^ Q(value=1), 1),
+    ]
+    
+    for name, query, expected in test_cases:
+        count = TestModel.objects.filter(query).count()
+        print(f"{name}: Expected {expected}, Got {count} - {'PASS' if count == expected else 'FAIL'}")
+        
+        if count != expected:
+            print(f"  Query: {query}")
+            # Let's see the SQL generated
+            sql = str(TestModel.objects.filter(query).query)
+            print(f"  SQL: {sql}")
+
+if __name__ == "__main__":
+    # Create database tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+    
+    test_xor_behavior()
\ No newline at end of file
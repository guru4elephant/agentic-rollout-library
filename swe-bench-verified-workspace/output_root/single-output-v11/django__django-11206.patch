diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..ad0f39b6e4
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+from decimal import Decimal
+
+# Import and test the function directly
+from django.utils.numberformat import format as nformat
+
+# Configure minimal settings to avoid Django setup issues
+import django.conf
+django.conf.settings.configure(
+    USE_L10N=False,
+    USE_THOUSAND_SEPARATOR=False,
+    SECRET_KEY='dummy-key-for-testing'
+)
+
+print("Testing the main issue:")
+result1 = nformat(Decimal('1e-199'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-199'), '.', decimal_pos=2) = '{result1}'")
+
+result2 = nformat(Decimal('1e-200'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-200'), '.', decimal_pos=2) = '{result2}'")
+
+print(f"Both should return '0.00': {result1 == '0.00' and result2 == '0.00'}")
+
+print("\nTesting edge cases:")
+# Test with different decimal_pos values
+result3 = nformat(Decimal('1e-5'), '.', decimal_pos=4)  # 0.0001e-5 is 1e-9 which is > 1e-4, so should show as 0.0000
+print(f"nformat(Decimal('1e-5'), '.', decimal_pos=4) = '{result3}' (should be '0.0000')")
+
+result4 = nformat(Decimal('1e-6'), '.', decimal_pos=4)  # 1e-6 < 1e-4, so should show as 0.0000
+print(f"nformat(Decimal('1e-6'), '.', decimal_pos=4) = '{result4}' (should be '0.0000')")
+
+# Test with numbers that are not too small
+result5 = nformat(Decimal('0.001'), '.', decimal_pos=2)  # 0.001 > 1e-2, so should show as 0.00
+print(f"nformat(Decimal('0.001'), '.', decimal_pos=2) = '{result5}' (should be '0.00')")
+
+result6 = nformat(Decimal('0.01'), '.', decimal_pos=2)   # 0.01 == 1e-2, so should show as 0.01
+print(f"nformat(Decimal('0.01'), '.', decimal_pos=2) = '{result6}' (should be '0.01')")
+
+# Test with negative numbers
+result7 = nformat(Decimal('-1e-200'), '.', decimal_pos=2)
+print(f"nformat(Decimal('-1e-200'), '.', decimal_pos=2) = '{result7}' (should be '-0.00')")
+
+# Test without decimal_pos (should use original behavior)
+result8 = nformat(Decimal('1e-200'), '.')
+print(f"nformat(Decimal('1e-200'), '.') = '{result8}' (should use scientific notation)")
+
+# Test with zero
+result9 = nformat(Decimal('0'), '.', decimal_pos=2)
+print(f"nformat(Decimal('0'), '.', decimal_pos=2) = '{result9}' (should be '0.00')")
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..d0dfe85d2c 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -30,7 +30,19 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
         # Format values with more than 200 digits (an arbitrary cutoff) using
         # scientific notation to avoid high memory usage in {:f}'.format().
         _, digits, exponent = number.as_tuple()
-        if abs(exponent) + len(digits) > 200:
+        
+        # Check if decimal_pos is specified and the number is smaller than
+        # what can be represented with the given number of decimal places
+        if decimal_pos is not None and abs(number) < Decimal('1e-{}'.format(decimal_pos)):
+            # Number is too small to represent with the given decimal_pos
+            # Return zero with the appropriate number of decimal places
+            int_part = '0'
+            dec_part = '0' * decimal_pos
+            str_number = int_part + '.' + dec_part
+            # Handle sign for zero values
+            if number < Decimal('0'):
+                sign = '-'
+        elif abs(exponent) + len(digits) > 200:
             number = '{:e}'.format(number)
             coefficient, exponent = number.split('e')
             # Format the coefficient.
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..bdd69645fc
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+from decimal import Decimal
+
+# Import and test the function directly
+from django.utils.numberformat import format as nformat
+
+# Configure minimal settings to avoid Django setup issues
+import django.conf
+django.conf.settings.configure(
+    USE_L10N=False,
+    USE_THOUSAND_SEPARATOR=False,
+    SECRET_KEY='dummy-key-for-testing'
+)
+
+print("Testing boundary cases:")
+# Test exactly at the boundary
+result1 = nformat(Decimal('1e-2'), '.', decimal_pos=2)  # 0.01 == 1e-2, should show as 0.01
+print(f"nformat(Decimal('1e-2'), '.', decimal_pos=2) = '{result1}' (should be '0.01')")
+
+result2 = nformat(Decimal('0.99e-2'), '.', decimal_pos=2)  # 0.0099 < 1e-2, should show as 0.00
+print(f"nformat(Decimal('0.99e-2'), '.', decimal_pos=2) = '{result2}' (should be '0.00')")
+
+# Test with very large decimal_pos
+result3 = nformat(Decimal('1e-100'), '.', decimal_pos=50)  # 1e-100 < 1e-50, should show as 0.00...0 (50 zeros)
+print(f"nformat(Decimal('1e-100'), '.', decimal_pos=50) = '{result3}' (should be 0 followed by 50 zeros)")
+
+# Test with numbers that should still use scientific notation (no decimal_pos)
+result4 = nformat(Decimal('1e-201'), '.')  # Should use scientific notation
+print(f"nformat(Decimal('1e-201'), '.') = '{result4}' (should use scientific notation)")
+
+# Test with positive numbers that are not too small
+result5 = nformat(Decimal('123.456'), '.', decimal_pos=2)
+print(f"nformat(Decimal('123.456'), '.', decimal_pos=2) = '{result5}' (should be '123.46')")
+
+print("\nAll edge case tests completed!")
\ No newline at end of file
diff --git a/final_validation.py b/final_validation.py
new file mode 100644
index 0000000000..7dbcd489d7
--- /dev/null
+++ b/final_validation.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+from decimal import Decimal
+
+# Import and test the function directly
+from django.utils.numberformat import format as nformat
+
+# Configure minimal settings to avoid Django setup issues
+import django.conf
+django.conf.settings.configure(
+    USE_L10N=False,
+    USE_THOUSAND_SEPARATOR=False,
+    SECRET_KEY='dummy-key-for-testing'
+)
+
+print("=== FINAL VALIDATION TESTS ===")
+
+# Test the original GitHub issue
+print("\n1. Original GitHub issue:")
+result1 = nformat(Decimal('1e-199'), '.', decimal_pos=2)
+result2 = nformat(Decimal('1e-200'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-199'), '.', decimal_pos=2) = '{result1}'")
+print(f"nformat(Decimal('1e-200'), '.', decimal_pos=2) = '{result2}'")
+print(f"Both return '0.00': {result1 == '0.00' and result2 == '0.00'}")
+
+# Test existing Django test cases
+print("\n2. Existing Django test cases:")
+result3 = nformat(Decimal('9e-19'), '.', decimal_pos=2)
+result4 = nformat(Decimal('1e-9'), '.', decimal_pos=8)
+result5 = nformat(Decimal('1e-10'), '.', decimal_pos=8)
+print(f"nformat(Decimal('9e-19'), '.', decimal_pos=2) = '{result3}' (expected: '0.00')")
+print(f"nformat(Decimal('1e-9'), '.', decimal_pos=8) = '{result4}' (expected: '0.00000000')")
+print(f"nformat(Decimal('1e-10'), '.', decimal_pos=8) = '{result5}' (expected: '0.00000000')")
+print(f"All pass: {result3 == '0.00' and result4 == '0.00000000' and result5 == '0.00000000'}")
+
+# Test boundary conditions
+print("\n3. Boundary conditions:")
+result6 = nformat(Decimal('1e-2'), '.', decimal_pos=2)  # Exactly at boundary
+result7 = nformat(Decimal('0.99e-2'), '.', decimal_pos=2)  # Just below boundary
+print(f"nformat(Decimal('1e-2'), '.', decimal_pos=2) = '{result6}' (should be '0.01')")
+print(f"nformat(Decimal('0.99e-2'), '.', decimal_pos=2) = '{result7}' (should be '0.00')")
+
+# Test negative numbers
+print("\n4. Negative numbers:")
+result8 = nformat(Decimal('-1e-200'), '.', decimal_pos=2)
+print(f"nformat(Decimal('-1e-200'), '.', decimal_pos=2) = '{result8}' (should be '-0.00')")
+
+# Test without decimal_pos (should use original behavior)
+print("\n5. Without decimal_pos (original behavior):")
+result9 = nformat(Decimal('1e-200'), '.')
+print(f"nformat(Decimal('1e-200'), '.') = '{result9}' (should use scientific notation)")
+
+# Test normal numbers (should not be affected)
+print("\n6. Normal numbers (should not be affected):")
+result10 = nformat(Decimal('123.456'), '.', decimal_pos=2)
+result11 = nformat(Decimal('0.01'), '.', decimal_pos=2)
+print(f"nformat(Decimal('123.456'), '.', decimal_pos=2) = '{result10}'")
+print(f"nformat(Decimal('0.01'), '.', decimal_pos=2) = '{result11}'")
+
+print("\n=== VALIDATION COMPLETE ===")
+all_passed = (result1 == '0.00' and result2 == '0.00' and result3 == '0.00' and 
+              result4 == '0.00000000' and result5 == '0.00000000' and result6 == '0.01' and
+              result7 == '0.00' and result8 == '-0.00' and result9 == '1e-200')
+print(f"All tests passed: {all_passed}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..03c255987b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+import os
+import django
+from decimal import Decimal
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+from django.utils.numberformat import format as nformat
+
+# Test cases from the GitHub issue
+print("Testing the issue:")
+result1 = nformat(Decimal('1e-199'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-199'), '.', decimal_pos=2) = '{result1}'")
+
+result2 = nformat(Decimal('1e-200'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-200'), '.', decimal_pos=2) = '{result2}'")
+
+# Expected: both should return '0.00'
+print(f"Expected: both should return '0.00'")
+print(f"First case works: {result1 == '0.00'}")
+print(f"Second case fails: {result2 == '0.00'}")
+
+# Additional edge cases
+print("\nTesting edge cases:")
+result3 = nformat(Decimal('1e-10'), '.', decimal_pos=5)
+print(f"nformat(Decimal('1e-10'), '.', decimal_pos=5) = '{result3}'")
+
+result4 = nformat(Decimal('1e-15'), '.', decimal_pos=10)
+print(f"nformat(Decimal('1e-15'), '.', decimal_pos=10) = '{result4}'")
+
+result5 = nformat(Decimal('1e-100'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-100'), '.', decimal_pos=2) = '{result5}'")
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..265316448e
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+from decimal import Decimal
+
+# Let's examine the numberformat.py function directly
+import sys
+sys.path.insert(0, '.')
+
+# Import and test the function directly
+from django.utils.numberformat import format as nformat
+
+# Configure minimal settings to avoid Django setup issues
+import django.conf
+django.conf.settings.configure(
+    USE_L10N=False,
+    USE_THOUSAND_SEPARATOR=False,
+    SECRET_KEY='dummy-key-for-testing'
+)
+
+# Test cases from the GitHub issue
+print("Testing the issue:")
+result1 = nformat(Decimal('1e-199'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-199'), '.', decimal_pos=2) = '{result1}'")
+
+result2 = nformat(Decimal('1e-200'), '.', decimal_pos=2)
+print(f"nformat(Decimal('1e-200'), '.', decimal_pos=2) = '{result2}'")
+
+# Expected: both should return '0.00'
+print(f"Expected: both should return '0.00'")
+print(f"First case works: {result1 == '0.00'}")
+print(f"Second case fails: {result2 == '0.00'}")
\ No newline at end of file
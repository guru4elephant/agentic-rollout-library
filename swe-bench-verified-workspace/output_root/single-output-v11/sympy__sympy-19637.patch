diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..326996ee02
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3
+
+from sympy.core.sympify import kernS
+
+# Original issue case
+text = "(2*x)/(x-1)"
+print(f"Testing original issue: {text}")
+
+try:
+    expr = kernS(text)
+    print(f"Success: {expr}")
+    print(f"Type: {type(expr)}")
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
+
+# Additional test cases that should work without spaces
+test_cases = [
+    "2*(x+y)",
+    "-(x+1)", 
+    "x+y",
+    "a*b*c"
+]
+
+print("\nTesting additional cases without spaces:")
+for case in test_cases:
+    try:
+        expr = kernS(case)
+        print(f"  {case} -> {expr}")
+    except Exception as e:
+        print(f"  {case} -> Error: {e}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ca87ec863a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sympy.core.sympify import kernS
+
+# Test case from the issue
+text = "(2*x)/(x-1)"
+print(f"Testing with text: {text}")
+
+try:
+    expr = kernS(text)
+    print(f"Success: {expr}")
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
+
+# Test with another case that should trigger the space handling
+text_with_spaces = "2 * (x + y)"
+print(f"\nTesting with text containing spaces: {text_with_spaces}")
+
+try:
+    expr = kernS(text_with_spaces)
+    print(f"Success: {expr}")
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py
index a3f1ce2851..f86ab5b049 100644
--- a/sympy/core/sympify.py
+++ b/sympy/core/sympify.py
@@ -507,13 +507,14 @@ def kernS(s):
                     break
             s = s[:j] + ")" + s[j:]
             i = j + 2  # the first char after 2nd )
+        kern = None
         if ' ' in s:
             # get a unique kern
             kern = '_'
             while kern in s:
                 kern += choice(string.ascii_letters + string.digits)
             s = s.replace(' ', kern)
-        hit = kern in s
+        hit = kern is not None and kern in s
 
     for i in range(2):
         try:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6fa73ae36f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from sympy.core.sympify import kernS
+
+# Test various edge cases
+test_cases = [
+    "(2*x)/(x-1)",           # Original issue case
+    "2*(x+y)",               # No spaces
+    "2 * (x + y)",           # With spaces
+    "-(x+1)",                # Negative sign
+    "- (x + 1)",             # Negative sign with space
+    "x + y",                 # Simple addition
+    "x +  y",                # Extra space
+    "a*b*c",                 # Multiple multiplication
+    "a * b * c",             # Multiple multiplication with spaces
+    "",                      # Empty string
+    "123",                   # Just a number
+    "x",                     # Just a variable
+]
+
+print("Testing edge cases:")
+for i, text in enumerate(test_cases):
+    print(f"\nTest {i+1}: {text}")
+    try:
+        expr = kernS(text)
+        print(f"  Success: {expr}")
+    except Exception as e:
+        print(f"  Error: {e}")
+        print(f"  Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_kerns_functionality.py b/test_kerns_functionality.py
new file mode 100644
index 0000000000..0ef20f9bab
--- /dev/null
+++ b/test_kerns_functionality.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+from sympy.core.sympify import kernS
+from sympy import Symbol, exp, Interval, Add, Mul
+from sympy.abc import x, y
+
+# Test the specific cases from the test_kernS function
+def test_kernS_functionality():
+    print("Testing kernS functionality...")
+    
+    # Test case 1
+    s = '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'
+    ss = kernS(s)
+    print(f"Test 1: {ss}")
+    assert ss != -1, "Test 1 failed"
+    
+    # Test case 2 - with _kern replacement
+    s = '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'.replace('x', '_kern')
+    ss = kernS(s)
+    print(f"Test 2: {ss}")
+    assert ss != -1, "Test 2 failed"
+    
+    # Test case 3 - Interval
+    result = kernS('Interval(-1,-2 - 4*(-3))')
+    print(f"Test 3: {result}")
+    
+    # Test case 4 - Symbol
+    result = kernS('_kern')
+    print(f"Test 4: {result}")
+    assert result == Symbol('_kern'), "Test 4 failed"
+    
+    # Test case 5 - Exponential
+    result = kernS('E**-(x)')
+    print(f"Test 5: {result}")
+    assert result == exp(-x), "Test 5 failed"
+    
+    # Test case 6 - List input
+    e = 2*(x + y)*y
+    result = kernS(['2*(x + y)*y', ('2*(x + y)*y',)])
+    print(f"Test 6: {result}")
+    assert result == [e, (e,)], "Test 6 failed"
+    
+    print("All kernS functionality tests passed!")
+
+if __name__ == "__main__":
+    test_kernS_functionality()
\ No newline at end of file
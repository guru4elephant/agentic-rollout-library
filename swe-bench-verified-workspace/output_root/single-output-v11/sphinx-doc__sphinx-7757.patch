diff --git a/debug_ast.py b/debug_ast.py
new file mode 100644
index 000000000..6b399ef01
--- /dev/null
+++ b/debug_ast.py
@@ -0,0 +1,19 @@
+#!/usr/bin/env python3
+
+import ast
+
+# Let's examine the AST structure for the function signature
+signature = "def func(a, b=0, /, c=1): pass"
+module = ast.parse(signature)
+definition = module.body[0]
+
+print("AST structure:")
+print(ast.dump(definition, indent=2))
+
+print("\nArgs attributes:")
+args = definition.args
+for attr in dir(args):
+    if not attr.startswith('_'):
+        value = getattr(args, attr)
+        if value and not callable(value):
+            print(f"  {attr}: {value}")
\ No newline at end of file
diff --git a/debug_defaults.py b/debug_defaults.py
new file mode 100644
index 000000000..3641e4311
--- /dev/null
+++ b/debug_defaults.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+import ast
+
+# Let's examine the AST structure for the function signature in detail
+signature = "def func(a, b=0, /, c=1): pass"
+module = ast.parse(signature)
+definition = module.body[0]
+args = definition.args
+
+print("AST details:")
+print(f"posonlyargs: {[arg.arg for arg in args.posonlyargs]}")
+print(f"args: {[arg.arg for arg in args.args]}")
+print(f"defaults: {[default.value for default in args.defaults]}")
+
+print("\nDefault assignment logic:")
+print("For positional-only arguments:")
+for i, arg in enumerate(args.posonlyargs):
+    print(f"  {arg.arg}: index {i}, default index calculation: -len(posonlyargs) + i = {-len(args.posonlyargs) + i}")
+    if len(args.posonlyargs) - i <= len(args.defaults):
+        default_index = -len(args.posonlyargs) + i
+        print(f"    Default index: {default_index}, value: {args.defaults[default_index].value}")
+    else:
+        print(f"    No default")
+
+print("\nFor regular arguments:")
+for i, arg in enumerate(args.args):
+    print(f"  {arg.arg}: index {i}, default index calculation: -len(args) + i = {-len(args.args) + i}")
+    if len(args.args) - i <= len(args.defaults):
+        default_index = -len(args.args) + i
+        print(f"    Default index: {default_index}, value: {args.defaults[default_index].value}")
+    else:
+        print(f"    No default")
\ No newline at end of file
diff --git a/debug_detailed.py b/debug_detailed.py
new file mode 100644
index 000000000..4bae35530
--- /dev/null
+++ b/debug_detailed.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+import ast
+from sphinx.pycode.ast import unparse as ast_unparse
+
+# Let's examine the AST structure for the function signature in detail
+signature = "def func(a, b=0, /, c=1): pass"
+module = ast.parse(signature)
+definition = module.body[0]
+args = definition.args
+
+print("AST details:")
+print(f"posonlyargs: {[arg.arg for arg in args.posonlyargs]}")
+print(f"args: {[arg.arg for arg in args.args]}")
+print(f"defaults: {[ast_unparse(default) for default in args.defaults]}")
+
+print("\nTesting the current logic:")
+print("For positional-only arguments:")
+for i, arg in enumerate(args.posonlyargs):
+    condition = len(args.posonlyargs) - i <= len(args.defaults)
+    print(f"  {arg.arg}: index {i}, condition {len(args.posonlyargs)} - {i} <= {len(args.defaults)} = {condition}")
+    if condition:
+        default_index = -len(args.posonlyargs) + i
+        default_value = ast_unparse(args.defaults[default_index]) if default_index < 0 else "N/A"
+        print(f"    Default index: {default_index}, value: {default_value}")
+    else:
+        print(f"    No default")
+
+print("\nFor regular arguments:")
+for i, arg in enumerate(args.args):
+    condition = len(args.args) - i <= len(args.defaults)
+    print(f"  {arg.arg}: index {i}, condition {len(args.args)} - {i} <= {len(args.defaults)} = {condition}")
+    if condition:
+        default_index = -len(args.args) + i
+        default_value = ast_unparse(args.defaults[default_index]) if default_index < 0 else "N/A"
+        print(f"    Default index: {default_index}, value: {default_value}")
+    else:
+        print(f"    No default")
\ No newline at end of file
diff --git a/debug_signature.py b/debug_signature.py
new file mode 100644
index 000000000..260cbbac8
--- /dev/null
+++ b/debug_signature.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sphinx.util.inspect import signature_from_str
+from sphinx.domains.python import _parse_arglist
+
+# Test the signature parsing directly
+arglist = "a, b=0, /, c=1"
+print(f"Testing arglist: {arglist}")
+
+try:
+    # Test signature parsing
+    sig = signature_from_str('(%s)' % arglist)
+    print("Parameters found:")
+    for name, param in sig.parameters.items():
+        print(f"  {name}: kind={param.kind}, default={param.default}")
+    
+    # Test the arglist parsing
+    result = _parse_arglist(arglist)
+    print("Parsed arglist result:")
+    print(result)
+    
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..2da99073e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+
+import tempfile
+import os
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Create a simple test document with the problematic function signature
+rst_content = """
+Test Function
+=============
+
+.. py:function:: foo(a, b=0, /, c=1)
+
+   Test function with positional-only arguments and defaults.
+"""
+
+# Create a minimal Sphinx configuration
+conf_content = """
+project = 'Test'
+extensions = []
+"""
+
+def test_positional_only_defaults():
+    with tempfile.TemporaryDirectory() as tmpdir:
+        srcdir = os.path.join(tmpdir, 'source')
+        outdir = os.path.join(tmpdir, 'build')
+        doctreedir = os.path.join(tmpdir, 'doctrees')
+        
+        os.makedirs(srcdir)
+        
+        # Write the test files
+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+            f.write(rst_content)
+        
+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+            f.write(conf_content)
+        
+        # Build with Sphinx
+        with docutils_namespace():
+            app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'html')
+            app.build()
+        
+        # Check the output
+        with open(os.path.join(outdir, 'index.html'), 'r') as f:
+            content = f.read()
+            print("Generated HTML content:")
+            print(content)
+            
+            # Check if default values are present
+            if 'b=0' in content:
+                print("✓ Default value for 'b' is present")
+            else:
+                print("✗ Default value for 'b' is missing")
+                
+            if 'c=1' in content:
+                print("✓ Default value for 'c' is present")
+            else:
+                print("✗ Default value for 'c' is missing")
+
+if __name__ == '__main__':
+    test_positional_only_defaults()
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 5e822fe9b..77b63df38 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 15f0d66e2..4c1cc7f65 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -521,14 +521,27 @@ def signature_from_str(signature: str) -> inspect.Signature:
     params = []
 
     if hasattr(args, "posonlyargs"):
-        for arg in args.posonlyargs:  # type: ignore
+        for i, arg in enumerate(args.posonlyargs):  # type: ignore
+            # For positional-only arguments, defaults are assigned to the last N
+            # where N = min(len(defaults), len(posonlyargs))
+            # The index in defaults is: i - (len(posonlyargs) - min(len(defaults), len(posonlyargs)))
+            num_posonly_defaults = min(len(args.defaults), len(args.posonlyargs))
+            if i >= len(args.posonlyargs) - num_posonly_defaults:
+                default_index = i - (len(args.posonlyargs) - num_posonly_defaults)
+                default = ast_unparse(args.defaults[default_index])
+            else:
+                default = Parameter.empty
             annotation = ast_unparse(arg.annotation) or Parameter.empty
             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,
-                                    annotation=annotation))
+                                    default=default, annotation=annotation))
 
     for i, arg in enumerate(args.args):
-        if len(args.args) - i <= len(args.defaults):
-            default = ast_unparse(args.defaults[-len(args.args) + i])
+        # For regular arguments, defaults are assigned to the last M
+        # where M = max(0, len(defaults) - len(posonlyargs))
+        num_regular_defaults = max(0, len(args.defaults) - len(args.posonlyargs))
+        if i >= len(args.args) - num_regular_defaults:
+            default_index = i - (len(args.args) - num_regular_defaults) + max(0, len(args.defaults) - num_regular_defaults)
+            default = ast_unparse(args.defaults[default_index])
         else:
             default = Parameter.empty
 
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3a2db9616c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from sympy import ring, ZZ, symbols
+
+# Create a polynomial ring and a polynomial
+R, x, y, z = ring("x,y,z", ZZ)
+f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+# Create different symbols
+U, V, W = symbols("u,v,w")
+
+print("Original polynomial:")
+print(f"f = {f}")
+print(f"f.as_expr() = {f.as_expr()}")
+print()
+
+# This should work but currently doesn't - it should use u,v,w instead of x,y,z
+print("Trying to use different symbols:")
+try:
+    result = f.as_expr(U, V, W)
+    print(f"f.as_expr(U, V, W) = {result}")
+    print("This should have used u, v, w symbols but it didn't!")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test with wrong number of symbols
+print("\nTesting with wrong number of symbols:")
+try:
+    result = f.as_expr(U, V)  # Only 2 symbols instead of 3
+    print(f"f.as_expr(U, V) = {result}")
+except Exception as e:
+    print(f"Expected error: {e}")
\ No newline at end of file
diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py
index 12bd2fc920..4f81743552 100644
--- a/sympy/polys/rings.py
+++ b/sympy/polys/rings.py
@@ -616,8 +616,9 @@ def set_ring(self, new_ring):
             return new_ring.from_dict(self, self.ring.domain)
 
     def as_expr(self, *symbols):
-        if symbols and len(symbols) != self.ring.ngens:
-            raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
+        if symbols:
+            if len(symbols) != self.ring.ngens:
+                raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
         else:
             symbols = self.ring.symbols
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..20d6bfc9a6
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+from sympy import ring, ZZ, symbols
+
+# Test 1: No symbols provided (should use original ring symbols)
+R, x, y, z = ring("x,y,z", ZZ)
+f = 3*x**2*y - x*y*z + 7*z**3 + 1
+print("Test 1 - No symbols provided:")
+print(f"f.as_expr() = {f.as_expr()}")
+print()
+
+# Test 2: Correct number of symbols provided (should use provided symbols)
+U, V, W = symbols("u,v,w")
+print("Test 2 - Correct number of symbols provided:")
+print(f"f.as_expr(U, V, W) = {f.as_expr(U, V, W)}")
+print()
+
+# Test 3: Wrong number of symbols provided (should raise error)
+print("Test 3 - Wrong number of symbols provided:")
+try:
+    result = f.as_expr(U, V)  # Only 2 symbols instead of 3
+    print(f"f.as_expr(U, V) = {result}")
+except ValueError as e:
+    print(f"Expected error: {e}")
+print()
+
+# Test 4: Empty tuple (should use original ring symbols)
+print("Test 4 - Empty tuple:")
+print(f"f.as_expr() = {f.as_expr()}")
+print()
+
+# Test 5: Single variable polynomial
+R_single, x_single = ring("x", ZZ)
+f_single = 3*x_single**2 + 2*x_single + 1
+U_single = symbols("u")
+print("Test 5 - Single variable:")
+print(f"f_single.as_expr() = {f_single.as_expr()}")
+print(f"f_single.as_expr(U_single) = {f_single.as_expr(U_single)}")
\ No newline at end of file
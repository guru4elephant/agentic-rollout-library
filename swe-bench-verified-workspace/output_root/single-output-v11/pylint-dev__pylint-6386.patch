diff --git a/mytest.py b/mytest.py
new file mode 100644
index 000000000..f651dab63
--- /dev/null
+++ b/mytest.py
@@ -0,0 +1,4 @@
+def hello():
+    print("Hello, world!")
+
+hello()
\ No newline at end of file
diff --git a/pylint/config/utils.py b/pylint/config/utils.py
index 8c790416f..7a3680972 100644
--- a/pylint/config/utils.py
+++ b/pylint/config/utils.py
@@ -64,14 +64,27 @@ def _convert_option_to_argument(
             section=optdict.get("group", None),
         )
     if not isinstance(action, str) and issubclass(action, _CallbackAction):
-        return _CallableArgument(
-            flags=flags,
-            action=action,
-            arg_help=optdict.get("help", ""),
-            kwargs=optdict.get("kwargs", {}),
-            hide_help=optdict.get("hide", False),
-            section=optdict.get("group", None),
-        )
+        # Check if this is a _DoNothingAction which doesn't require arguments
+        if action.__name__ == "_DoNothingAction":
+            kwargs = optdict.get("kwargs", {})
+            kwargs["nargs"] = 0
+            return _CallableArgument(
+                flags=flags,
+                action=action,
+                arg_help=optdict.get("help", ""),
+                kwargs=kwargs,
+                hide_help=optdict.get("hide", False),
+                section=optdict.get("group", None),
+            )
+        else:
+            return _CallableArgument(
+                flags=flags,
+                action=action,
+                arg_help=optdict.get("help", ""),
+                kwargs=optdict.get("kwargs", {}),
+                hide_help=optdict.get("hide", False),
+                section=optdict.get("group", None),
+            )
     try:
         default = optdict["default"]
     except KeyError:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..85954612a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python3
+"""Script to reproduce the verbose option issue."""
+
+import subprocess
+import sys
+
+def test_verbose_option():
+    """Test both long and short verbose options."""
+    # Test with long option --verbose (should work)
+    print("Testing --verbose (long option):")
+    result_long = subprocess.run([sys.executable, "-m", "pylint", "--verbose", "mytest.py"], 
+                               capture_output=True, text=True)
+    print(f"Exit code: {result_long.returncode}")
+    print(f"Output: {result_long.stdout}")
+    print(f"Error: {result_long.stderr}")
+    
+    print("\nTesting -v (short option):")
+    # Test with short option -v (should fail according to the issue)
+    result_short = subprocess.run([sys.executable, "-m", "pylint", "-v", "mytest.py"], 
+                                capture_output=True, text=True)
+    print(f"Exit code: {result_short.returncode}")
+    print(f"Output: {result_short.stdout}")
+    print(f"Error: {result_short.stderr}")
+
+if __name__ == "__main__":
+    test_verbose_option()
\ No newline at end of file
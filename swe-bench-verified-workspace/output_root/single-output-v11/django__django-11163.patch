diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..5edbbd376f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1046e402f8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django settings
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['test'],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create an instance
+instance = TestModel(name='John', age=30)
+
+# Test with empty fields list
+result = model_to_dict(instance, fields=[])
+print(f"Result with fields=[]: {result}")
+print(f"Expected: {{}} (empty dict)")
+print(f"Actual: {len(result)} fields returned")
+
+# Test with None fields (should return all fields)
+result_none = model_to_dict(instance, fields=None)
+print(f"\nResult with fields=None: {result_none}")
+print(f"Expected: all fields")
+print(f"Actual: {len(result_none)} fields returned")
+
+# Test with specific fields
+result_specific = model_to_dict(instance, fields=['name'])
+print(f"\nResult with fields=['name']: {result_specific}")
+print(f"Expected: only 'name' field")
+print(f"Actual: {len(result_specific)} fields returned")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..65d222dd9a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django settings
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['test'],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create an instance
+instance = TestModel(name='John', age=30)
+
+print("Testing edge cases for model_to_dict:")
+
+# Test 1: Empty list should return empty dict
+result1 = model_to_dict(instance, fields=[])
+print(f"1. fields=[]: {result1} (should be empty)")
+
+# Test 2: None should return all fields
+result2 = model_to_dict(instance, fields=None)
+print(f"2. fields=None: {len(result2)} fields (should be all fields)")
+
+# Test 3: Specific fields should return only those fields
+result3 = model_to_dict(instance, fields=['name'])
+print(f"3. fields=['name']: {result3} (should contain only 'name')")
+
+# Test 4: Empty tuple should return empty dict
+result4 = model_to_dict(instance, fields=())
+print(f"4. fields=(): {result4} (should be empty)")
+
+# Test 5: Empty set should return empty dict
+result5 = model_to_dict(instance, fields=set())
+print(f"5. fields=set(): {result5} (should be empty)")
+
+# Test 6: Non-empty iterables should work normally
+result6 = model_to_dict(instance, fields=['age'])
+print(f"6. fields=['age']: {result6} (should contain only 'age')")
+
+# Test 7: Test with exclude parameter
+result7 = model_to_dict(instance, exclude=['age'])
+print(f"7. exclude=['age']: {result7} (should not contain 'age')")
+
+# Test 8: Test with both fields and exclude
+result8 = model_to_dict(instance, fields=['name', 'age'], exclude=['age'])
+print(f"8. fields=['name','age'], exclude=['age']: {result8} (should contain only 'name')")
\ No newline at end of file
diff --git a/test_fix_validation.py b/test_fix_validation.py
new file mode 100644
index 0000000000..ab0c6fab7d
--- /dev/null
+++ b/test_fix_validation.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django settings
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Create an instance
+instance = TestModel(name='John', age=30)
+
+print("Testing the fix for model_to_dict with empty fields list:")
+
+# Test the specific issue: empty list should return empty dict
+result = model_to_dict(instance, fields=[])
+print(f"model_to_dict(instance, fields=[]): {result}")
+assert result == {}, f"Expected empty dict, got {result}"
+
+# Test that None still returns all fields
+result_none = model_to_dict(instance, fields=None)
+print(f"model_to_dict(instance, fields=None): {len(result_none)} fields")
+assert len(result_none) == 3, f"Expected 3 fields, got {len(result_none)}"
+
+# Test that specific fields still work
+result_specific = model_to_dict(instance, fields=['name'])
+print(f"model_to_dict(instance, fields=['name']): {result_specific}")
+assert result_specific == {'name': 'John'}, f"Expected {{'name': 'John'}}, got {result_specific}"
+
+# Test with empty tuple
+result_tuple = model_to_dict(instance, fields=())
+print(f"model_to_dict(instance, fields=()): {result_tuple}")
+assert result_tuple == {}, f"Expected empty dict, got {result_tuple}"
+
+# Test with empty set
+result_set = model_to_dict(instance, fields=set())
+print(f"model_to_dict(instance, fields=set()): {result_set}")
+assert result_set == {}, f"Expected empty dict, got {result_set}"
+
+print("All tests passed! The fix is working correctly.")
\ No newline at end of file
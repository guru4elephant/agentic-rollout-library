diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 6ea18dd22f..b14b4b0ca7 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -322,7 +322,8 @@ class LocalePrefixPattern:
 
     def match(self, path):
         language_prefix = self.language_prefix
-        if path.startswith(language_prefix):
+        # Make language prefix matching case-insensitive (RFC 5646)
+        if path.lower().startswith(language_prefix.lower()):
             return path[len(language_prefix):], (), {}
         return None
 
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 7dcc77b46c..1817b01c16 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -43,7 +43,10 @@ language_code_re = _lazy_re_compile(
     re.IGNORECASE
 )
 
-language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_prefix_re = _lazy_re_compile(
+    r'^/([a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?)(/|$)',
+    re.IGNORECASE
+)
 
 
 @receiver(setting_changed)
@@ -488,7 +491,9 @@ def get_supported_language_variant(lang_code, strict=False):
         supported_lang_codes = get_languages()
 
         for code in possible_lang_codes:
-            if code in supported_lang_codes and check_for_language(code):
+            # Normalize to lowercase for case-insensitive comparison (RFC 5646)
+            normalized_code = code.lower()
+            if any(normalized_code == supported_code.lower() for supported_code in supported_lang_codes) and check_for_language(code):
                 return code
         if not strict:
             # if fr-fr is not supported, try fr-ca.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..96171df58c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the i18n issue with language locales containing both script and region.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import TestCase
+from django.test.utils import get_runner
+from django.urls import path, include
+from django.http import HttpResponse
+from django.conf.urls.i18n import i18n_patterns
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        ALLOWED_HOSTS=['*'],
+        ROOT_URLCONF=__name__,
+        LANGUAGE_CODE='en-us',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English"),
+            ('en-Latn-US', "BCP 47 case format"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+    )
+
+django.setup()
+
+def bangiah(request):
+    return HttpResponse('U!')
+
+# URL patterns
+urlpatterns = [
+    path('i18n/', include('django.conf.urls.i18n')),
+]
+
+urlpatterns += i18n_patterns(
+    path('', bangiah),
+)
+
+def test_language_prefixes():
+    """Test that language prefixes work correctly"""
+    from django.test import Client
+    from django.urls import reverse
+    from django.utils.translation import activate
+    
+    client = Client()
+    
+    print("Testing language prefixes...")
+    
+    # Test en-us (should work)
+    response = client.get('/en-us/')
+    print(f"en-us: {response.status_code} - {response.content.decode()}")
+    
+    # Test en-latn-us (should work but currently fails)
+    response = client.get('/en-latn-us/')
+    print(f"en-latn-us: {response.status_code} - {response.content.decode()}")
+    
+    # Test en-Latn-US (should work but currently fails)
+    response = client.get('/en-Latn-US/')
+    print(f"en-Latn-US: {response.status_code} - {response.content.decode()}")
+
+if __name__ == '__main__':
+    test_language_prefixes()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..132657d295
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for the i18n fix with various language code formats.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import Client
+from django.http import HttpResponse
+from django.urls import path, include
+from django.conf.urls.i18n import i18n_patterns
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        ALLOWED_HOSTS=['*'],
+        ROOT_URLCONF=__name__,
+        LANGUAGE_CODE='en-us',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English (lowercase)"),
+            ('en-Latn-US', "BCP 47 format"),
+            ('zh-hant-tw', "Traditional Chinese Taiwan"),
+            ('sr-latn-rs', "Serbian Latin"),
+            ('es-mx', "Spanish Mexico"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+    )
+
+django.setup()
+
+def test_view(request):
+    return HttpResponse(f'Language: {request.LANGUAGE_CODE}')
+
+# URL patterns
+urlpatterns = [
+    path('i18n/', include('django.conf.urls.i18n')),
+]
+
+urlpatterns += i18n_patterns(
+    path('', test_view),
+)
+
+def test_language_prefixes():
+    """Test various language prefix formats"""
+    client = Client()
+    
+    test_cases = [
+        # Basic cases
+        ('/en-us/', 'en-us'),
+        ('/en-latn-us/', 'en-latn-us'),
+        ('/en-Latn-US/', 'en-Latn-US'),
+        
+        # Case variations
+        ('/EN-US/', 'en-us'),
+        ('/EN-LATN-US/', 'en-Latn-US'),
+        ('/en-LATN-us/', 'en-Latn-US'),
+        
+        # Other language codes
+        ('/zh-hant-tw/', 'zh-hant-tw'),
+        ('/sr-latn-rs/', 'sr-latn-rs'),
+        ('/es-mx/', 'es-mx'),
+        
+        # Mixed case
+        ('/ZH-Hant-TW/', 'zh-hant-tw'),
+        ('/SR-Latn-RS/', 'sr-latn-rs'),
+    ]
+    
+    print("Testing language prefixes...")
+    print("-" * 50)
+    
+    for url, expected_lang in test_cases:
+        response = client.get(url)
+        status = response.status_code
+        content = response.content.decode()
+        
+        if status == 200:
+            print(f"✓ {url} -> {status} ({content})")
+            # Check if the correct language was activated
+            if expected_lang in content:
+                print(f"  ✓ Correct language activated: {expected_lang}")
+            else:
+                print(f"  ✗ Wrong language activated. Expected: {expected_lang}, Got: {content}")
+        else:
+            print(f"✗ {url} -> {status} ({content})")
+    
+    print("-" * 50)
+    print("Test completed.")
+
+if __name__ == '__main__':
+    test_language_prefixes()
\ No newline at end of file
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 0000000000..cb0348a177
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+"""
+Test the exact scenario from the GitHub issue.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import Client
+from django.http import HttpResponse
+from django.urls import path, include
+from django.conf.urls.i18n import i18n_patterns
+
+# Configure Django settings exactly as described in the issue
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        ALLOWED_HOSTS=['*'],
+        ROOT_URLCONF=__name__,
+        LANGUAGE_CODE='en-us',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English"),
+            ('en-Latn-US', "BCP 47 case format"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+    )
+
+django.setup()
+
+def bangiah(request):
+    return HttpResponse('U!')
+
+# URL patterns exactly as described in the issue
+urlpatterns = [
+    path('i18n/', include('django.conf.urls.i18n')),
+]
+
+urlpatterns += i18n_patterns(
+    path('', bangiah),
+)
+
+def test_original_issue():
+    """Test the exact scenario from the GitHub issue"""
+    client = Client()
+    
+    print("Testing the original GitHub issue scenario...")
+    print("-" * 50)
+    
+    # Test cases from the issue
+    test_cases = [
+        ('/en-us/', '200 U!', 'Should work'),
+        ('/en-latn-us/', '200 U!', 'Should work (was failing before)'),
+        ('/en-Latn-US/', '200 U!', 'Should work (was failing before)'),
+    ]
+    
+    all_passed = True
+    
+    for url, expected_response, description in test_cases:
+        response = client.get(url)
+        actual_response = f'{response.status_code} {response.content.decode()}'
+        
+        if actual_response == expected_response:
+            print(f"✓ {url} -> {actual_response} ({description})")
+        else:
+            print(f"✗ {url} -> {actual_response} (Expected: {expected_response})")
+            all_passed = False
+    
+    print("-" * 50)
+    
+    if all_passed:
+        print("SUCCESS: All test cases from the original issue are now working!")
+        return True
+    else:
+        print("FAILURE: Some test cases are still failing.")
+        return False
+
+if __name__ == '__main__':
+    success = test_original_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
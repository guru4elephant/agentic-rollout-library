diff --git a/final_test.py b/final_test.py
new file mode 100644
index 00000000..bb9fd8de
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python
+import requests
+from requests.models import RequestEncodingMixin
+
+print("Testing the exact scenario from the GitHub issue...")
+
+# This is the exact code from the issue that was failing
+test_data = u"ööö".encode("utf-8")
+print(f"Input: {test_data} (type: {type(test_data)})")
+
+# Test the _encode_params method that was causing the issue
+try:
+    result = RequestEncodingMixin._encode_params(test_data)
+    print(f"✓ SUCCESS: _encode_params handled binary data correctly")
+    print(f"  Returned: {result} (type: {type(result)})")
+    
+    # Verify it's the same binary data (not decoded/encoded)
+    assert result == test_data, "Binary data was modified"
+    assert isinstance(result, bytes), "Result should be bytes"
+    print("✓ Binary data preserved correctly")
+    
+except UnicodeDecodeError as e:
+    print(f"✗ FAILED: UnicodeDecodeError still occurs: {e}")
+    exit(1)
+except Exception as e:
+    print(f"✗ FAILED: Unexpected error: {type(e).__name__}: {e}")
+    exit(1)
+
+print("\n✓ All tests passed! The issue has been fixed.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..e19cf8dc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python
+import requests
+import sys
+
+print("Testing binary payload with requests...")
+try:
+    # This is the exact code from the issue
+    response = requests.put("http://httpbin.org/put", data=u"ööö".encode("utf-8"))
+    print("SUCCESS: Request completed without error")
+    print(f"Status code: {response.status_code}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+    sys.exit(1)
\ No newline at end of file
diff --git a/requests/models.py b/requests/models.py
index 9c624d3c..8bce13cd 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -80,8 +80,10 @@ class RequestEncodingMixin(object):
         if parameters are supplied as a dict.
         """
 
-        if isinstance(data, (str, bytes)):
+        if isinstance(data, str):
             return to_native_string(data)
+        elif isinstance(data, bytes):
+            return data
         elif hasattr(data, 'read'):
             return data
         elif hasattr(data, '__iter__'):
diff --git a/test_binary_payload.py b/test_binary_payload.py
new file mode 100644
index 00000000..4a708e17
--- /dev/null
+++ b/test_binary_payload.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python
+import requests
+from requests.models import RequestEncodingMixin
+
+print("Testing binary payload handling in _encode_params...")
+
+# Test the _encode_params method directly
+test_data = u"ööö".encode("utf-8")
+print(f"Input data type: {type(test_data)}")
+print(f"Input data: {test_data}")
+
+try:
+    result = RequestEncodingMixin._encode_params(test_data)
+    print(f"SUCCESS: _encode_params returned type: {type(result)}")
+    print(f"Result: {result}")
+    print("The binary data was handled correctly without ASCII decoding!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_other_data_types.py b/test_other_data_types.py
new file mode 100644
index 00000000..d90d610b
--- /dev/null
+++ b/test_other_data_types.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python
+import requests
+from requests.models import RequestEncodingMixin
+
+print("Testing _encode_params with various data types...")
+
+# Test with a dictionary
+test_data_dict = {"key": "value", "another": "test"}
+print(f"\nTesting with dict: {test_data_dict}")
+try:
+    result = RequestEncodingMixin._encode_params(test_data_dict)
+    print(f"SUCCESS: _encode_params returned type: {type(result)}")
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test with a list of tuples
+test_data_list = [("key", "value"), ("another", "test")]
+print(f"\nTesting with list of tuples: {test_data_list}")
+try:
+    result = RequestEncodingMixin._encode_params(test_data_list)
+    print(f"SUCCESS: _encode_params returned type: {type(result)}")
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+
+# Test with None
+test_data_none = None
+print(f"\nTesting with None: {test_data_none}")
+try:
+    result = RequestEncodingMixin._encode_params(test_data_none)
+    print(f"SUCCESS: _encode_params returned type: {type(result)}")
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_string_payload.py b/test_string_payload.py
new file mode 100644
index 00000000..e946a132
--- /dev/null
+++ b/test_string_payload.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python
+import requests
+from requests.models import RequestEncodingMixin
+
+print("Testing string payload handling in _encode_params...")
+
+# Test the _encode_params method with a regular string
+test_data = "hello world"
+print(f"Input data type: {type(test_data)}")
+print(f"Input data: {test_data}")
+
+try:
+    result = RequestEncodingMixin._encode_params(test_data)
+    print(f"SUCCESS: _encode_params returned type: {type(result)}")
+    print(f"Result: {result}")
+    print("The string data was handled correctly!")
+except Exception as e:
+    print(f"ERROR: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py
index c65b1c893..9c337eb39 100644
--- a/pylint/checkers/similar.py
+++ b/pylint/checkers/similar.py
@@ -471,6 +471,9 @@ class Similar:
         Last regroups all successive couples in a bigger one. It allows to take into account common chunk of lines that have more
         than the minimal number of successive lines required.
         """
+        # If min_lines is 0, disable duplicate code checking entirely
+        if self.min_lines <= 0:
+            return
         hash_to_index_1: HashToIndex_T
         hash_to_index_2: HashToIndex_T
         index_to_lines_1: IndexToLines_T
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..d2cb0a714
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+"""Script to reproduce the min-similarity-lines=0 issue."""
+
+import tempfile
+import os
+import subprocess
+
+# Create test files with obvious duplicate code
+test_code1 = '''def func1():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func2():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+test_code2 = '''def func3():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func4():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+# Create temporary files
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f1:
+    f1.write(test_code1)
+    file1 = f1.name
+
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f2:
+    f2.write(test_code2)
+    file2 = f2.name
+
+try:
+    # Create a pylintrc file with min-similarity-lines=0
+    pylintrc_content = '''[similar]
+min-similarity-lines=0
+'''
+    
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.rc', delete=False) as rc:
+        rc.write(pylintrc_content)
+        rc_file = rc.name
+    
+    print("Testing with min-similarity-lines=0 (should disable duplicate code checking)")
+    
+    # Run pylint with the config
+    result = subprocess.run([
+        'python', '-m', 'pylint',
+        '--rcfile', rc_file,
+        file1, file2
+    ], capture_output=True, text=True)
+    
+    print("Return code:", result.returncode)
+    print("STDOUT:")
+    print(result.stdout)
+    print("STDERR:")
+    print(result.stderr)
+    
+    # Check if R0801 (duplicate code) errors are present
+    if 'R0801' in result.stdout:
+        print("❌ ISSUE REPRODUCED: R0801 errors found even with min-similarity-lines=0")
+    else:
+        print("✅ No R0801 errors found - issue might be fixed")
+    
+    # Also check if similarity checker is running at all
+    if 'similarity' in result.stdout.lower():
+        print("ℹ️ Similarity checker is running")
+    else:
+        print("ℹ️ Similarity checker doesn't seem to be running")
+        
+finally:
+    # Clean up
+    os.unlink(file1)
+    os.unlink(file2)
+    os.unlink(rc_file)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..da7fef3a4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+"""Test edge cases for min-similarity-lines."""
+
+import tempfile
+import os
+import subprocess
+
+# Create test files with obvious duplicate code
+test_code1 = '''def func1():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func2():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+test_code2 = '''def func3():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func4():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+# Create temporary files
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f1:
+    f1.write(test_code1)
+    file1 = f1.name
+
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f2:
+    f2.write(test_code2)
+    file2 = f2.name
+
+def test_case(value, description):
+    """Test a specific min-similarity-lines value."""
+    print(f"\n=== Testing {description} (min-similarity-lines={value}) ===")
+    
+    # Create a pylintrc file with the specific value
+    pylintrc_content = f'''[similar]
+min-similarity-lines={value}
+'''
+    
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.rc', delete=False) as rc:
+        rc.write(pylintrc_content)
+        rc_file = rc.name
+    
+    try:
+        # Run pylint with the config
+        result = subprocess.run([
+            'python', '-m', 'pylint',
+            '--rcfile', rc_file,
+            file1, file2
+        ], capture_output=True, text=True)
+        
+        # Check if R0801 (duplicate code) errors are present
+        if 'R0801' in result.stdout:
+            print(f"❌ R0801 errors found with {value}")
+        else:
+            print(f"✅ No R0801 errors found with {value}")
+            
+    finally:
+        os.unlink(rc_file)
+
+try:
+    # Test various edge cases
+    test_case(0, "zero (should disable)")
+    test_case(-1, "negative value (should disable)")
+    test_case(1, "one (minimum valid positive)")
+    test_case(2, "two (normal positive)")
+    test_case(100, "large value (should find fewer duplicates)")
+        
+finally:
+    # Clean up
+    os.unlink(file1)
+    os.unlink(file2)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 000000000..4f3fa8e5b
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+"""Test specifically for the GitHub issue: min-similarity-lines=0 should disable duplicate checking."""
+
+import tempfile
+import os
+import subprocess
+
+# Create test files with identical code to ensure duplicates would be found
+test_code = '''def func():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+# Create multiple temporary files with identical content
+files = []
+for i in range(3):
+    with tempfile.NamedTemporaryFile(mode='w', suffix=f'_{i}.py', delete=False) as f:
+        f.write(test_code)
+        files.append(f.name)
+
+try:
+    # Test case 1: min-similarity-lines=0 (should disable)
+    pylintrc_content = '''[similar]
+min-similarity-lines=0
+'''
+    
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.rc', delete=False) as rc:
+        rc.write(pylintrc_content)
+        rc_file = rc.name
+    
+    print("=== Test Case 1: min-similarity-lines=0 (should disable duplicate checking) ===")
+    
+    result = subprocess.run([
+        'python', '-m', 'pylint',
+        '--rcfile', rc_file,
+        *files
+    ], capture_output=True, text=True)
+    
+    if 'R0801' in result.stdout:
+        print("❌ FAILED: R0801 errors found even with min-similarity-lines=0")
+    else:
+        print("✅ PASSED: No R0801 errors found with min-similarity-lines=0")
+    
+    os.unlink(rc_file)
+    
+    # Test case 2: min-similarity-lines=4 (should enable and find duplicates)
+    pylintrc_content = '''[similar]
+min-similarity-lines=4
+'''
+    
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.rc', delete=False) as rc:
+        rc.write(pylintrc_content)
+        rc_file = rc.name
+    
+    print("\n=== Test Case 2: min-similarity-lines=4 (should find duplicates) ===")
+    
+    result = subprocess.run([
+        'python', '-m', 'pylint',
+        '--rcfile', rc_file,
+        *files
+    ], capture_output=True, text=True)
+    
+    if 'R0801' in result.stdout:
+        print("✅ PASSED: R0801 errors found with min-similarity-lines=4 (checker is working)")
+    else:
+        print("❌ FAILED: No R0801 errors found with min-similarity-lines=4")
+    
+    os.unlink(rc_file)
+        
+finally:
+    # Clean up
+    for file in files:
+        os.unlink(file)
\ No newline at end of file
diff --git a/test_with_positive_value.py b/test_with_positive_value.py
new file mode 100644
index 000000000..13c0fec34
--- /dev/null
+++ b/test_with_positive_value.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+"""Test with positive min-similarity-lines value to see if checker works."""
+
+import tempfile
+import os
+import subprocess
+
+# Create test files with obvious duplicate code
+test_code1 = '''def func1():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func2():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+test_code2 = '''def func3():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func4():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+# Create temporary files
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f1:
+    f1.write(test_code1)
+    file1 = f1.name
+
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f2:
+    f2.write(test_code2)
+    file2 = f2.name
+
+try:
+    # Create a pylintrc file with min-similarity-lines=2
+    pylintrc_content = '''[similar]
+min-similarity-lines=2
+'''
+    
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.rc', delete=False) as rc:
+        rc.write(pylintrc_content)
+        rc_file = rc.name
+    
+    print("Testing with min-similarity-lines=2 (should find duplicates)")
+    
+    # Run pylint with the config
+    result = subprocess.run([
+        'python', '-m', 'pylint',
+        '--rcfile', rc_file,
+        file1, file2
+    ], capture_output=True, text=True)
+    
+    print("Return code:", result.returncode)
+    print("STDOUT:")
+    print(result.stdout)
+    print("STDERR:")
+    print(result.stderr)
+    
+    # Check if R0801 (duplicate code) errors are present
+    if 'R0801' in result.stdout:
+        print("✅ R0801 errors found - similarity checker is working")
+    else:
+        print("❌ No R0801 errors found - similarity checker may not be enabled")
+        
+finally:
+    # Clean up
+    os.unlink(file1)
+    os.unlink(file2)
+    os.unlink(rc_file)
\ No newline at end of file
diff --git a/test_zero_value.py b/test_zero_value.py
new file mode 100644
index 000000000..0f9310ac0
--- /dev/null
+++ b/test_zero_value.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+"""Test with min-similarity-lines=0 to reproduce the issue."""
+
+import tempfile
+import os
+import subprocess
+
+# Create test files with obvious duplicate code
+test_code1 = '''def func1():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func2():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+test_code2 = '''def func3():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+
+def func4():
+    x = 1
+    y = 2
+    z = x + y
+    return z
+'''
+
+# Create temporary files
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f1:
+    f1.write(test_code1)
+    file1 = f1.name
+
+with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f2:
+    f2.write(test_code2)
+    file2 = f2.name
+
+try:
+    # Create a pylintrc file with min-similarity-lines=0
+    pylintrc_content = '''[similar]
+min-similarity-lines=0
+'''
+    
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.rc', delete=False) as rc:
+        rc.write(pylintrc_content)
+        rc_file = rc.name
+    
+    print("Testing with min-similarity-lines=0 (should disable duplicate checking)")
+    
+    # Run pylint with the config
+    result = subprocess.run([
+        'python', '-m', 'pylint',
+        '--rcfile', rc_file,
+        file1, file2
+    ], capture_output=True, text=True)
+    
+    print("Return code:", result.returncode)
+    print("STDOUT:")
+    print(result.stdout)
+    print("STDERR:")
+    print(result.stderr)
+    
+    # Check if R0801 (duplicate code) errors are present
+    if 'R0801' in result.stdout:
+        print("❌ ISSUE REPRODUCED: R0801 errors found even with min-similarity-lines=0")
+    else:
+        print("✅ No R0801 errors found - issue might be fixed")
+        
+finally:
+    # Clean up
+    os.unlink(file1)
+    os.unlink(file2)
+    os.unlink(rc_file)
\ No newline at end of file
diff --git a/reproduce_exact_issue.py b/reproduce_exact_issue.py
new file mode 100644
index 0000000000..ad245f5f4a
--- /dev/null
+++ b/reproduce_exact_issue.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, pprint, Matrix
+from sympy.printing.pretty import pretty
+
+# Try to reproduce the exact output from the GitHub issue
+print("Trying to reproduce the exact GitHub issue output:")
+
+# The issue shows:
+# Good: [ -t₀⋅w₀   -t₁⋅w₀   -t₂⋅w₀]
+# Bad:  [ -t₀⋅ω0   -t₁⋅ω0   -t₂⋅ω0]
+
+# The "Bad" case shows "ω0" instead of "ω₀"
+# Let me try to create a scenario where this might happen
+
+# Create symbols
+t0, t1, t2 = symbols('t_0 t_1 t_2')
+
+# Try different ways to create omega0 that might cause the issue
+w0_1 = symbols('omega0')      # Direct
+w0_2 = symbols('omega_0')     # With underscore
+w0_3 = symbols('ω0')          # Using actual Unicode omega
+w0_4 = symbols('ω_0')         # Using actual Unicode omega with underscore
+
+print("\nTesting different omega symbol creations:")
+for i, w0 in enumerate([w0_1, w0_2, w0_3, w0_4], 1):
+    print(f"\nCase {i}: w0 = {w0}")
+    print(f"Symbol name: {w0.name}")
+    
+    # Create the expression
+    expr = -t0 * w0
+    print(f"Expression: {expr}")
+    print("pprint output:")
+    pprint(expr)
+    print("pretty output:", pretty(expr))
+
+# Test matrix output
+print("\n" + "="*50)
+print("Testing matrix output:")
+
+matrix_cases = []
+for i, w0 in enumerate([w0_1, w0_2, w0_3, w0_4], 1):
+    matrix_expr = Matrix([[-t0*w0, -t1*w0, -t2*w0]])
+    matrix_cases.append((f"Case {i}", matrix_expr))
+
+for case_name, matrix_expr in matrix_cases:
+    print(f"\n{case_name}:")
+    print(f"Expression: {matrix_expr}")
+    print("pprint output:")
+    pprint(matrix_expr)
+    print("pretty output:", pretty(matrix_expr))
+    
+    # Check for the problematic pattern
+    pretty_output = pretty(matrix_expr)
+    if "ω0" in pretty_output and "ω₀" not in pretty_output:
+        print("*** ISSUE FOUND: Contains 'ω0' instead of 'ω₀' ***")
+    else:
+        print("No issue found")
+
+# Let me also test if there's a specific condition where pretty_symbol might fail
+from sympy.printing.pretty.pretty_symbology import pretty_symbol
+
+print("\n" + "="*50)
+print("Testing pretty_symbol function directly:")
+
+symbol_names = ['omega0', 'omega_0', 'ω0', 'ω_0']
+for name in symbol_names:
+    result = pretty_symbol(name, False)
+    print(f"pretty_symbol('{name}', False) = '{result}'")
+    if "ω0" in result and "ω₀" not in result:
+        print("  *** ISSUE: Contains 'ω0' instead of 'ω₀' ***")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..51072b7dd8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, pprint
+from sympy.printing.pretty import pretty
+
+# Create symbols exactly as mentioned in the issue
+t0, t1, t2 = symbols('t_0 t_1 t_2')
+w0 = symbols('omega0')  # Note: no underscore between omega and 0
+
+# Create expressions to test
+expr1 = -t0 * w0
+expr2 = -t1 * w0
+expr3 = -t2 * w0
+
+print("Testing pprint with Greek letter without proper subscript:")
+print("Expression 1:", expr1)
+print("Expression 2:", expr2)
+print("Expression 3:", expr3)
+print()
+
+print("pprint output:")
+pprint(expr1)
+pprint(expr2)
+pprint(expr3)
+print()
+
+print("pretty output:")
+print(pretty(expr1))
+print(pretty(expr2))
+print(pretty(expr3))
+print()
+
+# Test matrix-like output as mentioned in the issue
+from sympy import Matrix
+matrix_expr = Matrix([[-t0*w0, -t1*w0, -t2*w0]])
+print("Matrix expression:")
+print("Expression:", matrix_expr)
+print()
+
+print("pprint output:")
+pprint(matrix_expr)
+print()
+
+print("pretty output:")
+print(pretty(matrix_expr))
\ No newline at end of file
diff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py
index 9a3be6bbe9..8a85d4b24f 100644
--- a/sympy/printing/conventions.py
+++ b/sympy/printing/conventions.py
@@ -7,7 +7,7 @@
 from collections.abc import Iterable
 from sympy import Derivative
 
-_name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')
+_name_with_digits_p = re.compile(r'^([a-zA-Z\u0370-\u03FF]+)([0-9]+)$')
 
 
 def split_super_sub(text):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3c79084ea7
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, pprint
+from sympy.printing.pretty import pretty
+from sympy.printing.conventions import split_super_sub
+
+# Test various edge cases that might cause the issue
+test_cases = [
+    "omega0",      # Basic case - should work
+    "omega_0",     # With underscore - should work
+    "omega00",     # Multiple zeros
+    "omega1",      # Different digit
+    "omega10",     # Multiple digits
+    "omegax",      # Non-digit ending - should not get subscript
+    "omega_",      # Just underscore
+    "omega0_",     # Underscore at end
+    "omega0a",     # Mixed ending
+    "omega0_1",    # Multiple subscripts
+    "omega0^1",    # With superscript
+]
+
+print("Testing various edge cases:")
+for case in test_cases:
+    try:
+        sym = symbols(case)
+        name, supers, subs = split_super_sub(case)
+        pretty_output = pretty(sym)
+        
+        print(f"\nCase: '{case}'")
+        print(f"  Symbol: {sym}")
+        print(f"  split_super_sub: name='{name}', supers={supers}, subs={subs}")
+        print(f"  Pretty output: {pretty_output}")
+        
+        # Check if the output contains the problematic "ω0" pattern
+        if "ω0" in pretty_output and "ω₀" not in pretty_output:
+            print(f"  *** ISSUE FOUND: Contains 'ω0' instead of 'ω₀' ***")
+            
+    except Exception as e:
+        print(f"\nCase: '{case}' - Error: {e}")
+
+# Test the exact matrix case from the issue
+print("\n" + "="*50)
+print("Testing the exact matrix case from GitHub issue:")
+t0, t1, t2 = symbols('t_0 t_1 t_2')
+w0 = symbols('omega0')  # Using omega0 without underscore
+
+matrix_expr = [-t0*w0, -t1*w0, -t2*w0]
+print(f"Matrix expression: {matrix_expr}")
+print("pprint output:")
+pprint(matrix_expr)
+print("pretty output:", pretty(matrix_expr))
+
+# Check if the output contains the problematic pattern
+pretty_output = pretty(matrix_expr)
+if "ω0" in pretty_output and "ω₀" not in pretty_output:
+    print("*** ISSUE CONFIRMED: Contains 'ω0' instead of 'ω₀' ***")
+else:
+    print("No issue found in this specific case")
\ No newline at end of file
diff --git a/test_specific_case.py b/test_specific_case.py
new file mode 100644
index 0000000000..9afa8c1ae0
--- /dev/null
+++ b/test_specific_case.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+from sympy import symbols, pprint, Matrix
+from sympy.printing.pretty import pretty
+
+# Test the exact case mentioned in the issue
+print("Testing the exact case from the GitHub issue:")
+
+# Create symbols as mentioned: t₀, t₁, t₂, ω₀
+t0, t1, t2 = symbols('t_0 t_1 t_2')
+w0 = symbols('omega_0')  # This should work correctly
+
+# Create the expressions mentioned
+expr1 = -t0 * w0
+expr2 = -t1 * w0  
+expr3 = -t2 * w0
+
+print("Expression 1:", expr1)
+print("pprint output:")
+pprint(expr1)
+print("pretty output:", pretty(expr1))
+print()
+
+print("Expression 2:", expr2)
+print("pprint output:")
+pprint(expr2)
+print("pretty output:", pretty(expr2))
+print()
+
+print("Expression 3:", expr3)
+print("pprint output:")
+pprint(expr3)
+print("pretty output:", pretty(expr3))
+print()
+
+# Test matrix output as mentioned
+matrix_expr = Matrix([[-t0*w0, -t1*w0, -t2*w0]])
+print("Matrix expression:", matrix_expr)
+print("pprint output:")
+pprint(matrix_expr)
+print("pretty output:", pretty(matrix_expr))
+print()
+
+# Now test with the problematic case mentioned: omega0 (without underscore)
+print("\nTesting with omega0 (no underscore):")
+w0_bad = symbols('omega0')  # This might be the problematic case
+expr_bad = -t0 * w0_bad
+print("Expression:", expr_bad)
+print("pprint output:")
+pprint(expr_bad)
+print("pretty output:", pretty(expr_bad))
+
+# Test if there's a difference in how the symbol name is processed
+from sympy.printing.conventions import split_super_sub
+print("\nSymbol name analysis:")
+print("omega_0:", split_super_sub('omega_0'))
+print("omega0:", split_super_sub('omega0'))
\ No newline at end of file
diff --git a/test_split_function.py b/test_split_function.py
new file mode 100644
index 0000000000..a6ae9414a8
--- /dev/null
+++ b/test_split_function.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+from sympy.printing.conventions import split_super_sub, _name_with_digits_p
+
+# Test the regex pattern
+test_cases = [
+    "omega0",
+    "alpha1", 
+    "beta2",
+    "t0",
+    "x1",
+    "test123"
+]
+
+print("Testing _name_with_digits_p regex pattern:")
+for case in test_cases:
+    match = _name_with_digits_p.match(case)
+    print(f"'{case}': {match.groups() if match else 'No match'}")
+
+print("\nTesting split_super_sub function:")
+for case in test_cases:
+    name, supers, subs = split_super_sub(case)
+    print(f"'{case}': name='{name}', supers={supers}, subs={subs}")
+
+# Test with actual Greek symbols
+from sympy import symbols
+print("\nTesting with actual symbols:")
+symbols_to_test = ['omega0', 'alpha1', 't0', 'x1']
+for sym_name in symbols_to_test:
+    sym = symbols(sym_name)
+    print(f"Symbol '{sym_name}': {sym}")
+    from sympy.printing.pretty import pretty
+    print(f"Pretty: {pretty(sym)}")
\ No newline at end of file
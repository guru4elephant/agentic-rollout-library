diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..52154d01e0 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -398,6 +398,11 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
+    elif isinstance(field, models.JSONField):
+        # Use JSONField's form field prepare_value method to ensure valid JSON output
+        from django.forms import fields
+        json_form_field = fields.JSONField(encoder=field.encoder)
+        return json_form_field.prepare_value(value)
     else:
         return display_for_value(value, empty_value_display)
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..17ce5a1d0c
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,122 @@
+#!/usr/bin/env python3
+"""Final comprehensive test to demonstrate the JSONField display issue is fixed."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django.db import models
+from django.contrib.admin.utils import display_for_field
+from django.forms import fields
+
+class TestModel(models.Model):
+    json_data = models.JSONField(default=dict)
+    
+    class Meta:
+        app_label = 'test'
+
+def test_original_issue():
+    """Test the exact issue described in the GitHub issue."""
+    print("=== Testing Original GitHub Issue ===")
+    print("Issue: JSONField values are displayed as dict when readonly in admin")
+    print("Expected: Should display valid JSON (double quotes) instead of Python dict (single quotes)")
+    print()
+    
+    # The exact example from the GitHub issue
+    test_data = {"foo": "bar"}
+    
+    json_field = TestModel._meta.get_field('json_data')
+    result = display_for_field(test_data, json_field, 'Empty')
+    
+    print(f"Input data: {test_data}")
+    print(f"Before fix (Python dict style): {{'foo': 'bar'}}")
+    print(f"After fix (valid JSON): {result}")
+    print()
+    
+    # Check if it's valid JSON
+    import json
+    try:
+        parsed = json.loads(result)
+        valid_json = True
+    except json.JSONDecodeError:
+        valid_json = False
+    
+    if valid_json and result == '{"foo": "bar"}':
+        print("‚úÖ ISSUE FIXED: JSONField now displays valid JSON in admin")
+        print("‚úÖ The output is properly formatted with double quotes")
+        print("‚úÖ The output can be parsed as valid JSON")
+    else:
+        print("‚ùå ISSUE NOT FIXED: Output is not valid JSON")
+    
+    return valid_json and result == '{"foo": "bar"}'
+
+def test_comprehensive_cases():
+    """Test various JSON structures to ensure comprehensive fix."""
+    print("\n=== Testing Comprehensive Cases ===")
+    
+    test_cases = [
+        ("Simple object", {"key": "value"}),
+        ("Nested object", {"level1": {"level2": "value"}}),
+        ("Array data", {"items": [1, 2, 3]}),
+        ("Mixed types", {"str": "hello", "num": 42, "bool": True, "null": None}),
+        ("Empty object", {}),
+        ("Complex nested", {"users": [{"name": "John", "age": 30}, {"name": "Jane", "age": 25}]}),
+    ]
+    
+    json_field = TestModel._meta.get_field('json_data')
+    all_passed = True
+    
+    for name, test_data in test_cases:
+        result = display_for_field(test_data, json_field, 'Empty')
+        
+        # Check if it's valid JSON
+        import json
+        try:
+            parsed = json.loads(result)
+            is_valid_json = True
+            matches_input = parsed == test_data
+        except json.JSONDecodeError:
+            is_valid_json = False
+            matches_input = False
+        
+        status = "‚úÖ" if is_valid_json and matches_input else "‚ùå"
+        print(f"{status} {name}: {result}")
+        
+        if not (is_valid_json and matches_input):
+            all_passed = False
+    
+    return all_passed
+
+if __name__ == '__main__':
+    issue_fixed = test_original_issue()
+    comprehensive_ok = test_comprehensive_cases()
+    
+    print("\n=== FINAL RESULT ===")
+    if issue_fixed and comprehensive_ok:
+        print("üéâ SUCCESS: The JSONField display issue has been completely fixed!")
+        print("‚úÖ Original issue resolved")
+        print("‚úÖ All edge cases handled correctly")
+        print("‚úÖ Output is always valid JSON")
+    else:
+        print("‚ùå FAILURE: The fix is not complete")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5a23bf147c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""Script to reproduce the JSONField display issue in admin."""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django.db import models
+from django.contrib.admin.utils import display_for_field
+from django.forms import fields
+
+# Create a test model with JSONField
+class TestModel(models.Model):
+    json_data = models.JSONField(default=dict)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the current behavior
+def test_jsonfield_display():
+    print("Testing JSONField display in admin...")
+    
+    # Create a test instance with JSON data
+    test_data = {"foo": "bar", "number": 42, "nested": {"key": "value"}}
+    
+    # Get the JSONField from the model
+    json_field = TestModel._meta.get_field('json_data')
+    
+    # Test display_for_field with the JSON data
+    result = display_for_field(test_data, json_field, 'Empty')
+    print(f"Current display_for_field result: {repr(result)}")
+    expected_json = '{"foo": "bar", "number": 42, "nested": {"key": "value"}}'
+    print(f"Expected valid JSON: {repr(expected_json)}")
+    
+    # Test the form field's prepare_value method
+    form_field = fields.JSONField()
+    prepared_value = form_field.prepare_value(test_data)
+    print(f"Form field prepare_value result: {repr(prepared_value)}")
+    
+    # Check if the results are different
+    if result != prepared_value:
+        print("‚ùå ISSUE CONFIRMED: display_for_field doesn't use JSONField's prepare_value")
+        print(f"  display_for_field: {repr(result)}")
+        print(f"  prepare_value: {repr(prepared_value)}")
+        return False
+    else:
+        print("‚úÖ No issue found")
+        return True
+
+if __name__ == '__main__':
+    test_jsonfield_display()
\ No newline at end of file
diff --git a/test_custom_encoder.py b/test_custom_encoder.py
new file mode 100644
index 0000000000..e5fae64f3d
--- /dev/null
+++ b/test_custom_encoder.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""Script to test JSONField with custom encoder in admin."""
+
+import os
+import sys
+import django
+import json
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django.db import models
+from django.contrib.admin.utils import display_for_field
+from django.forms import fields
+
+# Custom encoder for testing
+class CustomEncoder(json.JSONEncoder):
+    def default(self, obj):
+        if hasattr(obj, 'custom_serialize'):
+            return obj.custom_serialize()
+        return super().default(obj)
+
+# Create a test model with JSONField and custom encoder
+class TestModel(models.Model):
+    json_data = models.JSONField(encoder=CustomEncoder, default=dict)
+    
+    class Meta:
+        app_label = 'test'
+
+def test_custom_encoder():
+    print("Testing JSONField with custom encoder...")
+    
+    # Get the JSONField from the model
+    json_field = TestModel._meta.get_field('json_data')
+    
+    # Test data with custom object
+    class CustomObject:
+        def custom_serialize(self):
+            return "custom_serialized"
+    
+    test_data = {"custom": CustomObject(), "normal": "value"}
+    
+    result = display_for_field(test_data, json_field, 'Empty')
+    print(f"Result with custom encoder: {repr(result)}")
+    
+    # Compare with form field's prepare_value
+    form_field = fields.JSONField(encoder=CustomEncoder)
+    prepared_value = form_field.prepare_value(test_data)
+    print(f"Form field prepare_value: {repr(prepared_value)}")
+    
+    if result == prepared_value:
+        print("‚úÖ PASS: Custom encoder works correctly")
+    else:
+        print("‚ùå FAIL: Custom encoder doesn't match")
+
+if __name__ == '__main__':
+    test_custom_encoder()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..9e53b4df33
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+"""Script to test edge cases for JSONField display in admin."""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django.db import models
+from django.contrib.admin.utils import display_for_field
+from django.forms import fields
+
+# Create a test model with JSONField
+class TestModel(models.Model):
+    json_data = models.JSONField(default=dict)
+    
+    class Meta:
+        app_label = 'test'
+
+def test_edge_cases():
+    print("Testing JSONField edge cases...")
+    
+    # Get the JSONField from the model
+    json_field = TestModel._meta.get_field('json_data')
+    
+    # Test cases
+    test_cases = [
+        ("Empty dict", {}),
+        ("Simple dict", {"key": "value"}),
+        ("Nested dict", {"level1": {"level2": {"level3": "value"}}}),
+        ("List data", {"items": [1, 2, 3]}),
+        ("Mixed data", {"string": "hello", "number": 42, "boolean": True, "null": None}),
+        ("None value", None),
+        ("InvalidJSONInput", fields.InvalidJSONInput('invalid json')),
+    ]
+    
+    for case_name, test_data in test_cases:
+        print(f"\nTesting: {case_name}")
+        
+        try:
+            result = display_for_field(test_data, json_field, 'Empty')
+            print(f"  Result: {repr(result)}")
+            
+            # For valid JSON data, test if it matches form field's prepare_value
+            if not isinstance(test_data, fields.InvalidJSONInput) and test_data is not None:
+                form_field = fields.JSONField()
+                prepared_value = form_field.prepare_value(test_data)
+                if result == prepared_value:
+                    print("  ‚úÖ PASS: Matches form field prepare_value")
+                else:
+                    print(f"  ‚ùå FAIL: Expected {repr(prepared_value)}")
+            elif test_data is None:
+                if result == 'Empty':
+                    print("  ‚úÖ PASS: None value handled correctly")
+                else:
+                    print(f"  ‚ùå FAIL: None value should return empty display")
+                    
+        except Exception as e:
+            print(f"  ‚ùå ERROR: {e}")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
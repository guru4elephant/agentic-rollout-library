diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..f79c511bf7
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed?"
+        ) from exc
+    execute_from_command_line(sys.argv)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..58aa181aa2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the runserver 0:8000 issue
+"""
+import os
+import sys
+import subprocess
+
+# Add the current directory to Python path so we can import django
+sys.path.insert(0, '.')
+
+# Set up Django environment
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+from django.core.management import execute_from_command_line
+
+def test_runserver_output():
+    """Test that runserver 0:8000 shows correct URL output"""
+    print("Testing runserver 0:8000 output...")
+    
+    # Capture the output of runserver command
+    try:
+        # We'll use a subprocess to capture the output with a short timeout
+        result = subprocess.run([
+            sys.executable, 'manage.py', 'runserver', '0:8000', '--noreload'
+        ], capture_output=True, text=True, timeout=2)
+        
+        # Check if the output contains the correct URL format
+        output = result.stdout + result.stderr
+        
+        print("Command output:")
+        print(output)
+        
+        # Check if the output contains the problematic format
+        if "http://0:8000/" in output:
+            print("❌ ISSUE CONFIRMED: Output shows 'http://0:8000/' instead of 'http://0.0.0.0:8000/'")
+            return False
+        elif "http://0.0.0.0:8000/" in output:
+            print("✅ ISSUE FIXED: Output shows correct 'http://0.0.0.0:8000/' format")
+            return True
+        else:
+            print("⚠️  UNEXPECTED: Output doesn't contain expected URL format")
+            return False
+            
+    except subprocess.TimeoutExpired as e:
+        # Even if it times out, we can check the output captured before timeout
+        output = (e.stdout or "") + (e.stderr or "")
+        print("Command timed out (expected for runserver), checking captured output...")
+        print("Captured output:", output)
+        
+        if "http://0:8000/" in output:
+            print("❌ ISSUE CONFIRMED: Output shows 'http://0:8000/' instead of 'http://0.0.0.0:8000/'")
+            return False
+        elif "http://0.0.0.0:8000/" in output:
+            print("✅ ISSUE FIXED: Output shows correct 'http://0.0.0.0:8000/' format")
+            return True
+        else:
+            print("⚠️  UNEXPECTED: Output doesn't contain expected URL format")
+            return False
+            
+    except Exception as e:
+        print(f"Error running command: {e}")
+        return False
+
+if __name__ == "__main__":
+    # Create a minimal settings file if needed
+    if not os.path.exists('tests/settings.py'):
+        os.makedirs('tests', exist_ok=True)
+        with open('tests/settings.py', 'w') as f:
+            f.write("SECRET_KEY = 'test'\nDEBUG = True\n")
+    
+    # Create a minimal manage.py if needed
+    if not os.path.exists('manage.py'):
+        with open('manage.py', 'w') as f:
+            f.write("#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n")
+    
+    success = test_runserver_output()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/tests/settings.py b/tests/settings.py
new file mode 100644
index 0000000000..2d7a9c2385
--- /dev/null
+++ b/tests/settings.py
@@ -0,0 +1,2 @@
+SECRET_KEY = 'test'
+DEBUG = True
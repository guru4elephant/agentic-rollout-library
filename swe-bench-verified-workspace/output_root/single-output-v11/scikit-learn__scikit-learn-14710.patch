diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..d30b1badc
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,13 @@
+# Exact reproduction from the GitHub issue
+import numpy as np
+from sklearn.experimental import enable_hist_gradient_boosting
+from sklearn.ensemble import HistGradientBoostingClassifier
+
+X = np.random.randn(100, 10)
+y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)
+gbrt.fit(X, y)
+
+print("Success! The exact reproduction case from the GitHub issue now works.")
+print(f"Model classes: {gbrt.classes_}")
+print(f"Model score: {gbrt.score(X, y):.3f}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..51737ff5e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,8 @@
+import numpy as np
+from sklearn.experimental import enable_hist_gradient_boosting
+from sklearn.ensemble import HistGradientBoostingClassifier
+
+X = np.random.randn(100, 10)
+y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)
+gbrt.fit(X, y)
\ No newline at end of file
diff --git a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
index ad6a5a8ca..3170e4000 100644
--- a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
+++ b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
@@ -426,11 +426,15 @@ class BaseHistGradientBoosting(BaseEstimator, ABC):
 
         Scores are computed on validation data or on training data.
         """
+        if hasattr(self, 'classes_'):
+            y_small_train = self.classes_[y_small_train.astype(int)]
         self.train_score_.append(
             self.scorer_(self, X_binned_small_train, y_small_train)
         )
 
         if self._use_validation_data:
+            if hasattr(self, 'classes_'):
+                y_val = self.classes_[y_val.astype(int)]
             self.validation_score_.append(
                 self.scorer_(self, X_binned_val, y_val)
             )
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..adc2b23db
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+import numpy as np
+from sklearn.experimental import enable_hist_gradient_boosting
+from sklearn.ensemble import HistGradientBoostingClassifier
+
+# Test case 1: Multiple string classes
+print("Test 1: Multiple string classes")
+X = np.random.randn(100, 10)
+y = np.array(['a'] * 25 + ['b'] * 25 + ['c'] * 50, dtype=object)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)
+gbrt.fit(X, y)
+print("✓ Multiple string classes work")
+
+# Test case 2: Integer labels (should still work)
+print("Test 2: Integer labels")
+X = np.random.randn(100, 10)
+y = np.array([0] * 50 + [1] * 50)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)
+gbrt.fit(X, y)
+print("✓ Integer labels work")
+
+# Test case 3: No early stopping (should still work)
+print("Test 3: No early stopping")
+X = np.random.randn(100, 10)
+y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=None)
+gbrt.fit(X, y)
+print("✓ No early stopping works")
+
+# Test case 4: With validation data
+print("Test 4: With validation data")
+X = np.random.randn(100, 10)
+y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, validation_fraction=0.1)
+gbrt.fit(X, y)
+print("✓ Validation data works")
+
+print("All tests passed!")
\ No newline at end of file
diff --git a/test_predictions.py b/test_predictions.py
new file mode 100644
index 000000000..ff219e62e
--- /dev/null
+++ b/test_predictions.py
@@ -0,0 +1,28 @@
+import numpy as np
+from sklearn.experimental import enable_hist_gradient_boosting
+from sklearn.ensemble import HistGradientBoostingClassifier
+
+# Create a simple separable dataset
+np.random.seed(42)
+X = np.random.randn(100, 10)
+# Make the first 50 samples clearly different from the last 50
+X[:50] += 2  # Shift first class
+y = np.array(['class_a'] * 50 + ['class_b'] * 50, dtype=object)
+
+# Train with early stopping
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, random_state=42)
+gbrt.fit(X, y)
+
+# Test predictions
+test_samples = np.random.randn(5, 10)
+test_samples[:2] += 2  # Should predict 'class_a'
+test_samples[3:] -= 2  # Should predict 'class_b'
+
+predictions = gbrt.predict(test_samples)
+print("Predictions:", predictions)
+print("Expected: ['class_a', 'class_a', 'class_b', 'class_b', 'class_b']")
+
+# Check accuracy
+accuracy = gbrt.score(X, y)
+print(f"Training accuracy: {accuracy:.3f}")
+print("Model is working correctly!")
\ No newline at end of file
diff --git a/test_regressor.py b/test_regressor.py
new file mode 100644
index 000000000..6a654dfbf
--- /dev/null
+++ b/test_regressor.py
@@ -0,0 +1,18 @@
+import numpy as np
+from sklearn.experimental import enable_hist_gradient_boosting
+from sklearn.ensemble import HistGradientBoostingRegressor
+
+# Test that regressor still works (should not have classes_ attribute)
+print("Testing HistGradientBoostingRegressor...")
+X = np.random.randn(100, 10)
+y = np.random.randn(100)
+gbrt = HistGradientBoostingRegressor(n_iter_no_change=10)
+gbrt.fit(X, y)
+print("✓ Regressor works with early stopping")
+
+# Test with validation data
+gbrt = HistGradientBoostingRegressor(n_iter_no_change=10, validation_fraction=0.1)
+gbrt.fit(X, y)
+print("✓ Regressor works with validation data")
+
+print("Regressor tests passed!")
\ No newline at end of file
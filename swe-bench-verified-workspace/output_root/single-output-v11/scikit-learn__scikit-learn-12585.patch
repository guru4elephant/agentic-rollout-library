diff --git a/final_test.py b/final_test.py
new file mode 100644
index 000000000..d592de652
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python
+"""
+Final test to verify the fix for the clone issue with estimator types.
+This test reproduces the exact scenario described in the GitHub issue.
+"""
+
+from sklearn.preprocessing import StandardScaler
+from sklearn.ensemble import RandomForestClassifier
+from sklearn.base import clone
+
+def test_original_issue():
+    """Test the exact scenario from the GitHub issue"""
+    print("Testing original issue scenario...")
+    
+    # This is the exact code from the issue that was failing
+    try:
+        result = clone(StandardScaler(with_mean=StandardScaler))
+        print("‚úì SUCCESS: clone(StandardScaler(with_mean=StandardScaler)) worked")
+        print(f"  Result: {result}")
+        return True
+    except Exception as e:
+        print(f"‚úó FAILED: {e}")
+        return False
+
+def test_additional_edge_cases():
+    """Test additional edge cases to ensure robustness"""
+    print("\nTesting additional edge cases...")
+    
+    test_cases = [
+        # (description, test_callable, should_succeed)
+        ("StandardScaler class as parameter", 
+         lambda: clone(StandardScaler(with_mean=StandardScaler)), True),
+         
+        ("RandomForestClassifier class as parameter",
+         lambda: clone(StandardScaler(with_mean=RandomForestClassifier)), True),
+         
+        ("Built-in type as parameter (should use deepcopy fallback)",
+         lambda: clone(StandardScaler(with_mean=str)), True),
+         
+        ("None as parameter (should work normally)",
+         lambda: clone(StandardScaler(with_mean=None)), True),
+         
+        ("Regular instance cloning (should still work)",
+         lambda: clone(StandardScaler()), True),
+    ]
+    
+    all_passed = True
+    for desc, test_func, should_succeed in test_cases:
+        try:
+            result = test_func()
+            if should_succeed:
+                print(f"‚úì {desc}: SUCCESS")
+            else:
+                print(f"‚úó {desc}: Unexpected success")
+                all_passed = False
+        except Exception as e:
+            if should_succeed:
+                print(f"‚úó {desc}: FAILED - {e}")
+                all_passed = False
+            else:
+                print(f"‚úì {desc}: Correctly failed - {e}")
+    
+    return all_passed
+
+def test_deep_copy_fallback():
+    """Test that deep copy fallback still works for non-estimator objects"""
+    print("\nTesting deep copy fallback...")
+    
+    # Test with safe=False (should use deepcopy)
+    try:
+        result = clone([1, 2, 3], safe=False)
+        print("‚úì Deep copy fallback with safe=False: SUCCESS")
+    except Exception as e:
+        print(f"‚úó Deep copy fallback with safe=False: FAILED - {e}")
+        return False
+    
+    # Test with safe=True (should raise TypeError)
+    try:
+        result = clone([1, 2, 3], safe=True)
+        print("‚úó Deep copy with safe=True: Unexpected success")
+        return False
+    except TypeError:
+        print("‚úì Deep copy with safe=True: Correctly raised TypeError")
+    except Exception as e:
+        print(f"‚úó Deep copy with safe=True: Wrong exception - {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    print("=" * 60)
+    print("FINAL TEST FOR CLONE FIX")
+    print("=" * 60)
+    
+    success = True
+    success &= test_original_issue()
+    success &= test_additional_edge_cases()
+    success &= test_deep_copy_fallback()
+    
+    print("\n" + "=" * 60)
+    if success:
+        print("üéâ ALL TESTS PASSED! The fix is working correctly.")
+    else:
+        print("‚ùå SOME TESTS FAILED. The fix needs more work.")
+    print("=" * 60)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..da5823ddd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,10 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.base import clone
+
+# Reproduce the issue described in the GitHub issue
+try:
+    result = clone(StandardScaler(with_mean=StandardScaler))
+    print("Success! Clone worked without error.")
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error occurred: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sklearn/base.py b/sklearn/base.py
index 56ffb18bf..34998270c 100644
--- a/sklearn/base.py
+++ b/sklearn/base.py
@@ -48,7 +48,7 @@ def clone(estimator, safe=True):
     # XXX: not handling dictionaries
     if estimator_type in (list, tuple, set, frozenset):
         return estimator_type([clone(e, safe=safe) for e in estimator])
-    elif not hasattr(estimator, 'get_params'):
+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):
         if not safe:
             return copy.deepcopy(estimator)
         else:
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..69d2a349f
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,60 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.ensemble import RandomForestClassifier
+from sklearn.base import clone
+
+def test_edge_cases():
+    print("Testing edge cases for clone fix...")
+    
+    # Test 1: Original issue case - class as parameter
+    print("\n1. Testing class as parameter:")
+    try:
+        result1 = clone(StandardScaler(with_mean=StandardScaler))
+        print(f"‚úì Success: {result1}")
+    except Exception as e:
+        print(f"‚úó Failed: {e}")
+    
+    # Test 2: Normal instance cloning (should still work)
+    print("\n2. Testing normal instance cloning:")
+    try:
+        scaler = StandardScaler()
+        result2 = clone(scaler)
+        print(f"‚úì Success: {result2}")
+    except Exception as e:
+        print(f"‚úó Failed: {e}")
+    
+    # Test 3: Another estimator class as parameter
+    print("\n3. Testing RandomForestClassifier class as parameter:")
+    try:
+        result3 = clone(StandardScaler(with_mean=RandomForestClassifier))
+        print(f"‚úì Success: {result3}")
+    except Exception as e:
+        print(f"‚úó Failed: {e}")
+    
+    # Test 4: Mixed parameters (class and regular values)
+    print("\n4. Testing mixed parameters:")
+    try:
+        result4 = clone(StandardScaler(with_mean=StandardScaler, with_std=True))
+        print(f"‚úì Success: {result4}")
+    except Exception as e:
+        print(f"‚úó Failed: {e}")
+    
+    # Test 5: Deep copy fallback for non-estimator objects (safe=False)
+    print("\n5. Testing deep copy fallback for non-estimator (safe=False):")
+    try:
+        result5 = clone([1, 2, 3], safe=False)
+        print(f"‚úì Success: {result5}")
+    except Exception as e:
+        print(f"‚úó Failed: {e}")
+    
+    # Test 6: Safe mode for non-estimator objects (should raise error)
+    print("\n6. Testing safe mode for non-estimator (should raise error):")
+    try:
+        result6 = clone([1, 2, 3], safe=True)
+        print(f"‚úó Unexpected success: {result6}")
+    except TypeError as e:
+        print(f"‚úì Correctly raised TypeError: {e}")
+    except Exception as e:
+        print(f"‚úó Wrong exception type: {e}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
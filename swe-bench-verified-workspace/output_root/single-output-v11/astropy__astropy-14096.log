=== Starting task for instance: astropy__astropy-14096 ===
Task ID: 7
Pod name: r2e-astropy-astropy-14096-1755
Pod name: r2e-astropy-astropy-14096-1755
Using image: iregistry.baidu-int.com/acg-airec/r2e_gym/slimshetty/swebench-verified:sweb.eval.x86_64.astropy__astropy-14096
K8S executor initialized

=== Iteration 1/100 ===
Calling LLM...
LLM Response: I'll help you implement the necessary changes to fix the issue with subclassed SkyCoord giving misleading attribute access messages. Let's start by exploring the repository structure and understanding...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "."
}
Tool execution status: success
Tool stdout:
Here's the files and directories up to 2 levels deep in ., excluding hidden:
.
./codecov.yml
./astropy
./astropy/cosmology
./astropy/_dev
./astropy/io
./astropy/constants
./astropy/__init__.py
./astropy/convolution
./astropy/utils
./astropy/version.py
./astropy/time
./astropy/visualization
./astropy/extern
./astropy/compiler_version.cpython-39-x86_64-linux-gnu.so
./astropy/config
./astropy/modeling
./astropy/timeseries
./astropy/units
./astropy/nddata
./astropy/conftest.py
./astropy/_compiler.c
./astropy/logger.py
./astropy/coordinates
./astropy/tests
./astropy/stats
./astropy/table
./astropy/_version.py
./astropy/uncertainty
./astropy/wcs
./astropy/samp
./astropy/CITATION
./CHANGES.rst
./docs
./docs/cosmology
./docs/index.rst
./docs/io
./docs/constants
./docs/convolution
./docs/utils
./docs/warnings.rst
./docs/getting_started.rst
./docs/importing_astropy.rst
./docs/time
./docs/development
./docs/visualization
./docs/license.rst
./docs/changelog.rst
./docs/changes
./docs/common_links.txt
./docs/config
./docs/modeling
./docs/timeseries
./docs/glossary.rst
./docs/units
./docs/_static
./docs/nddata
./docs/conftest.py
./docs/overview.rst
./docs/testhelpers.rst
./docs/logging.rst
./docs/coordinates
./docs/credits.rst
./docs/nitpick-exceptions
./docs/install.rst
./docs/make.bat
./docs/lts_policy.rst
./docs/known_issues.rst
./docs/stats
./docs/robots.txt
./docs/table
./docs/conf.py
./docs/_pkgtemplate.rst
./docs/uncertainty
./docs/wcs
./docs/samp
./docs/whatsnew
./docs/Makefile
./docs/_templates
./pyproject.toml
./astropy.egg-info
./astropy.egg-info/SOURCES.txt
./astropy.egg-info/requires.txt
./astropy.egg-info/PKG-INFO
./astropy.egg-info/not-zip-safe
./astropy.egg-info/top_level.txt
./astropy.egg-info/dependency_links.txt
./astropy.egg-info/entry_points.txt
./setup.cfg
./CONTRIBUTING.md
./licenses
./licenses/PYTHON.rst
./licenses/ERFA.rst
./licenses/NUMPY_LICENSE.rst
./licenses/README.rst
./licenses/AURA_LICENSE.rst
./licenses/DATATABLES_LICENSE.rst
./licenses/WCSLIB_LICENSE.rst
./licenses/PYFITS.rst
./licenses/CONFIGOBJ_LICENSE.rst
./licenses/PLY_LICENSE.rst
./licenses/JQUERY_LICENSE.rst
./licenses/EXPAT_LICENSE.rst
./README.rst
./conftest.py
./setup.py
./tox.ini
./CODE_OF_CONDUCT.md
./GOVERNANCE.md
./MANIFEST.in
./cextern
./cextern/trim_cfitsio.sh
./cextern/cfitsio
./cextern/trim_wcslib.sh
./cextern/wcslib
./cextern/README.rst
./cextern/trim_expat.sh
./cextern/expat
./pip-requirements
./examples
./examples/io
./examples/template
./examples/README.rst
./examples/coordinates
./LICENSE.rst
./CITATION



=== Iteration 2/100 ===
Calling LLM...
LLM Response: Now let's look at the coordinates directory since the issue is related to SkyCoord:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>astropy/coordinates</parameter>
</functi...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates"
}
Tool execution status: success
Tool stdout:
Here's the files and directories up to 2 levels deep in astropy/coordinates, excluding hidden:
astropy/coordinates
astropy/coordinates/earth_orientation.py
astropy/coordinates/builtin_frames
astropy/coordinates/builtin_frames/icrs_fk5_transforms.py
astropy/coordinates/builtin_frames/cirs_observed_transforms.py
astropy/coordinates/builtin_frames/icrs.py
astropy/coordinates/builtin_frames/fk4_fk5_transforms.py
astropy/coordinates/builtin_frames/__init__.py
astropy/coordinates/builtin_frames/icrs_observed_transforms.py
astropy/coordinates/builtin_frames/baseradec.py
astropy/coordinates/builtin_frames/equatorial.py
astropy/coordinates/builtin_frames/altaz.py
astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py
astropy/coordinates/builtin_frames/galactic.py
astropy/coordinates/builtin_frames/icrs_cirs_transforms.py
astropy/coordinates/builtin_frames/hadec.py
astropy/coordinates/builtin_frames/gcrs.py
astropy/coordinates/builtin_frames/cirs.py
astropy/coordinates/builtin_frames/lsr.py
astropy/coordinates/builtin_frames/galactic_transforms.py
astropy/coordinates/builtin_frames/ecliptic.py
astropy/coordinates/builtin_frames/utils.py
astropy/coordinates/builtin_frames/ecliptic_transforms.py
astropy/coordinates/builtin_frames/fk4.py
astropy/coordinates/builtin_frames/hcrs.py
astropy/coordinates/builtin_frames/itrs.py
astropy/coordinates/builtin_frames/itrs_observed_transforms.py
astropy/coordinates/builtin_frames/galactocentric.py
astropy/coordinates/builtin_frames/skyoffset.py
astropy/coordinates/builtin_frames/supergalactic.py
astropy/coordinates/builtin_frames/supergalactic_transforms.py
astropy/coordinates/builtin_frames/fk5.py
astropy/coordinates/sky_coordinate_parsers.py
astropy/coordinates/representation.py
astropy/coordinates/attributes.py
astropy/coordinates/__init__.py
astropy/coordinates/angle_formats.py
astropy/coordinates/funcs.py
astropy/coordinates/orbital_elements.py
astropy/coordinates/spectral_quantity.py
astropy/coordinates/sky_coordinate.py
astropy/coordinates/matrix_utilities.py
astropy/coordinates/angle_utilities.py
astropy/coordinates/name_resolve.py
astropy/coordinates/jparser.py
astropy/coordinates/distances.py
astropy/coordinates/erfa_astrom.py
astropy/coordinates/angles.py
astropy/coordinates/sites.py
astropy/coordinates/angle_parsetab.py
astropy/coordinates/tests
astropy/coordinates/tests/test_earth.py
astropy/coordinates/tests/test_distance.py
astropy/coordinates/tests/test_skyoffset_transformations.py
astropy/coordinates/tests/test_name_resolve.py
astropy/coordinates/tests/test_sky_coord_velocities.py
astropy/coordinates/tests/test_api_ape5.py
astropy/coordinates/tests/__init__.py
astropy/coordinates/tests/test_spectral_coordinate.py
astropy/coordinates/tests/test_sites.py
astropy/coordinates/tests/test_solar_system.py
astropy/coordinates/tests/test_erfa_astrom.py
astropy/coordinates/tests/accuracy
astropy/coordinates/tests/test_angle_generators.py
astropy/coordinates/tests/test_atc_replacements.py
astropy/coordinates/tests/test_icrs_observed_transformations.py
astropy/coordinates/tests/test_frames_with_velocity.py
astropy/coordinates/tests/test_intermediate_transformations.py
astropy/coordinates/tests/test_representation.py
astropy/coordinates/tests/test_shape_manipulation.py
astropy/coordinates/tests/test_celestial_transformations.py
astropy/coordinates/tests/helper.py
astropy/coordinates/tests/test_utils.py
astropy/coordinates/tests/test_iau_fullstack.py
astropy/coordinates/tests/test_pickle.py
astropy/coordinates/tests/test_finite_difference_velocities.py
astropy/coordinates/tests/test_formatting.py
astropy/coordinates/tests/test_sky_coord.py
astropy/coordinates/tests/test_frames.py
astropy/coordinates/tests/test_regression.py
astropy/coordinates/tests/test_unit_representation.py
astropy/coordinates/tests/test_transformations.py
astropy/coordinates/tests/test_matrix_utilities.py
astropy/coordinates/tests/test_velocity_corrs.py
astropy/coordinates/tests/test_angles.py
astropy/coordinates/tests/test_matching.py
astropy/coordinates/tests/test_representation_methods.py
astropy/coordinates/tests/test_representation_arithmetic.py
astropy/coordinates/tests/test_angular_separation.py
astropy/coordinates/tests/test_earth_orientation.py
astropy/coordinates/tests/test_funcs.py
astropy/coordinates/tests/test_spectral_quantity.py
astropy/coordinates/tests/test_geodetic_representations.py
astropy/coordinates/tests/test_arrays.py
astropy/coordinates/matching.py
astropy/coordinates/earth.py
astropy/coordinates/errors.py
astropy/coordinates/calculation.py
astropy/coordinates/solar_system.py
astropy/coordinates/transformations.py
astropy/coordinates/baseframe.py
astropy/coordinates/angle_lextab.py
astropy/coordinates/spectral_coordinate.py
astropy/coordinates/data
astropy/coordinates/data/constellation_names.dat
astropy/coordinates/data/constellation_data_roman87.dat
astropy/coordinates/data/sites.json



=== Iteration 3/100 ===
Calling LLM...
LLM Response: Based on the issue description, the problem is in the `sky_coordinate.py` file where the `__getattr__` method is giving misleading error messages. Let's examine this file:

<function=file_editor>
<par...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates/sky_coordinate.py",
  "view_range": "[590, 610]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/coordinates/sky_coordinate.py:
   590	        Returns
   591	        -------
   592	        transformable : bool or str
   593	            `True` if this can be transformed to ``new_frame``, `False` if
   594	            not, or the string 'same' if ``new_frame`` is the same system as
   595	            this object but no transformation is defined.
   596	
   597	        Notes
   598	        -----
   599	        A return value of 'same' means the transformation will work, but it will
   600	        just give back a copy of this object.  The intended usage is::
   601	
   602	            if coord.is_transformable_to(some_unknown_frame):
   603	                coord2 = coord.transform_to(some_unknown_frame)
   604	
   605	        This will work even if ``some_unknown_frame``  turns out to be the same
   606	        frame class as ``coord``.  This is intended for cases where the frame
   607	        is the same regardless of the frame attributes (e.g. ICRS), but be
   608	        aware that it *might* also indicate that someone forgot to define the
   609	        transformation between two objects of the same frame class but with
   610	        different attributes.


=== Iteration 4/100 ===
Calling LLM...
LLM Response:       Let me search for the `__getattr__` method in the sky_coordinate.py file:

<function=search>
<parameter=search_term>__getattr__</parameter>
<parameter=path>astropy/coordinates/sky_coordinate.py<...
Executing tool: r2e_search
Tool parameters: {
  "search_term": "__getattr__",
  "path": "astropy/coordinates/sky_coordinate.py"
}
Tool execution status: success
Tool stdout:
Matches for "__getattr__" in /testbed/astropy/coordinates/sky_coordinate.py:
869:    def __getattr__(self, attr):
903:        # This is to make anything available through __getattr__ immutable
918:            # variable.  See __getattr__ above.
945:            # the corresponding private variable.  See __getattr__ above.


=== Iteration 5/100 ===
Calling LLM...
LLM Response: Now let's look at the `__getattr__` method around line 869:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>astropy/coordinates/sky_coordinate.py</parameter>
<parameter=vie...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates/sky_coordinate.py",
  "view_range": "[865, 890]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/coordinates/sky_coordinate.py:
   865	        return self.frame.name == string or (
   866	            isinstance(self.frame.name, list) and string in self.frame.name
   867	        )
   868	
   869	    def __getattr__(self, attr):
   870	        """
   871	        Overrides getattr to return coordinates that this can be transformed
   872	        to, based on the alias attr in the primary transform graph.
   873	        """
   874	        if "_sky_coord_frame" in self.__dict__:
   875	            if self._is_name(attr):
   876	                return self  # Should this be a deepcopy of self?
   877	
   878	            # Anything in the set of all possible frame_attr_names is handled
   879	            # here. If the attr is relevant for the current frame then delegate
   880	            # to self.frame otherwise get it from self._<attr>.
   881	            if attr in frame_transform_graph.frame_attributes:
   882	                if attr in self.frame.frame_attributes:
   883	                    return getattr(self.frame, attr)
   884	                else:
   885	                    return getattr(self, "_" + attr, None)
   886	
   887	            # Some attributes might not fall in the above category but still
   888	            # are available through self._sky_coord_frame.
   889	            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
   890	                return getattr(self._sky_coord_frame, attr)


=== Iteration 6/100 ===
Calling LLM...
LLM Response: Let me continue viewing the rest of the `__getattr__` method to see the error handling:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>astropy/coordinates/sky_coordinate.p...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates/sky_coordinate.py",
  "view_range": "[890, 910]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/coordinates/sky_coordinate.py:
   890	                return getattr(self._sky_coord_frame, attr)
   891	
   892	            # Try to interpret as a new frame for transforming.
   893	            frame_cls = frame_transform_graph.lookup_name(attr)
   894	            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
   895	                return self.transform_to(attr)
   896	
   897	        # Fail
   898	        raise AttributeError(
   899	            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
   900	        )
   901	
   902	    def __setattr__(self, attr, val):
   903	        # This is to make anything available through __getattr__ immutable
   904	        if "_sky_coord_frame" in self.__dict__:
   905	            if self._is_name(attr):
   906	                raise AttributeError(f"'{attr}' is immutable")
   907	
   908	            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
   909	                setattr(self._sky_coord_frame, attr, val)
   910	                return


=== Iteration 7/100 ===
Calling LLM...
LLM Response: Now I can see the issue! The `__getattr__` method raises an `AttributeError` at line 898-900, but it doesn't handle the case where the attribute access is coming from a property in a subclass. When a ...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "create",
  "path": "reproduce_issue.py",
  "file_text": "import astropy.coordinates as coord\n\n\nclass custom_coord(coord.SkyCoord):\n    @property\n    def prop(self):\n        return self.random_attr\n\n\nc = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\ntry:\n    result = c.prop\n    print(\"No error occurred - this is unexpected!\")\nexcept AttributeError as e:\n    print(f\"Error message: {e}\")\n    print(f\"Error type: {type(e)}\")"
}
Tool execution status: success
Tool stdout:
File created successfully at reproduce_issue.py.
Here's the result of running `cat -n` on reproduce_issue.py:
     1	import astropy.coordinates as coord
     2	
     3	
     4	class custom_coord(coord.SkyCoord):
     5	    @property
     6	    def prop(self):
     7	        return self.random_attr
     8	
     9	
    10	c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
    11	try:
    12	    result = c.prop
    13	    print("No error occurred - this is unexpected!")
    14	except AttributeError as e:
    15	    print(f"Error message: {e}")
    16	    print(f"Error type: {type(e)}")


=== Iteration 8/100 ===
Calling LLM...
LLM Response:       Now let's run the script to confirm the issue:

<function=execute_bash>
<parameter=command>python reproduce_issue.py</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python reproduce_issue.py"
}
Tool execution status: success
Tool stdout:
[STDOUT]
Error message: 'custom_coord' object has no attribute 'prop'
Error type: <class 'AttributeError'>


=== Iteration 9/100 ===
Calling LLM...
LLM Response: Perfect! I've confirmed the issue. The error message says that the object has no attribute 'prop', but it should say that it has no attribute 'random_attr'. The problem is that when `c.prop` is access...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates/sky_coordinate.py",
  "view_range": "[869, 900]",
  "concise": "false"
}
Tool execution status: error
Tool stdout:
usage: file_editor.py [-h] --path PATH [--file_text FILE_TEXT]
                      [--old_str OLD_STR] [--new_str NEW_STR]
                      [--insert_line INSERT_LINE] [--view_range VIEW_RANGE]
                      [--concise]
                      command
file_editor.py: error: unrecognized arguments: false
command terminated with exit code 2


=== Iteration 10/100 ===
Calling LLM...
LLM Response: Let me view the `__getattr__` method without the concise parameter:

<function=file_editor>
<parameter=command>view</parameter>
<parameter=path>astropy/coordinates/sky_coordinate.py</parameter>
<param...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates/sky_coordinate.py",
  "view_range": "[869, 900]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/coordinates/sky_coordinate.py:
   869	    def __getattr__(self, attr):
   870	        """
   871	        Overrides getattr to return coordinates that this can be transformed
   872	        to, based on the alias attr in the primary transform graph.
   873	        """
   874	        if "_sky_coord_frame" in self.__dict__:
   875	            if self._is_name(attr):
   876	                return self  # Should this be a deepcopy of self?
   877	
   878	            # Anything in the set of all possible frame_attr_names is handled
   879	            # here. If the attr is relevant for the current frame then delegate
   880	            # to self.frame otherwise get it from self._<attr>.
   881	            if attr in frame_transform_graph.frame_attributes:
   882	                if attr in self.frame.frame_attributes:
   883	                    return getattr(self.frame, attr)
   884	                else:
   885	                    return getattr(self, "_" + attr, None)
   886	
   887	            # Some attributes might not fall in the above category but still
   888	            # are available through self._sky_coord_frame.
   889	            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
   890	                return getattr(self._sky_coord_frame, attr)
   891	
   892	            # Try to interpret as a new frame for transforming.
   893	            frame_cls = frame_transform_graph.lookup_name(attr)
   894	            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
   895	                return self.transform_to(attr)
   896	
   897	        # Fail
   898	        raise AttributeError(
   899	            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
   900	        )


=== Iteration 11/100 ===
Calling LLM...
LLM Response: I need to understand how to detect when the attribute access is coming from a property in a subclass. The issue is that when a property in a subclass tries to access a non-existent attribute, the `__g...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates/sky_coordinate.py",
  "view_range": "[1, 30]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/coordinates/sky_coordinate.py:
     1	import copy
     2	import operator
     3	import re
     4	import warnings
     5	
     6	import erfa
     7	import numpy as np
     8	
     9	from astropy import units as u
    10	from astropy.constants import c as speed_of_light
    11	from astropy.table import QTable
    12	from astropy.time import Time
    13	from astropy.utils import ShapedLikeNDArray
    14	from astropy.utils.data_info import MixinInfo
    15	from astropy.utils.exceptions import AstropyUserWarning
    16	
    17	from .angles import Angle
    18	from .baseframe import BaseCoordinateFrame, GenericFrame, frame_transform_graph
    19	from .distances import Distance
    20	from .representation import (
    21	    RadialDifferential,
    22	    SphericalDifferential,
    23	    SphericalRepresentation,
    24	    UnitSphericalCosLatDifferential,
    25	    UnitSphericalDifferential,
    26	    UnitSphericalRepresentation,
    27	)
    28	from .sky_coordinate_parsers import (
    29	    _get_frame_class,
    30	    _get_frame_without_data,


=== Iteration 12/100 ===
Calling LLM...
LLM Response: Now I need to understand the issue better. The problem is that when a subclass property tries to access a non-existent attribute, the `__getattr__` method in the parent class intercepts the call and r...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "str_replace",
  "path": "astropy/coordinates/sky_coordinate.py",
  "old_str": "def __getattr__(self, attr):\n        \"\"\"\n        Overrides getattr to return coordinates that this can be transformed\n        to, based on the alias attr in the primary transform graph.\n        \"\"\"\n        if \"_sky_coord_frame\" in self.__dict__:\n            if self._is_name(attr):\n                return self  # Should this be a deepcopy of self?\n\n            # Anything in the set of all possible frame_attr_names is handled\n            # here. If the attr is relevant for the current frame then delegate\n            # to self.frame otherwise get it from self._<attr>.\n            if attr in frame_transform_graph.frame_attributes:\n                if attr in self.frame.frame_attributes:\n                    return getattr(self.frame, attr)\n                else:\n                    return getattr(self, \"_\" + attr, None)\n\n            # Some attributes might not fall in the above category but still\n            # are available through self._sky_coord_frame.\n            if not attr.startswith(\"_\") and hasattr(self._sky_coord_frame, attr):\n                return getattr(self._sky_coord_frame, attr)\n\n            # Try to interpret as a new frame for transforming.\n            frame_cls = frame_transform_graph.lookup_name(attr)\n            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                return self.transform_to(attr)\n\n        # Fail\n        raise AttributeError(\n            f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n        )",
  "new_str": "def __getattr__(self, attr):\n        \"\"\"\n        Overrides getattr to return coordinates that this can be transformed\n        to, based on the alias attr in the primary transform graph.\n        \"\"\"\n        if \"_sky_coord_frame\" in self.__dict__:\n            # Check if the attribute is a property defined in a subclass\n            # If so, let normal attribute access handle it to get proper error messages\n            if (self.__class__ is not SkyCoord and \n                hasattr(self.__class__, attr) and \n                isinstance(getattr(self.__class__, attr), property)):\n                # This will let Python's normal attribute access handle the property,\n                # which will properly raise AttributeError for missing attributes within the property\n                return super().__getattribute__(attr)\n            \n            if self._is_name(attr):\n                return self  # Should this be a deepcopy of self?\n\n            # Anything in the set of all possible frame_attr_names is handled\n            # here. If the attr is relevant for the current frame then delegate\n            # to self.frame otherwise get it from self._<attr>.\n            if attr in frame_transform_graph.frame_attributes:\n                if attr in self.frame.frame_attributes:\n                    return getattr(self.frame, attr)\n                else:\n                    return getattr(self, \"_\" + attr, None)\n\n            # Some attributes might not fall in the above category but still\n            # are available through self._sky_coord_frame.\n            if not attr.startswith(\"_\") and hasattr(self._sky_coord_frame, attr):\n                return getattr(self._sky_coord_frame, attr)\n\n            # Try to interpret as a new frame for transforming.\n            frame_cls = frame_transform_graph.lookup_name(attr)\n            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                return self.transform_to(attr)\n\n        # Fail\n        raise AttributeError(\n            f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n        )"
}
Tool execution status: success
Tool stdout:
The file astropy/coordinates/sky_coordinate.py has been edited successfully.
Here's a snippet of the edited section:
   865	        return self.frame.name == string or (
   866	            isinstance(self.frame.name, list) and string in self.frame.name
   867	        )
   868	
   869	    def __getattr__(self, attr):
   870	        """
   871	        Overrides getattr to return coordinates that this can be transformed
   872	        to, based on the alias attr in the primary transform graph.
   873	        """
   874	        if "_sky_coord_frame" in self.__dict__:
   875	            # Check if the attribute is a property defined in a subclass
   876	            # If so, let normal attribute access handle it to get proper error messages
   877	            if (self.__class__ is not SkyCoord and 
   878	                hasattr(self.__class__, attr) and 
   879	                isinstance(getattr(self.__class__, attr), property)):
   880	                # This will let Python's normal attribute access handle the property,
   881	                # which will properly raise AttributeError for missing attributes within the property
   882	                return super().__getattribute__(attr)
   883	            
   884	            if self._is_name(attr):
   885	                return self  # Should this be a deepcopy of self?
   886	
   887	            # Anything in the set of all possible frame_attr_names is handled
   888	            # here. If the attr is relevant for the current frame then delegate
   889	            # to self.frame otherwise get it from self._<attr>.
   890	            if attr in frame_transform_graph.frame_attributes:
   891	                if attr in self.frame.frame_attributes:
   892	                    return getattr(self.frame, attr)
   893	                else:
   894	                    return getattr(self, "_" + attr, None)
   895	
   896	            # Some attributes might not fall in the above category but still
   897	            # are available through self._sky_coord_frame.
   898	            if not attr.startswith("_") and hasattr(self._sky_coord_frame, attr):
   899	                return getattr(self._sky_coord_frame, attr)
   900	
   901	            # Try to interpret as a new frame for transforming.
   902	            frame_cls = frame_transform_graph.lookup_name(attr)
   903	            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
   904	                return self.transform_to(attr)
   905	
   906	        # Fail
   907	        raise AttributeError(
   908	            f"'{self.__class__.__name__}' object has no attribute '{attr}'"
   909	        )
   910	
   911	    def __setattr__(self, attr, val):
   912	        # This is to make anything available through __getattr__ immutable
   913	        if "_sky_coord_frame" in self.__dict__:
Review the changes and make sure they are as expected.


=== Iteration 13/100 ===
Calling LLM...
LLM Response: Now I need to check if `SkyCoord` is imported in this file so we can use it in the comparison. Let me search for SkyCoord imports:

<function=search>
<parameter=search_term>SkyCoord</parameter>
<param...
Executing tool: r2e_search
Tool parameters: {
  "search_term": "SkyCoord",
  "path": "astropy/coordinates/sky_coordinate.py"
}
Tool execution status: success
Tool stdout:
Matches for "SkyCoord" in /testbed/astropy/coordinates/sky_coordinate.py:
34:__all__ = ["SkyCoord", "SkyCoordInfo"]
37:class SkyCoordInfo(MixinInfo):
111:        Return a new SkyCoord instance which is consistent with the input
112:        SkyCoord objects ``skycoords`` and has ``length`` rows.  Being
116:        This is intended for creating a new SkyCoord instance whose elements can
118:        when a SkyCoord object is used as a mixin column in an astropy Table.
126:            List of input SkyCoord objects
136:        skycoord : SkyCoord (or subclass)
146:        # Make a new SkyCoord object with the desired length and attributes
168:class SkyCoord(ShapedLikeNDArray):
172:    The `SkyCoord` class accepts a wide variety of inputs for initialization. At
175:    scalar or array coordinates (can be checked via ``SkyCoord.isscalar``).
179:      SkyCoord(COORD, [FRAME], keyword_args ...)
180:      SkyCoord(LON, LAT, [FRAME], keyword_args ...)
181:      SkyCoord(LON, LAT, [DISTANCE], frame=FRAME, unit=UNIT, keyword_args ...)
182:      SkyCoord([FRAME], <lon_attr>=LON, <lat_attr>=LAT, keyword_args ...)
193:    The examples below illustrate common ways of initializing a `SkyCoord`
197:      >>> from astropy.coordinates import SkyCoord  # High-level coordinates
205:      >>> c = SkyCoord(10, 20, unit="deg")  # defaults to ICRS frame
206:      >>> c = SkyCoord([1, 2, 3], [-30, 45, 8], frame="icrs", unit="deg")  # 3 coords
209:      >>> c = SkyCoord(coords, frame=FK4, unit=(u.hourangle, u.deg), obstime="J1992.21")
211:      >>> c = SkyCoord("1h12m43.2s +1d12m43s", frame=Galactic)  # Units from string
212:      >>> c = SkyCoord(frame="galactic", l="1h12m43.2s", b="+1d12m43s")
216:      >>> c = SkyCoord(ra, dec, frame='icrs')
217:      >>> c = SkyCoord(frame=ICRS, ra=ra, dec=dec, obstime='2001-01-02T12:34:56')
220:      >>> c = SkyCoord(c, obstime='J2010.11', equinox='B1965')  # Override defaults
222:      >>> c = SkyCoord(w=0, u=1, v=2, unit='kpc', frame='galactic',
225:      >>> c = SkyCoord([ICRS(ra=1*u.deg, dec=2*u.deg), ICRS(ra=3*u.deg, dec=4*u.deg)])
230:      >>> c = SkyCoord(ra=1*u.deg, dec=2*u.deg, radial_velocity=10*u.km/u.s)
232:      >>> c = SkyCoord(ra=1*u.deg, dec=2*u.deg, pm_ra_cosdec=2*u.mas/u.yr, pm_dec=1*u.mas/u.yr)
238:    allow for creating a `SkyCoord` object and transforming frames without
244:        Type of coordinate frame this `SkyCoord` should represent. Defaults to
289:    # Declare that SkyCoord can be used as a Table column by defining the
291:    info = SkyCoordInfo()
294:        # these are frame attributes set on this SkyCoord but *not* a part of
295:        # the frame object this SkyCoord contains
300:        # to make this the fastest way to create a SkyCoord instance. Many of
306:            and isinstance(args[0], (BaseCoordinateFrame, SkyCoord))
309:            if isinstance(coords, SkyCoord):
347:            # this SkyCoord will have. We keep these attributes as special
361:                raise ValueError("Cannot create a SkyCoord without data")
389:        """Equality operator for SkyCoord
398:                raise ValueError("Can only compare SkyCoord to Frame with data")
402:        if not isinstance(value, SkyCoord):
479:        """Implement self[item] = value for SkyCoord
517:        of ``SkyCoord`` objects.
536:        out : `~astropy.coordinates.SkyCoord` instance
632:        `SkyCoord` that are not part of the destination frame's definition are
633:        kept (stored on the resulting `SkyCoord`), and thus one can round-trip
638:        frame : str, `BaseCoordinateFrame` class or instance, or `SkyCoord` instance
639:            The frame to transform this coordinate into.  If a `SkyCoord`, the
648:        coord : `SkyCoord`
667:        if isinstance(frame, SkyCoord):
706:        # Finally make the new SkyCoord object from the `new_coord` and
715:        # or cannot be stored on a SkyCoord?
745:        new_coord : `SkyCoord`
759:            raise ValueError("SkyCoord requires velocity data to evolve the position.")
787:                # MAGIC NUMBER: if the current SkyCoord object has no obstime,
847:        # Update the obstime of the returned SkyCoord, and need to carry along
877:            if (self.__class__ is not SkyCoord and 
1072:        Convert this |SkyCoord| to a |QTable|.
1074:        Any attributes that have the same length as the |SkyCoord| will be
1081:            A |QTable| containing the data of this |SkyCoord|.
1085:        >>> sc = SkyCoord(ra=[40, 70]*u.deg, dec=[0, -20]*u.deg,
1118:        the same frame attributes. For two `SkyCoord` objects, *all* of the
1124:        other : SkyCoord or BaseCoordinateFrame
1135:            If ``other`` isn't a `SkyCoord` or a `BaseCoordinateFrame` or subclass.
1139:        elif isinstance(other, SkyCoord):
1150:            # not a BaseCoordinateFrame nor a SkyCoord object
1173:        other : `~astropy.coordinates.SkyCoord` or `~astropy.coordinates.BaseCoordinateFrame`
1195:                    {"merge_attributes": False} if isinstance(other, SkyCoord) else {}
1200:                    "Can only get separation to another SkyCoord "
1223:        other : `~astropy.coordinates.SkyCoord` or `~astropy.coordinates.BaseCoordinateFrame`
1239:                    {"merge_attributes": False} if isinstance(other, SkyCoord) else {}
1244:                    "Can only get separation to another SkyCoord "
1334:        newcoord : `~astropy.coordinates.SkyCoord`
1345:        ``SkyCoord(SkyOffsetFrame(d_lon, d_lat, origin=self.frame).transform_to(self))``.
1371:        newpoints : `~astropy.coordinates.SkyCoord`
1377:        Returned SkyCoord frame retains only the frame attributes that are for
1383:        `~astropy.coordinates.SkyCoord.skyoffset_frame()` can also be used to
1403:        return SkyCoord(newlon, newlat, frame=self.frame)
1415:        catalogcoord : `~astropy.coordinates.SkyCoord` or `~astropy.coordinates.BaseCoordinateFrame`
1452:        SkyCoord.match_to_catalog_3d
1457:            isinstance(catalogcoord, (SkyCoord, BaseCoordinateFrame))
1461:                "Can only get separation to another SkyCoord or a "
1484:        catalogcoord : `~astropy.coordinates.SkyCoord` or `~astropy.coordinates.BaseCoordinateFrame`
1519:        SkyCoord.match_to_catalog_sky
1524:            isinstance(catalogcoord, (SkyCoord, BaseCoordinateFrame))
1528:                "Can only get separation to another SkyCoord or a "
1543:        This is intended for use on `~astropy.coordinates.SkyCoord` objects
1546:        `~astropy.coordinates.SkyCoord.separation`.
1555:            this `SkyCoord`. This should be an object with array coordinates,
1590:        SkyCoord.search_around_3d
1603:        This is intended for use on `~astropy.coordinates.SkyCoord` objects
1606:        `~astropy.coordinates.SkyCoord.separation_3d`.
1613:        searcharoundcoords : `~astropy.coordinates.SkyCoord` or `~astropy.coordinates.BaseCoordinateFrame`
1615:            this `SkyCoord`. This should be an object with array coordinates,
1650:        SkyCoord.search_around_sky
1661:        `SkyCoord` and another.
1665:        other : `SkyCoord`
1679:        >>> c1 = SkyCoord(0*u.deg, 0*u.deg)
1680:        >>> c2 = SkyCoord(1*u.deg, 0*u.deg)
1683:        >>> c3 = SkyCoord(1*u.deg, 1*u.deg)
1695:                    "SkyCoord or a coordinate frame with data"
1707:        Returns the sky offset frame with this `SkyCoord` at the origin.
1712:            A sky offset frame of the same type as this `SkyCoord` (e.g., if
1727:        Determines the constellation(s) of the coordinates this `SkyCoord`
1743:            constellation.  If it is an array `SkyCoord`, it returns an array of
1763:        novel = SkyCoord(
1803:        Create a new `SkyCoord` from pixel coordinates using an
1820:        coord : `~astropy.coordinates.SkyCoord`
1835:        Determines if the SkyCoord is contained in the given wcs footprint.
1846:            Additional arguments to pass to `~astropy.coordinates.SkyCoord.to_pixel`
1886:            ``obstime`` frame attribute on the `SkyCoord` will be used.
1891:            frame attribute on the `SkyCoord` will be used.
1897:            when the frame attribute is already set on this `SkyCoord`.
1922:          >>> from astropy.coordinates import SkyCoord, EarthLocation
1926:          >>> sc = SkyCoord(1*u.deg, 2*u.deg)
1965:          >>> sc = SkyCoord(1*u.deg, 2*u.deg)
1981:                        " `SkyCoord` because it is ambiguous which is meant for the"
1989:                    " a SkyCoord frame attribute, as an attribute on the passed in"
1996:                " passed in and there is also a  `location` attribute on this SkyCoord"
2007:                    " a SkyCoord frame attribute or in the method call."
2016:                    "SkyCoord has space motion, and therefore the specified "
2017:                    "position of the SkyCoord may not be the same as "
2021:                    "apply space motion of the SkyCoord to correct for this"
2022:                    "the `obstime` attribute of the SkyCoord must be set",
2069:                        "SkyCoord contains some velocity information, but not enough to"
2089:        A convenience method to create and return a new `SkyCoord` from the data
2121:        newsc : `~astropy.coordinates.SkyCoord` or subclass
2122:            The new `SkyCoord` (or subclass) object.
2221:        coord : SkyCoord
2222:            Instance of the SkyCoord class.


=== Iteration 14/100 ===
Calling LLM...
LLM Response: I can see that `SkyCoord` is defined in this file, so I can use it directly in the comparison. However, I need to be careful about the order of execution. Let me check where `SkyCoord` is defined:

<f...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "view",
  "path": "astropy/coordinates/sky_coordinate.py",
  "view_range": "[168, 175]"
}
Tool execution status: success
Tool stdout:
Here's the result of running `cat -n` on astropy/coordinates/sky_coordinate.py:
   168	class SkyCoord(ShapedLikeNDArray):
   169	    """High-level object providing a flexible interface for celestial coordinate
   170	    representation, manipulation, and transformation between systems.
   171	
   172	    The `SkyCoord` class accepts a wide variety of inputs for initialization. At
   173	    a minimum these must provide one or more celestial coordinate values with
   174	    unambiguous units.  Inputs may be scalars or lists/tuples/arrays, yielding
   175	    scalar or array coordinates (can be checked via ``SkyCoord.isscalar``).


=== Iteration 15/100 ===
Calling LLM...
LLM Response: Since `SkyCoord` is defined in the same file, I need to modify my approach. I can't reference `SkyCoord` within its own class definition before it's fully defined. Let me use a different approach - I'...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "str_replace",
  "path": "astropy/coordinates/sky_coordinate.py",
  "old_str": "# Check if the attribute is a property defined in a subclass\n            # If so, let normal attribute access handle it to get proper error messages\n            if (self.__class__ is not SkyCoord and \n                hasattr(self.__class__, attr) and \n                isinstance(getattr(self.__class__, attr), property)):\n                # This will let Python's normal attribute access handle the property,\n                # which will properly raise AttributeError for missing attributes within the property\n                return super().__getattribute__(attr)",
  "new_str": "# Check if the attribute is a property defined in a subclass\n            # If so, let normal attribute access handle it to get proper error messages\n            if (len(self.__class__.__mro__) > 1 and  # Check if this is a subclass\n                hasattr(self.__class__, attr) and \n                isinstance(getattr(self.__class__, attr), property)):\n                # This will let Python's normal attribute access handle the property,\n                # which will properly raise AttributeError for missing attributes within the property\n                return super().__getattribute__(attr)"
}
Tool execution status: success
Tool stdout:
The file astropy/coordinates/sky_coordinate.py has been edited successfully.
Here's a snippet of the edited section:
   871	        Overrides getattr to return coordinates that this can be transformed
   872	        to, based on the alias attr in the primary transform graph.
   873	        """
   874	        if "_sky_coord_frame" in self.__dict__:
   875	            # Check if the attribute is a property defined in a subclass
   876	            # If so, let normal attribute access handle it to get proper error messages
   877	            if (len(self.__class__.__mro__) > 1 and  # Check if this is a subclass
   878	                hasattr(self.__class__, attr) and 
   879	                isinstance(getattr(self.__class__, attr), property)):
   880	                # This will let Python's normal attribute access handle the property,
   881	                # which will properly raise AttributeError for missing attributes within the property
   882	                return super().__getattribute__(attr)
   883	            
   884	            if self._is_name(attr):
   885	                return self  # Should this be a deepcopy of self?
   886	
Review the changes and make sure they are as expected.


=== Iteration 16/100 ===
Calling LLM...
LLM Response: Now let's test our fix by running the reproduction script:

<function=execute_bash>
<parameter=command>python reproduce_issue.py</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python reproduce_issue.py"
}
Tool execution status: success
Tool stdout:
[STDOUT]
Error message: 'custom_coord' object has no attribute 'random_attr'
Error type: <class 'AttributeError'>


=== Iteration 17/100 ===
Calling LLM...
LLM Response: Excellent! The fix is working. The error message now correctly says "'custom_coord' object has no attribute 'random_attr'" instead of "'custom_coord' object has no attribute 'prop'". This is exactly w...
Executing tool: r2e_file_editor
Tool parameters: {
  "command": "create",
  "path": "test_edge_cases.py",
  "file_text": "import astropy.coordinates as coord\nimport astropy.units as u\n\n\n# Test 1: Normal SkyCoord functionality\nprint(\"Test 1: Normal SkyCoord functionality\")\nc1 = coord.SkyCoord('00h42m30s', '+41d12m00s', frame='icrs')\nprint(f\"RA: {c1.ra}\")\nprint(f\"Dec: {c1.dec}\")\nprint(\"\u2713 Normal functionality works\\n\")\n\n# Test 2: Properties in base SkyCoord class\nprint(\"Test 2: Properties in base SkyCoord class\")\nclass test_coord_base(coord.SkyCoord):\n    @property\n    def test_prop(self):\n        return self.ra  # This should work\n\nc2 = test_coord_base('00h42m30s', '+41d12m00s', frame='icrs')\nprint(f\"Test property: {c2.test_prop}\")\nprint(\"\u2713 Properties in base class work\\n\")\n\n# Test 3: Non-property attributes in subclasses\nprint(\"Test 3: Non-property attributes in subclasses\")\nclass test_coord_attr(coord.SkyCoord):\n    def test_method(self):\n        return self.ra  # This should work\n\nc3 = test_coord_attr('00h42m30s', '+41d12m00s', frame='icrs')\nprint(f\"Test method: {c3.test_method()}\")\nprint(\"\u2713 Non-property attributes work\\n\")\n\n# Test 4: Original issue - property accessing non-existent attribute\nprint(\"Test 4: Original issue\")\nclass test_coord_prop(coord.SkyCoord):\n    @property\n    def prop(self):\n        return self.non_existent_attr\n\nc4 = test_coord_prop('00h42m30s', '+41d12m00s', frame='icrs')\ntry:\n    result = c4.prop\n    print(\"No error occurred - this is unexpected!\")\nexcept AttributeError as e:\n    print(f\"Error message: {e}\")\n    print(\"\u2713 Original issue is fixed - correct error message\\n\")\n\n# Test 5: Direct access to non-existent attribute\nprint(\"Test 5: Direct access to non-existent attribute\")\ntry:\n    result = c4.non_existent_attr\n    print(\"No error occurred - this is unexpected!\")\nexcept AttributeError as e:\n    print(f\"Error message: {e}\")\n    print(\"\u2713 Direct access to non-existent attribute works correctly\\n\")"
}
Tool execution status: success
Tool stdout:
File created successfully at test_edge_cases.py.
Here's the result of running `cat -n` on test_edge_cases.py:
     1	import astropy.coordinates as coord
     2	import astropy.units as u
     3	
     4	
     5	# Test 1: Normal SkyCoord functionality
     6	print("Test 1: Normal SkyCoord functionality")
     7	c1 = coord.SkyCoord('00h42m30s', '+41d12m00s', frame='icrs')
     8	print(f"RA: {c1.ra}")
     9	print(f"Dec: {c1.dec}")
    10	print("✓ Normal functionality works\n")
    11	
    12	# Test 2: Properties in base SkyCoord class
    13	print("Test 2: Properties in base SkyCoord class")
    14	class test_coord_base(coord.SkyCoord):
    15	    @property
    16	    def test_prop(self):
    17	        return self.ra  # This should work
    18	
    19	c2 = test_coord_base('00h42m30s', '+41d12m00s', frame='icrs')
    20	print(f"Test property: {c2.test_prop}")
... (file continues)


=== Iteration 18/100 ===
Calling LLM...
LLM Response:       Let's run the edge case tests to make sure our fix doesn't break anything:

<function=execute_bash>
<parameter=command>python test_edge_cases.py</parameter>
</function>...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python test_edge_cases.py"
}
Tool execution status: success
Tool stdout:
[STDOUT]
Test 1: Normal SkyCoord functionality
RA: 10.624999999999998 deg
Dec: 41.2 deg
✓ Normal functionality works

Test 2: Properties in base SkyCoord class
Test property: 10.624999999999998 deg
✓ Properties in base class work

Test 3: Non-property attributes in subclasses
Test method: 10.624999999999998 deg
✓ Non-property attributes work

Test 4: Original issue
Error message: 'test_coord_prop' object has no attribute 'non_existent_attr'
✓ Original issue is fixed - correct error message

Test 5: Direct access to non-existent attribute
Error message: 'test_coord_prop' object has no attribute 'non_existent_attr'
✓ Direct access to non-existent attribute works correctly


=== Iteration 19/100 ===
Calling LLM...
LLM Response:       Perfect! All the edge cases pass. Our fix correctly:

1. ✅ Normal SkyCoord functionality still works
2. ✅ Properties in base SkyCoord class still work  
3. ✅ Non-property attributes in subclasse...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python -m pytest astropy/coordinates/tests/test_sky_coord.py -v"
}
Tool execution status: error
Tool stdout:
[STDOUT]
Internet access disabled
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.21, pytest-7.4.0, pluggy-1.3.0 -- /root/.venv/bin/python
cachedir: .pytest_cache
hypothesis profile 'ci' -> database=None, deadline=None, print_blob=True, derandomize=True

Running tests with Astropy version 5.3.dev62+g1a4462d72e.d20250104.
Running tests in astropy/coordinates/tests/test_sky_coord.py.

Date: 2025-10-08T08:57:36

Platform: Linux-5.10.0-1.0.0.28-x86_64-with-glibc2.35

Executable: /root/.venv/bin/python

Full Python Version: 
3.9.21 (main, Dec 11 2024, 16:24:11) 
[GCC 11.2.0]

encodings: sys: utf-8, locale: UTF-8, filesystem: utf-8
byteorder: little
float info: dig: 15, mant_dig: 15

Package versions: 
Numpy: 1.25.2
Scipy: not available
Matplotlib: not available
h5py: not available
Pandas: not available
PyERFA: 2.0.0.3
Cython: not available
Scikit-image: not available
asdf: not available
pyarrow: not available

Using Astropy options: remote_data: none.

ARCH_ON_CI: undefined
IS_CRON: undefined

rootdir: /testbed
configfile: setup.cfg
plugins: cov-4.1.0, astropy-0.10.0, xdist-3.3.1, openfiles-0.5.0, doctestplus-1.0.0, hypothesis-6.82.6, remotedata-0.4.0, mock-3.11.1, arraydiff-0.5.0, astropy-header-0.2.2, filter-subpackage-0.1.2
[1mcollecting ... [0mcollected 431 items

astropy/coordinates/tests/test_sky_coord.py::test_is_transformable_to_str_input [32mPASSED[0m[32m [  0%][0m
astropy/coordinates/tests/test_sky_coord.py::test_transform_to [32mPASSED[0m[32m    [  0%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-None-None-None] [32mPASSED[0m[32m [  0%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-None-None-J1980.0] [32mPASSED[0m[32m [  0%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-J1975.0-None-None] [32mPASSED[0m[32m [  1%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [  1%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-None-J1980.0-None] [32mPASSED[0m[32m [  1%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [  1%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [  2%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [  2%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-None-None-None] [32mPASSED[0m[32m [  2%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [  2%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [  3%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [  3%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [  3%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [  3%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [  3%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-ICRS-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [  4%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-None-None-None] [32mPASSED[0m[32m [  4%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-None-None-J1980.0] [32mPASSED[0m[32m [  4%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-J1975.0-None-None] [32mPASSED[0m[32m [  4%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [  5%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-None-J1980.0-None] [32mPASSED[0m[32m [  5%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [  5%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [  5%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [  6%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-None-None-None] [32mPASSED[0m[32m [  6%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [  6%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [  6%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [  6%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [  7%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [  7%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [  7%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK4-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [  7%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-None-None-None] [32mPASSED[0m[32m [  8%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-None-None-J1980.0] [32mPASSED[0m[32m [  8%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-J1975.0-None-None] [32mPASSED[0m[32m [  8%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [  8%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-None-J1980.0-None] [32mPASSED[0m[32m [  9%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [  9%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [  9%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [  9%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-None-None-None] [32mPASSED[0m[32m [  9%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 10%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 10%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 10%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 10%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 11%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 11%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-FK5-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 11%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-None-None-None] [32mPASSED[0m[32m [ 11%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-None-None-J1980.0] [32mPASSED[0m[32m [ 12%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-J1975.0-None-None] [32mPASSED[0m[32m [ 12%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 12%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-None-J1980.0-None] [32mPASSED[0m[32m [ 12%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 12%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 13%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 13%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-None-None-None] [32mPASSED[0m[32m [ 13%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 13%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 14%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 14%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 14%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 14%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 15%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[ICRS-Galactic-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 15%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-None-None-None] [32mPASSED[0m[32m [ 15%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-None-None-J1980.0] [32mPASSED[0m[32m [ 15%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-J1975.0-None-None] [32mPASSED[0m[32m [ 16%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 16%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-None-J1980.0-None] [32mPASSED[0m[32m [ 16%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 16%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 16%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 17%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-None-None-None] [32mPASSED[0m[32m [ 17%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 17%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 17%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 18%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 18%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 18%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 18%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-ICRS-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 19%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-None-None-None] [32mPASSED[0m[32m [ 19%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-None-None-J1980.0] [32mPASSED[0m[32m [ 19%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-J1975.0-None-None] [32mPASSED[0m[32m [ 19%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 19%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-None-J1980.0-None] [32mPASSED[0m[32m [ 20%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 20%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 20%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 20%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-None-None-None] [32mPASSED[0m[32m [ 21%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 21%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 21%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 21%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 22%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 22%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 22%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK4-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 22%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-None-None-None] [32mPASSED[0m[32m [ 22%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-None-None-J1980.0] [32mPASSED[0m[32m [ 23%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-J1975.0-None-None] [32mPASSED[0m[32m [ 23%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 23%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-None-J1980.0-None] [32mPASSED[0m[32m [ 23%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 24%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 24%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 24%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-None-None-None] [32mPASSED[0m[32m [ 24%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 25%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 25%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 25%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 25%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 25%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 26%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-FK5-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 26%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-None-None-None] [32mPASSED[0m[32m [ 26%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-None-None-J1980.0] [32mPASSED[0m[32m [ 26%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-J1975.0-None-None] [32mPASSED[0m[32m [ 27%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 27%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-None-J1980.0-None] [32mPASSED[0m[32m [ 27%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 27%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 28%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 28%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-None-None-None] [32mPASSED[0m[32m [ 28%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 28%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 29%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 29%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 29%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 29%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 29%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK4-Galactic-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 30%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-None-None-None] [32mPASSED[0m[32m [ 30%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-None-None-J1980.0] [32mPASSED[0m[32m [ 30%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-J1975.0-None-None] [32mPASSED[0m[32m [ 30%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 31%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-None-J1980.0-None] [32mPASSED[0m[32m [ 31%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 31%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 31%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 32%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-None-None-None] [32mPASSED[0m[32m [ 32%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 32%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 32%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 32%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 33%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 33%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 33%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-ICRS-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 33%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-None-None-None] [32mPASSED[0m[32m [ 34%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-None-None-J1980.0] [32mPASSED[0m[32m [ 34%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-J1975.0-None-None] [32mPASSED[0m[32m [ 34%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 34%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-None-J1980.0-None] [32mPASSED[0m[32m [ 35%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 35%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 35%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 35%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-None-None-None] [32mPASSED[0m[32m [ 35%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 36%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 36%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 36%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 36%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 37%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 37%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK4-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 37%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-None-None-None] [32mPASSED[0m[32m [ 37%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-None-None-J1980.0] [32mPASSED[0m[32m [ 38%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-J1975.0-None-None] [32mPASSED[0m[32m [ 38%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 38%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-None-J1980.0-None] [32mPASSED[0m[32m [ 38%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 38%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 39%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 39%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-None-None-None] [32mPASSED[0m[32m [ 39%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 39%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 40%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 40%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 40%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 40%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 41%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-FK5-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 41%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-None-None-None] [32mPASSED[0m[32m [ 41%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-None-None-J1980.0] [32mPASSED[0m[32m [ 41%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-J1975.0-None-None] [32mPASSED[0m[32m [ 41%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 42%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-None-J1980.0-None] [32mPASSED[0m[32m [ 42%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 42%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 42%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 43%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-None-None-None] [32mPASSED[0m[32m [ 43%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 43%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 43%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 44%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 44%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 44%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 44%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[FK5-Galactic-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 45%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-None-None-None] [32mPASSED[0m[32m [ 45%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-None-None-J1980.0] [32mPASSED[0m[32m [ 45%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-J1975.0-None-None] [32mPASSED[0m[32m [ 45%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 45%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-None-J1980.0-None] [32mPASSED[0m[32m [ 46%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 46%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 46%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 46%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-None-None-None] [32mPASSED[0m[32m [ 47%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 47%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 47%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 47%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 48%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 48%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 48%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-ICRS-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 48%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-None-None-None] [32mPASSED[0m[32m [ 48%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-None-None-J1980.0] [32mPASSED[0m[32m [ 49%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-J1975.0-None-None] [32mPASSED[0m[32m [ 49%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 49%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-None-J1980.0-None] [32mPASSED[0m[32m [ 49%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 50%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 50%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 50%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-None-None-None] [32mPASSED[0m[32m [ 50%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 51%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 51%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 51%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 51%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 51%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 52%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK4-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 52%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-None-None-None] [32mPASSED[0m[32m [ 52%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-None-None-J1980.0] [32mPASSED[0m[32m [ 52%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-J1975.0-None-None] [32mPASSED[0m[32m [ 53%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 53%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-None-J1980.0-None] [32mPASSED[0m[32m [ 53%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 53%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 54%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 54%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-None-None-None] [32mPASSED[0m[32m [ 54%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 54%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 54%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 55%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 55%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 55%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 55%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-FK5-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 56%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-None-None-None] [32mPASSED[0m[32m [ 56%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-None-None-J1980.0] [32mPASSED[0m[32m [ 56%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-J1975.0-None-None] [32mPASSED[0m[32m [ 56%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 57%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-None-J1980.0-None] [32mPASSED[0m[32m [ 57%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 57%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 57%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-None-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 58%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-None-None-None] [32mPASSED[0m[32m [ 58%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-None-None-J1980.0] [32mPASSED[0m[32m [ 58%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-J1975.0-None-None] [32mPASSED[0m[32m [ 58%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-J1975.0-None-J1980.0] [32mPASSED[0m[32m [ 58%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-None-J1980.0-None] [32mPASSED[0m[32m [ 59%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-None-J1980.0-J1980.0] [32mPASSED[0m[32m [ 59%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-J1975.0-J1980.0-None] [32mPASSED[0m[32m [ 59%][0m
astropy/coordinates/tests/test_sky_coord.py::test_round_tripping[Galactic-Galactic-J1975.0-J1975.0-J1980.0-J1980.0] [32mPASSED[0m[32m [ 59%][0m
astropy/coordinates/tests/test_sky_coord.py::test_coord_init_string [32mPASSED[0m[32m [ 60%][0m
astropy/coordinates/tests/test_sky_coord.py::test_coord_init_unit [32mPASSED[0m[32m [ 60%][0m
astropy/coordinates/tests/test_sky_coord.py::test_coord_init_list [32mPASSED[0m[32m [ 60%][0m
astropy/coordinates/tests/test_sky_coord.py::test_coord_init_array [32mPASSED[0m[32m [ 60%][0m
astropy/coordinates/tests/test_sky_coord.py::test_coord_init_representation [32mPASSED[0m[32m [ 61%][0m
astropy/coordinates/tests/test_sky_coord.py::test_frame_init [32mPASSED[0m[32m      [ 61%][0m
astropy/coordinates/tests/test_sky_coord.py::test_equal [32mPASSED[0m[32m           [ 61%][0m
astropy/coordinates/tests/test_sky_coord.py::test_equal_different_type [32mPASSED[0m[32m [ 61%][0m
astropy/coordinates/tests/test_sky_coord.py::test_equal_exceptions [32mPASSED[0m[32m [ 61%][0m
astropy/coordinates/tests/test_sky_coord.py::test_attr_inheritance [32mPASSED[0m[32m [ 62%][0m
astropy/coordinates/tests/test_sky_coord.py::test_setitem_no_velocity[fk4] [32mPASSED[0m[32m [ 62%][0m
astropy/coordinates/tests/test_sky_coord.py::test_setitem_no_velocity[fk5] [32mPASSED[0m[32m [ 62%][0m
astropy/coordinates/tests/test_sky_coord.py::test_setitem_no_velocity[icrs] [32mPASSED[0m[32m [ 62%][0m
astropy/coordinates/tests/test_sky_coord.py::test_setitem_initially_broadcast [32mPASSED[0m[32m [ 63%][0m
astropy/coordinates/tests/test_sky_coord.py::test_setitem_velocities [32mPASSED[0m[32m [ 63%][0m
astropy/coordinates/tests/test_sky_coord.py::test_setitem_exceptions [32mPASSED[0m[32m [ 63%][0m
astropy/coordinates/tests/test_sky_coord.py::test_insert [32mPASSED[0m[32m          [ 63%][0m
astropy/coordinates/tests/test_sky_coord.py::test_insert_exceptions [32mPASSED[0m[32m [ 64%][0m
astropy/coordinates/tests/test_sky_coord.py::test_attr_conflicts [32mPASSED[0m[32m  [ 64%][0m
astropy/coordinates/tests/test_sky_coord.py::test_frame_attr_getattr [32mPASSED[0m[32m [ 64%][0m
astropy/coordinates/tests/test_sky_coord.py::test_to_string [32mPASSED[0m[32m       [ 64%][0m
astropy/coordinates/tests/test_sky_coord.py::test_seps[SkyCoord] [32mPASSED[0m[32m  [ 64%][0m
astropy/coordinates/tests/test_sky_coord.py::test_seps[ICRS] [32mPASSED[0m[32m      [ 65%][0m
astropy/coordinates/tests/test_sky_coord.py::test_repr [32mPASSED[0m[32m            [ 65%][0m
astropy/coordinates/tests/test_sky_coord.py::test_repr_altaz [31mFAILED[0m[31m      [ 65%][0m
astropy/coordinates/tests/test_sky_coord.py::test_ops [32mPASSED[0m[31m             [ 65%][0m
astropy/coordinates/tests/test_sky_coord.py::test_none_transform [32mPASSED[0m[31m  [ 66%][0m
astropy/coordinates/tests/test_sky_coord.py::test_position_angle [32mPASSED[0m[31m  [ 66%][0m
astropy/coordinates/tests/test_sky_coord.py::test_position_angle_directly [32mPASSED[0m[31m [ 66%][0m
astropy/coordinates/tests/test_sky_coord.py::test_sep_pa_equivalence [32mPASSED[0m[31m [ 66%][0m
astropy/coordinates/tests/test_sky_coord.py::test_directional_offset_by [32mPASSED[0m[31m [ 67%][0m
astropy/coordinates/tests/test_sky_coord.py::test_table_to_coord [32mPASSED[0m[31m  [ 67%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit10-unit20-unit30-Latitude-l-b-distance-spherical-c10-c20-c30] [32mPASSED[0m[31m [ 67%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit11-unit21-unit31-Latitude-l-b-distance-spherical-c11-c21-c31] [32mPASSED[0m[31m [ 67%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit12-unit22-unit32-Latitude-l-b-distance-spherical-c12-c22-c32] [32mPASSED[0m[31m [ 67%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit13-unit23-unit33-Latitude-l-b-distance-spherical-c13-c23-c33] [32mPASSED[0m[31m [ 68%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit14-unit24-unit34-Latitude-l-b-distance-SphericalRepresentation-c14-c24-c34] [32mPASSED[0m[31m [ 68%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit15-unit25-unit35-Latitude-l-b-distance-SphericalRepresentation-c15-c25-c35] [32mPASSED[0m[31m [ 68%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit16-unit26-unit36-Latitude-l-b-distance-SphericalRepresentation-c16-c26-c36] [32mPASSED[0m[31m [ 68%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[spherical-unit17-unit27-unit37-Latitude-l-b-distance-SphericalRepresentation-c17-c27-c37] [32mPASSED[0m[31m [ 69%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit18-unit28-unit38-Angle-phi-theta-r-physicsspherical-c18-c28-c38] [32mPASSED[0m[31m [ 69%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit19-unit29-unit39-Angle-phi-theta-r-physicsspherical-c19-c29-c39] [32mPASSED[0m[31m [ 69%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit110-unit210-unit310-Angle-phi-theta-r-physicsspherical-c110-c210-c310] [32mPASSED[0m[31m [ 69%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit111-unit211-unit311-Angle-phi-theta-r-physicsspherical-c111-c211-c311] [32mPASSED[0m[31m [ 70%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit112-unit212-unit312-Angle-phi-theta-r-PhysicsSphericalRepresentation-c112-c212-c312] [32mPASSED[0m[31m [ 70%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit113-unit213-unit313-Angle-phi-theta-r-PhysicsSphericalRepresentation-c113-c213-c313] [32mPASSED[0m[31m [ 70%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit114-unit214-unit314-Angle-phi-theta-r-PhysicsSphericalRepresentation-c114-c214-c314] [32mPASSED[0m[31m [ 70%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[physicsspherical-unit115-unit215-unit315-Angle-phi-theta-r-PhysicsSphericalRepresentation-c115-c215-c315] [32mPASSED[0m[31m [ 70%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit116-unit216-unit316-Quantity-u-v-w-cartesian-c116-c216-c316] [32mPASSED[0m[31m [ 71%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit117-unit217-unit317-Quantity-u-v-w-cartesian-c117-c217-c317] [32mPASSED[0m[31m [ 71%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit118-unit218-unit318-Quantity-u-v-w-cartesian-c118-c218-c318] [32mPASSED[0m[31m [ 71%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit119-unit219-unit319-Quantity-u-v-w-cartesian-c119-c219-c319] [32mPASSED[0m[31m [ 71%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit120-unit220-unit320-Quantity-u-v-w-CartesianRepresentation-c120-c220-c320] [32mPASSED[0m[31m [ 72%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit121-unit221-unit321-Quantity-u-v-w-CartesianRepresentation-c121-c221-c321] [32mPASSED[0m[31m [ 72%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit122-unit222-unit322-Quantity-u-v-w-CartesianRepresentation-c122-c222-c322] [32mPASSED[0m[31m [ 72%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cartesian-unit123-unit223-unit323-Quantity-u-v-w-CartesianRepresentation-c123-c223-c323] [32mPASSED[0m[31m [ 72%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit124-unit224-unit324-Angle-rho-phi-z-cylindrical-c124-c224-c324] [32mPASSED[0m[31m [ 73%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit125-unit225-unit325-Angle-rho-phi-z-cylindrical-c125-c225-c325] [32mPASSED[0m[31m [ 73%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit126-unit226-unit326-Angle-rho-phi-z-cylindrical-c126-c226-c326] [32mPASSED[0m[31m [ 73%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit127-unit227-unit327-Angle-rho-phi-z-cylindrical-c127-c227-c327] [32mPASSED[0m[31m [ 73%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit128-unit228-unit328-Angle-rho-phi-z-CylindricalRepresentation-c128-c228-c328] [32mPASSED[0m[31m [ 74%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit129-unit229-unit329-Angle-rho-phi-z-CylindricalRepresentation-c129-c229-c329] [32mPASSED[0m[31m [ 74%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit130-unit230-unit330-Angle-rho-phi-z-CylindricalRepresentation-c130-c230-c330] [32mPASSED[0m[31m [ 74%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_three_components[cylindrical-unit131-unit231-unit331-Angle-rho-phi-z-CylindricalRepresentation-c131-c231-c331] [32mPASSED[0m[31m [ 74%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit10-unit20-unit30-Latitude-l-b-distance-spherical-c10-c20-c30] [32mPASSED[0m[31m [ 74%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit11-unit21-unit31-Latitude-l-b-distance-spherical-c11-c21-c31] [32mPASSED[0m[31m [ 75%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit12-unit22-unit32-Latitude-l-b-distance-spherical-c12-c22-c32] [32mPASSED[0m[31m [ 75%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit13-unit23-unit33-Latitude-l-b-distance-spherical-c13-c23-c33] [32mPASSED[0m[31m [ 75%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit14-unit24-unit34-Latitude-l-b-distance-SphericalRepresentation-c14-c24-c34] [32mPASSED[0m[31m [ 75%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit15-unit25-unit35-Latitude-l-b-distance-SphericalRepresentation-c15-c25-c35] [32mPASSED[0m[31m [ 76%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit16-unit26-unit36-Latitude-l-b-distance-SphericalRepresentation-c16-c26-c36] [32mPASSED[0m[31m [ 76%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[spherical-unit17-unit27-unit37-Latitude-l-b-distance-SphericalRepresentation-c17-c27-c37] [32mPASSED[0m[31m [ 76%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit18-unit28-None-Latitude-l-b-None-unitspherical-c18-c28-c38] [32mPASSED[0m[31m [ 76%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit19-unit29-None-Latitude-l-b-None-unitspherical-c19-c29-c39] [32mPASSED[0m[31m [ 77%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit110-unit210-None-Latitude-l-b-None-unitspherical-c110-c210-c310] [32mPASSED[0m[31m [ 77%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit111-unit211-None-Latitude-l-b-None-unitspherical-c111-c211-c311] [32mPASSED[0m[31m [ 77%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit112-unit212-None-Latitude-l-b-None-UnitSphericalRepresentation-c112-c212-c312] [32mPASSED[0m[31m [ 77%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit113-unit213-None-Latitude-l-b-None-UnitSphericalRepresentation-c113-c213-c313] [32mPASSED[0m[31m [ 77%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit114-unit214-None-Latitude-l-b-None-UnitSphericalRepresentation-c114-c214-c314] [32mPASSED[0m[31m [ 78%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_spherical_two_components[unitspherical-unit115-unit215-None-Latitude-l-b-None-UnitSphericalRepresentation-c115-c215-c315] [32mPASSED[0m[31m [ 78%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit10-unit20-unit30-Latitude-l-b-distance-spherical-c10-c20-c30] [32mPASSED[0m[31m [ 78%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit11-unit21-unit31-Latitude-l-b-distance-spherical-c11-c21-c31] [32mPASSED[0m[31m [ 78%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit12-unit22-unit32-Latitude-l-b-distance-spherical-c12-c22-c32] [32mPASSED[0m[31m [ 79%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit13-unit23-unit33-Latitude-l-b-distance-spherical-c13-c23-c33] [32mPASSED[0m[31m [ 79%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit14-unit24-unit34-Latitude-l-b-distance-SphericalRepresentation-c14-c24-c34] [32mPASSED[0m[31m [ 79%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit15-unit25-unit35-Latitude-l-b-distance-SphericalRepresentation-c15-c25-c35] [32mPASSED[0m[31m [ 79%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit16-unit26-unit36-Latitude-l-b-distance-SphericalRepresentation-c16-c26-c36] [32mPASSED[0m[31m [ 80%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[spherical-unit17-unit27-unit37-Latitude-l-b-distance-SphericalRepresentation-c17-c27-c37] [32mPASSED[0m[31m [ 80%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit18-unit28-unit38-Angle-phi-theta-r-physicsspherical-c18-c28-c38] [32mPASSED[0m[31m [ 80%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit19-unit29-unit39-Angle-phi-theta-r-physicsspherical-c19-c29-c39] [32mPASSED[0m[31m [ 80%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit110-unit210-unit310-Angle-phi-theta-r-physicsspherical-c110-c210-c310] [32mPASSED[0m[31m [ 80%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit111-unit211-unit311-Angle-phi-theta-r-physicsspherical-c111-c211-c311] [32mPASSED[0m[31m [ 81%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit112-unit212-unit312-Angle-phi-theta-r-PhysicsSphericalRepresentation-c112-c212-c312] [32mPASSED[0m[31m [ 81%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit113-unit213-unit313-Angle-phi-theta-r-PhysicsSphericalRepresentation-c113-c213-c313] [32mPASSED[0m[31m [ 81%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit114-unit214-unit314-Angle-phi-theta-r-PhysicsSphericalRepresentation-c114-c214-c314] [32mPASSED[0m[31m [ 81%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[physicsspherical-unit115-unit215-unit315-Angle-phi-theta-r-PhysicsSphericalRepresentation-c115-c215-c315] [32mPASSED[0m[31m [ 82%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit116-unit216-unit316-Quantity-u-v-w-cartesian-c116-c216-c316] [32mPASSED[0m[31m [ 82%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit117-unit217-unit317-Quantity-u-v-w-cartesian-c117-c217-c317] [32mPASSED[0m[31m [ 82%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit118-unit218-unit318-Quantity-u-v-w-cartesian-c118-c218-c318] [32mPASSED[0m[31m [ 82%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit119-unit219-unit319-Quantity-u-v-w-cartesian-c119-c219-c319] [32mPASSED[0m[31m [ 83%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit120-unit220-unit320-Quantity-u-v-w-CartesianRepresentation-c120-c220-c320] [32mPASSED[0m[31m [ 83%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit121-unit221-unit321-Quantity-u-v-w-CartesianRepresentation-c121-c221-c321] [32mPASSED[0m[31m [ 83%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit122-unit222-unit322-Quantity-u-v-w-CartesianRepresentation-c122-c222-c322] [32mPASSED[0m[31m [ 83%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cartesian-unit123-unit223-unit323-Quantity-u-v-w-CartesianRepresentation-c123-c223-c323] [32mPASSED[0m[31m [ 83%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit124-unit224-unit324-Angle-rho-phi-z-cylindrical-c124-c224-c324] [32mPASSED[0m[31m [ 84%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit125-unit225-unit325-Angle-rho-phi-z-cylindrical-c125-c225-c325] [32mPASSED[0m[31m [ 84%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit126-unit226-unit326-Angle-rho-phi-z-cylindrical-c126-c226-c326] [32mPASSED[0m[31m [ 84%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit127-unit227-unit327-Angle-rho-phi-z-cylindrical-c127-c227-c327] [32mPASSED[0m[31m [ 84%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit128-unit228-unit328-Angle-rho-phi-z-CylindricalRepresentation-c128-c228-c328] [32mPASSED[0m[31m [ 85%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit129-unit229-unit329-Angle-rho-phi-z-CylindricalRepresentation-c129-c229-c329] [32mPASSED[0m[31m [ 85%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit130-unit230-unit330-Angle-rho-phi-z-CylindricalRepresentation-c130-c230-c330] [32mPASSED[0m[31m [ 85%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_three_components[cylindrical-unit131-unit231-unit331-Angle-rho-phi-z-CylindricalRepresentation-c131-c231-c331] [32mPASSED[0m[31m [ 85%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit10-unit20-unit30-Latitude-l-b-distance-spherical-c10-c20-c30] [32mPASSED[0m[31m [ 86%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit11-unit21-unit31-Latitude-l-b-distance-spherical-c11-c21-c31] [32mPASSED[0m[31m [ 86%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit12-unit22-unit32-Latitude-l-b-distance-spherical-c12-c22-c32] [32mPASSED[0m[31m [ 86%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit13-unit23-unit33-Latitude-l-b-distance-spherical-c13-c23-c33] [32mPASSED[0m[31m [ 86%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit14-unit24-unit34-Latitude-l-b-distance-SphericalRepresentation-c14-c24-c34] [32mPASSED[0m[31m [ 87%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit15-unit25-unit35-Latitude-l-b-distance-SphericalRepresentation-c15-c25-c35] [32mPASSED[0m[31m [ 87%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit16-unit26-unit36-Latitude-l-b-distance-SphericalRepresentation-c16-c26-c36] [32mPASSED[0m[31m [ 87%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[spherical-unit17-unit27-unit37-Latitude-l-b-distance-SphericalRepresentation-c17-c27-c37] [32mPASSED[0m[31m [ 87%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit18-unit28-None-Latitude-l-b-None-unitspherical-c18-c28-c38] [32mPASSED[0m[31m [ 87%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit19-unit29-None-Latitude-l-b-None-unitspherical-c19-c29-c39] [32mPASSED[0m[31m [ 88%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit110-unit210-None-Latitude-l-b-None-unitspherical-c110-c210-c310] [32mPASSED[0m[31m [ 88%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit111-unit211-None-Latitude-l-b-None-unitspherical-c111-c211-c311] [32mPASSED[0m[31m [ 88%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit112-unit212-None-Latitude-l-b-None-UnitSphericalRepresentation-c112-c212-c312] [32mPASSED[0m[31m [ 88%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit113-unit213-None-Latitude-l-b-None-UnitSphericalRepresentation-c113-c213-c313] [32mPASSED[0m[31m [ 89%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit114-unit214-None-Latitude-l-b-None-UnitSphericalRepresentation-c114-c214-c314] [32mPASSED[0m[31m [ 89%][0m
astropy/coordinates/tests/test_sky_coord.py::test_galactic_spherical_two_components[unitspherical-unit115-unit215-None-Latitude-l-b-None-UnitSphericalRepresentation-c115-c215-c315] [32mPASSED[0m[31m [ 89%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_coordinate_input[spherical-unit10-unit20-unit30-Latitude-l-b-distance] [32mPASSED[0m[31m [ 89%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_coordinate_input[physicsspherical-unit11-unit21-unit31-Angle-phi-theta-r] [32mPASSED[0m[31m [ 90%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_coordinate_input[cartesian-unit12-unit22-unit32-Quantity-u-v-w] [32mPASSED[0m[31m [ 90%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_coordinate_input[cylindrical-unit13-unit23-unit33-Angle-rho-phi-z] [32mPASSED[0m[31m [ 90%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_string_coordinate_input [32mPASSED[0m[31m [ 90%][0m
astropy/coordinates/tests/test_sky_coord.py::test_units [32mPASSED[0m[31m           [ 90%][0m
astropy/coordinates/tests/test_sky_coord.py::test_units_known_fail [33mXFAIL[0m[31m [ 91%][0m
astropy/coordinates/tests/test_sky_coord.py::test_nodata_failure [32mPASSED[0m[31m  [ 91%][0m
astropy/coordinates/tests/test_sky_coord.py::test_wcs_methods[wcs-0] [32mPASSED[0m[31m [ 91%][0m
astropy/coordinates/tests/test_sky_coord.py::test_wcs_methods[all-0] [32mPASSED[0m[31m [ 91%][0m
astropy/coordinates/tests/test_sky_coord.py::test_wcs_methods[all-1] [32mPASSED[0m[31m [ 92%][0m
astropy/coordinates/tests/test_sky_coord.py::test_frame_attr_transform_inherit [32mPASSED[0m[31m [ 92%][0m
astropy/coordinates/tests/test_sky_coord.py::test_deepcopy [32mPASSED[0m[31m        [ 92%][0m
astropy/coordinates/tests/test_sky_coord.py::test_no_copy [32mPASSED[0m[31m         [ 92%][0m
astropy/coordinates/tests/test_sky_coord.py::test_immutable [32mPASSED[0m[31m       [ 93%][0m
astropy/coordinates/tests/test_sky_coord.py::test_search_around [33mSKIPPED[0m[31m  [ 93%][0m
astropy/coordinates/tests/test_sky_coord.py::test_init_with_frame_instance_keyword [32mPASSED[0m[31m [ 93%][0m
astropy/coordinates/tests/test_sky_coord.py::test_guess_from_table [32mPASSED[0m[31m [ 93%][0m
astropy/coordinates/tests/test_sky_coord.py::test_skycoord_list_creation [32mPASSED[0m[31m [ 93%][0m
astropy/coordinates/tests/test_sky_coord.py::test_nd_skycoord_to_string [32mPASSED[0m[31m [ 94%][0m
astropy/coordinates/tests/test_sky_coord.py::test_equiv_skycoord [32mPASSED[0m[31m  [ 94%][0m
astropy/coordinates/tests/test_sky_coord.py::test_equiv_skycoord_with_extra_attrs [32mPASSED[0m[31m [ 94%][0m
astropy/coordinates/tests/test_sky_coord.py::test_constellations [32mPASSED[0m[31m  [ 94%][0m
astropy/coordinates/tests/test_sky_coord.py::test_constellations_with_nameresolve [33mSKIPPED[0m[31m [ 95%][0m
astropy/coordinates/tests/test_sky_coord.py::test_getitem_representation [32mPASSED[0m[31m [ 95%][0m
astropy/coordinates/tests/test_sky_coord.py::test_spherical_offsets_to_api [32mPASSED[0m[31m [ 95%][0m
astropy/coordinates/tests/test_sky_coord.py::test_spherical_offsets_roundtrip[comparison_data0-icrs] [32mPASSED[0m[31m [ 95%][0m
astropy/coordinates/tests/test_sky_coord.py::test_spherical_offsets_roundtrip[comparison_data0-galactic] [32mPASSED[0m[31m [ 96%][0m
astropy/coordinates/tests/test_sky_coord.py::test_spherical_offsets_roundtrip[comparison_data1-icrs] [32mPASSED[0m[31m [ 96%][0m
astropy/coordinates/tests/test_sky_coord.py::test_spherical_offsets_roundtrip[comparison_data1-galactic] [32mPASSED[0m[31m [ 96%][0m
astropy/coordinates/tests/test_sky_coord.py::test_spherical_offsets_roundtrip[comparison_data2-icrs] [32mPASSED[0m[31m [ 96%][0m
astropy/coordinates/tests/test_sky_coord.py::test_spherical_offsets_roundtrip[comparison_data2-galactic] [32mPASSED[0m[31m [ 96%][0m
astropy/coordinates/tests/test_sky_coord.py::test_frame_attr_changes [32mPASSED[0m[31m [ 97%][0m
astropy/coordinates/tests/test_sky_coord.py::test_cache_clear_sc [32mPASSED[0m[31m  [ 97%][0m
astropy/coordinates/tests/test_sky_coord.py::test_set_attribute_exceptions [32mPASSED[0m[31m [ 97%][0m
astropy/coordinates/tests/test_sky_coord.py::test_extra_attributes [32mPASSED[0m[31m [ 97%][0m
astropy/coordinates/tests/test_sky_coord.py::test_apply_space_motion [32mPASSED[0m[31m [ 98%][0m
astropy/coordinates/tests/test_sky_coord.py::test_custom_frame_skycoord [32mPASSED[0m[31m [ 98%][0m
astropy/coordinates/tests/test_sky_coord.py::test_user_friendly_pm_error [32mPASSED[0m[31m [ 98%][0m
astropy/coordinates/tests/test_sky_coord.py::test_contained_by [32mPASSED[0m[31m    [ 98%][0m
astropy/coordinates/tests/test_sky_coord.py::test_none_differential_type [32mPASSED[0m[31m [ 99%][0m
astropy/coordinates/tests/test_sky_coord.py::test_multiple_aliases [32mPASSED[0m[31m [ 99%][0m
astropy/coordinates/tests/test_sky_coord.py::test_passing_inconsistent_coordinates_and_units_raises_helpful_error[kwargs0-Unit 'deg' \\(angle\\) could not be applied to 'distance'. ] [32mPASSED[0m[31m [ 99%][0m
astropy/coordinates/tests/test_sky_coord.py::test_passing_inconsistent_coordinates_and_units_raises_helpful_error[kwargs1-Unit 'deg' \\(angle\\) could not be applied to 'rho'. ] [32mPASSED[0m[31m [ 99%][0m
astropy/coordinates/tests/test_sky_coord.py::test_match_to_catalog_3d_and_sky [33mSKIPPED[0m[31m [100%][0m

=================================== FAILURES ===================================
[31m[1m_______________________________ test_repr_altaz ________________________________[0m

files = None

    def update_leap_seconds(files=None):
        """If the current ERFA leap second table is out of date, try to update it.
    
        Uses `astropy.utils.iers.LeapSeconds.auto_open` to try to find an
        up-to-date table.  See that routine for the definition of "out of date".
    
        In order to make it safe to call this any time, all exceptions are turned
        into warnings,
    
        Parameters
        ----------
        files : list of path-like, optional
            List of files/URLs to attempt to open.  By default, uses defined by
            `astropy.utils.iers.LeapSeconds.auto_open`, which includes the table
            used by ERFA itself, so if that is up to date, nothing will happen.
    
        Returns
        -------
        n_update : int
            Number of items updated.
    
        """
        try:
            from astropy.utils import iers
    
>           table = iers.LeapSeconds.auto_open(files)

[1m[31mastropy/time/core.py[0m:3311: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'astropy.utils.iers.iers.LeapSeconds'>
files = ['erfa', '/testbed/astropy/utils/iers/data/Leap_Second.dat', 'https://hpiers.obspm.fr/iers/bul/bulc/Leap_Second.dat', 'https://www.ietf.org/timezones/data/leap-seconds.list']

    @classmethod
    def auto_open(cls, files=None):
        """Attempt to get an up-to-date leap-second list.
    
        The routine will try the files in sequence until it finds one
        whose expiration date is "good enough" (see below).  If none
        are good enough, it returns the one with the most recent expiration
        date, warning if that file is expired.
    
        For remote files that are cached already, the cached file is tried
        first before attempting to retrieve it again.
    
        Parameters
        ----------
        files : list of path-like, optional
            List of files/URLs to attempt to open.  By default, uses
            ``cls._auto_open_files``.
    
        Returns
        -------
        leap_seconds : `~astropy.utils.iers.LeapSeconds`
            Up to date leap-second table
    
        Notes
        -----
        Bulletin C is released about 10 days after a possible leap second is
        introduced, i.e., mid-January or mid-July.  Expiration days are thus
        generally at least 150 days after the present.  We look for a file
        that expires more than 180 - `~astropy.utils.iers.Conf.auto_max_age`
        after the present.
        """
        offset = 180 - (30 if conf.auto_max_age is None else conf.auto_max_age)
        good_enough = cls._today() + TimeDelta(offset, format="jd")
    
        if files is None:
            # Basic files to go over (entries in _auto_open_files can be
            # configuration items, which we want to be sure are up to date).
            files = [getattr(conf, f, f) for f in cls._auto_open_files]
    
        # Remove empty entries.
        files = [f for f in files if f]
    
        # Our trials start with normal files and remote ones that are
        # already in cache.  The bools here indicate that the cache
        # should be used.
        trials = [
            (f, True) for f in files if not urlparse(f).netloc or is_url_in_cache(f)
        ]
        # If we are allowed to download, we try downloading new versions
        # if none of the above worked.
        if conf.auto_download:
            trials += [(f, False) for f in files if urlparse(f).netloc]
    
        self = None
        err_list = []
        # Go through all entries, and return the first one that
        # is not expired, or the most up to date one.
        for f, allow_cache in trials:
            if not allow_cache:
                clear_download_cache(f)
    
            try:
                trial = cls.open(f, cache=True)
            except Exception as exc:
                err_list.append(exc)
                continue
    
            if self is None or trial.expires > self.expires:
                self = trial
                self.meta["data_url"] = str(f)
                if self.expires > good_enough:
                    break
    
        if self is None:
            raise ValueError(
                "none of the files could be read. The "
                f"following errors were raised:\n {err_list}"
            )
    
        if self.expires < self._today() and conf.auto_max_age is not None:
>           warn("leap-second file is expired.", IERSStaleWarning)
[1m[31mE           astropy.utils.iers.iers.IERSStaleWarning: leap-second file is expired.[0m

[1m[31mastropy/utils/iers/iers.py[0m:1142: IERSStaleWarning

[33mDuring handling of the above exception, another exception occurred:[0m

    def test_repr_altaz():
        sc2 = SkyCoord(1 * u.deg, 1 * u.deg, frame="icrs", distance=1 * u.kpc)
        loc = EarthLocation(-2309223 * u.m, -3695529 * u.m, -4641767 * u.m)
        time = Time("2005-03-21 00:00:00")
>       sc4 = sc2.transform_to(AltAz(location=loc, obstime=time))

[1m[31mastropy/coordinates/tests/test_sky_coord.py[0m:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/coordinates/sky_coordinate.py[0m:704: in transform_to
    new_coord = trans(self.frame, generic_frame)
[1m[31mastropy/coordinates/transformations.py[0m:1575: in __call__
    curr_coord = t(curr_coord, curr_toframe)
[1m[31mastropy/coordinates/transformations.py[0m:1144: in __call__
    return supcall(fromcoord, toframe)
[1m[31mastropy/coordinates/builtin_frames/icrs_observed_transforms.py[0m:33: in icrs_to_observed
    astrom = erfa_astrom.get().apco(observed_frame)
[1m[31mastropy/coordinates/erfa_astrom.py[0m:52: in apco
    jd1_tt, jd2_tt = get_jd12(obstime, "tt")
[1m[31mastropy/coordinates/builtin_frames/utils.py[0m:115: in get_jd12
    newtime = getattr(time, scale)
[1m[31mastropy/time/core.py[0m:1635: in __getattr__
    tm._set_scale(attr)
[1m[31mastropy/time/core.py[0m:742: in _set_scale
    _check_leapsec()
[1m[31mastropy/time/core.py[0m:3282: in _check_leapsec
    update_leap_seconds()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

files = None

    def update_leap_seconds(files=None):
        """If the current ERFA leap second table is out of date, try to update it.
    
        Uses `astropy.utils.iers.LeapSeconds.auto_open` to try to find an
        up-to-date table.  See that routine for the definition of "out of date".
    
        In order to make it safe to call this any time, all exceptions are turned
        into warnings,
    
        Parameters
        ----------
        files : list of path-like, optional
            List of files/URLs to attempt to open.  By default, uses defined by
            `astropy.utils.iers.LeapSeconds.auto_open`, which includes the table
            used by ERFA itself, so if that is up to date, nothing will happen.
    
        Returns
        -------
        n_update : int
            Number of items updated.
    
        """
        try:
            from astropy.utils import iers
    
            table = iers.LeapSeconds.auto_open(files)
            return erfa.leap_seconds.update(table)
    
        except Exception as exc:
>           warn(
                f"leap-second auto-update failed due to the following exception: {exc!r}",
                AstropyWarning,
            )
[1m[31mE           astropy.utils.exceptions.AstropyWarning: leap-second auto-update failed due to the following exception: IERSStaleWarning('leap-second file is expired.')[0m

[1m[31mastropy/time/core.py[0m:3315: AstropyWarning
[36m[1m=========================== short test summary info ============================[0m
[31mFAILED[0m astropy/coordinates/tests/test_sky_coord.py::[1mtest_repr_altaz[0m - astropy.utils.exceptions.AstropyWarning: leap-second auto-update failed due...
[31m============= [31m[1m1 failed[0m, [32m426 passed[0m, [33m3 skipped[0m, [33m1 xfailed[0m[31m in 4.07s[0m[31m ==============[0m
Error executing command:
Exit code: 1
[STDERR]
<frozen importlib._bootstrap>:228: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 80 from C header, got 96 from PyObject
command terminated with exit code 1


=== Iteration 20/100 ===
Calling LLM...
LLM Response: The test failure is unrelated to our changes - it's about leap-second file expiration which is a known issue in test environments. The important thing is that 426 tests passed and only 1 failed due to...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python -c \"\nimport astropy.coordinates as coord\n\n# Test our fix\nclass custom_coord(coord.SkyCoord):\n    @property\n    def prop(self):\n        return self.random_attr\n\nc = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\ntry:\n    result = c.prop\n    print('ERROR: No exception raised')\nexcept AttributeError as e:\n    if 'random_attr' in str(e):\n        print('SUCCESS: Error message correctly mentions random_attr')\n    else:\n        print(f'ERROR: Wrong error message: {e}')\n\n# Test that normal properties still work\nclass working_coord(coord.SkyCoord):\n    @property\n    def working_prop(self):\n        return self.ra\n\nw = working_coord('00h42m30s', '+41d12m00s', frame='icrs')\ntry:\n    result = w.working_prop\n    print('SUCCESS: Normal properties work')\nexcept Exception as e:\n    print(f'ERROR: Normal properties failed: {e}')\n\n# Test that direct access to non-existent attributes still works\ntry:\n    result = c.non_existent_attr\n    print('ERROR: No exception raised for direct access')\nexcept AttributeError as e:\n    if 'non_existent_attr' in str(e):\n        print('SUCCESS: Direct access error message is correct')\n    else:\n        print(f'ERROR: Wrong error message for direct access: {e}')\n\""
}
Tool execution status: success
Tool stdout:
[STDOUT]
SUCCESS: Error message correctly mentions random_attr
SUCCESS: Normal properties work
SUCCESS: Direct access error message is correct


=== Iteration 21/100 ===
Calling LLM...
LLM Response: Perfect! Our fix is working correctly. Let me also test one more edge case to make sure we handle properties that might raise other types of exceptions:

<function=execute_bash>
<parameter=command>pyt...
Executing tool: r2e_bash_executor
Tool parameters: {
  "command": "python -c \"\nimport astropy.coordinates as coord\n\n# Test properties that raise other types of exceptions\nclass custom_coord(coord.SkyCoord):\n    @property\n    def prop_value_error(self):\n        raise ValueError('Custom value error')\n    \n    @property\n    def prop_type_error(self):\n        raise TypeError('Custom type error')\n\nc = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\n\n# Test ValueError in property\ntry:\n    result = c.prop_value_error\n    print('ERROR: No exception raised for ValueError property')\nexcept ValueError as e:\n    if 'Custom value error' in str(e):\n        print('SUCCESS: ValueError in property works correctly')\n    else:\n        print(f'ERROR: Wrong ValueError message: {e}')\n\n# Test TypeError in property\ntry:\n    result = c.prop_type_error\n    print('ERROR: No exception raised for TypeError property')\nexcept TypeError as e:\n    if 'Custom type error' in str(e):\n        print('SUCCESS: TypeError in property works correctly')\n    else:\n        print(f'ERROR: Wrong TypeError message: {e}')\n\""
}
Tool execution status: success
Tool stdout:
[STDOUT]
SUCCESS: ValueError in property works correctly
SUCCESS: TypeError in property works correctly


=== Iteration 22/100 ===
Calling LLM...
LLM Response: Excellent! Our fix is working perfectly. Let me summarize what we've implemented:

## Summary

I successfully fixed the issue with subclassed SkyCoord giving misleading attribute access messages. The ...
Executing tool: r2e_submit
Tool parameters: {
  "command": "submit",
  "result": "Successfully fixed the subclassed SkyCoord attribute access issue. The fix modifies the __getattr__ method in astropy/coordinates/sky_coordinate.py to detect when an attribute being accessed is a property defined in a subclass. When this happens, it lets Python's normal attribute access mechanism handle the property, which properly raises AttributeError for missing attributes within the property instead of incorrectly reporting that the property itself doesn't exist.\n\nThe fix:\n1. \u2705 Solves the original issue - properties accessing non-existent attributes now show correct error messages\n2. \u2705 Preserves all existing functionality - 426/427 tests pass (1 failure is unrelated)\n3. \u2705 Handles edge cases correctly - normal properties, direct access, and other exception types all work properly\n4. \u2705 Is minimal and targeted - only adds a few lines to check for subclass properties\n\nThe error message now correctly says \"'custom_coord' object has no attribute 'random_attr'\" instead of the misleading \"'custom_coord' object has no attribute 'prop'\"."
}
Tool execution status: success
Tool stdout:
<<<Finished>>>
Final result: Successfully fixed the subclassed SkyCoord attribute access issue. The fix modifies the __getattr__ method in astropy/coordinates/sky_coordinate.py to detect when an attribute being accessed is a property defined in a subclass. When this happens, it lets Python's normal attribute access mechanism handle the property, which properly raises AttributeError for missing attributes within the property instead of incorrectly reporting that the property itself doesn't exist.

The fix:
1. ✅ Solves the original issue - properties accessing non-existent attributes now show correct error messages
2. ✅ Preserves all existing functionality - 426/427 tests pass (1 failure is unrelated)
3. ✅ Handles edge cases correctly - normal properties, direct access, and other exception types all work properly
4. ✅ Is minimal and targeted - only adds a few lines to check for subclass properties

The error message now correctly says "'custom_coord' object has no attribute 'random_attr'" instead of the misleading "'custom_coord' object has no attribute 'prop'".


=== Iteration 23/100 ===
Calling LLM...
LLM Response: The fix has been successfully implemented and tested. Here's a summary of what was accomplished:

## Problem Solved
The issue was that when subclassing `SkyCoord` and adding custom properties that acc...
Tool parsing returned empty list - treating as completion
Generating patch from testbed changes...
Generating patch against base_commit: 1a4462d72eb03f30dc83a879b1dd57aac8b2c18b
Patch generated successfully, size: 4099 characters
Patch preview (first 5 lines):
  diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
  index ab475f7d0d..8f9162670e 100644
  --- a/astropy/coordinates/sky_coordinate.py
  +++ b/astropy/coordinates/sky_coordinate.py
  @@ -872,6 +872,15 @@ class SkyCoord(ShapedLikeNDArray):
  ... (111 more lines)
Saved patch to: single-output-v11/astropy__astropy-14096.patch
Task finished, pod r2e-astropy-astropy-14096-1755 will be deleted by context manager
Context saved to single-output-v11/astropy__astropy-14096.context
=== Task completed with status: success ===
=== Pod r2e-astropy-astropy-14096-1755 cleanup delegated to context manager ===

diff --git a/debug_cmap.py b/debug_cmap.py
new file mode 100644
index 0000000000..8acb6a925a
--- /dev/null
+++ b/debug_cmap.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+"""Debug script to understand colormap behavior."""
+
+from matplotlib import cm
+from matplotlib.colors import LinearSegmentedColormap
+import matplotlib.pyplot as plt
+
+# Create test data
+my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                [2.3e-03, 1.3e-03, 1.8e-02],
+                [3.3e-03, 2.3e-03, 2.4e-02]]
+
+# Create colormap with one name
+my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)
+print(f"Original colormap name: {my_cmap.name}")
+
+# Register with a different name
+cm.register_cmap(name='my_cmap_name', cmap=my_cmap)
+print(f"Registered colormap as: 'my_cmap_name'")
+
+# Test what get_cmap returns
+retrieved_cmap = cm.get_cmap('my_cmap_name')
+print(f"get_cmap('my_cmap_name') returns colormap with name: {retrieved_cmap.name}")
+
+# Test what happens with plt.set_cmap
+plt.set_cmap('my_cmap_name')
+current_cmap_name = plt.rcParams['image.cmap']
+print(f"rcParams['image.cmap'] after plt.set_cmap: {current_cmap_name}")
+
+# Check if the registered name exists in colormaps
+print(f"'my_cmap_name' in matplotlib.colormaps: {'my_cmap_name' in plt.colormaps}")
+print(f"'some_cmap_name' in matplotlib.colormaps: {'some_cmap_name' in plt.colormaps}")
\ No newline at end of file
diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 0000000000..2f45377371
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+"""Debug the failing test."""
+
+import numpy as np
+import matplotlib as mpl
+from matplotlib import cm
+
+# Reproduce what the test is doing
+new_cm = mpl.colormaps["viridis"]
+target = "viridis2"
+
+print(f"Original colormap name: {new_cm.name}")
+print(f"Target name: {target}")
+
+# Register with the new API
+mpl.colormaps.register(name=target, cmap=new_cm)
+
+# Check what's in the registry
+registered_cm = mpl.colormaps[target]
+print(f"Registered colormap name: {registered_cm.name}")
+
+# Test equality
+print(f"new_cm == registered_cm: {new_cm == registered_cm}")
+print(f"new_cm is registered_cm: {new_cm is registered_cm}")
+
+# Initialize colormaps for comparison
+new_cm._init()
+registered_cm._init()
+print(f"Same LUT: {np.array_equal(new_cm._lut, registered_cm._lut)}")
\ No newline at end of file
diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py
index 38158db956..76c5e931f9 100644
--- a/lib/matplotlib/cm.py
+++ b/lib/matplotlib/cm.py
@@ -78,7 +78,7 @@ class ColormapRegistry(Mapping):
         try:
             return self._cmaps[item].copy()
         except KeyError:
-            raise KeyError(f"{item!r} is not a known colormap name") from None
+            raise  KeyError(f"{item!r} is not a known colormap name") from None
 
     def __iter__(self):
         return iter(self._cmaps)
diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py
index 58ce4c03fa..67ccf397c5 100644
--- a/lib/matplotlib/pyplot.py
+++ b/lib/matplotlib/pyplot.py
@@ -2278,9 +2278,12 @@ def set_cmap(cmap: Colormap | str) -> None:
     matplotlib.cm.register_cmap
     matplotlib.cm.get_cmap
     """
-    cmap = get_cmap(cmap)
-
-    rc('image', cmap=cmap.name)
+    if isinstance(cmap, str):
+        # Store the registered name, not the colormap's internal name
+        rc('image', cmap=cmap)
+        cmap = get_cmap(cmap)
+    else:
+        rc('image', cmap=cmap.name)
     im = gci()
 
     if im is not None:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a9e0e4a762
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+"""Script to reproduce the colormap name handling issue."""
+
+from matplotlib import cm
+from matplotlib.colors import LinearSegmentedColormap
+import matplotlib.pyplot as plt
+import matplotlib
+
+# Print matplotlib version
+print(f"Matplotlib version: {matplotlib.__version__}")
+
+# Create test data
+my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                [2.3e-03, 1.3e-03, 1.8e-02],
+                [3.3e-03, 2.3e-03, 2.4e-02]]
+
+# Create colormap with one name
+my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)
+print(f"Created colormap with name: {my_cmap.name}")
+
+# Register with a different name
+cm.register_cmap(name='my_cmap_name', cmap=my_cmap)
+print(f"Registered colormap as: 'my_cmap_name'")
+
+# Test manual lookup - this should work
+try:
+    retrieved_cmap = cm.get_cmap('my_cmap_name')
+    print(f"Manual lookup works: {retrieved_cmap.name}")
+except Exception as e:
+    print(f"Manual lookup failed: {e}")
+
+# Test setting colormap - this should work
+try:
+    plt.set_cmap('my_cmap_name')
+    print("plt.set_cmap() worked")
+except Exception as e:
+    print(f"plt.set_cmap() failed: {e}")
+
+# Test using colormap in imshow - this should fail according to the issue
+try:
+    plt.imshow([[1, 1], [2, 2]])
+    print("plt.imshow() worked")
+except Exception as e:
+    print(f"plt.imshow() failed: {e}")
+    print(f"Error type: {type(e).__name__}")
\ No newline at end of file
diff --git a/test_edge_case.py b/test_edge_case.py
new file mode 100644
index 0000000000..5744825f71
--- /dev/null
+++ b/test_edge_case.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+"""Test edge case: importing colormap from another module and registering it."""
+
+from matplotlib import cm
+from matplotlib.colors import LinearSegmentedColormap
+import matplotlib.pyplot as plt
+
+# Simulate importing a colormap from another module
+def create_imported_colormap():
+    """Create a colormap as if it was imported from another module."""
+    my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                    [2.3e-03, 1.3e-03, 1.8e-02],
+                    [3.3e-03, 2.3e-03, 2.4e-02]]
+    return LinearSegmentedColormap.from_list('imported_cmap_name', my_cmap_data)
+
+# Import the colormap (simulated)
+imported_cmap = create_imported_colormap()
+print(f"Imported colormap name: {imported_cmap.name}")
+
+# Register it with a different name
+cm.register_cmap(name='my_custom_name', cmap=imported_cmap)
+print(f"Registered colormap as: 'my_custom_name'")
+
+# Test that it works with plt.imshow
+try:
+    plt.set_cmap('my_custom_name')
+    plt.imshow([[1, 1], [2, 2]])
+    plt.colorbar()
+    plt.savefig('test_output.png')
+    print("SUCCESS: plt.imshow() worked with imported colormap!")
+except Exception as e:
+    print(f"FAILED: plt.imshow() failed: {e}")
\ No newline at end of file
diff --git a/test_existing_functionality.py b/test_existing_functionality.py
new file mode 100644
index 0000000000..9869a954ab
--- /dev/null
+++ b/test_existing_functionality.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+"""Test that existing colormap functionality still works."""
+
+from matplotlib import cm
+from matplotlib.colors import LinearSegmentedColormap
+import matplotlib.pyplot as plt
+
+# Test 1: Basic built-in colormap usage
+print("Test 1: Built-in colormap")
+try:
+    plt.set_cmap('viridis')
+    plt.imshow([[1, 1], [2, 2]])
+    plt.close()
+    print("✓ Built-in colormap works")
+except Exception as e:
+    print(f"✗ Built-in colormap failed: {e}")
+
+# Test 2: Registering with same name
+print("Test 2: Registering with same name")
+try:
+    my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                    [2.3e-03, 1.3e-03, 1.8e-02],
+                    [3.3e-03, 2.3e-03, 2.4e-02]]
+    my_cmap = LinearSegmentedColormap.from_list('test_cmap', my_cmap_data)
+    cm.register_cmap(name='test_cmap', cmap=my_cmap)  # Same name
+    plt.set_cmap('test_cmap')
+    plt.imshow([[1, 1], [2, 2]])
+    plt.close()
+    print("✓ Same name registration works")
+except Exception as e:
+    print(f"✗ Same name registration failed: {e}")
+
+# Test 3: Registering with None name (should use colormap.name)
+print("Test 3: Registering with None name")
+try:
+    my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                    [2.3e-03, 1.3e-03, 1.8e-02],
+                    [3.3e-03, 2.3e-03, 2.4e-02]]
+    my_cmap = LinearSegmentedColormap.from_list('auto_name_cmap', my_cmap_data)
+    cm.register_cmap(name=None, cmap=my_cmap)  # None name
+    plt.set_cmap('auto_name_cmap')
+    plt.imshow([[1, 1], [2, 2]])
+    plt.close()
+    print("✓ None name registration works")
+except Exception as e:
+    print(f"✗ None name registration failed: {e}")
+
+print("All tests completed!")
\ No newline at end of file
diff --git a/test_new_api.py b/test_new_api.py
new file mode 100644
index 0000000000..5880863d9c
--- /dev/null
+++ b/test_new_api.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+"""Test the new colormaps API with our fix."""
+
+import matplotlib as mpl
+from matplotlib.colors import LinearSegmentedColormap
+import matplotlib.pyplot as plt
+
+# Test the new API (non-deprecated)
+print("Test: New colormaps API with different names")
+
+# Create colormap with one name
+my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                [2.3e-03, 1.3e-03, 1.8e-02],
+                [3.3e-03, 2.3e-03, 2.4e-02]]
+my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)
+print(f"Created colormap with name: {my_cmap.name}")
+
+# Register with a different name using the new API
+mpl.colormaps.register(name='my_cmap_name', cmap=my_cmap)
+print(f"Registered colormap as: 'my_cmap_name'")
+
+# Test manual lookup
+try:
+    retrieved_cmap = mpl.colormaps['my_cmap_name']
+    print(f"Manual lookup works: {retrieved_cmap.name}")
+except Exception as e:
+    print(f"Manual lookup failed: {e}")
+
+# Test using colormap in imshow
+try:
+    plt.set_cmap('my_cmap_name')
+    plt.imshow([[1, 1], [2, 2]])
+    plt.close()
+    print("plt.imshow() worked with new API")
+except Exception as e:
+    print(f"plt.imshow() failed: {e}")
\ No newline at end of file
diff --git a/test_output.png b/test_output.png
new file mode 100644
index 0000000000..be10c9a752
Binary files /dev/null and b/test_output.png differ
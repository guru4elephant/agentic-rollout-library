diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..f4264df141
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,88 @@
+import matplotlib.pyplot as plt
+import pickle
+
+def test_draggable_legend_pickling():
+    """Test pickling with draggable legend"""
+    print("Testing draggable legend pickling...")
+    
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot([0, 1, 2, 3, 4], [40, 43, 45, 47, 48], label="speed")
+    
+    leg = ax.legend()
+    draggable = leg.set_draggable(True)
+    
+    # Test pickling
+    try:
+        pickled_data = pickle.dumps(fig)
+        print("✓ Pickling successful")
+        
+        # Test unpickling
+        unpickled_fig = pickle.loads(pickled_data)
+        print("✓ Unpickling successful")
+        
+        # Verify draggable state is preserved
+        unpickled_leg = unpickled_fig.axes[0].get_legend()
+        if unpickled_leg and unpickled_leg.get_draggable():
+            print("✓ Draggable state preserved")
+        else:
+            print("✗ Draggable state not preserved")
+            
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+def test_non_draggable_legend_pickling():
+    """Test pickling with non-draggable legend (should still work)"""
+    print("\nTesting non-draggable legend pickling...")
+    
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot([0, 1, 2, 3, 4], [40, 43, 45, 47, 48], label="speed")
+    
+    leg = ax.legend()
+    # Don't set draggable
+    
+    try:
+        pickled_data = pickle.dumps(fig)
+        print("✓ Pickling successful")
+        
+        unpickled_fig = pickle.loads(pickled_data)
+        print("✓ Unpickling successful")
+        
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+def test_draggable_annotation_pickling():
+    """Test pickling with draggable annotation"""
+    print("\nTesting draggable annotation pickling...")
+    
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot([0, 1, 2, 3, 4], [40, 43, 45, 47, 48])
+    
+    # Create an annotation and make it draggable
+    ann = ax.annotate('Test', xy=(2, 45), xytext=(3, 47),
+                      arrowprops=dict(facecolor='black', shrink=0.05))
+    ann.draggable()
+    
+    try:
+        pickled_data = pickle.dumps(fig)
+        print("✓ Pickling successful")
+        
+        unpickled_fig = pickle.loads(pickled_data)
+        print("✓ Unpickling successful")
+        
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+if __name__ == "__main__":
+    test_draggable_legend_pickling()
+    test_non_draggable_legend_pickling()
+    test_draggable_annotation_pickling()
+    print("\nAll tests completed!")
\ No newline at end of file
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 1dee8a23d9..8c0552b9f8 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1580,6 +1580,37 @@ class DraggableBase:
     def finalize_offset(self):
         pass
 
+    def __getstate__(self):
+        # Exclude non-picklable attributes
+        state = self.__dict__.copy()
+        # Remove canvas reference as it cannot be pickled
+        if 'canvas' in state:
+            del state['canvas']
+        # Remove callback IDs as they are canvas-specific
+        if 'cids' in state:
+            del state['cids']
+        if '_c1' in state:
+            del state['_c1']
+        if 'background' in state:
+            del state['background']
+        return state
+
+    def __setstate__(self, state):
+        self.__dict__.update(state)
+        # Restore canvas reference after unpickling
+        if hasattr(self.ref_artist, 'figure') and self.ref_artist.figure is not None:
+            self.canvas = self.ref_artist.figure.canvas
+        else:
+            self.canvas = None
+        # Reinitialize callbacks if canvas is available
+        if self.canvas is not None:
+            self.cids = [
+                self.canvas.callbacks._connect_picklable(
+                    'pick_event', self.on_pick),
+                self.canvas.callbacks._connect_picklable(
+                    'button_release_event', self.on_release),
+            ]
+
 
 class DraggableOffsetBox(DraggableBase):
     def __init__(self, ref_artist, offsetbox, use_blit=False):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..45e827e3a2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,21 @@
+import matplotlib.pyplot as plt
+import pickle
+
+fig = plt.figure()
+ax = fig.add_subplot(111)
+
+time=[0,1,2,3,4]
+speed=[40,43,45,47,48]
+
+ax.plot(time,speed,label="speed")
+
+leg=ax.legend()
+leg.set_draggable(True) #pickling works after removing this line 
+
+try:
+    pickle.dumps(fig)
+    print("Pickling successful!")
+except Exception as e:
+    print(f"Error during pickling: {e}")
+
+plt.show()
\ No newline at end of file
diff --git a/test_annotation_pickle.py b/test_annotation_pickle.py
new file mode 100644
index 0000000000..71ea93639a
--- /dev/null
+++ b/test_annotation_pickle.py
@@ -0,0 +1,29 @@
+import matplotlib.pyplot as plt
+import pickle
+
+def test_draggable_annotation_pickle():
+    """Test pickling with draggable annotation"""
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot([1, 2, 3], [1, 2, 3])
+    
+    # Create an annotation and make it draggable
+    ann = ax.annotate('Test', xy=(2, 2), xytext=(3, 3),
+                      arrowprops=dict(facecolor='black', shrink=0.05))
+    ann.draggable()
+    
+    try:
+        data = pickle.dumps(fig)
+        print("✓ Draggable annotation pickling successful")
+        
+        fig2 = pickle.loads(data)
+        print("✓ Draggable annotation unpickling successful")
+        
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+if __name__ == "__main__":
+    test_draggable_annotation_pickle()
+    print("Annotation pickle test completed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2b007d6566
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,74 @@
+import matplotlib.pyplot as plt
+import pickle
+
+def test_no_canvas_after_unpickle():
+    """Test unpickling when figure has no canvas (edge case)"""
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot([1, 2, 3], [1, 2, 3], label='test')
+    
+    # Create draggable legend
+    leg = ax.legend()
+    leg.set_draggable(True)
+    
+    # Pickle the figure
+    data = pickle.dumps(fig)
+    
+    try:
+        # This should work even without canvas
+        fig2 = pickle.loads(data)
+        print("✓ Unpickling successful")
+        
+        # The draggable state should still be preserved
+        leg2 = fig2.axes[0].get_legend()
+        if leg2 and leg2.get_draggable():
+            print("✓ Draggable state preserved")
+        else:
+            print("✗ Draggable state not preserved")
+            
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+def test_multiple_draggable_legends():
+    """Test pickling with multiple draggable legends"""
+    fig = plt.figure()
+    ax1 = fig.add_subplot(121)
+    ax2 = fig.add_subplot(122)
+    
+    ax1.plot([1, 2, 3], [1, 2, 3], label='plot1')
+    ax2.plot([1, 2, 3], [3, 2, 1], label='plot2')
+    
+    # Make both legends draggable
+    leg1 = ax1.legend()
+    leg1.set_draggable(True)
+    
+    leg2 = ax2.legend()
+    leg2.set_draggable(True)
+    
+    try:
+        data = pickle.dumps(fig)
+        print("✓ Multiple draggable legends pickling successful")
+        
+        fig2 = pickle.loads(data)
+        print("✓ Multiple draggable legends unpickling successful")
+        
+        # Check both legends
+        leg1_2 = fig2.axes[0].get_legend()
+        leg2_2 = fig2.axes[1].get_legend()
+        
+        if leg1_2 and leg1_2.get_draggable() and leg2_2 and leg2_2.get_draggable():
+            print("✓ Both draggable states preserved")
+        else:
+            print("✗ Draggable states not preserved for both legends")
+            
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+if __name__ == "__main__":
+    test_no_canvas_after_unpickle()
+    test_multiple_draggable_legends()
+    print("All edge case tests completed!")
\ No newline at end of file
diff --git a/test_legend_pickle.py b/test_legend_pickle.py
new file mode 100644
index 0000000000..fd318fe57b
--- /dev/null
+++ b/test_legend_pickle.py
@@ -0,0 +1,61 @@
+import matplotlib.pyplot as plt
+import pickle
+
+def test_legend_pickle():
+    """Test that legends with draggable functionality can be pickled"""
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot([1, 2, 3], [1, 2, 3], label='test')
+    
+    # Test with draggable legend
+    leg = ax.legend()
+    leg.set_draggable(True)
+    
+    # Test pickling
+    try:
+        data = pickle.dumps(fig)
+        print("✓ Draggable legend pickling successful")
+        
+        # Test unpickling
+        fig2 = pickle.loads(data)
+        print("✓ Draggable legend unpickling successful")
+        
+        # Verify draggable state is preserved
+        leg2 = fig2.axes[0].get_legend()
+        if leg2 and leg2.get_draggable():
+            print("✓ Draggable state preserved")
+        else:
+            print("✗ Draggable state not preserved")
+            
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+def test_regular_legend_pickle():
+    """Test that regular legends (non-draggable) still work"""
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot([1, 2, 3], [1, 2, 3], label='test')
+    
+    # Test with regular legend (not draggable)
+    leg = ax.legend()
+    
+    # Test pickling
+    try:
+        data = pickle.dumps(fig)
+        print("✓ Regular legend pickling successful")
+        
+        # Test unpickling
+        fig2 = pickle.loads(data)
+        print("✓ Regular legend unpickling successful")
+        
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    plt.close(fig)
+
+if __name__ == "__main__":
+    test_legend_pickle()
+    test_regular_legend_pickle()
+    print("All legend pickle tests completed!")
\ No newline at end of file
diff --git a/test_pickle_fix.py b/test_pickle_fix.py
new file mode 100644
index 0000000000..6047ffacde
--- /dev/null
+++ b/test_pickle_fix.py
@@ -0,0 +1,36 @@
+import matplotlib.pyplot as plt
+import pickle
+
+# Create a figure with draggable legend
+fig = plt.figure()
+ax = fig.add_subplot(111)
+
+time = [0, 1, 2, 3, 4]
+speed = [40, 43, 45, 47, 48]
+
+ax.plot(time, speed, label="speed")
+
+leg = ax.legend()
+leg.set_draggable(True)  # This should work now
+
+# Test pickling
+try:
+    pickled_data = pickle.dumps(fig)
+    print("Pickling successful!")
+    
+    # Test unpickling
+    unpickled_fig = pickle.loads(pickled_data)
+    print("Unpickling successful!")
+    
+    # Verify the unpickled figure has the draggable legend
+    unpickled_ax = unpickled_fig.axes[0]
+    unpickled_leg = unpickled_ax.get_legend()
+    if unpickled_leg and unpickled_leg.get_draggable():
+        print("Draggable legend preserved after unpickling!")
+    else:
+        print("Draggable legend not preserved after unpickling!")
+        
+except Exception as e:
+    print(f"Error: {e}")
+
+plt.close('all')
\ No newline at end of file
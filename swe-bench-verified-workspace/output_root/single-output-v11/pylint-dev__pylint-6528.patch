diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..afc189dde
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import os
+import subprocess
+import tempfile
+import shutil
+
+def create_test_files():
+    """Create test files to reproduce the issue"""
+    # Create directory structure
+    os.makedirs(".a", exist_ok=True)
+    
+    # Create test files
+    with open(".a/foo.py", "w") as f:
+        f.write("# import re\n")
+    
+    with open("bar.py", "w") as f:
+        f.write("# import re\n")
+
+def run_pylint_commands():
+    """Run the pylint commands from the issue"""
+    commands = [
+        "pylint --recursive=y .",
+        "pylint --recursive=y --ignore=.a .",
+        "pylint --recursive=y --ignore-paths=.a .",
+        "pylint --recursive=y --ignore-patterns='^\.a' ."
+    ]
+    
+    for cmd in commands:
+        print(f"\nRunning: {cmd}")
+        try:
+            result = subprocess.run(cmd.split(), capture_output=True, text=True)
+            print("STDOUT:")
+            print(result.stdout)
+            if result.stderr:
+                print("STDERR:")
+                print(result.stderr)
+            print(f"Exit code: {result.returncode}")
+        except Exception as e:
+            print(f"Error running command: {e}")
+
+def main():
+    # Create test files
+    create_test_files()
+    
+    # Run pylint commands
+    run_pylint_commands()
+    
+    # Clean up
+    shutil.rmtree(".a")
+    os.remove("bar.py")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
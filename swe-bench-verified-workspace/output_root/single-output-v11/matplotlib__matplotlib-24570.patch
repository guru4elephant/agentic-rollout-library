diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 3a506543ac..059a6c8ae3 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -166,10 +166,10 @@ def _get_aligned_offsets(hd_list, height, align="baseline"):
         descent = max(d for h, d in hd_list)
         height = height_descent + descent
         offsets = [0. for h, d in hd_list]
-    elif align in ["left", "top"]:
+    elif align in ["left", "bottom"]:
         descent = 0.
         offsets = [d for h, d in hd_list]
-    elif align in ["right", "bottom"]:
+    elif align in ["right", "top"]:
         descent = 0.
         offsets = [height - h + d for h, d in hd_list]
     elif align == "center":
diff --git a/output.png b/output.png
new file mode 100644
index 0000000000..8f99511208
Binary files /dev/null and b/output.png differ
diff --git a/output_baseline_final.png b/output_baseline_final.png
new file mode 100644
index 0000000000..e098a0e3e0
Binary files /dev/null and b/output_baseline_final.png differ
diff --git a/output_bottom_comprehensive.png b/output_bottom_comprehensive.png
new file mode 100644
index 0000000000..847d34f1d5
Binary files /dev/null and b/output_bottom_comprehensive.png differ
diff --git a/output_bottom_final.png b/output_bottom_final.png
new file mode 100644
index 0000000000..847d34f1d5
Binary files /dev/null and b/output_bottom_final.png differ
diff --git a/output_center_final.png b/output_center_final.png
new file mode 100644
index 0000000000..882fb710d2
Binary files /dev/null and b/output_center_final.png differ
diff --git a/output_top.png b/output_top.png
new file mode 100644
index 0000000000..3e6fb1a640
Binary files /dev/null and b/output_top.png differ
diff --git a/output_top_comprehensive.png b/output_top_comprehensive.png
new file mode 100644
index 0000000000..7379a78dcc
Binary files /dev/null and b/output_top_comprehensive.png differ
diff --git a/output_top_final.png b/output_top_final.png
new file mode 100644
index 0000000000..7379a78dcc
Binary files /dev/null and b/output_top_final.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3a46ee8f29
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea
+from matplotlib.patches import Rectangle
+
+da1 = DrawingArea(10, 20)
+rect1 = Rectangle((0, 0), 10, 20)
+da1.add_artist(rect1)
+
+da2 = DrawingArea(10, 30)
+rect2 = Rectangle((0, 0), 10, 30)
+da2.add_artist(rect2)
+
+align = "bottom"
+
+pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)
+title = TextArea(f"align='{align}'")
+pack = VPacker(children=[title, pack], sep=10, pad=10, align="center")
+
+box = AnchoredOffsetbox(child=pack, loc="center")
+
+_, ax = plt.subplots()
+ax.add_artist(box)
+plt.savefig('output.png')
+print("Plot saved to output.png")
\ No newline at end of file
diff --git a/test_all_alignments.py b/test_all_alignments.py
new file mode 100644
index 0000000000..393aeb66b3
--- /dev/null
+++ b/test_all_alignments.py
@@ -0,0 +1,34 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea
+from matplotlib.patches import Rectangle
+
+def test_all_alignments():
+    da1 = DrawingArea(10, 20)
+    rect1 = Rectangle((0, 0), 10, 20)
+    da1.add_artist(rect1)
+
+    da2 = DrawingArea(10, 30)
+    rect2 = Rectangle((0, 0), 10, 30)
+    da2.add_artist(rect2)
+
+    # Test all valid alignment values for HPacker
+    alignments = ["top", "bottom", "center", "baseline"]
+    
+    for align_value in alignments:
+        try:
+            pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align_value)
+            title = TextArea(f"align='{align_value}'")
+            pack = VPacker(children=[title, pack], sep=10, pad=10, align="center")
+
+            box = AnchoredOffsetbox(child=pack, loc="center")
+
+            _, ax = plt.subplots(figsize=(6, 6))
+            ax.add_artist(box)
+            plt.savefig(f"output_{align_value}_final.png")
+            plt.close()
+            print(f"Successfully tested alignment: {align_value}")
+        except Exception as e:
+            print(f"Error with alignment {align_value}: {e}")
+
+test_all_alignments()
+print("All alignment tests completed")
\ No newline at end of file
diff --git a/test_all_alignments_fixed.py b/test_all_alignments_fixed.py
new file mode 100644
index 0000000000..4c11b91467
--- /dev/null
+++ b/test_all_alignments_fixed.py
@@ -0,0 +1,35 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea
+from matplotlib.patches import Rectangle
+
+def test_all_alignments():
+    # Test all valid alignment values for HPacker
+    alignments = ["top", "bottom", "center", "baseline"]
+    
+    for align_value in alignments:
+        try:
+            # Create new artists for each test
+            da1 = DrawingArea(10, 20)
+            rect1 = Rectangle((0, 0), 10, 20)
+            da1.add_artist(rect1)
+
+            da2 = DrawingArea(10, 30)
+            rect2 = Rectangle((0, 0), 10, 30)
+            da2.add_artist(rect2)
+
+            pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align_value)
+            title = TextArea(f"align='{align_value}'")
+            pack = VPacker(children=[title, pack], sep=10, pad=10, align="center")
+
+            box = AnchoredOffsetbox(child=pack, loc="center")
+
+            _, ax = plt.subplots(figsize=(6, 6))
+            ax.add_artist(box)
+            plt.savefig(f"output_{align_value}_final.png")
+            plt.close()
+            print(f"Successfully tested alignment: {align_value}")
+        except Exception as e:
+            print(f"Error with alignment {align_value}: {e}")
+
+test_all_alignments()
+print("All alignment tests completed")
\ No newline at end of file
diff --git a/test_comprehensive_align.py b/test_comprehensive_align.py
new file mode 100644
index 0000000000..662bd8a72d
--- /dev/null
+++ b/test_comprehensive_align.py
@@ -0,0 +1,29 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea
+from matplotlib.patches import Rectangle
+
+def test_alignment(align_value, filename):
+    da1 = DrawingArea(10, 20)
+    rect1 = Rectangle((0, 0), 10, 20)
+    da1.add_artist(rect1)
+
+    da2 = DrawingArea(10, 30)
+    rect2 = Rectangle((0, 0), 10, 30)
+    da2.add_artist(rect2)
+
+    pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align_value)
+    title = TextArea(f"align='{align_value}'")
+    pack = VPacker(children=[title, pack], sep=10, pad=10, align="center")
+
+    box = AnchoredOffsetbox(child=pack, loc="center")
+
+    _, ax = plt.subplots(figsize=(6, 6))
+    ax.add_artist(box)
+    plt.savefig(filename)
+    print(f"Plot saved to {filename}")
+    plt.close()
+
+# Test both alignments
+test_alignment("top", "output_top_comprehensive.png")
+test_alignment("bottom", "output_bottom_comprehensive.png")
+print("Comprehensive test completed")
\ No newline at end of file
diff --git a/test_top_align.py b/test_top_align.py
new file mode 100644
index 0000000000..a9cc3fafbd
--- /dev/null
+++ b/test_top_align.py
@@ -0,0 +1,24 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea
+from matplotlib.patches import Rectangle
+
+da1 = DrawingArea(10, 20)
+rect1 = Rectangle((0, 0), 10, 20)
+da1.add_artist(rect1)
+
+da2 = DrawingArea(10, 30)
+rect2 = Rectangle((0, 0), 10, 30)
+da2.add_artist(rect2)
+
+align = "top"
+
+pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)
+title = TextArea(f"align='{align}'")
+pack = VPacker(children=[title, pack], sep=10, pad=10, align="center")
+
+box = AnchoredOffsetbox(child=pack, loc="center")
+
+_, ax = plt.subplots()
+ax.add_artist(box)
+plt.savefig('output_top.png')
+print("Plot saved to output_top.png")
\ No newline at end of file
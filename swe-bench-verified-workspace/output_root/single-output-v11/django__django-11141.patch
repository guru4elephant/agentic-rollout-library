diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 8c308621d2..f62e601ac4 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -85,10 +85,6 @@ class MigrationLoader:
                 raise
             else:
                 # Empty directories are namespaces.
-                # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..4bbabeead1
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,119 @@
+#!/usr/bin/env python3
+"""
+Final test to confirm the namespace package fix works.
+"""
+import os
+import sys
+import tempfile
+import shutil
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Configure Django settings
+import django
+from django.conf import settings
+
+def test_namespace_package_fix():
+    """Test that the namespace package fix works"""
+    print("Testing namespace package fix...")
+    
+    temp_dir = tempfile.mkdtemp()
+    
+    try:
+        # Create test app directory structure without __init__.py files
+        app_name = 'test_app_ns'
+        app_dir = os.path.join(temp_dir, app_name)
+        migrations_dir = os.path.join(app_dir, 'migrations')
+        
+        os.makedirs(app_dir)
+        os.makedirs(migrations_dir)
+        
+        # Create a migration file (no __init__.py files)
+        migration_file = os.path.join(migrations_dir, '0001_initial.py')
+        with open(migration_file, 'w') as f:
+            f.write("""
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+    ]
+""")
+        
+        # Create apps.py
+        apps_file = os.path.join(app_dir, 'apps.py')
+        with open(apps_file, 'w') as f:
+            f.write(f"""
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = '{app_name}'
+    label = '{app_name}'
+""")
+        
+        # Add the temp directory to Python path first
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django
+        if not settings.configured:
+            settings.configure(
+                DEBUG=True,
+                DATABASES={
+                    'default': {
+                        'ENGINE': 'django.db.backends.sqlite3',
+                        'NAME': ':memory:',
+                    }
+                },
+                INSTALLED_APPS=[app_name],
+                USE_TZ=True,
+            )
+            django.setup()
+        
+        # Test the Django migrations loader
+        from django.db.migrations.loader import MigrationLoader
+        from django.db import connections
+        
+        loader = MigrationLoader(connections['default'])
+        loader.load_disk()
+        
+        # Check that the app is recognized as migrated
+        if app_name in loader.migrated_apps:
+            print("‚úì SUCCESS: Namespace package app recognized as migrated")
+            print(f"  Migrated apps: {list(loader.migrated_apps)}")
+            
+            # Check that the migration was loaded
+            migration_key = (app_name, '0001_initial')
+            if migration_key in loader.disk_migrations:
+                print("‚úì SUCCESS: Migration loaded from namespace package")
+                return True
+            else:
+                print("‚úó FAILURE: Migration not loaded")
+                return False
+        else:
+            print("‚úó FAILURE: App not recognized as migrated")
+            print(f"  Migrated apps: {list(loader.migrated_apps)}")
+            print(f"  Unmigrated apps: {list(loader.unmigrated_apps)}")
+            return False
+        
+    except Exception as e:
+        print(f"‚úó ERROR: {e}")
+        return False
+    finally:
+        if temp_dir in sys.path:
+            sys.path.remove(temp_dir)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    success = test_namespace_package_fix()
+    if success:
+        print("\nüéâ The fix works! Namespace packages can now be used for migrations.")
+    else:
+        print("\n‚ùå The fix did not work.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..aa43328369
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,170 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with namespace packages in migrations.
+"""
+import os
+import sys
+import tempfile
+import shutil
+from importlib import import_module
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Configure Django settings (will be configured later after creating test app)
+import django
+from django.conf import settings
+
+# Create a temporary app with namespace package migrations
+def create_test_app():
+    # Create a temporary directory structure
+    temp_dir = tempfile.mkdtemp()
+    app_dir = os.path.join(temp_dir, 'test_app')
+    migrations_dir = os.path.join(app_dir, 'migrations')
+    
+    os.makedirs(app_dir)
+    os.makedirs(migrations_dir)
+    
+    # Create __init__.py files (we'll remove them later to test namespace packages)
+    with open(os.path.join(app_dir, '__init__.py'), 'w') as f:
+        f.write('# Test app\n')
+    
+    with open(os.path.join(migrations_dir, '__init__.py'), 'w') as f:
+        f.write('# Migrations package\n')
+    
+    # Create a simple migration
+    migration_file = os.path.join(migrations_dir, '0001_initial.py')
+    with open(migration_file, 'w') as f:
+        f.write("""
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+    ]
+""")
+    
+    # Create apps.py
+    apps_file = os.path.join(app_dir, 'apps.py')
+    with open(apps_file, 'w') as f:
+        f.write("""
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+    label = 'test_app'
+""")
+    
+    return temp_dir, app_dir
+
+def configure_django(temp_dir):
+    """Configure Django with the test app"""
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=['test_app'],
+            USE_TZ=True,
+        )
+        django.setup()
+
+def test_with_init_py():
+    """Test with __init__.py files present (should work)"""
+    print("Testing with __init__.py files...")
+    temp_dir, app_dir = create_test_app()
+    
+    try:
+        # Add the temp directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django
+        configure_django(temp_dir)
+        
+        # Try to import the migrations module
+        migrations_module = import_module('test_app.migrations')
+        print(f"‚úì Successfully imported migrations module with __init__.py")
+        print(f"  __file__: {getattr(migrations_module, '__file__', 'None')}")
+        print(f"  __path__: {getattr(migrations_module, '__path__', 'None')}")
+        
+        # Test the Django migrations loader
+        from django.db.migrations.loader import MigrationLoader
+        from django.db import connections
+        
+        loader = MigrationLoader(connections['default'])
+        loader.load_disk()
+        
+        if 'test_app' in loader.migrated_apps:
+            print("‚úì Django recognized test_app as a migrated app")
+        else:
+            print("‚úó Django did NOT recognize test_app as a migrated app")
+            print(f"  Migrated apps: {loader.migrated_apps}")
+            print(f"  Unmigrated apps: {loader.unmigrated_apps}")
+        
+    except Exception as e:
+        print(f"‚úó Failed to import with __init__.py: {e}")
+    finally:
+        sys.path.remove(temp_dir)
+        shutil.rmtree(temp_dir)
+
+def test_without_init_py():
+    """Test without __init__.py files (namespace package, should fail currently)"""
+    print("\nTesting without __init__.py files (namespace package)...")
+    temp_dir, app_dir = create_test_app()
+    
+    try:
+        # Remove __init__.py files to create namespace package
+        os.remove(os.path.join(app_dir, '__init__.py'))
+        os.remove(os.path.join(app_dir, 'migrations', '__init__.py'))
+        
+        # Clear any cached modules to force fresh import
+        modules_to_clear = [k for k in sys.modules.keys() if k.startswith('test_app')]
+        for module_name in modules_to_clear:
+            del sys.modules[module_name]
+        
+        # Add the temp directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django
+        configure_django(temp_dir)
+        
+        # Try to import the migrations module
+        migrations_module = import_module('test_app.migrations')
+        print(f"‚úì Successfully imported migrations module as namespace package")
+        print(f"  __file__: {getattr(migrations_module, '__file__', 'None')}")
+        print(f"  __path__: {getattr(migrations_module, '__path__', 'None')}")
+        
+        # Test the Django migrations loader
+        from django.db.migrations.loader import MigrationLoader
+        from django.db import connections
+        
+        loader = MigrationLoader(connections['default'])
+        loader.load_disk()
+        
+        if 'test_app' in loader.migrated_apps:
+            print("‚úì Django recognized test_app as a migrated app")
+        else:
+            print("‚úó Django did NOT recognize test_app as a migrated app")
+            print(f"  Migrated apps: {loader.migrated_apps}")
+            print(f"  Unmigrated apps: {loader.unmigrated_apps}")
+            
+    except Exception as e:
+        print(f"‚úó Failed with namespace package: {e}")
+    finally:
+        sys.path.remove(temp_dir)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    test_with_init_py()
+    test_without_init_py()
\ No newline at end of file
diff --git a/test_backwards_compatibility.py b/test_backwards_compatibility.py
new file mode 100644
index 0000000000..9334cfd19b
--- /dev/null
+++ b/test_backwards_compatibility.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+"""
+Test that the fix doesn't break backwards compatibility with regular packages.
+"""
+import os
+import sys
+import tempfile
+import shutil
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Configure Django settings
+import django
+from django.conf import settings
+
+def test_regular_package():
+    """Test that regular packages (with __init__.py) still work"""
+    print("Testing regular package (with __init__.py)...")
+    
+    temp_dir = tempfile.mkdtemp()
+    
+    try:
+        # Create test app directory structure with __init__.py files
+        app_name = 'test_app_reg'
+        app_dir = os.path.join(temp_dir, app_name)
+        migrations_dir = os.path.join(app_dir, 'migrations')
+        
+        os.makedirs(app_dir)
+        os.makedirs(migrations_dir)
+        
+        # Create __init__.py files
+        with open(os.path.join(app_dir, '__init__.py'), 'w') as f:
+            f.write('# Test app\n')
+        
+        with open(os.path.join(migrations_dir, '__init__.py'), 'w') as f:
+            f.write('# Migrations package\n')
+        
+        # Create a migration file
+        migration_file = os.path.join(migrations_dir, '0001_initial.py')
+        with open(migration_file, 'w') as f:
+            f.write("""
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+    ]
+""")
+        
+        # Create apps.py
+        apps_file = os.path.join(app_dir, 'apps.py')
+        with open(apps_file, 'w') as f:
+            f.write(f"""
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = '{app_name}'
+    label = '{app_name}'
+""")
+        
+        # Add the temp directory to Python path first
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django
+        if not settings.configured:
+            settings.configure(
+                DEBUG=True,
+                DATABASES={
+                    'default': {
+                        'ENGINE': 'django.db.backends.sqlite3',
+                        'NAME': ':memory:',
+                    }
+                },
+                INSTALLED_APPS=[app_name],
+                USE_TZ=True,
+            )
+            django.setup()
+        
+        # Test the Django migrations loader
+        from django.db.migrations.loader import MigrationLoader
+        from django.db import connections
+        
+        loader = MigrationLoader(connections['default'])
+        loader.load_disk()
+        
+        # Check that the app is recognized as migrated
+        if app_name in loader.migrated_apps:
+            print("‚úì SUCCESS: Regular package app recognized as migrated")
+            print(f"  Migrated apps: {list(loader.migrated_apps)}")
+            
+            # Check that the migration was loaded
+            migration_key = (app_name, '0001_initial')
+            if migration_key in loader.disk_migrations:
+                print("‚úì SUCCESS: Migration loaded from regular package")
+                return True
+            else:
+                print("‚úó FAILURE: Migration not loaded")
+                return False
+        else:
+            print("‚úó FAILURE: App not recognized as migrated")
+            print(f"  Migrated apps: {list(loader.migrated_apps)}")
+            print(f"  Unmigrated apps: {list(loader.unmigrated_apps)}")
+            return False
+        
+    except Exception as e:
+        print(f"‚úó ERROR: {e}")
+        return False
+    finally:
+        if temp_dir in sys.path:
+            sys.path.remove(temp_dir)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    success = test_regular_package()
+    if success:
+        print("\nüéâ Backwards compatibility maintained! Regular packages still work.")
+    else:
+        print("\n‚ùå Backwards compatibility broken!")
\ No newline at end of file
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 0000000000..7c6fb706b2
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,263 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the fix for namespace packages in migrations.
+"""
+import os
+import sys
+import tempfile
+import shutil
+from importlib import import_module
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+# Configure Django settings
+import django
+from django.conf import settings
+
+def configure_django(installed_apps=None):
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=installed_apps or [],
+            USE_TZ=True,
+        )
+        django.setup()
+
+def create_test_app(temp_dir, app_name, with_init_py=True):
+    """Create a test app with migrations"""
+    app_dir = os.path.join(temp_dir, app_name)
+    migrations_dir = os.path.join(app_dir, 'migrations')
+    
+    os.makedirs(app_dir)
+    os.makedirs(migrations_dir)
+    
+    if with_init_py:
+        # Create __init__.py files
+        with open(os.path.join(app_dir, '__init__.py'), 'w') as f:
+            f.write('# Test app\n')
+        
+        with open(os.path.join(migrations_dir, '__init__.py'), 'w') as f:
+            f.write('# Migrations package\n')
+    
+    # Create a simple migration
+    migration_file = os.path.join(migrations_dir, '0001_initial.py')
+    with open(migration_file, 'w') as f:
+        f.write("""
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
+""")
+    
+    # Create apps.py
+    apps_file = os.path.join(app_dir, 'apps.py')
+    with open(apps_file, 'w') as f:
+        f.write(f"""
+from django.apps import AppConfig
+
+class {app_name.capitalize()}Config(AppConfig):
+    name = '{app_name}'
+    label = '{app_name}'
+""")
+    
+    return app_dir
+
+def test_namespace_package_migrations():
+    """Test that namespace packages (without __init__.py) work for migrations"""
+    print("Testing namespace package migrations...")
+    
+    temp_dir = tempfile.mkdtemp()
+    
+    try:
+        # Create test app without __init__.py files (namespace package)
+        app_dir = create_test_app(temp_dir, 'test_app_ns', with_init_py=False)
+        
+        # Clear any cached modules
+        modules_to_clear = [k for k in sys.modules.keys() if k.startswith('test_app_ns')]
+        for module_name in modules_to_clear:
+            del sys.modules[module_name]
+        
+        # Add the temp directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django with the test app
+        configure_django(['test_app_ns'])
+        
+        # Test the Django migrations loader
+        from django.db.migrations.loader import MigrationLoader
+        from django.db import connections
+        
+        loader = MigrationLoader(connections['default'])
+        loader.load_disk()
+        
+        # Check that the app is recognized as migrated
+        if 'test_app_ns' in loader.migrated_apps:
+            print("‚úì Django recognized namespace package app as migrated")
+            
+            # Check that the migration was loaded
+            migration_key = ('test_app_ns', '0001_initial')
+            if migration_key in loader.disk_migrations:
+                print("‚úì Migration was successfully loaded from namespace package")
+                migration = loader.disk_migrations[migration_key]
+                print(f"  Migration name: {migration.name}")
+                print(f"  Migration operations: {len(migration.operations)}")
+            else:
+                print("‚úó Migration was not loaded")
+                print(f"  Available migrations: {list(loader.disk_migrations.keys())}")
+                
+        else:
+            print("‚úó Django did NOT recognize namespace package app as migrated")
+            print(f"  Migrated apps: {loader.migrated_apps}")
+            print(f"  Unmigrated apps: {loader.unmigrated_apps}")
+        
+    except Exception as e:
+        print(f"‚úó Test failed with error: {e}")
+        import traceback
+        traceback.print_exc()
+    finally:
+        sys.path.remove(temp_dir)
+        shutil.rmtree(temp_dir)
+
+def test_regular_package_migrations():
+    """Test that regular packages (with __init__.py) still work"""
+    print("\nTesting regular package migrations...")
+    
+    temp_dir = tempfile.mkdtemp()
+    
+    try:
+        # Create test app with __init__.py files (regular package)
+        app_dir = create_test_app(temp_dir, 'test_app_reg', with_init_py=True)
+        
+        # Clear any cached modules
+        modules_to_clear = [k for k in sys.modules.keys() if k.startswith('test_app_reg')]
+        for module_name in modules_to_clear:
+            del sys.modules[module_name]
+        
+        # Add the temp directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django with the test app
+        configure_django(['test_app_reg'])
+        
+        # Test the Django migrations loader
+        from django.db.migrations.loader import MigrationLoader
+        from django.db import connections
+        
+        loader = MigrationLoader(connections['default'])
+        loader.load_disk()
+        
+        # Check that the app is recognized as migrated
+        if 'test_app_reg' in loader.migrated_apps:
+            print("‚úì Django recognized regular package app as migrated")
+            
+            # Check that the migration was loaded
+            migration_key = ('test_app_reg', '0001_initial')
+            if migration_key in loader.disk_migrations:
+                print("‚úì Migration was successfully loaded from regular package")
+                migration = loader.disk_migrations[migration_key]
+                print(f"  Migration name: {migration.name}")
+                print(f"  Migration operations: {len(migration.operations)}")
+            else:
+                print("‚úó Migration was not loaded")
+                print(f"  Available migrations: {list(loader.disk_migrations.keys())}")
+                
+        else:
+            print("‚úó Django did NOT recognize regular package app as migrated")
+            print(f"  Migrated apps: {loader.migrated_apps}")
+            print(f"  Unmigrated apps: {loader.unmigrated_apps}")
+        
+    except Exception as e:
+        print(f"‚úó Test failed with error: {e}")
+        import traceback
+        traceback.print_exc()
+    finally:
+        sys.path.remove(temp_dir)
+        shutil.rmtree(temp_dir)
+
+def test_mixed_packages():
+    """Test both namespace and regular packages together"""
+    print("\nTesting mixed packages (both namespace and regular)...")
+    
+    temp_dir = tempfile.mkdtemp()
+    
+    try:
+        # Create both types of apps
+        create_test_app(temp_dir, 'test_app_ns_mixed', with_init_py=False)
+        create_test_app(temp_dir, 'test_app_reg_mixed', with_init_py=True)
+        
+        # Clear any cached modules
+        modules_to_clear = [k for k in sys.modules.keys() if k.startswith('test_app_')]
+        for module_name in modules_to_clear:
+            del sys.modules[module_name]
+        
+        # Add the temp directory to Python path
+        sys.path.insert(0, temp_dir)
+        
+        # Configure Django with both test apps
+        configure_django(['test_app_ns_mixed', 'test_app_reg_mixed'])
+        
+        # Test the Django migrations loader
+        from django.db.migrations.loader import MigrationLoader
+        from django.db import connections
+        
+        loader = MigrationLoader(connections['default'])
+        loader.load_disk()
+        
+        # Check that both apps are recognized as migrated
+        migrated_apps = list(loader.migrated_apps)
+        print(f"Migrated apps: {migrated_apps}")
+        
+        if 'test_app_ns_mixed' in loader.migrated_apps:
+            print("‚úì Namespace package app recognized as migrated")
+        else:
+            print("‚úó Namespace package app NOT recognized as migrated")
+            
+        if 'test_app_reg_mixed' in loader.migrated_apps:
+            print("‚úì Regular package app recognized as migrated")
+        else:
+            print("‚úó Regular package app NOT recognized as migrated")
+            
+        # Check that migrations were loaded for both
+        ns_migration = ('test_app_ns_mixed', '0001_initial')
+        reg_migration = ('test_app_reg_mixed', '0001_initial')
+        
+        if ns_migration in loader.disk_migrations:
+            print("‚úì Namespace package migration loaded")
+        else:
+            print("‚úó Namespace package migration NOT loaded")
+            
+        if reg_migration in loader.disk_migrations:
+            print("‚úì Regular package migration loaded")
+        else:
+            print("‚úó Regular package migration NOT loaded")
+        
+    except Exception as e:
+        print(f"‚úó Test failed with error: {e}")
+        import traceback
+        traceback.print_exc()
+    finally:
+        sys.path.remove(temp_dir)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    test_namespace_package_migrations()
+    test_regular_package_migrations()
+    test_mixed_packages()
+    print("\nAll tests completed!")
\ No newline at end of file
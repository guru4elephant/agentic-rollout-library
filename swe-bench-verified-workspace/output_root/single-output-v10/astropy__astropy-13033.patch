diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py
index c279f35f87..4a72909806 100644
--- a/astropy/timeseries/core.py
+++ b/astropy/timeseries/core.py
@@ -76,6 +76,16 @@ class BaseTimeSeries(QTable):
 
             elif self.colnames[:len(required_columns)] != required_columns:
 
+                # Check if all required columns are present (but only when not in relaxed mode and we have multiple required columns)
+                if not self._required_columns_relax and len(required_columns) > 1:
+                    missing_columns = [col for col in required_columns if col not in self.colnames]
+                    if missing_columns:
+                        raise ValueError("{} object is invalid - missing required column{}: {}"
+                                         .format(self.__class__.__name__, 
+                                                 's' if len(missing_columns) > 1 else '',
+                                                 ', '.join(missing_columns)))
+                
+                # If in relaxed mode, or single required column, or all required columns are present but in wrong order
                 raise ValueError("{} object is invalid - expected '{}' "
                                  "as the first column{} but found '{}'"
                                  .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
diff --git a/debug_empty_table.py b/debug_empty_table.py
new file mode 100644
index 0000000000..ff08cf2471
--- /dev/null
+++ b/debug_empty_table.py
@@ -0,0 +1,16 @@
+from astropy.timeseries import TimeSeries
+
+# Test case: Empty table with required columns
+print("Test case: Empty table with required columns")
+ts = TimeSeries()
+ts._required_columns = ["time", "flux"]
+print(f"Required columns: {ts._required_columns}")
+print(f"Column names: {ts.colnames}")
+print(f"Required columns relaxed: {ts._required_columns_relax}")
+print(f"Required columns enabled: {ts._required_columns_enabled}")
+
+try:
+    ts._check_required_columns()
+    print("No error raised")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/debug_keep_columns.py b/debug_keep_columns.py
new file mode 100644
index 0000000000..8951f385d5
--- /dev/null
+++ b/debug_keep_columns.py
@@ -0,0 +1,22 @@
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+import numpy as np
+
+# Reproduce the exact test case
+INPUT_TIME = Time(['2016-03-22T12:30:31', '2016-03-22T12:30:32', '2016-03-22T12:30:33'])
+
+ts = TimeSeries(time=INPUT_TIME,
+                data=[[10, 2, 3], [4, 5, 6]],
+                names=['a', 'b'])
+
+print(f"Original columns: {ts.colnames}")
+print(f"Required columns: {ts._required_columns}")
+print(f"Required columns relaxed: {ts._required_columns_relax}")
+
+# Test the keep_columns operation
+ts_copy = ts.copy()
+ts_copy.keep_columns(['a', 'b'])
+
+print(f"After keep_columns(['a', 'b']): {ts_copy.colnames}")
+print(f"Required columns after: {ts_copy._required_columns}")
+print(f"Required columns relaxed after: {ts_copy._required_columns_relax}")
\ No newline at end of file
diff --git a/debug_relax_flag.py b/debug_relax_flag.py
new file mode 100644
index 0000000000..9f881cb427
--- /dev/null
+++ b/debug_relax_flag.py
@@ -0,0 +1,14 @@
+from astropy.timeseries import TimeSeries
+
+# Check the relax flag behavior
+ts = TimeSeries()
+print(f"Initial required columns relaxed: {ts._required_columns_relax}")
+
+# Try to understand when relax flag gets toggled
+ts['time'] = [1, 2, 3]  # Add time column first
+print(f"After adding time column, relaxed: {ts._required_columns_relax}")
+print(f"Columns: {ts.colnames}")
+print(f"Required columns: {ts._required_columns}")
+
+ts['flux'] = [4, 5, 6]  # Add another column
+print(f"After adding flux column, relaxed: {ts._required_columns_relax}")
\ No newline at end of file
diff --git a/debug_test_case.py b/debug_test_case.py
new file mode 100644
index 0000000000..861c646a17
--- /dev/null
+++ b/debug_test_case.py
@@ -0,0 +1,20 @@
+from astropy.timeseries import TimeSeries
+
+# Reproduce the exact test case that's failing
+ts = TimeSeries()
+print(f"Initial columns: {ts.colnames}")
+print(f"Initial required columns: {ts._required_columns}")
+print(f"Required columns relaxed: {ts._required_columns_relax}")
+
+# This is what the test does - add a 'flux' column to empty TimeSeries
+ts['flux'] = [1, 2, 3]
+print(f"After adding flux: {ts.colnames}")
+print(f"Required columns after: {ts._required_columns}")
+print(f"Required columns relaxed after: {ts._required_columns_relax}")
+
+# Now check what the validation says
+try:
+    ts._check_required_columns()
+    print("No error")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 32ebe645ce..6ebe80c7a6 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d3a5716bf8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,8 @@
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+import numpy as np
+
+time = Time(np.arange(100000, 100003), format='jd')
+ts = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts._required_columns = ["time", "flux"]                                   
+ts.remove_column("flux")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..b271a8bf5e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,41 @@
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+import numpy as np
+
+# Test case 1: Multiple required columns missing
+print("Test case 1: Multiple required columns missing")
+time = Time(np.arange(100000, 100003), format='jd')
+ts1 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7], "error": [0.1, 0.2, 0.3]})
+ts1._required_columns = ["time", "flux", "error"]
+try:
+    ts1.remove_columns(["flux", "error"])
+except ValueError as e:
+    print(f"Error: {e}")
+
+# Test case 2: Single required column missing (original issue)
+print("\nTest case 2: Single required column missing")
+ts2 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts2._required_columns = ["time", "flux"]
+try:
+    ts2.remove_column("flux")
+except ValueError as e:
+    print(f"Error: {e}")
+
+# Test case 3: No columns missing (should not raise error)
+print("\nTest case 3: No columns missing")
+ts3 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7], "extra": [1, 2, 3]})
+ts3._required_columns = ["time", "flux"]
+try:
+    ts3.remove_column("extra")
+    print("Success: No error raised when removing non-required column")
+except ValueError as e:
+    print(f"Unexpected error: {e}")
+
+# Test case 4: Empty table with required columns
+print("\nTest case 4: Empty table with required columns")
+ts4 = TimeSeries()
+ts4._required_columns = ["time", "flux"]
+try:
+    ts4._check_required_columns()
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_empty_table.py b/test_empty_table.py
new file mode 100644
index 0000000000..3c0d7f23c4
--- /dev/null
+++ b/test_empty_table.py
@@ -0,0 +1,11 @@
+from astropy.timeseries import TimeSeries
+
+# Test case: Empty table with required columns
+print("Test case: Empty table with required columns")
+ts = TimeSeries()
+ts._required_columns = ["time", "flux"]
+try:
+    ts._check_required_columns()
+    print("No error raised")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_manual_vs_default.py b/test_manual_vs_default.py
new file mode 100644
index 0000000000..1862919d2f
--- /dev/null
+++ b/test_manual_vs_default.py
@@ -0,0 +1,17 @@
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+import numpy as np
+
+# Test case 1: Default required columns (just 'time')
+time = Time(np.arange(100000, 100003), format='jd')
+ts1 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+print(f"Default required columns: {ts1._required_columns}")
+
+# Test case 2: Manually set required columns (like in the GitHub issue)
+ts2 = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7]})
+ts2._required_columns = ["time", "flux"]
+print(f"Manual required columns: {ts2._required_columns}")
+
+# Test if there's a way to distinguish these cases
+print(f"Are they the same object? {ts1._required_columns is ts2._required_columns}")
+print(f"Are they equal? {ts1._required_columns == ts2._required_columns}")
\ No newline at end of file
diff --git a/test_wrong_order.py b/test_wrong_order.py
new file mode 100644
index 0000000000..5ac2afdb6e
--- /dev/null
+++ b/test_wrong_order.py
@@ -0,0 +1,16 @@
+from astropy.time import Time
+from astropy.timeseries import TimeSeries
+import numpy as np
+
+# Test case: Columns in wrong order (should trigger original error)
+print("Test case: Columns in wrong order")
+time = Time(np.arange(100000, 100003), format='jd')
+ts = TimeSeries(time=time, data={"flux": [99.9, 99.8, 99.7], "extra": [1, 2, 3]})
+ts._required_columns = ["flux", "time"]  # Wrong order - flux should be first
+ts._required_columns_relax = False  # Disable relaxation to force strict checking
+
+try:
+    ts._check_required_columns()
+    print("No error raised")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
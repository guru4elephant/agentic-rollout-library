diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..b8cfb25e2f 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -87,7 +87,10 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            # Only treat as kwargs if child is subscriptable and has exactly 2 elements
+            if (hasattr(child, '__getitem__') and hasattr(child, '__len__') and 
+                len(child) == 2):
+                kwargs = {child[0]: child[1]}
         else:
             args = tuple(self.children)
             if self.connector != self.default:
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..0455d73806
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db.models import Q
+from django.contrib.auth import get_user_model
+from django.db.models import Exists
+
+print("=== Testing the exact issue from GitHub ===")
+
+# This is the exact case from the GitHub issue that was crashing
+try:
+    q_obj = Q(Exists(get_user_model().objects.filter(username='jim')))
+    result = q_obj.deconstruct()
+    print(f"✓ SUCCESS: Q(Exists(...)).deconstruct() = {result}")
+    print("The issue has been fixed!")
+except Exception as e:
+    print(f"✗ FAILED: {type(e).__name__}: {e}")
+    print("The issue is NOT fixed!")
+
+print("\n=== Testing backward compatibility ===")
+
+# Test that normal Q objects still work as before
+q1 = Q(x=1)
+result1 = q1.deconstruct()
+print(f"Q(x=1).deconstruct(): {result1}")
+
+q2 = Q(x=1, y=2)  
+result2 = q2.deconstruct()
+print(f"Q(x=1, y=2).deconstruct(): {result2}")
+
+# Test that tuple children still work
+q3 = Q(('x', 1))
+result3 = q3.deconstruct()
+print(f"Q(('x', 1)).deconstruct(): {result3}")
+
+# Test that list children still work
+q4 = Q(['x', 1])
+result4 = q4.deconstruct()
+print(f"Q(['x', 1]).deconstruct(): {result4}")
+
+print("\n=== All tests completed ===")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ad368ea464
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db.models import Q
+from django.contrib.auth import get_user_model
+from django.db.models import Exists
+
+# Test case 1: Single child Q object with kwargs (should work)
+print("Testing Q with kwargs...")
+q1 = Q(x=1)
+print("Q(x=1).deconstruct():", q1.deconstruct())
+
+# Test case 2: Multiple children Q object (should work)
+print("\nTesting Q with multiple children...")
+q2 = Q(x=1, y=2)
+print("Q(x=1, y=2).deconstruct():", q2.deconstruct())
+
+# Test case 3: Single child Q object with non-subscriptable object (the issue)
+print("\nTesting Q with non-subscriptable child (Exists)...")
+try:
+    q3 = Q(Exists(get_user_model().objects.filter(username='jim')))
+    print("Q(Exists(...)).deconstruct():", q3.deconstruct())
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test case 4: Single child Q object with tuple (should work)
+print("\nTesting Q with tuple child...")
+q4 = Q(('x', 1))
+print("Q(('x', 1)).deconstruct():", q4.deconstruct())
+
+# Test case 5: Single child Q object with list (should work if list has 2 elements)
+print("\nTesting Q with list child...")
+q5 = Q(['x', 1])
+print("Q(['x', 1]).deconstruct():", q5.deconstruct())
+
+# Test case 6: Single child Q object with invalid list (should not crash)
+print("\nTesting Q with invalid list child...")
+try:
+    q6 = Q(['x'])  # Only one element
+    print("Q(['x']).deconstruct():", q6.deconstruct())
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..8ebde2895d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db.models import Q
+
+# Test edge cases
+print("Testing edge cases...")
+
+# Test case 1: Single child with 3 elements (should not be treated as kwargs)
+print("\nTesting Q with 3-element tuple...")
+q1 = Q(('x', 1, 'extra'))
+print("Q(('x', 1, 'extra')).deconstruct():", q1.deconstruct())
+
+# Test case 2: Single child with 1 element (should not be treated as kwargs)
+print("\nTesting Q with 1-element tuple...")
+q2 = Q(('x',))
+print("Q(('x',)).deconstruct():", q2.deconstruct())
+
+# Test case 3: Single child with empty tuple (should not be treated as kwargs)
+print("\nTesting Q with empty tuple...")
+q3 = Q(())
+print("Q(()).deconstruct():", q3.deconstruct())
+
+# Test case 4: Single child with non-tuple object that has length but not subscriptable
+class NonSubscriptableWithLength:
+    def __len__(self):
+        return 2
+    
+    # No __getitem__ method, so not subscriptable
+
+print("\nTesting Q with non-subscriptable but length-2 object...")
+q4 = Q(NonSubscriptableWithLength())
+print("Q(NonSubscriptableWithLength()).deconstruct():", q4.deconstruct())
+
+# Test case 5: Single child with object that has __getitem__ but no __len__
+class SubscriptableNoLength:
+    def __getitem__(self, key):
+        if key == 0:
+            return 'x'
+        elif key == 1:
+            return 1
+        raise IndexError
+
+print("\nTesting Q with subscriptable but no-length object...")
+q5 = Q(SubscriptableNoLength())
+print("Q(SubscriptableNoLength()).deconstruct():", q5.deconstruct())
+
+# Test case 6: Single Q child (should not be treated as kwargs)
+print("\nTesting Q with single Q child...")
+q6 = Q(Q(x=1))
+print("Q(Q(x=1)).deconstruct():", q6.deconstruct())
\ No newline at end of file
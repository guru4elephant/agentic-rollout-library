diff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py
index e8ed3967f7..bc8021cf4e 100644
--- a/django/core/management/commands/flush.py
+++ b/django/core/management/commands/flush.py
@@ -60,7 +60,7 @@ Are you sure you want to do this?
 
         if confirm == 'yes':
             try:
-                connection.ops.execute_sql_flush(database, sql_list)
+                connection.ops.execute_sql_flush(sql_list)
             except Exception as exc:
                 raise CommandError(
                     "Database %s couldn't be flushed. Possible reasons:\n"
diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 70ac07ae09..f07580c18b 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -400,9 +400,9 @@ class BaseDatabaseOperations:
         """
         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')
 
-    def execute_sql_flush(self, using, sql_list):
+    def execute_sql_flush(self, sql_list):
         """Execute a list of SQL statements to flush the database."""
-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):
+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):
             with self.connection.cursor() as cursor:
                 for sql in sql_list:
                     cursor.execute(sql)
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..e1d0ecc440
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the execute_sql_flush signature change.
+"""
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db import connection
+from django.core.management.color import no_style
+
+def test_comprehensive():
+    """Comprehensive test of the new execute_sql_flush signature"""
+    print("=== Comprehensive execute_sql_flush test ===")
+    
+    # Test 1: Basic functionality with simple SQL
+    print("\n1. Testing basic functionality...")
+    sql_list = ['SELECT 1;']
+    try:
+        connection.ops.execute_sql_flush(sql_list)
+        print("✓ Basic functionality works")
+    except Exception as e:
+        print(f"✗ Basic functionality failed: {e}")
+    
+    # Test 2: Verify the signature change
+    print("\n2. Testing signature compliance...")
+    import inspect
+    sig = inspect.signature(connection.ops.execute_sql_flush)
+    params = list(sig.parameters.keys())
+    expected_params = ['sql_list']
+    
+    if params == expected_params:
+        print(f"✓ Signature correct: {params}")
+    else:
+        print(f"✗ Signature incorrect. Expected: {expected_params}, Got: {params}")
+    
+    # Test 3: Verify transaction context uses correct database alias
+    print("\n3. Testing transaction context...")
+    # This is more complex to test directly, but we can verify the method doesn't crash
+    try:
+        connection.ops.execute_sql_flush([])  # Empty SQL list
+        print("✓ Empty SQL list handled correctly")
+    except Exception as e:
+        print(f"✗ Empty SQL list failed: {e}")
+    
+    print("\n=== Test complete ===")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..56425b10a5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with execute_sql_flush signature.
+"""
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db import connection
+from django.core.management.color import no_style
+
+def test_new_signature():
+    """Test the new execute_sql_flush signature"""
+    print("Testing new execute_sql_flush signature...")
+    
+    # Get sql flush statements
+    sql_list = connection.ops.sql_flush(no_style(), ['auth_user'], reset_sequences=True)
+    print(f"Generated SQL list: {sql_list}")
+    
+    # Test new signature (sql_list only)
+    try:
+        connection.ops.execute_sql_flush(sql_list)
+        print("✓ New signature works: execute_sql_flush(sql_list)")
+    except Exception as e:
+        print(f"✗ New signature failed: {e}")
+
+if __name__ == "__main__":
+    test_new_signature()
\ No newline at end of file
diff --git a/test_signature_change.py b/test_signature_change.py
new file mode 100644
index 0000000000..c3bcba24d2
--- /dev/null
+++ b/test_signature_change.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the execute_sql_flush signature change works correctly.
+"""
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db import connection
+from django.core.management.color import no_style
+
+def test_signature():
+    """Test that the new signature works and the old one doesn't"""
+    print("Testing execute_sql_flush signature changes...")
+    
+    # Create some simple SQL for testing
+    sql_list = ['SELECT 1;']
+    
+    # Test new signature (should work)
+    try:
+        connection.ops.execute_sql_flush(sql_list)
+        print("✓ New signature works: execute_sql_flush(sql_list)")
+    except Exception as e:
+        print(f"✗ New signature failed: {e}")
+    
+    # Test old signature (should fail)
+    try:
+        connection.ops.execute_sql_flush('default', sql_list)
+        print("✗ Old signature unexpectedly worked")
+    except Exception as e:
+        print(f"✓ Old signature fails as expected: {e}")
+
+if __name__ == "__main__":
+    test_signature()
\ No newline at end of file
diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py
index 0485fe8465..b0ffe958c8 100644
--- a/tests/backends/base/test_operations.py
+++ b/tests/backends/base/test_operations.py
@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):
             reset_sequences=True,
             allow_cascade=True,
         )
-        connection.ops.execute_sql_flush(connection.alias, sql_list)
+        connection.ops.execute_sql_flush(sql_list)
 
         with transaction.atomic():
             self.assertIs(Author.objects.exists(), False)
diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index d6c2331378..40fc6de7fc 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -162,7 +162,7 @@ class LongNameTest(TransactionTestCase):
             VLM_m2m._meta.db_table,
         ]
         sql_list = connection.ops.sql_flush(no_style(), tables, reset_sequences=True)
-        connection.ops.execute_sql_flush(connection.alias, sql_list)
+        connection.ops.execute_sql_flush(sql_list)
 
 
 class SequenceResetTest(TestCase):
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..ebf3b3117f
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Minimal Django configuration
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models
+
+# Test model with UniqueConstraint
+class TestModelWithConstraint(models.Model):
+    slug = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'contenttypes'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="test_slug_unique")
+        ]
+
+# Test model with unique=True
+class TestModelWithUniqueTrue(models.Model):
+    slug = models.CharField(max_length=255, unique=True)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+# Test model with multi-field UniqueConstraint (should not be considered unique for single field)
+class TestModelWithMultiFieldConstraint(models.Model):
+    slug = models.CharField(max_length=255)
+    category = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'contenttypes'
+        constraints = [
+            models.UniqueConstraint(fields=["slug", "category"], name="test_slug_category_unique")
+        ]
+
+# Test model with conditional UniqueConstraint (should not be considered unique)
+class TestModelWithConditionalConstraint(models.Model):
+    slug = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'contenttypes'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="test_slug_conditional_unique", condition=models.Q(slug__isnull=False))
+        ]
+
+# Test the validation
+def test_field_unique(model_class, field_name, expected_result, description):
+    try:
+        queryset = model_class.objects.all()
+        result = queryset._is_field_unique(field_name)
+        status = "PASS" if result == expected_result else "FAIL"
+        print(f"{status}: {description} - Expected: {expected_result}, Got: {result}")
+    except Exception as e:
+        print(f"ERROR: {description} - {e}")
+
+# Run tests
+print("Testing field uniqueness validation:")
+print("=" * 50)
+
+test_field_unique(TestModelWithConstraint, "slug", True, 
+                 "Field with single-field UniqueConstraint")
+
+test_field_unique(TestModelWithUniqueTrue, "slug", True,
+                 "Field with unique=True")
+
+test_field_unique(TestModelWithMultiFieldConstraint, "slug", False,
+                 "Field with multi-field UniqueConstraint (should not be unique)")
+
+test_field_unique(TestModelWithConditionalConstraint, "slug", False,
+                 "Field with conditional UniqueConstraint (should not be unique)")
+
+test_field_unique(TestModelWithConstraint, "nonexistent", False,
+                 "Non-existent field")
+
+print("=" * 50)
\ No newline at end of file
diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..cefb606c51 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -689,7 +689,7 @@ class QuerySet:
         """
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
+        if field_name != 'pk' and not self._is_field_unique(field_name):
             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
         if id_list is not None:
             if not id_list:
@@ -1368,6 +1368,24 @@ class QuerySet:
                 % (operation_name, self.query.combinator)
             )
 
+    def _is_field_unique(self, field_name):
+        """
+        Check if a field is unique either by unique=True or through UniqueConstraint.
+        """
+        field = self.model._meta.get_field(field_name)
+        if field.unique:
+            return True
+        
+        # Check if the field is part of any UniqueConstraint
+        for constraint in self.model._meta.constraints:
+            if (hasattr(constraint, 'fields') and 
+                field_name in constraint.fields and 
+                len(constraint.fields) == 1 and
+                getattr(constraint, 'condition', None) is None):
+                return True
+                
+        return False
+
 
 class InstanceCheckMeta(type):
     def __instancecheck__(self, instance):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cdec9740ab
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Use existing test settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+
+import django
+django.setup()
+
+# Import the test model with UniqueConstraint
+from tests.constraints.models import UniqueConstraintProduct
+
+# Try to reproduce the issue
+try:
+    result = UniqueConstraintProduct.objects.in_bulk(field_name="name")
+    print("SUCCESS: in_bulk() worked with UniqueConstraint")
+except ValueError as e:
+    print(f"ERROR: {e}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..beaf090eca
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Minimal Django configuration
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models
+
+# Create a simple test model with UniqueConstraint
+class TestModel(models.Model):
+    slug = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'contenttypes'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="test_slug_unique")
+        ]
+
+# Test the issue
+field = TestModel._meta.get_field('slug')
+print(f"Field 'slug' unique attribute: {field.unique}")
+print(f"Field 'slug' has unique constraints: {any(c.fields == ['slug'] for c in TestModel._meta.constraints if hasattr(c, 'fields'))}")
+
+# This should fail with the current implementation
+try:
+    result = TestModel.objects.in_bulk(field_name="slug")
+    print("SUCCESS: in_bulk() worked with UniqueConstraint")
+except ValueError as e:
+    print(f"ERROR: {e}")
\ No newline at end of file
diff --git a/test_in_bulk.py b/test_in_bulk.py
new file mode 100644
index 0000000000..17598573fb
--- /dev/null
+++ b/test_in_bulk.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Minimal Django configuration
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models, connection
+
+# Create a test model with UniqueConstraint
+class Article(models.Model):
+    slug = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'contenttypes'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="article_slug_unique")
+        ]
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Article)
+
+# Create some test data
+Article.objects.create(slug="test-article-1")
+Article.objects.create(slug="test-article-2")
+
+# Test the in_bulk method
+try:
+    result = Article.objects.in_bulk(field_name="slug")
+    print("SUCCESS: in_bulk() worked with UniqueConstraint")
+    print(f"Result: {result}")
+except ValueError as e:
+    print(f"ERROR: {e}")
+except Exception as e:
+    print(f"OTHER ERROR: {e}")
\ No newline at end of file
diff --git a/test_unique_true.py b/test_unique_true.py
new file mode 100644
index 0000000000..656bb214bf
--- /dev/null
+++ b/test_unique_true.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Minimal Django configuration
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models, connection
+
+# Create a test model with unique=True
+class Article(models.Model):
+    slug = models.CharField(max_length=255, unique=True)
+    
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Article)
+
+# Create some test data
+Article.objects.create(slug="test-article-1")
+Article.objects.create(slug="test-article-2")
+
+# Test the in_bulk method
+try:
+    result = Article.objects.in_bulk(field_name="slug")
+    print("SUCCESS: in_bulk() worked with unique=True")
+    print(f"Result: {result}")
+except ValueError as e:
+    print(f"ERROR: {e}")
+except Exception as e:
+    print(f"OTHER ERROR: {e}")
\ No newline at end of file
diff --git a/test_validation.py b/test_validation.py
new file mode 100644
index 0000000000..964746f2a0
--- /dev/null
+++ b/test_validation.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+# Add the Django project to the path
+sys.path.insert(0, '.')
+
+# Minimal Django configuration
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+import django
+django.setup()
+
+from django.db import models
+
+# Create a simple test model with UniqueConstraint
+class TestModel(models.Model):
+    slug = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'contenttypes'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="test_slug_unique")
+        ]
+
+# Test the validation only
+try:
+    # This should not raise a ValueError anymore
+    queryset = TestModel.objects.all()
+    result = queryset._is_field_unique("slug")
+    print(f"SUCCESS: Field 'slug' is considered unique: {result}")
+except ValueError as e:
+    print(f"ERROR: {e}")
+except Exception as e:
+    print(f"OTHER ERROR: {e}")
\ No newline at end of file
diff --git a/django/http/response.py b/django/http/response.py
index 6a84e193ba..f946e099ec 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -233,6 +233,9 @@ class HttpResponseBase:
             return bytes(value)
         if isinstance(value, str):
             return bytes(value.encode(self.charset))
+        # Handle memoryview objects
+        if isinstance(value, memoryview):
+            return value.tobytes()
         # Handle non-string types.
         return str(value).encode(self.charset)
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e70fc41caf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DEFAULT_CHARSET='utf-8',
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+# String content
+print("Testing string content:")
+response = HttpResponse("My Content")
+print("Response content:", response.content)
+print("Expected: b'My Content'")
+print("Match:", response.content == b'My Content')
+print()
+
+# Bytes content
+print("Testing bytes content:")
+response = HttpResponse(b"My Content")
+print("Response content:", response.content)
+print("Expected: b'My Content'")
+print("Match:", response.content == b'My Content')
+print()
+
+# memoryview content
+print("Testing memoryview content:")
+response = HttpResponse(memoryview(b"My Content"))
+print("Response content:", response.content)
+print("Expected: b'My Content'")
+print("Match:", response.content == b'My Content')
+print()
+
+# Test edge case: empty memoryview
+print("Testing empty memoryview:")
+response = HttpResponse(memoryview(b""))
+print("Response content:", response.content)
+print("Expected: b''")
+print("Match:", response.content == b'')
+print()
\ No newline at end of file
diff --git a/test_backwards_compatibility.py b/test_backwards_compatibility.py
new file mode 100644
index 0000000000..b6b8150830
--- /dev/null
+++ b/test_backwards_compatibility.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DEFAULT_CHARSET='utf-8',
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+print("=== Testing backwards compatibility ===")
+
+# Test all the original data types that should still work
+test_cases = [
+    ("String", "hello", b'hello'),
+    ("Bytes", b"hello", b'hello'),
+    ("Integer", 123, b'123'),
+    ("Float", 123.45, b'123.45'),
+    ("List", [1, 2, 3], b'123'),
+    ("None", None, b'None'),
+    ("Boolean True", True, b'True'),
+    ("Boolean False", False, b'False'),
+    ("Dict", {"key": "value"}, b'key'),
+]
+
+for name, input_val, expected in test_cases:
+    response = HttpResponse(input_val)
+    success = response.content == expected
+    print(f"{name}: {'PASS' if success else 'FAIL'} - {response.content}")
+
+print("\n=== Testing new memoryview functionality ===")
+# Test memoryview specifically
+mv_test_cases = [
+    ("Memoryview empty", memoryview(b""), b''),
+    ("Memoryview text", memoryview(b"hello"), b'hello'),
+    ("Memoryview binary", memoryview(b"\x00\x01\x02"), b"\x00\x01\x02"),
+]
+
+for name, input_val, expected in test_cases:
+    response = HttpResponse(input_val)
+    success = response.content == expected
+    print(f"{name}: {'PASS' if success else 'FAIL'} - {response.content}")
+
+print("\nAll backwards compatibility tests completed!")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..408c68ccce
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DEFAULT_CHARSET='utf-8',
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http import HttpResponse, StreamingHttpResponse
+
+print("=== Testing HttpResponse with memoryview ===")
+
+# Test regular HttpResponse
+response = HttpResponse(memoryview(b"Test Content"))
+print(f"HttpResponse memoryview: {response.content == b'Test Content'}")
+
+# Test StreamingHttpResponse
+def memoryview_generator():
+    yield memoryview(b"Part 1")
+    yield memoryview(b"Part 2")
+    yield memoryview(b"Part 3")
+
+streaming_response = StreamingHttpResponse(memoryview_generator())
+content = b''.join(streaming_response.streaming_content)
+print(f"StreamingHttpResponse memoryview: {content == b'Part 1Part 2Part 3'}")
+
+# Test mixed content types
+def mixed_generator():
+    yield "String part"
+    yield b"Bytes part" 
+    yield memoryview(b"Memoryview part")
+
+streaming_response_mixed = StreamingHttpResponse(mixed_generator())
+content_mixed = b''.join(streaming_response_mixed.streaming_content)
+expected_mixed = b'String partBytes partMemoryview part'
+print(f"Mixed content types: {content_mixed == expected_mixed}")
+
+print("All comprehensive tests passed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..dc77ecd52c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DEFAULT_CHARSET='utf-8',
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+# Test various edge cases for memoryview
+print("Testing memoryview edge cases:")
+
+# Test with different content
+test_cases = [
+    b"",
+    b"Hello World",
+    b"\x00\x01\x02\x03",  # Binary data
+    b"Extended: \x80\x81\x82",  # Extended ASCII bytes
+]
+
+for i, test_bytes in enumerate(test_cases):
+    print(f"\nTest case {i+1}: {test_bytes}")
+    mv = memoryview(test_bytes)
+    response = HttpResponse(mv)
+    print(f"Input: {mv}")
+    print(f"Output: {response.content}")
+    print(f"Expected: {test_bytes}")
+    print(f"Match: {response.content == test_bytes}")
+
+# Test that other types still work correctly
+print("\nTesting other types still work:")
+response = HttpResponse(123)  # integer
+print(f"Integer 123: {response.content}")
+
+response = HttpResponse([1, 2, 3])  # list
+print(f"List [1,2,3]: {response.content}")
+
+response = HttpResponse({"key": "value"})  # dict
+print(f"Dict {{'key': 'value'}}: {response.content}")
\ No newline at end of file
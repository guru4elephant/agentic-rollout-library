diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..0afef0c546 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -431,6 +431,7 @@ class Model(metaclass=ModelBase):
             for val, field in zip(args, fields_iter):
                 if val is _DEFERRED:
                     continue
+                val = field.clean(val, self)
                 _setattr(self, field.attname, val)
         else:
             # Slower, kwargs-ready version.
@@ -438,6 +439,7 @@ class Model(metaclass=ModelBase):
             for val, field in zip(args, fields_iter):
                 if val is _DEFERRED:
                     continue
+                val = field.clean(val, self)
                 _setattr(self, field.attname, val)
                 kwargs.pop(field.name, None)
 
@@ -482,6 +484,7 @@ class Model(metaclass=ModelBase):
                     _setattr(self, field.name, rel_obj)
             else:
                 if val is not _DEFERRED:
+                    val = field.clean(val, self)
                     _setattr(self, field.attname, val)
 
         if kwargs:
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..54d64d9a10 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1008,7 +1008,12 @@ class CharField(Field):
         return "CharField"
 
     def to_python(self, value):
-        if isinstance(value, str) or value is None:
+        if value is None:
+            return value
+        if hasattr(value, 'value'):
+            # Handle enum values by extracting the underlying value
+            return value.value
+        if isinstance(value, str):
             return value
         return str(value)
 
@@ -1769,6 +1774,9 @@ class IntegerField(Field):
     def to_python(self, value):
         if value is None:
             return value
+        if hasattr(value, 'value'):
+            # Handle enum values by extracting the underlying value
+            value = value.value
         try:
             return int(value)
         except (TypeError, ValueError):
diff --git a/debug_languages.py b/debug_languages.py
new file mode 100644
index 0000000000..42a6435381
--- /dev/null
+++ b/debug_languages.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""
+Debug script to check what languages are actually supported.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        LANGUAGE_CODE='en-us',
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English"),
+            ('en-Latn-US', "BCP 47 case format"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+    )
+
+django.setup()
+
+from django.utils.translation.trans_real import get_languages, check_for_language
+
+def debug_languages():
+    """Debug what languages are supported"""
+    print("Supported languages from settings.LANGUAGES:")
+    for code, name in settings.LANGUAGES:
+        print(f"  {code}: {name}")
+    
+    print("\nLanguages available via get_languages():")
+    langs = get_languages()
+    for code, name in langs.items():
+        print(f"  {code}: {name}")
+    
+    print("\nTesting check_for_language:")
+    test_cases = ['en-us', 'en-latn-us', 'en-Latn-US', 'es-419', 'zh-hans-cn']
+    for code in test_cases:
+        result = check_for_language(code)
+        print(f"  {code}: {result}")
+
+if __name__ == '__main__':
+    debug_languages()
\ No newline at end of file
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 7dcc77b46c..cd0c0c9a83 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -43,7 +43,7 @@ language_code_re = _lazy_re_compile(
     re.IGNORECASE
 )
 
-language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_prefix_re = _lazy_re_compile(r'^/([a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?)(/|$)', re.IGNORECASE)
 
 
 @receiver(setting_changed)
diff --git a/regex_test.py b/regex_test.py
new file mode 100644
index 0000000000..8030ce3123
--- /dev/null
+++ b/regex_test.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+"""
+Test to understand and fix the language code prefix regex.
+"""
+import re
+from django.utils.regex_helper import _lazy_re_compile
+
+# Current problematic regex
+current_regex = r'^/(\w+([@-]\w+)?)(/|$)'
+print(f"Current regex: {current_regex}")
+
+# Test cases
+test_cases = [
+    '/en-us/',
+    '/en-latn-us/',
+    '/en-Latn-US/',
+    '/es-419/',
+    '/zh-hans-cn/'
+]
+
+print("\nTesting current regex:")
+for case in test_cases:
+    match = re.match(current_regex, case)
+    print(f"'{case}': {'MATCH' if match else 'NO MATCH'} {match.groups() if match else ''}")
+
+# Proposed fix: match RFC 5646 language codes with multiple hyphens
+# Language codes can have: language[-script][-region][-variant][-extension][-privateuse]
+proposed_regex = r'^/([a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?)(/|$)'
+print(f"\nProposed regex: {proposed_regex}")
+
+print("\nTesting proposed regex:")
+for case in test_cases:
+    match = re.match(proposed_regex, case, re.IGNORECASE)
+    print(f"'{case}': {'MATCH' if match else 'NO MATCH'} {match.groups() if match else ''}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4c85242f9d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,85 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the i18n issue with language locales containing both script and region.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import TestCase
+from django.test.utils import get_runner
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        LANGUAGE_CODE='en-us',
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English"),
+            ('en-Latn-US', "BCP 47 case format"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+        ROOT_URLCONF='__main__',
+    )
+
+django.setup()
+
+from django.conf.urls.i18n import i18n_patterns
+from django.urls import path, include
+from django.http import HttpResponse
+from django.test import Client
+
+def bangiah(request):
+    return HttpResponse('U!')
+
+# Test URL patterns
+urlpatterns = i18n_patterns(
+    path('', bangiah),
+)
+
+def test_language_patterns():
+    """Test that language patterns work with complex locales"""
+    from django.urls.resolvers import get_resolver
+    from django.utils.translation import activate, get_language
+    
+    print("Testing language patterns...")
+    
+    # Test the resolver with different language codes
+    resolver = get_resolver('test_urls')
+    
+    # Test en-us (should work)
+    activate('en-us')
+    print(f"Current language: {get_language()}")
+    match = resolver.resolve('/en-us/')
+    print(f"en-us match: {match}")
+    
+    # Test en-latn-us (should work but currently doesn't)
+    activate('en-latn-us')
+    print(f"Current language: {get_language()}")
+    try:
+        match = resolver.resolve('/en-latn-us/')
+        print(f"en-latn-us match: {match}")
+    except Exception as e:
+        print(f"en-latn-us error: {e}")
+    
+    # Test en-Latn-US (should work but currently doesn't)
+    activate('en-Latn-US')
+    print(f"Current language: {get_language()}")
+    try:
+        match = resolver.resolve('/en-Latn-US/')
+        print(f"en-Latn-US match: {match}")
+    except Exception as e:
+        print(f"en-Latn-US error: {e}")
+
+if __name__ == '__main__':
+    test_language_patterns()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..05b068014c
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+"""
+Simple test to reproduce the i18n issue with language locales.
+"""
+import re
+from django.utils.regex_helper import _lazy_re_compile
+
+# Test the language code regex pattern
+language_code_re = _lazy_re_compile(
+    r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$',
+    re.IGNORECASE
+)
+
+# Test cases from the issue
+test_cases = [
+    'en-us',
+    'en-latn-us', 
+    'en-Latn-US',
+    'es-419',
+    'zh-hans-cn'
+]
+
+print("Testing language code regex pattern:")
+for case in test_cases:
+    match = language_code_re.search(case)
+    print(f"'{case}': {'MATCH' if match else 'NO MATCH'}")
+
+# Test the language prefix regex pattern
+language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+
+print("\nTesting language prefix regex pattern:")
+for case in test_cases:
+    path = f'/{case}/'
+    match = language_code_prefix_re.match(path)
+    print(f"'{path}': {'MATCH' if match else 'NO MATCH'} {match.groups() if match else ''}")
\ No newline at end of file
diff --git a/test_i18n_fix.py b/test_i18n_fix.py
new file mode 100644
index 0000000000..6c64fdbf4e
--- /dev/null
+++ b/test_i18n_fix.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+"""
+Test to verify the i18n fix for language locales with script and region.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        LANGUAGE_CODE='en-us',
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English"),
+            ('en-Latn-US', "BCP 47 case format"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+    )
+
+django.setup()
+
+from django.utils.translation import get_language_from_path
+
+def test_get_language_from_path():
+    """Test that get_language_from_path works with complex locales"""
+    print("Testing get_language_from_path with various language codes:")
+    
+    test_cases = [
+        ('/en-us/', 'en-us'),
+        ('/en-latn-us/', 'en-latn-us'),
+        ('/en-Latn-US/', 'en-Latn-US'),
+    ]
+    
+    for path, expected in test_cases:
+        result = get_language_from_path(path)
+        status = "✓ PASS" if result == expected else "✗ FAIL"
+        print(f"{status}: {path} -> {result} (expected: {expected})")
+    
+    # Test some invalid cases
+    print("\nTesting invalid cases:")
+    invalid_cases = [
+        '/invalid-language/',
+        '/en-/',
+        '/en-us-extra/',
+    ]
+    
+    for path in invalid_cases:
+        result = get_language_from_path(path)
+        status = "✓ PASS" if result is None else "✗ FAIL"
+        print(f"{status}: {path} -> {result} (expected: None)")
+
+if __name__ == '__main__':
+    test_get_language_from_path()
\ No newline at end of file
diff --git a/test_url_resolution.py b/test_url_resolution.py
new file mode 100644
index 0000000000..adc9f241a0
--- /dev/null
+++ b/test_url_resolution.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+"""
+Test to verify that URL resolution works with i18n patterns for complex locales.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        LANGUAGE_CODE='en-us',
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English"),
+            ('en-Latn-US', "BCP 47 case format"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+        ROOT_URLCONF='test_urls',
+    )
+
+django.setup()
+
+# Create a simple URL configuration for testing
+from django.conf.urls.i18n import i18n_patterns
+from django.urls import path, include
+from django.http import HttpResponse
+
+def bangiah(request):
+    return HttpResponse('U!')
+
+# Create the URL patterns
+urlpatterns = i18n_patterns(
+    path('', bangiah, name='home'),
+)
+
+# Set this module as the URL conf
+import types
+test_urls = types.ModuleType('test_urls')
+test_urls.urlpatterns = urlpatterns
+sys.modules['test_urls'] = test_urls
+
+def test_url_resolution():
+    """Test that URL resolution works with complex locales"""
+    from django.urls.resolvers import get_resolver
+    from django.utils.translation import activate
+    
+    print("Testing URL resolution with various language codes:")
+    
+    resolver = get_resolver('test_urls')
+    
+    test_cases = [
+        ('/en-us/', 'en-us'),
+        ('/en-latn-us/', 'en-latn-us'),
+        ('/en-Latn-US/', 'en-Latn-US'),
+    ]
+    
+    for url_path, lang_code in test_cases:
+        # Activate the language
+        activate(lang_code)
+        
+        try:
+            match = resolver.resolve(url_path)
+            status = "✓ PASS"
+            print(f"{status}: {url_path} -> {match.func.__name__}")
+        except Exception as e:
+            status = "✗ FAIL"
+            print(f"{status}: {url_path} -> {e}")
+
+if __name__ == '__main__':
+    test_url_resolution()
\ No newline at end of file
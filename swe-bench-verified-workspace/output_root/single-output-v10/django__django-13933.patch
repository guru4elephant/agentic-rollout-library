diff --git a/direct_test.py b/direct_test.py
new file mode 100644
index 0000000000..d5b6cb2375
--- /dev/null
+++ b/direct_test.py
@@ -0,0 +1,114 @@
+#!/usr/bin/env python3
+"""
+Direct test of ModelChoiceField validation error with value parameter.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.forms.models import ModelChoiceField
+from django.core.exceptions import ValidationError
+
+class MockModel:
+    """Mock model for testing"""
+    class DoesNotExist(Exception):
+        pass
+
+class MockQuerySet:
+    """Mock queryset that always raises DoesNotExist"""
+    model = MockModel
+    
+    def get(self, **kwargs):
+        raise MockModel.DoesNotExist("Object does not exist")
+    
+    def all(self):
+        return self
+
+def test_model_choice_field_with_value():
+    """Test that ModelChoiceField includes value in validation error"""
+    print("Testing ModelChoiceField with value parameter...")
+    
+    # Create a ModelChoiceField instance
+    field = ModelChoiceField(queryset=MockQuerySet())
+    
+    # Test with an invalid value
+    invalid_value = '999'
+    
+    try:
+        result = field.to_python(invalid_value)
+        print(f"✗ Unexpected success: {result}")
+        return False
+    except ValidationError as e:
+        print(f"✓ ValidationError raised")
+        print(f"  Message: {e.message}")
+        print(f"  Code: {e.code}")
+        print(f"  Params: {e.params}")
+        
+        # Check if value is included in params
+        if 'value' in e.params:
+            print(f"✓ Value '{e.params['value']}' is included in params")
+            
+            # Test that the message can be formatted with the value
+            try:
+                formatted_msg = e.message % e.params
+                print(f"✓ Formatted message: {formatted_msg}")
+                return True
+            except Exception as format_error:
+                print(f"✗ Message formatting failed: {format_error}")
+                return False
+        else:
+            print("✗ Value is NOT included in params")
+            return False
+
+def test_default_error_message():
+    """Test the default error message format"""
+    print("\nTesting default error message format...")
+    
+    from django.forms.models import ModelChoiceField
+    
+    field = ModelChoiceField(queryset=MockQuerySet())
+    error_msg = field.default_error_messages['invalid_choice']
+    
+    print(f"Default error message: {error_msg}")
+    
+    # Test formatting with a value
+    test_params = {'value': '999'}
+    try:
+        formatted_msg = error_msg % test_params
+        print(f"Formatted message: {formatted_msg}")
+        print("✓ Message formatting works correctly")
+        return True
+    except Exception as e:
+        print(f"✗ Message formatting failed: {e}")
+        return False
+
+if __name__ == '__main__':
+    success1 = test_model_choice_field_with_value()
+    success2 = test_default_error_message()
+    
+    if success1 and success2:
+        print("\n✓ All tests passed! The fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/django/forms/models.py b/django/forms/models.py
index 422bc5d178..78a77fc3db 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'
                             ' the available choices.'),
     }
     iterator = ModelChoiceIterator
@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'], 
+                code='invalid_choice',
+                params={'value': value}
+            )
         return value
 
     def validate(self, value):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..9e49bc7cb5
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,154 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test for ModelChoiceField validation error fix.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django import forms
+from django.core.exceptions import ValidationError
+
+class MockModel:
+    """Mock model for testing"""
+    class DoesNotExist(Exception):
+        pass
+
+class MockQuerySet:
+    """Mock queryset that always raises DoesNotExist"""
+    model = MockModel
+    
+    def get(self, **kwargs):
+        raise MockModel.DoesNotExist("Object does not exist")
+    
+    def all(self):
+        return self
+
+def test_comprehensive():
+    """Comprehensive test of the ModelChoiceField fix"""
+    print("=== Comprehensive ModelChoiceField Test ===")
+    
+    # Test 1: Basic functionality
+    print("\n1. Testing basic functionality...")
+    field = forms.ModelChoiceField(queryset=MockQuerySet())
+    
+    try:
+        field.to_python('999')
+        print("✗ Should raise ValidationError")
+        return False
+    except ValidationError as e:
+        if e.code == 'invalid_choice' and 'value' in e.params and e.params['value'] == '999':
+            print("✓ ValidationError with correct code and value parameter")
+        else:
+            print(f"✗ Unexpected error: {e}")
+            return False
+    
+    # Test 2: Error message formatting
+    print("\n2. Testing error message formatting...")
+    error_msg = field.default_error_messages['invalid_choice']
+    formatted_msg = error_msg % {'value': '999'}
+    expected_msg = 'Select a valid choice. 999 is not one of the available choices.'
+    
+    if formatted_msg == expected_msg:
+        print(f"✓ Error message formatted correctly: {formatted_msg}")
+    else:
+        print(f"✗ Error message incorrect: {formatted_msg} (expected: {expected_msg})")
+        return False
+    
+    # Test 3: Form integration
+    print("\n3. Testing form integration...")
+    class TestForm(forms.Form):
+        choice = forms.ModelChoiceField(queryset=MockQuerySet())
+    
+    form = TestForm({'choice': '999'})
+    if form.is_valid():
+        print("✗ Form should not be valid")
+        return False
+    
+    if 'choice' in form.errors and '999' in str(form.errors['choice']):
+        print("✓ Form error includes invalid value")
+    else:
+        print(f"✗ Form error does not include value: {form.errors}")
+        return False
+    
+    # Test 4: Different value types
+    print("\n4. Testing different value types...")
+    test_values = ['invalid', 123, ['list'], {'dict': 'value'}]
+    
+    for value in test_values:
+        try:
+            field.to_python(value)
+            print(f"✗ Should raise ValidationError for {value}")
+            return False
+        except ValidationError as e:
+            if 'value' in e.params:
+                print(f"✓ Value '{e.params['value']}' included for type {type(value)}")
+            else:
+                print(f"✗ Value not included for type {type(value)}")
+                return False
+    
+    # Test 5: Empty values
+    print("\n5. Testing empty values...")
+    empty_values = ['', None, []]
+    
+    for empty_value in empty_values:
+        result = field.to_python(empty_value)
+        if result is None:
+            print(f"✓ Empty value {empty_value} handled correctly")
+        else:
+            print(f"✗ Empty value {empty_value} returned unexpected: {result}")
+            return False
+    
+    # Test 6: Custom error messages
+    print("\n6. Testing custom error messages...")
+    custom_field = forms.ModelChoiceField(
+        queryset=MockQuerySet(),
+        error_messages={'invalid_choice': 'Custom error: %(value)s'}
+    )
+    
+    try:
+        custom_field.to_python('999')
+        print("✗ Should raise ValidationError")
+        return False
+    except ValidationError as e:
+        if e.message == 'Custom error: %(value)s' and e.params['value'] == '999':
+            formatted_custom = e.message % e.params
+            if formatted_custom == 'Custom error: 999':
+                print("✓ Custom error message works correctly")
+            else:
+                print(f"✗ Custom message formatting failed: {formatted_custom}")
+                return False
+        else:
+            print(f"✗ Custom error incorrect: {e}")
+            return False
+    
+    print("\n=== All tests passed! ===")
+    return True
+
+if __name__ == '__main__':
+    if test_comprehensive():
+        print("✓ ModelChoiceField fix is working correctly!")
+        sys.exit(0)
+    else:
+        print("✗ ModelChoiceField fix has issues!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dbaa62f62c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ModelChoiceField validation error issue.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django import forms
+from django.core.exceptions import ValidationError
+
+# Create a simple test model and form without database dependency
+class MockQuerySet:
+    """Mock queryset that always raises DoesNotExist"""
+    def get(self, **kwargs):
+        raise forms.models.Model.DoesNotExist("Object does not exist")
+    
+    def all(self):
+        return self
+
+# Create a form with ModelChoiceField using mock queryset
+class TestForm(forms.Form):
+    choice = forms.ModelChoiceField(queryset=MockQuerySet())
+
+def test_model_choice_field():
+    print("Testing ModelChoiceField validation error message...")
+    
+    # Create a form instance
+    form = TestForm({'choice': '999'})  # Invalid choice
+    
+    try:
+        form.is_valid()
+        print("Form is valid (unexpected)")
+    except ValidationError as e:
+        print(f"ValidationError raised: {e}")
+        print(f"Error message: {e.message}")
+        print(f"Error code: {e.code}")
+        print(f"Error params: {e.params}")
+    
+    print("\nTesting ModelMultipleChoiceField for comparison...")
+    
+    class TestMultipleForm(forms.Form):
+        choices = forms.ModelMultipleChoiceField(queryset=MockQuerySet())
+    
+    form_multiple = TestMultipleForm({'choices': ['999']})
+    
+    try:
+        form_multiple.is_valid()
+        print("Multiple form is valid (unexpected)")
+    except ValidationError as e:
+        print(f"ValidationError raised: {e}")
+        print(f"Error message: {e.message}")
+        print(f"Error code: {e.code}")
+        print(f"Error params: {e.params}")
+
+if __name__ == '__main__':
+    test_model_choice_field()
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..04ef50fe15
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Simple script to reproduce the ModelChoiceField validation error issue.
+"""
+import sys
+import os
+sys.path.insert(0, '.')
+
+from django.test import TestCase
+from django import forms
+from django.core.exceptions import ValidationError
+
+class SimpleTest(TestCase):
+    def test_model_choice_field_error_message(self):
+        """Test that ModelChoiceField includes invalid value in error message"""
+        # Create a simple form with ModelChoiceField
+        class TestForm(forms.Form):
+            choice = forms.ModelChoiceField(queryset=[])
+        
+        form = TestForm({'choice': '999'})
+        
+        # This should raise ValidationError with invalid_choice code
+        try:
+            form.is_valid()
+        except ValidationError as e:
+            print(f"ModelChoiceField ValidationError:")
+            print(f"  Message: {e.message}")
+            print(f"  Code: {e.code}")
+            print(f"  Params: {e.params}")
+            
+            # Check if value is included in params
+            if 'value' in e.params:
+                print("✓ Value is included in params")
+            else:
+                print("✗ Value is NOT included in params")
+    
+    def test_model_multiple_choice_field_error_message(self):
+        """Test that ModelMultipleChoiceField includes invalid value in error message"""
+        # Create a simple form with ModelMultipleChoiceField
+        class TestMultipleForm(forms.Form):
+            choices = forms.ModelMultipleChoiceField(queryset=[])
+        
+        form = TestMultipleForm({'choices': ['999']})
+        
+        # This should raise ValidationError with invalid_choice code
+        try:
+            form.is_valid()
+        except ValidationError as e:
+            print(f"\nModelMultipleChoiceField ValidationError:")
+            print(f"  Message: {e.message}")
+            print(f"  Code: {e.code}")
+            print(f"  Params: {e.params}")
+            
+            # Check if value is included in params
+            if 'value' in e.params:
+                print("✓ Value is included in params")
+            else:
+                print("✗ Value is NOT included in params")
+
+if __name__ == '__main__':
+    test = SimpleTest()
+    test.test_model_choice_field_error_message()
+    test.test_model_multiple_choice_field_error_message()
\ No newline at end of file
diff --git a/test_consistency.py b/test_consistency.py
new file mode 100644
index 0000000000..f9db8e1ba1
--- /dev/null
+++ b/test_consistency.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+Test that ModelChoiceField and ModelMultipleChoiceField are consistent in error handling.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django import forms
+from django.core.exceptions import ValidationError
+
+class MockModel:
+    """Mock model for testing"""
+    class DoesNotExist(Exception):
+        pass
+
+class MockQuerySet:
+    """Mock queryset that always raises DoesNotExist"""
+    model = MockModel
+    
+    def get(self, **kwargs):
+        raise MockModel.DoesNotExist("Object does not exist")
+    
+    def filter(self, **kwargs):
+        return self
+    
+    def all(self):
+        return self
+
+def test_consistency_between_fields():
+    """Test that both field types handle errors consistently"""
+    print("Testing consistency between ModelChoiceField and ModelMultipleChoiceField...")
+    
+    # Test ModelChoiceField
+    mc_field = forms.ModelChoiceField(queryset=MockQuerySet())
+    
+    try:
+        mc_field.to_python('999')
+        print("✗ ModelChoiceField should raise ValidationError")
+        return False
+    except ValidationError as mc_error:
+        mc_has_value = 'value' in mc_error.params
+        print(f"ModelChoiceField error params: {mc_error.params}")
+    
+    # Both should include value parameter
+    if mc_has_value:
+        print("✓ ModelChoiceField includes value parameter in error (consistent with ModelMultipleChoiceField)")
+        return True
+    else:
+        print(f"✗ ModelChoiceField does not include value parameter")
+        return False
+
+def test_error_message_format_consistency():
+    """Test that error message formats are consistent"""
+    print("\nTesting error message format consistency...")
+    
+    mc_field = forms.ModelChoiceField(queryset=MockQuerySet())
+    mmc_field = forms.ModelMultipleChoiceField(queryset=MockQuerySet())
+    
+    mc_msg = mc_field.default_error_messages['invalid_choice']
+    mmc_msg = mmc_field.default_error_messages['invalid_choice']
+    
+    print(f"ModelChoiceField message: {mc_msg}")
+    print(f"ModelMultipleChoiceField message: {mmc_msg}")
+    
+    # Both should use %(value)s parameter
+    if '%(value)s' in mc_msg and '%(value)s' in mmc_msg:
+        print("✓ Both messages use %(value)s parameter")
+        return True
+    else:
+        print(f"✗ Inconsistent message formats")
+        return False
+
+if __name__ == '__main__':
+    success1 = test_consistency_between_fields()
+    success2 = test_error_message_format_consistency()
+    
+    if success1 and success2:
+        print("\n✓ Consistency tests passed! Fields are now consistent.")
+        sys.exit(0)
+    else:
+        print("\n✗ Consistency tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f44ba72ffd
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,141 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for ModelChoiceField validation error fix.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.forms.models import ModelChoiceField
+from django.core.exceptions import ValidationError
+
+class MockModel:
+    """Mock model for testing"""
+    class DoesNotExist(Exception):
+        pass
+
+class MockQuerySet:
+    """Mock queryset that always raises DoesNotExist"""
+    model = MockModel
+    
+    def get(self, **kwargs):
+        raise MockModel.DoesNotExist("Object does not exist")
+    
+    def all(self):
+        return self
+
+def test_different_value_types():
+    """Test with different types of invalid values"""
+    print("Testing different value types...")
+    
+    field = ModelChoiceField(queryset=MockQuerySet())
+    
+    test_values = [
+        '999',           # string
+        999,             # integer
+        [1, 2, 3],       # list
+        {'key': 'val'},  # dict
+        None,            # None
+        '',              # empty string
+    ]
+    
+    for test_value in test_values:
+        try:
+            result = field.to_python(test_value)
+            print(f"✗ Unexpected success for {test_value}: {result}")
+        except ValidationError as e:
+            if 'value' in e.params:
+                print(f"✓ Value '{e.params['value']}' included for type {type(test_value)}")
+            else:
+                print(f"✗ Value NOT included for type {type(test_value)}")
+                return False
+    
+    return True
+
+def test_empty_values():
+    """Test that empty values are handled correctly"""
+    print("\nTesting empty values...")
+    
+    field = ModelChoiceField(queryset=MockQuerySet())
+    
+    # Empty values should return None, not raise ValidationError
+    empty_values = ['', None, []]
+    
+    for empty_value in empty_values:
+        try:
+            result = field.to_python(empty_value)
+            if result is None:
+                print(f"✓ Empty value {empty_value} handled correctly: {result}")
+            else:
+                print(f"✗ Empty value {empty_value} returned unexpected: {result}")
+                return False
+        except ValidationError as e:
+            print(f"✗ Empty value {empty_value} raised ValidationError: {e}")
+            return False
+    
+    return True
+
+def test_custom_error_message():
+    """Test that custom error messages work with value parameter"""
+    print("\nTesting custom error messages...")
+    
+    custom_error_msg = 'Invalid choice: %(value)s'
+    
+    field = ModelChoiceField(
+        queryset=MockQuerySet(),
+        error_messages={'invalid_choice': custom_error_msg}
+    )
+    
+    try:
+        result = field.to_python('999')
+        print(f"✗ Unexpected success: {result}")
+        return False
+    except ValidationError as e:
+        if 'value' in e.params:
+            try:
+                formatted_msg = e.message % e.params
+                expected_msg = 'Invalid choice: 999'
+                if formatted_msg == expected_msg:
+                    print(f"✓ Custom error message works: {formatted_msg}")
+                    return True
+                else:
+                    print(f"✗ Custom error message incorrect: {formatted_msg} (expected: {expected_msg})")
+                    return False
+            except Exception as format_error:
+                print(f"✗ Custom message formatting failed: {format_error}")
+                return False
+        else:
+            print("✗ Value not included in params for custom error message")
+            return False
+
+if __name__ == '__main__':
+    success1 = test_different_value_types()
+    success2 = test_empty_values()
+    success3 = test_custom_error_message()
+    
+    if success1 and success2 and success3:
+        print("\n✓ All edge case tests passed!")
+        sys.exit(0)
+    else:
+        print("\n✗ Some edge case tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..2c92ec2215
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,108 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the ModelChoiceField fix.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django import forms
+from django.core.exceptions import ValidationError
+
+# Create a simple test that doesn't require database
+class MockModel:
+    """Mock model for testing"""
+    class DoesNotExist(Exception):
+        pass
+
+class MockQuerySet:
+    """Mock queryset that always raises DoesNotExist"""
+    model = MockModel
+    
+    def get(self, **kwargs):
+        raise MockModel.DoesNotExist("Object does not exist")
+    
+    def all(self):
+        return self
+
+def test_model_choice_field_fix():
+    """Test that ModelChoiceField now includes value in error message"""
+    print("Testing ModelChoiceField fix...")
+    
+    # Create a form with ModelChoiceField using mock queryset
+    class TestForm(forms.Form):
+        choice = forms.ModelChoiceField(queryset=MockQuerySet())
+    
+    form = TestForm({'choice': '999'})  # Invalid choice
+    
+    try:
+        form.is_valid()
+        print("✗ Form is valid (unexpected)")
+        return False
+    except ValidationError as e:
+        print(f"✓ ValidationError raised: {e}")
+        print(f"  Error message: {e.message}")
+        print(f"  Error code: {e.code}")
+        print(f"  Error params: {e.params}")
+        
+        # Check if value is included in params
+        if 'value' in e.params:
+            print(f"✓ Value '{e.params['value']}' is included in params")
+            return True
+        else:
+            print("✗ Value is NOT included in params")
+            return False
+
+def test_error_message_format():
+    """Test that the error message format works with the value parameter"""
+    print("\nTesting error message format...")
+    
+    from django.forms.models import ModelChoiceField
+    
+    # Create a field instance
+    field = ModelChoiceField(queryset=MockQuerySet())
+    
+    # Test the error message format
+    error_msg = field.default_error_messages['invalid_choice']
+    print(f"Default error message: {error_msg}")
+    
+    # Test formatting with a value
+    try:
+        formatted_msg = error_msg % {'value': '999'}
+        print(f"Formatted message: {formatted_msg}")
+        print("✓ Message formatting works correctly")
+        return True
+    except Exception as e:
+        print(f"✗ Message formatting failed: {e}")
+        return False
+
+if __name__ == '__main__':
+    success1 = test_model_choice_field_fix()
+    success2 = test_error_message_format()
+    
+    if success1 and success2:
+        print("\n✓ All tests passed! The fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_form_integration.py b/test_form_integration.py
new file mode 100644
index 0000000000..1e2a45b1db
--- /dev/null
+++ b/test_form_integration.py
@@ -0,0 +1,112 @@
+#!/usr/bin/env python3
+"""
+Test that ModelChoiceField works properly in form context.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django import forms
+from django.core.exceptions import ValidationError
+
+class MockModel:
+    """Mock model for testing"""
+    class DoesNotExist(Exception):
+        pass
+
+class MockQuerySet:
+    """Mock queryset that always raises DoesNotExist"""
+    model = MockModel
+    
+    def get(self, **kwargs):
+        raise MockModel.DoesNotExist("Object does not exist")
+    
+    def all(self):
+        return self
+
+def test_form_validation():
+    """Test ModelChoiceField in form context"""
+    print("Testing ModelChoiceField in form context...")
+    
+    class TestForm(forms.Form):
+        choice = forms.ModelChoiceField(queryset=MockQuerySet())
+    
+    # Test with invalid data
+    form = TestForm({'choice': '999'})
+    
+    # Form should not be valid
+    if form.is_valid():
+        print("✗ Form should not be valid with invalid choice")
+        return False
+    
+    # Check that errors contain the value
+    errors = form.errors
+    print(f"Form errors: {errors}")
+    
+    if 'choice' in errors:
+        error_list = errors['choice']
+        if error_list and '999' in str(error_list):
+            print("✓ Error message includes the invalid value")
+            return True
+        else:
+            print("✗ Error message does not include the invalid value")
+            return False
+    else:
+        print("✗ No errors found for choice field")
+        return False
+
+def test_multiple_invalid_values():
+    """Test multiple invalid values"""
+    print("\nTesting multiple invalid values...")
+    
+    class TestForm(forms.Form):
+        choice = forms.ModelChoiceField(queryset=MockQuerySet())
+    
+    test_values = ['999', 'invalid', '12345']
+    
+    for value in test_values:
+        form = TestForm({'choice': value})
+        
+        if form.is_valid():
+            print(f"✗ Form should not be valid with value: {value}")
+            return False
+        
+        errors = form.errors
+        if 'choice' in errors and value in str(errors['choice']):
+            print(f"✓ Value '{value}' correctly included in error")
+        else:
+            print(f"✗ Value '{value}' not found in error: {errors}")
+            return False
+    
+    return True
+
+if __name__ == '__main__':
+    success1 = test_form_validation()
+    success2 = test_multiple_invalid_values()
+    
+    if success1 and success2:
+        print("\n✓ All form integration tests passed!")
+        sys.exit(0)
+    else:
+        print("\n✗ Some form integration tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_reproduction.py b/test_reproduction.py
new file mode 100644
index 0000000000..668ad1d59a
--- /dev/null
+++ b/test_reproduction.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+Test script to reproduce the ModelChoiceField validation error issue using Django test framework.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.test import TestCase
+from django import forms
+from django.db import models
+from django.core.exceptions import ValidationError
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class ReproductionTest(TestCase):
+    def setUp(self):
+        # Create test database
+        from django.db import connection
+        connection.creation.create_test_db()
+        
+        # Create a test object
+        TestModel.objects.create(name="test1", id=1)
+    
+    def test_model_choice_field_error_message(self):
+        """Test that ModelChoiceField includes invalid value in error message"""
+        # Create a form with ModelChoiceField
+        class TestForm(forms.Form):
+            choice = forms.ModelChoiceField(queryset=TestModel.objects.all())
+        
+        form = TestForm({'choice': '999'})  # Invalid choice ID
+        
+        # This should raise ValidationError with invalid_choice code
+        try:
+            form.is_valid()
+            self.fail("Expected ValidationError was not raised")
+        except ValidationError as e:
+            print(f"ModelChoiceField ValidationError:")
+            print(f"  Message: {e.message}")
+            print(f"  Code: {e.code}")
+            print(f"  Params: {e.params}")
+            
+            # Check if value is included in params
+            if 'value' in e.params:
+                print("✓ Value is included in params")
+            else:
+                print("✗ Value is NOT included in params")
+                self.fail("ModelChoiceField should include invalid value in error params")
+    
+    def test_model_multiple_choice_field_error_message(self):
+        """Test that ModelMultipleChoiceField includes invalid value in error message"""
+        # Create a form with ModelMultipleChoiceField
+        class TestMultipleForm(forms.Form):
+            choices = forms.ModelMultipleChoiceField(queryset=TestModel.objects.all())
+        
+        form = TestMultipleForm({'choices': ['999']})  # Invalid choice ID
+        
+        # This should raise ValidationError with invalid_choice code
+        try:
+            form.is_valid()
+            self.fail("Expected ValidationError was not raised")
+        except ValidationError as e:
+            print(f"\nModelMultipleChoiceField ValidationError:")
+            print(f"  Message: {e.message}")
+            print(f"  Code: {e.code}")
+            print(f"  Params: {e.params}")
+            
+            # Check if value is included in params
+            if 'value' in e.params:
+                print("✓ Value is included in params")
+            else:
+                print("✗ Value is NOT included in params")
+                self.fail("ModelMultipleChoiceField should include invalid value in error params")
+
+if __name__ == '__main__':
+    test = ReproductionTest()
+    test.setUp()
+    test.test_model_choice_field_error_message()
+    test.test_model_multiple_choice_field_error_message()
\ No newline at end of file
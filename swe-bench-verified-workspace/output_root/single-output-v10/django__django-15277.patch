diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..88c9ca9f28 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,8 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..5af8ba6747
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value
+from django.db.models.fields import CharField, BinaryField
+
+def test_comprehensive():
+    print("=== Comprehensive Test ===")
+    
+    # Test 1: CharField with max_length
+    print("\n1. Testing CharField with max_length:")
+    char_field = CharField(max_length=100)
+    print(f"   Validators count: {len(char_field.validators)}")
+    print(f"   Max length: {char_field.max_length}")
+    print(f"   Validator type: {type(char_field.validators[0]) if char_field.validators else 'None'}")
+    
+    # Test 2: CharField without max_length
+    print("\n2. Testing CharField without max_length:")
+    char_field_no_max = CharField()
+    print(f"   Validators count: {len(char_field_no_max.validators)}")
+    print(f"   Max length: {char_field_no_max.max_length}")
+    
+    # Test 3: BinaryField with max_length
+    print("\n3. Testing BinaryField with max_length:")
+    binary_field = BinaryField(max_length=100)
+    print(f"   Validators count: {len(binary_field.validators)}")
+    print(f"   Max length: {binary_field.max_length}")
+    print(f"   Validator type: {type(binary_field.validators[0]) if binary_field.validators else 'None'}")
+    
+    # Test 4: BinaryField without max_length
+    print("\n4. Testing BinaryField without max_length:")
+    binary_field_no_max = BinaryField()
+    print(f"   Validators count: {len(binary_field_no_max.validators)}")
+    print(f"   Max length: {binary_field_no_max.max_length}")
+    
+    # Test 5: Value._resolve_output_field
+    print("\n5. Testing Value._resolve_output_field:")
+    x = Value('test')
+    y = x._resolve_output_field()
+    print(f"   Field type: {type(y)}")
+    print(f"   Validators count: {len(y.validators)}")
+    print(f"   Max length: {y.max_length}")
+    
+    # Test 6: Clean operations
+    print("\n6. Testing clean operations:")
+    try:
+        result1 = char_field.clean('test', model_instance=None)
+        print(f"   CharField with max_length clean: ✓")
+    except Exception as e:
+        print(f"   CharField with max_length clean: ✗ {e}")
+    
+    try:
+        result2 = char_field_no_max.clean('test', model_instance=None)
+        print(f"   CharField without max_length clean: ✓")
+    except Exception as e:
+        print(f"   CharField without max_length clean: ✗ {e}")
+    
+    try:
+        result3 = y.clean('test', model_instance=None)
+        print(f"   Value output field clean: ✓")
+    except Exception as e:
+        print(f"   Value output field clean: ✗ {e}")
+    
+    # Test 7: Performance
+    print("\n7. Testing performance:")
+    import timeit
+    time_taken = timeit.timeit(lambda: x._resolve_output_field(), number=10000)
+    print(f"   Time for 10000 calls: {time_taken:.4f} seconds")
+    print(f"   Average time per call: {time_taken/10000:.6f} seconds")
+    
+    print("\n=== All tests completed! ===")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..64a741b85e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from django.db.models import Value
+
+def test_value_resolve_output_field():
+    # Create a Value instance with a string
+    x = Value('test')
+    
+    # Call _resolve_output_field to get the CharField
+    y = x._resolve_output_field()
+    
+    print(f"Validators: {y.validators}")
+    print(f"Max length: {y.max_length}")
+    
+    # Try to clean a value (this should fail according to the issue)
+    try:
+        result = y.clean('1', model_instance=None)
+        print(f"Clean result: {result}")
+    except Exception as e:
+        print(f"Error during clean: {e}")
+    
+    # Time the _resolve_output_field call
+    import timeit
+    time_taken = timeit.timeit(lambda: x._resolve_output_field(), number=10000)
+    print(f"Time taken for 10000 calls: {time_taken:.4f} seconds")
+    print(f"Average time per call: {time_taken/10000:.6f} seconds")
+
+if __name__ == "__main__":
+    test_value_resolve_output_field()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..009e2261ce
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value
+from django.db.models.fields import CharField
+
+def test_basic_functionality():
+    print("Testing basic CharField functionality...")
+    
+    # Test CharField with max_length
+    char_field = CharField(max_length=100)
+    print(f"CharField with max_length=100 validators: {len(char_field.validators)}")
+    print(f"CharField with max_length=100 max_length: {char_field.max_length}")
+    
+    # Test CharField without max_length
+    char_field_no_max = CharField()
+    print(f"CharField without max_length validators: {len(char_field_no_max.validators)}")
+    print(f"CharField without max_length max_length: {char_field_no_max.max_length}")
+    
+    # Test Value._resolve_output_field
+    x = Value('test')
+    y = x._resolve_output_field()
+    print(f"Value._resolve_output_field() type: {type(y)}")
+    print(f"Value._resolve_output_field() validators: {len(y.validators)}")
+    print(f"Value._resolve_output_field() max_length: {y.max_length}")
+    
+    # Test that clean works
+    try:
+        result = y.clean('test', model_instance=None)
+        print(f"Clean result: {result}")
+        print("✓ Clean operation successful")
+    except Exception as e:
+        print(f"✗ Clean error: {e}")
+    
+    # Test performance improvement
+    import timeit
+    time_taken = timeit.timeit(lambda: x._resolve_output_field(), number=10000)
+    print(f"Time taken for 10000 calls: {time_taken:.4f} seconds")
+    print(f"Average time per call: {time_taken/10000:.6f} seconds")
+    
+    print("All basic tests completed!")
+
+if __name__ == "__main__":
+    test_basic_functionality()
\ No newline at end of file
diff --git a/test_charfield_fix.py b/test_charfield_fix.py
new file mode 100644
index 0000000000..134b5826b4
--- /dev/null
+++ b/test_charfield_fix.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+from django.db.models import Value
+from django.db.models.fields import CharField
+
+def test_charfield_with_max_length():
+    # Test CharField with max_length set
+    char_field = CharField(max_length=100)
+    print(f"CharField with max_length=100 validators: {char_field.validators}")
+    print(f"CharField with max_length=100 max_length: {char_field.max_length}")
+    
+    # Test CharField without max_length (like in Value._resolve_output_field)
+    char_field_no_max = CharField()
+    print(f"CharField without max_length validators: {char_field_no_max.validators}")
+    print(f"CharField without max_length max_length: {char_field_no_max.max_length}")
+    
+    # Test Value._resolve_output_field
+    x = Value('test')
+    y = x._resolve_output_field()
+    print(f"Value._resolve_output_field() validators: {y.validators}")
+    print(f"Value._resolve_output_field() max_length: {y.max_length}")
+    
+    # Test that clean works for both
+    try:
+        result1 = char_field.clean('test', model_instance=None)
+        print(f"CharField with max_length clean result: {result1}")
+    except Exception as e:
+        print(f"CharField with max_length clean error: {e}")
+    
+    try:
+        result2 = char_field_no_max.clean('test', model_instance=None)
+        print(f"CharField without max_length clean result: {result2}")
+    except Exception as e:
+        print(f"CharField without max_length clean error: {e}")
+    
+    try:
+        result3 = y.clean('test', model_instance=None)
+        print(f"Value output field clean result: {result3}")
+    except Exception as e:
+        print(f"Value output field clean error: {e}")
+
+if __name__ == "__main__":
+    test_charfield_with_max_length()
\ No newline at end of file
diff --git a/test_fix_validation.py b/test_fix_validation.py
new file mode 100644
index 0000000000..c45f15e5b0
--- /dev/null
+++ b/test_fix_validation.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models import Value, CharField
+from django.core import checks
+
+def test_charfield_validation():
+    print("Testing CharField validation...")
+    
+    # Test CharField with max_length
+    char_field = CharField(max_length=100)
+    errors = char_field.check()
+    print(f"CharField with max_length=100 errors: {len(errors)}")
+    
+    # Test CharField without max_length
+    char_field_no_max = CharField()
+    errors_no_max = char_field_no_max.check()
+    print(f"CharField without max_length errors: {len(errors_no_max)}")
+    for error in errors_no_max:
+        print(f"  - {error}")
+    
+    # Test Value._resolve_output_field
+    x = Value('test')
+    y = x._resolve_output_field()
+    print(f"Value._resolve_output_field() type: {type(y)}")
+    print(f"Value._resolve_output_field() validators: {y.validators}")
+    print(f"Value._resolve_output_field() max_length: {y.max_length}")
+    
+    # Test that clean works
+    try:
+        result = y.clean('test', model_instance=None)
+        print(f"Clean result: {result}")
+        print("✓ Clean operation successful")
+    except Exception as e:
+        print(f"✗ Clean error: {e}")
+    
+    print("All tests completed!")
+
+if __name__ == "__main__":
+    test_charfield_validation()
\ No newline at end of file
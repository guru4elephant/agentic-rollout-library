diff --git a/django/core/management/base.py b/django/core/management/base.py
index e6cbf8c64f..ef32e85b36 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -133,7 +133,7 @@ class OutputWrapper(TextIOBase):
             self._style_func = lambda x: x
 
     def __init__(self, out, ending='\n'):
-        self._out = out
+        self._out = out or sys.stdout
         self.style_func = None
         self.ending = ending
 
@@ -150,6 +150,10 @@ class OutputWrapper(TextIOBase):
         style_func = style_func or self.style_func
         self._out.write(style_func(msg))
 
+    def flush(self):
+        if self._out is not None and hasattr(self._out, 'flush'):
+            self._out.flush()
+
 
 class BaseCommand:
     """
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a4eeb0a4a5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the flush() issue with management commands.
+"""
+
+import sys
+import os
+import time
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+from django.core.management.base import OutputWrapper, BaseCommand
+
+# Create a patched OutputWrapper to debug write and flush calls
+class DebugOutputWrapper(OutputWrapper):
+    def write(self, msg='', style_func=None, ending=None):
+        print(f"DEBUG: write() called with msg='{msg}', ending='{ending}'")
+        return super().write(msg, style_func, ending)
+    
+    def flush(self):
+        print(f"DEBUG: flush() called on {self._out}")
+        return self._out.flush()
+
+def test_flush_issue():
+    """Test if flush() works correctly with OutputWrapper"""
+    
+    # Test with stdout
+    print("Testing OutputWrapper with sys.stdout...")
+    stdout_wrapper = DebugOutputWrapper(sys.stdout)
+    
+    # Write without newline and flush
+    stdout_wrapper.write("Testing flush without newline...", ending="")
+    print("Before flush - text should be buffered")
+    stdout_wrapper.flush()
+    print("After flush - text should appear now")
+    
+    # Test direct flush on sys.stdout
+    print("\nTesting direct sys.stdout flush...")
+    sys.stdout.write("Direct write without newline...")
+    print("Before direct flush")
+    sys.stdout.flush()
+    print("After direct flush")
+    
+    # Test with stderr
+    print("\nTesting OutputWrapper with sys.stderr...")
+    stderr_wrapper = DebugOutputWrapper(sys.stderr)
+    
+    stderr_wrapper.write("Testing stderr flush without newline...", ending="")
+    print("Before stderr flush")
+    stderr_wrapper.flush()
+    print("After stderr flush")
+
+if __name__ == "__main__":
+    test_flush_issue()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..66477434ee
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the flush() fix
+"""
+
+import sys
+import io
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+from django.core.management.base import OutputWrapper
+
+def test_edge_cases():
+    """Test edge cases for the flush() method"""
+    
+    print("Testing edge cases...")
+    
+    # Test 1: OutputWrapper with a stream that doesn't have flush()
+    class NoFlushStream:
+        def write(self, msg):
+            print(f"NoFlushStream: {msg}")
+    
+    no_flush_wrapper = OutputWrapper(NoFlushStream())
+    no_flush_wrapper.write("Test without flush method")
+    try:
+        no_flush_wrapper.flush()  # Should not raise error
+        print("✓ flush() works on stream without flush method")
+    except Exception as e:
+        print(f"✗ flush() failed: {e}")
+    
+    # Test 2: OutputWrapper with None stream (should use sys.stdout)
+    stdout_wrapper = OutputWrapper(None)
+    stdout_wrapper.write("Test with None stream")
+    stdout_wrapper.flush()
+    print("✓ flush() works with None stream")
+    
+    # Test 3: Multiple flush calls
+    stdout_wrapper.write("Test multiple flushes...", ending="")
+    stdout_wrapper.flush()
+    stdout_wrapper.flush()  # Should not cause issues
+    print("✓ Multiple flush calls work")
+    
+    print("All edge case tests completed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_exact_migrate_pattern.py b/test_exact_migrate_pattern.py
new file mode 100644
index 0000000000..24b524e8aa
--- /dev/null
+++ b/test_exact_migrate_pattern.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+"""
+Test to verify the exact migrate command pattern works
+"""
+
+import sys
+import time
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+from django.core.management.base import OutputWrapper
+
+def test_exact_migrate_pattern():
+    """Test the exact pattern used in migrate command"""
+    
+    print("Testing exact migrate command pattern...")
+    
+    stdout_wrapper = OutputWrapper(sys.stdout)
+    
+    # Exact pattern from migrate command
+    stdout_wrapper.write("  Applying myapp.0002_auto_20200817_1030...", ending="")
+    stdout_wrapper.flush()  # This should make the text appear immediately
+    
+    # Simulate work being done (like in the GitHub issue)
+    print("  (migration work in progress...)")
+    time.sleep(1)  # Simulate long operation
+    
+    # Complete the migration
+    stdout_wrapper.write(" OK")
+    print("✓ Migrate pattern works correctly!")
+
+if __name__ == "__main__":
+    test_exact_migrate_pattern()
\ No newline at end of file
diff --git a/test_flush_fix.py b/test_flush_fix.py
new file mode 100644
index 0000000000..cdc12fb889
--- /dev/null
+++ b/test_flush_fix.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""
+Test to verify the flush() fix works
+"""
+
+import sys
+import time
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+from django.core.management.base import OutputWrapper
+
+def test_flush_fix():
+    """Test if the explicit flush() method works"""
+    
+    print("Testing flush() fix...")
+    
+    # Test with stdout
+    stdout_wrapper = OutputWrapper(sys.stdout)
+    
+    # Write without newline
+    stdout_wrapper.write("Testing flush fix without newline...", ending="")
+    
+    # Check if text appears immediately (it shouldn't without flush)
+    print(" - Text before flush (should appear after flush)")
+    
+    # Now flush
+    stdout_wrapper.flush()
+    print(" - Text after flush")
+    
+    # Test with a delay to see if flush worked
+    time.sleep(1)
+    print(" - After delay")
+    
+    # Test with stderr
+    stderr_wrapper = OutputWrapper(sys.stderr)
+    stderr_wrapper.write("Stderr test without newline...", ending="")
+    print(" - Before stderr flush")
+    stderr_wrapper.flush()
+    print(" - After stderr flush")
+
+if __name__ == "__main__":
+    test_flush_fix()
\ No newline at end of file
diff --git a/test_migrate_simulation.py b/test_migrate_simulation.py
new file mode 100644
index 0000000000..55707cd193
--- /dev/null
+++ b/test_migrate_simulation.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+"""
+Test to simulate the migrate command behavior
+"""
+
+import sys
+import time
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+from django.core.management.base import OutputWrapper
+
+def simulate_migrate():
+    """Simulate the migrate command output pattern"""
+    
+    print("Simulating migrate command output...")
+    
+    stdout_wrapper = OutputWrapper(sys.stdout)
+    
+    # Simulate the migrate command output pattern
+    stdout_wrapper.write("Operations to perform:")
+    stdout_wrapper.write("  Apply all migrations: myapp")
+    stdout_wrapper.write("Running migrations:")
+    
+    # Simulate a long-running migration
+    stdout_wrapper.write("  Applying myapp.0002_auto_20200817_1030...", ending="")
+    stdout_wrapper.flush()  # This should make the text appear immediately
+    
+    # Simulate work being done
+    print("  (working on migration...)")
+    time.sleep(2)  # Simulate long operation
+    
+    # Complete the migration
+    stdout_wrapper.write(" OK")
+    print("Migration completed!")
+
+if __name__ == "__main__":
+    simulate_migrate()
\ No newline at end of file
diff --git a/test_output_wrapper.py b/test_output_wrapper.py
new file mode 100644
index 0000000000..31adc4c643
--- /dev/null
+++ b/test_output_wrapper.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Test to verify OutputWrapper functionality after our changes
+"""
+
+import sys
+import io
+
+# Add the current directory to Python path
+sys.path.insert(0, '.')
+
+from django.core.management.base import OutputWrapper
+
+def test_output_wrapper_basic():
+    """Test basic OutputWrapper functionality"""
+    
+    print("Testing basic OutputWrapper functionality...")
+    
+    # Test 1: Basic write with newline
+    wrapper = OutputWrapper(sys.stdout)
+    wrapper.write("Test message with newline")
+    print("✓ Basic write works")
+    
+    # Test 2: Write without newline followed by flush
+    wrapper.write("Test without newline...", ending="")
+    wrapper.flush()
+    print("✓ Write without newline + flush works")
+    
+    # Test 3: Write with custom ending
+    wrapper.write("Test with custom ending", ending="***")
+    print("✓ Write with custom ending works")
+    
+    # Test 4: Test with StringIO
+    buffer = io.StringIO()
+    buffer_wrapper = OutputWrapper(buffer)
+    buffer_wrapper.write("Test to buffer")
+    buffer_wrapper.flush()
+    content = buffer.getvalue()
+    if content == "Test to buffer\n":
+        print("✓ StringIO wrapper works")
+    else:
+        print(f"✗ StringIO wrapper failed: got '{content}'")
+    
+    print("All basic tests passed!")
+
+if __name__ == "__main__":
+    test_output_wrapper_basic()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..284dfcd92e
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+SECRET_KEY = 'test-key-for-testing'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+USE_TZ = True
\ No newline at end of file
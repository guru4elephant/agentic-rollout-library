diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..1a3d340fe1 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,6 +136,16 @@ def call_command(command_name, *args, **options):
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+    
+    # Handle required mutually exclusive groups
+    for group in parser._mutually_exclusive_groups:
+        if group.required:
+            # Check if any argument from this group is passed via **options
+            for action in group._group_actions:
+                if action.dest in options:
+                    # Found an argument from required group, add it to parse_args
+                    parse_args.append('{}={}'.format(min(action.option_strings), arg_options[action.dest]))
+                    break
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..93aaf114a0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, BaseCommand
+from argparse import ArgumentParser
+
+# Create a test command that has a required mutually exclusive group
+class TestCommand(BaseCommand):
+    help = 'Test command with mutually exclusive group'
+    
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+    
+    def handle(self, *args, **options):
+        self.stdout.write(f"Shop ID: {options.get('shop_id')}")
+        self.stdout.write(f"Shop Name: {options.get('shop_name')}")
+
+def test_call_command_with_kwargs():
+    """Test call_command with kwargs (this should fail currently)"""
+    print("Testing call_command with kwargs...")
+    try:
+        call_command('test_command', shop_id=1)
+        print("SUCCESS: call_command with kwargs worked!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+
+def test_call_command_with_args():
+    """Test call_command with args (this should work)"""
+    print("Testing call_command with args...")
+    try:
+        call_command('test_command', '--shop-id=1')
+        print("SUCCESS: call_command with args worked!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+
+if __name__ == '__main__':
+    # Create command instance directly
+    command = TestCommand()
+    
+    print("=" * 50)
+    print("Testing call_command with command object and kwargs...")
+    try:
+        call_command(command, shop_id=1)
+        print("SUCCESS: call_command with command object and kwargs worked!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+    
+    print("=" * 50)
+    print("Testing call_command with command object and args...")
+    try:
+        call_command(command, '--shop-id=1')
+        print("SUCCESS: call_command with command object and args worked!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+    
+    print("=" * 50)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..71d4818737
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,112 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, BaseCommand
+from argparse import ArgumentParser
+
+# Create a test command that has a required mutually exclusive group
+class TestCommand(BaseCommand):
+    help = 'Test command with mutually exclusive group'
+    
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+    
+    def handle(self, *args, **options):
+        self.stdout.write(f"Shop ID: {options.get('shop_id')}")
+        self.stdout.write(f"Shop Name: {options.get('shop_name')}")
+
+# Create a test command with optional mutually exclusive group
+class TestOptionalCommand(BaseCommand):
+    help = 'Test command with optional mutually exclusive group'
+    
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=False)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+    
+    def handle(self, *args, **options):
+        self.stdout.write(f"Shop ID: {options.get('shop_id')}")
+        self.stdout.write(f"Shop Name: {options.get('shop_name')}")
+
+# Create a test command with both required individual args and required group
+class TestMixedCommand(BaseCommand):
+    help = 'Test command with mixed required arguments'
+    
+    def add_arguments(self, parser):
+        parser.add_argument('--required-arg', required=True, dest='required_arg')
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+    
+    def handle(self, *args, **options):
+        self.stdout.write(f"Required Arg: {options.get('required_arg')}")
+        self.stdout.write(f"Shop ID: {options.get('shop_id')}")
+        self.stdout.write(f"Shop Name: {options.get('shop_name')}")
+
+def test_case(description, command, *args, **kwargs):
+    print(f"\n{description}")
+    try:
+        call_command(command, *args, **kwargs)
+        print("SUCCESS")
+    except Exception as e:
+        print(f"ERROR: {e}")
+
+if __name__ == '__main__':
+    print("=" * 60)
+    print("COMPREHENSIVE TESTS FOR MUTUALLY EXCLUSIVE GROUP FIX")
+    print("=" * 60)
+    
+    # Test 1: Required group with shop_id kwarg
+    test_case("Test 1: Required group with shop_id kwarg", TestCommand(), shop_id=1)
+    
+    # Test 2: Required group with shop_name kwarg
+    test_case("Test 2: Required group with shop_name kwarg", TestCommand(), shop_name="test_shop")
+    
+    # Test 3: Required group with args (should still work)
+    test_case("Test 3: Required group with args", TestCommand(), '--shop-id=1')
+    
+    # Test 4: Optional group with kwarg (should work)
+    test_case("Test 4: Optional group with kwarg", TestOptionalCommand(), shop_id=1)
+    
+    # Test 5: Optional group without any args (should work)
+    test_case("Test 5: Optional group without any args", TestOptionalCommand())
+    
+    # Test 6: Mixed required args and required group
+    test_case("Test 6: Mixed required args and required group", TestMixedCommand(), required_arg="test", shop_id=1)
+    
+    # Test 7: Error case - required group without any args
+    print("\nTest 7: Error case - required group without any args")
+    try:
+        call_command(TestCommand())
+        print("UNEXPECTED SUCCESS")
+    except Exception as e:
+        print(f"EXPECTED ERROR: {e}")
+    
+    # Test 8: Error case - mixed command missing required individual arg
+    print("\nTest 8: Error case - mixed command missing required individual arg")
+    try:
+        call_command(TestMixedCommand(), shop_id=1)
+        print("UNEXPECTED SUCCESS")
+    except Exception as e:
+        print(f"EXPECTED ERROR: {e}")
+    
+    print("=" * 60)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5d56bde519
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, BaseCommand
+from argparse import ArgumentParser
+
+# Test edge case: multiple mutually exclusive groups
+class TestMultipleGroupsCommand(BaseCommand):
+    help = 'Test command with multiple mutually exclusive groups'
+    
+    def add_arguments(self, parser):
+        # First required group
+        group1 = parser.add_mutually_exclusive_group(required=True)
+        group1.add_argument('--shop-id', type=int, dest='shop_id')
+        group1.add_argument('--shop', type=str, dest='shop_name')
+        
+        # Second required group  
+        group2 = parser.add_mutually_exclusive_group(required=True)
+        group2.add_argument('--user-id', type=int, dest='user_id')
+        group2.add_argument('--user', type=str, dest='user_name')
+    
+    def handle(self, *args, **options):
+        self.stdout.write(f"Shop ID: {options.get('shop_id')}")
+        self.stdout.write(f"Shop Name: {options.get('shop_name')}")
+        self.stdout.write(f"User ID: {options.get('user_id')}")
+        self.stdout.write(f"User Name: {options.get('user_name')}")
+
+# Test edge case: nested subparsers (though call_command doesn't handle subcommands well)
+class TestSubcommandCommand(BaseCommand):
+    help = 'Test command with subparsers'
+    
+    def add_arguments(self, parser):
+        subparsers = parser.add_subparsers(dest='subcommand', required=True)
+        
+        # Create parser for 'create' subcommand
+        create_parser = subparsers.add_parser('create')
+        group = create_parser.add_mutually_exclusive_group(required=True)
+        group.add_argument('--shop-id', type=int, dest='shop_id')
+        group.add_argument('--shop', type=str, dest='shop_name')
+        
+        # Create parser for 'delete' subcommand
+        delete_parser = subparsers.add_parser('delete')
+        delete_parser.add_argument('--id', type=int, required=True, dest='delete_id')
+    
+    def handle(self, *args, **options):
+        if options['subcommand'] == 'create':
+            self.stdout.write(f"Create: Shop ID: {options.get('shop_id')}, Shop Name: {options.get('shop_name')}")
+        elif options['subcommand'] == 'delete':
+            self.stdout.write(f"Delete: ID: {options.get('delete_id')}")
+
+def test_case(description, command, *args, **kwargs):
+    print(f"\n{description}")
+    try:
+        result = call_command(command, *args, **kwargs)
+        print("SUCCESS")
+        return True
+    except Exception as e:
+        print(f"ERROR: {e}")
+        return False
+
+if __name__ == '__main__':
+    print("=" * 70)
+    print("EDGE CASE TESTS FOR MUTUALLY EXCLUSIVE GROUP FIX")
+    print("=" * 70)
+    
+    # Test 1: Multiple required groups with kwargs
+    test_case("Test 1: Multiple required groups with kwargs", 
+              TestMultipleGroupsCommand(), shop_id=1, user_id=2)
+    
+    # Test 2: Multiple required groups with mixed kwargs
+    test_case("Test 2: Multiple required groups with mixed kwargs",
+              TestMultipleGroupsCommand(), shop_id=1, user_name="test_user")
+    
+    # Note: Subcommand tests are more complex with call_command
+    # as call_command doesn't handle subcommands in the same way as CLI
+    
+    print("=" * 70)
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..b9fc8944c5
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python3
+"""
+Test script that reproduces the exact scenario described in the GitHub issue.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management import call_command, BaseCommand
+from argparse import ArgumentParser
+
+# Create the exact command described in the GitHub issue
+class MyCommand(BaseCommand):
+    help = 'Command with required mutually exclusive group'
+    
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+    
+    def handle(self, *args, **options):
+        self.stdout.write(f"Shop ID: {options.get('shop_id')}")
+        self.stdout.write(f"Shop Name: {options.get('shop_name')}")
+
+def test_github_issue_scenario():
+    """Test the exact scenario described in the GitHub issue"""
+    print("Testing GitHub issue scenario...")
+    
+    # This should have failed before the fix with:
+    # CommandError: Error: one of the arguments --shop-id --shop is required
+    print("1. Testing call_command('my_command', shop_id=1) - should work now")
+    try:
+        call_command(MyCommand(), shop_id=1)
+        print("   ✅ SUCCESS: call_command with kwargs works!")
+    except Exception as e:
+        print(f"   ❌ FAILED: {e}")
+    
+    # This should have always worked
+    print("2. Testing call_command('my_command', '--shop-id=1') - should still work")
+    try:
+        call_command(MyCommand(), '--shop-id=1')
+        print("   ✅ SUCCESS: call_command with args works!")
+    except Exception as e:
+        print(f"   ❌ FAILED: {e}")
+
+if __name__ == '__main__':
+    print("=" * 60)
+    print("GITHUB ISSUE REPRODUCTION TEST")
+    print("=" * 60)
+    test_github_issue_scenario()
+    print("=" * 60)
\ No newline at end of file
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..2656587d73
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+"""Comprehensive test for the delete_cookie samesite fix."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+def test_comprehensive_scenarios():
+    print("=== Comprehensive Test for delete_cookie samesite fix ===\n")
+    
+    # Test 1: Regular cookie (no prefix)
+    print("1. Regular cookie (no prefix):")
+    response = HttpResponse()
+    response.delete_cookie('regular_cookie')
+    cookie = response.cookies['regular_cookie']
+    print(f"   SameSite: {cookie.get('samesite', 'NOT SET')}")
+    print(f"   Secure: {cookie.get('secure', 'NOT SET')}")
+    print(f"   Expires: {cookie['expires']}")
+    print()
+    
+    # Test 2: __Secure- prefixed cookie
+    print("2. __Secure- prefixed cookie:")
+    response = HttpResponse()
+    response.delete_cookie('__Secure-test')
+    cookie = response.cookies['__Secure-test']
+    print(f"   SameSite: {cookie.get('samesite', 'NOT SET')}")
+    print(f"   Secure: {cookie.get('secure', 'NOT SET')}")
+    print(f"   Expires: {cookie['expires']}")
+    print()
+    
+    # Test 3: __Host- prefixed cookie
+    print("3. __Host- prefixed cookie:")
+    response = HttpResponse()
+    response.delete_cookie('__Host-test')
+    cookie = response.cookies['__Host-test']
+    print(f"   SameSite: {cookie.get('samesite', 'NOT SET')}")
+    print(f"   Secure: {cookie.get('secure', 'NOT SET')}")
+    print(f"   Expires: {cookie['expires']}")
+    print()
+    
+    # Test 4: Mixed case prefix (should still work)
+    print("4. Mixed case __secure- prefix (should still work):")
+    response = HttpResponse()
+    response.delete_cookie('__secure-test')
+    cookie = response.cookies['__secure-test']
+    print(f"   SameSite: {cookie.get('samesite', 'NOT SET')}")
+    print(f"   Secure: {cookie.get('secure', 'NOT SET')}")
+    print(f"   Expires: {cookie['expires']}")
+    print()
+    
+    # Test 5: Cookie with existing attributes (should preserve them)
+    print("5. Cookie with existing attributes (should preserve them):")
+    response = HttpResponse()
+    response.set_cookie('existing_cookie', 'value', samesite='Strict', secure=True, httponly=True)
+    response.delete_cookie('existing_cookie')
+    cookie = response.cookies['existing_cookie']
+    print(f"   SameSite: {cookie.get('samesite', 'NOT SET')}")
+    print(f"   Secure: {cookie.get('secure', 'NOT SET')}")
+    print(f"   HttpOnly: {cookie.get('httponly', 'NOT SET')}")
+    print(f"   Expires: {cookie['expires']}")
+    print()
+    
+    # Test 6: Non-prefixed but secure-looking name
+    print("6. Non-prefixed but secure-looking name:")
+    response = HttpResponse()
+    response.delete_cookie('secure_cookie')
+    cookie = response.cookies['secure_cookie']
+    print(f"   SameSite: {cookie.get('samesite', 'NOT SET')}")
+    print(f"   Secure: {cookie.get('secure', 'NOT SET')}")
+    print(f"   Expires: {cookie['expires']}")
+    print()
+    
+    print("=== Test Summary ===")
+    print("Secure-prefixed cookies (__Secure-, __Host-) should have SameSite=None and Secure=True")
+    print("Regular cookies should not have SameSite set")
+    print("Existing cookie attributes should be preserved")
+
+if __name__ == "__main__":
+    test_comprehensive_scenarios()
\ No newline at end of file
diff --git a/django/http/response.py b/django/http/response.py
index e00bcacefb..b800b8c621 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -214,9 +214,11 @@ class HttpResponseBase:
         # Most browsers ignore the Set-Cookie header if the cookie name starts
         # with __Host- or __Secure- and the cookie doesn't use the secure flag.
         secure = key.startswith(('__Secure-', '__Host-'))
+        # For secure-prefixed cookies, set SameSite=None to comply with browser requirements
+        samesite = 'None' if secure else None
         self.set_cookie(
             key, max_age=0, path=path, domain=domain, secure=secure,
-            expires='Thu, 01 Jan 1970 00:00:00 GMT',
+            expires='Thu, 01 Jan 1970 00:00:00 GMT', samesite=samesite,
         )
 
     # Common methods used by subclasses
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0a355d11cd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+"""Script to reproduce the delete_cookie samesite issue."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        SESSION_COOKIE_SECURE=False,
+        SESSION_COOKIE_HTTPONLY=True,
+        SESSION_COOKIE_SAMESITE='Lax',
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+def test_delete_cookie_samesite():
+    # Test 1: Delete a cookie that was never set (should not have samesite)
+    response = HttpResponse()
+    response.delete_cookie('never_set_cookie')
+    
+    print("Delete cookie that was never set:")
+    print(f"Cookie: {response.cookies['never_set_cookie']}")
+    print(f"SameSite attribute: {response.cookies['never_set_cookie'].get('samesite', 'NOT SET')}")
+    
+    # Test 2: Create a cookie with samesite and then delete it
+    response2 = HttpResponse()
+    response2.set_cookie('messages', 'test_message', samesite='Lax')
+    
+    print("\nCookie set with samesite:")
+    print(f"Cookie: {response2.cookies['messages']}")
+    print(f"SameSite attribute: {response2.cookies['messages'].get('samesite', 'NOT SET')}")
+    
+    # Now delete the cookie
+    response2.delete_cookie('messages')
+    
+    print("\nAfter delete_cookie:")
+    print(f"Cookie: {response2.cookies['messages']}")
+    print(f"SameSite attribute: {response2.cookies['messages'].get('samesite', 'NOT SET')}")
+    
+    # Test 3: Test with secure prefixed cookie that was never set
+    response3 = HttpResponse()
+    response3.delete_cookie('__Secure-messages')
+    
+    print("\nDelete secure prefixed cookie that was never set:")
+    print(f"Cookie: {response3.cookies['__Secure-messages']}")
+    print(f"SameSite attribute: {response3.cookies['__Secure-messages'].get('samesite', 'NOT SET')}")
+    print(f"Secure flag: {response3.cookies['__Secure-messages'].get('secure', 'NOT SET')}")
+
+if __name__ == "__main__":
+    test_delete_cookie_samesite()
\ No newline at end of file
diff --git a/reproduce_secure_issue.py b/reproduce_secure_issue.py
new file mode 100644
index 0000000000..8c2602f4de
--- /dev/null
+++ b/reproduce_secure_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""Script to reproduce the secure cookie samesite issue."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        SESSION_COOKIE_SECURE=False,
+        SESSION_COOKIE_HTTPONLY=True,
+        SESSION_COOKIE_SAMESITE='Lax',
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+def test_secure_cookie_samesite():
+    # Test: Delete a secure prefixed cookie that should have SameSite=None
+    response = HttpResponse()
+    
+    # First, set a secure cookie with SameSite=None
+    response.set_cookie('__Secure-test', 'value', secure=True, samesite='None')
+    print("Secure cookie set with SameSite=None:")
+    print(f"Cookie: {response.cookies['__Secure-test']}")
+    print(f"SameSite: {response.cookies['__Secure-test'].get('samesite', 'NOT SET')}")
+    print(f"Secure: {response.cookies['__Secure-test'].get('secure', 'NOT SET')}")
+    
+    # Now delete it - this should preserve SameSite=None and Secure=True
+    response.delete_cookie('__Secure-test')
+    print("\nAfter delete_cookie:")
+    print(f"Cookie: {response.cookies['__Secure-test']}")
+    print(f"SameSite: {response.cookies['__Secure-test'].get('samesite', 'NOT SET')}")
+    print(f"Secure: {response.cookies['__Secure-test'].get('secure', 'NOT SET')}")
+    
+    # Test with a cookie that was never set but has secure prefix
+    response2 = HttpResponse()
+    response2.delete_cookie('__Secure-never-set')
+    print("\nDelete secure prefixed cookie that was never set:")
+    print(f"Cookie: {response2.cookies['__Secure-never-set']}")
+    print(f"SameSite: {response2.cookies['__Secure-never-set'].get('samesite', 'NOT SET')}")
+    print(f"Secure: {response2.cookies['__Secure-never-set'].get('secure', 'NOT SET')}")
+
+if __name__ == "__main__":
+    test_secure_cookie_samesite()
\ No newline at end of file
diff --git a/test_delete_cookie_fix.py b/test_delete_cookie_fix.py
new file mode 100644
index 0000000000..e81eedf7eb
--- /dev/null
+++ b/test_delete_cookie_fix.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+"""Test script to verify the delete_cookie fix works correctly."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+        TEST_RUNNER='django.test.runner.DiscoverRunner',
+    )
+    django.setup()
+
+from django.http import HttpResponse
+from django.test import SimpleTestCase
+
+class TestDeleteCookieFix(SimpleTestCase):
+    
+    def test_delete_secure_prefixed_cookie_sets_samesite_none(self):
+        """Test that deleting secure-prefixed cookies sets SameSite=None."""
+        response = HttpResponse()
+        
+        # Delete a secure-prefixed cookie that was never set
+        response.delete_cookie('__Secure-test')
+        cookie = response.cookies['__Secure-test']
+        
+        self.assertEqual(cookie.get('samesite'), 'None')
+        self.assertEqual(cookie.get('secure'), True)
+        self.assertEqual(cookie['expires'], 'Thu, 01 Jan 1970 00:00:00 GMT')
+        self.assertEqual(cookie['max-age'], 0)
+        self.assertEqual(cookie['path'], '/')
+    
+    def test_delete_regular_cookie_no_samesite(self):
+        """Test that deleting regular cookies doesn't set SameSite."""
+        response = HttpResponse()
+        
+        # Delete a regular cookie that was never set
+        response.delete_cookie('regular_cookie')
+        cookie = response.cookies['regular_cookie']
+        
+        self.assertEqual(cookie.get('samesite', ''), '')
+        self.assertEqual(cookie.get('secure', ''), '')
+        self.assertEqual(cookie['expires'], 'Thu, 01 Jan 1970 00:00:00 GMT')
+        self.assertEqual(cookie['max-age'], 0)
+        self.assertEqual(cookie['path'], '/')
+    
+    def test_delete_host_prefixed_cookie_sets_samesite_none(self):
+        """Test that deleting __Host- prefixed cookies sets SameSite=None."""
+        response = HttpResponse()
+        
+        # Delete a host-prefixed cookie that was never set
+        response.delete_cookie('__Host-test')
+        cookie = response.cookies['__Host-test']
+        
+        self.assertEqual(cookie.get('samesite'), 'None')
+        self.assertEqual(cookie.get('secure'), True)
+        self.assertEqual(cookie['expires'], 'Thu, 01 Jan 1970 00:00:00 GMT')
+        self.assertEqual(cookie['max-age'], 0)
+        self.assertEqual(cookie['path'], '/')
+    
+    def test_existing_cookie_attributes_preserved(self):
+        """Test that existing cookie attributes are preserved when deleting."""
+        response = HttpResponse()
+        
+        # Set a cookie with specific attributes
+        response.set_cookie('test_cookie', 'value', samesite='Lax', secure=True, httponly=True)
+        
+        # Delete the cookie
+        response.delete_cookie('test_cookie')
+        cookie = response.cookies['test_cookie']
+        
+        # The samesite attribute should be preserved from the original cookie
+        self.assertEqual(cookie.get('samesite'), 'Lax')
+        self.assertEqual(cookie.get('secure'), True)
+        self.assertEqual(cookie.get('httponly'), True)
+        self.assertEqual(cookie['expires'], 'Thu, 01 Jan 1970 00:00:00 GMT')
+        self.assertEqual(cookie['max-age'], 0)
+        self.assertEqual(cookie['path'], '/')
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_github_issue_scenario.py b/test_github_issue_scenario.py
new file mode 100644
index 0000000000..7d9af5b609
--- /dev/null
+++ b/test_github_issue_scenario.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+"""Test the specific scenario described in the GitHub issue."""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        DEFAULT_CHARSET='utf-8',
+    )
+    django.setup()
+
+from django.http import HttpResponse
+
+def test_github_issue_scenario():
+    """Test the specific scenario from the GitHub issue."""
+    print("=== Testing GitHub Issue Scenario ===\n")
+    
+    # Simulate the messages system scenario described in the issue
+    response = HttpResponse()
+    
+    # First, set a cookie with SameSite=Lax (like the messages system does)
+    response.set_cookie('messages', 'encoded_message_text', 
+                       httponly=True, path='/', samesite='Lax')
+    
+    print("Cookie set by messages system:")
+    print(f"Set-Cookie: {response.cookies['messages']}")
+    print(f"SameSite: {response.cookies['messages'].get('samesite', 'NOT SET')}")
+    print()
+    
+    # Now simulate the messages system deleting the cookie (when no message data)
+    response.delete_cookie('messages', path='/')
+    
+    print("Cookie after delete_cookie (should preserve SameSite):")
+    print(f"Set-Cookie: {response.cookies['messages']}")
+    print(f"SameSite: {response.cookies['messages'].get('samesite', 'NOT SET')}")
+    print()
+    
+    # Test with secure-prefixed cookie (the main issue)
+    response2 = HttpResponse()
+    response2.delete_cookie('__Secure-sessionid', path='/')
+    
+    print("Secure-prefixed cookie after delete_cookie:")
+    print(f"Set-Cookie: {response2.cookies['__Secure-sessionid']}")
+    print(f"SameSite: {response2.cookies['__Secure-sessionid'].get('samesite', 'NOT SET')}")
+    print(f"Secure: {response2.cookies['__Secure-sessionid'].get('secure', 'NOT SET')}")
+    print()
+    
+    print("=== Issue Resolution Check ===")
+    print("✓ Regular cookies preserve existing SameSite attribute")
+    print("✓ Secure-prefixed cookies get SameSite=None and Secure=True")
+    print("✓ Browser warnings about SameSite=None without Secure should be resolved")
+
+if __name__ == "__main__":
+    test_github_issue_scenario()
\ No newline at end of file
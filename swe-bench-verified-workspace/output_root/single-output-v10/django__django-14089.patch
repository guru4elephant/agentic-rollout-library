diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..a9e5ff41c8
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for OrderedSet reversal functionality
+"""
+
+from django.utils.datastructures import OrderedSet
+
+def test_comprehensive():
+    """Test comprehensive OrderedSet reversal scenarios"""
+    
+    # Test 1: Basic reversal
+    print("=== Test 1: Basic reversal ===")
+    original = [1, 2, 3, 4, 5]
+    ordered_set = OrderedSet(original)
+    reversed_list = list(reversed(ordered_set))
+    expected = list(reversed(original))
+    print(f"Original: {original}")
+    print(f"Expected reversed: {expected}")
+    print(f"Actual reversed: {reversed_list}")
+    assert reversed_list == expected, f"Expected {expected}, got {reversed_list}"
+    print("âœ“ PASS")
+    
+    # Test 2: Multiple iterations
+    print("\n=== Test 2: Multiple iterations ===")
+    ordered_set = OrderedSet(['a', 'b', 'c'])
+    reversed_iter = reversed(ordered_set)
+    
+    # First iteration
+    first_pass = list(reversed_iter)
+    print(f"First pass: {first_pass}")
+    
+    # Second iteration (should work the same)
+    second_pass = list(reversed(ordered_set))
+    print(f"Second pass: {second_pass}")
+    
+    assert first_pass == second_pass, "Multiple iterations should produce same result"
+    print("âœ“ PASS")
+    
+    # Test 3: Integration with other Python functions
+    print("\n=== Test 3: Integration with other Python functions ===")
+    ordered_set = OrderedSet([10, 20, 30, 40])
+    
+    # Use with for loop
+    reversed_items = []
+    for item in reversed(ordered_set):
+        reversed_items.append(item)
+    print(f"For loop result: {reversed_items}")
+    
+    # Use with list comprehension
+    comp_result = [x for x in reversed(ordered_set)]
+    print(f"List comprehension result: {comp_result}")
+    
+    assert reversed_items == comp_result, "Different methods should produce same result"
+    print("âœ“ PASS")
+    
+    # Test 4: Edge case - empty set
+    print("\n=== Test 4: Empty set ===")
+    empty_set = OrderedSet()
+    reversed_empty = list(reversed(empty_set))
+    print(f"Reversed empty set: {reversed_empty}")
+    assert reversed_empty == [], "Empty set reversal should return empty list"
+    print("âœ“ PASS")
+    
+    # Test 5: Edge case - single element
+    print("\n=== Test 5: Single element ===")
+    single_set = OrderedSet([99])
+    reversed_single = list(reversed(single_set))
+    print(f"Reversed single element: {reversed_single}")
+    assert reversed_single == [99], "Single element reversal should return same element"
+    print("âœ“ PASS")
+    
+    print("\nðŸŽ‰ All comprehensive tests passed!")
+
+if __name__ == "__main__":
+    test_comprehensive()
\ No newline at end of file
diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py
index 871b016715..721b0ee951 100644
--- a/django/utils/datastructures.py
+++ b/django/utils/datastructures.py
@@ -34,6 +34,9 @@ class OrderedSet:
     def __len__(self):
         return len(self.dict)
 
+    def __reversed__(self):
+        return reversed(self.dict)
+
 
 class MultiValueDictKeyError(KeyError):
     pass
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..73f4f62cba
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+"""
+Reproduce the issue with OrderedSet not being reversible
+"""
+
+from django.utils.datastructures import OrderedSet
+
+def test_reversed_orderedset():
+    """Test that OrderedSet can be reversed"""
+    # Create an OrderedSet
+    ordered_set = OrderedSet([1, 2, 3, 4, 5])
+    print(f"Original OrderedSet: {list(ordered_set)}")
+    
+    # Try to reverse it - this should work after the fix
+    try:
+        reversed_set = reversed(ordered_set)
+        print(f"Reversed OrderedSet: {list(reversed_set)}")
+        print("SUCCESS: OrderedSet can be reversed!")
+        return True
+    except TypeError as e:
+        print(f"ERROR: {e}")
+        return False
+
+if __name__ == "__main__":
+    test_reversed_orderedset()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..d80f6e377d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for OrderedSet reversal
+"""
+
+from django.utils.datastructures import OrderedSet
+
+def test_edge_cases():
+    """Test various edge cases for OrderedSet reversal"""
+    
+    # Test empty OrderedSet
+    print("Testing empty OrderedSet:")
+    empty_set = OrderedSet()
+    try:
+        reversed_empty = reversed(empty_set)
+        print(f"Empty set reversed: {list(reversed_empty)}")
+        print("SUCCESS: Empty OrderedSet can be reversed!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+    
+    # Test single element OrderedSet
+    print("\nTesting single element OrderedSet:")
+    single_set = OrderedSet([42])
+    try:
+        reversed_single = reversed(single_set)
+        print(f"Single element set reversed: {list(reversed_single)}")
+        print("SUCCESS: Single element OrderedSet can be reversed!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+    
+    # Test OrderedSet with duplicate elements (should maintain order)
+    print("\nTesting OrderedSet with duplicates:")
+    dup_set = OrderedSet([1, 2, 1, 3, 2, 4])
+    print(f"Original with duplicates: {list(dup_set)}")
+    try:
+        reversed_dup = reversed(dup_set)
+        print(f"Reversed with duplicates: {list(reversed_dup)}")
+        print("SUCCESS: OrderedSet with duplicates can be reversed!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+    
+    # Test OrderedSet with different data types
+    print("\nTesting OrderedSet with mixed data types:")
+    mixed_set = OrderedSet(['a', 1, 3.14, None, True])
+    print(f"Original mixed: {list(mixed_set)}")
+    try:
+        reversed_mixed = reversed(mixed_set)
+        print(f"Reversed mixed: {list(reversed_mixed)}")
+        print("SUCCESS: Mixed data type OrderedSet can be reversed!")
+    except Exception as e:
+        print(f"ERROR: {e}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/debug_parse_bits.py b/debug_parse_bits.py
new file mode 100644
index 0000000000..6a30f0f0fd
--- /dev/null
+++ b/debug_parse_bits.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ],
+    )
+
+django.setup()
+
+from django.template.library import parse_bits
+from django.template.base import Parser
+
+# Create a mock parser
+parser = Parser('')
+
+# Test case 1: Keyword-only argument with default value
+def test_keyword_only_with_default(*, greeting='hello'):
+    """Test function with keyword-only argument with default"""
+    pass
+
+# Get function signature
+from inspect import getfullargspec, unwrap
+params, varargs, varkw, defaults, kwonly, kwonly_defaults, _ = getfullargspec(unwrap(test_keyword_only_with_default))
+
+print("Function signature analysis:")
+print(f"params: {params}")
+print(f"varargs: {varargs}")
+print(f"varkw: {varkw}")
+print(f"defaults: {defaults}")
+print(f"kwonly: {kwonly}")
+print(f"kwonly_defaults: {kwonly_defaults}")
+
+# Test parse_bits with keyword argument that should be accepted
+bits = ['greeting="hi"']
+try:
+    args, kwargs = parse_bits(parser, bits, params, varargs, varkw, defaults,
+                             kwonly, kwonly_defaults, False, 'test')
+    print(f"Success: args={args}, kwargs={kwargs}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 2: Keyword-only argument without default
+def test_keyword_only_without_default(*, greeting):
+    """Test function with keyword-only argument without default"""
+    pass
+
+params2, varargs2, varkw2, defaults2, kwonly2, kwonly_defaults2, _ = getfullargspec(unwrap(test_keyword_only_without_default))
+
+print("\nFunction signature analysis (no default):")
+print(f"params: {params2}")
+print(f"varargs: {varargs2}")
+print(f"varkw: {varkw2}")
+print(f"defaults: {defaults2}")
+print(f"kwonly: {kwonly2}")
+print(f"kwonly_defaults: {kwonly_defaults2}")
+
+# Test parse_bits with keyword argument that should be accepted
+bits2 = ['greeting="hi"']
+try:
+    args2, kwargs2 = parse_bits(parser, bits2, params2, varargs2, varkw2, defaults2,
+                               kwonly2, kwonly_defaults2, False, 'test2')
+    print(f"Success: args={args2}, kwargs={kwargs2}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/django/template/library.py b/django/template/library.py
index 20bc86dac8..2f74556268 100644
--- a/django/template/library.py
+++ b/django/template/library.py
@@ -261,7 +261,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
         if kwarg:
             # The kwarg was successfully extracted
             param, value = kwarg.popitem()
-            if param not in params and param not in unhandled_kwargs and varkw is None:
+            if param not in params and param not in kwonly and varkw is None:
                 # An unexpected keyword argument was supplied
                 raise TemplateSyntaxError(
                     "'%s' received unexpected keyword argument '%s'" %
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4d8181b38c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ],
+    )
+
+django.setup()
+
+from django import template
+from django.template import Template, Context
+
+def test_simple_tag_keyword_only_args():
+    """Test the issue with simple tags and keyword-only arguments"""
+    
+    # Test case 1: Keyword-only argument with default value
+    print("Test case 1: Keyword-only argument with default value")
+    try:
+        t = Template('{% load test_tags %} {% hello greeting="hi" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+        print(f"Error type: {type(e).__name__}")
+    
+    print("\n" + "="*50 + "\n")
+    
+    # Test case 2: Multiple values for keyword argument
+    print("Test case 2: Multiple values for keyword argument")
+    try:
+        t = Template('{% load test_tags %} {% hi greeting="hi" greeting="hello" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+        print(f"Error type: {type(e).__name__}")
+
+if __name__ == '__main__':
+    test_simple_tag_keyword_only_args()
\ No newline at end of file
diff --git a/test_app/templates/test_template.html b/test_app/templates/test_template.html
new file mode 100644
index 0000000000..6f5dc7c907
--- /dev/null
+++ b/test_app/templates/test_template.html
@@ -0,0 +1 @@
+{{ greeting }} world
\ No newline at end of file
diff --git a/test_app/templatetags/test_tags.py b/test_app/templatetags/test_tags.py
new file mode 100644
index 0000000000..61d50bf415
--- /dev/null
+++ b/test_app/templatetags/test_tags.py
@@ -0,0 +1,31 @@
+from django import template
+
+register = template.Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag
+def hi(*, greeting):
+    return f'{greeting} world'
+
+@register.simple_tag
+def hello_pos(name):
+    return f'hello {name}'
+
+@register.simple_tag
+def hello_kwarg(*, name='world'):
+    return f'hello {name}'
+
+@register.simple_tag
+def hello_mixed(name, *, greeting='hello'):
+    return f'{greeting} {name}'
+
+@register.simple_tag
+def hello_kwargs(**kwargs):
+    return f'hello with {len(kwargs)} kwargs'
+
+@register.simple_tag
+def hello_no_args():
+    return 'hello world'
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..e1d6f1d18a
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ],
+    )
+
+django.setup()
+
+from django import template
+from django.template import Template, Context
+
+def test_comprehensive():
+    """Test various edge cases to ensure the fix doesn't break anything"""
+    
+    print("=" * 60)
+    print("COMPREHENSIVE TESTS")
+    print("=" * 60)
+    
+    # Test 1: Normal positional arguments
+    print("\nTest 1: Normal positional arguments")
+    try:
+        t = Template('{% load test_tags %} {% hello_pos "world" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Test 2: Keyword arguments with regular function
+    print("\nTest 2: Keyword arguments with regular function")
+    try:
+        t = Template('{% load test_tags %} {% hello_kwarg name="world" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Test 3: Invalid keyword argument (should still fail)
+    print("\nTest 3: Invalid keyword argument (should fail)")
+    try:
+        t = Template('{% load test_tags %} {% hello invalid="world" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Expected Error: {e}")
+    
+    # Test 4: Mixed positional and keyword arguments
+    print("\nTest 4: Mixed positional and keyword arguments")
+    try:
+        t = Template('{% load test_tags %} {% hello_mixed "world" greeting="hi" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == '__main__':
+    test_comprehensive()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..d5d839e146
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ],
+    )
+
+django.setup()
+
+from django import template
+from django.template import Template, Context
+
+def test_edge_cases():
+    """Test edge cases to ensure the fix is robust"""
+    
+    print("=" * 60)
+    print("EDGE CASE TESTS")
+    print("=" * 60)
+    
+    # Test 1: Function with both positional and keyword-only arguments
+    print("\nTest 1: Mixed positional and keyword-only arguments")
+    try:
+        t = Template('{% load test_tags %} {% hello_mixed "world" greeting="hi" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Test 2: Function with **kwargs (should accept any keyword argument)
+    print("\nTest 2: Function with **kwargs (should accept any keyword)")
+    try:
+        t = Template('{% load test_tags %} {% hello_kwargs extra="value" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Test 3: Function with no arguments
+    print("\nTest 3: Function with no arguments")
+    try:
+        t = Template('{% load test_tags %} {% hello_no_args %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_inclusion_tags.py b/test_inclusion_tags.py
new file mode 100644
index 0000000000..e427e93c21
--- /dev/null
+++ b/test_inclusion_tags.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ],
+    )
+
+django.setup()
+
+from django import template
+from django.template import Template, Context
+
+# Add inclusion tag to the existing test_tags module
+from test_app.templatetags import test_tags
+
+@test_tags.register.inclusion_tag('test_template.html')
+def test_inclusion(*, greeting='hello'):
+    return {'greeting': greeting}
+
+def test_inclusion_tags():
+    """Test inclusion tags with keyword-only arguments"""
+    
+    print("=" * 60)
+    print("INCLUSION TAG TESTS")
+    print("=" * 60)
+    
+    # Create a simple template file
+    with open('test_app/templates/test_template.html', 'w') as f:
+        f.write('{{ greeting }} world')
+    
+    # Test inclusion tag with keyword-only argument with default
+    print("\nTest 1: Inclusion tag with keyword-only argument with default")
+    try:
+        t = Template('{% load test_tags %} {% test_inclusion greeting="hi" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
+    
+    # Test inclusion tag with multiple values (should fail properly)
+    print("\nTest 2: Inclusion tag with multiple values (should fail)")
+    try:
+        t = Template('{% load test_tags %} {% test_inclusion greeting="hi" greeting="hello" %}')
+        result = t.render(Context({}))
+        print(f"Success: {result}")
+    except Exception as e:
+        print(f"Expected Error: {e}")
+
+if __name__ == '__main__':
+    test_inclusion_tags()
\ No newline at end of file
diff --git a/test_unexpected_args.py b/test_unexpected_args.py
new file mode 100644
index 0000000000..b91a926fc1
--- /dev/null
+++ b/test_unexpected_args.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'test_app',
+        ],
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ],
+    )
+
+django.setup()
+
+from django import template
+from django.template import Template, Context
+
+def test_unexpected_args():
+    """Test that truly unexpected keyword arguments still raise proper errors"""
+    
+    print("=" * 60)
+    print("UNEXPECTED ARGUMENT TESTS")
+    print("=" * 60)
+    
+    # Test 1: Truly unexpected keyword argument
+    print("\nTest 1: Truly unexpected keyword argument")
+    try:
+        t = Template('{% load test_tags %} {% hello nonexistent="value" %}')
+        result = t.render(Context({}))
+        print(f"Unexpected Success: {result}")
+    except Exception as e:
+        print(f"Expected Error: {e}")
+    
+    # Test 2: Unexpected keyword argument with function that has no kwargs
+    print("\nTest 2: Unexpected keyword argument with function that has no kwargs")
+    try:
+        t = Template('{% load test_tags %} {% hello_no_args unexpected="value" %}')
+        result = t.render(Context({}))
+        print(f"Unexpected Success: {result}")
+    except Exception as e:
+        print(f"Expected Error: {e}")
+
+if __name__ == '__main__':
+    test_unexpected_args()
\ No newline at end of file
diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0d..0cbfa8674e 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -894,7 +894,14 @@ class SkyCoord(ShapedLikeNDArray):
             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                 return self.transform_to(attr)
 
-        # Fail
+        # Fail - but first check if this might be a property in a subclass
+        # that is trying to access a non-existent attribute
+        if hasattr(self.__class__, attr):
+            attr_val = getattr(self.__class__, attr)
+            if isinstance(attr_val, property):
+                # Let the property access raise its own AttributeError
+                return attr_val.__get__(self, self.__class__)
+        
         raise AttributeError(
             f"'{self.__class__.__name__}' object has no attribute '{attr}'"
         )
diff --git a/pyproject.toml b/pyproject.toml
index 486d6b9b3b..1c5f74f3a1 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..34f1f1708a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+import astropy.coordinates as coord
+
+
+class custom_coord(coord.SkyCoord):
+    @property
+    def prop(self):
+        return self.random_attr
+
+
+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
+try:
+    result = c.prop
+    print("No error occurred")
+except AttributeError as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..0930f8403a
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,77 @@
+import astropy.coordinates as coord
+
+
+class TestCoord(coord.SkyCoord):
+    @property
+    def custom_prop(self):
+        return self.non_existent_attr
+    
+    @property
+    def working_prop(self):
+        return self.ra  # This should work
+    
+    @property  
+    def simple_prop(self):
+        return "constant_value"
+    
+    existing_attr = "class_attr"
+
+
+# Test 1: Original issue - property accessing non-existent attribute
+print("Test 1: Property accessing non-existent attribute")
+c = TestCoord('00h42m30s', '+41d12m00s', frame='icrs')
+try:
+    result = c.custom_prop
+    print("ERROR: Should have raised AttributeError")
+except AttributeError as e:
+    print(f"SUCCESS: Correct error - {e}")
+
+# Test 2: Property accessing existing attribute  
+print("\nTest 2: Property accessing existing attribute")
+try:
+    result = c.working_prop
+    print(f"SUCCESS: Working property returns {result}")
+except AttributeError as e:
+    print(f"ERROR: Should not raise error - {e}")
+
+# Test 3: Simple property without attribute access
+print("\nTest 3: Simple property without attribute access")
+try:
+    result = c.simple_prop
+    print(f"SUCCESS: Simple property returns {result}")
+except AttributeError as e:
+    print(f"ERROR: Should not raise error - {e}")
+
+# Test 4: Direct access to non-existent attribute
+print("\nTest 4: Direct access to non-existent attribute")
+try:
+    result = c.non_existent_direct
+    print("ERROR: Should have raised AttributeError")
+except AttributeError as e:
+    print(f"SUCCESS: Correct error - {e}")
+
+# Test 5: Direct access to existing class attribute
+print("\nTest 5: Direct access to existing class attribute")
+try:
+    result = c.existing_attr
+    print(f"SUCCESS: Class attribute returns {result}")
+except AttributeError as e:
+    print(f"ERROR: Should not raise error - {e}")
+
+# Test 6: Transform functionality still works
+print("\nTest 6: Transform functionality")
+try:
+    galactic = c.galactic
+    print(f"SUCCESS: Transform to galactic works - {galactic.l}, {galactic.b}")
+except Exception as e:
+    print(f"ERROR: Transform failed - {e}")
+
+# Test 7: Frame attributes still work
+print("\nTest 7: Frame attributes")
+try:
+    result = c.frame.name
+    print(f"SUCCESS: Frame attribute works - {result}")
+except Exception as e:
+    print(f"ERROR: Frame attribute failed - {e}")
+
+print("\nAll comprehensive tests completed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..8b451044b4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,59 @@
+import astropy.coordinates as coord
+
+
+class custom_coord(coord.SkyCoord):
+    @property
+    def prop(self):
+        return self.random_attr
+    
+    @property
+    def prop2(self):
+        return self.existing_attr  # This should work if existing_attr exists
+    
+    @property
+    def prop3(self):
+        return 42  # Simple property that doesn't access other attributes
+    
+    existing_attr = "test_value"
+
+
+# Test case 1: Property accessing non-existent attribute (original issue)
+print("Test 1: Property accessing non-existent attribute")
+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
+try:
+    result = c.prop
+    print("Unexpected: No error occurred")
+except AttributeError as e:
+    print(f"Expected error: {e}")
+
+# Test case 2: Property accessing existing attribute
+print("\nTest 2: Property accessing existing attribute")
+try:
+    result = c.prop2
+    print(f"Success: {result}")
+except AttributeError as e:
+    print(f"Unexpected error: {e}")
+
+# Test case 3: Simple property without attribute access
+print("\nTest 3: Simple property without attribute access")
+try:
+    result = c.prop3
+    print(f"Success: {result}")
+except AttributeError as e:
+    print(f"Unexpected error: {e}")
+
+# Test case 4: Direct access to non-existent attribute
+print("\nTest 4: Direct access to non-existent attribute")
+try:
+    result = c.non_existent_attr
+    print("Unexpected: No error occurred")
+except AttributeError as e:
+    print(f"Expected error: {e}")
+
+# Test case 5: Direct access to existing attribute
+print("\nTest 5: Direct access to existing attribute")
+try:
+    result = c.existing_attr
+    print(f"Success: {result}")
+except AttributeError as e:
+    print(f"Unexpected error: {e}")
\ No newline at end of file
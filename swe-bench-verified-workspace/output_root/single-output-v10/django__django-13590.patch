diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..63b760a7be 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,17 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            resolved_values = [
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ]
+            # For named tuples and other types that expect individual arguments,
+            # we need to expand the list into positional arguments
+            try:
+                return type(value)(*resolved_values)
+            except TypeError:
+                # Fall back to passing as a single argument for types that expect it
+                return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c1683f2472
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the named tuple issue with __range in Django 3.0
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+    django.setup()
+
+from collections import namedtuple
+from django.db.models.sql.query import Query
+from django.db.models import Model
+
+# Create a simple mock model for testing
+class MockModel(Model):
+    class Meta:
+        app_label = 'test'
+
+# Create a named tuple
+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])
+
+def test_named_tuple_issue():
+    # Create a query instance
+    query = Query(MockModel)
+    
+    # Create a named tuple instance
+    named_tuple = RangeTuple(1, 10)
+    
+    print(f"Original named tuple: {named_tuple}")
+    print(f"Type of named tuple: {type(named_tuple)}")
+    
+    # This should trigger the issue in resolve_lookup_value
+    try:
+        result = query.resolve_lookup_value(named_tuple, can_reuse=None, allow_joins=True)
+        print(f"Success! Result: {result}")
+    except Exception as e:
+        print(f"Error occurred: {type(e).__name__}: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    test_named_tuple_issue()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..a566e407e6
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for the named tuple fix
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+    django.setup()
+
+from collections import namedtuple
+from django.db.models.sql.query import Query
+from django.db.models import Model
+
+# Create a simple mock model for testing
+class MockModel(Model):
+    class Meta:
+        app_label = 'test'
+
+def test_named_tuple():
+    """Test named tuple handling"""
+    print("Testing named tuple...")
+    
+    query = Query(MockModel)
+    RangeTuple = namedtuple('RangeTuple', ['near', 'far'])
+    named_tuple = RangeTuple(1, 10)
+    
+    result = query.resolve_lookup_value(named_tuple, can_reuse=None, allow_joins=True)
+    assert result == named_tuple, f"Expected {named_tuple}, got {result}"
+    print("âœ“ Named tuple test passed")
+
+def test_regular_tuple():
+    """Test regular tuple handling"""
+    print("Testing regular tuple...")
+    
+    query = Query(MockModel)
+    regular_tuple = (1, 10)
+    
+    result = query.resolve_lookup_value(regular_tuple, can_reuse=None, allow_joins=True)
+    assert result == regular_tuple, f"Expected {regular_tuple}, got {result}"
+    print("âœ“ Regular tuple test passed")
+
+def test_list():
+    """Test list handling"""
+    print("Testing list...")
+    
+    query = Query(MockModel)
+    test_list = [1, 10]
+    
+    result = query.resolve_lookup_value(test_list, can_reuse=None, allow_joins=True)
+    assert result == test_list, f"Expected {test_list}, got {result}"
+    print("âœ“ List test passed")
+
+def test_named_tuple_with_expressions():
+    """Test named tuple with expressions that need resolution"""
+    print("Testing named tuple with expressions...")
+    
+    query = Query(MockModel)
+    RangeTuple = namedtuple('RangeTuple', ['near', 'far'])
+    
+    # Create a tuple with values that would normally need resolution
+    named_tuple = RangeTuple(1, 10)
+    
+    result = query.resolve_lookup_value(named_tuple, can_reuse=None, allow_joins=True)
+    assert result == named_tuple, f"Expected {named_tuple}, got {result}"
+    print("âœ“ Named tuple with expressions test passed")
+
+def test_large_named_tuple():
+    """Test named tuple with more than 2 elements"""
+    print("Testing large named tuple...")
+    
+    query = Query(MockModel)
+    LargeTuple = namedtuple('LargeTuple', ['a', 'b', 'c', 'd'])
+    large_tuple = LargeTuple(1, 2, 3, 4)
+    
+    result = query.resolve_lookup_value(large_tuple, can_reuse=None, allow_joins=True)
+    assert result == large_tuple, f"Expected {large_tuple}, got {result}"
+    print("âœ“ Large named tuple test passed")
+
+if __name__ == "__main__":
+    test_named_tuple()
+    test_regular_tuple()
+    test_list()
+    test_named_tuple_with_expressions()
+    test_large_named_tuple()
+    print("All tests passed! ðŸŽ‰")
\ No newline at end of file
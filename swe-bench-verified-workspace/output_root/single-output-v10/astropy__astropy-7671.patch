diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py
index 3e784f9fc3..2c5e320f79 100644
--- a/astropy/utils/introspection.py
+++ b/astropy/utils/introspection.py
@@ -6,7 +6,7 @@
 import inspect
 import types
 import importlib
-from distutils.version import LooseVersion
+from packaging.version import Version
 
 
 __all__ = ['resolve_name', 'minversion', 'find_current_module',
@@ -140,9 +140,9 @@ def minversion(module, version, inclusive=True, version_path='__version__'):
         have_version = resolve_name(module.__name__, version_path)
 
     if inclusive:
-        return LooseVersion(have_version) >= LooseVersion(version)
+        return Version(have_version) >= Version(version)
     else:
-        return LooseVersion(have_version) > LooseVersion(version)
+        return Version(have_version) > Version(version)
 
 
 def find_current_module(depth=1, finddiff=False):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..92a0351f39
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+"""Script to reproduce the minversion issue described in the GitHub issue."""
+
+from astropy.utils import minversion
+
+# Test case 1: This should reproduce the error
+print("Testing minversion with numpy 1.14dev...")
+try:
+    result = minversion('numpy', '1.14dev')
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test case 2: This should work (without .3)
+print("\nTesting minversion with numpy 1.14...")
+try:
+    result = minversion('numpy', '1.14')
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {type(e).__name__}: {e}")
+
+# Test case 3: Test with LooseVersion directly
+print("\nTesting LooseVersion directly...")
+from distutils.version import LooseVersion
+
+try:
+    result = LooseVersion('1.14.3') >= LooseVersion('1.14dev')
+    print(f"LooseVersion('1.14.3') >= LooseVersion('1.14dev'): {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+try:
+    result = LooseVersion('1.14') >= LooseVersion('1.14dev')
+    print(f"LooseVersion('1.14') >= LooseVersion('1.14dev'): {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..215f41f5f8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+"""Test edge cases for the minversion fix."""
+
+from astropy.utils import minversion
+from packaging.version import Version
+
+# Test edge cases with various version formats
+edge_cases = [
+    ('numpy', '1.14.dev'),
+    ('numpy', '1.14-dev'),
+    ('numpy', '1.14.0.dev'),
+    ('numpy', '1.14.0-dev'),
+    ('numpy', '1.14.1.dev'),
+    ('numpy', '1.14.1-dev'),
+    ('numpy', '1.14.alpha'),
+    ('numpy', '1.14.beta'),
+    ('numpy', '1.14.rc1'),
+    ('numpy', '1.14.post1'),
+]
+
+print("Testing edge cases with minversion...")
+for module, version in edge_cases:
+    try:
+        result = minversion(module, version)
+        print(f"minversion('{module}', '{version}') = {result}")
+    except Exception as e:
+        print(f"minversion('{module}', '{version}') ERROR: {type(e).__name__}: {e}")
+
+print("\nTesting edge cases with packaging.version directly...")
+for version in ['1.14.dev', '1.14-dev', '1.14.0.dev', '1.14.0-dev', '1.14.1.dev', '1.14.1-dev']:
+    try:
+        result = Version('1.14.3') >= Version(version)
+        print(f"Version('1.14.3') >= Version('{version}') = {result}")
+    except Exception as e:
+        print(f"Version comparison ERROR for '{version}': {type(e).__name__}: {e}")
+
+# Test that the function still handles non-existent modules gracefully
+print("\nTesting with non-existent module...")
+try:
+    result = minversion('nonexistent_module', '1.0')
+    print(f"minversion('nonexistent_module', '1.0') = {result}")
+except Exception as e:
+    print(f"minversion('nonexistent_module', '1.0') ERROR: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..0e730178b3
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""Test script to verify the fix for the minversion issue."""
+
+from astropy.utils import minversion
+
+# Test cases that should work with the fix
+test_cases = [
+    # The original problematic case
+    ('numpy', '1.14dev'),
+    
+    # Other cases with dev versions
+    ('numpy', '1.14.0dev'),
+    ('numpy', '1.14.1dev'),
+    
+    # Normal version comparisons should still work
+    ('numpy', '1.0'),
+    ('numpy', '1.16.0'),  # Should be True since we have 1.16.0
+    ('numpy', '2.0'),     # Should be False
+]
+
+print("Testing minversion with various version strings...")
+for module, version in test_cases:
+    try:
+        result = minversion(module, version)
+        print(f"minversion('{module}', '{version}') = {result}")
+    except Exception as e:
+        print(f"minversion('{module}', '{version}') ERROR: {type(e).__name__}: {e}")
+
+# Test with inclusive=False
+print("\nTesting with inclusive=False...")
+try:
+    result = minversion('numpy', '1.14dev', inclusive=False)
+    print(f"minversion('numpy', '1.14dev', inclusive=False) = {result}")
+except Exception as e:
+    print(f"minversion('numpy', '1.14dev', inclusive=False) ERROR: {type(e).__name__}: {e}")
+
+# Test direct packaging.version comparison
+print("\nTesting packaging.version directly...")
+from packaging.version import Version
+try:
+    result = Version('1.14.3') >= Version('1.14dev')
+    print(f"Version('1.14.3') >= Version('1.14dev') = {result}")
+except Exception as e:
+    print(f"Version comparison ERROR: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_github_issue_case.py b/test_github_issue_case.py
new file mode 100644
index 0000000000..08becac4f2
--- /dev/null
+++ b/test_github_issue_case.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+"""Test the exact case mentioned in the GitHub issue."""
+
+from astropy.utils import minversion
+
+# This is the exact case from the GitHub issue that was failing
+print("Testing the exact case from GitHub issue...")
+try:
+    result = minversion('numpy', '1.14dev')
+    print(f"minversion('numpy', '1.14dev') = {result}")
+    print("SUCCESS: The GitHub issue has been fixed!")
+except Exception as e:
+    print(f"FAILED: {type(e).__name__}: {e}")
+
+# Test the comparison that was mentioned to work
+print("\nTesting case that was mentioned to work...")
+try:
+    result = minversion('numpy', '1.14')
+    print(f"minversion('numpy', '1.14') = {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test the LooseVersion bug is still present (for comparison)
+print("\nTesting that LooseVersion bug still exists (for comparison)...")
+from distutils.version import LooseVersion
+try:
+    result = LooseVersion('1.14.3') >= LooseVersion('1.14dev')
+    print(f"LooseVersion comparison worked: {result}")
+except Exception as e:
+    print(f"LooseVersion still fails as expected: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_looseversion_bug.py b/test_looseversion_bug.py
new file mode 100644
index 0000000000..7f04c3625b
--- /dev/null
+++ b/test_looseversion_bug.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+"""Test script to reproduce the LooseVersion bug specifically."""
+
+from distutils.version import LooseVersion
+
+# Test cases that should trigger the bug
+test_cases = [
+    ('1.14.3', '1.14dev'),
+    ('1.14.0', '1.14dev'),
+    ('1.14.1', '1.14dev'),
+    ('1.14.10', '1.14dev'),
+]
+
+for v1, v2 in test_cases:
+    print(f"Testing LooseVersion('{v1}') >= LooseVersion('{v2}')")
+    try:
+        result = LooseVersion(v1) >= LooseVersion(v2)
+        print(f"Result: {result}")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+    print()
\ No newline at end of file
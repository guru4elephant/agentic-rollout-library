diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..e0d3837ff9 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -57,10 +57,39 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+    def __init__(self, header_rows=None):
+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)
+        # Adjust header position_line and start_line when header_rows is used
+        if header_rows is not None:
+            self.header.position_line = len(header_rows)
+            self.header.start_line = len(header_rows) + 1
 
     def write(self, lines):
         lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
+        
+        # Find the separator line (the one with '=' characters)
+        separator_line = None
+        for line in lines:
+            if '=' in line and all(c in '= ' for c in line.strip()):
+                separator_line = line
+                break
+        
+        if separator_line is None:
+            # If no separator line found, create one based on column widths
+            # This is a fallback for cases where position_line is None
+            widths = []
+            for line in lines:
+                if line.strip():  # Skip empty lines
+                    # Estimate width by counting non-space characters
+                    width = len(line.replace(' ', ''))
+                    if width > 0:
+                        widths.append(width)
+            if widths:
+                avg_width = sum(widths) // len(widths)
+                separator_line = '=' * avg_width
+            else:
+                separator_line = '====='
+        
+        # Add separator line at top and bottom
+        lines = [separator_line] + lines + [separator_line]
         return lines
diff --git a/debug_rst.py b/debug_rst.py
new file mode 100644
index 0000000000..681eea074a
--- /dev/null
+++ b/debug_rst.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+from astropy.io.ascii.rst import RST
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+# Test with header_rows
+writer = RST(header_rows=["name", "unit"])
+lines = writer.write_table(tbl)
+
+print("Raw lines output:")
+for i, line in enumerate(lines):
+    print(f"{i}: {repr(line)}")
\ No newline at end of file
diff --git a/debug_rst2.py b/debug_rst2.py
new file mode 100644
index 0000000000..e3eb689b62
--- /dev/null
+++ b/debug_rst2.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+from astropy.io.ascii.rst import RST
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+# Test with header_rows
+writer = RST(header_rows=["name", "unit"])
+lines = writer.write(tbl)
+
+print("Raw lines output:")
+for i, line in enumerate(lines):
+    print(f"{i}: {repr(line)}")
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..589f976d23
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+print("=== Testing RST format with header_rows ===")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+print("\n")
+
+print("=== Testing RST format with different header_rows order ===")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["unit", "name"])
+print("\n")
+
+print("=== Testing RST format without header_rows ===")
+tbl.write(sys.stdout, format="ascii.rst")
+print("\n")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 0d1ee66ab9..ec234472e2 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f9a39945a1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# Create test table
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+print("Testing RST format without header_rows:")
+try:
+    tbl.write(sys.stdout, format="ascii.rst")
+    print("\nSuccess!")
+except Exception as e:
+    print(f"\nError: {e}")
+
+print("\nTesting fixed_width format with header_rows:")
+try:
+    tbl.write(sys.stdout, format="ascii.fixed_width", header_rows=["name", "unit"])
+    print("\nSuccess!")
+except Exception as e:
+    print(f"\nError: {e}")
+
+print("\nTesting RST format with header_rows:")
+try:
+    tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+    print("\nSuccess!")
+except Exception as e:
+    print(f"\nError: {e}")
\ No newline at end of file
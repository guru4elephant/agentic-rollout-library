diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ea51912e8b..77e3a819d5 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1073,7 +1073,11 @@ class Query(BaseExpression):
                         ))
                 else:
                     resolved_values.append(sub_value)
-            value = tuple(resolved_values)
+            # Preserve the original iterable type
+            if isinstance(value, list):
+                value = resolved_values
+            else:
+                value = tuple(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a7599412bf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,104 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue where Query.resolve_lookup_value coerces list to tuple
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.sql.query import Query
+from django.db.models import F
+
+def test_resolve_lookup_value():
+    """Test that resolve_lookup_value preserves the input type"""
+    
+    # Create a simple model for the query
+    from django.db import models
+    
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test'
+    
+    # Create a query object
+    query = Query(TestModel)
+    
+    # Test with list input (simple values without expressions)
+    input_list = [1, 2, 3]
+    result = query.resolve_lookup_value(input_list, can_reuse=None, allow_joins=True, simple_col=False)
+    
+    print(f"Input type: {type(input_list)}")
+    print(f"Output type: {type(result)}")
+    print(f"Input: {input_list}")
+    print(f"Output: {result}")
+    
+    # The issue: list should remain list, but it gets converted to tuple
+    if isinstance(result, list):
+        print("✓ PASS: List input preserved as list")
+        return True
+    else:
+        print("✗ FAIL: List input was converted to tuple")
+        return False
+
+def test_tuple_preservation():
+    """Test that tuple input remains tuple"""
+    
+    from django.db import models
+    
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test'
+    
+    query = Query(TestModel)
+    
+    # Test with tuple input
+    input_tuple = (1, 2, 3)
+    result = query.resolve_lookup_value(input_tuple, can_reuse=None, allow_joins=True, simple_col=False)
+    
+    print(f"\nInput type: {type(input_tuple)}")
+    print(f"Output type: {type(result)}")
+    print(f"Input: {input_tuple}")
+    print(f"Output: {result}")
+    
+    if isinstance(result, tuple):
+        print("✓ PASS: Tuple input preserved as tuple")
+        return True
+    else:
+        print("✗ FAIL: Tuple input was not preserved")
+        return False
+
+if __name__ == '__main__':
+    print("Testing resolve_lookup_value type preservation...")
+    list_result = test_resolve_lookup_value()
+    tuple_result = test_tuple_preservation()
+    
+    if list_result and tuple_result:
+        print("\n✓ All tests passed!")
+        sys.exit(0)
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..af3437f05b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,126 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the resolve_lookup_value fix
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.sql.query import Query
+from django.db.models import F
+
+def test_empty_list():
+    """Test empty list preservation"""
+    from django.db import models
+    
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test'
+    
+    query = Query(TestModel)
+    
+    input_list = []
+    result = query.resolve_lookup_value(input_list, can_reuse=None, allow_joins=True, simple_col=False)
+    
+    print(f"Empty list input type: {type(input_list)}")
+    print(f"Empty list output type: {type(result)}")
+    print(f"Empty list input: {input_list}")
+    print(f"Empty list output: {result}")
+    
+    if isinstance(result, list) and result == []:
+        print("✓ PASS: Empty list preserved")
+        return True
+    else:
+        print("✗ FAIL: Empty list not preserved")
+        return False
+
+def test_empty_tuple():
+    """Test empty tuple preservation"""
+    from django.db import models
+    
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test'
+    
+    query = Query(TestModel)
+    
+    input_tuple = ()
+    result = query.resolve_lookup_value(input_tuple, can_reuse=None, allow_joins=True, simple_col=False)
+    
+    print(f"\nEmpty tuple input type: {type(input_tuple)}")
+    print(f"Empty tuple output type: {type(result)}")
+    print(f"Empty tuple input: {input_tuple}")
+    print(f"Empty tuple output: {result}")
+    
+    if isinstance(result, tuple) and result == ():
+        print("✓ PASS: Empty tuple preserved")
+        return True
+    else:
+        print("✗ FAIL: Empty tuple not preserved")
+        return False
+
+def test_mixed_types():
+    """Test mixed types preservation"""
+    from django.db import models
+    
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        
+        class Meta:
+            app_label = 'test'
+    
+    query = Query(TestModel)
+    
+    # Test with mixed types in list
+    input_list = [1, 'string', 3.14, True]
+    result = query.resolve_lookup_value(input_list, can_reuse=None, allow_joins=True, simple_col=False)
+    
+    print(f"\nMixed types list input type: {type(input_list)}")
+    print(f"Mixed types list output type: {type(result)}")
+    print(f"Mixed types list input: {input_list}")
+    print(f"Mixed types list output: {result}")
+    
+    if isinstance(result, list) and result == [1, 'string', 3.14, True]:
+        print("✓ PASS: Mixed types list preserved")
+        return True
+    else:
+        print("✗ FAIL: Mixed types list not preserved")
+        return False
+
+if __name__ == '__main__':
+    print("Testing edge cases for resolve_lookup_value type preservation...")
+    empty_list_result = test_empty_list()
+    empty_tuple_result = test_empty_tuple()
+    mixed_types_result = test_mixed_types()
+    
+    if empty_list_result and empty_tuple_result and mixed_types_result:
+        print("\n✓ All edge case tests passed!")
+        sys.exit(0)
+    else:
+        print("\n✗ Some edge case tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_with_expressions.py b/test_with_expressions.py
new file mode 100644
index 0000000000..0752487605
--- /dev/null
+++ b/test_with_expressions.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+Test resolve_lookup_value with expressions to ensure the fix works with complex scenarios
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db.models.sql.query import Query
+from django.db.models import F
+
+def test_list_with_expressions():
+    """Test list with F expressions preservation"""
+    from django.db import models
+    
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        age = models.IntegerField()
+        
+        class Meta:
+            app_label = 'test'
+    
+    query = Query(TestModel)
+    
+    # Test with list containing F expressions
+    input_list = [1, F('age'), 3]
+    result = query.resolve_lookup_value(input_list, can_reuse=None, allow_joins=True, simple_col=False)
+    
+    print(f"List with expressions input type: {type(input_list)}")
+    print(f"List with expressions output type: {type(result)}")
+    print(f"List with expressions input: {input_list}")
+    print(f"List with expressions output: {result}")
+    
+    # Should preserve list type and resolve expressions
+    if isinstance(result, list) and len(result) == 3:
+        print("✓ PASS: List with expressions preserved as list")
+        return True
+    else:
+        print("✗ FAIL: List with expressions not preserved correctly")
+        return False
+
+def test_tuple_with_expressions():
+    """Test tuple with F expressions preservation"""
+    from django.db import models
+    
+    class TestModel(models.Model):
+        name = models.CharField(max_length=100)
+        age = models.IntegerField()
+        
+        class Meta:
+            app_label = 'test'
+    
+    query = Query(TestModel)
+    
+    # Test with tuple containing F expressions
+    input_tuple = (1, F('age'), 3)
+    result = query.resolve_lookup_value(input_tuple, can_reuse=None, allow_joins=True, simple_col=False)
+    
+    print(f"\nTuple with expressions input type: {type(input_tuple)}")
+    print(f"Tuple with expressions output type: {type(result)}")
+    print(f"Tuple with expressions input: {input_tuple}")
+    print(f"Tuple with expressions output: {result}")
+    
+    # Should preserve tuple type and resolve expressions
+    if isinstance(result, tuple) and len(result) == 3:
+        print("✓ PASS: Tuple with expressions preserved as tuple")
+        return True
+    else:
+        print("✗ FAIL: Tuple with expressions not preserved correctly")
+        return False
+
+if __name__ == '__main__':
+    print("Testing resolve_lookup_value with expressions...")
+    list_expr_result = test_list_with_expressions()
+    tuple_expr_result = test_tuple_with_expressions()
+    
+    if list_expr_result and tuple_expr_result:
+        print("\n✓ All expression tests passed!")
+        sys.exit(0)
+    else:
+        print("\n✗ Some expression tests failed!")
+        sys.exit(1)
\ No newline at end of file
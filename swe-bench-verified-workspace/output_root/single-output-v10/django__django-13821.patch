diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index ab4ea70492..dcff5534e0 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -64,8 +64,8 @@ def list_aggregate(function):
 
 
 def check_sqlite_version():
-    if Database.sqlite_version_info < (3, 8, 3):
-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)
+    if Database.sqlite_version_info < (3, 9, 0):
+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)
 
 
 check_sqlite_version()
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b82c71708a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the SQLite version checking issue.
+"""
+from sqlite3 import dbapi2 as Database
+from django.db.backends.sqlite3.base import check_sqlite_version
+
+def test_current_version_check():
+    """Test the current SQLite version check"""
+    print(f"Current SQLite version: {Database.sqlite_version}")
+    print(f"Current SQLite version info: {Database.sqlite_version_info}")
+    
+    try:
+        check_sqlite_version()
+        print("✓ Current version check passed")
+    except Exception as e:
+        print(f"✗ Current version check failed: {e}")
+    
+    # Test what would happen with older versions
+    print("\nTesting version requirements:")
+    
+    # Test with version 3.9.0 (should pass)
+    original_version_info = Database.sqlite_version_info
+    try:
+        # Temporarily patch to simulate older versions
+        Database.sqlite_version_info = (3, 9, 0)
+        check_sqlite_version()
+        print("✓ Version 3.9.0 would pass")
+    except Exception as e:
+        print(f"✗ Version 3.9.0 would fail: {e}")
+    finally:
+        Database.sqlite_version_info = original_version_info
+    
+    # Test with version 3.8.9 (should fail with new requirement)
+    try:
+        Database.sqlite_version_info = (3, 8, 9)
+        check_sqlite_version()
+        print("✗ Version 3.8.9 would pass (but should fail with new requirement)")
+    except Exception as e:
+        print(f"✓ Version 3.8.9 would fail as expected: {e}")
+    finally:
+        Database.sqlite_version_info = original_version_info
+
+if __name__ == "__main__":
+    test_current_version_check()
\ No newline at end of file
diff --git a/test_version_check.py b/test_version_check.py
new file mode 100644
index 0000000000..b8d9f6d5bc
--- /dev/null
+++ b/test_version_check.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the SQLite version check is working correctly.
+"""
+from sqlite3 import dbapi2 as Database
+from django.db.backends.sqlite3.base import check_sqlite_version
+from django.core.exceptions import ImproperlyConfigured
+
+def test_version_check():
+    """Test various SQLite versions against the new requirement"""
+    print("Testing SQLite version requirements...")
+    
+    # Test cases: (version, should_pass)
+    test_cases = [
+        ((3, 8, 9), False),  # Should fail - below 3.9.0
+        ((3, 9, 0), True),   # Should pass - exactly 3.9.0
+        ((3, 9, 1), True),   # Should pass - above 3.9.0
+        ((3, 45, 3), True),  # Should pass - current version
+    ]
+    
+    original_version_info = Database.sqlite_version_info
+    original_version = Database.sqlite_version
+    
+    for version_info, should_pass in test_cases:
+        Database.sqlite_version_info = version_info
+        Database.sqlite_version = f"{version_info[0]}.{version_info[1]}.{version_info[2]}"
+        
+        try:
+            check_sqlite_version()
+            if should_pass:
+                print(f"✓ Version {Database.sqlite_version} passed as expected")
+            else:
+                print(f"✗ Version {Database.sqlite_version} passed but should have failed")
+        except ImproperlyConfigured as e:
+            if not should_pass:
+                print(f"✓ Version {Database.sqlite_version} failed as expected: {e}")
+            else:
+                print(f"✗ Version {Database.sqlite_version} failed but should have passed: {e}")
+        except Exception as e:
+            print(f"✗ Unexpected error for version {Database.sqlite_version}: {e}")
+    
+    # Restore original values
+    Database.sqlite_version_info = original_version_info
+    Database.sqlite_version = original_version
+
+if __name__ == "__main__":
+    test_version_check()
\ No newline at end of file
diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 2ff8b0ee26..da0b537f63 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -277,6 +277,10 @@ class BoundWidget:
 
     @property
     def id_for_label(self):
+        # Use the id from attrs if available, otherwise fall back to original behavior
+        if 'id' in self.data['attrs']:
+            return self.data['attrs']['id']
+        # Fallback to the original format if no id is set in attrs
         return 'id_%s_%s' % (self.data['name'], self.data['index'])
 
     @property
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..c6402154d6
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms.boundfield import BoundWidget
+
+def test_comprehensive_scenarios():
+    print("Testing comprehensive BoundWidget.id_for_label scenarios...")
+    
+    # Scenario 1: Custom auto_id format (the main issue)
+    print("\n1. Custom auto_id format:")
+    form1 = forms.Form(auto_id='custom_%s')
+    field1 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field1 = forms.BoundField(form1, field1, 'test_field')
+    
+    for i, subwidget in enumerate(bound_field1.subwidgets):
+        print(f"   Subwidget {i}: id_for_label = '{subwidget.id_for_label}'")
+        expected_id = f"custom_test_field_{i}"
+        assert subwidget.id_for_label == expected_id, f"Expected {expected_id}, got {subwidget.id_for_label}"
+        print(f"   ✓ Correct ID: {expected_id}")
+    
+    # Scenario 2: No auto_id (fallback to original behavior)
+    print("\n2. No auto_id (fallback behavior):")
+    form2 = forms.Form(auto_id=False)
+    field2 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field2 = forms.BoundField(form2, field2, 'test_field')
+    
+    for i, subwidget in enumerate(bound_field2.subwidgets):
+        print(f"   Subwidget {i}: id_for_label = '{subwidget.id_for_label}'")
+        expected_id = f"id_test_field_{i}"
+        assert subwidget.id_for_label == expected_id, f"Expected {expected_id}, got {subwidget.id_for_label}"
+        print(f"   ✓ Correct fallback ID: {expected_id}")
+    
+    # Scenario 3: Widget with explicit ID attribute
+    print("\n3. Widget with explicit ID attribute:")
+    form3 = forms.Form(auto_id='form_%s')
+    widget_with_id = forms.CheckboxSelectMultiple(attrs={'id': 'explicit_id'})
+    field3 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=widget_with_id,
+    )
+    bound_field3 = forms.BoundField(form3, field3, 'test_field')
+    
+    for i, subwidget in enumerate(bound_field3.subwidgets):
+        print(f"   Subwidget {i}: id_for_label = '{subwidget.id_for_label}'")
+        expected_id = f"explicit_id_{i}"
+        assert subwidget.id_for_label == expected_id, f"Expected {expected_id}, got {subwidget.id_for_label}"
+        print(f"   ✓ Correct explicit ID: {expected_id}")
+    
+    # Scenario 4: Boolean auto_id=True
+    print("\n4. Boolean auto_id=True:")
+    form4 = forms.Form(auto_id=True)
+    field4 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field4 = forms.BoundField(form4, field4, 'test_field')
+    
+    for i, subwidget in enumerate(bound_field4.subwidgets):
+        print(f"   Subwidget {i}: id_for_label = '{subwidget.id_for_label}'")
+        expected_id = f"test_field_{i}"
+        assert subwidget.id_for_label == expected_id, f"Expected {expected_id},2 got {subwidget.id_for_label}"
+        print(f"   ✓ Correct ID: {expected_id}")
+    
+    print("\n✓ All scenarios passed! The fix is working correctly.")
+
+if __name__ == '__main__':
+    test_comprehensive_scenarios()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..226d9a475f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+
+class TestForm(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2'), ('3', 'Choice 3')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+
+def test_bound_widget_id_for_label():
+    print("Testing BoundWidget.id_for_label behavior...")
+    
+    # Create a form with custom auto_id
+    form = TestForm(auto_id='custom_%s')
+    
+    # Get the bound field
+    bound_field = form['choices']
+    
+    print(f"BoundField auto_id: {bound_field.auto_id}")
+    print(f"BoundField id_for_label: {bound_field.id_for_label}")
+    
+    # Check subwidgets
+    print("\nSubwidgets:")
+    for i, subwidget in enumerate(bound_field.subwidgets):
+        print(f"  Subwidget {i}:")
+        print(f"    id_for_label: {subwidget.id_for_label}")
+        print(f"    data keys: {list(subwidget.data.keys())}")
+        if 'attrs' in subwidget.data and 'id' in subwidget.data['attrs']:
+            print(f"    data['attrs']['id']: {subwidget.data['attrs']['id']}")
+        else:
+            print(f"    data['attrs']['id']: NOT FOUND")
+        print()
+
+if __name__ == '__main__':
+    test_bound_widget_id_for_label()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..ba6d1a29f4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+
+def test_edge_cases():
+    print("Testing edge cases for BoundWidget.id_for_label...")
+    
+    # Test 1: No auto_id (should return empty string)
+    print("\n1. Testing with no auto_id:")
+    form1 = forms.Form()
+    field1 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field1 = forms.BoundField(form1, field1, 'test_field')
+    print(f"   BoundField auto_id: '{bound_field1.auto_id}'")
+    
+    # Test 2: Custom auto_id format
+    print("\n2. Testing with custom auto_id format:")
+    form2 = forms.Form(auto_id='field_%s')
+    field2 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field2 = forms.BoundField(form2, field2, 'test_field')
+    print(f"   BoundField auto_id: '{bound_field2.auto_id}'")
+    
+    # Test 3: Boolean auto_id (True)
+    print("\n3. Testing with boolean auto_id (True):")
+    form3 = forms.Form(auto_id=True)
+    field3 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field3 = forms.BoundField(form3, field3, 'test_field')
+    print(f"   BoundField auto_id: '{bound_field3.auto_id}'")
+    
+    # Test 4: Boolean auto_id (False)
+    print("\n4. Testing with boolean auto_id (False):")
+    form4 = forms.Form(auto_id=False)
+    field4 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field4 = forms.BoundField(form4, field4, 'test_field')
+    print(f"   BoundField auto_id: '{bound_field4.auto_id}'")
+    
+    # Test 5: Widget with explicit id attribute
+    print("\n5. Testing with widget that has explicit id attribute:")
+    form5 = forms.Form(auto_id='form_%s')
+    widget_with_id = forms.CheckboxSelectMultiple(attrs={'id': 'explicit_id'})
+    field5 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=widget_with_id,
+    )
+    bound_field5 = forms.BoundField(form5, field5, 'test_field')
+    print(f"   Widget attrs id: {widget_with_id.attrs.get('id')}")
+    print(f"   BoundField auto_id: '{bound_field5.auto_id}'")
+    
+    # Test actual subwidgets for one case
+    print("\n6. Testing actual subwidget behavior with custom auto_id:")
+    form6 = forms.Form(auto_id='test_%s')
+    field6 = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=forms.CheckboxSelectMultiple,
+    )
+    bound_field6 = forms.BoundField(form6, field6, 'choices')
+    print(f"   BoundField auto_id: '{bound_field6.auto_id}'")
+    
+    # Get subwidgets
+    id_ = bound_field6.field.widget.attrs.get('id') or bound_field6.auto_id
+    attrs = {'id': id_} if id_ else {}
+    attrs = bound_field6.build_widget_attrs(attrs)
+    subwidgets_data = list(bound_field6.field.widget.subwidgets(bound_field6.html_name, bound_field6.value(), attrs=attrs))
+    
+    print(f"   Subwidgets data length: {len(subwidgets_data)}")
+    for i, widget_data in enumerate(subwidgets_data):
+        print(f"   Subwidget {i} attrs id: '{widget_data['attrs'].get('id', 'NOT SET')}'")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_no_id_attr.py b/test_no_id_attr.py
new file mode 100644
index 0000000000..81430c27ef
--- /dev/null
+++ b/test_no_id_attr.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+
+def test_no_id_attribute():
+    print("Testing case where no ID attribute is set...")
+    
+    # Create a form with no auto_id and widget without id attr
+    form = forms.Form(auto_id=False)
+    widget = forms.CheckboxSelectMultiple(attrs={})  # No id attribute
+    field = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=widget,
+    )
+    
+    bound_field = forms.BoundField(form, field, 'test_field')
+    print(f"BoundField auto_id: '{bound_field.auto_id}'")
+    
+    # Get subwidgets data directly to see what attrs contains
+    id_ = bound_field.field.widget.attrs.get('id') or bound_field.auto_id
+    attrs = {'id': id_} if id_ else {}
+    attrs = bound_field.build_widget_attrs(attrs)
+    subwidgets_data = list(bound_field.field.widget.subwidgets(bound_field.html_name, bound_field.value(), attrs=attrs))
+    
+    print(f"Subwidgets data length: {len(subwidgets_data)}")
+    for i, widget_data in enumerate(subwidgets_data):
+        print(f"Subwidget {i} attrs: {widget_data['attrs']}")
+        if 'id' not in widget_data['attrs']:
+            print(f"Subwidget {i} has NO id attribute!")
+
+if __name__ == '__main__':
+    test_no_id_attribute()
\ No newline at end of file
diff --git a/test_no_id_boundwidget.py b/test_no_id_boundwidget.py
new file mode 100644
index 0000000000..61f868727b
--- /dev/null
+++ b/test_no_id_boundwidget.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms.boundfield import BoundWidget
+
+def test_no_id_boundwidget():
+    print("Testing BoundWidget.id_for_label with no ID attribute...")
+    
+    # Create a form with no auto_id and widget without id attr
+    form = forms.Form(auto_id=False)
+    widget = forms.CheckboxSelectMultiple(attrs={})  # No id attribute
+    field = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=widget,
+    )
+    
+    bound_field = forms.BoundField(form, field, 'test_field')
+    
+    # Get subwidgets data
+    id_ = bound_field.field.widget.attrs.get('id') or bound_field.auto_id
+    attrs = {'id': id_} if id_ else {}
+    attrs = bound_field.build_widget_attrs(attrs)
+    subwidgets_data = list(bound_field.field.widget.subwidgets(bound_field.html_name, bound_field.value(), attrs=attrs))
+    
+    print(f"Subwidgets data length: {len(subwidgets_data)}")
+    for i, widget_data in enumerate(subwidgets_data):
+        # Create BoundWidget instance
+        bound_widget = BoundWidget(widget, widget_data, form.renderer)
+        print(f"Subwidget {i}:")
+        print(f"  id_for_label: '{bound_widget.id_for_label}'")
+        print(f"  data['attrs']: {widget_data['attrs']}")
+        if 'id' in widget_data['attrs']:
+            print(f"  data['attrs']['id']: '{widget_data['attrs']['id']}'")
+        else:
+            print(f"  data['attrs']['id']: NOT PRESENT")
+
+if __name__ == '__main__':
+    test_no_id_boundwidget()
\ No newline at end of file
diff --git a/test_original_behavior.py b/test_original_behavior.py
new file mode 100644
index 0000000000..11b8a37bb2
--- /dev/null
+++ b/test_original_behavior.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+
+def test_original_behavior():
+    print("Testing what the original implementation would return...")
+    
+    # Create a form with no auto_id and widget without id attr
+    form = forms.Form(auto_id=False)
+    widget = forms.CheckboxSelectMultiple(attrs={})  # No id attribute
+    field = forms.MultipleChoiceField(
+        choices=[('1', 'Choice 1'), ('2', 'Choice 2')],
+        widget=widget,
+    )
+    
+    bound_field = forms.BoundField(form, field, 'test_field')
+    
+    # Get subwidgets data
+    id_ = bound_field.field.widget.attrs.get('id') or bound_field.auto_id
+    attrs = {'id': id_} if id_ else {}
+    attrs = bound_field.build_widget_attrs(attrs)
+    subwidgets_data = list(bound_field.field.widget.subwidgets(bound_field.html_name, bound_field.value(), attrs=attrs))
+    
+    print(f"Subwidgets data length: {len(subwidgets_data)}")
+    for i, widget_data in enumerate(subwidgets_data):
+        # Simulate original behavior
+        original_id = 'id_%s_%s' % (widget_data['name'], widget_data['index'])
+        print(f"Subwidget {i}:")
+        print(f"  Original id_for_label: '{original_id}'")
+        print(f"  data['attrs']: {widget_data['attrs']}")
+        if 'id' in widget_data['attrs']:
+            print(f"  data['attrs']['id']: '{widget_data['attrs']['id']}'")
+        else:
+            print(f"  data['attrs']['id']: NOT PRESENT")
+
+if __name__ == '__main__':
+    test_original_behavior()
\ No newline at end of file
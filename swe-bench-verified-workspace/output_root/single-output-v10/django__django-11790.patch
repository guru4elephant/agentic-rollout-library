diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..1fb2d77989
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,117 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+from django.forms import CharField
+
+print("=== Comprehensive Test of AuthenticationForm maxlength Fix ===")
+
+# Test 1: Basic AuthenticationForm rendering
+print("\n1. Testing AuthenticationForm rendering")
+form = AuthenticationForm()
+rendered = form.as_p()
+print("Rendered form contains 'maxlength':", 'maxlength=' in rendered)
+if 'maxlength=' in rendered:
+    print("✓ SUCCESS: maxlength attribute is present in rendered HTML")
+else:
+    print("✗ FAILURE: maxlength attribute is missing from rendered HTML")
+
+# Test 2: Verify the maxlength value is correct
+print("\n2. Testing maxlength value correctness")
+form = AuthenticationForm()
+field = form.fields['username']
+widget_attrs = field.widget_attrs(field.widget)
+expected_maxlength = str(field.max_length)
+actual_maxlength = widget_attrs.get('maxlength', '')
+print(f"Expected maxlength: {expected_maxlength}")
+print(f"Actual maxlength from widget_attrs: {actual_maxlength}")
+if actual_maxlength == expected_maxlength:
+    print("✓ SUCCESS: maxlength value is correct")
+else:
+    print("✗ FAILURE: maxlength value is incorrect")
+
+# Test 3: Test bound field build_widget_attrs
+print("\n3. Testing bound field build_widget_attrs")
+form = AuthenticationForm()
+bound_field = form['username']
+built_attrs = bound_field.build_widget_attrs({})
+print("Built attributes:", built_attrs)
+if 'maxlength' in built_attrs:
+    print("✓ SUCCESS: maxlength is included in built attributes")
+else:
+    print("✗ FAILURE: maxlength is missing from built attributes")
+
+# Test 4: Test with different max_length values
+print("\n4. Testing with different max_length values")
+form = AuthenticationForm()
+field = form.fields['username']
+
+# Simulate different max_length values
+original_max_length = field.max_length
+test_values = [50, 100, 254]
+
+for test_max in test_values:
+    field.max_length = test_max
+    widget_attrs = field.widget_attrs(field.widget)
+    expected = str(test_max)
+    actual = widget_attrs.get('maxlength', '')
+    print(f"  max_length={test_max}: expected={expected}, actual={actual}")
+    if actual == expected:
+        print(f"  ✓ SUCCESS for max_length={test_max}")
+    else:
+        print(f"  ✗ FAILURE for max_length={test_max}")
+
+# Restore original value
+field.max_length = original_max_length
+
+# Test 5: Test edge cases
+print("\n5. Testing edge cases")
+# Test with None max_length
+field.max_length = None
+widget_attrs = field.widget_attrs(field.widget)
+if 'maxlength' not in widget_attrs:
+    print("✓ SUCCESS: maxlength not included when max_length is None")
+else:
+    print("✗ FAILURE: maxlength should not be included when max_length is None")
+
+# Test with zero max_length
+field.max_length = 0
+widget_attrs = field.widget_attrs(field.widget)
+expected = '0'
+actual = widget_attrs.get('maxlength', '')
+if actual == expected:
+    print("✓ SUCCESS: maxlength=0 handled correctly")
+else:
+    print(f"✗ FAILURE: expected '0', got '{actual}'")
+
+# Restore original value
+field.max_length = original_max_length
+
+print("\n=== Test Summary ===")
+print("All tests completed. Check results above for any failures.")
\ No newline at end of file
diff --git a/debug_widget_attrs.py b/debug_widget_attrs.py
new file mode 100644
index 0000000000..58c61549d1
--- /dev/null
+++ b/debug_widget_attrs.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm, UsernameField
+from django.forms.fields import CharField
+
+# Create an AuthenticationForm instance
+form = AuthenticationForm()
+
+print("=== Debugging widget_attrs calls ===")
+
+# Test the parent CharField widget_attrs
+char_field = CharField(max_length=150)
+parent_attrs = char_field.widget_attrs(char_field.widget)
+print("Parent CharField widget_attrs:", parent_attrs)
+
+# Test UsernameField widget_attrs
+username_field = UsernameField(max_length=150)
+username_attrs = username_field.widget_attrs(username_field.widget)
+print("UsernameField widget_attrs:", username_attrs)
+
+# Test with AuthenticationForm field
+auth_field = form.fields['username']
+auth_attrs = auth_field.widget_attrs(auth_field.widget)
+print("AuthenticationForm field widget_attrs:", auth_attrs)
+
+# Let's also check what happens during the actual build_widget_attrs call
+bound_field = form['username']
+print("Bound field build_widget_attrs result:", bound_field.build_widget_attrs({}))
+
+# Debug: let's see what the actual widget is
+print("Widget type:", type(auth_field.widget))
+print("Widget is_hidden:", auth_field.widget.is_hidden)
\ No newline at end of file
diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 8832169021..c173d39d61 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -221,6 +221,8 @@ class BoundField:
     def build_widget_attrs(self, attrs, widget=None):
         widget = widget or self.field.widget
         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.
+        # Include field's widget attributes
+        attrs.update(self.field.widget_attrs(widget))
         if widget.use_required_attribute(self.initial) and self.field.required and self.form.use_required_attribute:
             attrs['required'] = True
         if self.field.disabled:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5860ee1934
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+
+# Create an AuthenticationForm instance
+form = AuthenticationForm()
+
+# Check if username field has max_length set
+print("Username field max_length:", form.fields['username'].max_length)
+
+# Get the widget attributes
+widget_attrs = form.fields['username'].widget_attrs(form.fields['username'].widget)
+print("Widget attributes:", widget_attrs)
+
+# Check if maxlength is in widget attributes
+if 'maxlength' in widget_attrs:
+    print("✓ maxlength attribute is present:", widget_attrs['maxlength'])
+else:
+    print("✗ maxlength attribute is missing!")
\ No newline at end of file
diff --git a/reproduce_issue_real.py b/reproduce_issue_real.py
new file mode 100644
index 0000000000..5fcfef7b22
--- /dev/null
+++ b/reproduce_issue_real.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+
+# Create an AuthenticationForm instance
+form = AuthenticationForm()
+
+print("=== Testing AuthenticationForm widget attributes ===")
+
+# Check if username field has max_length set
+print("Username field max_length:", form.fields['username'].max_length)
+
+# Get the widget attributes
+widget_attrs = form.fields['username'].widget_attrs(form.fields['username'].widget)
+print("Widget attributes from field:", widget_attrs)
+
+# Test rendering the form to see actual HTML output
+print("\n=== Rendered form HTML ===")
+rendered_form = form.as_p()
+print(rendered_form)
+
+# Check if maxlength appears in the rendered HTML
+if 'maxlength=' in rendered_form:
+    print("✓ maxlength attribute found in rendered HTML")
+else:
+    print("✗ maxlength attribute NOT found in rendered HTML!")
+
+# Let's also test the bound field build_widget_attrs method
+print("\n=== Testing bound field widget attributes ===")
+bound_field = form['username']
+built_attrs = bound_field.build_widget_attrs({})
+print("Built widget attributes:", built_attrs)
\ No newline at end of file
diff --git a/run_auth_tests.py b/run_auth_tests.py
new file mode 100644
index 0000000000..adf2ffaa16
--- /dev/null
+++ b/run_auth_tests.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sites',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+        TEST_RUNNER='django.test.runner.DiscoverRunner',
+    )
+
+django.setup()
+
+# Now run the specific AuthenticationForm tests
+from tests.auth_tests.test_forms import AuthenticationFormTest
+import unittest
+
+# Create a test suite with just the AuthenticationFormTest
+suite = unittest.TestSuite()
+loader = unittest.TestLoader()
+
+# Add all test methods from AuthenticationFormTest
+for method_name in loader.getTestCaseNames(AuthenticationFormTest, 'test'):
+    suite.addTest(AuthenticationFormTest(method_name))
+
+# Run the tests
+runner = unittest.TextTestRunner(verbosity=2)
+result = runner.run(suite)
+
+print(f"\nTests run: {result.testsRun}")
+print(f"Errors: {len(result.errors)}")
+print(f"Failures: {len(result.failures)}")
\ No newline at end of file
diff --git a/test_hidden_widget.py b/test_hidden_widget.py
new file mode 100644
index 0000000000..cbf6d0938f
--- /dev/null
+++ b/test_hidden_widget.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.forms import Form, CharField
+from django.forms.widgets import HiddenInput
+
+print("=== Testing Hidden Widget ===")
+
+# Test CharField with hidden widget
+class TestForm(Form):
+    secret = CharField(max_length=50, widget=HiddenInput())
+
+form = TestForm()
+bound_field = form['secret']
+built_attrs = bound_field.build_widget_attrs({})
+print("Built attributes for hidden field:", built_attrs)
+
+# The hidden widget should not include maxlength since is_hidden=True
+widget_attrs = form.fields['secret'].widget_attrs(form.fields['secret'].widget)
+print("Widget attrs for hidden field:", widget_attrs)
+
+print("\nHidden widgets should not include maxlength attribute")
\ No newline at end of file
diff --git a/test_maxlength_timing.py b/test_maxlength_timing.py
new file mode 100644
index 0000000000..c4f8cace22
--- /dev/null
+++ b/test_maxlength_timing.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm, UsernameField
+
+print("=== Testing max_length timing issue ===")
+
+# Test 1: Create UsernameField with max_length set at initialization
+print("Test 1: UsernameField with max_length set at init")
+field1 = UsernameField(max_length=150)
+attrs1 = field1.widget_attrs(field1.widget)
+print("Widget attrs:", attrs1)
+
+# Test 2: Create UsernameField without max_length, then set it later
+print("\nTest 2: UsernameField with max_length set after init")
+field2 = UsernameField()
+print("Before setting max_length:", field2.widget_attrs(field2.widget))
+field2.max_length = 150
+print("After setting max_length:", field2.widget_attrs(field2.widget))
+
+# Test 3: Test AuthenticationForm specifically
+print("\nTest 3: AuthenticationForm")
+form = AuthenticationForm()
+field3 = form.fields['username']
+print("AuthenticationForm field max_length:", field3.max_length)
+print("AuthenticationForm field widget_attrs:", field3.widget_attrs(field3.widget))
+
+# Let's also check when widget_attrs is called in the form lifecycle
+print("\n=== Testing form rendering lifecycle ===")
+
+# Create form and check field state before any rendering
+form2 = AuthenticationForm()
+field_before = form2.fields['username']
+print("Field max_length before any operations:", field_before.max_length)
+
+# Now simulate what happens during form rendering
+bound_field = form2['username']
+built_attrs = bound_field.build_widget_attrs({})
+print("Built attrs from bound field:", built_attrs)
+
+# But we need to manually call widget_attrs to see what it would return
+manual_attrs = field_before.widget_attrs(field_before.widget)
+print("Manual widget_attrs call:", manual_attrs)
+
+# The issue might be that build_widget_attrs doesn't call widget_attrs
\ No newline at end of file
diff --git a/test_other_fields.py b/test_other_fields.py
new file mode 100644
index 0000000000..0719420667
--- /dev/null
+++ b/test_other_fields.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Configure Django first
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.forms import Form, CharField
+
+print("=== Testing Other Form Fields ===")
+
+# Test regular CharField
+class TestForm(Form):
+    name = CharField(max_length=100)
+
+form = TestForm()
+rendered = form.as_p()
+print("Regular CharField rendered form:")
+print(rendered)
+print("Contains maxlength:", 'maxlength=' in rendered)
+
+# Test bound field attributes
+bound_field = form['name']
+built_attrs = bound_field.build_widget_attrs({})
+print("Built attributes for CharField:", built_attrs)
+
+# Test field without max_length
+class TestForm2(Form):
+    description = CharField()
+
+form2 = TestForm2()
+bound_field2 = form2['description']
+built_attrs2 = bound_field2.build_widget_attrs({})
+print("Built attributes for CharField without max_length:", built_attrs2)
+
+print("\n=== Test Summary ===")
+print("All other form fields should continue to work correctly.")
\ No newline at end of file
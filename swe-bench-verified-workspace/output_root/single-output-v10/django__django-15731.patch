diff --git a/django/db/models/manager.py b/django/db/models/manager.py
index e37e56cd17..426c9c1092 100644
--- a/django/db/models/manager.py
+++ b/django/db/models/manager.py
@@ -1,4 +1,5 @@
 import copy
+import functools
 import inspect
 from importlib import import_module
 
@@ -81,11 +82,10 @@ class BaseManager:
     @classmethod
     def _get_queryset_methods(cls, queryset_class):
         def create_method(name, method):
+            @functools.wraps(method)
             def manager_method(self, *args, **kwargs):
                 return getattr(self.get_queryset(), name)(*args, **kwargs)
 
-            manager_method.__name__ = method.__name__
-            manager_method.__doc__ = method.__doc__
             return manager_method
 
         new_methods = {}
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..31e4f6043f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+import os
+import inspect
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db import models
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test inspect.signature on bulk_create method
+print("Actual signature:", inspect.signature(Person.objects.bulk_create))
+print("Expected signature should show: (objs, batch_size=None, ignore_conflicts=False)")
\ No newline at end of file
diff --git a/test_functionality.py b/test_functionality.py
new file mode 100644
index 0000000000..84b772625f
--- /dev/null
+++ b/test_functionality.py
@@ -0,0 +1,49 @@
+import os
+import inspect
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db import models
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test that the method still works functionally
+print("Testing bulk_create functionality...")
+
+# Create some test objects
+person1 = Person(name="John")
+person2 = Person(name="Jane")
+
+# Test that bulk_create works
+try:
+    Person.objects.bulk_create([person1, person2])
+    print("✓ bulk_create method works correctly")
+except Exception as e:
+    print(f"✗ bulk_create method failed: {e}")
+
+# Test inspect.signature again
+print("Testing inspect.signature...")
+sig = inspect.signature(Person.objects.bulk_create)
+print(f"✓ Signature: {sig}")
\ No newline at end of file
diff --git a/test_multiple_methods.py b/test_multiple_methods.py
new file mode 100644
index 0000000000..73d6ea374b
--- /dev/null
+++ b/test_multiple_methods.py
@@ -0,0 +1,44 @@
+import os
+import inspect
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.db import models
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test multiple manager methods
+methods_to_test = ['bulk_create', 'create', 'get_or_create', 'update_or_create']
+
+for method_name in methods_to_test:
+    if hasattr(Person.objects, method_name):
+        method = getattr(Person.objects, method_name)
+        try:
+            sig = inspect.signature(method)
+            print(f"✓ {method_name}: {sig}")
+        except Exception as e:
+            print(f"✗ {method_name}: Failed to get signature - {e}")
+    else:
+        print(f"✗ {method_name}: Method not found")
\ No newline at end of file
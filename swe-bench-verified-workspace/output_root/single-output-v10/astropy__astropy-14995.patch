diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..00bab0dda0 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -513,17 +513,22 @@ class NDArithmeticMixin:
             ``handle_mask`` must create (and copy) the returned mask.
         """
         # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+        if handle_mask is None:
+            return None
+            
+        # Handle cases where one or both masks are None
+        if self.mask is None and operand is None:
             return None
         elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
-            return deepcopy(operand.mask)
+            return deepcopy(operand.mask) if operand.mask is not None else None
         elif operand is None:
+            return deepcopy(self.mask) if self.mask is not None else None
+        elif self.mask is not None and operand.mask is None:
             return deepcopy(self.mask)
+        elif self.mask is None and operand.mask is not None:
+            return deepcopy(operand.mask)
         else:
-            # Now lets calculate the resulting mask (operation enforces copy)
+            # Both masks are not None, use handle_mask
             return handle_mask(self.mask, operand.mask, **kwds)
 
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..0fa143562b
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,42 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+print("Final verification of the GitHub issue fix...")
+
+# Exact reproduction from the GitHub issue
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("1. multiply no mask by constant (no mask * no mask)")
+result = nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask
+assert result is None, f"Expected None, got {result}"
+print("   âœ“ PASS")
+
+print("2. multiply no mask by itself (no mask * no mask)")
+result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+assert result is None, f"Expected None, got {result}"
+print("   âœ“ PASS")
+
+print("3. multiply mask by constant (mask * no mask) - Previously failed")
+result = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask
+expected = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+assert np.array_equal(result, expected), f"Expected {expected}, got {result}"
+print("   âœ“ PASS")
+
+print("4. multiply mask by itself (mask * mask)")
+result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask
+expected = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+assert np.array_equal(result, expected), f"Expected {expected}, got {result}"
+print("   âœ“ PASS")
+
+print("5. multiply mask by no mask (mask * no mask) - Previously failed")
+result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+expected = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+assert np.array_equal(result, expected), f"Expected {expected}, got {result}"
+print("   âœ“ PASS")
+
+print("\nðŸŽ‰ All tests passed! The GitHub issue has been successfully fixed.")
+print("The mask propagation now works correctly when one operand has a mask and the other doesn't.")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 15bb49f22b..dc9c3c5f37 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "cython==0.29.34",
             "oldest-supported-numpy",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1c2d959457
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+# Reproduce the issue described in the GitHub issue
+print("Reproducing the NDDataRef mask propagation issue...")
+
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("1. multiply no mask by constant (no mask * no mask)")
+try:
+    result = nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask
+    print(f"   Result: {result}")
+except Exception as e:
+    print(f"   Error: {e}")
+
+print("\n2. multiply no mask by itself (no mask * no mask)")
+try:
+    result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+    print(f"   Result: {result}")
+except Exception as e:
+    print(f"   Error: {e}")
+
+print("\n3. multiply mask by constant (mask * no mask) - THIS SHOULD FAIL")
+try:
+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask
+    print(f"   Result: {result}")
+except Exception as e:
+    print(f"   Error: {e}")
+
+print("\n4. multiply mask by itself (mask * mask)")
+try:
+    result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask
+    print(f"   Result: {result}")
+except Exception as e:
+    print(f"   Error: {e}")
+
+print("\n5. multiply mask by no mask (mask * no mask) - THIS SHOULD FAIL")
+try:
+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+    print(f"   Result: {result}")
+except Exception as e:
+    print(f"   Error: {e}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..ec6e414341
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,65 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+print("Testing comprehensive mask propagation scenarios...")
+
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+# Create test objects
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("\n=== Test 1: No mask operations ===")
+print("1a. NDDataRef * scalar (no mask):")
+result = nref_nomask.multiply(2.0, handle_mask=np.bitwise_or)
+print(f"   Result mask: {result.mask}")
+
+print("1b. NDDataRef * NDDataRef (both no mask):")
+result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+print(f"   Result mask: {result.mask}")
+
+print("\n=== Test 2: Mask operations ===")
+print("2a. NDDataRef(with mask) * scalar:")
+result = nref_mask.multiply(2.0, handle_mask=np.bitwise_or)
+print(f"   Result mask: {result.mask}")
+print(f"   Expected: {mask}")
+
+print("2b. NDDataRef(with mask) * NDDataRef(with mask):")
+result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)
+print(f"   Result mask: {result.mask}")
+print(f"   Expected: {np.bitwise_or(mask, mask)}")
+
+print("\n=== Test 3: Mixed mask operations ===")
+print("3a. NDDataRef(with mask) * NDDataRef(no mask):")
+result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+print(f"   Result mask: {result.mask}")
+print(f"   Expected: {mask} (copied from mask operand)")
+
+print("3b. NDDataRef(no mask) * NDDataRef(with mask):")
+result = nref_nomask.multiply(nref_mask, handle_mask=np.bitwise_or)
+print(f"   Result mask: {result.mask}")
+print(f"   Expected: {mask} (copied from mask operand)")
+
+print("\n=== Test 4: Different handle_mask functions ===")
+print("4a. Using np.bitwise_and:")
+result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_and)
+print(f"   Result mask: {result.mask}")
+
+print("4b. Using 'first_found':")
+result = nref_mask.multiply(nref_nomask, handle_mask='first_found')
+print(f"   Result mask: {result.mask}")
+
+print("\n=== Test 5: Edge cases ===")
+print("5a. handle_mask=None:")
+result = nref_mask.multiply(nref_nomask, handle_mask=None)
+print(f"   Result mask: {result.mask}")
+
+print("5b. Adding None operand:")
+try:
+    result = nref_mask.add(None, handle_mask=np.bitwise_or)
+    print(f"   Result mask: {result.mask}")
+except Exception as e:
+    print(f"   Error: {e}")
+
+print("\nAll tests completed!")
\ No newline at end of file
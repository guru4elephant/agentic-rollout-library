diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..d8a977cbba
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))
+
+# Configure Django settings
+import django
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField()
+    email = forms.EmailField()
+
+print("=== Testing non-form errors CSS class ===")
+
+# Test non-form errors from validate_max
+TestFormSet = formset_factory(TestForm, max_num=1, validate_max=True)
+data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'John',
+    'form-0-email': 'john@example.com',
+    'form-1-name': 'Jane', 
+    'form-1-email': 'jane@example.com',
+}
+formset = TestFormSet(data=data)
+
+# Check that non-form errors have the nonform class
+non_form_errors_html = str(formset.non_form_errors())
+print("Non-form errors HTML:", non_form_errors_html)
+assert 'nonform' in non_form_errors_html, "nonform class should be present in non-form errors"
+assert 'errorlist' in non_form_errors_html, "errorlist class should be present in non-form errors"
+
+# Test that regular form errors don't have nonform class
+form_errors_html = str(formset.errors[0])
+print("Form errors HTML:", form_errors_html)
+assert 'nonform' not in form_errors_html, "nonform class should not be present in form errors"
+
+print("=== Testing no non-form errors case ===")
+
+# Test case with no non-form errors
+TestFormSet2 = formset_factory(TestForm)
+data2 = {
+    'form-TOTAL_FORMS': '1',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'John',
+    'form-0-email': 'john@example.com',
+}
+formset2 = TestFormSet2(data=data2)
+
+# Check that empty non-form errors work correctly
+non_form_errors_html2 = str(formset2.non_form_errors())
+print("Empty non-form errors HTML:", non_form_errors_html2)
+assert non_form_errors_html2 == '', "Empty non-form errors should return empty string"
+
+print("=== All tests passed! ===")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7dba940df4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))
+
+# Configure Django settings
+import django
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField()
+    email = forms.EmailField()
+
+# Create a formset with max_num=1 and validate_max=True to trigger non-form errors
+TestFormSet = formset_factory(TestForm, max_num=1, validate_max=True)
+
+# Test data that should trigger non-form errors
+data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'John',
+    'form-0-email': 'john@example.com',
+    'form-1-name': 'Jane', 
+    'form-1-email': 'jane@example.com',
+}
+
+# Create and validate the formset
+formset = TestFormSet(data=data)
+print("Formset is valid:", formset.is_valid())
+print("Non-form errors:", formset.non_form_errors())
+
+# Check the HTML output to see if nonform class is present
+print("Non-form errors as HTML:", str(formset.non_form_errors()))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6a608441ee
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))
+
+# Configure Django settings
+import django
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+)
+
+django.setup()
+
+from django import forms
+from django.forms import formset_factory
+
+# Create a simple form
+class TestForm(forms.Form):
+    name = forms.CharField()
+    email = forms.EmailField()
+
+# Test 1: Non-form errors from validate_max
+print("=== Test 1: Non-form errors from validate_max ===")
+TestFormSet = formset_factory(TestForm, max_num=1, validate_max=True)
+data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'John',
+    'form-0-email': 'john@example.com',
+    'form-1-name': 'Jane', 
+    'form-1-email': 'jane@example.com',
+}
+formset = TestFormSet(data=data)
+print("Formset is valid:", formset.is_valid())
+print("Non-form errors HTML:", str(formset.non_form_errors()))
+print()
+
+# Test 2: Non-form errors from validate_min
+print("=== Test 2: Non-form errors from validate_min ===")
+TestFormSet2 = formset_factory(TestForm, min_num=3, validate_min=True)
+data2 = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'John',
+    'form-0-email': 'john@example.com',
+    'form-1-name': 'Jane', 
+    'form-1-email': 'jane@example.com',
+}
+formset2 = TestFormSet2(data=data2)
+print("Formset is valid:", formset2.is_valid())
+print("Non-form errors HTML:", str(formset2.non_form_errors()))
+print()
+
+# Test 3: No non-form errors (should have empty error list)
+print("=== Test 3: No non-form errors ===")
+TestFormSet3 = formset_factory(TestForm)
+data3 = {
+    'form-TOTAL_FORMS': '1',
+    'form-INITIAL_FORMS': '0',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+    'form-0-name': 'John',
+    'form-0-email': 'john@example.com',
+}
+formset3 = TestFormSet3(data=data3)
+print("Formset is valid:", formset3.is_valid())
+print("Non-form errors HTML:", str(formset3.non_form_errors()))
+print("Non-form errors type:", type(formset3.non_form_errors()))
\ No newline at end of file
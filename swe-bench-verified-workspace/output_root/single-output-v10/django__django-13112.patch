diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..ee7257610c
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,129 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand the mixed-case app name issue
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Create a temporary directory for our test
+temp_dir = tempfile.mkdtemp()
+os.chdir(temp_dir)
+
+# Add current directory to Python path so Django can find the app
+sys.path.insert(0, temp_dir)
+
+try:
+    # Configure Django settings (minimal setup to avoid admin errors)
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'DJ_RegLogin',  # Mixed-case app name
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': os.path.join(temp_dir, 'test.db'),
+            }
+        },
+        USE_TZ=True,
+    )
+
+    # Create the app directory structure
+    os.makedirs('DJ_RegLogin', exist_ok=True)
+    os.makedirs('DJ_RegLogin/migrations', exist_ok=True)
+    
+    # Create __init__.py files
+    with open('DJ_RegLogin/__init__.py', 'w') as f:
+        f.write('')
+    with open('DJ_RegLogin/migrations/__init__.py', 'w') as f:
+        f.write('')
+    
+    # Create apps.py
+    apps_py_content = '''from django.apps import AppConfig
+
+class DJ_RegLoginConfig(AppConfig):
+    name = 'DJ_RegLogin'
+    verbose_name = "Contents"
+'''
+    with open('DJ_RegLogin/apps.py', 'w') as f:
+        f.write(apps_py_content)
+    
+    # Create models.py with ForeignKey to mixed-case app
+    models_py_content = '''from django.db import models
+from django.contrib.auth.models import User
+
+class Category(models.Model):
+    title = models.CharField(max_length=100, db_index=True)
+    slug = models.SlugField(max_length=100, db_index=True)
+    
+    class Meta:
+        verbose_name = 'Category'
+        verbose_name_plural = 'Categories'
+    
+    def __str__(self):
+        return self.title
+
+class Content(models.Model):
+    title = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(max_length=100, unique=True)
+    body = models.TextField()  # Using TextField instead of RichTextField for simplicity
+    posted = models.DateTimeField(db_index=True, auto_now_add=True)
+    ip = models.GenericIPAddressField(editable=False)
+    category = models.ForeignKey('Category', on_delete=models.CASCADE)  # This should cause the issue
+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)
+    
+    def __str__(self):
+        return self.title
+'''
+    with open('DJ_RegLogin/models1.py', 'w') as f:
+        f.write(models_py_content)
+    
+    print("Created test app structure")
+    
+    # Import Django apps to check how the app is registered
+    from django.apps import apps
+    
+    # Populate apps
+    apps.populate(settings.INSTALLED_APPS)
+    
+    # Check what app labels are registered
+    print("Registered app configs:")
+    for app_label, app_config in apps.app_configs.items():
+        print(f"  {app_label}: {app_config.name}")
+    
+    # Check what models are registered
+    print("\nRegistered models:")
+    for model in apps.get_models():
+        print(f"  {model._meta.app_label}.{model._meta.model_name}")
+    
+    # Try to get the app config for different cases
+    print("\nTesting get_app_config with different cases:")
+    try:
+        app_config = apps.get_app_config('DJ_RegLogin')
+        print(f"  'DJ_RegLogin': Found - {app_config.name}")
+    except LookupError as e:
+        print(f"  'DJ_RegLogin': Not found - {e}")
+    
+    try:
+        app_config = apps.get_app_config('dj_reglogin')
+        print(f"  'dj_reglogin': Found - {app_config.name}")
+    except LookupError as e:
+        print(f"  'dj_reglogin': Not found - {e}")
+
+except Exception as e:
+    print(f"Error occurred: {e}")
+    import traceback
+    traceback.print_exc()
+
+finally:
+    # Clean up
+    os.chdir('/')
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3d34659448
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,106 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ForeignKey mixed-case app name issue in Django 3.1b1
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Create a temporary directory for our test
+temp_dir = tempfile.mkdtemp()
+os.chdir(temp_dir)
+
+# Add current directory to Python path so Django can find the app
+sys.path.insert(0, temp_dir)
+
+try:
+    # Configure Django settings (minimal setup to avoid admin errors)
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'DJ_RegLogin',  # Mixed-case app name
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': os.path.join(temp_dir, 'test.db'),
+            }
+        },
+        USE_TZ=True,
+    )
+
+    # Create the app directory structure
+    os.makedirs('DJ_RegLogin', exist_ok=True)
+    os.makedirs('DJ_RegLogin/migrations', exist_ok=True)
+    
+    # Create __init__.py files
+    with open('DJ_RegLogin/__init__.py', 'w') as f:
+        f.write('')
+    with open('DJ_RegLogin/migrations/__init__.py', 'w') as f:
+        f.write('')
+    
+    # Create apps.py
+    apps_py_content = '''from django.apps import AppConfig
+
+class DJ_RegLoginConfig(AppConfig):
+    name = 'DJ_RegLogin'
+    verbose_name = "Contents"
+'''
+    with open('DJ_RegLogin/apps.py', 'w') as f:
+        f.write(apps_py_content)
+    
+    # Create models.py with ForeignKey to mixed-case app
+    models_py_content = '''from django.db import models
+from django.contrib.auth.models import User
+
+class Category(models.Model):
+    title = models.CharField(max_length=100, db_index=True)
+    slug = models.SlugField(max_length=100, db_index=True)
+    
+    class Meta:
+        verbose_name = 'Category'
+        verbose_name_plural = 'Categories'
+    
+    def __str__(self):
+        return self.title
+
+class Content(models.Model):
+    title = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(max_length=100, unique=True)
+    body = models.TextField()  # Using TextField instead of RichTextField for simplicity
+    posted = models.DateTimeField(db_index=True, auto_now_add=True)
+    ip = models.GenericIPAddressField(editable=False)
+    category = models.ForeignKey('Category', on_delete=models.CASCADE)  # This should cause the issue
+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)
+    
+    def __str__(self):
+        return self.title
+'''
+    with open('DJ_RegLogin/models.py', 'w') as f:
+        f.write(models_py_content)
+    
+    print("Created test app structure")
+    print("Attempting to run makemigrations...")
+    
+    # Try to run makemigrations
+    sys.argv = ['manage.py', 'makemigrations', 'DJ_RegLogin']
+    execute_from_command_line(sys.argv)
+    
+    print("makemigrations completed successfully!")
+
+except Exception as e:
+    print(f"Error occurred: {e}")
+    import traceback
+    traceback.print_exc()
+
+finally:
+    # Clean up
+    os.chdir('/')
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/trace_issue.py b/trace_issue.py
new file mode 100644
index 0000000000..fcab3405c2
--- /dev/null
+++ b/trace_issue.py
@@ -0,0 +1,144 @@
+#!/usr/bin/env python3
+"""
+Script to trace exactly where the app label gets converted to lowercase
+"""
+
+import os
+import sys
+import tempfile
+import shutil
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Create a temporary directory for our test
+temp_dir = tempfile.mkdtemp()
+os.chdir(temp_dir)
+
+# Add current directory to Python path so Django can find the app
+sys.path.insert(0, temp_dir)
+
+try:
+    # Configure Django settings (minimal setup to avoid admin errors)
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'DJ_RegLogin',  # Mixed-case app name
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': os.path.join(temp_dir, 'test.db'),
+            }
+        },
+        USE_TZ=True,
+    )
+
+    # Create the app directory structure
+    os.makedirs('DJ_RegLogin', exist_ok=True)
+    os.makedirs('DJ_RegLogin/migrations', exist_ok=True)
+    
+    # Create __init__.py files
+    with open('DJ_RegLogin/__init__.py', 'w') as f:
+        f.write('')
+    with open('DJ_RegLogin/migrations/__init__.py', 'w') as f:
+        f.write('')
+    
+    # Create apps.py
+    apps_py_content = '''from django.apps import AppConfig
+
+class DJ_RegLoginConfig(AppConfig):
+    name = 'DJ_RegLogin'
+    verbose_name = "Contents"
+'''
+    with open('DJ_RegLogin/apps.py', 'w') as f:
+        f.write(apps_py_content)
+    
+    # Create models.py with ForeignKey to mixed-case app
+    models_py_content = '''from django.db import models
+from django.contrib.auth.models import User
+
+class Category(models.Model):
+    title = models.CharField(max_length=100, db_index=True)
+    slug = models.SlugField(max_length=100, db_index=True)
+    
+    class Meta:
+        verbose_name = 'Category'
+        verbose_name_plural = 'Categories'
+    
+    def __str__(self):
+        return self.title
+
+class Content(models.Model):
+    title = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(max_length=100, unique=True)
+    body = models.TextField()  # Using TextField instead of RichTextField for simplicity
+    posted = models.DateTimeField(db_index=True, auto_now_add=True)
+    ip = models.GenericIPAddressField(editable=False)
+    category = models.ForeignKey('Category', on_delete=models.CASCADE)  # This should cause the issue
+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)
+    
+    def __str__(self):
+        return self.title
+'''
+    with open('DJ_RegLogin/models.py', 'w') as f:
+        f.write(models_py_content)
+    
+    print("Created test app structure")
+    
+    # Import Django and set up
+    from django.apps import apps
+    from django.db.models.fields.related import resolve_relation, lazy_related_operation
+    from django.db.models.utils import make_model_tuple
+    
+    # Populate apps
+    apps.populate(settings.INSTALLED_APPS)
+    
+    # Test the make_model_tuple function
+    print("Testing make_model_tuple:")
+    result = make_model_tuple('DJ_RegLogin.Category')
+    print(f"  make_model_tuple('DJ_RegLogin.Category') = {result}")
+    
+    # Test resolve_relation
+    print("\nTesting resolve_relation:")
+    from django.db import models
+    class TestModel:
+        class _meta:
+            app_label = 'DJ_RegLogin'
+    
+    result = resolve_relation(TestModel, 'Category')
+    print(f"  resolve_relation(TestModel, 'Category') = {result}")
+    
+    # Test lazy_related_operation with a simple function
+    def test_function(model):
+        print(f"  test_function called with: {model}")
+    
+    print("\nTesting lazy_related_operation:")
+    # Create a proper model class for testing
+    class TestModelClass:
+        class _meta:
+            app_label = 'DJ_RegLogin'
+            apps = apps
+    
+    try:
+        result = lazy_related_operation(test_function, TestModelClass, 'Category')
+        print(f"  lazy_related_operation result: {result}")
+    except Exception as e:
+        print(f"  lazy_related_operation error: {e}")
+    
+    # Check pending operations
+    print(f"\nPending operations: {apps._pending_operations}")
+    for key, operations in apps._pending_operations.items():
+        print(f"  {key}: {len(operations)} operations")
+
+except Exception as e:
+    print(f"Error occurred: {e}")
+    import traceback
+    traceback.print_exc()
+
+finally:
+    # Clean up
+    os.chdir('/')
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..372d538849 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -399,6 +399,13 @@ def display_for_field(value, field, empty_value_display):
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
     else:
+        from django.db.models.fields.json import JSONField
+        from django.forms import fields
+        
+        if isinstance(field, JSONField):
+            # Use JSONField's form field prepare_value to handle JSON display properly
+            json_form_field = field.formfield()
+            return json_form_field.prepare_value(value)
         return display_for_value(value, empty_value_display)
 
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..408e3ce93a
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for JSONField display fix.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.admin.utils import display_for_field
+from django.db import models
+from django.db.models.fields.json import JSONField
+from django.forms.fields import InvalidJSONInput
+
+# Configure Django settings properly
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        STATIC_URL='/static/',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth', 
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_all_field_types():
+    """Test that all field types still work correctly."""
+    
+    empty_value = '-'
+    
+    # Test 1: BooleanField (should use special handling)
+    print("Test 1: BooleanField with None")
+    bool_field = models.BooleanField()
+    result = display_for_field(None, bool_field, empty_value)
+    print(f"Result: {result}")
+    # Should return the boolean icon for None
+    print("✅ PASS" if '<img' in str(result) else "❌ FAIL")
+    print()
+    
+    # Test 2: CharField 
+    print("Test 2: CharField")
+    char_field = models.CharField()
+    result = display_for_field("test", char_field, empty_value)
+    print(f"Result: {result}")
+    print("✅ PASS" if result == "test" else "❌ FAIL")
+    print()
+    
+    # Test 3: IntegerField
+    print("Test 3: IntegerField")
+    int_field = models.IntegerField()
+    result = display_for_field(123, int_field, empty_value)
+    print(f"Result: {result}")
+    print("✅ PASS" if result == "123" else "❌ FAIL")
+    print()
+    
+    # Test 4: JSONField (our fix)
+    print("Test 4: JSONField")
+    json_field = JSONField()
+    test_data = {"foo": "bar", "number": 42}
+    result = display_for_field(test_data, json_field, empty_value)
+    print(f"Result: {result}")
+    # Should be valid JSON with double quotes
+    import json
+    try:
+        parsed = json.loads(result)
+        print(f"✅ PASS - Valid JSON: {parsed == test_data}")
+    except json.JSONDecodeError:
+        print("❌ FAIL - Invalid JSON")
+    print()
+    
+    # Test 5: JSONField with None
+    print("Test 5: JSONField with None")
+    result = display_for_field(None, json_field, empty_value)
+    print(f"Result: {result}")
+    print("✅ PASS" if result == empty_value else "❌ FAIL")
+    print()
+    
+    # Test 6: JSONField with InvalidJSONInput
+    print("Test 6: JSONField with InvalidJSONInput")
+    invalid_input = InvalidJSONInput('invalid json')
+    result = display_for_field(invalid_input, json_field, empty_value)
+    print(f"Result: {result}")
+    print(f"Type: {type(result)}")
+    print("✅ PASS" if result == invalid_input else "❌ FAIL")
+    print()
+
+if __name__ == '__main__':
+    print("Running comprehensive field display tests...")
+    test_all_field_types()
+    print("All tests completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4b9454d1fa
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""
+Reproduce the JSONField display issue in admin when readonly.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.admin.utils import display_for_field
+from django.db import models
+from django.db.models.fields.json import JSONField
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_jsonfield_display():
+    """Test that JSONField values are properly displayed when readonly."""
+    
+    # Create a test JSONField instance
+    json_field = JSONField()
+    
+    # Test data
+    test_data = {"foo": "bar", "nested": {"key": "value"}}
+    
+    # Test the current behavior
+    result = display_for_field(test_data, json_field, '-')
+    print(f"Current display_for_field result: {result}")
+    print(f"Type of result: {type(result)}")
+    
+    # Check if it's valid JSON (should use double quotes)
+    if "'" in str(result) and '"' not in str(result):
+        print("❌ ISSUE CONFIRMED: JSON is displayed with single quotes instead of double quotes")
+        print("This is not valid JSON format")
+    else:
+        print("✅ JSON is displayed correctly")
+    
+    return result
+
+if __name__ == '__main__':
+    print("Testing JSONField display in admin utils...")
+    test_jsonfield_display()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..14e802aaf2
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,97 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for JSONField display fix.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.admin.utils import display_for_field
+from django.db import models
+from django.db.models.fields.json import JSONField
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_edge_cases():
+    """Test various edge cases for JSONField display."""
+    
+    json_field = JSONField()
+    
+    # Test case 1: None value
+    print("Test 1: None value")
+    result = display_for_field(None, json_field, '-')
+    print(f"Result: {result}")
+    print(f"Expected: -")
+    print(f"✅ PASS" if result == "-" else "❌ FAIL")
+    print()
+    
+    # Test case 2: Empty dict
+    print("Test 2: Empty dict")
+    result = display_for_field({}, json_field, '-')
+    print(f"Result: {result}")
+    print("Expected: {}")
+    print(f"✅ PASS" if result == "{}" else "❌ FAIL")
+    print()
+    
+    # Test case 3: List value
+    print("Test 3: List value")
+    result = display_for_field([1, 2, 3], json_field, '-')
+    print(f"Result: {result}")
+    print(f"Expected: [1, 2, 3]")
+    print(f"✅ PASS" if result == "[1, 2, 3]" else "❌ FAIL")
+    print()
+    
+    # Test case 4: Complex nested structure
+    print("Test 4: Complex nested structure")
+    complex_data = {
+        "string": "hello",
+        "number": 42,
+        "boolean": True,
+        "null": None,
+        "array": [1, "two", False],
+        "nested": {"key": "value", "deep": {"deeper": "value"}}
+    }
+    result = display_for_field(complex_data, json_field, '-')
+    print(f"Result: {result}")
+    # Should be valid JSON with double quotes
+    import json
+    try:
+        parsed = json.loads(result)
+        print(f"✅ PASS - Valid JSON: {parsed == complex_data}")
+    except json.JSONDecodeError:
+        print("❌ FAIL - Invalid JSON")
+    print()
+    
+    # Test case 5: Non-JSONField should still work
+    print("Test 5: Non-JSONField (CharField)")
+    from django.db.models import CharField
+    char_field = CharField()
+    result = display_for_field("test string", char_field, '-')
+    print(f"Result: {result}")
+    print(f"Expected: test string")
+    print(f"✅ PASS" if result == "test string" else "❌ FAIL")
+    print()
+
+if __name__ == '__main__':
+    print("Testing JSONField display edge cases...")
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_invalid_json.py b/test_invalid_json.py
new file mode 100644
index 0000000000..a9f1ce0dc9
--- /dev/null
+++ b/test_invalid_json.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+"""
+Test InvalidJSONInput handling for JSONField display.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.admin.utils import display_for_field
+from django.db.models.fields.json import JSONField
+from django.forms.fields import InvalidJSONInput
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+def test_invalid_json_input():
+    """Test InvalidJSONInput handling."""
+    
+    json_field = JSONField()
+    
+    # Test InvalidJSONInput value (simulates invalid JSON input)
+    invalid_input = InvalidJSONInput('invalid json string')
+    
+    print("Test: InvalidJSONInput handling")
+    result = display_for_field(invalid_input, json_field, '-')
+    print(f"Result: {result}")
+    print(f"Type: {type(result)}")
+    
+    # Should return the InvalidJSONInput object as-is
+    if result == invalid_input:
+        print("✅ PASS - InvalidJSONInput returned as-is")
+    else:
+        print("❌ FAIL - InvalidJSONInput not handled correctly")
+    print()
+
+if __name__ == '__main__':
+    print("Testing InvalidJSONInput handling...")
+    test_invalid_json_input()
\ No newline at end of file
diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index ccc2223a5f..65950590e2 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):
     def identity(self):
         return super().identity + (
             self.through,
-            self.through_fields,
+            make_hashable(self.through_fields),
             self.db_constraint,
         )
 
diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 0000000000..82eccd2fc5
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,133 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models.fields.reverse_related import ManyToManyRel
+from django.utils.hashable import make_hashable
+
+def test_comprehensive_scenarios():
+    """Comprehensive test for the ManyToManyRel fix"""
+    
+    print("=== Comprehensive ManyToManyRel Hashability Test ===")
+    
+    # Test 1: Original issue reproduction
+    print("\n1. Testing original issue (through_fields as list):")
+    rel1 = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThrough",
+        through_fields=['child', 'parent']
+    )
+    try:
+        hash(rel1)
+        print("   ✓ Hash successful")
+    except Exception as e:
+        print(f"   ✗ Error: {e}")
+    
+    # Test 2: Various through_fields types
+    print("\n2. Testing different through_fields types:")
+    test_cases = [
+        (['field1', 'field2'], "list"),
+        (('field1', 'field2'), "tuple"),
+        (None, "None"),
+        ([], "empty list"),
+        (['single_field'], "single element list"),
+    ]
+    
+    for through_fields, description in test_cases:
+        try:
+            rel = ManyToManyRel(
+                field=None,
+                to=models.Model,
+                through="TestThrough",
+                through_fields=through_fields
+            )
+            hash(rel)
+            print(f"   ✓ {description}: Hash successful")
+        except Exception as e:
+            print(f"   ✗ {description}: Error - {e}")
+    
+    # Test 3: Equality and hashing consistency
+    print("\n3. Testing equality and hashing consistency:")
+    rel_a = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThrough",
+        through_fields=['field1', 'field2']
+    )
+    rel_b = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThrough",
+        through_fields=['field1', 'field2']
+    )
+    rel_c = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThrough",
+        through_fields=['field3', 'field4']
+    )
+    
+    try:
+        # Test equality
+        if rel_a == rel_b:
+            print("   ✓ Equality test passed (identical objects)")
+        else:
+            print("   ✗ Equality test failed (identical objects)")
+        
+        if rel_a != rel_c:
+            print("   ✓ Inequality test passed (different through_fields)")
+        else:
+            print("   ✗ Inequality test failed (different through_fields)")
+        
+        # Test hash consistency
+        if hash(rel_a) == hash(rel_b):
+            print("   ✓ Hash consistency test passed")
+        else:
+            print("   ✗ Hash consistency test failed")
+            
+    except Exception as e:
+        print(f"   ✗ Equality/hash tests failed: {e}")
+    
+    # Test 4: Set operations (relying on hashing)
+    print("\n4. Testing set operations:")
+    try:
+        rel_set = {rel_a, rel_b, rel_c}
+        print(f"   ✓ Set creation successful (length: {len(rel_set)})")
+    except Exception as e:
+        print(f"   ✗ Set creation failed: {e}")
+    
+    # Test 5: Dictionary keys (relying on hashing)
+    print("\n5. Testing dictionary key usage:")
+    try:
+        rel_dict = {rel_a: "value_a", rel_b: "value_b", rel_c: "value_c"}
+        print(f"   ✓ Dictionary usage successful (length: {len(rel_dict)})")
+    except Exception as e:
+        print(f"   ✗ Dictionary usage failed: {e}")
+    
+    print("\n=== Test Completed ===")
+
+if __name__ == "__main__":
+    test_comprehensive_scenarios()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..aed938fafa
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,82 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+class Parent(models.Model):
+    name = models.CharField(max_length=256)
+    
+    class Meta:
+        app_label = 'test'
+
+class ProxyParent(Parent):
+    class Meta:
+        proxy = True
+        
+    class Meta:
+        app_label = 'test'
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    many_to_many_field = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=['child', 'parent'],
+        related_name="something"
+    )
+    
+    class Meta:
+        app_label = 'test'
+
+class ManyToManyModel(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+    
+    class Meta:
+        app_label = 'test'
+
+# Try to trigger the issue by checking the model
+try:
+    Child.check()
+    print("No error occurred from model check")
+except Exception as e:
+    print(f"Error occurred from model check: {e}")
+    print(f"Error type: {type(e)}")
+
+# Try to reproduce the issue more directly by creating hash of ManyToManyRel
+try:
+    from django.db.models.fields.reverse_related import ManyToManyRel
+    # Create a ManyToManyRel object with through_fields as list
+    rel = ManyToManyRel(
+        field=None,
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=['child', 'parent']
+    )
+    hash(rel)  # This should trigger the error
+    print("No error occurred from direct hash")
+except Exception as e:
+    print(f"Error occurred from direct hash: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..757671835d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,111 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models.fields.reverse_related import ManyToManyRel
+from django.utils.hashable import make_hashable
+
+def test_through_fields_edge_cases():
+    """Test various edge cases for through_fields"""
+    
+    # Test case 1: through_fields as list (the original issue)
+    print("Test 1: through_fields as list")
+    rel1 = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThroughModel",
+        through_fields=['field1', 'field2']
+    )
+    try:
+        hash(rel1)
+        print("✓ Hash successful for list through_fields")
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    # Test case 2: through_fields as None
+    print("Test 2: through_fields as None")
+    rel2 = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThroughModel",
+        through_fields=None
+    )
+    try:
+        hash(rel2)
+        print("✓ Hash successful for None through_fields")
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    # Test case 3: through_fields as tuple
+    print("Test 3: through_fields as tuple")
+    rel3 = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThroughModel",
+        through_fields=('field1', 'field2')
+    )
+    try:
+        hash(rel3)
+        print("✓ Hash successful for tuple through_fields")
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    # Test case 4: through_fields as empty list
+    print("Test 4: through_fields as empty list")
+    rel4 = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThroughModel",
+        through_fields=[]
+    )
+    try:
+        hash(rel4)
+        print("✓ Hash successful for empty list through_fields")
+    except Exception as e:
+        print(f"✗ Error: {e}")
+    
+    # Test case 5: Test equality comparison
+    print("Test 5: Equality comparison")
+    rel5a = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThroughModel",
+        through_fields=['field1', 'field2']
+    )
+    rel5b = ManyToManyRel(
+        field=None,
+        to=models.Model,
+        through="TestThroughModel",
+        through_fields=['field1', 'field2']
+    )
+    try:
+        if rel5a == rel5b:
+            print("✓ Equality comparison successful")
+        else:
+            print("✗ Equality comparison failed")
+    except Exception as e:
+        print(f"✗ Error in equality comparison: {e}")
+
+if __name__ == "__main__":
+    test_through_fields_edge_cases()
\ No newline at end of file
diff --git a/test_original_functionality.py b/test_original_functionality.py
new file mode 100644
index 0000000000..41b4a42b84
--- /dev/null
+++ b/test_original_functionality.py
@@ -0,0 +1,68 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models.fields.reverse_related import ForeignObjectRel, ManyToOneRel, OneToOneRel
+
+def test_original_functionality():
+    """Test that original functionality still works"""
+    
+    print("Testing ForeignObjectRel functionality:")
+    rel1 = ForeignObjectRel(
+        field=None,
+        to=models.Model,
+        limit_choices_to={'some_field': 'some_value'}
+    )
+    try:
+        hash(rel1)
+        print("✓ ForeignObjectRel hash successful")
+    except Exception as e:
+        print(f"✗ ForeignObjectRel error: {e}")
+    
+    print("Testing ManyToOneRel functionality:")
+    rel2 = ManyToOneRel(
+        field=None,
+        to=models.Model,
+        field_name='test_field'
+    )
+    try:
+        hash(rel2)
+        print("✓ ManyToOneRel hash successful")
+    except Exception as e:
+        print(f"✗ ManyToOneRel error: {e}")
+    
+    print("Testing OneToOneRel functionality:")
+    rel3 = OneToOneRel(
+        field=None,
+        to=models.Model,
+        field_name='test_field'
+    )
+    try:
+        hash(rel3)
+        print("✓ OneToOneRel hash successful")
+    except Exception as e:
+        print(f"✗ OneToOneRel error: {e}")
+
+if __name__ == "__main__":
+    test_original_functionality()
\ No newline at end of file
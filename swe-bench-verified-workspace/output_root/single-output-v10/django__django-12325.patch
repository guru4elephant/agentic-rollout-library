diff --git a/django/db/models/base.py b/django/db/models/base.py
index 8ea6c05ef9..a8a7a6376b 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -200,9 +200,9 @@ class ModelBase(type):
             # Skip concrete parent classes.
             if base != new_class and not base._meta.abstract:
                 continue
-            # Locate OneToOneField instances.
+            # Locate OneToOneField instances with parent_link=True.
             for field in base._meta.local_fields:
-                if isinstance(field, OneToOneField):
+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:
                     related = resolve_relation(new_class, field.remote_field.model)
                     parent_links[make_model_tuple(related)] = field
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..406f682307
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Final comprehensive test for the parent_link fix...")
+
+# Test the exact scenario from the GitHub issue
+class Document(models.Model):
+    class Meta:
+        app_label = 'test'
+
+print("\n=== Original failing case: parent_link field first ===")
+try:
+    class Picking1(Document):
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        class Meta:
+            app_label = 'test'
+    
+    print("SUCCESS: Model created without error")
+    # Verify the correct field is used as parent link
+    parent_field = Picking1._meta.parents[Document]
+    print(f"Parent field: {parent_field.name}")
+    print(f"Parent link: {parent_field.remote_field.parent_link}")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\n=== Original working case: parent_link field second ===")
+try:
+    class Picking2(Document):
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        class Meta:
+            app_label = 'test'
+    
+    print("SUCCESS: Model created without error")
+    # Verify the correct field is used as parent link
+    parent_field = Picking2._meta.parents[Document]
+    print(f"Parent field: {parent_field.name}")
+    print(f"Parent link: {parent_field.remote_field.parent_link}")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\n=== Test completed ===")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..22446f83a6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Testing the issue with OneToOneField order and parent_link...")
+
+# Define Document model first with proper app_label
+class Document(models.Model):
+    class Meta:
+        app_label = 'test'
+
+# Test case 1: This should fail according to the issue
+print("\n=== Test case 1: parent_link field defined first ===")
+try:
+    class Picking1(Document):
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        class Meta:
+            app_label = 'test'
+    
+    print("SUCCESS: Picking1 model created without error")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test case 2: This should work according to the issue
+print("\n=== Test case 2: parent_link field defined second ===")
+try:
+    class Picking2(Document):
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        class Meta:
+            app_label = 'test'
+    
+    print("SUCCESS: Picking2 model created without error")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+print("\n=== Done ===")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..391c96bc3f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.db import models
+
+print("Testing edge cases for the parent_link fix...")
+
+# Define Document model first with proper app_label
+class Document(models.Model):
+    class Meta:
+        app_label = 'test'
+
+# Test case 1: Multiple OneToOneFields, only one with parent_link=True
+print("\n=== Test case 1: Multiple OneToOneFields, only one parent_link ===")
+try:
+    class Picking1(Document):
+        # This should NOT be considered as parent link
+        origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)
+        # This SHOULD be considered as parent link
+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        # Another regular OneToOneField
+        another_ref = models.OneToOneField(Document, related_name='another', on_delete=models.SET_NULL, null=True)
+        class Meta:
+            app_label = 'test'
+    
+    print("SUCCESS: Picking1 model created without error")
+    print(f"Parent field: {Picking1._meta.parents}")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test case 2: No explicit parent_link field (should auto-create)
+print("\n=== Test case 2: No explicit parent_link field ===")
+try:
+    class Picking2(Document):
+        # No explicit parent link, should auto-create one
+        name = models.CharField(max_length=100)
+        class Meta:
+            app_label = 'test'
+    
+    print("SUCCESS: Picking2 model created without error")
+    print(f"Parent field: {Picking2._meta.parents}")
+except Exception as e:
+    print(f"ERROR: {e}")
+
+# Test case 3: Multiple parent_link fields (should be invalid)
+print("\n=== Test case 3: Multiple parent_link fields (should fail) ===")
+try:
+    class Picking3(Document):
+        # Multiple parent links should fail
+        ptr1 = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        ptr2 = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')
+        class Meta:
+            app_label = 'test'
+    
+    print("ERROR: This should have failed but didn't")
+except Exception as e:
+    print(f"EXPECTED ERROR: {e}")
+
+print("\n=== Edge case testing done ===")
\ No newline at end of file
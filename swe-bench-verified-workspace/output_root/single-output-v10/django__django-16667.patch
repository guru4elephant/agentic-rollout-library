diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..f4bc74b7cd 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1157,7 +1157,7 @@ class SelectDateWidget(Widget):
             input_format = formats.sanitize_strftime_format(input_format)
             try:
                 date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a812d51eb6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""Script to reproduce the SelectDateWidget OverflowError issue."""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms import SelectDateWidget
+from django.http import HttpResponse
+
+class ReproForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def test_repro():
+    # Simulate a GET request with large integer values
+    fake_get_data = {
+        'my_date_day': '1',
+        'my_date_month': '1', 
+        'my_date_year': '1234567821345678'  # This should cause OverflowError
+    }
+    
+    form = ReproForm(fake_get_data)
+    
+    try:
+        is_valid = form.is_valid()
+        print(f"Form validation result: {is_valid}")
+        if is_valid:
+            print("Form is valid")
+        else:
+            print("Form is invalid")
+    except OverflowError as e:
+        print(f"OverflowError caught: {e}")
+        return False
+    except Exception as e:
+        print(f"Other exception: {e}")
+        return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_repro()
+    if success:
+        print("Test completed without OverflowError")
+    else:
+        print("Test reproduced the OverflowError")
\ No newline at end of file
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..02cad96600
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python3
+"""Test basic SelectDateWidget functionality after our fix."""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms import SelectDateWidget
+
+def test_basic_functionality():
+    """Test that basic SelectDateWidget functionality still works."""
+    
+    # Test 1: Normal valid date
+    widget = SelectDateWidget()
+    data = {'test_day': '15', 'test_month': '6', 'test_year': '2023'}
+    result = widget.value_from_datadict(data, {}, 'test')
+    print(f"Valid date result: {result}")
+    
+    # Test 2: Invalid date (should trigger ValueError)
+    data = {'test_day': '31', 'test_month': '2', 'test_year': '2023'}
+    result = widget.value_from_datadict(data, {}, 'test')
+    print(f"Invalid date result: {result}")
+    
+    # Test 3: Overflow case (should trigger OverflowError but be handled)
+    data = {'test_day': '1', 'test_month': '1', 'test_year': '1234567821345678'}
+    result = widget.value_from_datadict(data, {}, 'test')
+    print(f"Overflow date result: {result}")
+    
+    # Test 4: Empty values
+    data = {'test_day': '', 'test_month': '', 'test_year': ''}
+    result = widget.value_from_datadict(data, {}, 'test')
+    print(f"Empty values result: {result}")
+    
+    # Test 5: Missing values
+    data = {'test_day': '15', 'test_month': '6'}  # Missing year
+    result = widget.value_from_datadict(data, {}, 'test')
+    print(f"Missing year result: {result}")
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_basic_functionality()
+    if success:
+        print("\nAll basic functionality tests passed!")
+    else:
+        print("\nSome tests failed!")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..1d4427a539
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+"""Test edge cases for the SelectDateWidget OverflowError fix."""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django import forms
+from django.forms import SelectDateWidget
+
+class TestForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def test_edge_cases():
+    test_cases = [
+        # Case 1: Very large positive year (should trigger OverflowError)
+        {'my_date_day': '1', 'my_date_month': '1', 'my_date_year': '1234567821345678'},
+        
+        # Case 2: Very large negative year (should trigger OverflowError)
+        {'my_date_day': '1', 'my_date_month': '1', 'my_date_year': '-1234567821345678'},
+        
+        # Case 3: Very large month (should trigger OverflowError)
+        {'my_date_day': '1', 'my_date_month': '1234567890', 'my_date_year': '2023'},
+        
+        # Case 4: Very large day (should trigger OverflowError) 
+        {'my_date_day': '1234567890', 'my_date_month': '1', 'my_date_year': '2023'},
+        
+        # Case 5: Valid date (should work normally)
+        {'my_date_day': '15', 'my_date_month': '6', 'my_date_year': '2023'},
+        
+        # Case 6: Invalid date (should trigger ValueError)
+        {'my_date_day': '31', 'my_date_month': '2', 'my_date_year': '2023'},
+        
+        # Case 7: Empty values
+        {'my_date_day': '', 'my_date_month': '', 'my_date_year': ''},
+    ]
+    
+    for i, test_data in enumerate(test_cases, 1):
+        print(f"\nTest Case {i}: {test_data}")
+        form = TestForm(test_data)
+        
+        try:
+            is_valid = form.is_valid()
+            print(f"  Form validation result: {is_valid}")
+            if not is_valid:
+                print(f"  Form errors: {form.errors}")
+        except Exception as e:
+            print(f"  ERROR: {type(e).__name__}: {e}")
+            return False
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_edge_cases()
+    if success:
+        print("\nAll test cases completed successfully!")
+    else:
+        print("\nSome test cases failed!")
\ No newline at end of file
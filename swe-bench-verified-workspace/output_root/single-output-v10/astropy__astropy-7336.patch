diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a850..9b48e4f0c1 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -221,7 +221,11 @@ class QuantityInput:
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
             if wrapped_signature.return_annotation is not inspect.Signature.empty:
-                return return_.to(wrapped_signature.return_annotation)
+                # Handle the case where return annotation is None
+                if wrapped_signature.return_annotation is None:
+                    return return_
+                else:
+                    return return_.to(wrapped_signature.return_annotation)
             else:
                 return return_
 
diff --git a/debug_return_annotation.py b/debug_return_annotation.py
new file mode 100644
index 0000000000..44f49dd00b
--- /dev/null
+++ b/debug_return_annotation.py
@@ -0,0 +1,20 @@
+import inspect
+import astropy.units as u
+
+
+class PoC(object):
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+
+# Let's inspect the signature
+sig = inspect.signature(PoC.__init__)
+print(f"Return annotation: {sig.return_annotation}")
+print(f"Return annotation type: {type(sig.return_annotation)}")
+print(f"Is None: {sig.return_annotation is None}")
+
+
+if __name__ == '__main__':
+    poc = PoC(1.*u.V)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cc943f0261
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,12 @@
+import astropy.units as u
+
+
+class PoC(object):
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+
+if __name__ == '__main__':
+    poc = PoC(1.*u.V)
\ No newline at end of file
diff --git a/test_edge_case_return_none.py b/test_edge_case_return_none.py
new file mode 100644
index 0000000000..96647723cc
--- /dev/null
+++ b/test_edge_case_return_none.py
@@ -0,0 +1,17 @@
+import astropy.units as u
+
+
+class TestClass(object):
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        # This should still work even if we accidentally return something
+        # (though it would be a type error, it shouldn't crash the decorator)
+        return "something"
+
+
+if __name__ == '__main__':
+    try:
+        tc = TestClass(1.*u.V)
+        print("✓ Function with None annotation that returns something works")
+    except Exception as e:
+        print(f"✗ Unexpected error: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..216779b2f9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,52 @@
+import astropy.units as u
+
+
+# Test case 1: Constructor with None return annotation
+class TestClass1(object):
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        self.voltage = voltage
+
+
+# Test case 2: Regular method with None return annotation  
+class TestClass2(object):
+    @u.quantity_input
+    def method_returns_none(self, current: u.A) -> None:
+        pass
+
+
+# Test case 3: Method with unit return annotation (should still work)
+class TestClass3(object):
+    @u.quantity_input
+    def method_returns_unit(self, voltage: u.V) -> u.V:
+        return voltage
+
+
+# Test case 4: Method with no return annotation (should still work)
+class TestClass4(object):
+    @u.quantity_input
+    def method_no_annotation(self, voltage: u.V):
+        return voltage
+
+
+if __name__ == '__main__':
+    print("Testing constructor with None return annotation...")
+    tc1 = TestClass1(1.*u.V)
+    print("✓ Constructor works")
+    
+    print("Testing method with None return annotation...")
+    tc2 = TestClass2()
+    tc2.method_returns_none(1.*u.A)
+    print("✓ Method with None return works")
+    
+    print("Testing method with unit return annotation...")
+    tc3 = TestClass3()
+    result = tc3.method_returns_unit(1.*u.V)
+    print(f"✓ Method with unit return works: {result}")
+    
+    print("Testing method with no return annotation...")
+    tc4 = TestClass4()
+    result = tc4.method_no_annotation(1.*u.V)
+    print(f"✓ Method with no return annotation works: {result}")
+    
+    print("All tests passed!")
\ No newline at end of file
diff --git a/test_validation_still_works.py b/test_validation_still_works.py
new file mode 100644
index 0000000000..d7c9e65094
--- /dev/null
+++ b/test_validation_still_works.py
@@ -0,0 +1,22 @@
+import astropy.units as u
+
+
+class TestClass(object):
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        self.voltage = voltage
+
+
+if __name__ == '__main__':
+    print("Testing correct unit input...")
+    tc = TestClass(1.*u.V)  # This should work
+    print("✓ Correct unit works")
+    
+    print("Testing incorrect unit input...")
+    try:
+        tc = TestClass(1.*u.A)  # This should fail
+        print("✗ Incorrect unit should have failed!")
+    except Exception as e:
+        print(f"✓ Incorrect unit properly failed: {type(e).__name__}")
+    
+    print("Validation still works correctly!")
\ No newline at end of file
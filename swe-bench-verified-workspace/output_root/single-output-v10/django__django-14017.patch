diff --git a/check_conditional_attr.py b/check_conditional_attr.py
new file mode 100644
index 0000000000..84a484885f
--- /dev/null
+++ b/check_conditional_attr.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""
+Check which expressions have the conditional attribute.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists, F, Value, When, Case
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Checking conditional attribute on various expressions:")
+
+expressions = [
+    ("Exists", Exists(Product.objects.all())),
+    ("F", F('price')),
+    ("Value", Value('test')),
+    ("Case", Case(When(price__gt=10, then=Value('expensive')), default=Value('cheap'))),
+    ("When", When(price__gt=10, then=Value('expensive'))),
+    ("Q", Q(name='test')),
+]
+
+for name, expr in expressions:
+    has_conditional = hasattr(expr, 'conditional')
+    conditional_value = getattr(expr, 'conditional', None) if has_conditional else None
+    print(f"{name}: has_conditional={has_conditional}, value={conditional_value}")
\ No newline at end of file
diff --git a/debug_combine.py b/debug_combine.py
new file mode 100644
index 0000000000..03612bca25
--- /dev/null
+++ b/debug_combine.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+"""
+Debug script to understand what's happening in _combine.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the _combine method directly
+exists_obj = Exists(Product.objects.all())
+q_obj = Q()
+
+print("Testing _combine method directly:")
+try:
+    result = q_obj._combine(exists_obj, q_obj.AND)
+    print(f"âœ“ _combine works: {result}")
+except Exception as e:
+    print(f"âœ— _combine failed: {e}")
+    import traceback
+    traceback.print_exc()
+
+print("\nTesting Q() & Exists(...):")
+try:
+    result = q_obj & exists_obj
+    print(f"âœ“ Q() & Exists(...) works: {result}")
+except Exception as e:
+    print(f"âœ— Q() & Exists(...) failed: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..8b4ccceaf4 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -137,11 +137,15 @@ class Combinable:
         return self._combine(other, self.POW, True)
 
     def __rand__(self, other):
+        if getattr(self, 'conditional', False) and getattr(other, 'conditional', False):
+            return Q(other) & Q(self)
         raise NotImplementedError(
             "Use .bitand() and .bitor() for bitwise logical operations."
         )
 
     def __ror__(self, other):
+        if getattr(self, 'conditional', False) and getattr(other, 'conditional', False):
+            return Q(other) | Q(self)
         raise NotImplementedError(
             "Use .bitand() and .bitor() for bitwise logical operations."
         )
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..dced3f39ac 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,7 +41,16 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
-            raise TypeError(other)
+            # Check if other is a conditional expression
+            if getattr(other, 'conditional', False):
+                # For conditional expressions, create a new Q object and combine
+                obj = type(self)()
+                obj.connector = conn
+                obj.add(self, conn)
+                obj.add(other, conn)
+                return obj
+            else:
+                raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..dde36d1830
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test to verify the fix for the GitHub issue.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("=== Final Test: GitHub Issue Fix ===")
+print("Original issue: Q(...) & Exists(...) raises TypeError but should work")
+
+# Test the exact scenario from the GitHub issue
+print("\n1. Testing Exists(...) & Q(...) (should work):")
+try:
+    result1 = Exists(Product.objects.all()) & Q()
+    print(f"âœ“ SUCCESS: {result1}")
+except Exception as e:
+    print(f"âœ— FAILED: {e}")
+
+print("\n2. Testing Q(...) & Exists(...) (was broken, should now work):")
+try:
+    result2 = Q() & Exists(Product.objects.all())
+    print(f"âœ“ SUCCESS: {result2}")
+except Exception as e:
+    print(f"âœ— FAILED: {e}")
+
+print("\n3. Testing commutativity (results should be equivalent):")
+if str(result1) == str(result2):
+    print("âœ“ SUCCESS: Operations are commutative")
+else:
+    print("âœ— FAILED: Operations are not commutative")
+
+print("\n4. Testing OR operations:")
+try:
+    result3 = Exists(Product.objects.all()) | Q()
+    result4 = Q() | Exists(Product.objects.all())
+    print(f"âœ“ SUCCESS: OR operations work both ways")
+    if str(result3) == str(result4):
+        print("âœ“ SUCCESS: OR operations are commutative")
+    else:
+        print("âœ— FAILED: OR operations are not commutative")
+except Exception as e:
+    print(f"âœ— FAILED: {e}")
+
+print("\n=== Fix Summary ===")
+print("The fix allows Q objects to combine with conditional expressions")
+print("(like Exists) using logical operators (& and |).")
+print("The operations are now commutative as expected.")
+print("Non-conditional expressions still correctly raise TypeError.")
+
+print("\nðŸŽ‰ GitHub issue has been RESOLVED! ðŸŽ‰")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5529d1d58d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the Q(...) & Exists(...) TypeError issue.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Testing Exists(...) & Q(...) (should work):")
+try:
+    result1 = Exists(Product.objects.all()) & Q()
+    print(f"âœ“ Success: {result1}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
+
+print("\nTesting Q(...) & Exists(...) (should fail with TypeError):")
+try:
+    result2 = Q() & Exists(Product.objects.all())
+    print(f"âœ“ Success: {result2}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
+
+print("\nThe issue is that the second operation should work but raises a TypeError.")
\ No newline at end of file
diff --git a/run_basic_tests.py b/run_basic_tests.py
new file mode 100644
index 0000000000..a377b6a8d9
--- /dev/null
+++ b/run_basic_tests.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+"""
+Run basic Django tests to ensure our changes don't break anything.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q
+from django.test import TestCase
+
+class SimpleTest(TestCase):
+    def test_basic_q_operations(self):
+        """Test that basic Q operations still work"""
+        # Test AND operation
+        q1 = Q(name='test') & Q(price=10)
+        self.assertIsInstance(q1, Q)
+        
+        # Test OR operation  
+        q2 = Q(name='test') | Q(price=10)
+        self.assertIsInstance(q2, Q)
+        
+        # Test empty Q
+        q3 = Q() & Q()
+        self.assertIsInstance(q3, Q)
+        
+        # Test inversion
+        q4 = ~Q(name='test')
+        self.assertIsInstance(q4, Q)
+        
+        print("âœ“ All basic Q operations work correctly")
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_conditional.py b/test_conditional.py
new file mode 100644
index 0000000000..c513636193
--- /dev/null
+++ b/test_conditional.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""
+Test script to check if Exists has the conditional attribute.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test if Exists has conditional attribute
+exists_obj = Exists(Product.objects.all())
+print(f"Exists has conditional attribute: {hasattr(exists_obj, 'conditional')}")
+if hasattr(exists_obj, 'conditional'):
+    print(f"Exists conditional value: {exists_obj.conditional}")
+
+# Test if Q has conditional attribute
+q_obj = Q()
+print(f"Q has conditional attribute: {hasattr(q_obj, 'conditional')}")
+if hasattr(q_obj, 'conditional'):
+    print(f"Q conditional value: {q_obj.conditional}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..d8c74f0c5e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the Q & Exists fix.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Testing edge cases:")
+
+print("\n1. Testing with non-conditional expressions (should fail):")
+try:
+    result = Q() & 42  # integer is not conditional
+    print(f"âœ— Unexpected success: {result}")
+except TypeError as e:
+    print(f"âœ“ Correctly failed with TypeError: {e}")
+
+print("\n2. Testing empty Q with Exists:")
+try:
+    result = Q() & Exists(Product.objects.all())
+    print(f"âœ“ Success: {result}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
+
+print("\n3. Testing Exists with empty Q:")
+try:
+    result = Exists(Product.objects.all()) & Q()
+    print(f"âœ“ Success: {result}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
+
+print("\n4. Testing chained operations:")
+try:
+    result = Q(name='test') & Exists(Product.objects.all()) & Q(price=10)
+    print(f"âœ“ Success: {result}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
+
+print("\n5. Testing OR operations with non-empty Q:")
+try:
+    result = Q(name='test') | Exists(Product.objects.all())
+    print(f"âœ“ Success: {result}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
\ No newline at end of file
diff --git a/test_or_operation.py b/test_or_operation.py
new file mode 100644
index 0000000000..694af4c688
--- /dev/null
+++ b/test_or_operation.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+"""
+Test script to verify OR operations work with Exists and Q.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Testing OR operations:")
+
+print("\nTesting Exists(...) | Q(...):")
+try:
+    result1 = Exists(Product.objects.all()) | Q()
+    print(f"âœ“ Success: {result1}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
+
+print("\nTesting Q(...) | Exists(...):")
+try:
+    result2 = Q() | Exists(Product.objects.all())
+    print(f"âœ“ Success: {result2}")
+except Exception as e:
+    print(f"âœ— Failed: {e}")
+
+print("\nBoth OR operations should work now.")
\ No newline at end of file
diff --git a/test_other_conditional.py b/test_other_conditional.py
new file mode 100644
index 0000000000..7837886735
--- /dev/null
+++ b/test_other_conditional.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""
+Test other conditional expressions to ensure our fix works broadly.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists, F, Value, When, Case
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    price = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    class Meta:
+        app_label = 'test'
+
+print("Testing other conditional expressions:")
+
+# Test F expressions (which should also be conditional)
+print("\n1. Testing F expressions:")
+try:
+    result = Q() & F('price')
+    print(f"âœ“ F expression works: {result}")
+except Exception as e:
+    print(f"âœ— F expression failed: {e}")
+
+# Test Case/When expressions
+print("\n2. Testing Case/When expressions:")
+try:
+    case_expr = Case(When(price__gt=10, then=Value('expensive')), default=Value('cheap'))
+    result = Q() & case_expr
+    print(f"âœ“ Case expression works: {result}")
+except Exception as e:
+    print(f"âœ— Case expression failed: {e}")
+
+# Test Value expressions (which should NOT be conditional)
+print("\n3. Testing Value expressions (should fail):")
+try:
+    result = Q() & Value('test')
+    print(f"âœ— Value expression unexpectedly worked: {result}")
+except TypeError as e:
+    print(f"âœ“ Value expression correctly failed: {e}")
+
+print("\nTesting complete!")
\ No newline at end of file
diff --git a/test_q_wrapping.py b/test_q_wrapping.py
new file mode 100644
index 0000000000..26d517416f
--- /dev/null
+++ b/test_q_wrapping.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Test script to understand how Q handles expressions.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Exists
+
+# Create a simple model for testing
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test how Q handles expressions
+exists_obj = Exists(Product.objects.all())
+
+# Test 1: Direct wrapping
+try:
+    q_wrapped = Q(exists_obj)
+    print(f"âœ“ Q(exists_obj) works: {q_wrapped}")
+except Exception as e:
+    print(f"âœ— Q(exists_obj) failed: {e}")
+
+# Test 2: Using as positional argument
+try:
+    q_wrapped = Q(exists_obj)
+    print(f"âœ“ Q(exists_obj) works: {q_wrapped}")
+except Exception as e:
+    print(f"âœ— Q(exists_obj) failed: {e}")
+
+# Test 3: Check what happens in Combinable
+try:
+    result = exists_obj & Q()
+    print(f"âœ“ exists_obj & Q() works: {result}")
+except Exception as e:
+    print(f"âœ— exists_obj & Q() failed: {e}")
\ No newline at end of file
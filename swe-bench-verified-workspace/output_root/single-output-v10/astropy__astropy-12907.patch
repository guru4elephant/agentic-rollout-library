diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index a308e27297..45bea36085 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -242,7 +242,7 @@ def _cstack(left, right):
         cright = _coord_matrix(right, 'right', noutp)
     else:
         cright = np.zeros((noutp, right.shape[1]))
-        cright[-right.shape[0]:, -right.shape[1]:] = 1
+        cright[-right.shape[0]:, -right.shape[1]:] = right
 
     return np.hstack([cleft, cright])
 
diff --git a/pyproject.toml b/pyproject.toml
index 3364d30740..02dddbe713 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b095c39aeb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the separability_matrix issue with nested CompoundModels.
+"""
+
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+print("Testing separability_matrix with nested CompoundModels...")
+
+# Create the simple compound model
+cm = m.Linear1D(10) & m.Linear1D(5)
+print(f"cm = m.Linear1D(10) & m.Linear1D(5)")
+print(f"separability_matrix(cm):")
+print(separability_matrix(cm))
+print()
+
+# Test with more complex model
+print("m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5):")
+result1 = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))
+print(result1)
+print()
+
+# Test with nested compound model (the problematic case)
+print("m.Pix2Sky_TAN() & cm (nested):")
+result2 = separability_matrix(m.Pix2Sky_TAN() & cm)
+print(result2)
+print()
+
+# Expected result for comparison
+print("Expected result should be similar to the non-nested case:")
+print("array([[ True,  True, False, False],")
+print("       [ True,  True, False, False],")
+print("       [False, False,  True, False],")
+print("       [False, False, False,  True]])")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3bc5395936
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the separability_matrix fix.
+"""
+
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+print("Testing edge cases for separability_matrix...")
+
+# Test 1: Simple models
+print("1. Simple Linear1D models:")
+simple1 = m.Linear1D(1)
+simple2 = m.Linear1D(2)
+print(f"separability_matrix(simple1): {separability_matrix(simple1)}")
+print(f"separability_matrix(simple2): {separability_matrix(simple2)}")
+print()
+
+# Test 2: Basic compound models
+print("2. Basic compound models:")
+basic_compound = simple1 & simple2
+print(f"separability_matrix(simple1 & simple2):")
+print(separability_matrix(basic_compound))
+print()
+
+# Test 3: Multiple levels of nesting
+print("3. Multiple levels of nesting:")
+nested1 = m.Linear1D(1) & m.Linear1D(2)
+nested2 = m.Linear1D(3) & m.Linear1D(4)
+deep_nested = nested1 & nested2
+print(f"separability_matrix((L1 & L2) & (L3 & L4)):")
+print(separability_matrix(deep_nested))
+print()
+
+# Test 4: Mixed models
+print("4. Mixed models (separable and non-separable):")
+mixed = m.Pix2Sky_TAN() & (m.Linear1D(1) & m.Linear1D(2))
+print(f"separability_matrix(Pix2Sky_TAN() & (L1 & L2)):")
+print(separability_matrix(mixed))
+print()
+
+# Test 5: Pipeline composition
+print("5. Pipeline composition:")
+pipeline = (m.Linear1D(1) | m.Linear1D(1)) & (m.Linear1D(2) | m.Linear1D(2))
+print(f"separability_matrix((L1 | L1) & (L2 | L2)):")
+print(separability_matrix(pipeline))
+print()
+
+print("All edge case tests completed!")
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..7c29f82d0b
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+"""
+Verify that the fix specifically addresses the GitHub issue.
+"""
+
+import numpy as np
+from astropy.modeling import models as m
+from astropy.modeling.separable import separability_matrix
+
+print("Verifying the GitHub issue fix...")
+
+# Create the exact models from the issue
+cm = m.Linear1D(10) & m.Linear1D(5)
+
+# Test the exact cases from the issue
+print("1. Simple compound model (should be diagonal):")
+result1 = separability_matrix(cm)
+print(result1)
+expected1 = [[True, False], [False, True]]
+print(f"Expected: {expected1}")
+print(f"Match: {np.array_equal(result1, expected1)}")
+print()
+
+print("2. Non-nested complex model:")
+result2 = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))
+print(result2)
+expected2 = [[True, True, False, False],
+             [True, True, False, False],
+             [False, False, True, False],
+             [False, False, False, True]]
+print(f"Expected: {expected2}")
+print(f"Match: {np.array_equal(result2, expected2)}")
+print()
+
+print("3. Nested compound model (the problematic case):")
+result3 = separability_matrix(m.Pix2Sky_TAN() & cm)
+print(result3)
+expected3 = [[True, True, False, False],
+             [True, True, False, False],
+             [False, False, True, False],
+             [False, False, False, True]]
+print(f"Expected: {expected3}")
+print(f"Match: {np.array_equal(result3, expected3)}")
+print()
+
+# The nested case should now match the non-nested case
+print("4. Nested vs non-nested should be identical:")
+print(f"Results match: {np.array_equal(result2, result3)}")
\ No newline at end of file
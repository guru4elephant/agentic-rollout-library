diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 137e6faa0f..a100f1c499 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):
 
     def _get_edited_object_pks(self, request, prefix):
         """Return POST data values of list_editable primary keys."""
-        pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, self.model._meta.pk.name))
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))
         return [value for key, value in request.POST.items() if pk_pattern.match(key)]
 
     def _get_list_editable_queryset(self, request, prefix):
diff --git a/final_verification_test.py b/final_verification_test.py
new file mode 100644
index 0000000000..8cfa2796aa
--- /dev/null
+++ b/final_verification_test.py
@@ -0,0 +1,133 @@
+#!/usr/bin/env python3
+"""
+Final verification test to demonstrate the fix for the GitHub issue.
+This test shows that the original issue with regex special characters in formset prefix
+has been resolved while maintaining backward compatibility.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.admin.options import ModelAdmin
+from django.contrib.auth.models import User
+from django.test import RequestFactory
+
+def test_github_issue_fix():
+    """
+    Test that demonstrates the fix for the GitHub issue:
+    "Possible data loss in admin changeform view when using regex special characters in formset prefix"
+    """
+    
+    print("=" * 70)
+    print("FINAL VERIFICATION: Testing GitHub Issue Fix")
+    print("=" * 70)
+    
+    # Test case 1: Regex special characters in prefix (the original issue)
+    print("\n1. Testing with regex special characters in prefix (original issue):")
+    factory = RequestFactory()
+    post_data_special = {
+        'form[0]-1-id': '123',      # Should match
+        'form[0]-2-id': '456',      # Should match  
+        'form[0]-3-id': '789',      # Should match
+        'invalid-form-4-id': '999', # Should NOT match
+        'form[0]-id': '000',        # Should NOT match (missing number)
+    }
+    
+    request = factory.post('/admin/test/', data=post_data_special)
+    admin = ModelAdmin(User, None)
+    
+    result_special = admin._get_edited_object_pks(request, "form[0]")
+    expected_special = ['123', '456', '789']
+    
+    print(f"   Prefix: 'form[0]' (contains regex special characters [ and ])")
+    print(f"   Expected: {expected_special}")
+    print(f"   Actual:   {result_special}")
+    
+    if result_special == expected_special:
+        print("   ‚úì SUCCESS: Regex special characters handled correctly!")
+    else:
+        print("   ‚úó FAILURE: Regex special characters not handled correctly")
+        return False
+    
+    # Test case 2: Normal prefix (backward compatibility)
+    print("\n2. Testing with normal prefix (backward compatibility):")
+    post_data_normal = {
+        'form-0-1-id': '111',
+        'form-0-2-id': '222',
+        'form-0-3-id': '333',
+        'invalid-form-4-id': '999',
+        'form-0-id': '000',
+    }
+    
+    request = factory.post('/admin/test/', data=post_data_normal)
+    result_normal = admin._get_edited_object_pks(request, "form-0")
+    expected_normal = ['111', '222', '333']
+    
+    print(f"   Prefix: 'form-0' (normal prefix)")
+    print(f"   Expected: {expected_normal}")
+    print(f"   Actual:   {result_normal}")
+    
+    if result_normal == expected_normal:
+        print("   ‚úì SUCCESS: Backward compatibility maintained!")
+    else:
+        print("   ‚úó FAILURE: Backward compatibility broken")
+        return False
+    
+    # Test case 3: Various regex special characters
+    print("\n3. Testing with various regex special characters:")
+    test_cases = [
+        ("form(0)", {'form(0)-1-id': 'abc'}, ['abc']),
+        ("form{0}", {'form{0}-1-id': 'def'}, ['def']),
+        ("form.0", {'form.0-1-id': 'ghi'}, ['ghi']),
+        ("form+0", {'form+0-1-id': 'jkl'}, ['jkl']),
+        ("form*0", {'form*0-1-id': 'mno'}, ['mno']),
+    ]
+    
+    for prefix, post_data, expected in test_cases:
+        request = factory.post('/admin/test/', data=post_data)
+        result = admin._get_edited_object_pks(request, prefix)
+        
+        print(f"   Prefix: '{prefix}' -> Expected: {expected}, Actual: {result}")
+        if result != expected:
+            print(f"   ‚úó FAILURE: Prefix '{prefix}' not handled correctly")
+            return False
+    
+    print("   ‚úì SUCCESS: All regex special characters handled correctly!")
+    
+    print("\n" + "=" * 70)
+    print("üéâ ALL TESTS PASSED! The GitHub issue has been successfully resolved.")
+    print("   - Regex special characters in formset prefixes are now properly escaped")
+    print("   - Backward compatibility is maintained for normal prefixes")
+    print("   - No data loss occurs when using special characters in formset prefixes")
+    print("=" * 70)
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_github_issue_fix()
+    if not success:
+        print("\n‚ùå TESTS FAILED! The fix needs more work.")
+        exit(1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..980a284995
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with regex special characters in formset prefix.
+"""
+
+import re
+
+def test_regex_issue():
+    """Test the problematic regex pattern with special characters."""
+    
+    # Simulate the problematic line from options.py
+    prefix = "form[0]"  # Contains regex special characters [ and ]
+    pk_name = "id"
+    
+    # This is the current problematic implementation
+    pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, pk_name))
+    
+    # Test cases that should match
+    test_cases = [
+        "form[0]-1-id",
+        "form[0]-123-id",
+        "form[0]-42-id"
+    ]
+    
+    # Test cases that should NOT match
+    negative_test_cases = [
+        "form[0]-1-idd",  # wrong pk name
+        "form[0]-id",     # missing number
+        "form[0]-1-id-extra",  # extra characters
+        "form0-1-id",     # different prefix
+    ]
+    
+    print("Testing current implementation (with regex special characters):")
+    print(f"Pattern: {pk_pattern.pattern}")
+    
+    print("\nPositive test cases (should match):")
+    for test_case in test_cases:
+        match = pk_pattern.match(test_case)
+        print(f"  '{test_case}': {'MATCH' if match else 'NO MATCH'}")
+    
+    print("\nNegative test cases (should NOT match):")
+    for test_case in negative_test_cases:
+        match = pk_pattern.match(test_case)
+        print(f"  '{test_case}': {'MATCH' if match else 'NO MATCH'}")
+    
+    # Now test with the fixed implementation using re.escape()
+    print("\n\nTesting fixed implementation (with re.escape()):")
+    escaped_prefix = re.escape(prefix)
+    fixed_pattern = re.compile(r'{}-\d+-{}$'.format(escaped_prefix, pk_name))
+    print(f"Pattern: {fixed_pattern.pattern}")
+    
+    print("\nPositive test cases (should match):")
+    for test_case in test_cases:
+        match = fixed_pattern.match(test_case)
+        print(f"  '{test_case}': {'MATCH' if match else 'NO MATCH'}")
+    
+    print("\nNegative test cases (should NOT match):")
+    for test_case in negative_test_cases:
+        match = fixed_pattern.match(test_case)
+        print(f"  '{test_case}': {'MATCH' if match else 'NO MATCH'}")
+
+if __name__ == "__main__":
+    test_regex_issue()
\ No newline at end of file
diff --git a/test_django_fix.py b/test_django_fix.py
new file mode 100644
index 0000000000..4522e2f319
--- /dev/null
+++ b/test_django_fix.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Test the actual Django admin functionality with our fix.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.admin.options import ModelAdmin
+from django.contrib.auth.models import User
+from django.test import RequestFactory
+
+def test_fix_with_actual_admin():
+    """Test the actual ModelAdmin functionality with regex special characters."""
+    
+    # Create a mock request with POST data
+    factory = RequestFactory()
+    post_data = {
+        'form[0]-1-id': '123',
+        'form[0]-2-id': '456',
+        'form[0]-3-id': '789',
+        'invalid-form-4-id': '999',  # Should not be matched
+        'form[0]-id': '000',         # Should not be matched (missing number)
+    }
+    
+    request = factory.post('/admin/test/', data=post_data)
+    
+    # Create a ModelAdmin instance
+    class TestModelAdmin(ModelAdmin):
+        pass
+    
+    admin = TestModelAdmin(User, None)
+    
+    # Test the fixed _get_edited_object_pks method
+    result = admin._get_edited_object_pks(request, "form[0]")
+    
+    print("Testing ModelAdmin._get_edited_object_pks with prefix 'form[0]':")
+    print(f"Expected matches: ['123', '456', '789']")
+    print(f"Actual result: {result}")
+    
+    # Verify the result
+    expected = ['123', '456', '789']
+    if result == expected:
+        print("‚úì SUCCESS: Fix works correctly!")
+        return True
+    else:
+        print("‚úó FAILURE: Fix doesn't work as expected")
+        return False
+
+if __name__ == "__main__":
+    success = test_fix_with_actual_admin()
+    if success:
+        print("\nAll tests passed! The fix is working correctly.")
+    else:
+        print("\nTests failed! The fix needs more work.")
\ No newline at end of file
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 0000000000..46076e8b74
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the fix works with various regex special characters.
+"""
+
+import re
+
+def test_comprehensive_regex_fix():
+    """Test the fixed regex pattern with various special characters."""
+    
+    # Test various prefixes with regex special characters
+    test_prefixes = [
+        "form[0]",       # square brackets
+        "form(0)",       # parentheses
+        "form{0}",       # curly braces
+        "form.0",        # dot
+        "form+0",        # plus
+        "form*0",        # asterisk
+        "form?0",        # question mark
+        "form^0",        # caret
+        "form$0",        # dollar
+        "form|0",        # pipe
+        "form\\0",       # backslash
+        "normal_prefix", # normal prefix (no special chars)
+    ]
+    
+    pk_name = "id"
+    
+    for prefix in test_prefixes:
+        print(f"\nTesting prefix: '{prefix}'")
+        
+        # Fixed implementation using re.escape()
+        escaped_prefix = re.escape(prefix)
+        fixed_pattern = re.compile(r'{}-\d+-{}$'.format(escaped_prefix, pk_name))
+        
+        # Test cases that should match
+        test_cases = [
+            f"{prefix}-1-{pk_name}",
+            f"{prefix}-123-{pk_name}",
+            f"{prefix}-42-{pk_name}"
+        ]
+        
+        print(f"  Pattern: {fixed_pattern.pattern}")
+        print("  Positive tests:")
+        for test_case in test_cases:
+            match = fixed_pattern.match(test_case)
+            print(f"    '{test_case}': {'‚úì MATCH' if match else '‚úó NO MATCH'}")
+        
+        # Test cases that should NOT match
+        negative_test_cases = [
+            f"{prefix}-1-{pk_name}x",  # wrong pk name
+            f"{prefix}-{pk_name}",      # missing number
+            f"{prefix}-1-{pk_name}-extra",  # extra characters
+            f"different_prefix-1-{pk_name}",  # different prefix
+        ]
+        
+        print("  Negative tests:")
+        for test_case in negative_test_cases:
+            match = fixed_pattern.match(test_case)
+            print(f"    '{test_case}': {'‚úó MATCH (UNEXPECTED)' if match else '‚úì NO MATCH'}")
+        
+        # Verify that the escaped pattern actually matches the literal prefix
+        test_string = f"{prefix}-123-{pk_name}"
+        expected_to_match = fixed_pattern.match(test_string) is not None
+        print(f"  Verification: '{test_string}' {'‚úì matches' if expected_to_match else '‚úó does not match'}")
+
+if __name__ == "__main__":
+    test_comprehensive_regex_fix()
\ No newline at end of file
diff --git a/test_normal_prefix.py b/test_normal_prefix.py
new file mode 100644
index 0000000000..26b55953f6
--- /dev/null
+++ b/test_normal_prefix.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+"""
+Test that our fix doesn't break normal prefixes without special characters.
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.contrib.admin.options import ModelAdmin
+from django.contrib.auth.models import User
+from django.test import RequestFactory
+
+def test_normal_prefix():
+    """Test that normal prefixes still work correctly."""
+    
+    # Create a mock request with POST data
+    factory = RequestFactory()
+    post_data = {
+        'form-0-1-id': '123',
+        'form-0-2-id': '456',
+        'form-0-3-id': '789',
+        'invalid-form-4-id': '999',  # Should not be matched
+        'form-0-id': '000',          # Should not be matched (missing number)
+    }
+    
+    request = factory.post('/admin/test/', data=post_data)
+    
+    # Create a ModelAdmin instance
+    class TestModelAdmin(ModelAdmin):
+        pass
+    
+    admin = TestModelAdmin(User, None)
+    
+    # Test the fixed _get_edited_object_pks method with normal prefix
+    result = admin._get_edited_object_pks(request, "form-0")
+    
+    print("Testing ModelAdmin._get_edited_object_pks with normal prefix 'form-0':")
+    print(f"Expected matches: ['123', '456', '789']")
+    print(f"Actual result: {result}")
+    
+    # Verify the result
+    expected = ['123', '456', '789']
+    if result == expected:
+        print("‚úì SUCCESS: Normal prefixes still work correctly!")
+        return True
+    else:
+        print("‚úó FAILURE: Normal prefixes are broken")
+        return False
+
+if __name__ == "__main__":
+    success = test_normal_prefix()
+    if success:
+        print("\nNormal prefix test passed! The fix maintains backward compatibility.")
+    else:
+        print("\nNormal prefix test failed! The fix broke existing functionality.")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..6aa799b6ce
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+SECRET_KEY = 'test-key'
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+USE_TZ = True
\ No newline at end of file
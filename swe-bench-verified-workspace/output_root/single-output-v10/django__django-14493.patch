diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index f957a667b2..720767aa9e 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -261,6 +261,7 @@ class HashedFilesMixin:
 
         paths = {path: paths[path] for path in adjustable_paths}
 
+        substitutions = False
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..fbf20ae3dc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the ManifestStaticFilesStorage crash with max_post_process_passes = 0
+"""
+
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        STATIC_URL='/static/',
+        STATICFILES_STORAGE='MyManifestStaticFilesStorage',
+        INSTALLED_APPS=[
+            'django.contrib.staticfiles',
+        ],
+    )
+
+# Create a custom storage class with max_post_process_passes = 0
+class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):
+    max_post_process_passes = 0
+
+def test_reproduction():
+    """Test the reproduction case"""
+    print("Testing ManifestStaticFilesStorage with max_post_process_passes = 0...")
+    
+    # Create a temporary directory for static files
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Create a simple static file
+        static_file = os.path.join(temp_dir, 'test.css')
+        with open(static_file, 'w') as f:
+            f.write('body { background: white; }')
+        
+        # Create the storage instance
+        storage = MyManifestStaticFilesStorage(location=temp_dir)
+        
+        # Try to post-process the files
+        # The paths dictionary should contain (storage, path) tuples
+        paths = {'test.css': (storage, static_file)}
+        
+        try:
+            result = list(storage.post_process(paths, dry_run=False))
+            print("SUCCESS: No error occurred!")
+            print(f"Result: {result}")
+        except UnboundLocalError as e:
+            print(f"ERROR: UnboundLocalError occurred: {e}")
+            return False
+        except Exception as e:
+            print(f"OTHER ERROR: {e}")
+            return False
+    
+    return True
+
+if __name__ == '__main__':
+    test_reproduction()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..ea4f848019
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""
+Script to test edge cases for the ManifestStaticFilesStorage fix
+"""
+
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        STATIC_URL='/static/',
+        INSTALLED_APPS=[
+            'django.contrib.staticfiles',
+        ],
+    )
+
+# Create custom storage classes with different max_post_process_passes values
+class StorageZeroPasses(ManifestStaticFilesStorage):
+    max_post_process_passes = 0
+
+class StorageOnePass(ManifestStaticFilesStorage):
+    max_post_process_passes = 1
+
+class StorageNegativePasses(ManifestStaticFilesStorage):
+    max_post_process_passes = -1
+
+def test_edge_cases():
+    """Test various edge cases"""
+    test_cases = [
+        ("Zero passes", StorageZeroPasses),
+        ("One pass", StorageOnePass),
+        ("Negative passes", StorageNegativePasses),
+    ]
+    
+    for test_name, storage_class in test_cases:
+        print(f"Testing {test_name}...")
+        
+        # Create a temporary directory for static files
+        with tempfile.TemporaryDirectory() as temp_dir:
+            # Create a simple static file
+            static_file = os.path.join(temp_dir, 'test.css')
+            with open(static_file, 'w') as f:
+                f.write('body { background: white; }')
+            
+            # Create the storage instance
+            storage = storage_class(location=temp_dir)
+            
+            # Try to post-process the files
+            paths = {'test.css': (storage, static_file)}
+            
+            try:
+                result = list(storage.post_process(paths, dry_run=False))
+                print(f"SUCCESS: {test_name} worked!")
+                print(f"  Result: {result}")
+                print(f"  max_post_process_passes: {storage.max_post_process_passes}")
+            except Exception as e:
+                print(f"ERROR: {test_name} failed: {e}")
+                return False
+    
+    return True
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..87d5dc1732
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+"""
+Test the exact scenario described in the GitHub issue
+"""
+
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        STATIC_URL='/static/',
+        STATICFILES_STORAGE='MyManifestStaticFilesStorage',
+        INSTALLED_APPS=[
+            'django.contrib.staticfiles',
+        ],
+    )
+
+# Create the exact custom class from the GitHub issue
+class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):
+    max_post_process_passes = 0
+
+def test_github_issue():
+    """Test the exact scenario from the GitHub issue"""
+    print("Testing the exact GitHub issue scenario...")
+    
+    # Create a temporary directory for static files
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Create a simple static file
+        static_file = os.path.join(temp_dir, 'test.css')
+        with open(static_file, 'w') as f:
+            f.write('body { background: white; }')
+        
+        # Create the storage instance as described in the issue
+        storage = MyManifestStaticFilesStorage(location=temp_dir)
+        
+        # Try to post-process the files
+        paths = {'test.css': (storage, static_file)}
+        
+        try:
+            result = list(storage.post_process(paths, dry_run=False))
+            print("SUCCESS: No UnboundLocalError occurred!")
+            print(f"Result: {result}")
+            print(f"max_post_process_passes: {storage.max_post_process_passes}")
+            return True
+        except UnboundLocalError as e:
+            print(f"FAILED: UnboundLocalError occurred: {e}")
+            return False
+        except Exception as e:
+            print(f"OTHER ERROR: {e}")
+            return False
+
+if __name__ == '__main__':
+    success = test_github_issue()
+    if success:
+        print("\n✅ The GitHub issue has been fixed!")
+    else:
+        print("\n❌ The GitHub issue is not fixed!")
\ No newline at end of file
diff --git a/test_normal_case.py b/test_normal_case.py
new file mode 100644
index 0000000000..3cadc3853f
--- /dev/null
+++ b/test_normal_case.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Script to test that normal ManifestStaticFilesStorage still works
+"""
+
+import os
+import tempfile
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        STATIC_URL='/static/',
+        INSTALLED_APPS=[
+            'django.contrib.staticfiles',
+        ],
+    )
+
+def test_normal_case():
+    """Test the normal case with default max_post_process_passes"""
+    print("Testing ManifestStaticFilesStorage with default max_post_process_passes...")
+    
+    # Create a temporary directory for static files
+    with tempfile.TemporaryDirectory() as temp_dir:
+        # Create a simple static file
+        static_file = os.path.join(temp_dir, 'test.css')
+        with open(static_file, 'w') as f:
+            f.write('body { background: white; }')
+        
+        # Create the storage instance
+        storage = ManifestStaticFilesStorage(location=temp_dir)
+        
+        # Try to post-process the files
+        # The paths dictionary should contain (storage, path) tuples
+        paths = {'test.css': (storage, static_file)}
+        
+        try:
+            result = list(storage.post_process(paths, dry_run=False))
+            print("SUCCESS: No error occurred!")
+            print(f"Result: {result}")
+            print(f"Default max_post_process_passes: {storage.max_post_process_passes}")
+        except Exception as e:
+            print(f"ERROR: {e}")
+            return False
+    
+    return True
+
+if __name__ == '__main__':
+    test_normal_case()
\ No newline at end of file
diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 2c62182d31..8b28a60485 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         if settings_dict['USER']:
             kwargs['user'] = settings_dict['USER']
         if settings_dict['NAME']:
-            kwargs['db'] = settings_dict['NAME']
+            kwargs['database'] = settings_dict['NAME']
         if settings_dict['PASSWORD']:
-            kwargs['passwd'] = settings_dict['PASSWORD']
+            kwargs['password'] = settings_dict['PASSWORD']
         if settings_dict['HOST'].startswith('/'):
             kwargs['unix_socket'] = settings_dict['HOST']
         elif settings_dict['HOST']:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cbab3a9cbe
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the MySQL backend deprecated kwargs issue.
+This script will check the source code directly for deprecated kwargs.
+"""
+
+import re
+import sys
+
+def check_deprecated_kwargs():
+    """Check if get_connection_params uses deprecated kwargs by examining source code"""
+    print("Checking MySQL backend source code for deprecated kwargs...")
+    
+    # Read the base.py file
+    with open('/testbed/django/db/backends/mysql/base.py', 'r') as f:
+        content = f.read()
+    
+    # Look for the specific lines mentioned in the issue
+    lines = content.split('\n')
+    
+    deprecated_found = []
+    
+    # Check for deprecated 'db' keyword
+    db_pattern = r"kwargs\['db'\]"
+    if re.search(db_pattern, content):
+        deprecated_found.append("kwargs['db'] found (should be kwargs['database'])")
+    
+    # Check for deprecated 'passwd' keyword  
+    passwd_pattern = r"kwargs\['passwd'\]"
+    if re.search(passwd_pattern, content):
+        deprecated_found.append("kwargs['passwd'] found (should be kwargs['password'])")
+    
+    if deprecated_found:
+        print(f"\n‚ùå DEPRECATED KWARGS FOUND:")
+        for issue in deprecated_found:
+            print(f"  - {issue}")
+        return False
+    else:
+        print("\n‚úÖ No deprecated kwargs found in source code")
+        return True
+
+if __name__ == "__main__":
+    success = check_deprecated_kwargs()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py
new file mode 100644
index 0000000000..8de107426a
--- /dev/null
+++ b/test_fix_comprehensive.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test to verify the MySQL backend fix for deprecated kwargs.
+This test checks various edge cases to ensure the fix is robust.
+"""
+
+import re
+import sys
+
+def test_comprehensive_fix():
+    """Test the fix comprehensively"""
+    print("Running comprehensive test of MySQL backend fix...")
+    
+    # Read the base.py file
+    with open('/testbed/django/db/backends/mysql/base.py', 'r') as f:
+        content = f.read()
+    
+    # Test 1: Check that deprecated kwargs are gone
+    deprecated_patterns = [
+        r"kwargs\['db'\]",
+        r"kwargs\['passwd'\]"
+    ]
+    
+    deprecated_found = []
+    for pattern in deprecated_patterns:
+        if re.search(pattern, content):
+            deprecated_found.append(pattern)
+    
+    if deprecated_found:
+        print(f"‚ùå FAILED: Deprecated kwargs still found: {deprecated_found}")
+        return False
+    else:
+        print("‚úÖ PASSED: No deprecated kwargs found")
+    
+    # Test 2: Check that new kwargs are present
+    new_patterns = [
+        r"kwargs\['database'\]",
+        r"kwargs\['password'\]"
+    ]
+    
+    new_missing = []
+    for pattern in new_patterns:
+        if not re.search(pattern, content):
+            new_missing.append(pattern)
+    
+    if new_missing:
+        print(f"‚ùå FAILED: New kwargs missing: {new_missing}")
+        return False
+    else:
+        print("‚úÖ PASSED: All new kwargs found")
+    
+    # Test 3: Check the specific context around the changes
+    # Look for the get_connection_params method and verify the changes
+    method_pattern = r"def get_connection_params\(self\):"
+    method_match = re.search(method_pattern, content)
+    
+    if not method_match:
+        print("‚ùå FAILED: get_connection_params method not found")
+        return False
+    
+    # Find the method content
+    method_start = method_match.start()
+    method_end = content.find('\n\n', method_start)
+    if method_end == -1:
+        method_end = len(content)
+    
+    method_content = content[method_start:method_end]
+    
+    # Check that both changes are present in the method
+    expected_changes = [
+        "kwargs['database'] = settings_dict['NAME']",
+        "kwargs['password'] = settings_dict['PASSWORD']"
+    ]
+    
+    missing_changes = []
+    for change in expected_changes:
+        if change not in method_content:
+            missing_changes.append(change)
+    
+    if missing_changes:
+        print(f"‚ùå FAILED: Expected changes missing: {missing_changes}")
+        return False
+    else:
+        print("‚úÖ PASSED: All expected changes found in method")
+    
+    # Test 4: Check that the old deprecated patterns are NOT in the method
+    deprecated_in_method = []
+    for pattern in deprecated_patterns:
+        if re.search(pattern, method_content):
+            deprecated_in_method.append(pattern)
+    
+    if deprecated_in_method:
+        print(f"‚ùå FAILED: Deprecated kwargs found in method: {deprecated_in_method}")
+        return False
+    else:
+        print("‚úÖ PASSED: No deprecated kwargs in method")
+    
+    print("\nüéâ All tests passed! The fix is comprehensive and correct.")
+    return True
+
+if __name__ == "__main__":
+    success = test_comprehensive_fix()
+    sys.exit(0 if success else 1)
\ No newline at end of file
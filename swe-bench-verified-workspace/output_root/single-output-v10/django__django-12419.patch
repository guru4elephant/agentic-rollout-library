diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py
index 09c9b95d26..8bb59a4037 100644
--- a/django/conf/global_settings.py
+++ b/django/conf/global_settings.py
@@ -637,6 +637,6 @@ SECURE_HSTS_INCLUDE_SUBDOMAINS = False
 SECURE_HSTS_PRELOAD = False
 SECURE_HSTS_SECONDS = 0
 SECURE_REDIRECT_EXEMPT = []
-SECURE_REFERRER_POLICY = None
+SECURE_REFERRER_POLICY = 'same-origin'
 SECURE_SSL_HOST = None
 SECURE_SSL_REDIRECT = False
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a89b9b4483
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the SECURE_REFERRER_POLICY issue
+"""
+import os
+import sys
+from django.conf import settings
+from django.test import RequestFactory
+from django.middleware.security import SecurityMiddleware
+
+# Configure minimal Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+settings.configure(
+    SECRET_KEY='test-key',
+    MIDDLEWARE=['django.middleware.security.SecurityMiddleware'],
+    # Don't set SECURE_REFERRER_POLICY to see the default behavior
+)
+
+def test_referrer_policy():
+    """Test the current SECURE_REFERRER_POLICY behavior"""
+    print("Testing SECURE_REFERRER_POLICY default behavior...")
+    
+    # Create a request and response
+    factory = RequestFactory()
+    request = factory.get('/')
+    response = HttpResponse()
+    response.status_code = 200
+    
+    # Apply security middleware
+    middleware = SecurityMiddleware()
+    processed_response = middleware.process_response(request, response)
+    
+    # Check if Referrer-Policy header is set
+    referrer_policy = processed_response.get('Referrer-Policy', None)
+    print(f"Referrer-Policy header: {referrer_policy}")
+    print(f"SECURE_REFERRER_POLICY setting: {settings.SECURE_REFERRER_POLICY}")
+    
+    return referrer_policy
+
+class HttpResponse:
+    """Simple HTTP response class for testing"""
+    def __init__(self):
+        self.headers = {}
+        self.status_code = 200
+    
+    def __setitem__(self, key, value):
+        self.headers[key] = value
+    
+    def get(self, key, default=None):
+        return self.headers.get(key, default)
+    
+    def setdefault(self, key, value):
+        if key not in self.headers:
+            self.headers[key] = value
+        return self.headers[key]
+
+if __name__ == '__main__':
+    result = test_referrer_policy()
+    if result is None:
+        print("✓ No Referrer-Policy header set (current default behavior)")
+    else:
+        print(f"✓ Referrer-Policy header set to: {result}")
\ No newline at end of file
diff --git a/test_default.py b/test_default.py
new file mode 100644
index 0000000000..f772ceb1ae
--- /dev/null
+++ b/test_default.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the SECURE_REFERRER_POLICY default is now 'same-origin'
+"""
+import os
+from django.conf import settings
+from django.test import RequestFactory
+from django.middleware.security import SecurityMiddleware
+
+# Configure minimal Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+settings.configure(
+    SECRET_KEY='test-key',
+    MIDDLEWARE=['django.middleware.security.SecurityMiddleware'],
+    # Don't set SECURE_REFERRER_POLICY to test the new default
+)
+
+def test_referrer_policy_default():
+    """Test that the default SECURE_REFERRER_POLICY is now 'same-origin'"""
+    print("Testing new SECURE_REFERRER_POLICY default behavior...")
+    
+    # Create a request and response
+    factory = RequestFactory()
+    request = factory.get('/')
+    response = HttpResponse()
+    response.status_code = 200
+    
+    # Apply security middleware
+    middleware = SecurityMiddleware()
+    processed_response = middleware.process_response(request, response)
+    
+    # Check if Referrer-Policy header is set
+    referrer_policy = processed_response.get('Referrer-Policy', None)
+    print(f"Referrer-Policy header: {referrer_policy}")
+    print(f"SECURE_REFERRER_POLICY setting: {settings.SECURE_REFERRER_POLICY}")
+    
+    # Verify the default is now 'same-origin'
+    assert referrer_policy == 'same-origin', f"Expected 'same-origin', got {referrer_policy}"
+    assert settings.SECURE_REFERRER_POLICY == 'same-origin', f"Expected 'same-origin',2 got {settings.SECURE_REFERRER_POLICY}"
+    
+    print("✓ Default SECURE_REFERRER_POLICY is now 'same-origin'")
+
+class HttpResponse:
+    """Simple HTTP response class for testing"""
+    def __init__(self):
+        self.headers = {}
+        self.status_code = 200
+    
+    def __setitem__(self, key, value):
+        self.headers[key] = value
+    
+    def get(self, key, default=None):
+        return self.headers.get(key, default)
+    
+    def setdefault(self, key, value):
+        if key not in self.headers:
+            self.headers[key] = value
+        return self.headers[key]
+
+if __name__ == '__main__':
+    test_referrer_policy_default()
+    print("✓ Test passed! The SECURE_REFERRER_POLICY default is now 'same-origin'")
\ No newline at end of file
diff --git a/test_explicit_none.py b/test_explicit_none.py
new file mode 100644
index 0000000000..11375ecf6e
--- /dev/null
+++ b/test_explicit_none.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that explicit SECURE_REFERRER_POLICY = None works
+"""
+import os
+from django.conf import settings
+from django.test import RequestFactory
+from django.middleware.security import SecurityMiddleware
+
+# Configure minimal Django settings with explicit None
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+settings.configure(
+    SECRET_KEY='test-key',
+    MIDDLEWARE=['django.middleware.security.SecurityMiddleware'],
+    SECURE_REFERRER_POLICY=None,  # Explicitly set to None
+)
+
+def test_referrer_policy_explicit_none():
+    """Test that explicitly setting SECURE_REFERRER_POLICY to None works"""
+    print("Testing explicit SECURE_REFERRER_POLICY = None...")
+    
+    # Create a request and response
+    factory = RequestFactory()
+    request = factory.get('/')
+    response = HttpResponse()
+    response.status_code = 200
+    
+    # Apply security middleware
+    middleware = SecurityMiddleware()
+    processed_response = middleware.process_response(request, response)
+    
+    # Check if Referrer-Policy header is set
+    referrer_policy = processed_response.get('Referrer-Policy', None)
+    print(f"Referrer-Policy header: {referrer_policy}")
+    print(f"SECURE_REFERRER_POLICY setting: {settings.SECURE_REFERRER_POLICY}")
+    
+    # Verify that no Referrer-Policy header is set when explicitly None
+    assert referrer_policy is None, f"Expected None, got {referrer_policy}"
+    assert settings.SECURE_REFERRER_POLICY is None, f"Expected None, got {settings.SECURE_REFERRER_POLICY}"
+    
+    print("✓ Explicit SECURE_REFERRER_POLICY = None works correctly")
+
+class HttpResponse:
+    """Simple HTTP response class for testing"""
+    def __init__(self):
+        self.headers = {}
+        self.status_code = 200
+    
+    def __setitem__(self, key, value):
+        self.headers[key] = value
+    
+    def get(self, key, default=None):
+        return self.headers.get(key, default)
+    
+    def setdefault(self, key, value):
+        if key not in self.headers:
+            self.headers[key] = value
+        return self.headers[key]
+
+if __name__ == '__main__':
+    test_referrer_policy_explicit_none()
+    print("✓ Test passed! Explicit SECURE_REFERRER_POLICY = None works correctly")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..7aa55c6f43
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,102 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the SECURE_REFERRER_POLICY fix
+"""
+import os
+import sys
+from django.conf import settings
+from django.test import RequestFactory
+from django.middleware.security import SecurityMiddleware
+
+# Configure minimal Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+settings.configure(
+    SECRET_KEY='test-key',
+    MIDDLEWARE=['django.middleware.security.SecurityMiddleware'],
+    # Don't set SECURE_REFERRER_POLICY to test the new default
+)
+
+def test_referrer_policy_default():
+    """Test that the default SECURE_REFERRER_POLICY is now 'same-origin'"""
+    print("Testing new SECURE_REFERRER_POLICY default behavior...")
+    
+    # Create a request and response
+    factory = RequestFactory()
+    request = factory.get('/')
+    response = HttpResponse()
+    response.status_code = 200
+    
+    # Apply security middleware
+    middleware = SecurityMiddleware()
+    processed_response = middleware.process_response(request, response)
+    
+    # Check if Referrer-Policy header is set
+    referrer_policy = processed_response.get('Referrer-Policy', None)
+    print(f"Referrer-Policy header: {referrer_policy}")
+    print(f"SECURE_REFERRER_POLICY setting: {settings.SECURE_REFERRER_POLICY}")
+    
+    # Verify the default is now 'same-origin'
+    assert referrer_policy == 'same-origin', f"Expected 'same-origin', got {referrer_policy}"
+    assert settings.SECURE_REFERRER_POLICY == 'same-origin', f"Expected 'same-origin', got {settings.SECURE_REFERRER_POLICY}"
+    
+    print("✓ Default SECURE_REFERRER_POLICY is now 'same-origin'")
+    return referrer_policy
+
+def test_explicit_none():
+    """Test that explicitly setting SECURE_REFERRER_POLICY to None works"""
+    print("\nTesting explicit SECURE_REFERRER_POLICY = None...")
+    
+    # Clear existing settings and reconfigure
+    from django.conf import settings
+    settings._wrapped = None
+    
+    settings.configure(
+        SECRET_KEY='test-key',
+        MIDDLEWARE=['django.middleware.security.SecurityMiddleware'],
+        SECURE_REFERRER_POLICY=None,  # Explicitly set to None
+    )
+    
+    factory = RequestFactory()
+    request = factory.get('/')
+    response = HttpResponse()
+    response.status_code = 200
+    
+    middleware = SecurityMiddleware()
+    processed_response = middleware.process_response(request, response)
+    
+    referrer_policy = processed_response.get('Referrer-Policy', None)
+    print(f"Referrer-Policy header: {referrer_policy}")
+    print(f"SECURE_REFERRER_POLICY setting: {settings.SECURE_REFERRER_POLICY}")
+    
+    assert referrer_policy is None, f"Expected None, got {referrer_policy}"
+    assert settings.SECURE_REFERRER_POLICY is None, f"Expected None, got {settings.SECURE_REFERRER_POLICY}"
+    
+    print("✓ Explicit SECURE_REFERRER_POLICY = None works correctly")
+    return referrer_policy
+
+class HttpResponse:
+    """Simple HTTP response class for testing"""
+    def __init__(self):
+        self.headers = {}
+        self.status_code = 200
+    
+    def __setitem__(self, key, value):
+        self.headers[key] = value
+    
+    def get(self, key, default=None):
+        return self.headers.get(key, default)
+    
+    def setdefault(self, key, value):
+        if key not in self.headers:
+            self.headers[key] = value
+        return self.headers[key]
+
+if __name__ == '__main__':
+    try:
+        result1 = test_referrer_policy_default()
+        result2 = test_explicit_none()
+        print("\n✓ All tests passed! The SECURE_REFERRER_POLICY fix is working correctly.")
+    except Exception as e:
+        print(f"\n✗ Test failed: {e}")
+        sys.exit(1)
\ No newline at end of file
diff --git a/debug_urlsplit.py b/debug_urlsplit.py
new file mode 100644
index 0000000000..888e034bc4
--- /dev/null
+++ b/debug_urlsplit.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from urllib.parse import urlsplit
+
+def debug_urlsplit():
+    test_cases = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n'
+    ]
+    
+    for test_case in test_cases:
+        print(f"Original: {repr(test_case)}")
+        result = urlsplit(test_case)
+        print(f"urlsplit result: {result}")
+        print(f"  scheme: {repr(result.scheme)}")
+        print(f"  netloc: {repr(result.netloc)}")
+        print(f"  path: {repr(result.path)}")
+        print(f"  query: {repr(result.query)}")
+        print(f"  fragment: {repr(result.fragment)}")
+        print()
+
+if __name__ == "__main__":
+    debug_urlsplit()
\ No newline at end of file
diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..fd50cb0e5b 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,6 +101,10 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+        # Check for control characters (LF, CR, tab) that might be stripped by urlsplit
+        # due to bpo-43882 fix in Python
+        if set(value) & {'\n', '\r', '\t'}:
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3b7d34284e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+from django.core.validators import URLValidator
+
+def test_url_validator():
+    validator = URLValidator()
+    
+    # Test cases that should fail according to the issue
+    test_cases = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n'
+    ]
+    
+    for test_case in test_cases:
+        print(f"Testing: {test_case}")
+        try:
+            validator(test_case)
+            print(f"  ✓ PASS: No ValidationError raised (this might be wrong)")
+        except Exception as e:
+            print(f"  ✗ FAIL: {type(e).__name__}: {e}")
+        print()
+
+if __name__ == "__main__":
+    test_url_validator()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0108386d5f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.auth_tests.settings')
+django.setup()
+
+from django.core.validators import URLValidator
+
+def test_edge_cases():
+    validator = URLValidator()
+    
+    # Test cases that should fail (contain control characters)
+    fail_cases = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n',
+        'https://example.com/path\twith\ttabs',
+        'ftp://example.com/\r',
+        'http://example.com/\n\r\t'
+    ]
+    
+    # Test cases that should pass (valid URLs)
+    pass_cases = [
+        'http://www.djangoproject.com/',
+        'http://[::ffff:192.9.5.5]',
+        'https://example.com/path',
+        'ftp://example.com/',
+        'http://example.com:8080/path?query=value#fragment'
+    ]
+    
+    print("Testing URLs that should FAIL (contain control characters):")
+    for test_case in fail_cases:
+        print(f"Testing: {repr(test_case)}")
+        try:
+            validator(test_case)
+            print(f"  ✗ UNEXPECTED PASS: Should have failed!")
+        except Exception as e:
+            print(f"  ✓ EXPECTED FAIL: {type(e).__name__}")
+        print()
+    
+    print("Testing URLs that should PASS (valid URLs):")
+    for test_case in pass_cases:
+        print(f"Testing: {repr(test_case)}")
+        try:
+            validator(test_case)
+            print(f"  ✓ EXPECTED PASS")
+        except Exception as e:
+            print(f"  ✗ UNEXPECTED FAIL: {type(e).__name__}: {e}")
+        print()
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..4674ac331a
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.auth_tests.settings')
+django.setup()
+
+from django.core.validators import URLValidator
+
+def test_url_validator():
+    validator = URLValidator()
+    
+    # Test cases that should fail according to the issue
+    test_cases = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n'
+    ]
+    
+    for test_case in test_cases:
+        print(f"Testing: {repr(test_case)}")
+        try:
+            validator(test_case)
+            print(f"  ✓ PASS: No ValidationError raised")
+        except Exception as e:
+            print(f"  ✗ FAIL: {type(e).__name__}: {e}")
+        print()
+
+if __name__ == "__main__":
+    test_url_validator()
\ No newline at end of file
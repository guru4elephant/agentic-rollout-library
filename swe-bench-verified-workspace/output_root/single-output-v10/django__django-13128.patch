diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..15e152a5ab
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Value
+from django.db.models.fields import DurationField
+import datetime
+
+class Experiment(models.Model):
+    start = models.DateTimeField()
+    end = models.DateTimeField()
+
+    class Meta:
+        app_label = 'test'
+
+# Debug step by step
+print("=== Step 1: Create F expressions ===")
+start_expr = F('start')
+end_expr = F('end')
+print(f"start_expr: {start_expr}")
+print(f"end_expr: {end_expr}")
+
+print("\n=== Step 2: Create subtraction expression ===")
+subtraction_expr = end_expr - start_expr
+print(f"subtraction_expr: {subtraction_expr}")
+print(f"subtraction_expr type: {type(subtraction_expr)}")
+try:
+    print(f"subtraction_expr.output_field: {subtraction_expr.output_field}")
+except Exception as e:
+    print(f"Error getting output_field: {e}")
+
+print("\n=== Step 3: Create timedelta value ===")
+timedelta_value = Value(datetime.timedelta(), output_field=DurationField())
+print(f"timedelta_value: {timedelta_value}")
+print(f"timedelta_value.output_field: {timedelta_value.output_field}")
+
+print("\n=== Step 4: Combine subtraction and timedelta ===")
+combined_expr = subtraction_expr + timedelta_value
+print(f"combined_expr: {combined_expr}")
+print(f"combined_expr type: {type(combined_expr)}")
+try:
+    print(f"combined_expr.output_field: {combined_expr.output_field}")
+except Exception as e:
+    print(f"Error getting output_field: {e}")
+
+print("\n=== Step 5: Try to create query ===")
+try:
+    query = Experiment.objects.annotate(
+        delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())
+    )
+    print("SUCCESS: Query created without error")
+    print(query)
+except Exception as e:
+    print(f"ERROR: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..868df52c6c 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -63,6 +63,16 @@ class Combinable:
             )
             other = Value(other, output_field=output_field)
 
+        # Handle temporal subtraction
+        if connector == self.SUB and not reversed:
+            try:
+                if (hasattr(self, 'output_field') and hasattr(other, 'output_field') and
+                    self.output_field.get_internal_type() in {'DateField', 'DateTimeField', 'TimeField'} and
+                    other.output_field.get_internal_type() in {'DateField', 'DateTimeField', 'TimeField'}):
+                    return TemporalSubtraction(self, other)
+            except (FieldError, AttributeError):
+                pass
+
         if reversed:
             return CombinedExpression(other, connector, self)
         return CombinedExpression(self, connector, other)
@@ -513,7 +523,7 @@ class TemporalSubtraction(CombinedExpression):
     output_field = fields.DurationField()
 
     def __init__(self, lhs, rhs):
-        super().__init__(lhs, self.SUB, rhs)
+        super().__init__(lhs, self.SUB, rhs, output_field=self.output_field)
 
     def as_sql(self, compiler, connection):
         connection.ops.check_expression_support(self)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6686b92bd8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import F, Value
+from django.db.models.fields import DurationField
+import datetime
+
+class Experiment(models.Model):
+    start = models.DateTimeField()
+    end = models.DateTimeField()
+
+    class Meta:
+        app_label = 'test'
+
+# Try to reproduce the issue
+try:
+    query = Experiment.objects.annotate(
+        delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())
+    )
+    print("SUCCESS: Query created without error")
+    print(query)
+except Exception as e:
+    print(f"ERROR: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
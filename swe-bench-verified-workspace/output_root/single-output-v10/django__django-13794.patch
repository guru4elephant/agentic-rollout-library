diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..ec7c0eba57 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -679,6 +679,13 @@ def add(value, arg):
     except (ValueError, TypeError):
         try:
             return value + arg
+        except TypeError:
+            # Handle specific case where one value is a lazy string
+            # Lazy strings can't be concatenated directly but can be converted to string
+            from django.utils.functional import Promise
+            if isinstance(value, Promise) or isinstance(arg, Promise):
+                return str(value) + str(arg)
+            return ''
         except Exception:
             return ''
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..14605f4761
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='test-key-for-reproduction',
+    )
+    django.setup()
+
+from django.template.defaultfilters import add
+from django.utils.translation import gettext_lazy
+
+# Create a lazy string
+lazy_string = gettext_lazy("hello")
+
+print(f"Type of lazy_string: {type(lazy_string)}")
+
+# Test what happens when we try to convert lazy string to int
+try:
+    int_result = int(lazy_string)
+    print(f"int(lazy_string): {int_result}")
+except Exception as e:
+    print(f"int(lazy_string) failed: {type(e).__name__}: {e}")
+
+# Test what happens when we try to concatenate string with lazy string directly
+try:
+    concat_result = "test" + lazy_string
+    print(f"Direct concatenation: {concat_result}")
+except Exception as e:
+    print(f"Direct concatenation failed: {type(e).__name__}: {e}")
+
+# Test what happens when we try to concatenate lazy string with string
+try:
+    concat_result = lazy_string + "test"
+    print(f"Reverse concatenation: {concat_result}")
+except Exception as e:
+    print(f"Reverse concatenation failed: {type(e).__name__}: {e}")
+
+# Try to concatenate a regular string with a lazy string using add filter
+try:
+    result = add("test", lazy_string)
+    print(f"add('test', lazy_string): {result}")
+except Exception as e:
+    print(f"add('test', lazy_string) failed: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
+
+# Also test the reverse case
+try:
+    result = add(lazy_string, "test")
+    print(f"add(lazy_string, 'test'): {result}")
+except Exception as e:
+    print(f"add(lazy_string, 'test') failed: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c312fef8d8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='test-key',
+    )
+    django.setup()
+
+from django.template.defaultfilters import add
+from django.utils.translation import gettext_lazy
+
+# Test edge cases
+print("Testing edge cases:")
+
+# Test with different types of lazy strings
+lazy_string1 = gettext_lazy("hello")
+lazy_string2 = gettext_lazy("world")
+
+# Both lazy strings
+result = add(lazy_string1, lazy_string2)
+print(f"add(lazy_string1, lazy_string2): '{result}'")
+
+# Lazy string first, regular string second
+result = add(lazy_string1, "test")
+print(f"add(lazy_string1, 'test'): '{result}'")
+
+# Regular string first, lazy string second  
+result = add("test", lazy_string1)
+print(f"add('test', lazy_string1): '{result}'")
+
+# Test with numbers and lazy strings
+result = add(123, lazy_string1)
+print(f"add(123, lazy_string1): '{result}'")
+
+result = add(lazy_string1, 456)
+print(f"add(lazy_string1, 456): '{result}'")
+
+# Test with None values
+try:
+    result = add(None, lazy_string1)
+    print(f"add(None, lazy_string1): '{result}'")
+except Exception as e:
+    print(f"add(None, lazy_string1) failed: {e}")
+
+try:
+    result = add(lazy_string1, None)
+    print(f"add(lazy_string1, None): '{result}'")
+except Exception as e:
+    print(f"add(lazy_string1, None) failed: {e}")
\ No newline at end of file
diff --git a/test_original_behavior.py b/test_original_behavior.py
new file mode 100644
index 0000000000..5ef6795d53
--- /dev/null
+++ b/test_original_behavior.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        SECRET_KEY='test-key',
+    )
+    django.setup()
+
+from django.template.defaultfilters import add
+
+# Test cases from the test suite
+print("Testing original expected behavior:")
+
+# Test add02 case: 2000 + "napis" should return empty string
+result = add(2000, "napis")
+print(f"add(2000, 'napis'): '{result}' (expected: '')")
+
+# Test add03 case: "not_an_int" + 16 should return empty string  
+result = add("not_an_int", 16)
+print(f"add('not_an_int', 16): '{result}' (expected: '')")
+
+# Test add04 case: "not_an_int" + "16" should return concatenated string
+result = add("not_an_int", "16")
+print(f"add('not_an_int', '16'): '{result}' (expected: 'not_an_int16')")
+
+# Test lazy string case: "test" + lazy_string should return concatenated string
+from django.utils.translation import gettext_lazy
+lazy_string = gettext_lazy("hello")
+result = add("test", lazy_string)
+print(f"add('test', lazy_string): '{result}' (expected: 'testhello')")
\ No newline at end of file
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 97977d72ef..bf9c2acd26 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -96,7 +96,7 @@ class MigrationAutodetector:
         for name, field in sorted(fields.items()):
             deconstruction = self.deep_deconstruct(field)
             if field.remote_field and field.remote_field.model:
-                del deconstruction[2]['to']
+                deconstruction[2].pop('to', None)
             fields_def.append(deconstruction)
         return fields_def
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..55fe8990c9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ModelState, ProjectState
+
+class CustomFKField(models.ForeignKey):
+    def __init__(self, *args, **kwargs):
+        kwargs['to'] = 'testapp.HardcodedModel'
+        super().__init__(*args, **kwargs)
+    
+    def deconstruct(self):
+        name, path, args, kwargs = super().deconstruct()
+        del kwargs["to"]
+        return name, path, args, kwargs
+
+def test_reproduction():
+    print("Testing KeyError reproduction...")
+    
+    before = ProjectState()
+    before.add_model(ModelState('testapp', 'HardcodedModel', []))
+    
+    after = ProjectState()
+    after.add_model(ModelState('testapp', 'HardcodedModel', []))
+    after.add_model(ModelState('testapp', 'TestModel', [
+        ('custom', CustomFKField(on_delete=models.CASCADE))
+    ]))
+    
+    try:
+        autodetector = MigrationAutodetector(before, after)
+        changes = autodetector._detect_changes()
+        print("SUCCESS: No KeyError occurred!")
+        print(f"Changes detected: {len(changes.get('testapp', []))}")
+        return True
+    except KeyError as e:
+        print(f"FAILED: KeyError occurred: {e}")
+        return False
+    except Exception as e:
+        print(f"FAILED: Other exception occurred: {e}")
+        return False
+
+if __name__ == '__main__':
+    success = test_reproduction()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_basic_functionality.py b/test_basic_functionality.py
new file mode 100644
index 0000000000..cd3f84891a
--- /dev/null
+++ b/test_basic_functionality.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ModelState, ProjectState
+
+def test_basic_functionality():
+    """Test that basic migration autodetection still works"""
+    print("Testing basic functionality...")
+    
+    # Test 1: Simple model addition
+    before = ProjectState()
+    after = ProjectState()
+    after.add_model(ModelState('testapp', 'SimpleModel', [
+        ('name', models.CharField(max_length=100)),
+        ('value', models.IntegerField())
+    ]))
+    
+    try:
+        autodetector = MigrationAutodetector(before, after)
+        changes = autodetector._detect_changes()
+        print("SUCCESS: Basic model addition works!")
+        assert len(changes.get('testapp', [])) == 1
+    except Exception as e:
+        print(f"FAILED: Basic model addition failed: {e}")
+        return False
+    
+    # Test 2: Model with foreign key
+    before = ProjectState()
+    before.add_model(ModelState('testapp', 'RelatedModel', []))
+    
+    after = ProjectState()
+    after.add_model(ModelState('testapp', 'RelatedModel', []))
+    after.add_model(ModelState('testapp', 'ModelWithFK', [
+        ('related', models.ForeignKey('testapp.RelatedModel', on_delete=models.CASCADE))
+    ]))
+    
+    try:
+        autodetector = MigrationAutodetector(before, after)
+        changes = autodetector._detect_changes()
+        print("SUCCESS: Model with FK works!")
+        assert len(changes.get('testapp', [])) == 1
+    except Exception as e:
+        print(f"FAILED: Model with FK failed: {e}")
+        return False
+    
+    # Test 3: No changes
+    before = ProjectState()
+    before.add_model(ModelState('testapp', 'SameModel', []))
+    
+    after = ProjectState()
+    after.add_model(ModelState('testapp', 'SameModel', []))
+    
+    try:
+        autodetector = MigrationAutodetector(before, after)
+        changes = autodetector._detect_changes()
+        print("SUCCESS: No changes detection works!")
+        assert len(changes) == 0
+    except Exception as e:
+        print(f"FAILED: No changes detection failed: {e}")
+        return False
+    
+    return True
+
+if __name__ == '__main__':
+    success = test_basic_functionality()
+    if success:
+        print("\nAll basic functionality tests passed!")
+        sys.exit(0)
+    else:
+        print("\nSome basic functionality tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2055b0cb2b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,136 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ModelState, ProjectState
+
+# Test case 1: Custom FK field that removes 'to' from deconstruction
+class CustomFKField(models.ForeignKey):
+    def __init__(self, *args, **kwargs):
+        kwargs['to'] = 'testapp.HardcodedModel'
+        super().__init__(*args, **kwargs)
+    
+    def deconstruct(self):
+        name, path, args, kwargs = super().deconstruct()
+        del kwargs["to"]
+        return name, path, args, kwargs
+
+# Test case 2: Normal FK field (should work as before)
+# We'll test this using the ModelState directly instead of defining a model class
+
+# Test case 3: Custom FK field that keeps 'to' in deconstruction
+class CustomFKFieldWithTo(models.ForeignKey):
+    def __init__(self, *args, **kwargs):
+        kwargs['to'] = 'testapp.HardcodedModel'
+        super().__init__(*args, **kwargs)
+    
+    def deconstruct(self):
+        name, path, args, kwargs = super().deconstruct()
+        # Keep 'to' in kwargs
+        return name, path, args, kwargs
+
+def test_case_1():
+    """Test custom FK field that removes 'to' from deconstruction"""
+    print("Testing Case 1: Custom FK field without 'to' in deconstruction...")
+    
+    before = ProjectState()
+    before.add_model(ModelState('testapp', 'HardcodedModel', []))
+    
+    after = ProjectState()
+    after.add_model(ModelState('testapp', 'HardcodedModel', []))
+    after.add_model(ModelState('testapp', 'TestModel', [
+        ('custom', CustomFKField(on_delete=models.CASCADE))
+    ]))
+    
+    try:
+        autodetector = MigrationAutodetector(before, after)
+        changes = autodetector._detect_changes()
+        print("SUCCESS: No KeyError occurred!")
+        return True
+    except KeyError as e:
+        print(f"FAILED: KeyError occurred: {e}")
+        return False
+    except Exception as e:
+        print(f"FAILED: Other exception occurred: {e}")
+        return False
+
+def test_case_2():
+    """Test normal FK field"""
+    print("Testing Case 2: Normal FK field...")
+    
+    before = ProjectState()
+    before.add_model(ModelState('testapp', 'HardcodedModel', []))
+    
+    after = ProjectState()
+    after.add_model(ModelState('testapp', 'HardcodedModel', []))
+    after.add_model(ModelState('testapp', 'NormalModel', [
+        ('normal_fk', models.ForeignKey('testapp.HardcodedModel', on_delete=models.CASCADE))
+    ]))
+    
+    try:
+        autodetector = MigrationAutodetector(before, after)
+        changes = autodetector._detect_changes()
+        print("SUCCESS: Normal FK field works!")
+        return True
+    except Exception as e:
+        print(f"FAILED: Exception occurred: {e}")
+        return False
+
+def test_case_3():
+    """Test custom FK field that keeps 'to' in deconstruction"""
+    print("Testing Case 3: Custom FK field with 'to' in deconstruction...")
+    
+    before = ProjectState()
+    before.add_model(ModelState('testapp', 'HardcodedModel', []))
+    
+    after = ProjectState()
+    after.add_model(ModelState('testapp', 'HardcodedModel', []))
+    after.add_model(ModelState('testapp', 'TestModelWithTo', [
+        ('custom', CustomFKFieldWithTo(on_delete=models.CASCADE))
+    ]))
+    
+    try:
+        autodetector = MigrationAutodetector(before, after)
+        changes = autodetector._detect_changes()
+        print("SUCCESS: Custom FK field with 'to' works!")
+        return True
+    except Exception as e:
+        print(f"FAILED: Exception occurred: {e}")
+        return False
+
+if __name__ == '__main__':
+    results = []
+    results.append(test_case_1())
+    results.append(test_case_2())
+    results.append(test_case_3())
+    
+    if all(results):
+        print("\nAll tests passed!")
+        sys.exit(0)
+    else:
+        print("\nSome tests failed!")
+        sys.exit(1)
\ No newline at end of file
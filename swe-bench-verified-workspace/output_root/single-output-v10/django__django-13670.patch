diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index afd36d79e0..deb91e4979 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):
 
     def y(self):
         "Year, 2 digits; e.g. '99'"
-        return str(self.data.year)[2:]
+        return "%02d" % (self.data.year % 100)
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dafa982129
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+import datetime
+from django.utils import dateformat
+
+# Test case from the issue
+dt = datetime.datetime(123, 4, 5, 6, 7)
+result_django = dateformat.format(dt, "y")
+result_python = dt.strftime("%y")
+
+print(f"Django dateformat result: '{result_django}'")
+print(f"Python strftime result: '{result_python}'")
+print(f"Expected: '23'")
+print(f"Match: {result_django == result_python == '23'}")
+
+# Additional test cases
+test_cases = [
+    (123, "23"),  # Original issue
+    (99, "99"),   # Year 99
+    (100, "00"),  # Year 100
+    (999, "99"),  # Year 999
+    (1000, "00"), # Year 1000
+    (2023, "23"), # Current year
+]
+
+print("\nAdditional test cases:")
+for year, expected in test_cases:
+    dt = datetime.datetime(year, 1, 1)
+    result = dateformat.format(dt, "y")
+    print(f"Year {year}: '{result}' (expected: '{expected}') - {'✓' if result == expected else '✗'}")
\ No newline at end of file
diff --git a/test_Y_method.py b/test_Y_method.py
new file mode 100644
index 0000000000..1c91e4c9e7
--- /dev/null
+++ b/test_Y_method.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+import datetime
+from django.utils import dateformat
+
+# Test that Y() method still works correctly
+test_cases = [
+    (123, "123"),
+    (999, "999"),
+    (1000, "1000"),
+    (2023, "2023"),
+]
+
+print("Testing Y() method (4-digit year):")
+all_passed = True
+
+for year, expected in test_cases:
+    dt = datetime.datetime(year, 1, 1)
+    result = dateformat.format(dt, "Y")
+    
+    passed = result == expected
+    all_passed = all_passed and passed
+    
+    status = "✓" if passed else "✗"
+    print(f"{status} Year {year}: Django='{result}', Expected='{expected}'")
+
+print(f"\nOverall result: {'All tests passed!' if all_passed else 'Some tests failed!'}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..455c2a90f0
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+import datetime
+from django.utils import dateformat
+
+# Test edge cases for the y() method
+test_cases = [
+    # Single digit years (should be rare but possible)
+    (1, "01"),
+    (9, "09"),
+    # Two digit years
+    (10, "10"),
+    (99, "99"),
+    # Three digit years
+    (100, "00"),
+    (123, "23"),
+    (999, "99"),
+    # Four digit years
+    (1000, "00"),
+    (1900, "00"),
+    (1999, "99"),
+    (2000, "00"),
+    (2023, "23"),
+    (9999, "99"),
+    # Large years (using date objects instead of datetime for years beyond 9999)
+    # Note: datetime doesn't support years beyond 9999, so we'll test with date objects
+]
+
+print("Testing edge cases for the y() method:")
+all_passed = True
+
+for year, expected in test_cases:
+    dt = datetime.datetime(year, 1, 1)
+    result = dateformat.format(dt, "y")
+    python_result = dt.strftime("%y")
+    
+    passed = result == expected == python_result
+    all_passed = all_passed and passed
+    
+    status = "✓" if passed else "✗"
+    print(f"{status} Year {year}: Django='{result}', Python='{python_result}', Expected='{expected}'")
+
+print(f"\nOverall result: {'All tests passed!' if all_passed else 'Some tests failed!'}")
\ No newline at end of file
diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 4c0e7e2a56..1b841c81bb 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -34,7 +34,9 @@ def trim_docstring(docstring):
         return ''
     # Convert tabs to spaces and split into lines
     lines = docstring.expandtabs().splitlines()
-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
+    # Calculate indentation from lines after the first, default to 0 if empty
+    indent_lines = [len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip()]
+    indent = min(indent_lines) if indent_lines else 0
     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
     return "\n".join(trimmed).strip()
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d86a0df083
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the docutils error when first docstring line is not empty.
+"""
+
+# Copy the FIXED trim_docstring function to test it
+def trim_docstring(docstring):
+    """
+    Uniformly trim leading/trailing whitespace from docstrings.
+
+    Based on https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation
+    """
+    if not docstring or not docstring.strip():
+        return ''
+    # Convert tabs to spaces and split into lines
+    lines = docstring.expandtabs().splitlines()
+    # FIX: Skip the first line when calculating indentation
+    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())
+    trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
+    return "\n".join(trimmed).strip()
+
+def test_function():
+    """test tests something.
+    
+    This is a test function with a docstring that starts on the first line.
+    This should cause the error described in the issue.
+    """
+    pass
+
+def test_function_empty_first_line():
+    """
+    test tests something.
+    
+    This is a test function with an empty first line in the docstring.
+    This should work correctly.
+    """
+    pass
+
+if __name__ == "__main__":
+    print("Testing trim_docstring function...")
+    
+    # Test case 1: Docstring with text on first line (should cause error)
+    docstring1 = '''test tests something.
+    
+    This is a test function with a docstring that starts on the first line.'''
+    
+    print("Docstring 1 (first line not empty):")
+    print(repr(docstring1))
+    trimmed1 = trim_docstring(docstring1)
+    print("Trimmed:")
+    print(repr(trimmed1))
+    print()
+    
+    # Test case 2: Docstring with empty first line (should work)
+    docstring2 = '''
+    test tests something.
+    
+    This is a test function with an empty first line in the docstring.'''
+    
+    print("Docstring 2 (first line empty):")
+    print(repr(docstring2))
+    trimmed2 = trim_docstring(docstring2)
+    print("Trimmed:")
+    print(repr(trimmed2))
+    print()
+    
+    # Test the actual RST parsing that would trigger the error
+    print("Testing RST parsing...")
+    try:
+        result = parse_rst(trimmed1, 'view')
+        print("RST parsing successful for case 1!")
+    except Exception as e:
+        print(f"Error in RST parsing for case 1: {e}")
+    
+    try:
+        result = parse_rst(trimmed2, 'view')
+        print("RST parsing successful for case 2!")
+    except Exception as e:
+        print(f"Error in RST parsing for case 2: {e}")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..0014e6774a
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+"""
+Test the exact scenario from the GitHub issue.
+"""
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.contrib.admindocs.utils import trim_docstring
+
+def test_function():
+    """test tests something.
+    """
+    pass
+
+def test_function_empty_first_line():
+    """
+    test tests something.
+    """
+    pass
+
+if __name__ == "__main__":
+    print("Testing the exact GitHub issue scenario...")
+    
+    # Test the case that was causing the error
+    docstring1 = """test tests something.
+    """
+    print("Docstring with text on first line:")
+    print(repr(docstring1))
+    trimmed1 = trim_docstring(docstring1)
+    print("Trimmed result:")
+    print(repr(trimmed1))
+    print()
+    
+    # Test the case that was working correctly
+    docstring2 = """
+    test tests something.
+    """
+    print("Docstring with empty first line:")
+    print(repr(docstring2))
+    trimmed2 = trim_docstring(docstring2)
+    print("Trimmed result:")
+    print(repr(trimmed2))
+    print()
+    
+    # Both should now produce the same result (no indentation)
+    if trimmed1 == trimmed2:
+        print("✅ SUCCESS: Both cases now produce the same result!")
+        print(f"Result: {repr(trimmed1)}")
+    else:
+        print("❌ FAILURE: Cases still produce different results")
+        print(f"Case 1: {repr(trimmed1)}")
+        print(f"Case 2: {repr(trimmed2)}")
\ No newline at end of file
diff --git a/test_trim_docstring.py b/test_trim_docstring.py
new file mode 100644
index 0000000000..1ade1e8da2
--- /dev/null
+++ b/test_trim_docstring.py
@@ -0,0 +1,112 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for the trim_docstring function fix.
+"""
+
+import sys
+import os
+
+# Add the testbed to Python path
+sys.path.insert(0, '/testbed')
+
+# Import the function directly from the module
+from django.contrib.admindocs.utils import trim_docstring
+
+def test_case(name, docstring, expected):
+    """Test a single case and report results."""
+    result = trim_docstring(docstring)
+    status = "PASS" if result == expected else "FAIL"
+    print(f"{status}: {name}")
+    if result != expected:
+        print(f"  Expected: {repr(expected)}")
+        print(f"  Got:      {repr(result)}")
+    return result == expected
+
+def main():
+    print("Testing trim_docstring function...")
+    print("=" * 50)
+    
+    all_passed = True
+    
+    # Test cases from the original issue
+    all_passed &= test_case(
+        "Original case 1 - first line not empty",
+        '''test tests something.
+    
+    This is a test function with a docstring that starts on the first line.''',
+        'test tests something.\n\nThis is a test function with a docstring that starts on the first line.'
+    )
+    
+    all_passed &= test_case(
+        "Original case 2 - first line empty",
+        '''
+    test tests something.
+    
+    This is a test function with an empty first line in the docstring.''',
+        'test tests something.\n\nThis is a test function with an empty first line in the docstring.'
+    )
+    
+    # Edge cases
+    all_passed &= test_case(
+        "Single line docstring",
+        "test function",
+        "test function"
+    )
+    
+    all_passed &= test_case(
+        "Empty docstring",
+        "",
+        ""
+    )
+    
+    all_passed &= test_case(
+        "Only whitespace",
+        "   \n   \n   ",
+        ""
+    )
+    
+    all_passed &= test_case(
+        "Mixed indentation",
+        '''test function.
+  
+    Some indented text.
+  Less indented text.''',
+        'test function.\n\n  Some indented text.\nLess indented text.'
+    )
+    
+    # Additional test cases
+    all_passed &= test_case(
+        "Simple multi-line with first line text",
+        '''First line has text.
+    Second line indented.
+    Third line also indented.''',
+        'First line has text.\nSecond line indented.\nThird line also indented.'
+    )
+    
+    all_passed &= test_case(
+        "Simple multi-line with empty first line",
+        '''
+    First line after empty.
+    Second line indented.
+    Third line also indented.''',
+        'First line after empty.\nSecond line indented.\nThird line also indented.'
+    )
+    
+    all_passed &= test_case(
+        "No indentation on any line",
+        '''Line 1
+Line 2
+Line 3''',
+        'Line 1\nLine 2\nLine 3'
+    )
+    
+    print("=" * 50)
+    if all_passed:
+        print("All tests PASSED! ✅")
+        return 0
+    else:
+        print("Some tests FAILED! ❌")
+        return 1
+
+if __name__ == "__main__":
+    sys.exit(main())
\ No newline at end of file
diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 338d54d72f..8dd7f510ae 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -387,6 +387,9 @@ class FileInput(Input):
     def value_omitted_from_data(self, data, files, name):
         return name not in files
 
+    def use_required_attribute(self, initial):
+        return super().use_required_attribute(initial) and not initial
+
 
 FILE_INPUT_CONTRADICTION = object()
 
@@ -452,7 +455,7 @@ class ClearableFileInput(FileInput):
         return upload
 
     def use_required_attribute(self, initial):
-        return super().use_required_attribute(initial) and not initial
+        return super().use_required_attribute(initial)
 
     def value_omitted_from_data(self, data, files, name):
         return (
diff --git a/final_verification.py b/final_verification.py
new file mode 100644
index 0000000000..47ac62e08c
--- /dev/null
+++ b/final_verification.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.forms.widgets import FileInput, ClearableFileInput
+
+def test_consistent_behavior():
+    """Test that FileInput and ClearableFileInput now behave consistently"""
+    
+    print("=== Testing Consistent Behavior Between FileInput and ClearableFileInput ===")
+    
+    file_input = FileInput()
+    clearable_input = ClearableFileInput()
+    
+    test_cases = [
+        (None, "None initial data"),
+        ("", "Empty string initial data"),
+        ("existing_file.txt", "File name initial data"),
+        ([], "Empty list initial data"),
+        (0, "Zero initial data"),
+        (False, "False initial data"),
+    ]
+    
+    for initial_value, description in test_cases:
+        print(f"\nTesting: {description}")
+        
+        file_result = file_input.use_required_attribute(initial_value)
+        clearable_result = clearable_input.use_required_attribute(initial_value)
+        
+        print(f"  FileInput.use_required_attribute({initial_value!r}): {file_result}")
+        print(f"  ClearableFileInput.use_required_attribute({initial_value!r}): {clearable_result}")
+        
+        # Both should return the same result
+        assert file_result == clearable_result, f"Inconsistent behavior for {description}"
+    
+    print("\nâœ… All tests passed! FileInput and ClearableFileInput now behave consistently.")
+
+if __name__ == "__main__":
+    test_consistent_behavior()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e17ade5d0f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.forms import Form
+from django.forms.fields import FileField
+from django.forms.widgets import FileInput, ClearableFileInput
+
+def test_file_input_required_attribute():
+    """Test FileInput required attribute behavior with initial data"""
+    
+    # Test case 1: FileInput without initial data
+    print("=== Testing FileInput without initial data ===")
+    file_input = FileInput()
+    result = file_input.use_required_attribute(None)
+    print(f"FileInput.use_required_attribute(None): {result}")
+    
+    # Test case 2: FileInput with initial data
+    print("\n=== Testing FileInput with initial data ===")
+    result = file_input.use_required_attribute("existing_file.txt")
+    print(f"FileInput.use_required_attribute('existing_file.txt'): {result}")
+    
+    # Test case 3: ClearableFileInput without initial data
+    print("\n=== Testing ClearableFileInput without initial data ===")
+    clearable_input = ClearableFileInput()
+    result = clearable_input.use_required_attribute(None)
+    print(f"ClearableFileInput.use_required_attribute(None): {result}")
+    
+    # Test case 4: ClearableFileInput with initial data
+    print("\n=== Testing ClearableFileInput with initial data ===")
+    result = clearable_input.use_required_attribute("existing_file.txt")
+    print(f"ClearableFileInput.use_required_attribute('existing_file.txt'): {result}")
+
+if __name__ == "__main__":
+    test_file_input_required_attribute()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..657c3ab205
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.forms.widgets import FileInput, ClearableFileInput
+
+def test_edge_cases():
+    """Test edge cases for FileInput required attribute behavior"""
+    
+    print("=== Testing Edge Cases ===")
+    
+    file_input = FileInput()
+    clearable_input = ClearableFileInput()
+    
+    # Test case 1: Empty string initial data
+    print("\n1. Testing with empty string initial data:")
+    result_file = file_input.use_required_attribute("")
+    result_clearable = clearable_input.use_required_attribute("")
+    print(f"FileInput.use_required_attribute(''): {result_file}")
+    print(f"ClearableFileInput.use_required_attribute(''): {result_clearable}")
+    
+    # Test case 2: Empty list initial data
+    print("\n2. Testing with empty list initial data:")
+    result_file = file_input.use_required_attribute([])
+    result_clearable = clearable_input.use_required_attribute([])
+    print(f"FileInput.use_required_attribute([]): {result_file}")
+    print(f"ClearableFileInput.use_required_attribute([]): {result_clearable}")
+    
+    # Test case 3: Zero initial data
+    print("\n3. Testing with zero initial data:")
+    result_file = file_input.use_required_attribute(0)
+    result_clearable = clearable_input.use_required_attribute(0)
+    print(f"FileInput.use_required_attribute(0): {result_file}")
+    print(f"ClearableFileInput.use_required_attribute(0): {result_clearable}")
+    
+    # Test case 4: False initial data
+    print("\n4. Testing with False initial data:")
+    result_file = file_input.use_required_attribute(False)
+    result_clearable = clearable_input.use_required_attribute(False)
+    print(f"FileInput.use_required_attribute(False): {result_file}")
+    print(f"ClearableFileInput.use_required_attribute(False): {result_clearable}")
+
+if __name__ == "__main__":
+    test_edge_cases()
\ No newline at end of file
diff --git a/test_existing_behavior.py b/test_existing_behavior.py
new file mode 100644
index 0000000000..be0aa33e61
--- /dev/null
+++ b/test_existing_behavior.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.forms.widgets import ClearableFileInput
+
+def test_existing_clearablefileinput_behavior():
+    """Test that ClearableFileInput still passes the existing test cases"""
+    
+    print("=== Testing ClearableFileInput use_required_attribute behavior ===")
+    
+    widget = ClearableFileInput()
+    
+    # Test case from the existing test: None should return True
+    result = widget.use_required_attribute(None)
+    print(f"ClearableFileInput.use_required_attribute(None): {result}")
+    assert result == True, "Expected True for None initial data"
+    
+    # Test case from the existing test: File name should return False
+    result = widget.use_required_attribute('resume.txt')
+    print(f"ClearableFileInput.use_required_attribute('resume.txt'): {result}")
+    assert result == False, "Expected False for existing file initial data"
+    
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_existing_clearablefileinput_behavior()
\ No newline at end of file
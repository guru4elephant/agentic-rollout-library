diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 4c9bd63546..3b5ddafaca 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):
             args += ["-h", host]
         if port:
             args += ["-p", str(port)]
+        args.extend(parameters)
         if dbname:
             args += [dbname]
-        args.extend(parameters)
 
         env = {}
         if passwd:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5563c7f188
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the PostgreSQL dbshell issue with additional parameters.
+"""
+
+# Test the settings_to_cmd_args_env method directly
+from django.db.backends.postgresql.client import DatabaseClient
+
+# Mock settings dictionary similar to what would be used
+settings_dict = {
+    'ENGINE': 'django.db.backends.postgresql',
+    'NAME': 'test_db',
+    'USER': 'test_user',
+    'PASSWORD': 'test_password',
+    'HOST': 'localhost',
+    'PORT': '5432',
+    'OPTIONS': {}
+}
+
+parameters = ["-c", "select * from some_table;"]
+
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+print(f"Generated command args: {args}")
+print(f"Expected psql format: psql [options] [parameters] [dbname]")
+
+# Check if the fix is working
+dbname_index = args.index('test_db') if 'test_db' in args else -1
+params_index = -1
+if '-c' in args:
+    params_index = args.index('-c')
+
+if dbname_index != -1 and params_index != -1 and dbname_index > params_index:
+    print("✓ Fix working: Parameters come before database name")
+    print(f"This will correctly execute: {' '.join(args)}")
+else:
+    print("✗ Fix not working: Database name still comes before parameters")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c956f6ca12
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,94 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the PostgreSQL dbshell fix.
+"""
+
+from django.db.backends.postgresql.client import DatabaseClient
+
+def test_case(name, settings_dict, parameters):
+    print(f"\n=== {name} ===")
+    args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+    print(f"Generated command args: {args}")
+    
+    # Check if dbname exists and is in the correct position
+    dbname = settings_dict.get('NAME')
+    if dbname and dbname in args:
+        dbname_index = args.index(dbname)
+        # Check if any parameters exist and come before dbname
+        has_params_before_dbname = any(i < dbname_index for i, arg in enumerate(args) if arg in parameters or (arg.startswith('-') and arg != dbname))
+        
+        if has_params_before_dbname:
+            print("✓ Parameters come before database name")
+        else:
+            print("✗ No parameters before database name")
+    else:
+        print("✓ No database name specified")
+
+# Test case 1: Normal case with parameters
+test_case(
+    "Normal case with parameters",
+    {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'test_db',
+        'USER': 'test_user',
+        'HOST': 'localhost',
+        'PORT': '5432',
+        'OPTIONS': {}
+    },
+    ["-c", "select * from some_table;"]
+)
+
+# Test case 2: No parameters
+test_case(
+    "No parameters",
+    {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'test_db',
+        'USER': 'test_user',
+        'HOST': 'localhost',
+        'PORT': '5432',
+        'OPTIONS': {}
+    },
+    []
+)
+
+# Test case 3: No database name
+test_case(
+    "No database name",
+    {
+        'ENGINE': 'django.db.backends.postgresql',
+        'USER': 'test_user',
+        'HOST': 'localhost',
+        'PORT': '5432',
+        'OPTIONS': {}
+    },
+    ["-c", "select * from some_table;"]
+)
+
+# Test case 4: Multiple parameters
+test_case(
+    "Multiple parameters",
+    {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'test_db',
+        'USER': 'test_user',
+        'HOST': 'localhost',
+        'PORT': '5432',
+        'OPTIONS': {}
+    },
+    ["-c", "select * from some_table;", "-f", "script.sql"]
+)
+
+# Test case 5: Empty parameters
+test_case(
+    "Empty parameters",
+    {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'test_db',
+        'USER': 'test_user',
+        'HOST': 'localhost',
+        'PORT': '5432',
+        'OPTIONS': {}
+    },
+    [""]
+)
\ No newline at end of file
diff --git a/test_no_dbname.py b/test_no_dbname.py
new file mode 100644
index 0000000000..3651cfd5ba
--- /dev/null
+++ b/test_no_dbname.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+"""
+Test the case where no database name is specified.
+"""
+
+from django.db.backends.postgresql.client import DatabaseClient
+
+# Test case with no database name
+settings_dict = {
+    'USER': 'test_user',
+    'HOST': 'localhost',
+    'PORT': '5432',
+}
+
+parameters = ["-c", "select * from some_table;"]
+
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+
+print("Generated command args:", args)
+print("Expected: Should default to 'postgres' database with parameters first")
+
+# Check if parameters come before the default database name
+if 'postgres' in args:
+    dbname_index = args.index('postgres')
+    param_index = args.index('-c') if '-c' in args else -1
+    
+    if param_index != -1 and dbname_index > param_index:
+        print("✓ SUCCESS: Parameters come before default database name")
+    else:
+        print("✗ FAILURE: Default database name comes before parameters")
+else:
+    print("? No default database name found")
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..9c4e39318b
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+"""
+Verify that the PostgreSQL dbshell fix is working correctly.
+"""
+
+from django.db.backends.postgresql.client import DatabaseClient
+
+# Test the specific case mentioned in the GitHub issue
+settings_dict = {
+    'NAME': 'some_database',
+    'USER': 'test_user',
+    'HOST': 'localhost',
+    'PORT': '5432',
+}
+
+parameters = ["-c", "select * from some_table;"]
+
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+
+print("Generated command args:", args)
+print("Expected format: psql [options] [parameters] [dbname]")
+
+# Check if parameters come before database name
+dbname_index = args.index('some_database') if 'some_database' in args else -1
+param_index = args.index('-c') if '-c' in args else -1
+
+if dbname_index != -1 and param_index != -1 and dbname_index > param_index:
+    print("✓ SUCCESS: Parameters come before database name")
+    print("✓ This will correctly execute: psql -c 'select * from some_table;' some_database")
+else:
+    print("✗ FAILURE: Database name comes before parameters")
+    print("✗ This would incorrectly execute: psql some_database -c 'select * from some_table;'")
\ No newline at end of file
diff --git a/debug_repr.py b/debug_repr.py
new file mode 100644
index 0000000000..d90cd8977a
--- /dev/null
+++ b/debug_repr.py
@@ -0,0 +1,25 @@
+from decimal import Decimal
+
+# Test what repr() does with Decimal
+value = Decimal('42.12345678901234567890')
+print(f"Original Decimal: {value}")
+print(f"repr(value): {repr(value)}")
+print(f"str(value): {str(value)}")
+
+# Test what happens when we convert back
+try:
+    d1 = Decimal(repr(value))
+    print(f"Decimal(repr(value)): {d1}")
+except Exception as e:
+    print(f"Error with repr: {e}")
+    d1 = None
+
+try:
+    d2 = Decimal(str(value))
+    print(f"Decimal(str(value)): {d2}")
+except Exception as e:
+    print(f"Error with str: {e}")
+    d2 = None
+
+if d1 is not None and d2 is not None:
+    print(f"Are they equal? {d1 == d2}")
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..4d9b570a2e 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,9 +151,13 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
-    except InvalidOperation:
+        if isinstance(text, Decimal):
+            d = text
+            input_val = str(text)
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
+    except (InvalidOperation, ValueError):
         try:
             d = Decimal(str(float(text)))
         except (ValueError, InvalidOperation, TypeError):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ca21207955
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+result = t.render(c)
+print(f"Result: {result}")
+print(f"Expected: 42.12345678901234567890")
+print(f"Match: {result == '42.12345678901234567890'}")
\ No newline at end of file
diff --git a/test_decimal_existing.py b/test_decimal_existing.py
new file mode 100644
index 0000000000..901acd41cf
--- /dev/null
+++ b/test_decimal_existing.py
@@ -0,0 +1,29 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+)
+setup()
+
+# Test the existing Decimal tests from the test suite
+print("Testing existing Decimal tests:")
+print(f"floatformat(Decimal('555.555'), 2): {floatformat(Decimal('555.555'), 2)}")
+print(f"Expected: '555.56'")
+print(f"Match: {floatformat(Decimal('555.555'), 2) == '555.56'}")
+
+print(f"floatformat(Decimal('09.000')): {floatformat(Decimal('09.000'))}")
+print(f"Expected: '9'")
+print(f"Match: {floatformat(Decimal('09.000')) == '9'}")
+
+# Test our original issue
+print(f"\nTesting our fix:")
+result = floatformat(Decimal('42.12345678901234567890'), 20)
+expected = '42.12345678901234567890'
+print(f"floatformat(Decimal('42.12345678901234567890'), 20): {result}")
+print(f"Expected: {expected}")
+print(f"Match: {result == expected}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0884c19e07
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,44 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Test cases
+test_cases = [
+    # Original issue case
+    (Decimal('42.12345678901234567890'), 20, '42.12345678901234567890'),
+    
+    # Regular float values
+    (42.12345678901234567890, 10, '42.1234567890'),
+    (42.0, 2, '42.00'),
+    (42.0, -1, '42'),
+    
+    # String representations
+    ('42.12345678901234567890', 15, '42.123456789012346'),
+    ('42', 3, '42.000'),
+    
+    # Edge cases
+    (0, 5, '0.00000'),
+    (-123.456, 2, '-123.46'),
+    (Decimal('0.00000000000000000001'), 20, '0.00000000000000000001'),
+]
+
+print("Testing floatformat edge cases:")
+for i, (value, arg, expected) in enumerate(test_cases):
+    t = Template(f'{{{{ value|floatformat:{arg} }}}}')
+    c = Context({'value': value})
+    result = t.render(c)
+    status = "✓" if result == expected else "✗"
+    print(f"{status} Test {i+1}: {value} -> {result} (expected: {expected})")
+    
+    if result != expected:
+        print(f"   MISMATCH: got '{result}', expected '{expected}'")
\ No newline at end of file
diff --git a/test_floatformat_direct.py b/test_floatformat_direct.py
new file mode 100644
index 0000000000..6f7c07b633
--- /dev/null
+++ b/test_floatformat_direct.py
@@ -0,0 +1,31 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+)
+setup()
+
+# Test the original issue
+result = floatformat(Decimal('42.12345678901234567890'), 20)
+expected = '42.12345678901234567890'
+print(f"Decimal test: {result} == {expected} -> {result == expected}")
+
+# Test other cases to ensure we didn't break anything
+test_cases = [
+    (42.123, 2, '42.12'),
+    ('42.123', 2, '42.12'),
+    (42.0, 2, '42.00'),
+    (42.0, -1, '42'),
+    (0, 3, '0.000'),
+    (-123.456, 1, '-123.5'),
+]
+
+for value, arg, expected in test_cases:
+    result = floatformat(value, arg)
+    status = "✓" if result == expected else "✗"
+    print(f"{status} {value} (type: {type(value).__name__}) -> {result} (expected: {expected})")
\ No newline at end of file
diff --git a/test_invalid_inputs.py b/test_invalid_inputs.py
new file mode 100644
index 0000000000..ed4d6a1818
--- /dev/null
+++ b/test_invalid_inputs.py
@@ -0,0 +1,34 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=False,
+    USE_L10N=False,
+)
+setup()
+
+# Test invalid inputs
+test_cases = [
+    ("not_a_number", 2),
+    (None, 2),
+    ([], 2),
+    ({}, 2),
+]
+
+print("Testing invalid inputs:")
+for value, arg in test_cases:
+    try:
+        result = floatformat(value, arg)
+        print(f"✓ {value} (type: {type(value).__name__}) -> '{result}'")
+    except Exception as e:
+        print(f"✗ {value} (type: {type(value).__name__}) -> Error: {e}")
+
+# Test that Decimal still works with our fix
+print("\nTesting Decimal preservation:")
+decimal_val = Decimal('123.4567890123456789')
+result = floatformat(decimal_val, 15)
+print(f"Decimal input: {decimal_val} -> {result}")
+print(f"Preserved precision: {result == '123.456789012345678'}")
\ No newline at end of file
diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..101c395b6c
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+import html
+from django.utils.html import TRAILING_PUNCTUATION_CHARS
+
+def debug_trim_punctuation(middle):
+    print(f"Original middle: '{middle}'")
+    middle_unescaped = html.unescape(middle)
+    print(f"Unescaped: '{middle_unescaped}' (length: {len(middle_unescaped)})")
+    
+    stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
+    print(f"Stripped: '{stripped}' (length: {len(stripped)})")
+    
+    if middle_unescaped != stripped:
+        trail_part = middle[len(stripped):]
+        print(f"Trail part: '{trail_part}'")
+        middle_part = middle[:len(stripped) - len(middle_unescaped)]
+        print(f"Middle part: '{middle_part}'")
+        
+        return middle_part, trail_part
+    return middle, ""
+
+# Test the problematic case
+test_cases = [
+    "google.com/?q=1&lt!",
+    "google.com/?q=1&lt.",
+    "google.com/?q=1&lt",
+    "google.com/?q=1&lt;",
+]
+
+for case in test_cases:
+    print(f"\n=== Testing: {case} ===")
+    new_middle, trail = debug_trim_punctuation(case)
+    print(f"Result: middle='{new_middle}', trail='{trail}'")
\ No newline at end of file
diff --git a/detailed_debug.py b/detailed_debug.py
new file mode 100644
index 0000000000..af2381cde5
--- /dev/null
+++ b/detailed_debug.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python3
+
+import html
+from django.utils.html import TRAILING_PUNCTUATION_CHARS
+
+def detailed_debug(middle):
+    print(f"Original middle: '{middle}' (length: {len(middle)})")
+    middle_unescaped = html.unescape(middle)
+    print(f"Unescaped: '{middle_unescaped}' (length: {len(middle_unescaped)})")
+    
+    stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
+    print(f"Stripped: '{stripped}' (length: {len(stripped)})")
+    
+    if middle_unescaped != stripped:
+        print(f"Difference: {len(middle_unescaped)} - {len(stripped)} = {len(middle_unescaped) - len(stripped)} chars removed")
+        
+        # Current problematic logic
+        trail_part_current = middle[len(stripped):]
+        middle_part_current = middle[:len(stripped) - len(middle_unescaped)]
+        print(f"Current trail_part: middle[{len(stripped)}:] = '{trail_part_current}'")
+        print(f"Current middle_part: middle[:{len(stripped) - len(middle_unescaped)}] = '{middle_part_current}'")
+        
+        # Let's find where the punctuation actually starts in the original string
+        # Count how many trailing punctuation chars were removed
+        chars_removed = len(middle_unescaped) - len(stripped)
+        
+        # The correct approach should find where the trailing punctuation starts
+        # in the original string, not based on unescaped lengths
+        return middle, ""
+    
+    return middle, ""
+
+# Test the problematic case
+test_case = "google.com/?q=1&lt!"
+print("=== Detailed Debug ===")
+new_middle, trail = detailed_debug(test_case)
+print(f"Result: middle='{new_middle}', trail='{trail}'")
\ No newline at end of file
diff --git a/django/utils/html.py b/django/utils/html.py
index 3bc02b8dd3..efacd0fe6a 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -283,8 +283,17 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
             middle_unescaped = html.unescape(middle)
             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
             if middle_unescaped != stripped:
-                trail = middle[len(stripped):] + trail
-                middle = middle[:len(stripped) - len(middle_unescaped)]
+                # Find where the trailing punctuation starts in the original string
+                # by working backwards from the end until we find the punctuation
+                chars_to_remove = len(middle_unescaped) - len(stripped)
+                original_trimmed = middle
+                
+                # Remove characters from the end until the unescaped length matches stripped
+                while len(html.unescape(original_trimmed)) > len(stripped):
+                    original_trimmed = original_trimmed[:-1]
+                
+                trail = middle[len(original_trimmed):] + trail
+                middle = original_trimmed
                 trimmed_something = True
         return lead, middle, trail
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..9a9c798edc
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from django.utils.html import urlize
+
+# Test the exact case from the GitHub issue
+test_input = 'Search for google.com/?q=1&lt! and see.'
+expected_output = 'Search for <a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>! and see.'
+actual_output = urlize(test_input)
+
+print("GitHub Issue Test:")
+print("Input:    ", test_input)
+print("Expected: ", expected_output)
+print("Actual:   ", actual_output)
+print("Match:    ", expected_output == actual_output)
+
+# Test that it produces the same result as before for normal cases
+normal_cases = [
+    'Visit google.com',
+    'Check example.com?test=1',
+    'See github.com/django/django',
+]
+
+print("\nNormal cases (should work as before):")
+for case in normal_cases:
+    result = urlize(case)
+    print(f"Input: {case}")
+    print(f"Output: {result}")
+    print()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8caa9cd40a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+
+from django.utils.html import urlize
+
+# Test case from the GitHub issue
+test_input = 'Search for google.com/?q=1&lt! and see.'
+expected_output = 'Search for <a href="http://google.com/?q=1%3C">google.com/?q=1&lt</a>! and see.'
+actual_output = urlize(test_input)
+
+print("Input:", test_input)
+print("Expected:", expected_output)
+print("Actual:", actual_output)
+print("Match:", expected_output == actual_output)
+
+# Additional test cases to understand the issue better
+test_cases = [
+    'google.com/?q=1&lt',
+    'google.com/?q=1&lt!',
+    'google.com/?q=1&lt.',
+    'google.com/?q=1&lt;',
+]
+
+print("\nAdditional test cases:")
+for case in test_cases:
+    result = urlize(case)
+    print(f"Input: {case}")
+    print(f"Output: {result}")
+    print()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c696cbf833
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+
+from django.utils.html import urlize
+
+# Test various edge cases to ensure the fix is robust
+test_cases = [
+    # Original issue case
+    'Search for google.com/?q=1&lt! and see.',
+    
+    # Various HTML entities with trailing punctuation
+    'Visit example.com/?a=1&amp! for more',
+    'Check example.com/?b=2&quot! now',
+    'Go to example.com/?c=3&#39! today',
+    
+    # Multiple trailing punctuation
+    'See example.com/?d=4&lt!!',
+    'Visit example.com/?e=5&lt..',
+    'Check example.com/?f=6&lt?!',
+    
+    # Mixed entities and punctuation
+    'Test example.com/?g=7&lt&amp!',
+    'Try example.com/?h=8&lt;!',  # Complete entity with semicolon
+    'Visit example.com/?i=9&lt;.',  # Complete entity with period
+    
+    # No trailing punctuation (should work as before)
+    'Go to example.com/?j=10&lt',
+    'Check example.com/?k=11&lt;',
+    
+    # Regular URLs with punctuation (should still work)
+    'Visit google.com!',
+    'Check example.com?test=1.',
+    'See github.com/django/django?issue=123!',
+]
+
+print("Testing edge cases for urlize fix:")
+print("=" * 50)
+
+for i, case in enumerate(test_cases, 1):
+    result = urlize(case)
+    print(f"{i:2d}. Input:  {case}")
+    print(f"    Output: {result}")
+    print()
\ No newline at end of file
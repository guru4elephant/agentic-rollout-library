diff --git a/django/core/validators.py b/django/core/validators.py
index 84b4f31ec7..351076c36b 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -48,7 +48,7 @@ class RegexValidator:
         regex_matches = self.regex.search(str(value))
         invalid_input = regex_matches if self.inverse_match else not regex_matches
         if invalid_input:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):
 
     def __call__(self, value):
         if not isinstance(value, str):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         # Then check full URL
         try:
@@ -115,7 +115,7 @@ class URLValidator(RegexValidator):
                 try:
                     scheme, netloc, path, query, fragment = urlsplit(value)
                 except ValueError:  # for example, "Invalid IPv6 URL"
-                    raise ValidationError(self.message, code=self.code)
+                    raise ValidationError(self.message, code=self.code, params={'value': value})
                 try:
                     netloc = punycode(netloc)  # IDN -> ACE
                 except UnicodeError:  # invalid domain part
@@ -132,14 +132,14 @@ class URLValidator(RegexValidator):
                 try:
                     validate_ipv6_address(potential_ip)
                 except ValidationError:
-                    raise ValidationError(self.message, code=self.code)
+                    raise ValidationError(self.message, code=self.code, params={'value': value})
 
         # The maximum length of a full host name is 253 characters per RFC 1034
         # section 3.1. It's defined to be 255 bytes or less, but this includes
         # one byte for the length of the name and one byte for the trailing dot
         # that's used to indicate absolute names in DNS.
         if len(urlsplit(value).netloc) > 253:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
 
 integer_validator = RegexValidator(
@@ -208,12 +208,12 @@ class EmailValidator:
 
     def __call__(self, value):
         if not value or '@' not in value:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         user_part, domain_part = value.rsplit('@', 1)
 
         if not self.user_regex.match(user_part):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         if (domain_part not in self.domain_allowlist and
                 not self.validate_domain_part(domain_part)):
@@ -225,7 +225,7 @@ class EmailValidator:
             else:
                 if self.validate_domain_part(domain_part):
                     return
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def validate_domain_part(self, domain_part):
         if self.domain_regex.match(domain_part):
@@ -272,12 +272,12 @@ def validate_ipv4_address(value):
     try:
         ipaddress.IPv4Address(value)
     except ValueError:
-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')
+        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})
 
 
 def validate_ipv6_address(value):
     if not is_valid_ipv6_address(value):
-        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')
+        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})
 
 
 def validate_ipv46_address(value):
@@ -287,7 +287,7 @@ def validate_ipv46_address(value):
         try:
             validate_ipv6_address(value)
         except ValidationError:
-            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')
+            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value})
 
 
 ip_address_validator_map = {
@@ -550,7 +550,7 @@ class ProhibitNullCharactersValidator:
 
     def __call__(self, value):
         if '\x00' in str(value):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e26000fd87
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import EmailValidator
+from django.core.exceptions import ValidationError
+
+# Test the current behavior
+validator = EmailValidator()
+
+try:
+    validator('invalid_email')
+    print("No error raised - this shouldn't happen!")
+except ValidationError as e:
+    print(f"ValidationError raised:")
+    print(f"  Message: {e.message}")
+    print(f"  Code: {e.code}")
+    print(f"  Params: {e.params}")
+    print(f"  Error list: {e.error_list}")
+
+# Test with a custom message that includes %(value)s placeholder
+custom_validator = EmailValidator(message="'%(value)s' is not a valid email.")
+
+try:
+    custom_validator('invalid_email')
+    print("No error raised - this shouldn't happen!")
+except ValidationError as e:
+    print(f"Custom ValidationError raised:")
+    print(f"  Message: {e.message}")
+    print(f"  Code: {e.code}")
+    print(f"  Params: {e.params}")
+    print(f"  Error list: {e.error_list}")
\ No newline at end of file
diff --git a/test_all_validators.py b/test_all_validators.py
new file mode 100644
index 0000000000..4bfff084b6
--- /dev/null
+++ b/test_all_validators.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import (
+    EmailValidator, URLValidator, validate_ipv4_address, 
+    validate_ipv6_address, validate_ipv46_address, ProhibitNullCharactersValidator,
+    RegexValidator
+)
+from django.core.exceptions import ValidationError
+
+def test_validator(validator, invalid_value, description):
+    print(f"\nTesting {description}:")
+    try:
+        validator(invalid_value)
+        print(f"  No error raised for '{invalid_value}' - this shouldn't happen!")
+    except ValidationError as e:
+        print(f"  ValidationError raised for '{invalid_value}':")
+        print(f"    Message: {e.message}")
+        print(f"    Code: {e.code}")
+        print(f"    Params: {e.params}")
+        if e.params and 'value' in e.params:
+            print(f"    Value in params: {e.params['value']}")
+        else:
+            print(f"    No value in params!")
+
+# Test EmailValidator
+email_validator = EmailValidator()
+test_validator(email_validator, 'invalid_email', 'EmailValidator')
+
+# Test URLValidator
+url_validator = URLValidator()
+test_validator(url_validator, 'invalid_url', 'URLValidator')
+
+# Test IP validators
+test_validator(validate_ipv4_address, 'invalid_ip', 'validate_ipv4_address')
+test_validator(validate_ipv6_address, 'invalid_ip', 'validate_ipv6_address')
+test_validator(validate_ipv46_address, 'invalid_ip', 'validate_ipv46_address')
+
+# Test ProhibitNullCharactersValidator
+null_validator = ProhibitNullCharactersValidator()
+test_validator(null_validator, 'test\x00null', 'ProhibitNullCharactersValidator')
+
+# Test RegexValidator with custom message
+regex_validator = RegexValidator(
+    regex=r'^\d+$',
+    message="'%(value)s' is not a number."
+)
+test_validator(regex_validator, 'not_a_number', 'RegexValidator with custom message')
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..7f39a42478
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.core.validators import EmailValidator, URLValidator
+from django.core.exceptions import ValidationError
+
+def test_github_issue():
+    """Test the specific GitHub issue requirement: include value in ValidationError"""
+    
+    print("Testing GitHub issue: Make validators include the provided value in ValidationError")
+    print("=" * 80)
+    
+    # Test 1: EmailValidator with custom message using %(value)s placeholder
+    print("\n1. Testing EmailValidator with custom message:")
+    email_validator = EmailValidator(message="'%(value)s' is not a valid email.")
+    
+    try:
+        email_validator('invalid_email')
+    except ValidationError as e:
+        print(f"   Input: 'invalid_email'")
+        print(f"   Message: {e.message}")
+        print(f"   Params: {e.params}")
+        
+        # Verify the value is included in params
+        assert 'value' in e.params, "Value should be included in params"
+        assert e.params['value'] == 'invalid_email', f"Expected 'invalid_email', got {e.params['value']}"
+        print("   ✓ Value correctly included in params")
+        
+        # Verify the message substitution works
+        expected_message = "'invalid_email' is not a valid email."
+        # The ValidationError interpolation happens in the string representation
+        assert len(e.error_list) == 1, "Should have exactly one error in the list"
+        # Check that the string representation contains the interpolated value
+        assert expected_message in str(e), f"Expected '{expected_message}' in '{str(e)}'"
+        print(f"   ✓ Message correctly substituted: {str(e)}")
+    
+    # Test 2: URLValidator with custom message
+    print("\n2. Testing URLValidator with custom message:")
+    url_validator = URLValidator(message="'%(value)s' is not a valid URL.")
+    
+    try:
+        url_validator('invalid_url')
+    except ValidationError as e:
+        print(f"   Input: 'invalid_url'")
+        print(f"   Message: {e.message}")
+        print(f"   Params: {e.params}")
+        
+        # Verify the value is included in params
+        assert 'value' in e.params, "Value should be included in params"
+        assert e.params['value'] == 'invalid_url', f"Expected 'invalid_url', got {e.params['value']}"
+        print("   ✓ Value correctly included in params")
+        
+        # Verify the message substitution works
+        expected_message = "'invalid_url' is not a valid URL."
+        # The ValidationError interpolation happens in the string representation
+        assert len(e.error_list) == 1, "Should have exactly one error in the list"
+        # Check that the string representation contains the interpolated value
+        assert expected_message in str(e), f"Expected '{expected_message}' in '{str(e)}'"
+        print(f"   ✓ Message correctly substituted: {str(e)}")
+    
+    # Test 3: Default validators should also include value
+    print("\n3. Testing default validators include value:")
+    default_email_validator = EmailValidator()
+    
+    try:
+        default_email_validator('invalid_email')
+    except ValidationError as e:
+        print(f"   Input: 'invalid_email'")
+        print(f"   Message: {e.message}")
+        print(f"   Params: {e.params}")
+        
+        # Verify the value is included in params even with default message
+        assert 'value' in e.params, "Value should be included in params for default validators too"
+        assert e.params['value'] == 'invalid_email', f"Expected 'invalid_email', got {e.params['value']}"
+        print("   ✓ Value correctly included in params for default validator")
+    
+    print("\n" + "=" * 80)
+    print("✓ All tests passed! The GitHub issue requirement is satisfied.")
+    print("Validators now include the provided value in ValidationError.params")
+    print("Custom messages with %(value)s placeholder work correctly")
+
+if __name__ == "__main__":
+    test_github_issue()
\ No newline at end of file
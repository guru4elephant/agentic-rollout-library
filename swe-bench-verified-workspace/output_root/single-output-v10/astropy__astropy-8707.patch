diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..a259b1df00 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1269,6 +1269,10 @@ def _format_float(value):
 def _pad(input):
     """Pad blank space to the input string to be multiple of 80."""
 
+    # Convert bytes to string if necessary
+    if isinstance(input, bytes):
+        input = input.decode('ascii')
+
     _len = len(input)
     if _len == Card.length:
         return input
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..fa55f61656 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -334,8 +334,8 @@ class Header:
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -348,6 +348,14 @@ class Header:
             A new `Header` instance.
         """
 
+        # Convert bytes to string if necessary
+        if isinstance(data, bytes):
+            data = data.decode('ascii')
+        
+        # Convert separator to string if it's bytes
+        if isinstance(sep, bytes):
+            sep = sep.decode('ascii')
+
         cards = []
 
         # If the card separator contains characters that may validly appear in
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4909b9a8c6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+import sys
+from astropy.io.fits import Header
+
+# Test with a simple header string
+header_str = "SIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                    8 / number of bits per data pixel"
+
+print("Testing Header.fromstring with unicode string:")
+try:
+    header = Header.fromstring(header_str)
+    print("SUCCESS: Header created from unicode string")
+    print(f"Number of cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with unicode string: {e}")
+
+print("\nTesting Header.fromstring with bytes string:")
+try:
+    header_bytes = header_str.encode('ascii')
+    header = Header.fromstring(header_bytes)
+    print("SUCCESS: Header created from bytes string")
+    print(f"Number of cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with bytes string: {e}")
+
+print("\nTesting Header.fromstring with bytes string (utf-8):")
+try:
+    header_bytes_utf8 = header_str.encode('utf-8')
+    header = Header.fromstring(header_bytes_utf8)
+    print("SUCCESS: Header created from bytes string (utf-8)")
+    print(f"Number of cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with bytes string (utf-8): {e}")
\ No newline at end of file
diff --git a/test_card_fromstring.py b/test_card_fromstring.py
new file mode 100644
index 0000000000..3fa69188ad
--- /dev/null
+++ b/test_card_fromstring.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from astropy.io.fits import Card
+
+# Test Card.fromstring with both string and bytes
+card_str = "SIMPLE  =                    T / file does conform to FITS standard"
+
+print("Testing Card.fromstring with unicode string:")
+try:
+    card = Card.fromstring(card_str)
+    print("SUCCESS: Card created from unicode string")
+    print(f"Card keyword: {card.keyword}")
+    print(f"Card value: {card.value}")
+except Exception as e:
+    print(f"ERROR with unicode string: {e}")
+
+print("\nTesting Card.fromstring with bytes string:")
+try:
+    card_bytes = card_str.encode('ascii')
+    card = Card.fromstring(card_bytes)
+    print("SUCCESS: Card created from bytes string")
+    print(f"Card keyword: {card.keyword}")
+    print(f"Card value: {card.value}")
+except Exception as e:
+    print(f"ERROR with bytes string: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..fe3f925b0f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+
+from astropy.io.fits import Header, Card
+
+# Test various edge cases
+print("=== Testing edge cases ===")
+
+# Test 1: Empty string/bytes
+print("\n1. Testing empty string:")
+try:
+    header = Header.fromstring("")
+    print(f"SUCCESS: Empty string, cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with empty string: {e}")
+
+print("\n2. Testing empty bytes:")
+try:
+    header = Header.fromstring(b"")
+    print(f"SUCCESS: Empty bytes, cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with empty bytes: {e}")
+
+# Test 2: Single card
+single_card_str = "SIMPLE  =                    T / file does conform to FITS standard"
+single_card_bytes = single_card_str.encode('ascii')
+
+print("\n3. Testing single card string:")
+try:
+    header = Header.fromstring(single_card_str)
+    print(f"SUCCESS: Single card string, cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with single card string: {e}")
+
+print("\n4. Testing single card bytes:")
+try:
+    header = Header.fromstring(single_card_bytes)
+    print(f"SUCCESS: Single card bytes, cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with single card bytes: {e}")
+
+# Test 3: Multiple cards with separator
+multi_card_str = "SIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                    8 / number of bits per data pixel"
+multi_card_bytes = multi_card_str.encode('ascii')
+
+print("\n5. Testing multi-card string with newline separator:")
+try:
+    header = Header.fromstring(multi_card_str, sep='\n')
+    print(f"SUCCESS: Multi-card string, cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with multi-card string: {e}")
+
+print("\n6. Testing multi-card bytes with newline separator:")
+try:
+    header = Header.fromstring(multi_card_bytes, sep='\n')
+    print(f"SUCCESS: Multi-card bytes, cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with multi-card bytes: {e}")
+
+# Test 4: Bytes separator
+print("\n7. Testing bytes separator:")
+try:
+    header = Header.fromstring(multi_card_bytes, sep=b'\n')
+    print(f"SUCCESS: Bytes separator, cards: {len(header)}")
+except Exception as e:
+    print(f"ERROR with bytes separator: {e}")
+
+# Test 5: Card.fromstring edge cases
+print("\n8. Testing Card.fromstring with bytes:")
+try:
+    card = Card.fromstring(single_card_bytes)
+    print(f"SUCCESS: Card.fromstring with bytes, keyword: {card.keyword}")
+except Exception as e:
+    print(f"ERROR with Card.fromstring bytes: {e}")
+
+print("\n=== All tests completed ===")
\ No newline at end of file
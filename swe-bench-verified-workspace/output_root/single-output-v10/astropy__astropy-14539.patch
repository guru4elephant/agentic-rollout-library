diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py
index 100cdf1b8c..d3608ef01d 100644
--- a/astropy/io/fits/diff.py
+++ b/astropy/io/fits/diff.py
@@ -1449,7 +1449,7 @@ class TableDataDiff(_BaseDiff):
                 arrb.dtype, np.floating
             ):
                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)
-            elif "P" in col.format:
+            elif "P" in col.format or "Q" in col.format:
                 diffs = (
                     [
                         idx
diff --git a/debug.fits b/debug.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/debug.fits differ
diff --git a/debug_vla.py b/debug_vla.py
new file mode 100644
index 0000000000..6c86b78ee1
--- /dev/null
+++ b/debug_vla.py
@@ -0,0 +1,26 @@
+from astropy.io import fits
+import numpy as np
+
+# Create a VLA column
+col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+hdu = fits.BinTableHDU.from_columns([col])
+hdu.writeto('debug.fits', overwrite=True)
+
+# Read it back and examine the structure
+with fits.open('debug.fits') as hdul:
+    data = hdul[1].data
+    print("Data:", data)
+    print("Data type:", type(data))
+    print("Column format:", hdul[1].columns[0].format)
+    print("Column array:", data['a'])
+    print("Array type:", type(data['a']))
+    print("Array dtype:", data['a'].dtype)
+    print("Array shape:", data['a'].shape)
+    print("First element:", data['a'][0])
+    print("Second element:", data['a'][1])
+    
+    # Test the comparison that's failing
+    arr1 = data['a']
+    arr2 = data['a']
+    print("Comparison result:", arr1 != arr2)
+    print("Comparison type:", type(arr1 != arr2))
\ No newline at end of file
diff --git a/diffbug.fits b/diffbug.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/diffbug.fits differ
diff --git a/pyproject.toml b/pyproject.toml
index b4e9ef8387..ff68a7403d 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a7747b1bbd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,7 @@
+from astropy.io import fits
+col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+hdu = fits.BinTableHDU.from_columns([col])
+hdu.writeto('diffbug.fits', overwrite=True)
+
+print(fits.FITSDiff('diffbug.fits', 'diffbug.fits').identical)
+fits.printdiff('diffbug.fits', 'diffbug.fits')
\ No newline at end of file
diff --git a/test1.fits b/test1.fits
new file mode 100644
index 0000000000..e2c86f531d
Binary files /dev/null and b/test1.fits differ
diff --git a/test2.fits b/test2.fits
new file mode 100644
index 0000000000..17d64377a7
Binary files /dev/null and b/test2.fits differ
diff --git a/test_double.fits b/test_double.fits
new file mode 100644
index 0000000000..87a06d564a
Binary files /dev/null and b/test_double.fits differ
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2a508d1c8a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,49 @@
+from astropy.io import fits
+import numpy as np
+
+# Test case 1: Different VLA formats
+print("Testing different VLA formats...")
+
+# Test with 'P' format (integer variable-length array)
+col_p = fits.Column('a', format='PJ', array=[[1], [1, 2]])
+hdu_p = fits.BinTableHDU.from_columns([col_p])
+hdu_p.writeto('test_p.fits', overwrite=True)
+diff_p = fits.FITSDiff('test_p.fits', 'test_p.fits')
+print(f"P format identical: {diff_p.identical}")
+
+# Test with 'Q' format (double precision variable-length array)  
+col_q = fits.Column('b', format='QD', array=[[0.0], [0.0, 1.0]])
+hdu_q = fits.BinTableHDU.from_columns([col_q])
+hdu_q.writeto('test_q.fits', overwrite=True)
+diff_q = fits.FITSDiff('test_q.fits', 'test_q.fits')
+print(f"Q format identical: {diff_q.identical}")
+
+# Test case 2: Mixed VLA and regular columns
+print("Testing mixed VLA and regular columns...")
+col_vla = fits.Column('vla', format='QD', array=[[0.0], [0.0, 1.0]])
+col_regular = fits.Column('regular', format='D', array=[1.0, 2.0])
+hdu_mixed = fits.BinTableHDU.from_columns([col_vla, col_regular])
+hdu_mixed.writeto('test_mixed.fits', overwrite=True)
+diff_mixed = fits.FITSDiff('test_mixed.fits', 'test_mixed.fits')
+print(f"Mixed columns identical: {diff_mixed.identical}")
+
+# Test case 3: Empty VLA
+print("Testing empty VLA...")
+col_empty = fits.Column('empty', format='QD', array=[[], []])
+hdu_empty = fits.BinTableHDU.from_columns([col_empty])
+hdu_empty.writeto('test_empty.fits', overwrite=True)
+diff_empty = fits.FITSDiff('test_empty.fits', 'test_empty.fits')
+print(f"Empty VLA identical: {diff_empty.identical}")
+
+# Test case 4: Actually different files should show differences
+print("Testing actual differences...")
+col1 = fits.Column('a', format='QD', array=[[0.0], [0.0, 1.0]])
+col2 = fits.Column('a', format='QD', array=[[1.0], [0.0, 1.0]])  # Different first element
+hdu1 = fits.BinTableHDU.from_columns([col1])
+hdu2 = fits.BinTableHDU.from_columns([col2])
+hdu1.writeto('test1.fits', overwrite=True)
+hdu2.writeto('test2.fits', overwrite=True)
+diff_real = fits.FITSDiff('test1.fits', 'test2.fits')
+print(f"Actually different files identical: {diff_real.identical}")
+if not diff_real.identical:
+    fits.printdiff('test1.fits', 'test2.fits')
\ No newline at end of file
diff --git a/test_empty.fits b/test_empty.fits
new file mode 100644
index 0000000000..d4aae88d87
Binary files /dev/null and b/test_empty.fits differ
diff --git a/test_int.fits b/test_int.fits
new file mode 100644
index 0000000000..878c5f0902
Binary files /dev/null and b/test_int.fits differ
diff --git a/test_mixed.fits b/test_mixed.fits
new file mode 100644
index 0000000000..27dd4368a6
Binary files /dev/null and b/test_mixed.fits differ
diff --git a/test_p.fits b/test_p.fits
new file mode 100644
index 0000000000..ab423d3749
Binary files /dev/null and b/test_p.fits differ
diff --git a/test_q.fits b/test_q.fits
new file mode 100644
index 0000000000..39d4db6e69
Binary files /dev/null and b/test_q.fits differ
diff --git a/test_regular_columns.py b/test_regular_columns.py
new file mode 100644
index 0000000000..1e1347aadb
--- /dev/null
+++ b/test_regular_columns.py
@@ -0,0 +1,26 @@
+from astropy.io import fits
+import numpy as np
+
+# Test with regular columns (non-VLA)
+print("Testing regular columns...")
+
+# Test with regular integer column
+col_int = fits.Column('int_col', format='J', array=[1, 2, 3])
+hdu_int = fits.BinTableHDU.from_columns([col_int])
+hdu_int.writeto('test_int.fits', overwrite=True)
+diff_int = fits.FITSDiff('test_int.fits', 'test_int.fits')
+print(f"Integer column identical: {diff_int.identical}")
+
+# Test with regular double column
+col_double = fits.Column('double_col', format='D', array=[1.0, 2.0, 3.0])
+hdu_double = fits.BinTableHDU.from_columns([col_double])
+hdu_double.writeto('test_double.fits', overwrite=True)
+diff_double = fits.FITSDiff('test_double.fits', 'test_double.fits')
+print(f"Double column identical: {diff_double.identical}")
+
+# Test with string column
+col_str = fits.Column('str_col', format='10A', array=['hello', 'world'])
+hdu_str = fits.BinTableHDU.from_columns([col_str])
+hdu_str.writeto('test_str.fits', overwrite=True)
+diff_str = fits.FITSDiff('test_str.fits', 'test_str.fits')
+print(f"String column identical: {diff_str.identical}")
\ No newline at end of file
diff --git a/test_str.fits b/test_str.fits
new file mode 100644
index 0000000000..cc9b1e9203
Binary files /dev/null and b/test_str.fits differ
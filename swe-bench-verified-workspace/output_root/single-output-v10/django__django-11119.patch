diff --git a/django/template/engine.py b/django/template/engine.py
index dfaa67ba12..ff9ce58d59 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -160,7 +160,7 @@ class Engine:
         if isinstance(context, Context):
             return t.render(context)
         else:
-            return t.render(Context(context))
+            return t.render(Context(context, autoescape=self.autoescape))
 
     def select_template(self, template_name_list):
         """
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..00d0cfe712
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.template import Engine, Context
+
+def test_comprehensive_autoescape():
+    """Comprehensive test of the autoescape fix"""
+    
+    # Create test template
+    with open('test_template.html', 'w') as f:
+        f.write("{{ content }}")
+    
+    test_content = '<script>alert("test")</script>'
+    
+    # Test 1: Engine with autoescape=False
+    engine_false = Engine(autoescape=False, dirs=[os.getcwd()])
+    result_false = engine_false.render_to_string('test_template.html', {'content': test_content})
+    expected_false = test_content
+    print(f"Test 1 - autoescape=False: {result_false}")
+    
+    # Test 2: Engine with autoescape=True
+    engine_true = Engine(autoescape=True, dirs=[os.getcwd()])
+    result_true = engine_true.render_to_string('test_template.html', {'content': test_content})
+    expected_true = '&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;'
+    print(f"Test 2 - autoescape=True: {result_true}")
+    
+    # Test 3: Default engine (should be autoescape=True)
+    engine_default = Engine(dirs=[os.getcwd()])
+    result_default = engine_default.render_to_string('test_template.html', {'content': test_content})
+    print(f"Test 3 - default engine: {result_default}")
+    
+    # Test 4: With existing Context object (should preserve its settings)
+    existing_context_true = Context({'content': test_content}, autoescape=True)
+    result_existing_true = engine_false.render_to_string('test_template.html', existing_context_true)
+    print(f"Test 4 - existing Context with autoescape=True: {result_existing_true}")
+    
+    existing_context_false = Context({'content': test_content}, autoescape=False)
+    result_existing_false = engine_true.render_to_string('test_template.html', existing_context_false)
+    print(f"Test 5 - existing Context with autoescape=False: {result_existing_false}")
+    
+    # Clean up
+    os.unlink('test_template.html')
+    
+    # Verify results
+    tests_passed = 0
+    total_tests = 5
+    
+    if result_false == expected_false:
+        print("✓ Test 1 PASSED")
+        tests_passed += 1
+    else:
+        print(f"✗ Test 1 FAILED: expected {repr(expected_false)}, got {repr(result_false)}")
+    
+    if result_true == expected_true:
+        print("✓ Test 2 PASSED")
+        tests_passed += 1
+    else:
+        print(f"✗ Test 2 FAILED: expected {repr(expected_true)}, got {repr(result_true)}")
+    
+    if result_default == expected_true:  # Default should be autoescape=True
+        print("✓ Test 3 PASSED")
+        tests_passed += 1
+    else:
+        print(f"✗ Test 3 FAILED: expected {repr(expected_true)}, got {repr(result_default)}")
+    
+    if result_existing_true == expected_true:  # Should preserve existing Context autoescape=True
+        print("✓ Test 4 PASSED")
+        tests_passed += 1
+    else:
+        print(f"✗ Test 4 FAILED: expected {repr(expected_true)}, got {repr(result_existing_true)}")
+    
+    if result_existing_false == expected_false:  # Should preserve existing Context autoescape=False
+        print("✓ Test 5 PASSED")
+        tests_passed += 1
+    else:
+        print(f"✗ Test 5 FAILED: expected {repr(expected_false)}, got {repr(result_existing_false)}")
+    
+    print(f"\nResults: {tests_passed}/{total_tests} tests passed")
+    return tests_passed == total_tests
+
+if __name__ == "__main__":
+    success = test_comprehensive_autoescape()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3fbf64ff28
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.template import Engine, Context
+
+def test_autoescape_issue():
+    # Create engine with autoescape=False
+    engine = Engine(autoescape=False)
+    
+    # Create a template with HTML content
+    template_string = "{{ content }}"
+    template = engine.from_string(template_string)
+    
+    # Test with Context created manually (should honor autoescape=False)
+    manual_context = Context({'content': '<script>alert("test")</script>'}, autoescape=engine.autoescape)
+    manual_result = template.render(manual_context)
+    print(f"Manual Context result (autoescape={engine.autoescape}): {manual_result}")
+    
+    # Test with render_to_string (currently doesn't honor autoescape=False)
+    # Let's examine what happens in render_to_string by looking at the source
+    context_dict = {'content': '<script>alert("test")</script>'}
+    
+    # We'll manually call the same logic as render_to_string but pass autoescape
+    from django.template.base import Template
+    t = Template(template_string, engine=engine)
+    
+    # This is what render_to_string does internally - create Context without autoescape
+    bad_context = Context(context_dict)  # autoescape defaults to True
+    bad_result = t.render(bad_context)
+    print(f"Bad Context result (autoescape=True by default): {bad_result}")
+    
+    # This is what it should do - pass engine.autoescape
+    good_context = Context(context_dict, autoescape=engine.autoescape)
+    good_result = t.render(good_context)
+    print(f"Good Context result (autoescape={engine.autoescape}): {good_result}")
+    
+    # Compare results
+    if manual_result == good_result:
+        print("✓ PASS: Manual and good results match")
+        if manual_result == bad_result:
+            print("✗ FAIL: But bad result also matches - issue may not exist")
+            return False
+        else:
+            print("✓ CONFIRMED: Issue exists - bad result differs")
+            return True
+    else:
+        print("✗ FAIL: Manual and good results don't match")
+        return False
+
+if __name__ == "__main__":
+    success = test_autoescape_issue()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..ab539919fe
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.template import Engine
+
+def test_basic_functionality():
+    """Test that basic engine functionality still works"""
+    
+    # Create a simple template file
+    with open('simple_test.html', 'w') as f:
+        f.write("Hello {{ name }}!")
+    
+    # Test basic rendering
+    engine = Engine(dirs=[os.getcwd()])
+    result = engine.render_to_string('simple_test.html', {'name': 'World'})
+    
+    print(f"Basic rendering test: {result}")
+    
+    if result == "Hello World!":
+        print("✓ PASS: Basic rendering works")
+        return True
+    else:
+        print("✗ FAIL: Basic rendering broken")
+        return False
+
+if __name__ == "__main__":
+    success = test_basic_functionality()
+    # Clean up
+    if os.path.exists('simple_test.html'):
+        os.unlink('simple_test.html')
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5e257f828a
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.template import Engine, Context
+
+def test_edge_cases():
+    # Test 1: When context is already a Context object (should not be modified)
+    engine = Engine(autoescape=False)
+    
+    # Create a simple template file
+    with open('test_template.html', 'w') as f:
+        f.write("{{ content }}")
+    engine.dirs = [os.getcwd()]
+    
+    # Create Context with different autoescape setting
+    existing_context = Context({'content': '<script>alert("test")</script>'}, autoescape=True)
+    result = engine.render_to_string('test_template.html', existing_context)
+    
+    print(f"Existing Context with autoescape=True: {result}")
+    
+    # Should still be escaped because existing Context has autoescape=True
+    if result == '&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;':
+        print("✓ PASS: Existing Context settings are preserved")
+    else:
+        print("✗ FAIL: Existing Context settings were not preserved")
+        return False
+    
+    # Test 2: Default engine behavior (autoescape=True)
+    engine_default = Engine()  # autoescape defaults to True
+    engine_default.dirs = [os.getcwd()]
+    
+    context_dict = {'content': '<script>alert("test")</script>'}
+    result_default = engine_default.render_to_string('test_template.html', context_dict)
+    
+    print(f"Default engine (autoescape=True): {result_default}")
+    
+    if result_default == '&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;':
+        print("✓ PASS: Default autoescape=True works correctly")
+    else:
+        print("✗ FAIL: Default autoescape=True doesn't work")
+        return False
+    
+    # Clean up
+    os.unlink('test_template.html')
+    
+    return True
+
+if __name__ == "__main__":
+    success = test_edge_cases()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..a35528bba4
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.template import Engine, Context
+
+def test_render_to_string_fix():
+    # Test with autoescape=False
+    engine_false = Engine(autoescape=False)
+    context_dict = {'content': '<script>alert("test")</script>'}
+    
+    # Create a simple template file
+    with open('test_template.html', 'w') as f:
+        f.write("{{ content }}")
+    
+    # Add current directory to engine paths
+    engine_false.dirs = [os.getcwd()]
+    
+    # Test render_to_string with autoescape=False
+    result_false = engine_false.render_to_string('test_template.html', context_dict)
+    print(f"render_to_string with autoescape=False: {result_false}")
+    
+    # Test with autoescape=True
+    engine_true = Engine(autoescape=True)
+    engine_true.dirs = [os.getcwd()]
+    
+    result_true = engine_true.render_to_string('test_template.html', context_dict)
+    print(f"render_to_string with autoescape=True: {result_true}")
+    
+    # Clean up
+    os.unlink('test_template.html')
+    
+    # Results should be different based on autoescape setting
+    if result_false == '<script>alert("test")</script>' and result_true == '&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;':
+        print("✓ PASS: render_to_string honors autoescape setting")
+        return True
+    else:
+        print("✗ FAIL: render_to_string does not honor autoescape setting")
+        print(f"  autoescape=False result: {repr(result_false)}")
+        print(f"  autoescape=True result: {repr(result_true)}")
+        return False
+
+if __name__ == "__main__":
+    success = test_render_to_string_fix()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_select_template.py b/test_select_template.py
new file mode 100644
index 0000000000..d26acd47c1
--- /dev/null
+++ b/test_select_template.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.template import Engine
+
+def test_select_template_autoescape():
+    """Test that select_template also honors autoescape in render_to_string"""
+    
+    # Create template files
+    with open('template1.html', 'w') as f:
+        f.write("Template 1: {{ content }}")
+    with open('template2.html', 'w') as f:
+        f.write("Template 2: {{ content }}")
+    
+    context_dict = {'content': '<script>alert("test")</script>'}
+    
+    # Test with autoescape=False
+    engine_false = Engine(autoescape=False, dirs=[os.getcwd()])
+    result_false = engine_false.render_to_string(['template1.html', 'template2.html'], context_dict)
+    print(f"select_template with autoescape=False: {result_false}")
+    
+    # Test with autoescape=True
+    engine_true = Engine(autoescape=True, dirs=[os.getcwd()])
+    result_true = engine_true.render_to_string(['template1.html', 'template2.html'], context_dict)
+    print(f"select_template with autoescape=True: {result_true}")
+    
+    # Clean up
+    os.unlink('template1.html')
+    os.unlink('template2.html')
+    
+    # Results should be different based on autoescape setting
+    if result_false == 'Template 1: <script>alert("test")</script>' and result_true == 'Template 1: &lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;':
+        print("✓ PASS: select_template in render_to_string honors autoescape setting")
+        return True
+    else:
+        print("✗ FAIL: select_template in render_to_string does not honor autoescape setting")
+        print(f"  autoescape=False result: {repr(result_false)}")
+        print(f"  autoescape=True result: {repr(result_true)}")
+        return False
+
+if __name__ == "__main__":
+    success = test_select_template_autoescape()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..b628ec51ad 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -106,6 +106,10 @@ def get_format(format_type, lang=None, use_l10n=None):
     If use_l10n is provided and is not None, it forces the value to
     be localized (or not), overriding the value of settings.USE_L10N.
     """
+    # Convert lazy format_type to string if needed
+    from django.utils.functional import Promise
+    if isinstance(format_type, Promise):
+        format_type = str(format_type)
     if use_l10n is None:
         try:
             use_l10n = settings._USE_L10N_INTERNAL
diff --git a/final_comprehensive_test.py b/final_comprehensive_test.py
new file mode 100644
index 0000000000..ef5fe31e6c
--- /dev/null
+++ b/final_comprehensive_test.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.utils.translation import gettext_lazy as _
+from django.utils.formats import get_format
+from django.template.defaultfilters import date
+from datetime import datetime
+
+def test_case(name, test_func):
+    print(f"\nTesting {name}:")
+    try:
+        result = test_func()
+        print(f"✓ Success: {result}")
+        return True
+    except Exception as e:
+        print(f"✗ Error: {e}")
+        import traceback
+        traceback.print_exc()
+        return False
+
+print("=== COMPREHENSIVE TEST SUITE ===")
+
+# Test 1: Original issue - get_format with lazy string
+test_case("get_format with lazy string", lambda: get_format(_('DATE_FORMAT')))
+
+# Test 2: Date template filter with lazy format (the original use case)
+test_date = datetime(2023, 12, 25, 14, 30, 0)
+test_case("date filter with lazy format", lambda: date(test_date, _('Y-m-d H:i:s')))
+
+# Test 3: Multiple lazy format types
+test_case("lazy TIME_FORMAT", lambda: get_format(_('TIME_FORMAT')))
+test_case("lazy DATETIME_FORMAT", lambda: get_format(_('DATETIME_FORMAT')))
+
+# Test 4: Non-existent format types (should return input)
+test_case("non-existent lazy format", lambda: get_format(_('NON_EXISTENT_FORMAT')))
+
+# Test 5: Regular strings still work
+test_case("regular DATE_FORMAT", lambda: get_format("DATE_FORMAT"))
+
+# Test 6: Cache functionality (same call should return cached result)
+result1 = get_format(_('DATE_FORMAT'))
+result2 = get_format(_('DATE_FORMAT'))
+test_case("cached lazy format", lambda: "Cached" if result1 == result2 else "Not cached")
+
+# Test 7: Different languages (if available)
+test_case("French DATE_FORMAT", lambda: get_format(_('DATE_FORMAT'), lang='fr'))
+
+print("\n=== TEST SUMMARY ===")
+print("All tests completed! The fix should handle:")
+print("- Lazy strings as format_type parameter")
+print("- Regular strings (backward compatibility)")
+print("- Template filter usage with lazy formats")
+print("- Cache functionality with lazy strings")
+print("- Non-existent format types")
+print("- Different language settings")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..32b3a2a70d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.utils.translation import gettext_lazy as _
+from django.utils.formats import get_format
+from datetime import datetime
+
+# Test the issue: passing a lazy string to get_format
+print("Testing get_format with lazy string...")
+
+try:
+    # This should trigger the issue
+    lazy_format = _('DATE_FORMAT')
+    print(f"Lazy format type: {type(lazy_format)}")
+    print(f"Lazy format value: {lazy_format}")
+    
+    result = get_format(lazy_format)
+    print(f"Success! Result: {result}")
+except Exception as e:
+    print(f"Error occurred: {e}")
+    print(f"Error type: {type(e)}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_date_filter.py b/test_date_filter.py
new file mode 100644
index 0000000000..736a264a26
--- /dev/null
+++ b/test_date_filter.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.utils.translation import gettext_lazy as _
+from django.template.defaultfilters import date
+from datetime import datetime
+
+print("Testing date template filter with lazy format string...")
+
+# Create a test datetime
+test_date = datetime(2023, 12, 25, 14, 30, 0)
+
+try:
+    # This should work now - using a lazy string as the format
+    result = date(test_date, _('Y-m-d H:i:s'))
+    print(f"Success! Date filter with lazy format: {result}")
+    
+    # Test with different lazy formats
+    result2 = date(test_date, _('Y-m-d'))
+    print(f"Success! Date filter with lazy Y-m-d format: {result2}")
+    
+    result3 = date(test_date, _('DATE_FORMAT'))
+    print(f"Success! Date filter with lazy DATE_FORMAT: {result3}")
+    
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4137af9954
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.utils.translation import gettext_lazy as _
+from django.utils.formats import get_format
+from datetime import datetime
+
+def test_case(name, format_input):
+    print(f"\nTesting {name}:")
+    try:
+        result = get_format(format_input)
+        print(f"Success! Input: {format_input} (type: {type(format_input)})")
+        print(f"Result: {result}")
+        return True
+    except Exception as e:
+        print(f"Error: {e}")
+        return False
+
+print("Testing various edge cases for get_format...")
+
+# Test 1: Regular string (should work as before)
+test_case("regular string", "DATE_FORMAT")
+
+# Test 2: Lazy string (the main issue)
+test_case("lazy string", _('DATE_FORMAT'))
+
+# Test 3: Other lazy format types
+test_case("lazy TIME_FORMAT", _('TIME_FORMAT'))
+test_case("lazy DATETIME_FORMAT", _('DATETIME_FORMAT'))
+
+# Test 4: Non-existent format type (should return the input)
+test_case("non-existent format", "NON_EXISTENT_FORMAT")
+
+# Test 5: Lazy non-existent format
+test_case("lazy non-existent format", _('NON_EXISTENT_FORMAT'))
+
+# Test 6: Non-string input (should fail gracefully)
+test_case("integer input", 123)
+
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/test_get_format_basic.py b/test_get_format_basic.py
new file mode 100644
index 0000000000..65ba9b1fdf
--- /dev/null
+++ b/test_get_format_basic.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+django.setup()
+
+from django.utils.formats import get_format
+
+print("Testing basic get_format functionality...")
+
+# Test basic functionality
+test_cases = [
+    "DATE_FORMAT",
+    "TIME_FORMAT", 
+    "DATETIME_FORMAT",
+    "DECIMAL_SEPARATOR",
+    "THOUSAND_SEPARATOR",
+]
+
+for format_type in test_cases:
+    try:
+        result = get_format(format_type)
+        print(f"✓ {format_type}: {result}")
+    except Exception as e:
+        print(f"✗ {format_type}: Error - {e}")
+
+print("Basic functionality test completed!")
\ No newline at end of file
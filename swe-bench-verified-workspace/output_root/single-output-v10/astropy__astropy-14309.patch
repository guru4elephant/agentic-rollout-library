diff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py
index 4b6150f4ac..78cd90cf89 100644
--- a/astropy/io/fits/connect.py
+++ b/astropy/io/fits/connect.py
@@ -69,7 +69,8 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):
             (".fits", ".fits.gz", ".fit", ".fit.gz", ".fts", ".fts.gz")
         ):
             return True
-    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))
+    # Check if args is not empty before accessing args[0]
+    return len(args) > 0 and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))
 
 
 def _decode_mixins(tbl):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..bcd9b0f277
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+from astropy.io.registry import identify_format
+from astropy.table import Table
+
+# Test the exact case from the GitHub issue
+print("Testing the exact case from GitHub issue...")
+try:
+    fmts = identify_format("write", Table, "bububu.ecsv", None, [], {})
+    print(f"Success! Formats identified: {fmts}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test with FITS extension
+print("\nTesting with FITS extension...")
+try:
+    fmts = identify_format("write", Table, "test.fits", None, [], {})
+    print(f"Success! Formats identified: {fmts}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test with non-FITS extension
+print("\nTesting with non-FITS extension...")
+try:
+    fmts = identify_format("write", Table, "test.txt", None, [], {})
+    print(f"Success! Formats identified: {fmts}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test with HDU object in args
+print("\nTesting with HDU object in args...")
+try:
+    from astropy.io.fits import TableHDU
+    hdu = TableHDU()
+    fmts = identify_format("write", Table, "test.fits", None, [hdu], {})
+    print(f"Success! Formats identified: {fmts}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 41865a87d1..922d14bf49 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..226e88eb2d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+from astropy.io.registry import identify_format
+from astropy.table import Table
+
+print("Testing the issue...")
+try:
+    # This should reproduce the IndexError
+    result = identify_format("write", Table, "bububu.ecsv", None, [], {})
+    print(f"Result: {result}")
+except IndexError as e:
+    print(f"IndexError reproduced: {e}")
+except Exception as e:
+    print(f"Other error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..b29cb7d0c7
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,44 @@
+#!/usr/bin/env python3
+
+from astropy.io.registry import identify_format
+from astropy.table import Table
+from astropy.io.fits import HDUList, TableHDU, BinTableHDU, GroupsHDU
+import numpy as np
+
+def test_case(description, *args, **kwargs):
+    print(f"\nTesting: {description}")
+    try:
+        result = identify_format(*args, **kwargs)
+        print(f"  Result: {result}")
+        return True
+    except Exception as e:
+        print(f"  Error: {type(e).__name__}: {e}")
+        return False
+
+print("Running comprehensive tests...")
+
+# Test 1: Original issue - empty args
+test_case("Empty args", "write", Table, "bububu.ecsv", None, [], {})
+
+# Test 2: FITS extension with empty args
+test_case("FITS extension with empty args", "write", Table, "test.fits", None, [], {})
+
+# Test 3: Non-empty args with valid HDU
+hdu = TableHDU()
+test_case("Non-empty args with HDU", "write", Table, "test.fits", None, [hdu], {})
+
+# Test 4: Non-empty args with non-HDU object
+test_case("Non-empty args with non-HDU object", "write", Table, "test.fits", None, ["not_an_hdu"], {})
+
+# Test 5: Empty string as filepath
+test_case("Empty string filepath", "write", Table, "", None, [], {})
+
+# Test 6: None filepath
+test_case("None filepath", "write", Table, None, None, [], {})
+
+# Test 7: Fileobj instead of filepath
+import io
+fileobj = io.BytesIO(b"NOT_A_FITS_FILE")
+test_case("Fileobj instead of filepath", "write", Table, None, fileobj, [], {})
+
+print("\nAll tests completed!")
\ No newline at end of file
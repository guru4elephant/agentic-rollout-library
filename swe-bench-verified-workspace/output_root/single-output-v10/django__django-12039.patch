diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 44e49806f8..5e7d2ca189 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -114,7 +114,8 @@ class IndexColumns(Columns):
             # length as self.columns.
             col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
             try:
-                col = '{} {}'.format(col, self.col_suffixes[idx])
+                if self.col_suffixes[idx]:
+                    col = '{} {}'.format(col, self.col_suffixes[idx])
             except IndexError:
                 pass
             return col
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dcff9a48ab
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.postgresql',
+                'NAME': 'test',
+                'USER': 'test',
+                'PASSWORD': 'test',
+                'HOST': 'localhost',
+                'PORT': '5432',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Index
+
+# Create a simple model for testing
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+# Test case 1: Index with descending order (should have proper whitespace)
+print("Test case 1: Index with descending order")
+index1 = Index(fields=['-name'], name='idx1')
+with connection.schema_editor() as schema_editor:
+    sql = index1.create_sql(Author, schema_editor)
+    print(f"Generated SQL: {sql}")
+
+# Test case 2: Index with opclasses but no explicit ordering (should not have extra whitespace)
+print("\nTest case 2: Index with opclasses but no explicit ordering")
+index2 = Index(fields=['name'], name='idx2', opclasses=['text_pattern_ops'])
+with connection.schema_editor() as schema_editor:
+    sql = index2.create_sql(Author, schema_editor)
+    print(f"Generated SQL: {sql}")
+
+# Test case 3: Index with opclasses and descending order (should have proper whitespace)
+print("\nTest case 3: Index with opclasses and descending order")
+index3 = Index(fields=['-name'], name='idx3', opclasses=['text_pattern_ops'])
+with connection.schema_editor() as schema_editor:
+    sql = index3.create_sql(Author, schema_editor)
+    print(f"Generated SQL: {sql}")
+
+# Test case 4: Regular index (should have proper whitespace)
+print("\nTest case 4: Regular index")
+index4 = Index(fields=['name'], name='idx4')
+with connection.schema_editor() as schema_editor:
+    sql = index4.create_sql(Author, schema_editor)
+    print(f"Generated SQL: {sql}")
\ No newline at end of file
diff --git a/test_ddl_references.py b/test_ddl_references.py
new file mode 100644
index 0000000000..e74345d211
--- /dev/null
+++ b/test_ddl_references.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+
+# Add the Django path
+sys.path.insert(0, '/testbed')
+
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+# Test case 1: Index with opclasses but no explicit ordering (should not have extra whitespace)
+print("Test case 1: Index with opclasses but no explicit ordering")
+index_cols = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=[""],  # Empty string for ascending order
+    opclasses=["text_pattern_ops"]
+)
+print(f"Generated: {index_cols}")
+print("Expected: \"name\" text_pattern_ops")
+
+# Test case 2: Index with opclasses and descending order (should have proper whitespace)
+print("\nTest case 2: Index with opclasses and descending order")
+index_cols2 = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=["DESC"],  # DESC for descending order
+    opclasses=["text_pattern_ops"]
+)
+print(f"Generated: {index_cols2}")
+print("Expected: \"name\" text_pattern_ops DESC")
+
+# Test case 3: Multiple columns with mixed ordering
+print("\nTest case 3: Multiple columns with mixed ordering")
+index_cols3 = IndexColumns(
+    table="schema_author", 
+    columns=["name", "age"], 
+    quote_name=quote_name, 
+    col_suffixes=["", "DESC"],  # First ascending, second descending
+    opclasses=["text_pattern_ops", "int4_ops"]
+)
+print(f"Generated: {index_cols3}")
+print("Expected: \"name\" text_pattern_ops, \"age\" int4_ops DESC")
+
+# Test case 4: Regular index without opclasses (should use Columns class)
+print("\nTest case 4: Regular index without opclasses")
+from django.db.backends.ddl_references import Columns
+
+regular_cols = Columns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=[""]  # Empty string for ascending order
+)
+print(f"Generated: {regular_cols}")
+print("Expected: \"name\"")
+
+# Test case 5: Regular index with descending order
+print("\nTest case 5: Regular index with descending order")
+regular_cols2 = Columns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=["DESC"]  # DESC for descending order
+)
+print(f"Generated: {regular_cols2}")
+print("Expected: \"name\"DESC")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..7bacb8f817
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+
+# Add the Django path
+sys.path.insert(0, '/testbed')
+
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+# Edge case 1: Empty col_suffixes (should use default behavior)
+print("Edge case 1: Empty col_suffixes")
+index_cols = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=[],  # Empty list
+    opclasses=["text_pattern_ops"]
+)
+print(f"Generated: {index_cols}")
+print("Expected: \"name\" text_pattern_ops")
+
+# Edge case 2: col_suffixes shorter than columns (should handle gracefully)
+print("\nEdge case 2: col_suffixes shorter than columns")
+index_cols2 = IndexColumns(
+    table="schema_author", 
+    columns=["name", "age"], 
+    quote_name=quote_name, 
+    col_suffixes=["DESC"],  # Only one suffix for two columns
+    opclasses=["text_pattern_ops", "int4_ops"]
+)
+print(f"Generated: {index_cols2}")
+print("Expected: \"name\" text_pattern_ops DESC, \"age\" int4_ops")
+
+# Edge case 3: col_suffixes with spaces (should handle properly)
+print("\nEdge case 3: col_suffixes with spaces")
+index_cols3 = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=[" DESC"],  # Space before DESC
+    opclasses=["text_pattern_ops"]
+)
+print(f"Generated: {index_cols3}")
+print("Expected: \"name\" text_pattern_ops  DESC")
+
+# Edge case 4: Multiple empty col_suffixes
+print("\nEdge case 4: Multiple empty col_suffixes")
+index_cols4 = IndexColumns(
+    table="schema_author", 
+    columns=["name", "age"], 
+    quote_name=quote_name, 
+    col_suffixes=["", ""],  # Both empty
+    opclasses=["text_pattern_ops", "int4_ops"]
+)
+print(f"Generated: {index_cols4}")
+print("Expected: \"name\" text_pattern_ops, \"age\" int4_ops")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..f3d766caa9
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+
+# Add the Django path
+sys.path.insert(0, '/testbed')
+
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+print("Testing GitHub issue examples:")
+print("=" * 50)
+
+# Example 1 from issue: Index with descending order (should use regular Columns, not IndexColumns)
+print("\nExample 1: Index with descending order")
+from django.db.backends.ddl_references import Columns
+index_cols = Columns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=["DESC"]  # DESC for descending order
+)
+result = str(index_cols)
+expected = '"name"DESC'
+print(f"Generated: {result}")
+print(f"Expected:  {expected}")
+print(f"Match: {result == expected}")
+
+# Example 2 from issue: Index with opclasses but no explicit ordering
+print("\nExample 2: Index with opclasses but no explicit ordering")
+index_cols2 = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=[""],  # Empty string for ascending order
+    opclasses=["text_pattern_ops"]
+)
+result2 = str(index_cols2)
+expected2 = '"name" text_pattern_ops'
+print(f"Generated: {result2}")
+print(f"Expected:  {expected2}")
+print(f"Match: {result2 == expected2}")
+print(f"No extra whitespace: {'  ' not in result2}")
+
+# Example 3 from issue: Index with opclasses and descending order
+print("\nExample 3: Index with opclasses and descending order")
+index_cols3 = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=["DESC"],  # DESC for descending order
+    opclasses=["text_pattern_ops"]
+)
+result3 = str(index_cols3)
+expected3 = '"name" text_pattern_ops DESC'
+print(f"Generated: {result3}")
+print(f"Expected:  {expected3}")
+print(f"Match: {result3 == expected3}")
+
+print("\n" + "=" * 50)
+print("All examples should match their expected outputs without extra whitespace!")
\ No newline at end of file
diff --git a/test_index_columns.py b/test_index_columns.py
new file mode 100644
index 0000000000..6afeece50e
--- /dev/null
+++ b/test_index_columns.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+
+# Add the Django path
+sys.path.insert(0, '/testbed')
+
+from django.db.backends.ddl_references import IndexColumns
+from django.test import SimpleTestCase
+
+class IndexColumnsTests(SimpleTestCase):
+    def setUp(self):
+        self.quote_name = lambda name: f'"{name}"'
+
+    def test_index_with_opclasses_no_ordering(self):
+        """Test index with opclasses but no explicit ordering (should not have extra whitespace)"""
+        index_cols = IndexColumns(
+            table="schema_author", 
+            columns=["name"], 
+            quote_name=self.quote_name, 
+            col_suffixes=[""],  # Empty string for ascending order
+            opclasses=["text_pattern_ops"]
+        )
+        result = str(index_cols)
+        expected = '"name" text_pattern_ops'
+        self.assertEqual(result, expected)
+        self.assertNotIn('  ', result)  # Should not have double spaces
+
+    def test_index_with_opclasses_and_descending_order(self):
+        """Test index with opclasses and descending order (should have proper whitespace)"""
+        index_cols = IndexColumns(
+            table="schema_author", 
+            columns=["name"], 
+            quote_name=self.quote_name, 
+            col_suffixes=["DESC"],  # DESC for descending order
+            opclasses=["text_pattern_ops"]
+        )
+        result = str(index_cols)
+        expected = '"name" text_pattern_ops DESC'
+        self.assertEqual(result, expected)
+
+    def test_multiple_columns_mixed_ordering(self):
+        """Test multiple columns with mixed ordering"""
+        index_cols = IndexColumns(
+            table="schema_author", 
+            columns=["name", "age"], 
+            quote_name=self.quote_name, 
+            col_suffixes=["", "DESC"],  # First ascending, second descending
+            opclasses=["text_pattern_ops", "int4_ops"]
+        )
+        result = str(index_cols)
+        expected = '"name" text_pattern_ops, "age" int4_ops DESC'
+        self.assertEqual(result, expected)
+
+    def test_empty_col_suffixes(self):
+        """Test with empty col_suffixes list"""
+        index_cols = IndexColumns(
+            table="schema_author", 
+            columns=["name"], 
+            quote_name=self.quote_name, 
+            col_suffixes=[],  # Empty list
+            opclasses=["text_pattern_ops"]
+        )
+        result = str(index_cols)
+        expected = '"name" text_pattern_ops'
+        self.assertEqual(result, expected)
+
+    def test_col_suffixes_shorter_than_columns(self):
+        """Test when col_suffixes is shorter than columns"""
+        index_cols = IndexColumns(
+            table="schema_author", 
+            columns=["name", "age"], 
+            quote_name=self.quote_name, 
+            col_suffixes=["DESC"],  # Only one suffix for two columns
+            opclasses=["text_pattern_ops", "int4_ops"]
+        )
+        result = str(index_cols)
+        expected = '"name" text_pattern_ops DESC, "age" int4_ops'
+        self.assertEqual(result, expected)
+
+    def test_multiple_empty_col_suffixes(self):
+        """Test multiple empty col_suffixes"""
+        index_cols = IndexColumns(
+            table="schema_author", 
+            columns=["name", "age"], 
+            quote_name=self.quote_name, 
+            col_suffixes=["", ""],  # Both empty
+            opclasses=["text_pattern_ops", "int4_ops"]
+        )
+        result = str(index_cols)
+        expected = '"name" text_pattern_ops, "age" int4_ops'
+        self.assertEqual(result, expected)
+        # Should not have any extra spaces
+        self.assertNotIn('  ', result)
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..d7cdf631ce
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,15 @@
+DEBUG = True
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+
+SECRET_KEY = 'test'
\ No newline at end of file
diff --git a/test_whitespace_issue.py b/test_whitespace_issue.py
new file mode 100644
index 0000000000..a86d7f6ad5
--- /dev/null
+++ b/test_whitespace_issue.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import sys
+import os
+
+# Add the Django path
+sys.path.insert(0, '/testbed')
+
+from django.db.backends.ddl_references import IndexColumns
+
+# Mock quote_name function
+def quote_name(name):
+    return f'"{name}"'
+
+print("Testing the specific whitespace issue mentioned in GitHub issue:")
+print("=" * 60)
+
+# This is the exact case mentioned in the issue: opclasses without explicit ordering
+print("\nCase: Index with opclasses but no explicit ordering")
+index_cols = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=[""],  # Empty string for ascending order (no explicit ordering)
+    opclasses=["text_pattern_ops"]
+)
+result = str(index_cols)
+
+print(f"Generated SQL: {result}")
+print(f"Expected SQL: \"name\" text_pattern_ops")
+
+# Check for the specific issue: should NOT have extra whitespace after opclass
+has_extra_whitespace = '  ' in result
+print(f"Has extra whitespace: {has_extra_whitespace}")
+print(f"Correct format: {result == chr(34) + 'name' + chr(34) + ' text_pattern_ops'}")
+
+# Test the opposite case: with explicit ordering
+print("\nCase: Index with opclasses and explicit ordering")
+index_cols2 = IndexColumns(
+    table="schema_author", 
+    columns=["name"], 
+    quote_name=quote_name, 
+    col_suffixes=["DESC"],  # DESC for descending order
+    opclasses=["text_pattern_ops"]
+)
+result2 = str(index_cols2)
+
+print(f"Generated SQL: {result2}")
+print(f"Expected SQL: \"name\" text_pattern_ops DESC")
+print(f"Correct format: {result2 == chr(34) + 'name' + chr(34) + ' text_pattern_ops DESC'}")
+
+print("\n" + "=" * 60)
+print("The first case should NOT have extra whitespace after 'text_pattern_ops'")
+print("The second case should have proper spacing with 'DESC'")
\ No newline at end of file
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..cbbb96a732 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -580,9 +580,15 @@ class ModelAdmin(BaseModelAdmin):
     def __str__(self):
         return "%s.%s" % (self.model._meta.app_label, self.__class__.__name__)
 
+    def get_inlines(self, request, obj=None):
+        """
+        Hook for specifying custom inlines.
+        """
+        return self.inlines
+
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        for inline_class in self.get_inlines(request, obj):
             inline = inline_class(self.model, self.admin_site)
             if request:
                 if not (inline.has_view_or_change_permission(request, obj) or
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..b904a9f36b
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.contrib.admin.options import ModelAdmin
+
+# Test the complete functionality
+class TestModelAdmin(ModelAdmin):
+    inlines = ['DefaultInline']
+    
+    def get_inlines(self, request, obj=None):
+        """Custom get_inlines implementation"""
+        if hasattr(request, 'custom_inlines'):
+            return request.custom_inlines
+        elif obj and hasattr(obj, 'custom_inlines'):
+            return obj.custom_inlines
+        return super().get_inlines(request, obj)
+
+# Create minimal mock objects
+class MockModel:
+    class _meta:
+        app_label = 'test'
+
+class MockAdminSite:
+    pass
+
+class MockInline:
+    def __init__(self, model, admin_site):
+        self.model = model
+        self.admin_site = admin_site
+    
+    def has_view_or_change_permission(self, request, obj=None):
+        return True
+    
+    def has_add_permission(self, request, obj=None):
+        return True
+    
+    def has_delete_permission(self, request, obj=None):
+        return True
+
+if __name__ == '__main__':
+    print("Testing complete get_inlines functionality...")
+    
+    # Create ModelAdmin instance
+    model_admin = TestModelAdmin(MockModel(), MockAdminSite())
+    
+    # Test 1: Default behavior
+    request1 = type('Request', (), {})()
+    result1 = model_admin.get_inlines(request1, None)
+    print(f"âœ“ Default get_inlines: {result1}")
+    assert result1 == ['DefaultInline'], f"Expected ['DefaultInline'], got {result1}"
+    
+    # Test 2: Custom inlines from request
+    request2 = type('Request', (), {'custom_inlines': [MockInline]})()
+    result2 = model_admin.get_inlines(request2, None)
+    print(f"âœ“ Custom from request: {len(result2)} inline classes")
+    assert result2 == [MockInline], f"Expected [MockInline], got {result2}"
+    
+    # Test 3: Custom inlines from object
+    obj = type('Obj', (), {'custom_inlines': [MockInline]})()
+    request3 = type('Request', (), {})()
+    result3 = model_admin.get_inlines(request3, obj)
+    print(f"âœ“ Custom from object: {len(result3)} inline classes")
+    assert result3 == [MockInline], f"Expected [MockInline], got {result3}"
+    
+    # Test 4: get_inline_instances works with custom inlines
+    inline_instances = model_admin.get_inline_instances(request2, None)
+    print(f"âœ“ get_inline_instances with custom inlines: {len(inline_instances)} instances")
+    assert len(inline_instances) == 1, f"Expected 1 instance, got {len(inline_instances)}"
+    
+    # Test 5: Base ModelAdmin behavior
+    base_admin = ModelAdmin(MockModel(), MockAdminSite())
+    base_admin.inlines = ['BaseInline']
+    result5 = base_admin.get_inlines(request1, None)
+    print(f"âœ“ Base ModelAdmin get_inlines: {result5}")
+    assert result5 == ['BaseInline'], f"Expected ['BaseInline'], got {result5}"
+    
+    print("\nðŸŽ‰ All tests passed! The get_inlines hook is fully functional.")
+    print("\nThe implementation allows:")
+    print("1. Default behavior (returns self.inlines)")
+    print("2. Customization based on request object")
+    print("3. Customization based on model instance (obj)")
+    print("4. Backward compatibility with existing code")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8ebad34a88
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '/testbed')
+
+# Simple test to check if get_inlines method exists
+from django.contrib.admin.options import ModelAdmin
+
+# Test if get_inlines exists in ModelAdmin base class
+print("Testing if get_inlines exists in ModelAdmin base class:")
+if hasattr(ModelAdmin, 'get_inlines'):
+    print("get_inlines method exists in ModelAdmin")
+else:
+    print("get_inlines method does not exist in ModelAdmin yet")
+
+print("\nReproduction script completed")
\ No newline at end of file
diff --git a/test_get_inlines.py b/test_get_inlines.py
new file mode 100644
index 0000000000..dd5f0add98
--- /dev/null
+++ b/test_get_inlines.py
@@ -0,0 +1,86 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.insert(0, '/testbed')
+
+from django.contrib.admin.options import ModelAdmin
+
+# Create a test ModelAdmin class to verify the get_inlines hook works
+class TestModelAdmin(ModelAdmin):
+    inlines = ['Inline1', 'Inline2']
+    
+    def get_inlines(self, request, obj=None):
+        """Override get_inlines to customize based on request/obj"""
+        if hasattr(request, 'custom_inlines'):
+            return request.custom_inlines
+        elif obj and hasattr(obj, 'custom_inlines'):
+            return obj.custom_inlines
+        return super().get_inlines(request, obj)
+
+# Test the implementation
+if __name__ == '__main__':
+    print("Testing get_inlines implementation...")
+    
+    # Test 1: Test the method exists and has correct signature
+    print("Test 1 - Method exists and has correct signature:")
+    assert hasattr(ModelAdmin, 'get_inlines'), "get_inlines method should exist"
+    import inspect
+    sig = inspect.signature(ModelAdmin.get_inlines)
+    params = list(sig.parameters.keys())
+    assert 'self' in params, "Method should have self parameter"
+    assert 'request' in params, "Method should have request parameter"
+    assert 'obj' in params, "Method should have obj parameter"
+    print("âœ“ Method signature is correct")
+    
+    # Test 2: Test default behavior
+    print("\nTest 2 - Default behavior:")
+    # Create a mock ModelAdmin instance with minimal setup
+    class MockModel:
+        class _meta:
+            app_label = 'test'
+    
+    class MockAdminSite:
+        pass
+    
+    model_admin = ModelAdmin(MockModel(), MockAdminSite())
+    model_admin.inlines = ['Inline1', 'Inline2']
+    
+    request = type('Request', (), {})()
+    result = model_admin.get_inlines(request, None)
+    print(f"Default get_inlines result: {result}")
+    assert result == ['Inline1', 'Inline2'], f"Expected ['Inline1', 'Inline2'], got {result}"
+    print("âœ“ Default behavior works correctly")
+    
+    # Test 3: Test that get_inline_instances uses get_inlines
+    print("\nTest 3 - get_inline_instances uses get_inlines:")
+    # Create a simple inline class for testing
+    class MockInline:
+        def __init__(self, model, admin_site):
+            self.model = model
+            self.admin_site = admin_site
+        
+        def has_view_or_change_permission(self, request, obj=None):
+            return True
+        
+        def has_add_permission(self, request, obj=None):
+            return True
+        
+        def has_delete_permission(self, request, obj=None):
+            return True
+    
+    # Mock the get_inlines method to return our mock inline class
+    original_get_inlines = model_admin.get_inlines
+    def mock_get_inlines(request, obj=None):
+        return [MockInline]
+    model_admin.get_inlines = mock_get_inlines
+    
+    # This should use our mocked get_inlines method
+    inline_instances = model_admin.get_inline_instances(request, None)
+    print(f"get_inline_instances returned {len(inline_instances)} instances")
+    assert len(inline_instances) == 1, f"Expected 1 inline instance, got {len(inline_instances)}"
+    print("âœ“ get_inline_instances calls get_inlines and returns correct number of instances")
+    
+    # Restore original method
+    model_admin.get_inlines = original_get_inlines
+    
+    print("\nAll tests passed! get_inlines hook is working correctly.")
\ No newline at end of file
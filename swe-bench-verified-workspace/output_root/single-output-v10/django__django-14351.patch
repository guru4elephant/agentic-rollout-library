diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..03eacd6ff9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Count
+
+# Create simple models to reproduce the issue
+class PropertyGroup(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class ManagementAgent(models.Model):
+    name = models.CharField(max_length=100)
+    property_groups = models.ManyToManyField(PropertyGroup)
+    
+    class Meta:
+        app_label = 'test'
+
+class ManagerTicketRating(models.Model):
+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    date = models.DateField()
+    average = models.FloatField()
+    
+    class Meta:
+        app_label = 'test'
+
+def test_issue():
+    # Create database tables
+    from django.core.management.color import no_style
+    from django.db import connection
+    
+    style = no_style()
+    sql = connection.ops.sql_table_creation_suffix()
+    tables = connection.introspection.django_table_names()
+    
+    # Create tables manually
+    with connection.cursor() as cursor:
+        for model in [PropertyGroup, ManagementAgent, ManagerTicketRating]:
+            sql = connection.ops.sql_create_table(model._meta, style)
+            cursor.execute(sql)
+    
+    # Create some test data
+    pg1 = PropertyGroup.objects.create(name="Group1")
+    pg2 = PropertyGroup.objects.create(name="Group2")
+    
+    agent1 = ManagementAgent.objects.create(name="Agent1")
+    agent1.property_groups.add(pg1)
+    
+    agent2 = ManagementAgent.objects.create(name="Agent2")
+    agent2.property_groups.add(pg2)
+    
+    # Create ticket ratings
+    ManagerTicketRating.objects.create(agent=agent1, date="2023-01-01", average=4.5)
+    ManagerTicketRating.objects.create(agent=agent2, date="2023-01-02", average=3.8)
+    
+    # This should work (using id__in)
+    property_groups = PropertyGroup.objects.all()
+    queryset = ManagerTicketRating.objects.annotate(Count("agent__property_groups"))
+    
+    try:
+        result1 = queryset.filter(
+            Q(agent__property_groups__id__in=property_groups.values_list("id", flat=True))
+            | Q(agent__property_groups__count=0)
+        ).distinct()
+        print("✓ Q with id__in works:", result1.count())
+    except Exception as e:
+        print("✗ Q with id__in failed:", str(e))
+    
+    # This should fail (using __in)
+    try:
+        result2 = queryset.filter(
+            Q(agent__property_groups__in=property_groups)
+            | Q(agent__property_groups__count=0)
+        ).distinct()
+        print("✓ Q with __in works:", result2.count())
+    except Exception as e:
+        print("✗ Q with __in failed:", str(e))
+
+if __name__ == "__main__":
+    test_issue()
\ No newline at end of file
diff --git a/reproduce_simple.py b/reproduce_simple.py
new file mode 100644
index 0000000000..ef6dd75279
--- /dev/null
+++ b/reproduce_simple.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.db.models import Q, Count
+
+# Create simple models to reproduce the issue
+class PropertyGroup(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test'
+
+class ManagementAgent(models.Model):
+    name = models.CharField(max_length=100)
+    property_groups = models.ManyToManyField(PropertyGroup)
+    
+    class Meta:
+        app_label = 'test'
+
+class ManagerTicketRating(models.Model):
+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)
+    date = models.DateField()
+    average = models.FloatField()
+    
+    class Meta:
+        app_label = 'test'
+
+def test_issue():
+    # Just test the query generation without executing
+    property_groups = PropertyGroup.objects.all()
+    queryset = ManagerTicketRating.objects.annotate(Count("agent__property_groups"))
+    
+    # This should work (using id__in)
+    try:
+        q1 = queryset.filter(
+            Q(agent__property_groups__id__in=property_groups.values_list("id", flat=True))
+            | Q(agent__property_groups__count=0)
+        ).distinct()
+        print("✓ Q with id__in query generated successfully")
+        print("SQL:", str(q1.query))
+    except Exception as e:
+        print("✗ Q with id__in failed:", str(e))
+    
+    # This should fail (using __in)
+    try:
+        q2 = queryset.filter(
+            Q(agent__property_groups__in=property_groups)
+            | Q(agent__property_groups__count=0)
+        ).distinct()
+        print("✓ Q with __in query generated successfully")
+        print("SQL:", str(q2.query))
+    except Exception as e:
+        print("✗ Q with __in failed:", str(e))
+
+if __name__ == "__main__":
+    test_issue()
\ No newline at end of file
diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..b8b4a2151b 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -92,7 +92,8 @@ reverse_lazy = lazy(reverse, str)
 
 def clear_url_caches():
     get_callable.cache_clear()
-    get_resolver.cache_clear()
+    from .resolvers import _get_resolver_cached
+    _get_resolver_cached.cache_clear()
     get_ns_resolver.cache_clear()
 
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..0e2aa4c3d0 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -63,10 +63,15 @@ class ResolverMatch:
         )
 
 
-@functools.lru_cache(maxsize=None)
 def get_resolver(urlconf=None):
+    # Normalize urlconf to ensure consistent caching
+    # Both None and settings.ROOT_URLCONF should use the same cache key
     if urlconf is None:
         urlconf = settings.ROOT_URLCONF
+    return _get_resolver_cached(urlconf)
+
+@functools.lru_cache(maxsize=None)
+def _get_resolver_cached(urlconf):
     return URLResolver(RegexPattern(r'^/'), urlconf)
 
 
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..bff12d03f7
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+Final comprehensive test of the URLResolver caching fix.
+"""
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Set up minimal Django configuration
+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.settings'
+
+# Configure Django settings manually to avoid full setup
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='tests.urls',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+# Import the functions we want to test
+from django.urls.resolvers import get_resolver, _get_resolver_cached
+from django.urls.base import clear_url_caches
+
+print("=== Final Comprehensive Test ===")
+print("Testing the URLResolver caching optimization fix")
+
+# Clear any existing cache
+clear_url_caches()
+
+# Test 1: Multiple calls with different parameters should return same instance
+print("\n1. Testing cache consistency:")
+resolver_none = get_resolver(None)
+resolver_explicit = get_resolver(settings.ROOT_URLCONF)
+
+print(f"   get_resolver(None): {resolver_none}")
+print(f"   get_resolver(ROOT_URLCONF): {resolver_explicit}")
+print(f"   Same instance? {resolver_none is resolver_explicit}")
+
+# Test 2: Cache statistics should show proper caching
+print("\n2. Testing cache statistics:")
+cache_info = _get_resolver_cached.cache_info()
+print(f"   Cache info: {cache_info}")
+print(f"   Expected: 1 miss, 1 hit")
+print(f"   Actual: {cache_info.misses} misses, {cache_info.hits} hits")
+
+# Test 3: Cache clearing should work
+print("\n3. Testing cache clearing:")
+clear_url_caches()
+cache_info_after_clear = _get_resolver_cached.cache_info()
+print(f"   Cache after clear: {cache_info_after_clear}")
+print(f"   Cache cleared properly? {cache_info_after_clear.currsize == 0}")
+
+# Summary
+print("\n=== SUMMARY ===")
+success = (
+    resolver_none is resolver_explicit and
+    cache_info.misses == 1 and
+    cache_info.hits == 1 and
+    cache_info_after_clear.currsize == 0
+)
+
+if success:
+    print("✅ ALL TESTS PASSED! The optimization fix is working correctly.")
+    print("   - Multiple calls with None/ROOT_URLCONF return same instance")
+    print("   - Cache statistics show proper hits/misses")
+    print("   - Cache clearing works correctly")
+else:
+    print("❌ SOME TESTS FAILED!")
+    print(f"   Same instance: {resolver_none is resolver_explicit}")
+    print(f"   Misses: {cache_info.misses} (expected: 1)")
+    print(f"   Hits: {cache_info.hits} (expected: 1)")
+    print(f"   Cache cleared: {cache_info_after_clear.currsize == 0}")
\ No newline at end of file
diff --git a/reproduce_fixed_issue.py b/reproduce_fixed_issue.py
new file mode 100644
index 0000000000..384b4c0aa8
--- /dev/null
+++ b/reproduce_fixed_issue.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+"""
+Demonstration that the URLResolver caching issue has been fixed.
+This script shows that get_resolver(None) and get_resolver(settings.ROOT_URLCONF)
+now return the same cached instance, preventing duplicate URLResolver construction.
+"""
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Set up minimal Django configuration
+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.settings'
+
+# Configure Django settings manually
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='tests.urls',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+from django.urls.resolvers import get_resolver, _get_resolver_cached
+from django.urls.base import clear_url_caches
+
+print("=== URLResolver Caching Issue Fix Demonstration ===")
+print()
+print("BEFORE THE FIX:")
+print("get_resolver(None) and get_resolver(settings.ROOT_URLCONF)")
+print("would create two different URLResolver instances, causing")
+print("duplicate _populate() calls and wasted memory.")
+print()
+print("AFTER THE FIX:")
+print("Both calls return the same cached instance, optimizing performance.")
+
+# Clear cache to start fresh
+clear_url_caches()
+
+print()
+print("Demonstration:")
+print("1. First call: get_resolver(None)")
+resolver1 = get_resolver(None)
+print(f"   -> {resolver1}")
+
+print("2. Second call: get_resolver(settings.ROOT_URLCONF)")
+resolver2 = get_resolver(settings.ROOT_URLCONF)
+print(f"   -> {resolver2}")
+
+print()
+print("Results:")
+print(f"Same instance? {resolver1 is resolver2}")
+print(f"Cache statistics: {_get_resolver_cached.cache_info()}")
+
+print()
+if resolver1 is resolver2:
+    print("✅ SUCCESS: The issue has been fixed!")
+    print("   Only one URLResolver instance is created and cached.")
+    print("   This prevents duplicate _populate() calls and saves memory.")
+else:
+    print("❌ ISSUE STILL EXISTS: Different instances are being created.")
+
+print()
+print("This optimization is particularly beneficial for applications")
+print("with large URL configurations that call reverse() or other")
+print("URL resolution functions both at import time and during request handling.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6c74196d33
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with multiple URLResolver construction.
+The issue is that get_resolver() creates different cached instances
+when called with None vs when called with settings.ROOT_URLCONF.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+# Mock the settings module
+class MockSettings:
+    ROOT_URLCONF = 'tests.urls'
+
+# Mock the necessary modules
+import types
+sys.modules['django.conf'] = types.ModuleType('django.conf')
+sys.modules['django.conf'].settings = MockSettings()
+
+# Import the function we want to test
+from django.urls.resolvers import get_resolver
+
+print("=== Reproducing the URLResolver caching issue ===")
+print(f"settings.ROOT_URLCONF: {MockSettings.ROOT_URLCONF}")
+
+# First call - with urlconf=None (should use settings.ROOT_URLCONF)
+print("\n1. Calling get_resolver(None)")
+resolver1 = get_resolver(None)
+print(f"   Resolver object: {resolver1}")
+print(f"   Cache info: {get_resolver.cache_info()}")
+
+# Second call - with explicit settings.ROOT_URLCONF
+print("\n2. Calling get_resolver(settings.ROOT_URLCONF)")
+resolver2 = get_resolver(MockSettings.ROOT_URLCONF)
+print(f"   Resolver object: {resolver2}")
+print(f"   Cache info: {get_resolver.cache_info()}")
+
+# Check if they are the same object (they should be if caching works properly)
+print(f"\n3. Comparison:")
+print(f"   resolver1 is resolver2: {resolver1 is resolver2}")
+print(f"   resolver1 == resolver2: {resolver1 == resolver2}")
+
+# The issue: we have two different cached instances
+print(f"\n4. Cache statistics show two different calls:")
+print(f"   Cache hits: {get_resolver.cache_info().hits}")
+print(f"   Cache misses: {get_resolver.cache_info().misses}")
+
+if get_resolver.cache_info().misses > 1:
+    print("   ❌ ISSUE CONFIRMED: Multiple URLResolver instances created!")
+else:
+    print("   ✅ No issue: Only one URLResolver instance created")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..e794da11a8
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+"""
+Simple test to verify the caching logic without importing Django.
+"""
+
+import functools
+
+# Mock settings
+class MockSettings:
+    ROOT_URLCONF = 'tests.urls'
+
+# Test the original behavior (problematic)
+@functools.lru_cache(maxsize=None)
+def original_get_resolver(urlconf=None):
+    if urlconf is None:
+        urlconf = MockSettings.ROOT_URLCONF
+    return f"URLResolver_for_{urlconf}"
+
+# Test the fixed behavior
+def fixed_get_resolver(urlconf=None):
+    # Normalize before cache lookup
+    if urlconf is None:
+        urlconf = MockSettings.ROOT_URLCONF
+    return _get_resolver_cached(urlconf)
+
+@functools.lru_cache(maxsize=None)
+def _get_resolver_cached(urlconf):
+    return f"URLResolver_for_{urlconf}"
+
+print("=== Testing Original Behavior ===")
+res1 = original_get_resolver(None)
+res2 = original_get_resolver(MockSettings.ROOT_URLCONF)
+print(f"get_resolver(None) = {res1}")
+print(f"get_resolver(ROOT_URLCONF) = {res2}")
+print(f"Same object? {res1 is res2}")
+print(f"Cache info: {original_get_resolver.cache_info()}")
+
+print("\n=== Testing Fixed Behavior ===")
+res1 = fixed_get_resolver(None)
+res2 = fixed_get_resolver(MockSettings.ROOT_URLCONF)
+print(f"get_resolver(None) = {res1}")
+print(f"get_resolver(ROOT_URLCONF) = {res2}")
+print(f"Same object? {res1 is res2}")
+print(f"Cache info: {_get_resolver_cached.cache_info()}")
+
+print("\n=== Expected Behavior ===")
+print("Original: Should have 2 cache misses (problematic)")
+print("Fixed: Should have 1 cache miss (correct)")
\ No newline at end of file
diff --git a/test_cache_clear.py b/test_cache_clear.py
new file mode 100644
index 0000000000..761474e94a
--- /dev/null
+++ b/test_cache_clear.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Test the clear_url_caches function after the fix.
+"""
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Set up minimal Django configuration
+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.settings'
+
+# Configure Django settings manually to avoid full setup
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='tests.urls',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+# Now import the functions we want to test
+from django.urls.resolvers import get_resolver, _get_resolver_cached
+from django.urls.base import clear_url_caches
+
+print("=== Testing clear_url_caches Function ===")
+
+# First call to populate cache
+print("1. Calling get_resolver(None)")
+resolver1 = get_resolver(None)
+print(f"   Cache info before clear: {_get_resolver_cached.cache_info()}")
+
+# Clear the cache
+print("2. Clearing URL caches")
+clear_url_caches()
+print(f"   Cache info after clear: {_get_resolver_cached.cache_info()}")
+
+# Second call after clearing cache
+print("3. Calling get_resolver(None) again")
+resolver2 = get_resolver(None)
+print(f"   Cache info after second call: {_get_resolver_cached.cache_info()}")
+
+# Check if cache was properly cleared
+cache_info = _get_resolver_cached.cache_info()
+if cache_info.currsize == 1 and cache_info.misses == 1:
+    print("✅ SUCCESS: clear_url_caches is working correctly!")
+else:
+    print(f"❌ FAILURE: clear_url_caches is not working. Cache info: {cache_info}")
\ No newline at end of file
diff --git a/test_django_fix.py b/test_django_fix.py
new file mode 100644
index 0000000000..0ac1d3118b
--- /dev/null
+++ b/test_django_fix.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python3
+"""
+Test the actual Django fix with minimal imports.
+"""
+
+import os
+import sys
+sys.path.insert(0, '.')
+
+# Set up minimal Django configuration
+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.settings'
+
+# Configure Django settings manually to avoid full setup
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF='tests.urls',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+
+# Now import the function we want to test
+from django.urls.resolvers import get_resolver, _get_resolver_cached
+
+print("=== Testing Django URL Resolver Caching Fix ===")
+
+# Clear any existing cache
+_get_resolver_cached.cache_clear()
+
+# First call with None (should use settings.ROOT_URLCONF internally)
+print("1. Calling get_resolver(None)")
+resolver1 = get_resolver(None)
+print(f"   Resolver: {resolver1}")
+
+# Second call with explicit ROOT_URLCONF
+print("2. Calling get_resolver(settings.ROOT_URLCONF)")
+resolver2 = get_resolver(settings.ROOT_URLCONF)
+print(f"   Resolver: {resolver2}")
+
+# Check if they are the same object
+print(f"3. Comparison:")
+print(f"   Same object? {resolver1 is resolver2}")
+
+# The fix should ensure both calls return the same cached instance
+if resolver1 is resolver2:
+    print("✅ SUCCESS: Fix is working! Both calls return the same cached instance.")
+else:
+    print("❌ FAILURE: Fix is not working. Different instances created.")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..dbe74313cf
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""
+Test to verify the fix for URLResolver caching issue.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+# Mock the necessary modules to test the function
+import types
+
+# Mock settings
+class MockSettings:
+    ROOT_URLCONF = 'tests.urls'
+
+sys.modules['django.conf'] = types.ModuleType('django.conf')
+sys.modules['django.conf'].settings = MockSettings()
+
+# Import RegexPattern and URLResolver
+from django.urls.resolvers import RegexPattern, URLResolver
+
+# Now let's test the caching behavior
+import functools
+
+# Test the original behavior
+@functools.lru_cache(maxsize=None)
+def original_get_resolver(urlconf=None):
+    if urlconf is None:
+        urlconf = MockSettings.ROOT_URLCONF
+    return f"URLResolver_for_{urlconf}"
+
+# Test the fixed behavior
+def fixed_get_resolver(urlconf=None):
+    # Normalize before cache lookup
+    if urlconf is None:
+        urlconf = MockSettings.ROOT_URLCONF
+    return _get_resolver_cached(urlconf)
+
+@functools.lru_cache(maxsize=None)
+def _get_resolver_cached(urlconf):
+    return f"URLResolver_for_{urlconf}"
+
+print("=== Testing Original Behavior ===")
+res1 = original_get_resolver(None)
+res2 = original_get_resolver(MockSettings.ROOT_URLCONF)
+print(f"get_resolver(None) = {res1}")
+print(f"get_resolver(ROOT_URLCONF) = {res2}")
+print(f"Same object? {res1 is res2}")
+print(f"Cache info: {original_get_resolver.cache_info()}")
+
+print("\n=== Testing Fixed Behavior ===")
+res1 = fixed_get_resolver(None)
+res2 = fixed_get_resolver(MockSettings.ROOT_URLCONF)
+print(f"get_resolver(None) = {res1}")
+print(f"get_resolver(ROOT_URLCONF) = {res2}")
+print(f"Same object? {res1 is res2}")
+print(f"Cache info: {_get_resolver_cached.cache_info()}")
+
+print("\n=== Expected Behavior ===")
+print("Both calls should return the same object and have only 1 cache miss")
\ No newline at end of file
diff --git a/test_resolver_cache.py b/test_resolver_cache.py
new file mode 100644
index 0000000000..36775e146a
--- /dev/null
+++ b/test_resolver_cache.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python3
+"""
+Simple test to demonstrate the URLResolver caching issue.
+We'll directly test the get_resolver function behavior.
+"""
+
+import sys
+sys.path.insert(0, '.')
+
+# Let's look at the actual get_resolver function implementation
+def examine_get_resolver():
+    # Read the resolvers.py file to see the current implementation
+    with open('django/urls/resolvers.py', 'r') as f:
+        content = f.read()
+    
+    # Find the get_resolver function
+    lines = content.split('\n')
+    for i, line in enumerate(lines):
+        if 'def get_resolver(' in line:
+            print("Found get_resolver function:")
+            # Print the function and a few lines after it
+            for j in range(max(0, i-2), min(len(lines), i+10)):
+                print(f"{j+1:3}: {lines[j]}")
+            break
+
+if __name__ == '__main__':
+    examine_get_resolver()
\ No newline at end of file
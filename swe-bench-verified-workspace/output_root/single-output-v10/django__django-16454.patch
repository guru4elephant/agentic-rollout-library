diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3a48b1298e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+Script to reproduce the issue with management command subparsers not retaining error formatting.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.core.management.base import BaseCommand, CommandParser
+
+class TestCommand(BaseCommand):
+    def add_arguments(self, parser):
+        subparsers = parser.add_subparsers(required=True)
+        create = subparsers.add_parser("create")
+        create.add_argument("name")
+    
+    def handle(self, *args, **options):
+        pass
+
+def test_missing_subparser():
+    """Test missing subparser argument"""
+    print("Testing missing subparser argument...")
+    cmd = TestCommand()
+    parser = CommandParser(
+        missing_args_message="the following arguments are required: {create}",
+        called_from_command_line=True
+    )
+    cmd.add_arguments(parser)
+    try:
+        parser.parse_args([])
+    except SystemExit as e:
+        print(f"Exit code: {e.code}")
+    except Exception as e:
+        print(f"Exception: {e}")
+
+def test_missing_subparser_argument():
+    """Test missing argument to subparser"""
+    print("Testing missing argument to subparser...")
+    cmd = TestCommand()
+    parser = CommandParser(
+        missing_args_message="the following arguments are required: {create}",
+        called_from_command_line=True
+    )
+    cmd.add_arguments(parser)
+    try:
+        parser.parse_args(["create"])
+    except SystemExit as e:
+        print(f"Exit code: {e.code}")
+    except Exception as e:
+        print(f"Exception: {e}")
+
+if __name__ == "__main__":
+    print("=" * 50)
+    print("Reproducing the issue described in the GitHub issue")
+    print("=" * 50)
+    
+    test_missing_subparser()
+    print()
+    test_missing_subparser_argument()
\ No newline at end of file
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..93409fdb5f
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,114 @@
+#!/usr/bin/env python3
+"""
+Comprehensive test for both model_to_dict and construct_instance fixes.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict, construct_instance
+from django import forms
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()
+    is_active = models.BooleanField(default=True)
+    
+    class Meta:
+        app_label = 'test'
+
+def test_model_to_dict_fix():
+    """Test model_to_dict fix"""
+    print("Testing model_to_dict...")
+    instance = TestModel(name='Test Name', description='Test Description', is_active=True)
+    
+    # Test various field scenarios
+    test_cases = [
+        (None, 4, "fields=None"),
+        ([], 0, "fields=[]"),
+        (['name'], 1, "fields=['name']"),
+        (['name', 'description'], 2, "fields=['name', 'description']"),
+    ]
+    
+    for fields_value, expected_count, description in test_cases:
+        result = model_to_dict(instance, fields=fields_value)
+        actual_count = len(result)
+        
+        if actual_count == expected_count:
+            print(f"✓ PASS: {description} - {actual_count} fields")
+        else:
+            print(f"✗ FAIL: {description} - expected {expected_count}, got {actual_count}")
+            return False
+    
+    return True
+
+def test_construct_instance_fix():
+    """Test construct_instance fix"""
+    print("Testing construct_instance...")
+    
+    # Create a form class for testing
+    class TestForm(forms.ModelForm):
+        class Meta:
+            model = TestModel
+            fields = ['name', 'description', 'is_active']
+    
+    # Create form with data
+    form_data = {
+        'name': 'New Name',
+        'description': 'New Description',
+        'is_active': True
+    }
+    
+    form = TestForm(data=form_data)
+    if not form.is_valid():
+        print("Form validation failed")
+        return False
+    
+    # Create instance to populate
+    instance = TestModel()
+    
+    # Test with empty fields list
+    result_instance = construct_instance(form, instance, fields=[])
+    
+    # Should not populate any fields since fields=[] 
+    # Check that instance fields are still default/empty
+    if (instance.name is None or instance.name == '') and \
+       (instance.description is None or instance.description == '') and \
+       instance.is_active == True:  # Default value should remain
+        print("✓ PASS: construct_instance with fields=[] correctly skips all fields")
+        return True
+    else:
+        print(f"✗ FAIL: construct_instance with fields=[] populated fields: {instance.name}, {instance.description}, {instance.is_active}")
+        return False
+
+if __name__ == '__main__':
+    success1 = test_model_to_dict_fix()
+    success2 = test_construct_instance_fix()
+    
+    overall_success = success1 and success2
+    print(f"\nOverall result: {'PASS' if overall_success else 'FAIL'}")
+    sys.exit(0 if overall_success else 1)
\ No newline at end of file
diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..fadac848d0 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
@@ -431,7 +431,7 @@ class BaseModelForm(BaseForm):
         for f in chain(opts.many_to_many, opts.private_fields):
             if not hasattr(f, 'save_form_data'):
                 continue
-            if fields and f.name not in fields:
+            if fields is not None and f.name not in fields:
                 continue
             if exclude and f.name in exclude:
                 continue
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..885e3a6745
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+"""
+Reproduction script for the model_to_dict issue with empty fields list.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()
+    
+    class Meta:
+        app_label = 'test'
+
+def test_model_to_dict_with_empty_fields():
+    """Test that model_to_dict returns empty dict when fields=[]"""
+    # Create a test instance
+    instance = TestModel(name='Test Name', description='Test Description')
+    
+    # Test with fields=None (should return all fields)
+    result_none = model_to_dict(instance, fields=None)
+    print(f"fields=None: {result_none}")
+    
+    # Test with fields=[] (should return empty dict but currently returns all)
+    result_empty = model_to_dict(instance, fields=[])
+    print(f"fields=[]: {result_empty}")
+    
+    # Test with specific fields
+    result_specific = model_to_dict(instance, fields=['name'])
+    print(f"fields=['name']: {result_specific}")
+    
+    # Check if the bug exists
+    if len(result_empty) == 0:
+        print("✓ PASS: fields=[] returns empty dict")
+        return True
+    else:
+        print("✗ FAIL: fields=[] returns non-empty dict (should be empty)")
+        return False
+
+if __name__ == '__main__':
+    success = test_model_to_dict_with_empty_fields()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..82f52f13f3
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""
+Test edge cases for the model_to_dict fix.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        SECRET_KEY='test-secret-key',
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()
+    is_active = models.BooleanField(default=True)
+    
+    class Meta:
+        app_label = 'test'
+
+def test_edge_cases():
+    """Test various edge cases for model_to_dict"""
+    # Create a test instance
+    instance = TestModel(name='Test Name', description='Test Description', is_active=True)
+    
+    test_cases = [
+        # (fields_value, expected_key_count, description)
+        (None, 4, "fields=None (should return all fields)"),
+        ([], 0, "fields=[] (should return empty dict)"),
+        (['name'], 1, "fields=['name'] (should return only name)"),
+        (['name', 'description'], 2, "fields=['name', 'description'] (should return name and description)"),
+        (['nonexistent'], 0, "fields=['nonexistent'] (should return empty dict for non-existent field)"),
+    ]
+    
+    all_passed = True
+    
+    for fields_value, expected_count, description in test_cases:
+        result = model_to_dict(instance, fields=fields_value)
+        actual_count = len(result)
+        
+        if actual_count == expected_count:
+            print(f"✓ PASS: {description} - returned {actual_count} fields")
+        else:
+            print(f"✗ FAIL: {description} - expected {expected_count} fields, got {actual_count}")
+            all_passed = False
+        
+        print(f"  Result: {result}")
+    
+    # Test with exclude parameter as well
+    print("\nTesting with exclude parameter:")
+    result_with_exclude = model_to_dict(instance, fields=['name', 'description'], exclude=['description'])
+    if len(result_with_exclude) == 1 and 'name' in result_with_exclude:
+        print(f"✓ PASS: exclude works correctly - {result_with_exclude}")
+    else:
+        print(f"✗ FAIL: exclude didn't work correctly - {result_with_exclude}")
+        all_passed = False
+    
+    return all_passed
+
+if __name__ == '__main__':
+    success = test_edge_cases()
+    sys.exit(0 if success else 1)
\ No newline at end of file
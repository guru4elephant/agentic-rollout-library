diff --git a/astropy/units/core.py b/astropy/units/core.py
index e9bd986d33..8254a2b1be 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -1710,7 +1710,14 @@ class UnrecognizedUnit(IrreducibleUnit):
         _unrecognized_operator
 
     def __eq__(self, other):
-        other = Unit(other, parse_strict='silent')
+        if self is other:
+            return True
+            
+        try:
+            other = Unit(other, parse_strict='silent')
+        except (ValueError, UnitsError, TypeError):
+            return False
+            
         return isinstance(other, UnrecognizedUnit) and self.name == other.name
 
     def __ne__(self, other):
diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..e63f9f5652
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+def test_unrecognized_unit_comparison():
+    """Test comprehensive comparison behavior for UnrecognizedUnit"""
+    
+    # Create test units
+    x = u.Unit('asdf', parse_strict='silent')
+    y = u.Unit('asdf', parse_strict='silent')  # Same name
+    z = u.Unit('qwerty', parse_strict='silent')  # Different name
+    
+    print("=== Testing UnrecognizedUnit comparison behavior ===")
+    
+    # Test comparison with None (the main issue)
+    assert (x == None) is False, "UnrecognizedUnit should not equal None"
+    assert (x != None) is True, "UnrecognizedUnit should not equal None"
+    
+    # Test comparison with invalid types
+    assert x == 'invalid' is False, "UnrecognizedUnit should not equal string"
+    assert x == 123 is False, "UnrecognizedUnit should not equal number"
+    assert x == [] is False, "UnrecognizedUnit should not equal list"
+    assert x == {} is False, "UnrecognizedUnit should not equal dict"
+    
+    # Test comparison with same UnrecognizedUnit
+    assert x == x is True, "UnrecognizedUnit should equal itself"
+    
+    # Test comparison with same name UnrecognizedUnit
+    assert x == y is True, "UnrecognizedUnits with same name should be equal"
+    assert x != y is False, "UnrecognizedUnits with same name should be equal"
+    
+    # Test comparison with different name UnrecognizedUnit
+    assert x == z is False, "UnrecognizedUnits with different names should not be equal"
+    assert x != z is True, "UnrecognizedUnits with different names should not be equal"
+    
+    # Test comparison with regular units
+    assert x == u.m is False, "UnrecognizedUnit should not equal regular unit"
+    assert x != u.m is True, "UnrecognizedUnit should not equal regular unit"
+    
+    # Test comparison with dimensionless unit
+    assert x == u.dimensionless_unscaled is False, "UnrecognizedUnit should not equal dimensionless unit"
+    
+    print("All tests passed!")
+
+def test_regular_unit_comparison():
+    """Test that regular units still work correctly"""
+    
+    print("\n=== Testing regular unit comparison behavior ===")
+    
+    # Regular units should handle None comparison gracefully
+    assert u.m == None is False, "Regular unit should not equal None"
+    assert u.m != None is True, "Regular unit should not equal None"
+    
+    # Regular units should handle invalid types
+    assert u.m == 'invalid' is False, "Regular unit should not equal string"
+    assert u.m == 123 is False, "Regular unit should not equal number"
+    
+    print("All regular unit tests passed!")
+
+if __name__ == "__main__":
+    test_unrecognized_unit_comparison()
+    test_regular_unit_comparison()
+    print("\nâœ… All comprehensive tests passed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4f0ce7c7dc
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+# Reproduce the issue
+x = u.Unit('asdf', parse_strict='silent')
+print(f"Created UnrecognizedUnit: {x}")
+print(f"Type of x: {type(x)}")
+
+try:
+    result = x == None
+    print(f"x == None: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Also test with regular units for comparison
+y = u.m
+print(f"\nCreated regular unit: {y}")
+print(f"Type of y: {type(y)}")
+
+try:
+    result = y == None
+    print(f"y == None: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a55c516379
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+import astropy.units as u
+
+# Test various edge cases for UnrecognizedUnit comparison
+x = u.Unit('asdf', parse_strict='silent')
+print(f"Created UnrecognizedUnit: {x}")
+
+# Test comparison with None
+print(f"x == None: {x == None}")
+
+# Test comparison with other invalid types
+print(f"x == 'invalid': {x == 'invalid'}")  # Should be False
+print(f"x == 123: {x == 123}")  # Should be False
+
+# Test comparison with another UnrecognizedUnit with same name
+y = u.Unit('asdf', parse_strict='silent')
+print(f"x == y (same name): {x == y}")  # Should be True
+
+# Test comparison with another UnrecognizedUnit with different name
+z = u.Unit('qwerty', parse_strict='silent')
+print(f"x == z (different name): {x == z}")  # Should be False
+
+# Test comparison with regular unit
+print(f"x == u.m: {x == u.m}")  # Should be False
+
+# Test comparison with itself
+print(f"x == x: {x == x}")  # Should be True
+
+# Test inequality
+print(f"x != None: {x != None}")  # Should be True
+print(f"x != y: {x != y}")  # Should be False (since they have same name)
\ No newline at end of file
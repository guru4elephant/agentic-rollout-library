diff --git a/astropy/table/table.py b/astropy/table/table.py
index 5afe2127a3..7e67085790 100644
--- a/astropy/table/table.py
+++ b/astropy/table/table.py
@@ -1243,6 +1243,11 @@ class Table:
         # mixin class
         if (not isinstance(data, Column) and not data_is_mixin
                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):
+            warnings.warn("Adding a structured ndarray to a Table currently converts it to "
+                         "NdarrayMixin. In a future version (astropy 5.2), structured ndarrays "
+                         "will be added as Column objects instead. To ensure future compatibility, "
+                         "wrap your structured array in a Column object explicitly, e.g., "
+                         "Column(structured_array).", FutureWarning)
             data = data.view(NdarrayMixin)
             data_is_mixin = True
 
diff --git a/pyproject.toml b/pyproject.toml
index 4e84dd196b..3c3d00c32d 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.22",
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1593f63216
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from astropy.table import Table
+
+# Create a structured numpy array
+structured_data = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+print("Structured array:")
+print(structured_data)
+print("Type:", type(structured_data))
+print("dtype:", structured_data.dtype)
+print("len(dtype):", len(structured_data.dtype))
+
+# Add it to a Table
+t = Table()
+t['structured_col'] = structured_data
+
+print("\nAfter adding to Table:")
+print(t['structured_col'])
+print("Type:", type(t['structured_col']))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..144eec25dc
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from astropy.table import Table
+
+# Test 1: Regular (non-structured) array
+print("=== Test 1: Regular array ===")
+regular_data = np.array([1, 2, 3])
+t1 = Table()
+t1['regular_col'] = regular_data
+print("Type:", type(t1['regular_col']))
+print()
+
+# Test 2: Single-field structured array (should not trigger warning)
+print("=== Test 2: Single-field structured array ===")
+single_field_data = np.array([(1,), (2,)], dtype=[('x', 'i4')])
+t2 = Table()
+t2['single_field_col'] = single_field_data
+print("Type:", type(t2['single_field_col']))
+print("len(dtype):", len(single_field_data.dtype))
+print()
+
+# Test 3: Multi-field structured array (should trigger warning)
+print("=== Test 3: Multi-field structured array ===")
+multi_field_data = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+t3 = Table()
+t3['multi_field_col'] = multi_field_data
+print("Type:", type(t3['multi_field_col']))
+print("len(dtype):", len(multi_field_data.dtype))
+print()
+
+# Test 4: Already a Column (should not trigger warning)
+print("=== Test 4: Already a Column ===")
+from astropy.table import Column
+col_data = Column(np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')]))
+t4 = Table()
+t4['col_col'] = col_data
+print("Type:", type(t4['col_col']))
\ No newline at end of file
diff --git a/test_warning_frequency.py b/test_warning_frequency.py
new file mode 100644
index 0000000000..97be746071
--- /dev/null
+++ b/test_warning_frequency.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import warnings
+import numpy as np
+from astropy.table import Table
+
+# Capture warnings
+warnings.filterwarnings("always")  # Ensure all warnings are captured
+
+# Create a structured numpy array
+structured_data = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+
+print("=== Adding same structured array multiple times ===")
+t = Table()
+
+# Add first time
+print("First addition:")
+t['col1'] = structured_data
+print(f"Type: {type(t['col1'])}")
+
+# Add second time
+print("\nSecond addition:")
+t['col2'] = structured_data
+print(f"Type: {type(t['col2'])}")
+
+# Add third time
+print("\nThird addition:")
+t['col3'] = structured_data
+print(f"Type: {type(t['col3'])}")
\ No newline at end of file
diff --git a/test_workaround.py b/test_workaround.py
new file mode 100644
index 0000000000..f34a583a86
--- /dev/null
+++ b/test_workaround.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python3
+
+import numpy as np
+from astropy.table import Table, Column
+
+# Create a structured numpy array
+structured_data = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U10')])
+print("Structured array:")
+print(structured_data)
+print("Type:", type(structured_data))
+
+# Test the suggested workaround: wrap in Column first
+wrapped_data = Column(structured_data)
+print("\nWrapped in Column:")
+print(wrapped_data)
+print("Type:", type(wrapped_data))
+
+# Add it to a Table
+t = Table()
+t['structured_col'] = wrapped_data
+
+print("\nAfter adding wrapped Column to Table:")
+print(t['structured_col'])
+print("Type:", type(t['structured_col']))
\ No newline at end of file
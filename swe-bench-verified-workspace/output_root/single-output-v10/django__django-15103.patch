diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..12f0d4caaa 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,7 +83,7 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..65c5442d8d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,10 +69,16 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
-    return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
-    )
+    if element_id is not None:
+        return format_html(
+            '<script id="{}" type="application/json">{}</script>',
+            element_id, mark_safe(json_str)
+        )
+    else:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
 
 
 def conditional_escape(text):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4392e4abc4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.template import Template, Context
+from django.utils.html import json_script
+
+def test_json_script_with_id():
+    """Test json_script with element_id provided"""
+    print("Testing json_script with element_id...")
+    data = {'test': 'data'}
+    result = json_script(data, 'test_id')
+    print(f"With ID: {result}")
+    return result
+
+def test_json_script_without_id():
+    """Test json_script without element_id (this should fail currently)"""
+    print("Testing json_script without element_id...")
+    try:
+        data = {'test': 'data'}
+        result = json_script(data)
+        print(f"Without ID: {result}")
+        return result
+    except Exception as e:
+        print(f"Error without ID: {e}")
+        return None
+
+# We'll focus on the direct function calls first since template configuration is complex
+# The main issue is with the json_script function itself
+
+if __name__ == '__main__':
+    print("=== Testing json_script functionality ===")
+    
+    # Test direct function calls
+    test_json_script_with_id()
+    test_json_script_without_id()
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..338baa1d3b
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.utils.html import json_script
+
+def test_json_script_with_id():
+    """Test json_script with element_id provided"""
+    print("Testing json_script with element_id...")
+    data = {'test': 'data'}
+    result = json_script(data, 'test_id')
+    print(f"With ID: {result}")
+    expected = '<script id="test_id" type="application/json">{"test": "data"}</script>'
+    assert result == expected, f"Expected: {expected}, Got: {result}"
+    print("✓ Passed")
+
+def test_json_script_without_id():
+    """Test json_script without element_id"""
+    print("Testing json_script without element_id...")
+    data = {'test': 'data'}
+    result = json_script(data)
+    print(f"Without ID: {result}")
+    expected = '<script type="application/json">{"test": "data"}</script>'
+    assert result == expected, f"Expected: {expected}, Got: {result}"
+    print("✓ Passed")
+
+def test_json_script_with_none_id():
+    """Test json_script with explicit None element_id"""
+    print("Testing json_script with explicit None element_id...")
+    data = {'test': 'data'}
+    result = json_script(data, None)
+    print(f"With None ID: {result}")
+    expected = '<script type="application/json">{"test": "data"}</script>'
+    assert result == expected, f"Expected: {expected}, Got: {result}"
+    print("✓ Passed")
+
+def test_json_script_with_empty_id():
+    """Test json_script with empty string element_id"""
+    print("Testing json_script with empty string element_id...")
+    data = {'test': 'data'}
+    result = json_script(data, '')
+    print(f"With empty ID: {result}")
+    expected = '<script id="" type="application/json">{"test": "data"}</script>'
+    assert result == expected, f"Expected: {expected}, Got: {result}"
+    print("✓ Passed")
+
+def test_json_script_complex_data():
+    """Test json_script with complex data structure"""
+    print("Testing json_script with complex data...")
+    data = {
+        'string': 'test',
+        'number': 42,
+        'boolean': True,
+        'list': [1, 2, 3],
+        'nested': {'key': 'value'}
+    }
+    result = json_script(data)
+    print(f"Complex data without ID: {result}")
+    # Should not contain id attribute
+    assert 'id=' not in result, f"Result should not contain id attribute: {result}"
+    assert 'type="application/json"' in result, f"Result should contain type attribute: {result}"
+    print("✓ Passed")
+
+if __name__ == '__main__':
+    print("=== Comprehensive json_script testing ===")
+    
+    test_json_script_with_id()
+    test_json_script_without_id()
+    test_json_script_with_none_id()
+    test_json_script_with_empty_id()
+    test_json_script_complex_data()
+    
+    print("All tests passed! ✓")
\ No newline at end of file
diff --git a/test_github_issue.py b/test_github_issue.py
new file mode 100644
index 0000000000..c15848571f
--- /dev/null
+++ b/test_github_issue.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+"""
+Test to verify that the GitHub issue is resolved:
+"Make the element_id argument of json_script optional"
+
+This test demonstrates the use-case described in the issue where
+someone wants to use json_script without an id when including
+the <script> inside a <template>.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.utils.html import json_script
+
+def test_github_issue_use_case():
+    """Test the specific use-case mentioned in the GitHub issue"""
+    print("Testing GitHub issue use-case: json_script without id for <template> usage")
+    
+    # Simulate data that would be used in a template
+    template_data = {
+        'items': [
+            {'name': 'Item 1', 'value': 100},
+            {'name': 'Item 2', 'value': 200},
+            {'name': 'Item 3', 'value': 300},
+        ],
+        'config': {
+            'max_items': 10,
+            'auto_update': True
+        }
+    }
+    
+    # This is the key part: using json_script without an id
+    # because it will be inside a <template> where id is not needed
+    result = json_script(template_data)
+    
+    print(f"Result without id: {result}")
+    
+    # Verify the result doesn't contain an id attribute
+    assert 'id=' not in result, "Result should not contain id attribute when no element_id is provided"
+    
+    # Verify it still contains the correct script tag
+    assert 'type="application/json"' in result, "Result should contain the correct script type"
+    assert '{"items":' in result, "Result should contain the JSON data"
+    
+    print("✓ Use-case test passed: json_script works without element_id for template usage")
+
+def test_backwards_compatibility():
+    """Test that existing code with element_id still works"""
+    print("Testing backwards compatibility with element_id...")
+    
+    data = {'test': 'data'}
+    
+    # Test with element_id (existing behavior)
+    result_with_id = json_script(data, 'my-id')
+    assert 'id="my-id"' in result_with_id, "Should contain id when element_id is provided"
+    
+    # Test without element_id (new behavior)
+    result_without_id = json_script(data)
+    assert 'id=' not in result_without_id, "Should not contain id when no element_id is provided"
+    
+    print("✓ Backwards compatibility test passed")
+
+if __name__ == '__main__':
+    print("=== Testing GitHub Issue Resolution ===")
+    print("Issue: Make the element_id argument of json_script optional")
+    print()
+    
+    test_github_issue_use_case()
+    test_backwards_compatibility()
+    
+    print()
+    print("✅ All tests passed! The GitHub issue has been resolved.")
+    print("The element_id parameter is now optional for json_script.")
\ No newline at end of file
diff --git a/test_template_filter.py b/test_template_filter.py
new file mode 100644
index 0000000000..66e3c1e41c
--- /dev/null
+++ b/test_template_filter.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings with template backend
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'APP_DIRS': True,
+            },
+        ],
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+    )
+
+django.setup()
+
+from django.template import Template, Context
+
+def test_template_filter_with_id():
+    """Test template filter with element_id"""
+    print("Testing template filter with element_id...")
+    template = Template('{{ value|json_script:"test_id" }}')
+    context = Context({'value': {'test': 'data'}})
+    result = template.render(context)
+    print(f"Template with ID: {result}")
+    expected = '<script id="test_id" type="application/json">{"test": "data"}</script>'
+    assert result == expected, f"Expected: {expected}, Got: {result}"
+    print("✓ Passed")
+
+def test_template_filter_without_id():
+    """Test template filter without element_id"""
+    print("Testing template filter without element_id...")
+    template = Template('{{ value|json_script }}')
+    context = Context({'value': {'test': 'data'}})
+    result = template.render(context)
+    print(f"Template without ID: {result}")
+    expected = '<script type="application/json">{"test": "data"}</script>'
+    assert result == expected, f"Expected: {expected}, Got: {result}"
+    print("✓ Passed")
+
+if __name__ == '__main__':
+    print("=== Template filter json_script testing ===")
+    
+    test_template_filter_with_id()
+    test_template_filter_without_id()
+    
+    print("All template filter tests passed! ✓")
\ No newline at end of file